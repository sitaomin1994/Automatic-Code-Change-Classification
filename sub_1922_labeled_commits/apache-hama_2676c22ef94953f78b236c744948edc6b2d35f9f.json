{"application": "apache-hama", "csha": "2676c22ef94953f78b236c744948edc6b2d35f9f", "files": [{"BSPJobClient_cluster": {"actions": [{"root": "UPDATE from 1000 to 3000", "operations": ["UPD NumberLiteral: 1000 from 1000 to 3000"]}]}}, {"BSPJobClient_diff": {"operations": ["Update NumberLiteral: 1000(1082) to 3000"]}}, {"BSPMaster_cluster": {"actions": [{"root": "INS IfStatement to Block at 2", "operations": ["INS Block to IfStatement at 1", "INS IfStatement to IfStatement at 2", "INS IfStatement to Block at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2", "MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS IfStatement to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS QualifiedName: TaskStatus.State.FAILED to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: ts to MethodInvocation at 0", "INS SimpleName: getRunState to MethodInvocation at 1"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS SimpleName: jip to MethodInvocation at 0", "INS SimpleName: getStatus to MethodInvocation at 1", "INS QualifiedName: JobStatus.KILLED to InfixExpression: == at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getRunState to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: == at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: worker to VariableDeclarationFragment at 0", "INS SimpleName: Directive to SimpleType: Directive at 0", "INS SimpleName: ustus to MethodInvocation at 1", "INS SimpleName: ts to MethodInvocation at 0", "INS SimpleType: KillTaskAction to ClassInstanceCreation at 0", "INS SimpleName: worker to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleType: GroomServerAction to ArrayType: GroomServerAction[] at 0", "INS ArrayCreation to ClassInstanceCreation at 2", "INS SimpleName: d1 to MethodInvocation at 2", "INS SimpleName: GroomServerAction to SimpleType: GroomServerAction at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: currentGroomServerPeers to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: WorkerProtocol to SimpleType: WorkerProtocol at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ClassInstanceCreation to ArrayInitializer at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: getTaskId to MethodInvocation at 1", "INS SimpleType: WorkerProtocol to VariableDeclarationStatement at 0", "INS SimpleName: d1 to VariableDeclarationFragment at 0", "INS ArrayType: GroomServerAction[] to ArrayCreation at 0", "INS Block to IfStatement at 1", "INS SimpleName: findGroomServer to MethodInvocation at 0", "INS SimpleName: Directive to SimpleType: Directive at 0", "INS SimpleName: dispatch to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: Directive to ClassInstanceCreation at 0", "INS SimpleType: Directive to VariableDeclarationStatement at 0", "INS Dimension to ArrayType: GroomServerAction[] at 1", "INS SimpleName: KillTaskAction to SimpleType: KillTaskAction at 0", "INS VariableDeclarationStatement to Block at 1", "INS ArrayInitializer to ArrayCreation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: setRunState to MethodInvocation at 1", "INS QualifiedName: JobStatus.FAILED to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS QualifiedName: jip.status to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: failedTask to MethodInvocation at 1", "INS SimpleName: tip to MethodInvocation at 2", "INS SimpleName: jip to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ts to MethodInvocation at 3"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}]}}, {"BSPMaster_diff": {"operations": ["Insert IfStatement(924) into Block(1022) at 2", "Move InfixExpression: ==(891) into IfStatement(924) at 0", "Move Block(898) into IfStatement(924) at 1", "Insert IfStatement(923) into IfStatement(924) at 2", "Insert IfStatement(1020) into IfStatement(1021) at 2", "Move InfixExpression: ==(903) into IfStatement(923) at 0", "Insert Block(904) into IfStatement(923) at 1", "Move IfStatement(905) into IfStatement(923) at 2", "Move InfixExpression: ==(947) into IfStatement(1020) at 0", "Move Block(957) into IfStatement(1020) at 1", "Move IfStatement(958) into IfStatement(1020) at 2", "Insert InfixExpression: ==(909) into IfStatement(922) at 0", "Insert InfixExpression: ==(982) into IfStatement(1019) at 0", "Insert Block(1018) into IfStatement(1019) at 1", "Insert MethodInvocation(907) into InfixExpression: ==(909) at 0", "Insert QualifiedName: TaskStatus.State.FAILED(908) into InfixExpression: ==(909) at 1", "Insert ExpressionStatement(914) into Block(921) at 0", "Insert ExpressionStatement(920) into Block(921) at 1", "Insert MethodInvocation(980) into InfixExpression: ==(982) at 0", "Insert QualifiedName: JobStatus.KILLED(981) into InfixExpression: ==(982) at 1", "Insert VariableDeclarationStatement(990) into Block(1018) at 0", "Insert VariableDeclarationStatement(1012) into Block(1018) at 1", "Insert ExpressionStatement(1017) into Block(1018) at 2", "Insert SimpleName: ts(905) into MethodInvocation(907) at 0", "Insert SimpleName: getRunState(906) into MethodInvocation(907) at 1", "Insert MethodInvocation(913) into ExpressionStatement(914) at 0", "Insert MethodInvocation(919) into ExpressionStatement(920) at 0", "Insert MethodInvocation(978) into MethodInvocation(980) at 0", "Insert SimpleName: getRunState(979) into MethodInvocation(980) at 1", "Insert SimpleType: WorkerProtocol(984) into VariableDeclarationStatement(990) at 0", "Insert VariableDeclarationFragment(989) into VariableDeclarationStatement(990) at 1", "Insert SimpleType: Directive(992) into VariableDeclarationStatement(1012) at 0", "Insert VariableDeclarationFragment(1011) into VariableDeclarationStatement(1012) at 1", "Insert MethodInvocation(1016) into ExpressionStatement(1017) at 0", "Insert QualifiedName: jip.status(910) into MethodInvocation(913) at 0", "Insert SimpleName: setRunState(911) into MethodInvocation(913) at 1", "Insert QualifiedName: JobStatus.FAILED(912) into MethodInvocation(913) at 2", "Insert SimpleName: jip(915) into MethodInvocation(919) at 0", "Insert SimpleName: failedTask(916) into MethodInvocation(919) at 1", "Insert SimpleName: tip(917) into MethodInvocation(919) at 2", "Insert SimpleName: ts(918) into MethodInvocation(919) at 3", "Insert SimpleName: jip(976) into MethodInvocation(978) at 0", "Insert SimpleName: getStatus(977) into MethodInvocation(978) at 1", "Insert SimpleName: WorkerProtocol(983) into SimpleType: WorkerProtocol(984) at 0", "Insert SimpleName: worker(985) into VariableDeclarationFragment(989) at 0", "Insert MethodInvocation(988) into VariableDeclarationFragment(989) at 1", "Insert SimpleName: Directive(991) into SimpleType: Directive(992) at 0", "Insert SimpleName: d1(993) into VariableDeclarationFragment(1011) at 0", "Insert ClassInstanceCreation(1010) into VariableDeclarationFragment(1011) at 1", "Insert SimpleName: worker(1013) into MethodInvocation(1016) at 0", "Insert SimpleName: dispatch(1014) into MethodInvocation(1016) at 1", "Insert SimpleName: d1(1015) into MethodInvocation(1016) at 2", "Insert SimpleName: findGroomServer(986) into MethodInvocation(988) at 0", "Insert SimpleName: ustus(987) into MethodInvocation(988) at 1", "Insert SimpleType: Directive(995) into ClassInstanceCreation(1010) at 0", "Insert MethodInvocation(997) into ClassInstanceCreation(1010) at 1", "Insert ArrayCreation(1009) into ClassInstanceCreation(1010) at 2", "Insert SimpleName: Directive(994) into SimpleType: Directive(995) at 0", "Insert SimpleName: currentGroomServerPeers(996) into MethodInvocation(997) at 0", "Insert ArrayType: GroomServerAction[](1001) into ArrayCreation(1009) at 0", "Insert ArrayInitializer(1008) into ArrayCreation(1009) at 1", "Insert SimpleType: GroomServerAction(999) into ArrayType: GroomServerAction[](1001) at 0", "Insert Dimension(1000) into ArrayType: GroomServerAction[](1001) at 1", "Insert ClassInstanceCreation(1007) into ArrayInitializer(1008) at 0", "Insert SimpleName: GroomServerAction(998) into SimpleType: GroomServerAction(999) at 0", "Insert SimpleType: KillTaskAction(1003) into ClassInstanceCreation(1007) at 0", "Insert MethodInvocation(1006) into ClassInstanceCreation(1007) at 1", "Insert SimpleName: KillTaskAction(1002) into SimpleType: KillTaskAction(1003) at 0", "Insert SimpleName: ts(1004) into MethodInvocation(1006) at 0", "Insert SimpleName: getTaskId(1005) into MethodInvocation(1006) at 1", "Delete IfStatement(906)"]}}, {"BSPPeer_cluster": {"actions": [{"root": "INS TagElement to Javadoc at 0", "operations": ["INS TextElement: This class represents a BSP peer.  to TagElement at 0", "INS TagElement to Javadoc at 0"]}]}}, {"BSPPeer_diff": {"operations": ["Insert TagElement(66) into Javadoc(67) at 0", "Insert TextElement: This class represents a BSP peer. (65) into TagElement(66) at 0"]}}, {"BSPRPCProtocolVersion_cluster": {"actions": [{"root": "INS TagElement to Javadoc at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: RPC Protocol version to TagElement at 0"]}]}}, {"BSPRPCProtocolVersion_diff": {"operations": ["Insert TagElement(21) into Javadoc(22) at 0", "Insert TextElement: RPC Protocol version(20) into TagElement(21) at 0"]}}, {"CommitTaskAction_cluster": {"actions": []}}, {"CommitTaskAction_diff": {"operations": []}}, {"Directive_cluster": {"actions": []}}, {"Directive_diff": {"operations": []}}, {"GroomServer_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 35"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 46", "MOV MethodDeclaration to TypeDeclaration: class at 47"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public", "UPD Modifier: private from private to public"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS Block to MethodDeclaration at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 2"]}, {"root": "INS InfixExpression: || to IfStatement at 0", "operations": ["INS QualifiedName: TaskStatus.State.FAILED to InfixExpression: == at 1", "INS SimpleName: getRunState to MethodInvocation at 1", "INS SimpleName: taskStatus to MethodInvocation at 0", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS InfixExpression: == to InfixExpression: || at 1"]}, {"root": "INS EnhancedForStatement to Block at 1", "operations": ["INS SimpleType: TaskInProgress to ParameterizedType: Map.Entry<TaskAttemptID,TaskInProgress> at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS InfixExpression: && to IfStatement at 0", "INS IfStatement to Block at 3", "INS SimpleName: TaskAttemptID to SimpleType: TaskAttemptID at 0", "INS SimpleName: TaskStatus to SimpleType: TaskStatus at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: tip to VariableDeclarationFragment at 0", "INS SimpleName: taskStatus to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS IfStatement to Block at 0", "INS SimpleName: tip to MethodInvocation at 0", "INS SimpleName: isAlive to MethodInvocation at 1", "INS QualifiedName: tip.runner to MethodInvocation at 0", "INS SimpleName: entrySet to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getRunState to MethodInvocation at 1", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: doReport to MethodInvocation at 0", "INS SimpleType: TaskAttemptID to ParameterizedType: Map.Entry<TaskAttemptID,TaskInProgress> at 1", "INS MethodInvocation to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: TaskInProgress to SimpleType: TaskInProgress at 0", "INS ExpressionStatement to Block at 4", "INS ParameterizedType: Map.Entry<TaskAttemptID,TaskInProgress> to SingleVariableDeclaration at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS SimpleName: taskStatus to MethodInvocation at 0", "INS SimpleName: runningTasks to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS VariableDeclarationStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleType: TaskInProgress to VariableDeclarationStatement at 0", "INS SimpleType: TaskStatus to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: TaskStatus.State.FAILED to InfixExpression: != at 1", "INS EnhancedForStatement to Block at 1", "INS VariableDeclarationStatement to Block at 0", "INS QualifiedName: Map.Entry to SimpleType: Map.Entry at 0", "INS SimpleName: taskStatus to MethodInvocation at 1", "INS SimpleName: getStatus to MethodInvocation at 1", "INS SimpleType: Map.Entry to ParameterizedType: Map.Entry<TaskAttemptID,TaskInProgress> at 0", "INS SimpleName: TaskInProgress to SimpleType: TaskInProgress at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: e to SingleVariableDeclaration at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV InfixExpression: == to InfixExpression: || at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: KillTaskAction to SimpleType: KillTaskAction at 0", "INS SimpleType: KillTaskAction to VariableDeclarationStatement at 0", "INS SimpleName: killAction to VariableDeclarationFragment at 0", "INS SimpleName: KillTaskAction to SimpleType: KillTaskAction at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: action to CastExpression at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleType: KillTaskAction to CastExpression at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: tip to VariableDeclarationFragment at 0", "INS SimpleName: tasks to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: TaskInProgress to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: setRunState to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS SimpleName: getTaskID to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: tip.taskStatus to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: TaskStatus.State.FAILED to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: sleep to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "UPDATE from tasksToCleanup to tasks", "operations": ["UPD SimpleName: tasksToCleanup from tasksToCleanup to tasks"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tasksToCleanup to MethodInvocation at 0", "MOV SimpleName: put to MethodInvocation at 1", "MOV SimpleName: action to MethodInvocation at 0"]}, {"root": "UPDATE from put to containsKey", "operations": ["UPD SimpleName: put from put to containsKey"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV InfixExpression: && to InfixExpression: && at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from LOG to killAction", "operations": ["UPD SimpleName: LOG from LOG to killAction", "UPD SimpleName: action from action to killAction"]}, {"root": "UPDATE from InterruptedException to TaskInProgress", "operations": ["UPD SimpleName: InterruptedException from InterruptedException to TaskInProgress"]}, {"root": "MOVE from SimpleType: TaskInProgress", "operations": ["MOV SimpleName: InterruptedException to SimpleType: TaskInProgress at 0"]}, {"root": "UPDATE from e to tip", "operations": ["UPD SimpleName: e from e to tip"]}, {"root": "UPDATE from printStackTrace to killAndCleanup", "operations": ["UPD SimpleName: printStackTrace from printStackTrace to killAndCleanup"]}, {"root": "INS BooleanLiteral: true to MethodInvocation at 2", "operations": ["INS BooleanLiteral: true to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: LOG to MethodInvocation at 0", "MOV SimpleName: error to MethodInvocation at 1"]}, {"root": "UPDATE from error to getTaskID", "operations": ["UPD SimpleName: error from error to getTaskID"]}, {"root": "DEL TryStatement", "operations": ["DEL Block", "DEL StringLiteral: \"Fail to move action to cleanup list.\"", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: e", "DEL TryStatement", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL CatchClause", "DEL SimpleType: InterruptedException", "DEL ExpressionStatement"]}, {"root": "DEL Block", "operations": ["DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: doReport", "DEL SimpleName: isAlive", "DEL IfStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: InterruptedException", "DEL SimpleName: taskStatus", "DEL SimpleName: doReport", "DEL ThisExpression", "DEL Block", "DEL SimpleName: printStackTrace", "DEL WhileStatement", "DEL Block", "DEL Block", "DEL InfixExpression: &&", "DEL FieldAccess", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: InterruptedException", "DEL TryStatement", "DEL SimpleName: e", "DEL Block", "DEL PrefixExpression: !", "DEL SimpleName: runner", "DEL MethodInvocation", "DEL MethodInvocation", "DEL FieldAccess", "DEL ExpressionStatement", "DEL SimpleName: taskStatus", "DEL CatchClause", "DEL BooleanLiteral: true", "DEL BreakStatement", "DEL ThisExpression"]}]}}, {"GroomServer_diff": {"operations": ["Move ImportDeclaration(80) into CompilationUnit(3351) at 35", "Move MethodDeclaration(2567) into TypeDeclaration: class(3350) at 46", "Move MethodDeclaration(2655) into TypeDeclaration: class(3350) at 47", "Update Modifier: private(2495) to public", "Update Modifier: private(2568) to public", "Insert Block(2684) into MethodDeclaration(2685) at 4", "Move ExpressionStatement(2390) into Block(2684) at 0", "Move ExpressionStatement(2395) into Block(2684) at 1", "Move ExpressionStatement(2400) into Block(2684) at 2", "Move ExpressionStatement(2405) into Block(2684) at 3", "Move ExpressionStatement(2415) into Block(2684) at 4", "Move ExpressionStatement(2421) into Block(2684) at 5", "Insert InfixExpression: ||(1581) into IfStatement(1632) at 0", "Insert EnhancedForStatement(1239) into Block(1240) at 1", "Move InfixExpression: ==(2598) into InfixExpression: ||(1581) at 0", "Insert InfixExpression: ==(1580) into InfixExpression: ||(1581) at 1", "Move MethodInvocation(2439) into ExpressionStatement(1163) at 0", "Insert SingleVariableDeclaration(1172) into EnhancedForStatement(1239) at 0", "Insert MethodInvocation(1175) into EnhancedForStatement(1239) at 1", "Insert Block(1238) into EnhancedForStatement(1239) at 2", "Insert MethodInvocation(1578) into InfixExpression: ==(1580) at 0", "Insert QualifiedName: TaskStatus.State.FAILED(1579) into InfixExpression: ==(1580) at 1", "Insert VariableDeclarationStatement(888) into Block(918) at 0", "Insert IfStatement(917) into Block(918) at 1", "Move SimpleName: sleep(1144) into MethodInvocation(1162) at 1", "Insert ParameterizedType: Map.Entry<TaskAttemptID,TaskInProgress>(1170) into SingleVariableDeclaration(1172) at 0", "Insert SimpleName: e(1171) into SingleVariableDeclaration(1172) at 1", "Insert SimpleName: runningTasks(1173) into MethodInvocation(1175) at 0", "Insert SimpleName: entrySet(1174) into MethodInvocation(1175) at 1", "Insert VariableDeclarationStatement(1183) into Block(1238) at 0", "Insert VariableDeclarationStatement(1191) into Block(1238) at 1", "Move ExpressionStatement(2429) into Block(1238) at 2", "Insert IfStatement(1233) into Block(1238) at 3", "Insert ExpressionStatement(1237) into Block(1238) at 4", "Insert SimpleName: taskStatus(1576) into MethodInvocation(1578) at 0", "Insert SimpleName: getRunState(1577) into MethodInvocation(1578) at 1", "Insert SimpleType: KillTaskAction(881) into VariableDeclarationStatement(888) at 0", "Insert VariableDeclarationFragment(887) into VariableDeclarationStatement(888) at 1", "Insert MethodInvocation(894) into IfStatement(917) at 0", "Insert Block(916) into IfStatement(917) at 1", "Insert SimpleType: Map.Entry(1165) into ParameterizedType: Map.Entry<TaskAttemptID,TaskInProgress>(1170) at 0", "Insert SimpleType: TaskAttemptID(1167) into ParameterizedType: Map.Entry<TaskAttemptID,TaskInProgress>(1170) at 1", "Insert SimpleType: TaskInProgress(1169) into ParameterizedType: Map.Entry<TaskAttemptID,TaskInProgress>(1170) at 2", "Insert SimpleType: TaskInProgress(1177) into VariableDeclarationStatement(1183) at 0", "Insert VariableDeclarationFragment(1182) into VariableDeclarationStatement(1183) at 1", "Insert SimpleType: TaskStatus(1185) into VariableDeclarationStatement(1191) at 0", "Insert VariableDeclarationFragment(1190) into VariableDeclarationStatement(1191) at 1", "Insert InfixExpression: &&(1214) into IfStatement(1233) at 0", "Insert Block(1232) into IfStatement(1233) at 1", "Insert MethodInvocation(1236) into ExpressionStatement(1237) at 0", "Insert SimpleName: KillTaskAction(880) into SimpleType: KillTaskAction(881) at 0", "Insert SimpleName: killAction(882) into VariableDeclarationFragment(887) at 0", "Insert CastExpression(886) into VariableDeclarationFragment(887) at 1", "Update SimpleName: tasksToCleanup(880) to tasks", "Move SimpleName: tasksToCleanup(880) into MethodInvocation(894) at 0", "Update SimpleName: put(881) to containsKey", "Move SimpleName: put(881) into MethodInvocation(894) at 1", "Insert MethodInvocation(893) into MethodInvocation(894) at 2", "Insert VariableDeclarationStatement(905) into Block(916) at 0", "Insert ExpressionStatement(910) into Block(916) at 1", "Move ExpressionStatement(898) into Block(916) at 2", "Insert QualifiedName: Map.Entry(1164) into SimpleType: Map.Entry(1165) at 0", "Insert SimpleName: TaskAttemptID(1166) into SimpleType: TaskAttemptID(1167) at 0", "Insert SimpleName: TaskInProgress(1168) into SimpleType: TaskInProgress(1169) at 0", "Insert SimpleName: TaskInProgress(1176) into SimpleType: TaskInProgress(1177) at 0", "Insert SimpleName: tip(1178) into VariableDeclarationFragment(1182) at 0", "Insert MethodInvocation(1181) into VariableDeclarationFragment(1182) at 1", "Insert SimpleName: TaskStatus(1184) into SimpleType: TaskStatus(1185) at 0", "Insert SimpleName: taskStatus(1186) into VariableDeclarationFragment(1190) at 0", "Insert MethodInvocation(1189) into VariableDeclarationFragment(1190) at 1", "Move InfixExpression: &&(2463) into InfixExpression: &&(1214) at 0", "Insert PrefixExpression: !(1213) into InfixExpression: &&(1214) at 1", "Insert IfStatement(1226) into Block(1232) at 0", "Move ExpressionStatement(2478) into Block(1232) at 1", "Insert SimpleName: doReport(1234) into MethodInvocation(1236) at 0", "Insert SimpleName: taskStatus(1235) into MethodInvocation(1236) at 1", "Insert SimpleType: KillTaskAction(884) into CastExpression(886) at 0", "Insert SimpleName: action(885) into CastExpression(886) at 1", "Update SimpleName: action(882) to killAction", "Move SimpleName: action(882) into MethodInvocation(893) at 0", "Insert SimpleName: getTaskID(892) into MethodInvocation(893) at 1", "Insert SimpleType: TaskInProgress(896) into VariableDeclarationStatement(905) at 0", "Insert VariableDeclarationFragment(904) into VariableDeclarationStatement(905) at 1", "Insert MethodInvocation(909) into ExpressionStatement(910) at 0", "Insert SimpleName: e(1179) into MethodInvocation(1181) at 0", "Insert SimpleName: getValue(1180) into MethodInvocation(1181) at 1", "Insert SimpleName: tip(1187) into MethodInvocation(1189) at 0", "Insert SimpleName: getStatus(1188) into MethodInvocation(1189) at 1", "Insert MethodInvocation(1212) into PrefixExpression: !(1213) at 0", "Insert InfixExpression: !=(1219) into IfStatement(1226) at 0", "Insert Block(1225) into IfStatement(1226) at 1", "Insert SimpleName: KillTaskAction(883) into SimpleType: KillTaskAction(884) at 0", "Update SimpleName: InterruptedException(886) to TaskInProgress", "Move SimpleName: InterruptedException(886) into SimpleType: TaskInProgress(896) at 0", "Insert SimpleName: tip(897) into VariableDeclarationFragment(904) at 0", "Insert MethodInvocation(903) into VariableDeclarationFragment(904) at 1", "Insert QualifiedName: tip.taskStatus(906) into MethodInvocation(909) at 0", "Insert SimpleName: setRunState(907) into MethodInvocation(909) at 1", "Insert QualifiedName: TaskStatus.State.FAILED(908) into MethodInvocation(909) at 2", "Update SimpleName: e(895) to tip", "Update SimpleName: printStackTrace(896) to killAndCleanup", "Insert BooleanLiteral: true(913) into MethodInvocation(914) at 2", "Insert QualifiedName: tip.runner(1210) into MethodInvocation(1212) at 0", "Insert SimpleName: isAlive(1211) into MethodInvocation(1212) at 1", "Insert MethodInvocation(1217) into InfixExpression: !=(1219) at 0", "Insert QualifiedName: TaskStatus.State.FAILED(1218) into InfixExpression: !=(1219) at 1", "Move ExpressionStatement(2473) into Block(1225) at 0", "Insert SimpleName: tasks(898) into MethodInvocation(903) at 0", "Insert SimpleName: get(899) into MethodInvocation(903) at 1", "Insert MethodInvocation(902) into MethodInvocation(903) at 2", "Insert SimpleName: taskStatus(1215) into MethodInvocation(1217) at 0", "Insert SimpleName: getRunState(1216) into MethodInvocation(1217) at 1", "Update SimpleName: LOG(890) to killAction", "Move SimpleName: LOG(890) into MethodInvocation(902) at 0", "Update SimpleName: error(891) to getTaskID", "Move SimpleName: error(891) into MethodInvocation(902) at 1", "Delete MethodInvocation(883)", "Delete ExpressionStatement(884)", "Delete Block(885)", "Delete SimpleType: InterruptedException(887)", "Delete SimpleName: e(888)", "Delete SingleVariableDeclaration(889)", "Delete StringLiteral: \"Fail to move action to cleanup list.\"(892)", "Delete MethodInvocation(893)", "Delete ExpressionStatement(894)", "Delete Block(899)", "Delete CatchClause(900)", "Delete TryStatement(901)", "Delete BooleanLiteral: true(2422)", "Delete SimpleName: doReport(2430)", "Delete ThisExpression(2431)", "Delete SimpleName: taskStatus(2432)", "Delete FieldAccess(2433)", "Delete MethodInvocation(2434)", "Delete ExpressionStatement(2435)", "Delete Block(2441)", "Delete SimpleName: InterruptedException(2442)", "Delete SimpleType: InterruptedException(2443)", "Delete SimpleName: e(2444)", "Delete SingleVariableDeclaration(2445)", "Delete SimpleName: e(2446)", "Delete SimpleName: printStackTrace(2447)", "Delete MethodInvocation(2448)", "Delete ExpressionStatement(2449)", "Delete Block(2450)", "Delete CatchClause(2451)", "Delete TryStatement(2452)", "Delete SimpleName: runner(2464)", "Delete SimpleName: isAlive(2465)", "Delete MethodInvocation(2466)", "Delete PrefixExpression: !(2467)", "Delete InfixExpression: &&(2468)", "Delete SimpleName: doReport(2479)", "Delete ThisExpression(2480)", "Delete SimpleName: taskStatus(2481)", "Delete FieldAccess(2482)", "Delete MethodInvocation(2483)", "Delete ExpressionStatement(2484)", "Delete BreakStatement(2485)", "Delete Block(2486)", "Delete IfStatement(2487)", "Delete Block(2488)", "Delete WhileStatement(2489)", "Delete Block(2490)"]}}, {"GroomServerAction_cluster": {"actions": []}}, {"GroomServerAction_diff": {"operations": []}}, {"HeartbeatResponse_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL Javadoc", "DEL QualifiedName: org.apache.hama.bsp", "DEL TagElement", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: to you under the Apache License, Version 2.0 (the", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL PackageDeclaration", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: limitations under the License.", "DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: or more contributor license agreements.  See the NOTICE file"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.DataInput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.DataOutput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashMap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.conf.Configurable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.hadoop.conf.Configuration", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.io.Writable"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hadoop.io.WritableUtils"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: responseId", "DEL PrimitiveType: void", "DEL SimpleType: String", "DEL SimpleName: getGroomServers", "DEL Assignment: =", "DEL ReturnStatement", "DEL SimpleName: in", "DEL ArrayType: GroomServerAction[]", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL SimpleName: groomServerAddresses", "DEL SimpleName: actions", "DEL SimpleName: Override", "DEL SimpleName: actions", "DEL SingleVariableDeclaration", "DEL SimpleName: conf", "DEL FieldAccess", "DEL FieldAccess", "DEL SimpleName: in", "DEL SimpleType: String", "DEL SimpleName: groomServerAddresses", "DEL SimpleName: actionType", "DEL SimpleName: conf", "DEL MethodDeclaration", "DEL ParameterizedType: Map<String,String>", "DEL MethodDeclaration", "DEL SimpleName: write", "DEL SimpleName: toArray", "DEL Block", "DEL ParameterizedType: Map<String,String>", "DEL SimpleType: DataOutput", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: conf", "DEL SimpleName: responseId", "DEL ExpressionStatement", "DEL ForStatement", "DEL Block", "DEL VariableDeclarationFragment", "DEL PostfixExpression: ++", "DEL MethodDeclaration", "DEL Javadoc", "DEL SimpleName: write", "DEL SimpleName: actions", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: in", "DEL SimpleName: groomServers", "DEL ArrayAccess", "DEL SimpleName: out", "DEL MethodDeclaration", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL SimpleName: i", "DEL QualifiedName: groomServerNames.length", "DEL PrefixExpression: ++", "DEL VariableDeclarationFragment", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL SimpleName: readCompressedStringArray", "DEL Modifier: private", "DEL SimpleName: HashMap", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: HeartbeatResponse", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL ArrayAccess", "DEL SimpleName: put", "DEL SimpleName: String", "DEL InfixExpression: <", "DEL SimpleName: groomServers", "DEL NumberLiteral: 0", "DEL Modifier: public", "DEL FieldAccess", "DEL SimpleName: GroomServerAction", "DEL QualifiedName: GroomServerAction.ActionType", "DEL ArrayType: GroomServerAction[]", "DEL SimpleName: GroomServerAction", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: actions", "DEL EnhancedForStatement", "DEL SimpleName: groomServerAddresses", "DEL SimpleType: Writable", "DEL ExpressionStatement", "DEL SimpleName: out", "DEL SimpleName: out", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL SimpleName: i", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: groomServers", "DEL SimpleType: String", "DEL SimpleType: Configurable", "DEL ExpressionStatement", "DEL Modifier: public", "DEL Assignment: =", "DEL ArrayType: String[]", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL Block", "DEL SimpleName: readVInt", "DEL SimpleName: Configuration", "DEL SimpleName: String", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleType: IOException", "DEL Dimension", "DEL NumberLiteral: 0", "DEL SimpleName: readEnum", "DEL MethodDeclaration", "DEL SimpleType: GroomServerAction", "DEL SimpleType: List", "DEL SimpleName: actions", "DEL Assignment: =", "DEL SimpleName: groomServers", "DEL SimpleName: WritableUtils", "DEL QualifiedName: groomServerNames.length", "DEL SimpleType: GroomServerAction", "DEL SimpleName: i", "DEL Dimension", "DEL ExpressionStatement", "DEL SimpleName: setActions", "DEL SimpleName: action", "DEL SimpleName: GroomServerAction", "DEL SimpleName: WritableUtils", "DEL ExpressionStatement", "DEL ArrayType: String[]", "DEL SimpleName: length", "DEL ExpressionStatement", "DEL PrimitiveType: short", "DEL SimpleName: setResponseId", "DEL ExpressionStatement", "DEL ArrayType: GroomServerAction[]", "DEL SimpleType: Map", "DEL ThisExpression", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: length", "DEL SimpleName: actions", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: actions", "DEL PrimitiveType: int", "DEL SimpleName: GroomServerAction", "DEL SimpleName: responseId", "DEL Modifier: public", "DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: writeCompressedStringArray", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: String", "DEL SimpleName: WritableUtils", "DEL MethodInvocation", "DEL Assignment: =", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL SimpleType: String", "DEL SimpleName: out", "DEL ThisExpression", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: groomServers", "DEL SimpleName: Configuration", "DEL SimpleName: getResponseId", "DEL SingleVariableDeclaration", "DEL SimpleName: Map", "DEL ThisExpression", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleType: HashMap", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL ArrayAccess", "DEL ParameterizedType: ArrayList<String>", "DEL SimpleName: groomServers", "DEL Modifier: public", "DEL ThisExpression", "DEL QualifiedName: GroomServerAction.ActionType", "DEL SimpleType: String", "DEL SimpleName: writeVInt", "DEL SimpleName: i", "DEL SimpleName: actions", "DEL PrimitiveType: short", "DEL SimpleName: action", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: groomName", "DEL SimpleName: Override", "DEL SimpleName: responseId", "DEL MethodDeclaration", "DEL SimpleName: writeVInt", "DEL SimpleType: Configuration", "DEL ArrayType: String[]", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: groomServerAddresses", "DEL ArrayCreation", "DEL SimpleName: in", "DEL ExpressionStatement", "DEL Block", "DEL Assignment: =", "DEL SimpleName: out", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: setGroomServers", "DEL SimpleType: GroomServerAction", "DEL Assignment: =", "DEL SimpleType: String", "DEL ParameterizedType: Map<String,String>", "DEL SimpleName: WritableUtils", "DEL SimpleName: DataOutput", "DEL SimpleType: DataInput", "DEL FieldAccess", "DEL SimpleName: ArrayList", "DEL NumberLiteral: 0", "DEL SimpleType: String", "DEL PrimitiveType: void", "DEL SimpleName: add", "DEL SimpleName: IOException", "DEL IfStatement", "DEL SimpleName: String", "DEL Block", "DEL SimpleName: toArray", "DEL SimpleName: i", "DEL ThisExpression", "DEL SimpleName: Map", "DEL SimpleName: get", "DEL SimpleName: responseId", "DEL SimpleName: writeShort", "DEL SimpleName: i", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: setConf", "DEL SimpleType: Map", "DEL SimpleName: readCompressedStringArray", "DEL Modifier: public", "DEL SimpleName: conf", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: responseId", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: responseId", "DEL SimpleName: getActionType", "DEL SimpleName: getActions", "DEL ReturnStatement", "DEL SimpleName: groomServers", "DEL SimpleName: String", "DEL Dimension", "DEL SimpleName: String", "DEL Block", "DEL ArrayCreation", "DEL SimpleType: String", "DEL SimpleName: groomServers", "DEL FieldAccess", "DEL PrimitiveType: int", "DEL SimpleName: out", "DEL SimpleName: i", "DEL SimpleType: String", "DEL SimpleName: WritableUtils", "DEL SimpleName: actions", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: Override", "DEL QualifiedName: actions.length", "DEL SimpleName: WritableUtils", "DEL MethodInvocation", "DEL SimpleName: in", "DEL VariableDeclarationFragment", "DEL SimpleName: HeartbeatResponse", "DEL SimpleType: Configuration", "DEL ThisExpression", "DEL PrimitiveType: void", "DEL InfixExpression: <", "DEL SimpleName: writeEnum", "DEL Modifier: private", "DEL ParameterizedType: List<String>", "DEL SimpleName: List", "DEL MethodInvocation", "DEL SimpleName: groomServers", "DEL ArrayCreation", "DEL SimpleName: i", "DEL ArrayAccess", "DEL TypeDeclaration: class", "DEL ArrayType: GroomServerAction[]", "DEL SimpleType: Map", "DEL SimpleName: groomServers", "DEL SimpleType: String", "DEL SimpleName: responseId", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: GroomServerAction", "DEL PrimitiveType: short", "DEL SimpleName: WritableUtils", "DEL VariableDeclarationFragment", "DEL SimpleName: in", "DEL SimpleName: IOException", "DEL SimpleName: String", "DEL SimpleName: DataInput", "DEL SimpleName: actions", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: createAction", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL Modifier: public", "DEL SimpleName: GroomServerAction", "DEL SimpleName: out", "DEL PrimitiveType: void", "DEL SimpleName: String", "DEL IfStatement", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: actions", "DEL TextElement: A HeartbeatReponse class.", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: action", "DEL PrimitiveType: short", "DEL Dimension", "DEL TagElement", "DEL ThisExpression", "DEL ExpressionStatement", "DEL ArrayType: GroomServerAction[]", "DEL MethodDeclaration", "DEL SimpleName: actions", "DEL SimpleName: conf", "DEL PrimitiveType: void", "DEL SimpleType: IOException", "DEL SimpleName: String", "DEL SimpleName: groomServerAddresses", "DEL SimpleName: HeartbeatResponse", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL ParameterizedType: HashMap<String,String>", "DEL SimpleType: GroomServerAction.ActionType", "DEL PrimitiveType: int", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL SimpleName: groomServerNames", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL ForStatement", "DEL SimpleName: actionType", "DEL Block", "DEL Modifier: private", "DEL SimpleName: String", "DEL SimpleName: writeCompressedStringArray", "DEL Modifier: public", "DEL SimpleName: responseId", "DEL SimpleName: readShort", "DEL SimpleName: Configuration", "DEL SimpleName: String", "DEL ArrayType: String[]", "DEL FieldAccess", "DEL SimpleType: ArrayList", "DEL Block", "DEL SimpleType: String", "DEL SimpleName: keySet", "DEL Dimension", "DEL SimpleName: readFields", "DEL SimpleName: String", "DEL SimpleName: Configurable", "DEL Dimension", "DEL VariableDeclarationExpression", "DEL FieldAccess", "DEL SimpleName: Map", "DEL Block", "DEL SimpleName: WritableUtils", "DEL SimpleType: GroomServerAction.ActionType", "DEL SimpleName: actions", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: String", "DEL SimpleName: responseId", "DEL SimpleName: in", "DEL SimpleName: groomServerNames", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL Dimension", "DEL SimpleName: String", "DEL Modifier: public", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleType: GroomServerAction", "DEL SimpleName: length", "DEL SimpleType: String", "DEL ThisExpression", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleName: groomServerNames", "DEL SimpleType: String", "DEL FieldDeclaration", "DEL SimpleName: Map", "DEL SimpleName: WritableUtils", "DEL ThisExpression", "DEL SimpleName: actions", "DEL ArrayType: String[]", "DEL SimpleType: String", "DEL MethodInvocation", "DEL SimpleName: groomServers", "DEL SimpleType: GroomServerAction", "DEL SimpleName: groomServerNames", "DEL TypeLiteral", "DEL SimpleName: Writable", "DEL Block", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: getConf", "DEL SimpleName: groomServerNames", "DEL MethodDeclaration", "DEL SimpleName: String", "DEL SimpleType: Map", "DEL SimpleType: String", "DEL SimpleName: String", "DEL Block", "DEL FieldAccess", "DEL SingleVariableDeclaration", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleType: String", "DEL SimpleName: readFields", "DEL SimpleName: out", "DEL SimpleType: Configuration", "DEL ExpressionStatement", "DEL QualifiedName: groomServerNames.length", "DEL SimpleName: length", "DEL SimpleName: GroomServerAction", "DEL MethodInvocation", "DEL SimpleName: GroomServerAction", "DEL MethodInvocation", "DEL SimpleName: groomName", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: groomServers", "DEL ExpressionStatement"]}]}}, {"HeartbeatResponse_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.hama.bsp(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.io.DataInput(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: java.io.DataOutput(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: java.io.IOException(21)", "Delete ImportDeclaration(22)", "Delete QualifiedName: java.util.ArrayList(23)", "Delete ImportDeclaration(24)", "Delete QualifiedName: java.util.HashMap(25)", "Delete ImportDeclaration(26)", "Delete QualifiedName: java.util.List(27)", "Delete ImportDeclaration(28)", "Delete QualifiedName: java.util.Map(29)", "Delete ImportDeclaration(30)", "Delete QualifiedName: org.apache.hadoop.conf.Configurable(31)", "Delete ImportDeclaration(32)", "Delete QualifiedName: org.apache.hadoop.conf.Configuration(33)", "Delete ImportDeclaration(34)", "Delete QualifiedName: org.apache.hadoop.io.Writable(35)", "Delete ImportDeclaration(36)", "Delete QualifiedName: org.apache.hadoop.io.WritableUtils(37)", "Delete ImportDeclaration(38)", "Delete TextElement: A HeartbeatReponse class.(39)", "Delete TagElement(40)", "Delete Javadoc(41)", "Delete Modifier: public(42)", "Delete SimpleName: HeartbeatResponse(43)", "Delete SimpleName: Writable(44)", "Delete SimpleType: Writable(45)", "Delete SimpleName: Configurable(46)", "Delete SimpleType: Configurable(47)", "Delete Modifier: private(48)", "Delete SimpleName: Configuration(49)", "Delete SimpleType: Configuration(50)", "Delete SimpleName: conf(51)", "Delete VariableDeclarationFragment(52)", "Delete FieldDeclaration(53)", "Delete PrimitiveType: short(54)", "Delete SimpleName: responseId(55)", "Delete VariableDeclarationFragment(56)", "Delete FieldDeclaration(57)", "Delete Modifier: private(58)", "Delete SimpleName: GroomServerAction(59)", "Delete SimpleType: GroomServerAction(60)", "Delete Dimension(61)", "Delete ArrayType: GroomServerAction[](62)", "Delete SimpleName: actions(63)", "Delete VariableDeclarationFragment(64)", "Delete FieldDeclaration(65)", "Delete Modifier: private(66)", "Delete SimpleName: Map(67)", "Delete SimpleType: Map(68)", "Delete SimpleName: String(69)", "Delete SimpleType: String(70)", "Delete SimpleName: String(71)", "Delete SimpleType: String(72)", "Delete ParameterizedType: Map<String,String>(73)", "Delete SimpleName: groomServers(74)", "Delete VariableDeclarationFragment(75)", "Delete FieldDeclaration(76)", "Delete Modifier: public(77)", "Delete SimpleName: HeartbeatResponse(78)", "Delete Block(79)", "Delete MethodDeclaration(80)", "Delete Modifier: public(81)", "Delete SimpleName: HeartbeatResponse(82)", "Delete PrimitiveType: short(83)", "Delete SimpleName: responseId(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: GroomServerAction(86)", "Delete SimpleType: GroomServerAction(87)", "Delete Dimension(88)", "Delete ArrayType: GroomServerAction[](89)", "Delete SimpleName: actions(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: Map(92)", "Delete SimpleType: Map(93)", "Delete SimpleName: String(94)", "Delete SimpleType: String(95)", "Delete SimpleName: String(96)", "Delete SimpleType: String(97)", "Delete ParameterizedType: Map<String,String>(98)", "Delete SimpleName: groomServers(99)", "Delete SingleVariableDeclaration(100)", "Delete ThisExpression(101)", "Delete SimpleName: responseId(102)", "Delete FieldAccess(103)", "Delete SimpleName: responseId(104)", "Delete Assignment: =(105)", "Delete ExpressionStatement(106)", "Delete ThisExpression(107)", "Delete SimpleName: actions(108)", "Delete FieldAccess(109)", "Delete SimpleName: actions(110)", "Delete Assignment: =(111)", "Delete ExpressionStatement(112)", "Delete ThisExpression(113)", "Delete SimpleName: groomServers(114)", "Delete FieldAccess(115)", "Delete SimpleName: groomServers(116)", "Delete Assignment: =(117)", "Delete ExpressionStatement(118)", "Delete Block(119)", "Delete MethodDeclaration(120)", "Delete Modifier: public(121)", "Delete PrimitiveType: void(122)", "Delete SimpleName: setResponseId(123)", "Delete PrimitiveType: short(124)", "Delete SimpleName: responseId(125)", "Delete SingleVariableDeclaration(126)", "Delete ThisExpression(127)", "Delete SimpleName: responseId(128)", "Delete FieldAccess(129)", "Delete SimpleName: responseId(130)", "Delete Assignment: =(131)", "Delete ExpressionStatement(132)", "Delete Block(133)", "Delete MethodDeclaration(134)", "Delete Modifier: public(135)", "Delete PrimitiveType: short(136)", "Delete SimpleName: getResponseId(137)", "Delete SimpleName: responseId(138)", "Delete ReturnStatement(139)", "Delete Block(140)", "Delete MethodDeclaration(141)", "Delete Modifier: public(142)", "Delete PrimitiveType: void(143)", "Delete SimpleName: setActions(144)", "Delete SimpleName: GroomServerAction(145)", "Delete SimpleType: GroomServerAction(146)", "Delete Dimension(147)", "Delete ArrayType: GroomServerAction[](148)", "Delete SimpleName: actions(149)", "Delete SingleVariableDeclaration(150)", "Delete ThisExpression(151)", "Delete SimpleName: actions(152)", "Delete FieldAccess(153)", "Delete SimpleName: actions(154)", "Delete Assignment: =(155)", "Delete ExpressionStatement(156)", "Delete Block(157)", "Delete MethodDeclaration(158)", "Delete Modifier: public(159)", "Delete SimpleName: GroomServerAction(160)", "Delete SimpleType: GroomServerAction(161)", "Delete Dimension(162)", "Delete ArrayType: GroomServerAction[](163)", "Delete SimpleName: getActions(164)", "Delete SimpleName: actions(165)", "Delete ReturnStatement(166)", "Delete Block(167)", "Delete MethodDeclaration(168)", "Delete Modifier: public(169)", "Delete PrimitiveType: void(170)", "Delete SimpleName: setGroomServers(171)", "Delete SimpleName: Map(172)", "Delete SimpleType: Map(173)", "Delete SimpleName: String(174)", "Delete SimpleType: String(175)", "Delete SimpleName: String(176)", "Delete SimpleType: String(177)", "Delete ParameterizedType: Map<String,String>(178)", "Delete SimpleName: groomServers(179)", "Delete SingleVariableDeclaration(180)", "Delete ThisExpression(181)", "Delete SimpleName: groomServers(182)", "Delete FieldAccess(183)", "Delete SimpleName: groomServers(184)", "Delete Assignment: =(185)", "Delete ExpressionStatement(186)", "Delete Block(187)", "Delete MethodDeclaration(188)", "Delete Modifier: public(189)", "Delete SimpleName: Map(190)", "Delete SimpleType: Map(191)", "Delete SimpleName: String(192)", "Delete SimpleType: String(193)", "Delete SimpleName: String(194)", "Delete SimpleType: String(195)", "Delete ParameterizedType: Map<String,String>(196)", "Delete SimpleName: getGroomServers(197)", "Delete SimpleName: groomServers(198)", "Delete ReturnStatement(199)", "Delete Block(200)", "Delete MethodDeclaration(201)", "Delete SimpleName: Override(202)", "Delete MarkerAnnotation(203)", "Delete Modifier: public(204)", "Delete PrimitiveType: void(205)", "Delete SimpleName: readFields(206)", "Delete SimpleName: DataInput(207)", "Delete SimpleType: DataInput(208)", "Delete SimpleName: in(209)", "Delete SingleVariableDeclaration(210)", "Delete SimpleName: IOException(211)", "Delete SimpleType: IOException(212)", "Delete ThisExpression(213)", "Delete SimpleName: responseId(214)", "Delete FieldAccess(215)", "Delete SimpleName: in(216)", "Delete SimpleName: readShort(217)", "Delete MethodInvocation(218)", "Delete Assignment: =(219)", "Delete ExpressionStatement(220)", "Delete PrimitiveType: int(221)", "Delete SimpleName: length(222)", "Delete SimpleName: WritableUtils(223)", "Delete SimpleName: readVInt(224)", "Delete SimpleName: in(225)", "Delete MethodInvocation(226)", "Delete VariableDeclarationFragment(227)", "Delete VariableDeclarationStatement(228)", "Delete SimpleName: length(229)", "Delete NumberLiteral: 0(230)", "Delete InfixExpression: >(231)", "Delete SimpleName: actions(232)", "Delete SimpleName: GroomServerAction(233)", "Delete SimpleType: GroomServerAction(234)", "Delete Dimension(235)", "Delete ArrayType: GroomServerAction[](236)", "Delete SimpleName: length(237)", "Delete ArrayCreation(238)", "Delete Assignment: =(239)", "Delete ExpressionStatement(240)", "Delete PrimitiveType: int(241)", "Delete SimpleName: i(242)", "Delete NumberLiteral: 0(243)", "Delete VariableDeclarationFragment(244)", "Delete VariableDeclarationExpression(245)", "Delete SimpleName: i(246)", "Delete SimpleName: length(247)", "Delete InfixExpression: <(248)", "Delete SimpleName: i(249)", "Delete PrefixExpression: ++(250)", "Delete QualifiedName: GroomServerAction.ActionType(251)", "Delete SimpleType: GroomServerAction.ActionType(252)", "Delete SimpleName: actionType(253)", "Delete SimpleName: WritableUtils(254)", "Delete SimpleName: readEnum(255)", "Delete SimpleName: in(256)", "Delete QualifiedName: GroomServerAction.ActionType(257)", "Delete SimpleType: GroomServerAction.ActionType(258)", "Delete TypeLiteral(259)", "Delete MethodInvocation(260)", "Delete VariableDeclarationFragment(261)", "Delete VariableDeclarationStatement(262)", "Delete SimpleName: actions(263)", "Delete SimpleName: i(264)", "Delete ArrayAccess(265)", "Delete SimpleName: GroomServerAction(266)", "Delete SimpleName: createAction(267)", "Delete SimpleName: actionType(268)", "Delete MethodInvocation(269)", "Delete Assignment: =(270)", "Delete ExpressionStatement(271)", "Delete SimpleName: actions(272)", "Delete SimpleName: i(273)", "Delete ArrayAccess(274)", "Delete SimpleName: readFields(275)", "Delete SimpleName: in(276)", "Delete MethodInvocation(277)", "Delete ExpressionStatement(278)", "Delete Block(279)", "Delete ForStatement(280)", "Delete Block(281)", "Delete SimpleName: actions(282)", "Delete NullLiteral(283)", "Delete Assignment: =(284)", "Delete ExpressionStatement(285)", "Delete Block(286)", "Delete IfStatement(287)", "Delete SimpleName: String(288)", "Delete SimpleType: String(289)", "Delete Dimension(290)", "Delete ArrayType: String[](291)", "Delete SimpleName: groomServerNames(292)", "Delete SimpleName: WritableUtils(293)", "Delete SimpleName: readCompressedStringArray(294)", "Delete SimpleName: in(295)", "Delete MethodInvocation(296)", "Delete VariableDeclarationFragment(297)", "Delete VariableDeclarationStatement(298)", "Delete SimpleName: String(299)", "Delete SimpleType: String(300)", "Delete Dimension(301)", "Delete ArrayType: String[](302)", "Delete SimpleName: groomServerAddresses(303)", "Delete SimpleName: WritableUtils(304)", "Delete SimpleName: readCompressedStringArray(305)", "Delete SimpleName: in(306)", "Delete MethodInvocation(307)", "Delete VariableDeclarationFragment(308)", "Delete VariableDeclarationStatement(309)", "Delete SimpleName: groomServers(310)", "Delete SimpleName: HashMap(311)", "Delete SimpleType: HashMap(312)", "Delete SimpleName: String(313)", "Delete SimpleType: String(314)", "Delete SimpleName: String(315)", "Delete SimpleType: String(316)", "Delete ParameterizedType: HashMap<String,String>(317)", "Delete QualifiedName: groomServerNames.length(318)", "Delete ClassInstanceCreation(319)", "Delete Assignment: =(320)", "Delete ExpressionStatement(321)", "Delete PrimitiveType: int(322)", "Delete SimpleName: i(323)", "Delete NumberLiteral: 0(324)", "Delete VariableDeclarationFragment(325)", "Delete VariableDeclarationExpression(326)", "Delete SimpleName: i(327)", "Delete QualifiedName: groomServerNames.length(328)", "Delete InfixExpression: <(329)", "Delete SimpleName: i(330)", "Delete PostfixExpression: ++(331)", "Delete SimpleName: groomServers(332)", "Delete SimpleName: put(333)", "Delete SimpleName: groomServerNames(334)", "Delete SimpleName: i(335)", "Delete ArrayAccess(336)", "Delete SimpleName: groomServerAddresses(337)", "Delete SimpleName: i(338)", "Delete ArrayAccess(339)", "Delete MethodInvocation(340)", "Delete ExpressionStatement(341)", "Delete Block(342)", "Delete ForStatement(343)", "Delete Block(344)", "Delete MethodDeclaration(345)", "Delete SimpleName: Override(346)", "Delete MarkerAnnotation(347)", "Delete Modifier: public(348)", "Delete PrimitiveType: void(349)", "Delete SimpleName: write(350)", "Delete SimpleName: DataOutput(351)", "Delete SimpleType: DataOutput(352)", "Delete SimpleName: out(353)", "Delete SingleVariableDeclaration(354)", "Delete SimpleName: IOException(355)", "Delete SimpleType: IOException(356)", "Delete SimpleName: out(357)", "Delete SimpleName: writeShort(358)", "Delete ThisExpression(359)", "Delete SimpleName: responseId(360)", "Delete FieldAccess(361)", "Delete MethodInvocation(362)", "Delete ExpressionStatement(363)", "Delete SimpleName: actions(364)", "Delete NullLiteral(365)", "Delete InfixExpression: ==(366)", "Delete SimpleName: WritableUtils(367)", "Delete SimpleName: writeVInt(368)", "Delete SimpleName: out(369)", "Delete NumberLiteral: 0(370)", "Delete MethodInvocation(371)", "Delete ExpressionStatement(372)", "Delete Block(373)", "Delete SimpleName: WritableUtils(374)", "Delete SimpleName: writeVInt(375)", "Delete SimpleName: out(376)", "Delete QualifiedName: actions.length(377)", "Delete MethodInvocation(378)", "Delete ExpressionStatement(379)", "Delete SimpleName: GroomServerAction(380)", "Delete SimpleType: GroomServerAction(381)", "Delete SimpleName: action(382)", "Delete SingleVariableDeclaration(383)", "Delete SimpleName: actions(384)", "Delete SimpleName: WritableUtils(385)", "Delete SimpleName: writeEnum(386)", "Delete SimpleName: out(387)", "Delete SimpleName: action(388)", "Delete SimpleName: getActionType(389)", "Delete MethodInvocation(390)", "Delete MethodInvocation(391)", "Delete ExpressionStatement(392)", "Delete SimpleName: action(393)", "Delete SimpleName: write(394)", "Delete SimpleName: out(395)", "Delete MethodInvocation(396)", "Delete ExpressionStatement(397)", "Delete Block(398)", "Delete EnhancedForStatement(399)", "Delete Block(400)", "Delete IfStatement(401)", "Delete SimpleName: String(402)", "Delete SimpleType: String(403)", "Delete Dimension(404)", "Delete ArrayType: String[](405)", "Delete SimpleName: groomServerNames(406)", "Delete SimpleName: groomServers(407)", "Delete SimpleName: keySet(408)", "Delete MethodInvocation(409)", "Delete SimpleName: toArray(410)", "Delete SimpleName: String(411)", "Delete SimpleType: String(412)", "Delete Dimension(413)", "Delete ArrayType: String[](414)", "Delete NumberLiteral: 0(415)", "Delete ArrayCreation(416)", "Delete MethodInvocation(417)", "Delete VariableDeclarationFragment(418)", "Delete VariableDeclarationStatement(419)", "Delete SimpleName: WritableUtils(420)", "Delete SimpleName: writeCompressedStringArray(421)", "Delete SimpleName: out(422)", "Delete SimpleName: groomServerNames(423)", "Delete MethodInvocation(424)", "Delete ExpressionStatement(425)", "Delete SimpleName: List(426)", "Delete SimpleType: List(427)", "Delete SimpleName: String(428)", "Delete SimpleType: String(429)", "Delete ParameterizedType: List<String>(430)", "Delete SimpleName: groomServerAddresses(431)", "Delete SimpleName: ArrayList(432)", "Delete SimpleType: ArrayList(433)", "Delete SimpleName: String(434)", "Delete SimpleType: String(435)", "Delete ParameterizedType: ArrayList<String>(436)", "Delete QualifiedName: groomServerNames.length(437)", "Delete ClassInstanceCreation(438)", "Delete VariableDeclarationFragment(439)", "Delete VariableDeclarationStatement(440)", "Delete SimpleName: String(441)", "Delete SimpleType: String(442)", "Delete SimpleName: groomName(443)", "Delete SingleVariableDeclaration(444)", "Delete SimpleName: groomServerNames(445)", "Delete SimpleName: groomServerAddresses(446)", "Delete SimpleName: add(447)", "Delete SimpleName: groomServers(448)", "Delete SimpleName: get(449)", "Delete SimpleName: groomName(450)", "Delete MethodInvocation(451)", "Delete MethodInvocation(452)", "Delete ExpressionStatement(453)", "Delete Block(454)", "Delete EnhancedForStatement(455)", "Delete SimpleName: WritableUtils(456)", "Delete SimpleName: writeCompressedStringArray(457)", "Delete SimpleName: out(458)", "Delete SimpleName: groomServerAddresses(459)", "Delete SimpleName: toArray(460)", "Delete SimpleName: String(461)", "Delete SimpleType: String(462)", "Delete Dimension(463)", "Delete ArrayType: String[](464)", "Delete NumberLiteral: 0(465)", "Delete ArrayCreation(466)", "Delete MethodInvocation(467)", "Delete MethodInvocation(468)", "Delete ExpressionStatement(469)", "Delete Block(470)", "Delete MethodDeclaration(471)", "Delete SimpleName: Override(472)", "Delete MarkerAnnotation(473)", "Delete Modifier: public(474)", "Delete SimpleName: Configuration(475)", "Delete SimpleType: Configuration(476)", "Delete SimpleName: getConf(477)", "Delete ThisExpression(478)", "Delete SimpleName: conf(479)", "Delete FieldAccess(480)", "Delete ReturnStatement(481)", "Delete Block(482)", "Delete MethodDeclaration(483)", "Delete SimpleName: Override(484)", "Delete MarkerAnnotation(485)", "Delete Modifier: public(486)", "Delete PrimitiveType: void(487)", "Delete SimpleName: setConf(488)", "Delete SimpleName: Configuration(489)", "Delete SimpleType: Configuration(490)", "Delete SimpleName: conf(491)", "Delete SingleVariableDeclaration(492)", "Delete ThisExpression(493)", "Delete SimpleName: conf(494)", "Delete FieldAccess(495)", "Delete SimpleName: conf(496)", "Delete Assignment: =(497)", "Delete ExpressionStatement(498)", "Delete Block(499)", "Delete MethodDeclaration(500)", "Delete TypeDeclaration: class(501)"]}}, {"JobInProgress_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 37", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: allDone to Assignment: = at 0", "INS SimpleName: allDone to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: status to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS BreakStatement to Block at 1", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleName: isFailed to MethodInvocation at 1", "INS SimpleName: superstepCounter to ClassInstanceCreation at 4", "INS StringLiteral: \"Job failed.\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: superstepCounter to ClassInstanceCreation at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: taskInProgress to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS IfStatement to Block at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS Block to EnhancedForStatement at 2", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: status to FieldAccess at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: JobStatus to ClassInstanceCreation at 0", "INS BooleanLiteral: false to Assignment: = at 1", "INS SimpleName: updateTaskStatus to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: info to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: taskid to InfixExpression: + at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: System to MethodInvocation at 0", "INS SimpleName: taskInProgress to SingleVariableDeclaration at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: superstepCounter to ClassInstanceCreation at 3", "INS SimpleName: profile to FieldAccess at 1", "INS SimpleName: status to MethodInvocation at 0", "INS SimpleName: setFinishTime to MethodInvocation at 1", "INS SimpleName: TaskStatus to SimpleType: TaskStatus at 0", "INS SimpleType: TaskInProgress to SingleVariableDeclaration at 0", "INS SimpleName: currentTimeMillis to MethodInvocation at 1", "INS SimpleName: finishTime to FieldAccess at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: tip to SingleVariableDeclaration at 1", "INS StringLiteral: \"' has failed.\" to InfixExpression: + at 2", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 6", "INS FieldAccess to MethodInvocation at 0", "INS EnhancedForStatement to Block at 5", "INS SimpleName: allDone to IfStatement at 0", "INS SimpleType: TaskStatus to SingleVariableDeclaration at 0", "INS SimpleName: status to FieldAccess at 1", "INS VariableDeclarationStatement to Block at 4", "INS SimpleType: TaskAttemptID to VariableDeclarationStatement at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS FieldAccess to MethodInvocation at 0", "INS BooleanLiteral: true to VariableDeclarationFragment at 1", "INS SimpleName: TaskInProgress to SimpleType: TaskInProgress at 0", "INS SimpleName: JobStatus to SimpleType: JobStatus at 0", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 4", "INS MethodDeclaration to TypeDeclaration: class at 37", "INS Block to IfStatement at 1", "INS StringLiteral: \"Taskid '\" to InfixExpression: + at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS FieldAccess to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: taskid to MethodInvocation at 2", "INS QualifiedName: JobStatus.FAILED to ClassInstanceCreation at 6", "INS ExpressionStatement to Block at 3", "INS SimpleName: taskid to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleName: TaskInProgress to SimpleType: TaskInProgress at 0", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: getJobID to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to MethodInvocation at 2", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: terminated to MethodInvocation at 1", "INS SimpleName: garbageCollect to MethodInvocation at 0", "INS SimpleType: TaskInProgress to SingleVariableDeclaration at 0", "INS SimpleName: tip to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getTaskId to MethodInvocation at 1", "INS SimpleName: status to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: failedTask to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: finishTime to FieldAccess at 1", "INS SimpleName: status to FieldAccess at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: tip to MethodInvocation at 1", "INS SimpleName: superstepCounter to ClassInstanceCreation at 7", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: getUser to MethodInvocation at 1", "INS SimpleName: tasks to EnhancedForStatement at 1", "INS SimpleName: TaskAttemptID to SimpleType: TaskAttemptID at 0"]}, {"root": "UPDATE from JobStatus.FAILED to JobStatus.KILLED", "operations": ["UPD QualifiedName: JobStatus.FAILED from JobStatus.FAILED to JobStatus.KILLED", "UPD QualifiedName: JobStatus.FAILED from JobStatus.FAILED to JobStatus.KILLED"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL StringLiteral: \">> JobInProgress.kill() step.\"", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL ExpressionStatement", "DEL SimpleName: LOG"]}]}}, {"JobInProgress_diff": {"operations": ["Insert MethodDeclaration(942) into TypeDeclaration: class(1135) at 37", "Insert Modifier: public(830) into MethodDeclaration(942) at 0", "Insert PrimitiveType: void(831) into MethodDeclaration(942) at 1", "Insert SimpleName: failedTask(832) into MethodDeclaration(942) at 2", "Insert SingleVariableDeclaration(836) into MethodDeclaration(942) at 3", "Insert SingleVariableDeclaration(840) into MethodDeclaration(942) at 4", "Insert Block(941) into MethodDeclaration(942) at 5", "Insert SimpleType: TaskInProgress(834) into SingleVariableDeclaration(836) at 0", "Insert SimpleName: tip(835) into SingleVariableDeclaration(836) at 1", "Insert SimpleType: TaskStatus(838) into SingleVariableDeclaration(840) at 0", "Insert SimpleName: status(839) into SingleVariableDeclaration(840) at 1", "Insert VariableDeclarationStatement(848) into Block(941) at 0", "Insert ExpressionStatement(853) into Block(941) at 1", "Insert ExpressionStatement(861) into Block(941) at 2", "Insert ExpressionStatement(866) into Block(941) at 3", "Insert VariableDeclarationStatement(871) into Block(941) at 4", "Insert EnhancedForStatement(889) into Block(941) at 5", "Insert IfStatement(940) into Block(941) at 6", "Insert SimpleName: TaskInProgress(833) into SimpleType: TaskInProgress(834) at 0", "Insert SimpleName: TaskStatus(837) into SimpleType: TaskStatus(838) at 0", "Insert SimpleType: TaskAttemptID(842) into VariableDeclarationStatement(848) at 0", "Insert VariableDeclarationFragment(847) into VariableDeclarationStatement(848) at 1", "Insert MethodInvocation(852) into ExpressionStatement(853) at 0", "Insert MethodInvocation(860) into ExpressionStatement(861) at 0", "Insert MethodInvocation(865) into ExpressionStatement(866) at 0", "Insert PrimitiveType: boolean(867) into VariableDeclarationStatement(871) at 0", "Insert VariableDeclarationFragment(870) into VariableDeclarationStatement(871) at 1", "Insert SingleVariableDeclaration(875) into EnhancedForStatement(889) at 0", "Insert SimpleName: tasks(876) into EnhancedForStatement(889) at 1", "Insert Block(888) into EnhancedForStatement(889) at 2", "Insert SimpleName: allDone(890) into IfStatement(940) at 0", "Insert Block(939) into IfStatement(940) at 1", "Insert SimpleName: TaskAttemptID(841) into SimpleType: TaskAttemptID(842) at 0", "Insert SimpleName: taskid(843) into VariableDeclarationFragment(847) at 0", "Insert MethodInvocation(846) into VariableDeclarationFragment(847) at 1", "Insert SimpleName: updateTaskStatus(849) into MethodInvocation(852) at 0", "Insert SimpleName: tip(850) into MethodInvocation(852) at 1", "Insert SimpleName: status(851) into MethodInvocation(852) at 2", "Insert SimpleName: LOG(854) into MethodInvocation(860) at 0", "Insert SimpleName: info(855) into MethodInvocation(860) at 1", "Insert InfixExpression: +(859) into MethodInvocation(860) at 2", "Insert SimpleName: tip(862) into MethodInvocation(865) at 0", "Insert SimpleName: terminated(863) into MethodInvocation(865) at 1", "Insert SimpleName: taskid(864) into MethodInvocation(865) at 2", "Insert SimpleName: allDone(868) into VariableDeclarationFragment(870) at 0", "Insert BooleanLiteral: true(869) into VariableDeclarationFragment(870) at 1", "Insert SimpleType: TaskInProgress(873) into SingleVariableDeclaration(875) at 0", "Insert SimpleName: taskInProgress(874) into SingleVariableDeclaration(875) at 1", "Insert IfStatement(887) into Block(888) at 0", "Insert ExpressionStatement(913) into Block(939) at 0", "Insert ExpressionStatement(921) into Block(939) at 1", "Insert ExpressionStatement(930) into Block(939) at 2", "Insert ExpressionStatement(935) into Block(939) at 3", "Insert ExpressionStatement(938) into Block(939) at 4", "Update QualifiedName: JobStatus.FAILED(874) to JobStatus.KILLED", "Insert SimpleName: status(844) into MethodInvocation(846) at 0", "Insert SimpleName: getTaskId(845) into MethodInvocation(846) at 1", "Insert StringLiteral: \"Taskid '\"(856) into InfixExpression: +(859) at 0", "Insert SimpleName: taskid(857) into InfixExpression: +(859) at 1", "Insert StringLiteral: \"' has failed.\"(858) into InfixExpression: +(859) at 2", "Insert SimpleName: TaskInProgress(872) into SimpleType: TaskInProgress(873) at 0", "Insert PrefixExpression: !(880) into IfStatement(887) at 0", "Insert Block(886) into IfStatement(887) at 1", "Insert Assignment: =(912) into ExpressionStatement(913) at 0", "Insert Assignment: =(920) into ExpressionStatement(921) at 0", "Insert MethodInvocation(929) into ExpressionStatement(930) at 0", "Insert MethodInvocation(934) into ExpressionStatement(935) at 0", "Insert MethodInvocation(937) into ExpressionStatement(938) at 0", "Insert MethodInvocation(879) into PrefixExpression: !(880) at 0", "Insert ExpressionStatement(884) into Block(886) at 0", "Insert BreakStatement(885) into Block(886) at 1", "Insert FieldAccess(893) into Assignment: =(912) at 0", "Insert ClassInstanceCreation(911) into Assignment: =(912) at 1", "Insert FieldAccess(916) into Assignment: =(920) at 0", "Insert MethodInvocation(919) into Assignment: =(920) at 1", "Insert FieldAccess(924) into MethodInvocation(929) at 0", "Insert SimpleName: setFinishTime(925) into MethodInvocation(929) at 1", "Insert FieldAccess(928) into MethodInvocation(929) at 2", "Insert SimpleName: LOG(931) into MethodInvocation(934) at 0", "Insert SimpleName: debug(932) into MethodInvocation(934) at 1", "Insert StringLiteral: \"Job failed.\"(933) into MethodInvocation(934) at 2", "Insert SimpleName: garbageCollect(936) into MethodInvocation(937) at 0", "Insert SimpleName: taskInProgress(877) into MethodInvocation(879) at 0", "Insert SimpleName: isFailed(878) into MethodInvocation(879) at 1", "Insert Assignment: =(883) into ExpressionStatement(884) at 0", "Insert ThisExpression(891) into FieldAccess(893) at 0", "Insert SimpleName: status(892) into FieldAccess(893) at 1", "Insert SimpleType: JobStatus(895) into ClassInstanceCreation(911) at 0", "Insert MethodInvocation(900) into ClassInstanceCreation(911) at 1", "Insert MethodInvocation(905) into ClassInstanceCreation(911) at 2", "Insert SimpleName: superstepCounter(906) into ClassInstanceCreation(911) at 3", "Insert SimpleName: superstepCounter(907) into ClassInstanceCreation(911) at 4", "Insert SimpleName: superstepCounter(908) into ClassInstanceCreation(911) at 5", "Insert QualifiedName: JobStatus.FAILED(909) into ClassInstanceCreation(911) at 6", "Insert SimpleName: superstepCounter(910) into ClassInstanceCreation(911) at 7", "Insert ThisExpression(914) into FieldAccess(916) at 0", "Insert SimpleName: finishTime(915) into FieldAccess(916) at 1", "Insert SimpleName: System(917) into MethodInvocation(919) at 0", "Insert SimpleName: currentTimeMillis(918) into MethodInvocation(919) at 1", "Insert ThisExpression(922) into FieldAccess(924) at 0", "Insert SimpleName: status(923) into FieldAccess(924) at 1", "Insert ThisExpression(926) into FieldAccess(928) at 0", "Insert SimpleName: finishTime(927) into FieldAccess(928) at 1", "Update QualifiedName: JobStatus.FAILED(892) to JobStatus.KILLED", "Insert SimpleName: allDone(881) into Assignment: =(883) at 0", "Insert BooleanLiteral: false(882) into Assignment: =(883) at 1", "Insert SimpleName: JobStatus(894) into SimpleType: JobStatus(895) at 0", "Insert FieldAccess(898) into MethodInvocation(900) at 0", "Insert SimpleName: getJobID(899) into MethodInvocation(900) at 1", "Insert FieldAccess(903) into MethodInvocation(905) at 0", "Insert SimpleName: getUser(904) into MethodInvocation(905) at 1", "Insert ThisExpression(896) into FieldAccess(898) at 0", "Insert SimpleName: status(897) into FieldAccess(898) at 1", "Insert ThisExpression(901) into FieldAccess(903) at 0", "Insert SimpleName: profile(902) into FieldAccess(903) at 1", "Delete SimpleName: LOG(866)", "Delete SimpleName: debug(867)", "Delete StringLiteral: \">> JobInProgress.kill() step.\"(868)", "Delete MethodInvocation(869)", "Delete ExpressionStatement(870)"]}}, {"JobProfile_cluster": {"actions": [{"root": "UPDATE from A JobProfile tracks job's status to A JobProfile tracks job's status.", "operations": ["UPD TextElement: A JobProfile tracks job's status from A JobProfile tracks job's status to A JobProfile tracks job's status."]}]}}, {"JobProfile_diff": {"operations": ["Update TextElement: A JobProfile tracks job's status(31) to A JobProfile tracks job's status."]}}, {"KillJobAction_cluster": {"actions": []}}, {"KillJobAction_diff": {"operations": []}}, {"KillTaskAction_cluster": {"actions": []}}, {"KillTaskAction_diff": {"operations": []}}, {"LaunchTaskAction_cluster": {"actions": []}}, {"LaunchTaskAction_diff": {"operations": []}}, {"ReinitGroomAction_cluster": {"actions": []}}, {"ReinitGroomAction_diff": {"operations": []}}, {"TaskInProgress_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: TaskStatus to VariableDeclarationStatement at 0", "INS SimpleName: taskid to MethodInvocation at 2", "INS SimpleName: terminated to MethodDeclaration at 2", "INS QualifiedName: TaskStatus.State.FAILED to MethodInvocation at 2", "INS SimpleName: info to MethodInvocation at 1", "INS MethodInvocation to CastExpression at 1", "INS StringLiteral: \"Task '\" to InfixExpression: + at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: activeTasks to MethodInvocation at 0", "INS SimpleName: getTaskID to MethodInvocation at 1", "INS SimpleName: TaskStatus to SimpleType: TaskStatus at 0", "INS SimpleName: TaskStatus to SimpleType: TaskStatus at 0", "INS SimpleName: status to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS StringLiteral: \"' has failed.\" to InfixExpression: + at 2", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: remove to MethodInvocation at 1", "INS SimpleName: taskid to SingleVariableDeclaration at 1", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: taskid to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: taskid to MethodInvocation at 2", "INS SimpleName: TaskAttemptID to SimpleType: TaskAttemptID at 0", "INS SimpleName: status to VariableDeclarationFragment at 0", "INS SimpleType: TaskAttemptID to SingleVariableDeclaration at 0", "INS SimpleName: get to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: setRunState to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 36", "INS SimpleType: TaskStatus to CastExpression at 0", "INS Modifier: public to MethodDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: taskStatuses to MethodInvocation at 0"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: debug", "DEL StringLiteral: \">> TaskInProgress.kill() step.\"", "DEL SimpleName: LOG", "DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"TaskInProgress_diff": {"operations": ["Insert MethodDeclaration(708) into TypeDeclaration: class(784) at 36", "Insert Modifier: public(666) into MethodDeclaration(708) at 0", "Insert PrimitiveType: void(667) into MethodDeclaration(708) at 1", "Insert SimpleName: terminated(668) into MethodDeclaration(708) at 2", "Insert SingleVariableDeclaration(672) into MethodDeclaration(708) at 3", "Insert Block(707) into MethodDeclaration(708) at 4", "Insert SimpleType: TaskAttemptID(670) into SingleVariableDeclaration(672) at 0", "Insert SimpleName: taskid(671) into SingleVariableDeclaration(672) at 1", "Insert ExpressionStatement(684) into Block(707) at 0", "Insert VariableDeclarationStatement(696) into Block(707) at 1", "Insert ExpressionStatement(701) into Block(707) at 2", "Insert ExpressionStatement(706) into Block(707) at 3", "Insert SimpleName: TaskAttemptID(669) into SimpleType: TaskAttemptID(670) at 0", "Insert MethodInvocation(683) into ExpressionStatement(684) at 0", "Insert SimpleType: TaskStatus(686) into VariableDeclarationStatement(696) at 0", "Insert VariableDeclarationFragment(695) into VariableDeclarationStatement(696) at 1", "Insert MethodInvocation(700) into ExpressionStatement(701) at 0", "Insert MethodInvocation(705) into ExpressionStatement(706) at 0", "Insert SimpleName: LOG(673) into MethodInvocation(683) at 0", "Insert SimpleName: info(674) into MethodInvocation(683) at 1", "Insert InfixExpression: +(682) into MethodInvocation(683) at 2", "Insert SimpleName: TaskStatus(685) into SimpleType: TaskStatus(686) at 0", "Insert SimpleName: status(687) into VariableDeclarationFragment(695) at 0", "Insert CastExpression(694) into VariableDeclarationFragment(695) at 1", "Insert SimpleName: status(697) into MethodInvocation(700) at 0", "Insert SimpleName: setRunState(698) into MethodInvocation(700) at 1", "Insert QualifiedName: TaskStatus.State.FAILED(699) into MethodInvocation(700) at 2", "Insert SimpleName: activeTasks(702) into MethodInvocation(705) at 0", "Insert SimpleName: remove(703) into MethodInvocation(705) at 1", "Insert SimpleName: taskid(704) into MethodInvocation(705) at 2", "Insert StringLiteral: \"Task '\"(675) into InfixExpression: +(682) at 0", "Insert MethodInvocation(680) into InfixExpression: +(682) at 1", "Insert StringLiteral: \"' has failed.\"(681) into InfixExpression: +(682) at 2", "Insert SimpleType: TaskStatus(689) into CastExpression(694) at 0", "Insert MethodInvocation(693) into CastExpression(694) at 1", "Insert MethodInvocation(678) into MethodInvocation(680) at 0", "Insert SimpleName: toString(679) into MethodInvocation(680) at 1", "Insert SimpleName: TaskStatus(688) into SimpleType: TaskStatus(689) at 0", "Insert SimpleName: taskStatuses(690) into MethodInvocation(693) at 0", "Insert SimpleName: get(691) into MethodInvocation(693) at 1", "Insert SimpleName: taskid(692) into MethodInvocation(693) at 2", "Insert SimpleName: taskid(676) into MethodInvocation(678) at 0", "Insert SimpleName: getTaskID(677) into MethodInvocation(678) at 1", "Delete SimpleName: LOG(726)", "Delete SimpleName: debug(727)", "Delete StringLiteral: \">> TaskInProgress.kill() step.\"(728)", "Delete MethodInvocation(729)", "Delete ExpressionStatement(730)"]}}, {"TaskLog_cluster": {"actions": [{"root": "INS Javadoc to TypeDeclaration: class at 0", "operations": ["INS Javadoc to TypeDeclaration: class at 0", "INS TextElement: A simple logger to handle the task-specific user logs. to TagElement at 0", "INS TagElement to Javadoc at 0"]}]}}, {"TaskLog_diff": {"operations": ["Insert Javadoc(41) into TypeDeclaration: class(1194) at 0", "Insert TagElement(40) into Javadoc(41) at 0", "Insert TextElement: A simple logger to handle the task-specific user logs.(39) into TagElement(40) at 0"]}}, {"TaskLogAppender_cluster": {"actions": [{"root": "INS Javadoc to TypeDeclaration: class at 0", "operations": ["INS TagElement to Javadoc at 0", "INS TextElement: A simple log4j-appender for the task child's BSP system logs. to TagElement at 0", "INS Javadoc to TypeDeclaration: class at 0"]}]}}, {"TaskLogAppender_diff": {"operations": ["Insert Javadoc(27) into TypeDeclaration: class(223) at 0", "Insert TagElement(26) into Javadoc(27) at 0", "Insert TextElement: A simple log4j-appender for the task child's BSP system logs.(25) into TagElement(26) at 0"]}}, {"TaskStatus_cluster": {"actions": []}}, {"TaskStatus_diff": {"operations": []}}, {"InterServerProtocol_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL TextElement: Licensed to the Apache Software Foundation (ASF) under one", "DEL TextElement: http://www.apache.org/licenses/LICENSE-2.0", "DEL PackageDeclaration", "DEL TextElement: Unless required by applicable law or agreed to in writing, software", "DEL QualifiedName: org.apache.hama.ipc", "DEL Javadoc", "DEL TextElement: \"License\"); you may not use this file except in compliance", "DEL TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,", "DEL TextElement: or more contributor license agreements.  See the NOTICE file", "DEL TextElement: regarding copyright ownership.  The ASF licenses this file", "DEL TextElement: with the License.  You may obtain a copy of the License at", "DEL TextElement: limitations under the License.", "DEL TagElement", "DEL TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "DEL TextElement: See the License for the specific language governing permissions and", "DEL TextElement: distributed with this work for additional information", "DEL TextElement: to you under the Apache License, Version 2.0 (the"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.bsp.GroomServerStatus"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.hama.bsp.HeartbeatResponse"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleType: HamaRPCProtocolVersion", "DEL SimpleName: HeartbeatResponse", "DEL SimpleType: HeartbeatResponse", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: IOException", "DEL SingleVariableDeclaration", "DEL SimpleName: responseId", "DEL TextElement: Protocol that a GroomServer and the central BSPMaster use to communicate. The", "DEL SimpleName: acceptNewTasks", "DEL PrimitiveType: short", "DEL Modifier: public", "DEL SimpleName: restarted", "DEL Modifier: public", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL TypeDeclaration: interface", "DEL SimpleType: String", "DEL TextElement: BSPMaster is the Server, which implements this protocol.", "DEL SimpleType: GroomServerStatus", "DEL SimpleName: status", "DEL TagElement", "DEL SimpleName: getSystemDir", "DEL PrimitiveType: boolean", "DEL SimpleType: IOException", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: InterServerProtocol", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: String", "DEL SimpleName: GroomServerStatus", "DEL SimpleName: heartbeat", "DEL SimpleName: reportSize", "DEL SimpleName: HamaRPCProtocolVersion", "DEL SimpleName: initialContact", "DEL Modifier: public"]}]}}, {"InterServerProtocol_diff": {"operations": ["Delete TextElement: Licensed to the Apache Software Foundation (ASF) under one(0)", "Delete TextElement: or more contributor license agreements.  See the NOTICE file(1)", "Delete TextElement: distributed with this work for additional information(2)", "Delete TextElement: regarding copyright ownership.  The ASF licenses this file(3)", "Delete TextElement: to you under the Apache License, Version 2.0 (the(4)", "Delete TextElement: \"License\"); you may not use this file except in compliance(5)", "Delete TextElement: with the License.  You may obtain a copy of the License at(6)", "Delete TextElement: http://www.apache.org/licenses/LICENSE-2.0(7)", "Delete TextElement: Unless required by applicable law or agreed to in writing, software(8)", "Delete TextElement: distributed under the License is distributed on an \"AS IS\" BASIS,(9)", "Delete TextElement: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.(10)", "Delete TextElement: See the License for the specific language governing permissions and(11)", "Delete TextElement: limitations under the License.(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete QualifiedName: org.apache.hama.ipc(15)", "Delete PackageDeclaration(16)", "Delete QualifiedName: java.io.IOException(17)", "Delete ImportDeclaration(18)", "Delete QualifiedName: org.apache.hama.bsp.GroomServerStatus(19)", "Delete ImportDeclaration(20)", "Delete QualifiedName: org.apache.hama.bsp.HeartbeatResponse(21)", "Delete ImportDeclaration(22)", "Delete TextElement: Protocol that a GroomServer and the central BSPMaster use to communicate. The(23)", "Delete TextElement: BSPMaster is the Server, which implements this protocol.(24)", "Delete TagElement(25)", "Delete Javadoc(26)", "Delete Modifier: public(27)", "Delete SimpleName: InterServerProtocol(28)", "Delete SimpleName: HamaRPCProtocolVersion(29)", "Delete SimpleType: HamaRPCProtocolVersion(30)", "Delete Modifier: public(31)", "Delete SimpleName: HeartbeatResponse(32)", "Delete SimpleType: HeartbeatResponse(33)", "Delete SimpleName: heartbeat(34)", "Delete SimpleName: GroomServerStatus(35)", "Delete SimpleType: GroomServerStatus(36)", "Delete SimpleName: status(37)", "Delete SingleVariableDeclaration(38)", "Delete PrimitiveType: boolean(39)", "Delete SimpleName: restarted(40)", "Delete SingleVariableDeclaration(41)", "Delete PrimitiveType: boolean(42)", "Delete SimpleName: initialContact(43)", "Delete SingleVariableDeclaration(44)", "Delete PrimitiveType: boolean(45)", "Delete SimpleName: acceptNewTasks(46)", "Delete SingleVariableDeclaration(47)", "Delete PrimitiveType: short(48)", "Delete SimpleName: responseId(49)", "Delete SingleVariableDeclaration(50)", "Delete PrimitiveType: int(51)", "Delete SimpleName: reportSize(52)", "Delete SingleVariableDeclaration(53)", "Delete SimpleName: IOException(54)", "Delete SimpleType: IOException(55)", "Delete MethodDeclaration(56)", "Delete Modifier: public(57)", "Delete SimpleName: String(58)", "Delete SimpleType: String(59)", "Delete SimpleName: getSystemDir(60)", "Delete MethodDeclaration(61)", "Delete TypeDeclaration: interface(62)"]}}], "commit_stats": [{"total_files": 21, "deleted_files": 2, "testing": "False", "maintenance": "False", "build": "False"}]}