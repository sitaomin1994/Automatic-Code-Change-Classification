{"application": "apache-mina-sshd", "csha": "38c84a830e5078b62912cb8131f83e8ac82b2742", "files": [{"SignalListener_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 6", "operations": ["INS SimpleName: validateListener to MethodDeclaration at 3", "INS SimpleType: L to MethodDeclaration at 2", "INS TypeLiteral to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: SignalListener to TypeParameter at 1", "INS TypeParameter to MethodDeclaration at 1", "INS SimpleName: SignalListener to SimpleType: SignalListener at 0", "INS SimpleName: SshdEventListener to MethodInvocation at 0", "INS SimpleName: L to TypeParameter at 0", "INS SimpleName: SignalListener to SimpleType: SignalListener at 0", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS Modifier: static to MethodDeclaration at 0", "INS SimpleName: validateListener to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: interface at 6", "INS SimpleName: listener to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleType: SignalListener to TypeLiteral at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleType: L to SingleVariableDeclaration at 0"]}]}}, {"SignalListener_diff": {"operations": ["Insert MethodDeclaration(51) into TypeDeclaration: interface(52) at 6", "Insert Modifier: static(28) into MethodDeclaration(51) at 0", "Insert TypeParameter(32) into MethodDeclaration(51) at 1", "Insert SimpleType: L(34) into MethodDeclaration(51) at 2", "Insert SimpleName: validateListener(35) into MethodDeclaration(51) at 3", "Insert SingleVariableDeclaration(39) into MethodDeclaration(51) at 4", "Insert Block(50) into MethodDeclaration(51) at 5", "Insert SimpleName: L(29) into TypeParameter(32) at 0", "Insert SimpleType: SignalListener(31) into TypeParameter(32) at 1", "Insert SimpleName: L(33) into SimpleType: L(34) at 0", "Insert SimpleType: L(37) into SingleVariableDeclaration(39) at 0", "Insert SimpleName: listener(38) into SingleVariableDeclaration(39) at 1", "Insert ReturnStatement(49) into Block(50) at 0", "Insert SimpleName: SignalListener(30) into SimpleType: SignalListener(31) at 0", "Insert SimpleName: L(36) into SimpleType: L(37) at 0", "Insert MethodInvocation(48) into ReturnStatement(49) at 0", "Insert SimpleName: SshdEventListener(40) into MethodInvocation(48) at 0", "Insert SimpleName: validateListener(41) into MethodInvocation(48) at 1", "Insert SimpleName: listener(42) into MethodInvocation(48) at 2", "Insert MethodInvocation(47) into MethodInvocation(48) at 3", "Insert TypeLiteral(45) into MethodInvocation(47) at 0", "Insert SimpleName: getSimpleName(46) into MethodInvocation(47) at 1", "Insert SimpleType: SignalListener(44) into TypeLiteral(45) at 0", "Insert SimpleName: SignalListener(43) into SimpleType: SignalListener(44) at 0"]}}, {"StandardEnvironment_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "UPDATE from java.util.Objects to java.util.concurrent.CopyOnWriteArraySet", "operations": ["UPD QualifiedName: java.util.Objects from java.util.Objects to java.util.concurrent.CopyOnWriteArraySet"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: listener to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "UPDATE from Objects to SignalListener", "operations": ["UPD SimpleName: Objects from Objects to SignalListener", "UPD SimpleName: Objects from Objects to SignalListener"]}, {"root": "UPDATE from requireNonNull to validateListener", "operations": ["UPD SimpleName: requireNonNull from requireNonNull to validateListener", "UPD SimpleName: requireNonNull from requireNonNull to validateListener"]}, {"root": "INS ClassInstanceCreation to Assignment: = at 1", "operations": ["INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0", "INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.sshd.common.util.EventListenerUtils"]}, {"root": "DEL StringLiteral: \"No listener instance\"", "operations": ["DEL StringLiteral: \"No listener instance\""]}, {"root": "DEL StringLiteral: \"No listener instance\"", "operations": ["DEL StringLiteral: \"No listener instance\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: EventListenerUtils", "DEL SimpleName: synchronizedListenersSet", "DEL MethodInvocation"]}]}}, {"StandardEnvironment_diff": {"operations": ["Move ImportDeclaration(9) into CompilationUnit(496) at 6", "Update QualifiedName: java.util.Objects(8) to java.util.concurrent.CopyOnWriteArraySet", "Insert IfStatement(225) into Block(260) at 0", "Insert InfixExpression: ==(222) into IfStatement(225) at 0", "Insert Block(224) into IfStatement(225) at 1", "Update SimpleName: Objects(155) to SignalListener", "Update SimpleName: requireNonNull(156) to validateListener", "Insert SimpleName: listener(220) into InfixExpression: ==(222) at 0", "Insert NullLiteral(221) into InfixExpression: ==(222) at 1", "Insert ReturnStatement(223) into Block(224) at 0", "Update SimpleName: Objects(223) to SignalListener", "Update SimpleName: requireNonNull(224) to validateListener", "Insert ClassInstanceCreation(460) into Assignment: =(461) at 1", "Insert ParameterizedType: CopyOnWriteArraySet<>(459) into ClassInstanceCreation(460) at 0", "Insert SimpleType: CopyOnWriteArraySet(458) into ParameterizedType: CopyOnWriteArraySet<>(459) at 0", "Insert SimpleName: CopyOnWriteArraySet(457) into SimpleType: CopyOnWriteArraySet(458) at 0", "Delete QualifiedName: org.apache.sshd.common.util.EventListenerUtils(14)", "Delete ImportDeclaration(15)", "Delete StringLiteral: \"No listener instance\"(158)", "Delete StringLiteral: \"No listener instance\"(226)", "Delete SimpleName: EventListenerUtils(455)", "Delete SimpleName: synchronizedListenersSet(456)", "Delete MethodInvocation(457)"]}}, {"ChannelAgentForwarding_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0", "MOV TryStatement to Block at 2"]}, {"root": "UPDATE from ChannelListener to String", "operations": ["UPD SimpleType: ChannelListener from ChannelListener to String", "UPD SimpleName: ChannelListener from ChannelListener to String"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS CatchClause to TryStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS Block to CatchClause at 1", "INS SimpleName: changeEvent to Assignment: = at 0"]}, {"root": "INS Block to TryStatement at 2", "operations": ["INS Block to TryStatement at 2"]}, {"root": "INS SimpleName: changeEvent to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: changeEvent to VariableDeclarationFragment at 0"]}, {"root": "INS StringLiteral: \"auth-agent\" to VariableDeclarationFragment at 1", "operations": ["INS StringLiteral: \"auth-agent\" to VariableDeclarationFragment at 1"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from channelOpenSuccess to signalChannelOpenSuccess", "operations": ["UPD SimpleName: channelOpenSuccess from channelOpenSuccess to signalChannelOpenSuccess"]}, {"root": "UPDATE from ignored to notifyStateChanged", "operations": ["UPD SimpleName: ignored from ignored to notifyStateChanged"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getClass to MethodInvocation at 1", "MOV SimpleName: ignored to MethodInvocation at 0"]}, {"root": "UPDATE from getClass to changeEvent", "operations": ["UPD SimpleName: getClass from getClass to changeEvent"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from channelOpenFailure to signalChannelOpenFailure", "operations": ["UPD SimpleName: channelOpenFailure from channelOpenFailure to signalChannelOpenFailure"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.sshd.common.channel.ChannelListener", "DEL ImportDeclaration"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getChannelListenerProxy", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getMessage", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getSimpleName", "DEL SimpleName: log", "DEL MethodInvocation", "DEL ThisExpression", "DEL StringLiteral: \"doInit({}) failed ({}) to inform listener of open failure={}: {}\"", "DEL MethodInvocation", "DEL SimpleName: warn", "DEL SimpleName: ignored"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL CatchClause", "operations": ["DEL SimpleType: Throwable", "DEL SimpleName: trace", "DEL MethodInvocation", "DEL CatchClause", "DEL InfixExpression: >", "DEL StringLiteral: \") inform listener open failure details\"", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL ThisExpression", "DEL SimpleName: log", "DEL Block", "DEL SimpleType: Throwable", "DEL SimpleName: peelException", "DEL SimpleName: s", "DEL SingleVariableDeclaration", "DEL SimpleName: isTraceEnabled", "DEL SimpleName: log", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: GenericUtils", "DEL MethodInvocation", "DEL SimpleName: err", "DEL SimpleName: isDebugEnabled", "DEL ArrayType: Throwable[]", "DEL SimpleName: debug", "DEL EnhancedForStatement", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: ignored", "DEL SimpleName: log", "DEL SimpleName: s", "DEL StringLiteral: \") suppressed channel open failure signalling\"", "DEL SimpleName: getSuppressed", "DEL MethodInvocation", "DEL SimpleType: Throwable", "DEL SimpleName: GenericUtils", "DEL SingleVariableDeclaration", "DEL Block", "DEL InfixExpression: +", "DEL SimpleName: log", "DEL NumberLiteral: 0", "DEL StringLiteral: \"doInit(\"", "DEL StringLiteral: \"doInit(\"", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL SimpleName: ignored", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: suppressed", "DEL SimpleName: suppressed", "DEL SimpleName: length", "DEL SimpleName: Throwable", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: suppressed", "DEL SimpleName: Throwable", "DEL InfixExpression: +", "DEL SimpleName: err", "DEL SimpleName: ignored", "DEL SimpleName: Throwable", "DEL SimpleName: Throwable", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Dimension", "DEL SimpleType: Throwable"]}, {"root": "DEL TryStatement", "operations": ["DEL CatchClause", "DEL TryStatement", "DEL Block"]}]}}, {"ChannelAgentForwarding_diff": {"operations": ["Move TryStatement(270) into Block(197) at 2", "Update SimpleType: ChannelListener(91) to String", "Move Block(162) into TryStatement(194) at 0", "Insert CatchClause(188) into TryStatement(194) at 1", "Insert Block(193) into TryStatement(194) at 2", "Update SimpleName: ChannelListener(90) to String", "Insert SimpleName: changeEvent(89) into VariableDeclarationFragment(91) at 0", "Insert StringLiteral: \"auth-agent\"(90) into VariableDeclarationFragment(91) at 1", "Move SingleVariableDeclaration(166) into CatchClause(188) at 0", "Insert Block(187) into CatchClause(188) at 1", "Move ExpressionStatement(214) into Block(193) at 0", "Move VariableDeclarationStatement(175) into Block(187) at 0", "Insert ExpressionStatement(177) into Block(187) at 1", "Move ExpressionStatement(181) into Block(187) at 2", "Move ExpressionStatement(275) into Block(187) at 3", "Insert MethodInvocation(191) into ExpressionStatement(192) at 0", "Update SimpleName: channelOpenSuccess(154) to signalChannelOpenSuccess", "Insert Assignment: =(176) into ExpressionStatement(177) at 0", "Update SimpleName: ignored(200) to notifyStateChanged", "Move SimpleName: ignored(200) into MethodInvocation(191) at 0", "Update SimpleName: getClass(201) to changeEvent", "Move SimpleName: getClass(201) into MethodInvocation(191) at 1", "Insert SimpleName: changeEvent(170) into Assignment: =(176) at 0", "Move MethodInvocation(209) into Assignment: =(176) at 1", "Update SimpleName: channelOpenFailure(177) to signalChannelOpenFailure", "Delete QualifiedName: org.apache.sshd.common.channel.ChannelListener(22)", "Delete ImportDeclaration(23)", "Delete Modifier: final(80)", "Delete SimpleName: listener(92)", "Delete SimpleName: getChannelListenerProxy(93)", "Delete MethodInvocation(94)", "Delete SimpleName: listener(153)", "Delete ThisExpression(155)", "Delete SimpleName: listener(176)", "Delete ThisExpression(178)", "Delete SimpleName: log(196)", "Delete SimpleName: warn(197)", "Delete StringLiteral: \"doInit({}) failed ({}) to inform listener of open failure={}: {}\"(198)", "Delete ThisExpression(199)", "Delete MethodInvocation(202)", "Delete SimpleName: getSimpleName(203)", "Delete MethodInvocation(204)", "Delete SimpleName: ignored(210)", "Delete SimpleName: getMessage(211)", "Delete MethodInvocation(212)", "Delete MethodInvocation(213)", "Delete Block(182)", "Delete SimpleName: Throwable(183)", "Delete SimpleType: Throwable(184)", "Delete SimpleName: err(185)", "Delete SingleVariableDeclaration(186)", "Delete SimpleName: Throwable(187)", "Delete SimpleType: Throwable(188)", "Delete SimpleName: ignored(189)", "Delete SimpleName: GenericUtils(190)", "Delete SimpleName: peelException(191)", "Delete SimpleName: err(192)", "Delete MethodInvocation(193)", "Delete VariableDeclarationFragment(194)", "Delete VariableDeclarationStatement(195)", "Delete SimpleName: log(215)", "Delete SimpleName: isDebugEnabled(216)", "Delete MethodInvocation(217)", "Delete SimpleName: log(218)", "Delete SimpleName: debug(219)", "Delete StringLiteral: \"doInit(\"(220)", "Delete ThisExpression(221)", "Delete StringLiteral: \") inform listener open failure details\"(222)", "Delete InfixExpression: +(223)", "Delete SimpleName: ignored(224)", "Delete MethodInvocation(225)", "Delete ExpressionStatement(226)", "Delete Block(227)", "Delete IfStatement(228)", "Delete SimpleName: log(229)", "Delete SimpleName: isTraceEnabled(230)", "Delete MethodInvocation(231)", "Delete SimpleName: Throwable(232)", "Delete SimpleType: Throwable(233)", "Delete Dimension(234)", "Delete ArrayType: Throwable[](235)", "Delete SimpleName: suppressed(236)", "Delete SimpleName: ignored(237)", "Delete SimpleName: getSuppressed(238)", "Delete MethodInvocation(239)", "Delete VariableDeclarationFragment(240)", "Delete VariableDeclarationStatement(241)", "Delete SimpleName: GenericUtils(242)", "Delete SimpleName: length(243)", "Delete SimpleName: suppressed(244)", "Delete MethodInvocation(245)", "Delete NumberLiteral: 0(246)", "Delete InfixExpression: >(247)", "Delete SimpleName: Throwable(248)", "Delete SimpleType: Throwable(249)", "Delete SimpleName: s(250)", "Delete SingleVariableDeclaration(251)", "Delete SimpleName: suppressed(252)", "Delete SimpleName: log(253)", "Delete SimpleName: trace(254)", "Delete StringLiteral: \"doInit(\"(255)", "Delete ThisExpression(256)", "Delete StringLiteral: \") suppressed channel open failure signalling\"(257)", "Delete InfixExpression: +(258)", "Delete SimpleName: s(259)", "Delete MethodInvocation(260)", "Delete ExpressionStatement(261)", "Delete Block(262)", "Delete EnhancedForStatement(263)", "Delete Block(264)", "Delete IfStatement(265)", "Delete Block(266)", "Delete IfStatement(267)", "Delete Block(268)", "Delete CatchClause(269)", "Delete Block(276)", "Delete CatchClause(277)", "Delete TryStatement(278)"]}}, {"ChannelAgentForwarding_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0", "MOV TryStatement to Block at 2"]}, {"root": "UPDATE from ChannelListener to String", "operations": ["UPD SimpleType: ChannelListener from ChannelListener to String", "UPD SimpleName: ChannelListener from ChannelListener to String"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS CatchClause to TryStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 1", "INS Block to CatchClause at 1", "INS SimpleName: changeEvent to Assignment: = at 0"]}, {"root": "INS Block to TryStatement at 2", "operations": ["INS Block to TryStatement at 2"]}, {"root": "INS SimpleName: changeEvent to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: changeEvent to VariableDeclarationFragment at 0"]}, {"root": "INS StringLiteral: \"auth-agent\" to VariableDeclarationFragment at 1", "operations": ["INS StringLiteral: \"auth-agent\" to VariableDeclarationFragment at 1"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from channelOpenSuccess to signalChannelOpenSuccess", "operations": ["UPD SimpleName: channelOpenSuccess from channelOpenSuccess to signalChannelOpenSuccess"]}, {"root": "UPDATE from ignored to notifyStateChanged", "operations": ["UPD SimpleName: ignored from ignored to notifyStateChanged"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getClass to MethodInvocation at 1", "MOV SimpleName: ignored to MethodInvocation at 0"]}, {"root": "UPDATE from getClass to changeEvent", "operations": ["UPD SimpleName: getClass from getClass to changeEvent"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from channelOpenFailure to signalChannelOpenFailure", "operations": ["UPD SimpleName: channelOpenFailure from channelOpenFailure to signalChannelOpenFailure"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.sshd.common.channel.ChannelListener", "DEL ImportDeclaration"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getChannelListenerProxy", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getMessage", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getSimpleName", "DEL SimpleName: log", "DEL MethodInvocation", "DEL ThisExpression", "DEL StringLiteral: \"doInit({}) failed ({}) to inform listener of open failure={}: {}\"", "DEL MethodInvocation", "DEL SimpleName: warn", "DEL SimpleName: ignored"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL CatchClause", "operations": ["DEL SimpleType: Throwable", "DEL SimpleName: trace", "DEL MethodInvocation", "DEL CatchClause", "DEL InfixExpression: >", "DEL StringLiteral: \") inform listener open failure details\"", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL Block", "DEL ThisExpression", "DEL SimpleName: log", "DEL Block", "DEL SimpleType: Throwable", "DEL SimpleName: peelException", "DEL SimpleName: s", "DEL SingleVariableDeclaration", "DEL SimpleName: isTraceEnabled", "DEL SimpleName: log", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: GenericUtils", "DEL MethodInvocation", "DEL SimpleName: err", "DEL SimpleName: isDebugEnabled", "DEL ArrayType: Throwable[]", "DEL SimpleName: debug", "DEL EnhancedForStatement", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: ignored", "DEL SimpleName: log", "DEL SimpleName: s", "DEL StringLiteral: \") suppressed channel open failure signalling\"", "DEL SimpleName: getSuppressed", "DEL MethodInvocation", "DEL SimpleType: Throwable", "DEL SimpleName: GenericUtils", "DEL SingleVariableDeclaration", "DEL Block", "DEL InfixExpression: +", "DEL SimpleName: log", "DEL NumberLiteral: 0", "DEL StringLiteral: \"doInit(\"", "DEL StringLiteral: \"doInit(\"", "DEL VariableDeclarationStatement", "DEL ThisExpression", "DEL SimpleName: ignored", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: suppressed", "DEL SimpleName: suppressed", "DEL SimpleName: length", "DEL SimpleName: Throwable", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: suppressed", "DEL SimpleName: Throwable", "DEL InfixExpression: +", "DEL SimpleName: err", "DEL SimpleName: ignored", "DEL SimpleName: Throwable", "DEL SimpleName: Throwable", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Dimension", "DEL SimpleType: Throwable"]}, {"root": "DEL TryStatement", "operations": ["DEL CatchClause", "DEL TryStatement", "DEL Block"]}]}}, {"ChannelAgentForwarding_diff": {"operations": ["Move TryStatement(270) into Block(197) at 2", "Update SimpleType: ChannelListener(91) to String", "Move Block(162) into TryStatement(194) at 0", "Insert CatchClause(188) into TryStatement(194) at 1", "Insert Block(193) into TryStatement(194) at 2", "Update SimpleName: ChannelListener(90) to String", "Insert SimpleName: changeEvent(89) into VariableDeclarationFragment(91) at 0", "Insert StringLiteral: \"auth-agent\"(90) into VariableDeclarationFragment(91) at 1", "Move SingleVariableDeclaration(166) into CatchClause(188) at 0", "Insert Block(187) into CatchClause(188) at 1", "Move ExpressionStatement(214) into Block(193) at 0", "Move VariableDeclarationStatement(175) into Block(187) at 0", "Insert ExpressionStatement(177) into Block(187) at 1", "Move ExpressionStatement(181) into Block(187) at 2", "Move ExpressionStatement(275) into Block(187) at 3", "Insert MethodInvocation(191) into ExpressionStatement(192) at 0", "Update SimpleName: channelOpenSuccess(154) to signalChannelOpenSuccess", "Insert Assignment: =(176) into ExpressionStatement(177) at 0", "Update SimpleName: ignored(200) to notifyStateChanged", "Move SimpleName: ignored(200) into MethodInvocation(191) at 0", "Update SimpleName: getClass(201) to changeEvent", "Move SimpleName: getClass(201) into MethodInvocation(191) at 1", "Insert SimpleName: changeEvent(170) into Assignment: =(176) at 0", "Move MethodInvocation(209) into Assignment: =(176) at 1", "Update SimpleName: channelOpenFailure(177) to signalChannelOpenFailure", "Delete QualifiedName: org.apache.sshd.common.channel.ChannelListener(22)", "Delete ImportDeclaration(23)", "Delete Modifier: final(80)", "Delete SimpleName: listener(92)", "Delete SimpleName: getChannelListenerProxy(93)", "Delete MethodInvocation(94)", "Delete SimpleName: listener(153)", "Delete ThisExpression(155)", "Delete SimpleName: listener(176)", "Delete ThisExpression(178)", "Delete SimpleName: log(196)", "Delete SimpleName: warn(197)", "Delete StringLiteral: \"doInit({}) failed ({}) to inform listener of open failure={}: {}\"(198)", "Delete ThisExpression(199)", "Delete MethodInvocation(202)", "Delete SimpleName: getSimpleName(203)", "Delete MethodInvocation(204)", "Delete SimpleName: ignored(210)", "Delete SimpleName: getMessage(211)", "Delete MethodInvocation(212)", "Delete MethodInvocation(213)", "Delete Block(182)", "Delete SimpleName: Throwable(183)", "Delete SimpleType: Throwable(184)", "Delete SimpleName: err(185)", "Delete SingleVariableDeclaration(186)", "Delete SimpleName: Throwable(187)", "Delete SimpleType: Throwable(188)", "Delete SimpleName: ignored(189)", "Delete SimpleName: GenericUtils(190)", "Delete SimpleName: peelException(191)", "Delete SimpleName: err(192)", "Delete MethodInvocation(193)", "Delete VariableDeclarationFragment(194)", "Delete VariableDeclarationStatement(195)", "Delete SimpleName: log(215)", "Delete SimpleName: isDebugEnabled(216)", "Delete MethodInvocation(217)", "Delete SimpleName: log(218)", "Delete SimpleName: debug(219)", "Delete StringLiteral: \"doInit(\"(220)", "Delete ThisExpression(221)", "Delete StringLiteral: \") inform listener open failure details\"(222)", "Delete InfixExpression: +(223)", "Delete SimpleName: ignored(224)", "Delete MethodInvocation(225)", "Delete ExpressionStatement(226)", "Delete Block(227)", "Delete IfStatement(228)", "Delete SimpleName: log(229)", "Delete SimpleName: isTraceEnabled(230)", "Delete MethodInvocation(231)", "Delete SimpleName: Throwable(232)", "Delete SimpleType: Throwable(233)", "Delete Dimension(234)", "Delete ArrayType: Throwable[](235)", "Delete SimpleName: suppressed(236)", "Delete SimpleName: ignored(237)", "Delete SimpleName: getSuppressed(238)", "Delete MethodInvocation(239)", "Delete VariableDeclarationFragment(240)", "Delete VariableDeclarationStatement(241)", "Delete SimpleName: GenericUtils(242)", "Delete SimpleName: length(243)", "Delete SimpleName: suppressed(244)", "Delete MethodInvocation(245)", "Delete NumberLiteral: 0(246)", "Delete InfixExpression: >(247)", "Delete SimpleName: Throwable(248)", "Delete SimpleType: Throwable(249)", "Delete SimpleName: s(250)", "Delete SingleVariableDeclaration(251)", "Delete SimpleName: suppressed(252)", "Delete SimpleName: log(253)", "Delete SimpleName: trace(254)", "Delete StringLiteral: \"doInit(\"(255)", "Delete ThisExpression(256)", "Delete StringLiteral: \") suppressed channel open failure signalling\"(257)", "Delete InfixExpression: +(258)", "Delete SimpleName: s(259)", "Delete MethodInvocation(260)", "Delete ExpressionStatement(261)", "Delete Block(262)", "Delete EnhancedForStatement(263)", "Delete Block(264)", "Delete IfStatement(265)", "Delete Block(266)", "Delete IfStatement(267)", "Delete Block(268)", "Delete CatchClause(269)", "Delete Block(276)", "Delete CatchClause(277)", "Delete TryStatement(278)"]}}, {"AbstractClientChannel_cluster": {"actions": [{"root": "INS Block to CatchClause at 1", "operations": ["INS Block to CatchClause at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 4", "MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "UPDATE from channelOpenSuccess to signalChannelOpenSuccess", "operations": ["UPD SimpleName: channelOpenSuccess from channelOpenSuccess to signalChannelOpenSuccess"]}, {"root": "UPDATE from channelOpenFailure to signalChannelOpenFailure", "operations": ["UPD SimpleName: channelOpenFailure from channelOpenFailure to signalChannelOpenFailure"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.sshd.common.channel.ChannelListener"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: ChannelListener", "DEL SimpleType: ChannelListener", "DEL VariableDeclarationFragment", "DEL SimpleName: listener", "DEL SimpleName: getChannelListenerProxy"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL Block", "operations": ["DEL InfixExpression: >", "DEL SimpleName: suppressed", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: log", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleType: Throwable", "DEL SimpleName: ignored", "DEL StringLiteral: \") suppressed channel open failure signalling\"", "DEL SimpleName: ignored", "DEL SimpleName: getMessage", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: peelException", "DEL ExpressionStatement", "DEL SimpleName: suppressed", "DEL SimpleName: warn", "DEL VariableDeclarationFragment", "DEL SimpleName: GenericUtils", "DEL StringLiteral: \"handleOpenSuccess(\"", "DEL SimpleName: isDebugEnabled", "DEL Block", "DEL SimpleName: Throwable", "DEL Block", "DEL SimpleName: log", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: debug", "DEL Dimension", "DEL StringLiteral: \") inform listener open failure details\"", "DEL SingleVariableDeclaration", "DEL SimpleName: Throwable", "DEL IfStatement", "DEL SimpleName: getSimpleName", "DEL ThisExpression", "DEL SimpleName: length", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleType: Throwable", "DEL MethodInvocation", "DEL ArrayType: Throwable[]", "DEL SimpleName: err", "DEL MethodInvocation", "DEL SimpleName: getSuppressed", "DEL VariableDeclarationStatement", "DEL SimpleName: getSimpleName", "DEL SimpleName: s", "DEL Block", "DEL SimpleName: getClass", "DEL SimpleName: getClass", "DEL SimpleName: trace", "DEL Block", "DEL IfStatement", "DEL InfixExpression: +", "DEL SimpleType: Throwable", "DEL SimpleName: isTraceEnabled", "DEL SimpleName: log", "DEL SimpleName: ignored", "DEL MethodInvocation", "DEL SimpleName: Throwable", "DEL SimpleName: e", "DEL NumberLiteral: 0", "DEL SimpleName: err", "DEL InfixExpression: +", "DEL SimpleName: GenericUtils", "DEL EnhancedForStatement", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleName: suppressed", "DEL SimpleName: log", "DEL ThisExpression", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL TryStatement", "DEL StringLiteral: \"handleOpenSuccess(\"", "DEL ExpressionStatement", "DEL SimpleType: Throwable", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Throwable", "DEL SimpleName: s", "DEL SimpleName: log", "DEL SimpleName: ignored", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ignored", "DEL StringLiteral: \"handleOpenSuccess({}) failed ({}) to inform listener of open failure={}: {}\""]}]}}, {"AbstractClientChannel_diff": {"operations": ["Insert Block(1160) into CatchClause(1161) at 1", "Move VariableDeclarationStatement(1141) into Block(1160) at 0", "Move ExpressionStatement(1149) into Block(1160) at 1", "Move ExpressionStatement(1155) into Block(1160) at 2", "Move ExpressionStatement(1251) into Block(1160) at 3", "Move ExpressionStatement(1257) into Block(1160) at 4", "Move ExpressionStatement(1261) into Block(1160) at 5", "Update SimpleName: channelOpenSuccess(1111) to signalChannelOpenSuccess", "Update SimpleName: channelOpenFailure(1151) to signalChannelOpenFailure", "Delete QualifiedName: org.apache.sshd.common.channel.ChannelListener(46)", "Delete ImportDeclaration(47)", "Delete SimpleName: ChannelListener(1094)", "Delete SimpleType: ChannelListener(1095)", "Delete SimpleName: listener(1096)", "Delete SimpleName: getChannelListenerProxy(1097)", "Delete MethodInvocation(1098)", "Delete VariableDeclarationFragment(1099)", "Delete VariableDeclarationStatement(1100)", "Delete SimpleName: listener(1110)", "Delete ThisExpression(1112)", "Delete SimpleName: listener(1150)", "Delete ThisExpression(1152)", "Delete Block(1156)", "Delete SimpleName: Throwable(1157)", "Delete SimpleType: Throwable(1158)", "Delete SimpleName: err(1159)", "Delete SingleVariableDeclaration(1160)", "Delete SimpleName: Throwable(1161)", "Delete SimpleType: Throwable(1162)", "Delete SimpleName: ignored(1163)", "Delete SimpleName: GenericUtils(1164)", "Delete SimpleName: peelException(1165)", "Delete SimpleName: err(1166)", "Delete MethodInvocation(1167)", "Delete VariableDeclarationFragment(1168)", "Delete VariableDeclarationStatement(1169)", "Delete SimpleName: log(1170)", "Delete SimpleName: warn(1171)", "Delete StringLiteral: \"handleOpenSuccess({}) failed ({}) to inform listener of open failure={}: {}\"(1172)", "Delete ThisExpression(1173)", "Delete SimpleName: ignored(1174)", "Delete SimpleName: getClass(1175)", "Delete MethodInvocation(1176)", "Delete SimpleName: getSimpleName(1177)", "Delete MethodInvocation(1178)", "Delete SimpleName: e(1179)", "Delete SimpleName: getClass(1180)", "Delete MethodInvocation(1181)", "Delete SimpleName: getSimpleName(1182)", "Delete MethodInvocation(1183)", "Delete SimpleName: ignored(1184)", "Delete SimpleName: getMessage(1185)", "Delete MethodInvocation(1186)", "Delete MethodInvocation(1187)", "Delete ExpressionStatement(1188)", "Delete SimpleName: log(1189)", "Delete SimpleName: isDebugEnabled(1190)", "Delete MethodInvocation(1191)", "Delete SimpleName: log(1192)", "Delete SimpleName: debug(1193)", "Delete StringLiteral: \"handleOpenSuccess(\"(1194)", "Delete ThisExpression(1195)", "Delete StringLiteral: \") inform listener open failure details\"(1196)", "Delete InfixExpression: +(1197)", "Delete SimpleName: ignored(1198)", "Delete MethodInvocation(1199)", "Delete ExpressionStatement(1200)", "Delete Block(1201)", "Delete IfStatement(1202)", "Delete SimpleName: log(1203)", "Delete SimpleName: isTraceEnabled(1204)", "Delete MethodInvocation(1205)", "Delete SimpleName: Throwable(1206)", "Delete SimpleType: Throwable(1207)", "Delete Dimension(1208)", "Delete ArrayType: Throwable[](1209)", "Delete SimpleName: suppressed(1210)", "Delete SimpleName: ignored(1211)", "Delete SimpleName: getSuppressed(1212)", "Delete MethodInvocation(1213)", "Delete VariableDeclarationFragment(1214)", "Delete VariableDeclarationStatement(1215)", "Delete SimpleName: GenericUtils(1216)", "Delete SimpleName: length(1217)", "Delete SimpleName: suppressed(1218)", "Delete MethodInvocation(1219)", "Delete NumberLiteral: 0(1220)", "Delete InfixExpression: >(1221)", "Delete SimpleName: Throwable(1222)", "Delete SimpleType: Throwable(1223)", "Delete SimpleName: s(1224)", "Delete SingleVariableDeclaration(1225)", "Delete SimpleName: suppressed(1226)", "Delete SimpleName: log(1227)", "Delete SimpleName: trace(1228)", "Delete StringLiteral: \"handleOpenSuccess(\"(1229)", "Delete ThisExpression(1230)", "Delete StringLiteral: \") suppressed channel open failure signalling\"(1231)", "Delete InfixExpression: +(1232)", "Delete SimpleName: s(1233)", "Delete MethodInvocation(1234)", "Delete ExpressionStatement(1235)", "Delete Block(1236)", "Delete EnhancedForStatement(1237)", "Delete Block(1238)", "Delete IfStatement(1239)", "Delete Block(1240)", "Delete IfStatement(1241)", "Delete Block(1242)", "Delete CatchClause(1243)", "Delete TryStatement(1244)", "Delete Block(1262)"]}}, {"ClientConnectionServiceFactory_cluster": {"actions": [{"root": "INS MethodDeclaration to AnonymousClassDeclaration at 2", "operations": ["INS SimpleName: getPortForwardingEventListenerProxy to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: PortForwardingEventListener to MethodDeclaration at 2", "INS QualifiedName: PortForwardingEventListener.EMPTY to ReturnStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0"]}, {"root": "UPDATE from addPortForwardingEventListener to addPortForwardingEventListenerManager", "operations": ["UPD SimpleName: addPortForwardingEventListener from addPortForwardingEventListener to addPortForwardingEventListenerManager"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getPortForwardingEventListenerProxy", "DEL MethodInvocation"]}]}}, {"ClientConnectionServiceFactory_diff": {"operations": ["Insert MethodDeclaration(80) into AnonymousClassDeclaration(81) at 2", "Update SimpleName: addPortForwardingEventListener(126) to addPortForwardingEventListenerManager", "Insert ThisExpression(137) into MethodInvocation(138) at 2", "Insert MarkerAnnotation(72) into MethodDeclaration(80) at 0", "Insert Modifier: public(73) into MethodDeclaration(80) at 1", "Insert SimpleType: PortForwardingEventListener(75) into MethodDeclaration(80) at 2", "Insert SimpleName: getPortForwardingEventListenerProxy(76) into MethodDeclaration(80) at 3", "Insert Block(79) into MethodDeclaration(80) at 4", "Insert SimpleName: Override(71) into MarkerAnnotation(72) at 0", "Insert SimpleName: PortForwardingEventListener(74) into SimpleType: PortForwardingEventListener(75) at 0", "Insert ReturnStatement(78) into Block(79) at 0", "Insert QualifiedName: PortForwardingEventListener.EMPTY(77) into ReturnStatement(78) at 0", "Delete SimpleName: getPortForwardingEventListenerProxy(127)", "Delete MethodInvocation(128)"]}}, {"ClientSessionImpl_cluster": {"actions": [{"root": "UPDATE from sendSessionEvent to signalSessionEvent", "operations": ["UPD SimpleName: sendSessionEvent from sendSessionEvent to signalSessionEvent", "UPD SimpleName: sendSessionEvent from sendSessionEvent to signalSessionEvent"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 10"]}, {"root": "UPDATE from log to signalSessionCreated", "operations": ["UPD SimpleName: log from log to signalSessionCreated"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.sshd.common.RuntimeSshException", "DEL ImportDeclaration"]}, {"root": "DEL SimpleName: debug", "operations": ["DEL SimpleName: debug"]}, {"root": "DEL StringLiteral: \"Failed ({}) to announce session={} created: {}\"", "operations": ["DEL StringLiteral: \"Failed ({}) to announce session={} created: {}\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: getClass", "DEL MethodInvocation", "DEL SimpleName: getSimpleName"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: e", "DEL SimpleName: getMessage", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: SessionListener", "DEL SimpleType: SessionListener", "DEL SimpleName: listener", "DEL SimpleName: getSessionListenerProxy", "DEL VariableDeclarationStatement"]}, {"root": "DEL TryStatement", "operations": ["DEL SimpleName: log", "DEL SimpleType: RuntimeSshException", "DEL SimpleName: Throwable", "DEL SimpleName: sessionCreated", "DEL SimpleName: peelException", "DEL SimpleName: log", "DEL SimpleType: Throwable", "DEL SimpleName: Exception", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: trace", "DEL MethodInvocation", "DEL SimpleName: isDebugEnabled", "DEL SimpleName: log", "DEL Block", "DEL StringLiteral: \" creation failure details\"", "DEL ThrowStatement", "DEL SimpleName: t", "DEL SimpleName: e", "DEL ExpressionStatement", "DEL SimpleName: e", "DEL SimpleType: Exception", "DEL SimpleType: Exception", "DEL Block", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL CastExpression", "DEL SimpleName: GenericUtils", "DEL SimpleName: e", "DEL MethodInvocation", "DEL SimpleName: e", "DEL IfStatement", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL SimpleName: Exception", "DEL StringLiteral: \"Session=\"", "DEL SimpleName: listener", "DEL Block", "DEL SimpleName: ioSession", "DEL ThrowStatement", "DEL SimpleName: Throwable", "DEL SimpleType: Throwable", "DEL IfStatement", "DEL Block", "DEL SimpleName: isTraceEnabled", "DEL Block", "DEL ThisExpression", "DEL TryStatement", "DEL SimpleName: t", "DEL VariableDeclarationStatement", "DEL Block", "DEL InstanceofExpression", "DEL IfStatement", "DEL SimpleName: RuntimeSshException", "DEL SimpleName: e", "DEL CatchClause", "DEL MethodInvocation"]}]}}, {"ClientSessionImpl_diff": {"operations": ["Update SimpleName: sendSessionEvent(584) to signalSessionEvent", "Move ExpressionStatement(260) into Block(231) at 10", "Update SimpleName: log(247) to signalSessionCreated", "Update SimpleName: sendSessionEvent(607) to signalSessionEvent", "Delete QualifiedName: org.apache.sshd.common.RuntimeSshException(28)", "Delete ImportDeclaration(29)", "Delete SimpleName: debug(248)", "Delete StringLiteral: \"Failed ({}) to announce session={} created: {}\"(249)", "Delete SimpleName: e(250)", "Delete SimpleName: getClass(251)", "Delete MethodInvocation(252)", "Delete SimpleName: getSimpleName(253)", "Delete MethodInvocation(254)", "Delete SimpleName: e(256)", "Delete SimpleName: getMessage(257)", "Delete MethodInvocation(258)", "Delete SimpleName: SessionListener(218)", "Delete SimpleType: SessionListener(219)", "Delete SimpleName: listener(220)", "Delete SimpleName: getSessionListenerProxy(221)", "Delete MethodInvocation(222)", "Delete VariableDeclarationFragment(223)", "Delete VariableDeclarationStatement(224)", "Delete SimpleName: listener(225)", "Delete SimpleName: sessionCreated(226)", "Delete ThisExpression(227)", "Delete MethodInvocation(228)", "Delete ExpressionStatement(229)", "Delete Block(230)", "Delete SimpleName: Throwable(231)", "Delete SimpleType: Throwable(232)", "Delete SimpleName: t(233)", "Delete SingleVariableDeclaration(234)", "Delete SimpleName: Throwable(235)", "Delete SimpleType: Throwable(236)", "Delete SimpleName: e(237)", "Delete SimpleName: GenericUtils(238)", "Delete SimpleName: peelException(239)", "Delete SimpleName: t(240)", "Delete MethodInvocation(241)", "Delete VariableDeclarationFragment(242)", "Delete VariableDeclarationStatement(243)", "Delete SimpleName: log(244)", "Delete SimpleName: isDebugEnabled(245)", "Delete MethodInvocation(246)", "Delete Block(261)", "Delete IfStatement(262)", "Delete SimpleName: log(263)", "Delete SimpleName: isTraceEnabled(264)", "Delete MethodInvocation(265)", "Delete SimpleName: log(266)", "Delete SimpleName: trace(267)", "Delete StringLiteral: \"Session=\"(268)", "Delete SimpleName: ioSession(269)", "Delete StringLiteral: \" creation failure details\"(270)", "Delete InfixExpression: +(271)", "Delete SimpleName: e(272)", "Delete MethodInvocation(273)", "Delete ExpressionStatement(274)", "Delete Block(275)", "Delete IfStatement(276)", "Delete SimpleName: e(277)", "Delete SimpleName: Exception(278)", "Delete SimpleType: Exception(279)", "Delete InstanceofExpression(280)", "Delete SimpleName: Exception(281)", "Delete SimpleType: Exception(282)", "Delete SimpleName: e(283)", "Delete CastExpression(284)", "Delete ThrowStatement(285)", "Delete Block(286)", "Delete SimpleName: RuntimeSshException(287)", "Delete SimpleType: RuntimeSshException(288)", "Delete SimpleName: e(289)", "Delete ClassInstanceCreation(290)", "Delete ThrowStatement(291)", "Delete Block(292)", "Delete IfStatement(293)", "Delete Block(294)", "Delete CatchClause(295)", "Delete TryStatement(296)"]}}, {"AbstractChannel_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: java.util.concurrent.CopyOnWriteArraySet to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 33", "operations": ["INS QualifiedName: org.apache.sshd.common.util.Invoker to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 33"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 53", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: signalChannelInitialized to MethodInvocation at 0", "INS ExpressionStatement to Block at 4", "INS MethodDeclaration to TypeDeclaration: class at 53", "INS Block to MethodDeclaration at 8"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 54", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 54", "INS SimpleType: IOException to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: signalChannelInitialized to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 55", "operations": ["INS SimpleName: signalChannelInitialized to MethodDeclaration at 2", "INS Modifier: protected to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 55", "INS SimpleName: ChannelListener to SimpleType: ChannelListener at 0", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 1", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS SimpleName: listener to InfixExpression: == at 0", "INS SimpleType: ChannelListener to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 56", "operations": ["INS Block to MethodDeclaration at 3", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: Error to CastExpression at 0", "INS ExpressionStatement to Block at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: invokeChannelSignaller to MethodInvocation at 0", "INS SimpleType: RuntimeException to CastExpression at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to TryStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS LambdaExpression to MethodInvocation at 1", "INS SimpleType: Error to InstanceofExpression at 1", "INS SimpleName: err to InstanceofExpression at 0", "INS InstanceofExpression to IfStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: signalChannelOpenSuccess to MethodDeclaration at 2", "INS SimpleName: Error to SimpleType: Error at 0", "INS IfStatement to IfStatement at 2", "INS Modifier: protected to MethodDeclaration at 0", "INS Block to IfStatement at 2", "INS ThrowStatement to Block at 0", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS CastExpression to ThrowStatement at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS Block to LambdaExpression at 1", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: err to SingleVariableDeclaration at 1", "INS SimpleName: err to InstanceofExpression at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: err to CastExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 56", "INS Block to CatchClause at 1", "INS IfStatement to Block at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS TryStatement to Block at 0", "INS InstanceofExpression to IfStatement at 0", "INS CatchClause to TryStatement at 1", "INS Block to IfStatement at 1", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: err to CastExpression at 1", "INS SimpleName: err to ClassInstanceCreation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 57", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS Block to MethodDeclaration at 4", "INS ThisExpression to MethodInvocation at 2", "INS IfStatement to Block at 0", "INS SimpleName: channelOpenSuccess to MethodInvocation at 1", "INS SimpleName: signalChannelOpenSuccess to MethodDeclaration at 2", "INS SimpleType: ChannelListener to SingleVariableDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: listener to MethodInvocation at 0", "INS SimpleName: listener to InfixExpression: == at 0", "INS MethodDeclaration to TypeDeclaration: class at 57", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: ChannelListener to SimpleType: ChannelListener at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 60", "operations": ["INS ExpressionStatement to Block at 0", "INS SimpleName: isDebugEnabled to MethodInvocation at 1", "INS SimpleName: l to MethodInvocation at 1", "INS ThisExpression to InfixExpression: + at 1", "INS SimpleName: invokeChannelSignaller to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: suppressed to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getMessage to MethodInvocation at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS MethodInvocation to IfStatement at 0", "INS InfixExpression: > to IfStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: length to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS MethodInvocation to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Throwable to ArrayType: Throwable[] at 0", "INS SimpleName: ignored to MethodInvocation at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS StringLiteral: \"doInit(\" to InfixExpression: + at 0", "INS SimpleName: warn to MethodInvocation at 1", "INS Block to LambdaExpression at 1", "INS SimpleName: ignored to MethodInvocation at 3", "INS LambdaExpression to MethodInvocation at 1", "INS Block to TryStatement at 0", "INS IfStatement to Block at 3", "INS SimpleName: s to SingleVariableDeclaration at 1", "INS SimpleName: log to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS IfStatement to Block at 1", "INS SimpleName: suppressed to EnhancedForStatement at 1", "INS StringLiteral: \"signalChannelOpenFailure(\" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: log to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 2", "INS Block to IfStatement at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: s to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 4", "INS EnhancedForStatement to Block at 0", "INS SimpleName: reason to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS CatchClause to TryStatement at 1", "INS ThisExpression to InfixExpression: + at 1", "INS StringLiteral: \") inform listener open failure details\" to InfixExpression: + at 2", "INS StringLiteral: \"signalChannelOpenFailure({}) failed ({}) to inform listener of open failure={}: {}\" to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to CatchClause at 1", "INS SimpleName: trace to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 6", "INS TryStatement to Block at 0", "INS SimpleName: reason to MethodInvocation at 2", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS SimpleName: log to MethodInvocation at 0", "INS Dimension to ArrayType: Throwable[] at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: signalChannelOpenFailure to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: ignored to MethodInvocation at 0", "INS StringLiteral: \") suppressed channel open failure signalling\" to InfixExpression: + at 2", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ThisExpression to MethodInvocation at 3", "INS SimpleName: isTraceEnabled to MethodInvocation at 1", "INS ArrayType: Throwable[] to VariableDeclarationStatement at 0", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: signalChannelOpenFailure to MethodDeclaration at 2", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: ignored to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleName: suppressed to VariableDeclarationFragment at 0", "INS SimpleName: getSuppressed to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 60", "INS PrimitiveType: void to MethodDeclaration at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: err to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 61", "operations": ["INS Block to MethodDeclaration at 5", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleType: ChannelListener to SingleVariableDeclaration at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: listener to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: listener to InfixExpression: == at 0", "INS Block to IfStatement at 1", "INS SimpleName: channelOpenFailure to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS ThisExpression to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: reason to MethodInvocation at 3", "INS Modifier: protected to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 61", "INS IfStatement to Block at 0", "INS SimpleName: signalChannelOpenFailure to MethodDeclaration at 2", "INS SimpleName: ChannelListener to SimpleType: ChannelListener at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 63", "operations": ["INS SimpleType: ChannelListener to SingleVariableDeclaration at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleName: hint to SingleVariableDeclaration at 1", "INS SimpleName: notifyStateChanged to MethodDeclaration at 2", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: String to SimpleType: String at 0", "INS MethodDeclaration to TypeDeclaration: class at 63", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: ChannelListener to SimpleType: ChannelListener at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 71", "operations": ["INS TryStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 71", "INS SimpleName: preClose to MethodDeclaration at 3", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleName: signalChannelClosed to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS NullLiteral to MethodInvocation at 1", "INS Block to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 72", "operations": ["INS Modifier: public to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 72", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: signalChannelClosed to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 73", "operations": ["INS Block to MethodDeclaration at 5", "INS MethodDeclaration to TypeDeclaration: class at 73", "INS SimpleType: ChannelListener to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS SimpleName: listener to InfixExpression: == at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: channelClosed to MethodInvocation at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: listener to MethodInvocation at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS ThisExpression to MethodInvocation at 2", "INS SimpleName: reason to MethodInvocation at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: ChannelListener to SimpleType: ChannelListener at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: signalChannelClosed to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 74", "operations": ["INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS SimpleName: session to MethodInvocation at 0", "INS ContinueStatement to Block at 0", "INS ArrayType: ChannelListener[] to VariableDeclarationStatement at 0", "INS SimpleName: err to VariableDeclarationFragment at 0", "INS NullLiteral to InfixExpression: == at 1", "INS IfStatement to Block at 5", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: err to Assignment: = at 0", "INS SimpleType: Invoker to ParameterizedType: Invoker<ChannelListener,Void> at 0", "INS NullLiteral to ConditionalExpression at 1", "INS SimpleName: err to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getSession to MethodInvocation at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS Dimension to ArrayType: ChannelListener[] at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: invoke to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: session to InfixExpression: == at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS Block to CatchClause at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: manager to InfixExpression: == at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS EnhancedForStatement to Block at 4", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: FactoryManager to SimpleType: FactoryManager at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: Void to SimpleType: Void at 0", "INS SimpleName: invoker to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 74", "INS IfStatement to Block at 0", "INS SimpleName: getChannelListenerProxy to MethodInvocation at 1", "INS SimpleName: l to InfixExpression: == at 0", "INS NullLiteral to ConditionalExpression at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleName: manager to VariableDeclarationFragment at 0", "INS SimpleName: accumulateException to MethodInvocation at 1", "INS SimpleName: l to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS ConditionalExpression to ArrayInitializer at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: Invoker to SimpleType: Invoker at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleType: Throwable to MethodDeclaration at 4", "INS ThrowStatement to Block at 0", "INS SimpleType: Void to ParameterizedType: Invoker<ChannelListener,Void> at 2", "INS Block to TryStatement at 0", "INS SimpleName: t to MethodInvocation at 3", "INS SimpleName: invoker to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS ParameterizedType: Invoker<ChannelListener,Void> to SingleVariableDeclaration at 0", "INS SimpleName: l to MethodInvocation at 2", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleType: FactoryManager to VariableDeclarationStatement at 0", "INS ConditionalExpression to ArrayInitializer at 0", "INS NullLiteral to ConditionalExpression at 1", "INS SimpleName: invokeChannelSignaller to MethodDeclaration at 2", "INS SimpleName: session to VariableDeclarationFragment at 0", "INS SimpleName: listeners to VariableDeclarationFragment at 0", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS SimpleName: Session to SimpleType: Session at 0", "INS ArrayInitializer to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getFactoryManager to MethodInvocation at 1", "INS SimpleType: Session to VariableDeclarationStatement at 0", "INS SimpleName: listeners to EnhancedForStatement at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: err to InfixExpression: != at 0", "INS SimpleName: manager to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS TryStatement to Block at 1", "INS SimpleName: session to InfixExpression: == at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: err to ThrowStatement at 0", "INS CatchClause to TryStatement at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleName: init to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: IOException to MethodDeclaration at 7", "MOV PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: void to MethodDeclaration at 1", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV Modifier: protected to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0", "INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 5", "MOV TryStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: listener to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS Block to IfStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: listener to InfixExpression: == at 0", "INS IfStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: listener to MethodInvocation at 2", "INS SimpleName: ChannelListener to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: validateListener to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV IfStatement to Block at 2", "MOV ExpressionStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 1", "MOV TryStatement to Block at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Throwable to SingleVariableDeclaration at 0"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS NullLiteral to ReturnStatement at 0", "INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: invokeChannelSignaller to MethodInvocation at 0", "INS SimpleName: signalChannelInitialized to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Block to LambdaExpression at 1", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS LambdaExpression to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: l to MethodInvocation at 1"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS SimpleName: l to MethodInvocation at 1", "INS Block to LambdaExpression at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS LambdaExpression to MethodInvocation at 1", "INS ReturnStatement to Block at 1", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: notifyStateChanged to MethodInvocation at 0", "INS SimpleName: invokeChannelSignaller to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS SimpleName: hint to MethodInvocation at 2", "INS NullLiteral to ReturnStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS Block to TryStatement at 2", "operations": ["INS Block to TryStatement at 2"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 1"]}, {"root": "MOVE from ParameterizedType: Invoker<ChannelListener,Void>", "operations": ["MOV SimpleType: ChannelListener to ParameterizedType: Invoker<ChannelListener,Void> at 1"]}, {"root": "MOVE from Block", "operations": ["MOV SynchronizedStatement to Block at 0"]}, {"root": "UPDATE from ValidateUtils to ChannelListener", "operations": ["UPD SimpleName: ValidateUtils from ValidateUtils to ChannelListener"]}, {"root": "UPDATE from checkNotNull to validateListener", "operations": ["UPD SimpleName: checkNotNull from checkNotNull to validateListener"]}, {"root": "INS SingleVariableDeclaration to CatchClause at 0", "operations": ["INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: err to SingleVariableDeclaration at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0"]}, {"root": "MOVE from ArrayType: ChannelListener[]", "operations": ["MOV SimpleType: ChannelListener to ArrayType: ChannelListener[] at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: ChannelListener to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Throwable to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: err to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: err to SingleVariableDeclaration at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Throwable to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from t to err", "operations": ["UPD SimpleName: t from t to err", "UPD SimpleName: t from t to err", "UPD SimpleName: t from t to err", "UPD SimpleName: t from t to err"]}, {"root": "MOVE from ArrayInitializer", "operations": ["MOV MethodInvocation to ArrayInitializer at 2"]}, {"root": "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleType: Throwable to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleType: Throwable to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleType: Throwable to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleName: invokeChannelSignaller to MethodInvocation at 0", "operations": ["INS SimpleName: invokeChannelSignaller to MethodInvocation at 0"]}, {"root": "INS LambdaExpression to MethodInvocation at 1", "operations": ["INS SimpleName: l to MethodInvocation at 1", "INS Block to LambdaExpression at 1", "INS ExpressionStatement to Block at 0", "INS ReturnStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to ReturnStatement at 0", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS SimpleName: reason to MethodInvocation at 2", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS LambdaExpression to MethodInvocation at 1"]}, {"root": "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: listener to VariableDeclarationFragment at 0", "MOV MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "INS SimpleName: ignored to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: ignored to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: err to MethodInvocation at 2", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS SimpleName: peelException to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from \"preClose({}) {} while signal channel closed: {}\" to \"signalChannelClosed({}) {} while signal channel closed: {}\"", "operations": ["UPD StringLiteral: \"preClose({}) {} while signal channel closed: {}\" from \"preClose({}) {} while signal channel closed: {}\" to \"signalChannelClosed({}) {} while signal channel closed: {}\""]}, {"root": "UPDATE from listener to l", "operations": ["UPD SimpleName: listener from listener to l", "UPD SimpleName: listener from listener to l"]}, {"root": "UPDATE from addChannelListener to signalChannelOpenSuccess", "operations": ["UPD SimpleName: addChannelListener from addChannelListener to signalChannelOpenSuccess"]}, {"root": "UPDATE from channelClosed to signalChannelClosed", "operations": ["UPD SimpleName: channelClosed from channelClosed to signalChannelClosed"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: channelClosed to MethodInvocation at 0"]}, {"root": "UPDATE from \"preClose(\" to \"signalChannelClosed(\"", "operations": ["UPD StringLiteral: \"preClose(\" from \"preClose(\" to \"signalChannelClosed(\"", "UPD StringLiteral: \"preClose(\" from \"preClose(\" to \"signalChannelClosed(\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: EventListenerUtils", "DEL SimpleName: synchronizedListenersSet", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL SimpleType: Throwable", "operations": ["DEL SimpleName: Throwable", "DEL SimpleType: Throwable"]}, {"root": "DEL SimpleName: t", "operations": ["DEL SimpleName: t"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: listener", "DEL MethodInvocation", "DEL SimpleName: getChannelListenerProxy", "DEL VariableDeclarationFragment"]}, {"root": "DEL StringLiteral: \"addChannelListener(%s) null instance\"", "operations": ["DEL StringLiteral: \"addChannelListener(%s) null instance\""]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: preClose", "DEL MethodDeclaration", "DEL Block"]}]}}, {"AbstractChannel_diff": {"operations": ["Insert ImportDeclaration(23) into CompilationUnit(3588) at 11", "Insert ImportDeclaration(67) into CompilationUnit(3588) at 33", "Insert QualifiedName: java.util.concurrent.CopyOnWriteArraySet(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: org.apache.sshd.common.util.Invoker(66) into ImportDeclaration(67) at 0", "Insert MethodDeclaration(1293) into TypeDeclaration: class(3587) at 53", "Insert MethodDeclaration(1371) into TypeDeclaration: class(3587) at 54", "Insert MethodDeclaration(1391) into TypeDeclaration: class(3587) at 55", "Insert MethodDeclaration(1445) into TypeDeclaration: class(3587) at 56", "Insert MethodDeclaration(1465) into TypeDeclaration: class(3587) at 57", "Insert MethodDeclaration(1588) into TypeDeclaration: class(3587) at 59", "Insert MethodDeclaration(1613) into TypeDeclaration: class(3587) at 60", "Insert MethodDeclaration(1717) into TypeDeclaration: class(3587) at 62", "Insert MethodDeclaration(2491) into TypeDeclaration: class(3587) at 70", "Insert MethodDeclaration(2598) into TypeDeclaration: class(3587) at 71", "Insert MethodDeclaration(2623) into TypeDeclaration: class(3587) at 72", "Insert MethodDeclaration(2735) into TypeDeclaration: class(3587) at 73", "Move MarkerAnnotation(1228) into MethodDeclaration(1293) at 0", "Move Modifier: public(1229) into MethodDeclaration(1293) at 1", "Move PrimitiveType: void(1230) into MethodDeclaration(1293) at 2", "Move SimpleName: init(1231) into MethodDeclaration(1293) at 3", "Move SingleVariableDeclaration(1235) into MethodDeclaration(1293) at 4", "Move SingleVariableDeclaration(1239) into MethodDeclaration(1293) at 5", "Move SingleVariableDeclaration(1242) into MethodDeclaration(1293) at 6", "Move SimpleType: IOException(1244) into MethodDeclaration(1293) at 7", "Insert Block(1292) into MethodDeclaration(1293) at 8", "Insert Modifier: protected(1294) into MethodDeclaration(1371) at 0", "Insert PrimitiveType: void(1295) into MethodDeclaration(1371) at 1", "Insert SimpleName: signalChannelInitialized(1296) into MethodDeclaration(1371) at 2", "Insert SimpleType: IOException(1298) into MethodDeclaration(1371) at 3", "Insert Block(1370) into MethodDeclaration(1371) at 4", "Insert Modifier: protected(1372) into MethodDeclaration(1391) at 0", "Insert PrimitiveType: void(1373) into MethodDeclaration(1391) at 1", "Insert SimpleName: signalChannelInitialized(1374) into MethodDeclaration(1391) at 2", "Insert SingleVariableDeclaration(1378) into MethodDeclaration(1391) at 3", "Insert Block(1390) into MethodDeclaration(1391) at 4", "Insert Modifier: protected(1392) into MethodDeclaration(1445) at 0", "Insert PrimitiveType: void(1393) into MethodDeclaration(1445) at 1", "Insert SimpleName: signalChannelOpenSuccess(1394) into MethodDeclaration(1445) at 2", "Insert Block(1444) into MethodDeclaration(1445) at 3", "Move Modifier: protected(2107) into MethodDeclaration(1465) at 0", "Move PrimitiveType: void(2108) into MethodDeclaration(1465) at 1", "Insert SimpleName: signalChannelOpenSuccess(1448) into MethodDeclaration(1465) at 2", "Insert SingleVariableDeclaration(1452) into MethodDeclaration(1465) at 3", "Insert Block(1464) into MethodDeclaration(1465) at 4", "Insert Modifier: protected(1477) into MethodDeclaration(1588) at 0", "Insert PrimitiveType: void(1478) into MethodDeclaration(1588) at 1", "Insert SimpleName: signalChannelOpenFailure(1479) into MethodDeclaration(1588) at 2", "Insert SingleVariableDeclaration(1483) into MethodDeclaration(1588) at 3", "Insert Block(1587) into MethodDeclaration(1588) at 4", "Insert Modifier: protected(1589) into MethodDeclaration(1613) at 0", "Insert PrimitiveType: void(1590) into MethodDeclaration(1613) at 1", "Insert SimpleName: signalChannelOpenFailure(1591) into MethodDeclaration(1613) at 2", "Insert SingleVariableDeclaration(1595) into MethodDeclaration(1613) at 3", "Insert SingleVariableDeclaration(1599) into MethodDeclaration(1613) at 4", "Insert Block(1612) into MethodDeclaration(1613) at 5", "Insert Modifier: protected(1693) into MethodDeclaration(1717) at 0", "Insert PrimitiveType: void(1694) into MethodDeclaration(1717) at 1", "Insert SimpleName: notifyStateChanged(1695) into MethodDeclaration(1717) at 2", "Insert SingleVariableDeclaration(1699) into MethodDeclaration(1717) at 3", "Insert SingleVariableDeclaration(1703) into MethodDeclaration(1717) at 4", "Move Block(1392) into MethodDeclaration(1717) at 5", "Move MarkerAnnotation(2106) into MethodDeclaration(2491) at 0", "Insert Modifier: protected(2385) into MethodDeclaration(2491) at 1", "Insert PrimitiveType: void(2386) into MethodDeclaration(2491) at 2", "Insert SimpleName: preClose(2387) into MethodDeclaration(2491) at 3", "Insert Block(2490) into MethodDeclaration(2491) at 4", "Insert Modifier: public(2492) into MethodDeclaration(2598) at 0", "Insert PrimitiveType: void(2493) into MethodDeclaration(2598) at 1", "Insert SimpleName: signalChannelClosed(2494) into MethodDeclaration(2598) at 2", "Insert SingleVariableDeclaration(2498) into MethodDeclaration(2598) at 3", "Insert Block(2597) into MethodDeclaration(2598) at 4", "Insert Modifier: protected(2599) into MethodDeclaration(2623) at 0", "Insert PrimitiveType: void(2600) into MethodDeclaration(2623) at 1", "Insert SimpleName: signalChannelClosed(2601) into MethodDeclaration(2623) at 2", "Insert SingleVariableDeclaration(2605) into MethodDeclaration(2623) at 3", "Insert SingleVariableDeclaration(2609) into MethodDeclaration(2623) at 4", "Insert Block(2622) into MethodDeclaration(2623) at 5", "Insert Modifier: protected(2624) into MethodDeclaration(2735) at 0", "Insert PrimitiveType: void(2625) into MethodDeclaration(2735) at 1", "Insert SimpleName: invokeChannelSignaller(2626) into MethodDeclaration(2735) at 2", "Insert SingleVariableDeclaration(2635) into MethodDeclaration(2735) at 3", "Insert SimpleType: Throwable(2637) into MethodDeclaration(2735) at 4", "Insert Block(2734) into MethodDeclaration(2735) at 5", "Insert ClassInstanceCreation(200) into VariableDeclarationFragment(201) at 1", "Move IfStatement(1257) into Block(1292) at 0", "Move ExpressionStatement(1263) into Block(1292) at 1", "Move ExpressionStatement(1269) into Block(1292) at 2", "Move ExpressionStatement(1275) into Block(1292) at 3", "Insert ExpressionStatement(1283) into Block(1292) at 4", "Move ExpressionStatement(1353) into Block(1292) at 5", "Move ExpressionStatement(1358) into Block(1292) at 6", "Insert SimpleName: IOException(1297) into SimpleType: IOException(1298) at 0", "Move TryStatement(1346) into Block(1370) at 0", "Insert SimpleType: ChannelListener(1376) into SingleVariableDeclaration(1378) at 0", "Insert SimpleName: listener(1377) into SingleVariableDeclaration(1378) at 1", "Insert IfStatement(1384) into Block(1390) at 0", "Move ExpressionStatement(1288) into Block(1390) at 1", "Insert TryStatement(1443) into Block(1444) at 0", "Insert SimpleType: ChannelListener(1450) into SingleVariableDeclaration(1452) at 0", "Insert SimpleName: listener(1451) into SingleVariableDeclaration(1452) at 1", "Insert IfStatement(1458) into Block(1464) at 0", "Insert ExpressionStatement(1463) into Block(1464) at 1", "Insert SimpleType: Throwable(1481) into SingleVariableDeclaration(1483) at 0", "Insert SimpleName: reason(1482) into SingleVariableDeclaration(1483) at 1", "Insert TryStatement(1586) into Block(1587) at 0", "Insert SimpleType: ChannelListener(1593) into SingleVariableDeclaration(1595) at 0", "Insert SimpleName: listener(1594) into SingleVariableDeclaration(1595) at 1", "Insert SimpleType: Throwable(1597) into SingleVariableDeclaration(1599) at 0", "Insert SimpleName: reason(1598) into SingleVariableDeclaration(1599) at 1", "Insert IfStatement(1605) into Block(1612) at 0", "Insert ExpressionStatement(1611) into Block(1612) at 1", "Insert SimpleType: ChannelListener(1697) into SingleVariableDeclaration(1699) at 0", "Insert SimpleName: listener(1698) into SingleVariableDeclaration(1699) at 1", "Insert SimpleType: String(1701) into SingleVariableDeclaration(1703) at 0", "Insert SimpleName: hint(1702) into SingleVariableDeclaration(1703) at 1", "Insert IfStatement(1709) into Block(1716) at 0", "Insert IfStatement(1794) into Block(1833) at 0", "Insert ExpressionStatement(1799) into Block(1833) at 1", "Insert TryStatement(2400) into Block(2490) at 0", "Move VariableDeclarationStatement(2225) into Block(2490) at 1", "Move IfStatement(2299) into Block(2490) at 2", "Move ExpressionStatement(2302) into Block(2490) at 3", "Move SimpleType: Throwable(2129) into SingleVariableDeclaration(2498) at 0", "Insert SimpleName: reason(2497) into SingleVariableDeclaration(2498) at 1", "Move TryStatement(2213) into Block(2597) at 0", "Insert SimpleType: ChannelListener(2603) into SingleVariableDeclaration(2605) at 0", "Insert SimpleName: listener(2604) into SingleVariableDeclaration(2605) at 1", "Insert SimpleType: Throwable(2607) into SingleVariableDeclaration(2609) at 0", "Insert SimpleName: reason(2608) into SingleVariableDeclaration(2609) at 1", "Insert IfStatement(2615) into Block(2622) at 0", "Insert ExpressionStatement(2621) into Block(2622) at 1", "Insert ParameterizedType: Invoker<ChannelListener,Void>(2633) into SingleVariableDeclaration(2635) at 0", "Insert SimpleName: invoker(2634) into SingleVariableDeclaration(2635) at 1", "Insert SimpleName: Throwable(2636) into SimpleType: Throwable(2637) at 0", "Insert VariableDeclarationStatement(2644) into Block(2734) at 0", "Insert VariableDeclarationStatement(2658) into Block(2734) at 1", "Insert VariableDeclarationStatement(2686) into Block(2734) at 2", "Insert VariableDeclarationStatement(2692) into Block(2734) at 3", "Insert EnhancedForStatement(2726) into Block(2734) at 4", "Insert IfStatement(2733) into Block(2734) at 5", "Insert ParameterizedType: CopyOnWriteArraySet<>(199) into ClassInstanceCreation(200) at 0", "Insert MethodInvocation(1282) into ExpressionStatement(1283) at 0", "Insert Block(1312) into TryStatement(1369) at 0", "Insert SimpleName: ChannelListener(1375) into SimpleType: ChannelListener(1376) at 0", "Insert InfixExpression: ==(1381) into IfStatement(1384) at 0", "Insert Block(1383) into IfStatement(1384) at 1", "Insert Block(1408) into TryStatement(1443) at 0", "Insert CatchClause(1442) into TryStatement(1443) at 1", "Insert SimpleName: ChannelListener(1449) into SimpleType: ChannelListener(1450) at 0", "Insert InfixExpression: ==(1455) into IfStatement(1458) at 0", "Insert Block(1457) into IfStatement(1458) at 1", "Insert MethodInvocation(1462) into ExpressionStatement(1463) at 0", "Insert SimpleName: Throwable(1480) into SimpleType: Throwable(1481) at 0", "Insert Block(1498) into TryStatement(1586) at 0", "Insert CatchClause(1585) into TryStatement(1586) at 1", "Insert SimpleName: ChannelListener(1592) into SimpleType: ChannelListener(1593) at 0", "Insert SimpleName: Throwable(1596) into SimpleType: Throwable(1597) at 0", "Insert InfixExpression: ==(1602) into IfStatement(1605) at 0", "Insert Block(1604) into IfStatement(1605) at 1", "Insert MethodInvocation(1610) into ExpressionStatement(1611) at 0", "Insert Block(1635) into TryStatement(1690) at 0", "Insert Block(1689) into TryStatement(1690) at 2", "Insert SimpleName: ChannelListener(1696) into SimpleType: ChannelListener(1697) at 0", "Insert SimpleName: String(1700) into SimpleType: String(1701) at 0", "Insert InfixExpression: ==(1706) into IfStatement(1709) at 0", "Insert Block(1708) into IfStatement(1709) at 1", "Insert InfixExpression: ==(1791) into IfStatement(1794) at 0", "Insert Block(1793) into IfStatement(1794) at 1", "Insert MethodInvocation(1798) into ExpressionStatement(1799) at 0", "Insert Block(2392) into TryStatement(2400) at 0", "Move Block(2212) into TryStatement(2400) at 1", "Insert SimpleName: ChannelListener(2602) into SimpleType: ChannelListener(2603) at 0", "Insert SimpleName: Throwable(2606) into SimpleType: Throwable(2607) at 0", "Insert InfixExpression: ==(2612) into IfStatement(2615) at 0", "Insert Block(2614) into IfStatement(2615) at 1", "Insert MethodInvocation(2620) into ExpressionStatement(2621) at 0", "Insert SimpleType: Invoker(2628) into ParameterizedType: Invoker<ChannelListener,Void>(2633) at 0", "Move SimpleType: ChannelListener(1277) into ParameterizedType: Invoker<ChannelListener,Void>(2633) at 1", "Insert SimpleType: Void(2632) into ParameterizedType: Invoker<ChannelListener,Void>(2633) at 2", "Insert SimpleType: Session(2639) into VariableDeclarationStatement(2644) at 0", "Insert VariableDeclarationFragment(2643) into VariableDeclarationStatement(2644) at 1", "Insert SimpleType: FactoryManager(2646) into VariableDeclarationStatement(2658) at 0", "Insert VariableDeclarationFragment(2657) into VariableDeclarationStatement(2658) at 1", "Insert ArrayType: ChannelListener[](2662) into VariableDeclarationStatement(2686) at 0", "Insert VariableDeclarationFragment(2685) into VariableDeclarationStatement(2686) at 1", "Insert SimpleType: Throwable(2688) into VariableDeclarationStatement(2692) at 0", "Insert VariableDeclarationFragment(2691) into VariableDeclarationStatement(2692) at 1", "Insert SingleVariableDeclaration(2696) into EnhancedForStatement(2726) at 0", "Insert SimpleName: listeners(2697) into EnhancedForStatement(2726) at 1", "Insert Block(2725) into EnhancedForStatement(2726) at 2", "Insert InfixExpression: !=(2729) into IfStatement(2733) at 0", "Insert Block(2732) into IfStatement(2733) at 1", "Insert SimpleType: CopyOnWriteArraySet(198) into ParameterizedType: CopyOnWriteArraySet<>(199) at 0", "Insert SimpleName: signalChannelInitialized(1281) into MethodInvocation(1282) at 0", "Insert ExpressionStatement(1311) into Block(1312) at 0", "Insert SimpleName: listener(1379) into InfixExpression: ==(1381) at 0", "Insert NullLiteral(1380) into InfixExpression: ==(1381) at 1", "Insert ReturnStatement(1382) into Block(1383) at 0", "Insert ExpressionStatement(1407) into Block(1408) at 0", "Insert SingleVariableDeclaration(1412) into CatchClause(1442) at 0", "Insert Block(1441) into CatchClause(1442) at 1", "Insert SimpleName: listener(1453) into InfixExpression: ==(1455) at 0", "Insert NullLiteral(1454) into InfixExpression: ==(1455) at 1", "Insert ReturnStatement(1456) into Block(1457) at 0", "Insert SimpleName: listener(1459) into MethodInvocation(1462) at 0", "Insert SimpleName: channelOpenSuccess(1460) into MethodInvocation(1462) at 1", "Insert ThisExpression(1461) into MethodInvocation(1462) at 2", "Insert ExpressionStatement(1497) into Block(1498) at 0", "Insert SingleVariableDeclaration(1502) into CatchClause(1585) at 0", "Insert Block(1584) into CatchClause(1585) at 1", "Insert SimpleName: listener(1600) into InfixExpression: ==(1602) at 0", "Insert NullLiteral(1601) into InfixExpression: ==(1602) at 1", "Insert ReturnStatement(1603) into Block(1604) at 0", "Insert SimpleName: listener(1606) into MethodInvocation(1610) at 0", "Insert SimpleName: channelOpenFailure(1607) into MethodInvocation(1610) at 1", "Insert ThisExpression(1608) into MethodInvocation(1610) at 2", "Insert SimpleName: reason(1609) into MethodInvocation(1610) at 3", "Insert ExpressionStatement(1634) into Block(1635) at 0", "Move SynchronizedStatement(1446) into Block(1689) at 0", "Insert SimpleName: listener(1704) into InfixExpression: ==(1706) at 0", "Insert NullLiteral(1705) into InfixExpression: ==(1706) at 1", "Insert ReturnStatement(1707) into Block(1708) at 0", "Update SimpleName: ValidateUtils(1458) to ChannelListener", "Update SimpleName: checkNotNull(1459) to validateListener", "Insert SimpleName: listener(1789) into InfixExpression: ==(1791) at 0", "Insert NullLiteral(1790) into InfixExpression: ==(1791) at 1", "Insert ReturnStatement(1792) into Block(1793) at 0", "Insert SimpleName: ChannelListener(1795) into MethodInvocation(1798) at 0", "Insert SimpleName: validateListener(1796) into MethodInvocation(1798) at 1", "Insert SimpleName: listener(1797) into MethodInvocation(1798) at 2", "Insert ExpressionStatement(2391) into Block(2392) at 0", "Insert SingleVariableDeclaration(2517) into CatchClause(2595) at 0", "Insert SimpleName: listener(2610) into InfixExpression: ==(2612) at 0", "Insert NullLiteral(2611) into InfixExpression: ==(2612) at 1", "Insert ReturnStatement(2613) into Block(2614) at 0", "Insert SimpleName: listener(2616) into MethodInvocation(2620) at 0", "Insert SimpleName: channelClosed(2617) into MethodInvocation(2620) at 1", "Insert ThisExpression(2618) into MethodInvocation(2620) at 2", "Insert SimpleName: reason(2619) into MethodInvocation(2620) at 3", "Insert SimpleName: Invoker(2627) into SimpleType: Invoker(2628) at 0", "Insert SimpleName: Void(2631) into SimpleType: Void(2632) at 0", "Insert SimpleName: Session(2638) into SimpleType: Session(2639) at 0", "Insert SimpleName: session(2640) into VariableDeclarationFragment(2643) at 0", "Insert MethodInvocation(2642) into VariableDeclarationFragment(2643) at 1", "Insert SimpleName: FactoryManager(2645) into SimpleType: FactoryManager(2646) at 0", "Insert SimpleName: manager(2647) into VariableDeclarationFragment(2657) at 0", "Insert ConditionalExpression(2656) into VariableDeclarationFragment(2657) at 1", "Move SimpleType: ChannelListener(2111) into ArrayType: ChannelListener[](2662) at 0", "Insert Dimension(2661) into ArrayType: ChannelListener[](2662) at 1", "Insert SimpleName: listeners(2663) into VariableDeclarationFragment(2685) at 0", "Insert ArrayInitializer(2684) into VariableDeclarationFragment(2685) at 1", "Insert SimpleName: Throwable(2687) into SimpleType: Throwable(2688) at 0", "Insert SimpleName: err(2689) into VariableDeclarationFragment(2691) at 0", "Insert NullLiteral(2690) into VariableDeclarationFragment(2691) at 1", "Move SimpleType: ChannelListener(1380) into SingleVariableDeclaration(2696) at 0", "Insert SimpleName: l(2695) into SingleVariableDeclaration(2696) at 1", "Insert IfStatement(2703) into Block(2725) at 0", "Insert TryStatement(2724) into Block(2725) at 1", "Insert SimpleName: err(2727) into InfixExpression: !=(2729) at 0", "Insert NullLiteral(2728) into InfixExpression: !=(2729) at 1", "Insert ThrowStatement(2731) into Block(2732) at 0", "Insert SimpleName: CopyOnWriteArraySet(197) into SimpleType: CopyOnWriteArraySet(198) at 0", "Insert MethodInvocation(1310) into ExpressionStatement(1311) at 0", "Move SimpleType: Throwable(1295) into SingleVariableDeclaration(1316) at 0", "Insert SimpleName: err(1315) into SingleVariableDeclaration(1316) at 1", "Insert MethodInvocation(1406) into ExpressionStatement(1407) at 0", "Move SimpleType: Throwable(1398) into SingleVariableDeclaration(1412) at 0", "Insert SimpleName: err(1411) into SingleVariableDeclaration(1412) at 1", "Insert IfStatement(1440) into Block(1441) at 0", "Insert MethodInvocation(1496) into ExpressionStatement(1497) at 0", "Insert SimpleType: Throwable(1500) into SingleVariableDeclaration(1502) at 0", "Insert SimpleName: err(1501) into SingleVariableDeclaration(1502) at 1", "Move VariableDeclarationStatement(2116) into Block(1584) at 0", "Insert ExpressionStatement(1530) into Block(1584) at 1", "Insert IfStatement(1544) into Block(1584) at 2", "Insert IfStatement(1583) into Block(1584) at 3", "Insert MethodInvocation(1633) into ExpressionStatement(1634) at 0", "Update SimpleName: t(1395) to err", "Insert MethodInvocation(2390) into ExpressionStatement(2391) at 0", "Insert SimpleType: Throwable(2515) into SingleVariableDeclaration(2517) at 0", "Insert SimpleName: err(2516) into SingleVariableDeclaration(2517) at 1", "Insert SimpleName: getSession(2641) into MethodInvocation(2642) at 0", "Insert ParenthesizedExpression(2651) into ConditionalExpression(2656) at 0", "Insert NullLiteral(2652) into ConditionalExpression(2656) at 1", "Insert MethodInvocation(2655) into ConditionalExpression(2656) at 2", "Insert ConditionalExpression(2672) into ArrayInitializer(2684) at 0", "Insert ConditionalExpression(2681) into ArrayInitializer(2684) at 1", "Move MethodInvocation(2114) into ArrayInitializer(2684) at 2", "Insert InfixExpression: ==(2700) into IfStatement(2703) at 0", "Insert Block(2702) into IfStatement(2703) at 1", "Insert Block(2709) into TryStatement(2724) at 0", "Insert CatchClause(2723) into TryStatement(2724) at 1", "Insert SimpleName: err(2730) into ThrowStatement(2731) at 0", "Insert SimpleName: invokeChannelSignaller(1299) into MethodInvocation(1310) at 0", "Insert LambdaExpression(1309) into MethodInvocation(1310) at 1", "Insert SimpleType: Throwable(1318) into VariableDeclarationStatement(1325) at 0", "Insert SimpleName: invokeChannelSignaller(1395) into MethodInvocation(1406) at 0", "Insert LambdaExpression(1405) into MethodInvocation(1406) at 1", "Insert InstanceofExpression(1416) into IfStatement(1440) at 0", "Insert Block(1422) into IfStatement(1440) at 1", "Insert IfStatement(1439) into IfStatement(1440) at 2", "Insert SimpleName: invokeChannelSignaller(1484) into MethodInvocation(1496) at 0", "Insert LambdaExpression(1495) into MethodInvocation(1496) at 1", "Insert SimpleName: Throwable(1499) into SimpleType: Throwable(1500) at 0", "Insert SimpleType: Throwable(1504) into VariableDeclarationStatement(1511) at 0", "Insert MethodInvocation(1529) into ExpressionStatement(1530) at 0", "Insert MethodInvocation(1533) into IfStatement(1544) at 0", "Insert Block(1543) into IfStatement(1544) at 1", "Insert MethodInvocation(1547) into IfStatement(1583) at 0", "Insert Block(1582) into IfStatement(1583) at 1", "Insert SimpleName: invokeChannelSignaller(1621) into MethodInvocation(1633) at 0", "Insert LambdaExpression(1632) into MethodInvocation(1633) at 1", "Insert SimpleType: Throwable(1641) into VariableDeclarationStatement(1648) at 0", "Insert SimpleName: signalChannelClosed(2388) into MethodInvocation(2390) at 0", "Insert NullLiteral(2389) into MethodInvocation(2390) at 1", "Insert SimpleName: invokeChannelSignaller(2499) into MethodInvocation(2511) at 0", "Insert LambdaExpression(2510) into MethodInvocation(2511) at 1", "Insert SimpleName: Throwable(2514) into SimpleType: Throwable(2515) at 0", "Insert SimpleType: Throwable(2519) into VariableDeclarationStatement(2526) at 0", "Insert InfixExpression: ==(2650) into ParenthesizedExpression(2651) at 0", "Insert SimpleName: session(2653) into MethodInvocation(2655) at 0", "Insert SimpleName: getFactoryManager(2654) into MethodInvocation(2655) at 1", "Insert ParenthesizedExpression(2667) into ConditionalExpression(2672) at 0", "Insert NullLiteral(2668) into ConditionalExpression(2672) at 1", "Insert MethodInvocation(2671) into ConditionalExpression(2672) at 2", "Insert ParenthesizedExpression(2676) into ConditionalExpression(2681) at 0", "Insert NullLiteral(2677) into ConditionalExpression(2681) at 1", "Move MethodInvocation(1281) into ConditionalExpression(2681) at 2", "Insert SimpleName: l(2698) into InfixExpression: ==(2700) at 0", "Insert NullLiteral(2699) into InfixExpression: ==(2700) at 1", "Insert ContinueStatement(2701) into Block(2702) at 0", "Insert ExpressionStatement(2708) into Block(2709) at 0", "Move SingleVariableDeclaration(2127) into CatchClause(2723) at 0", "Insert Block(2722) into CatchClause(2723) at 1", "Insert VariableDeclarationFragment(1301) into LambdaExpression(1309) at 0", "Insert Block(1308) into LambdaExpression(1309) at 1", "Insert SimpleName: Throwable(1317) into SimpleType: Throwable(1318) at 0", "Insert VariableDeclarationFragment(1397) into LambdaExpression(1405) at 0", "Insert Block(1404) into LambdaExpression(1405) at 1", "Insert SimpleName: err(1413) into InstanceofExpression(1416) at 0", "Insert SimpleType: RuntimeException(1415) into InstanceofExpression(1416) at 1", "Insert ThrowStatement(1421) into Block(1422) at 0", "Insert InstanceofExpression(1426) into IfStatement(1439) at 0", "Insert Block(1432) into IfStatement(1439) at 1", "Insert Block(1438) into IfStatement(1439) at 2", "Insert VariableDeclarationFragment(1486) into LambdaExpression(1495) at 0", "Insert Block(1494) into LambdaExpression(1495) at 1", "Insert SimpleName: Throwable(1503) into SimpleType: Throwable(1504) at 0", "Insert SimpleName: ignored(1505) into VariableDeclarationFragment(1510) at 0", "Insert MethodInvocation(1509) into VariableDeclarationFragment(1510) at 1", "Insert SimpleName: log(1512) into MethodInvocation(1529) at 0", "Insert SimpleName: warn(1513) into MethodInvocation(1529) at 1", "Insert StringLiteral: \"signalChannelOpenFailure({}) failed ({}) to inform listener of open failure={}: {}\"(1514) into MethodInvocation(1529) at 2", "Insert ThisExpression(1515) into MethodInvocation(1529) at 3", "Insert MethodInvocation(1520) into MethodInvocation(1529) at 4", "Insert MethodInvocation(1525) into MethodInvocation(1529) at 5", "Insert MethodInvocation(1528) into MethodInvocation(1529) at 6", "Insert SimpleName: log(1531) into MethodInvocation(1533) at 0", "Insert SimpleName: isDebugEnabled(1532) into MethodInvocation(1533) at 1", "Insert ExpressionStatement(1542) into Block(1543) at 0", "Insert SimpleName: log(1545) into MethodInvocation(1547) at 0", "Insert SimpleName: isTraceEnabled(1546) into MethodInvocation(1547) at 1", "Insert VariableDeclarationStatement(1557) into Block(1582) at 0", "Insert IfStatement(1581) into Block(1582) at 1", "Insert VariableDeclarationFragment(1623) into LambdaExpression(1632) at 0", "Insert Block(1631) into LambdaExpression(1632) at 1", "Insert SimpleName: Throwable(1640) into SimpleType: Throwable(1641) at 0", "Insert VariableDeclarationFragment(2501) into LambdaExpression(2510) at 0", "Insert Block(2509) into LambdaExpression(2510) at 1", "Insert SimpleName: Throwable(2518) into SimpleType: Throwable(2519) at 0", "Update StringLiteral: \"preClose({}) {} while signal channel closed: {}\"(2139) to \"signalChannelClosed({}) {} while signal channel closed: {}\"", "Insert SimpleName: session(2648) into InfixExpression: ==(2650) at 0", "Insert NullLiteral(2649) into InfixExpression: ==(2650) at 1", "Insert InfixExpression: ==(2666) into ParenthesizedExpression(2667) at 0", "Insert SimpleName: manager(2669) into MethodInvocation(2671) at 0", "Insert SimpleName: getChannelListenerProxy(2670) into MethodInvocation(2671) at 1", "Insert InfixExpression: ==(2675) into ParenthesizedExpression(2676) at 0", "Insert MethodInvocation(2707) into ExpressionStatement(2708) at 0", "Insert ExpressionStatement(2721) into Block(2722) at 0", "Insert SimpleName: l(1300) into VariableDeclarationFragment(1301) at 0", "Insert ExpressionStatement(1305) into Block(1308) at 0", "Insert ReturnStatement(1307) into Block(1308) at 1", "Update SimpleName: t(1299) to err", "Update SimpleName: listener(1278) to l", "Move SimpleName: listener(1278) into VariableDeclarationFragment(1397) at 0", "Move ExpressionStatement(1350) into Block(1404) at 0", "Insert ReturnStatement(1403) into Block(1404) at 1", "Insert SimpleName: RuntimeException(1414) into SimpleType: RuntimeException(1415) at 0", "Insert CastExpression(1420) into ThrowStatement(1421) at 0", "Insert SimpleName: err(1423) into InstanceofExpression(1426) at 0", "Insert SimpleType: Error(1425) into InstanceofExpression(1426) at 1", "Insert ThrowStatement(1431) into Block(1432) at 0", "Insert ThrowStatement(1437) into Block(1438) at 0", "Insert SimpleName: l(1485) into VariableDeclarationFragment(1486) at 0", "Insert ExpressionStatement(1491) into Block(1494) at 0", "Insert ReturnStatement(1493) into Block(1494) at 1", "Insert SimpleName: GenericUtils(1506) into MethodInvocation(1509) at 0", "Insert SimpleName: peelException(1507) into MethodInvocation(1509) at 1", "Insert SimpleName: err(1508) into MethodInvocation(1509) at 2", "Insert MethodInvocation(1518) into MethodInvocation(1520) at 0", "Insert SimpleName: getSimpleName(1519) into MethodInvocation(1520) at 1", "Insert MethodInvocation(1523) into MethodInvocation(1525) at 0", "Insert SimpleName: getSimpleName(1524) into MethodInvocation(1525) at 1", "Insert SimpleName: ignored(1526) into MethodInvocation(1528) at 0", "Insert SimpleName: getMessage(1527) into MethodInvocation(1528) at 1", "Insert MethodInvocation(1541) into ExpressionStatement(1542) at 0", "Insert ArrayType: Throwable[](1551) into VariableDeclarationStatement(1557) at 0", "Insert VariableDeclarationFragment(1556) into VariableDeclarationStatement(1557) at 1", "Insert InfixExpression: >(1563) into IfStatement(1581) at 0", "Insert Block(1580) into IfStatement(1581) at 1", "Insert SimpleName: l(1622) into VariableDeclarationFragment(1623) at 0", "Insert ExpressionStatement(1628) into Block(1631) at 0", "Insert ReturnStatement(1630) into Block(1631) at 1", "Update SimpleName: t(1402) to err", "Insert SimpleName: l(2500) into VariableDeclarationFragment(2501) at 0", "Insert ExpressionStatement(2506) into Block(2509) at 0", "Insert ReturnStatement(2508) into Block(2509) at 1", "Update SimpleName: t(2133) to err", "Insert SimpleName: manager(2664) into InfixExpression: ==(2666) at 0", "Insert NullLiteral(2665) into InfixExpression: ==(2666) at 1", "Insert SimpleName: session(2673) into InfixExpression: ==(2675) at 0", "Insert NullLiteral(2674) into InfixExpression: ==(2675) at 1", "Insert SimpleName: invoker(2704) into MethodInvocation(2707) at 0", "Insert SimpleName: invoke(2705) into MethodInvocation(2707) at 1", "Insert SimpleName: l(2706) into MethodInvocation(2707) at 2", "Insert Assignment: =(2720) into ExpressionStatement(2721) at 0", "Insert MethodInvocation(1304) into ExpressionStatement(1305) at 0", "Insert NullLiteral(1306) into ReturnStatement(1307) at 0", "Insert NullLiteral(1402) into ReturnStatement(1403) at 0", "Insert SimpleType: RuntimeException(1418) into CastExpression(1420) at 0", "Insert SimpleName: err(1419) into CastExpression(1420) at 1", "Insert SimpleName: Error(1424) into SimpleType: Error(1425) at 0", "Insert CastExpression(1430) into ThrowStatement(1431) at 0", "Insert ClassInstanceCreation(1436) into ThrowStatement(1437) at 0", "Insert MethodInvocation(1490) into ExpressionStatement(1491) at 0", "Insert NullLiteral(1492) into ReturnStatement(1493) at 0", "Insert SimpleName: ignored(1516) into MethodInvocation(1518) at 0", "Insert SimpleName: getClass(1517) into MethodInvocation(1518) at 1", "Insert SimpleName: reason(1521) into MethodInvocation(1523) at 0", "Insert SimpleName: getClass(1522) into MethodInvocation(1523) at 1", "Insert SimpleName: log(1534) into MethodInvocation(1541) at 0", "Insert SimpleName: debug(1535) into MethodInvocation(1541) at 1", "Insert InfixExpression: +(1539) into MethodInvocation(1541) at 2", "Insert SimpleName: ignored(1540) into MethodInvocation(1541) at 3", "Insert SimpleType: Throwable(1549) into ArrayType: Throwable[](1551) at 0", "Insert Dimension(1550) into ArrayType: Throwable[](1551) at 1", "Insert SimpleName: suppressed(1552) into VariableDeclarationFragment(1556) at 0", "Insert MethodInvocation(1555) into VariableDeclarationFragment(1556) at 1", "Insert MethodInvocation(1561) into InfixExpression: >(1563) at 0", "Insert NumberLiteral: 0(1562) into InfixExpression: >(1563) at 1", "Insert EnhancedForStatement(1579) into Block(1580) at 0", "Insert MethodInvocation(1627) into ExpressionStatement(1628) at 0", "Insert NullLiteral(1629) into ReturnStatement(1630) at 0", "Insert MethodInvocation(2505) into ExpressionStatement(2506) at 0", "Insert NullLiteral(2507) into ReturnStatement(2508) at 0", "Insert SimpleName: err(2714) into Assignment: =(2720) at 0", "Insert MethodInvocation(2719) into Assignment: =(2720) at 1", "Insert SimpleName: signalChannelInitialized(1302) into MethodInvocation(1304) at 0", "Insert SimpleName: l(1303) into MethodInvocation(1304) at 1", "Update SimpleName: addChannelListener(1347) to signalChannelOpenSuccess", "Update SimpleName: listener(1348) to l", "Insert SimpleName: RuntimeException(1417) into SimpleType: RuntimeException(1418) at 0", "Insert SimpleType: Error(1428) into CastExpression(1430) at 0", "Insert SimpleName: err(1429) into CastExpression(1430) at 1", "Insert SimpleType: RuntimeException(1434) into ClassInstanceCreation(1436) at 0", "Insert SimpleName: err(1435) into ClassInstanceCreation(1436) at 1", "Insert SimpleName: signalChannelOpenFailure(1487) into MethodInvocation(1490) at 0", "Insert SimpleName: l(1488) into MethodInvocation(1490) at 1", "Insert SimpleName: reason(1489) into MethodInvocation(1490) at 2", "Insert StringLiteral: \"doInit(\"(1536) into InfixExpression: +(1539) at 0", "Insert ThisExpression(1537) into InfixExpression: +(1539) at 1", "Insert StringLiteral: \") inform listener open failure details\"(1538) into InfixExpression: +(1539) at 2", "Insert SimpleName: Throwable(1548) into SimpleType: Throwable(1549) at 0", "Insert SimpleName: ignored(1553) into MethodInvocation(1555) at 0", "Insert SimpleName: getSuppressed(1554) into MethodInvocation(1555) at 1", "Insert SimpleName: GenericUtils(1558) into MethodInvocation(1561) at 0", "Insert SimpleName: length(1559) into MethodInvocation(1561) at 1", "Insert SimpleName: suppressed(1560) into MethodInvocation(1561) at 2", "Insert SingleVariableDeclaration(1567) into EnhancedForStatement(1579) at 0", "Insert SimpleName: suppressed(1568) into EnhancedForStatement(1579) at 1", "Insert Block(1578) into EnhancedForStatement(1579) at 2", "Insert SimpleName: notifyStateChanged(1624) into MethodInvocation(1627) at 0", "Insert SimpleName: l(1625) into MethodInvocation(1627) at 1", "Insert SimpleName: hint(1626) into MethodInvocation(1627) at 2", "Update SimpleName: channelClosed(2118) to signalChannelClosed", "Move SimpleName: channelClosed(2118) into MethodInvocation(2505) at 0", "Insert SimpleName: l(2503) into MethodInvocation(2505) at 1", "Insert SimpleName: reason(2504) into MethodInvocation(2505) at 2", "Update StringLiteral: \"preClose(\"(2156) to \"signalChannelClosed(\"", "Insert SimpleName: GenericUtils(2715) into MethodInvocation(2719) at 0", "Insert SimpleName: accumulateException(2716) into MethodInvocation(2719) at 1", "Insert SimpleName: err(2717) into MethodInvocation(2719) at 2", "Insert SimpleName: t(2718) into MethodInvocation(2719) at 3", "Insert SimpleName: Error(1427) into SimpleType: Error(1428) at 0", "Insert SimpleName: RuntimeException(1433) into SimpleType: RuntimeException(1434) at 0", "Insert SimpleType: Throwable(1565) into SingleVariableDeclaration(1567) at 0", "Insert SimpleName: s(1566) into SingleVariableDeclaration(1567) at 1", "Insert ExpressionStatement(1577) into Block(1578) at 0", "Insert SimpleName: Throwable(1564) into SimpleType: Throwable(1565) at 0", "Insert MethodInvocation(1576) into ExpressionStatement(1577) at 0", "Insert SimpleName: log(1569) into MethodInvocation(1576) at 0", "Insert SimpleName: trace(1570) into MethodInvocation(1576) at 1", "Insert InfixExpression: +(1574) into MethodInvocation(1576) at 2", "Insert SimpleName: s(1575) into MethodInvocation(1576) at 3", "Insert StringLiteral: \"signalChannelOpenFailure(\"(1571) into InfixExpression: +(1574) at 0", "Insert ThisExpression(1572) into InfixExpression: +(1574) at 1", "Insert StringLiteral: \") suppressed channel open failure signalling\"(1573) into InfixExpression: +(1574) at 2", "Update StringLiteral: \"preClose(\"(2191) to \"signalChannelClosed(\"", "Delete SimpleName: EventListenerUtils(193)", "Delete SimpleName: synchronizedListenersSet(194)", "Delete MethodInvocation(195)", "Delete Block(1289)", "Delete SimpleName: Throwable(1290)", "Delete SimpleType: Throwable(1291)", "Delete SimpleName: t(1292)", "Delete VariableDeclarationFragment(1282)", "Delete VariableDeclarationStatement(1283)", "Delete Block(1359)", "Delete MethodDeclaration(1360)", "Delete SimpleName: listener(2112)", "Delete SimpleName: listener(1381)", "Delete SimpleName: getChannelListenerProxy(1382)", "Delete MethodInvocation(1383)", "Delete VariableDeclarationFragment(1384)", "Delete VariableDeclarationStatement(1385)", "Delete StringLiteral: \"addChannelListener(%s) null instance\"(1461)", "Delete ThisExpression(1462)", "Delete SimpleName: listener(2117)", "Delete ThisExpression(2119)", "Delete NullLiteral(2120)", "Delete SimpleName: preClose(2109)", "Delete Block(2303)", "Delete MethodDeclaration(2304)"]}}, {"ChannelListener_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 10", "operations": ["INS SimpleName: SshdEventListener to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: interface at 10", "INS SimpleType: L to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS SimpleName: L to TypeParameter at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleType: ChannelListener to TypeParameter at 1", "INS SimpleType: ChannelListener to TypeLiteral at 0", "INS SimpleName: ChannelListener to SimpleType: ChannelListener at 0", "INS Modifier: static to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: validateListener to MethodDeclaration at 3", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleName: listener to MethodInvocation at 2", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleName: ChannelListener to SimpleType: ChannelListener at 0", "INS SimpleName: validateListener to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to ReturnStatement at 0", "INS TypeLiteral to MethodInvocation at 0", "INS TypeParameter to MethodDeclaration at 1", "INS SimpleType: L to SingleVariableDeclaration at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1"]}, {"root": "INS TextElement: or the name of an exception class to TagElement: @param at 5", "operations": ["INS TextElement: or the name of an exception class to TagElement: @param at 5"]}]}}, {"ChannelListener_diff": {"operations": ["Insert MethodDeclaration(239) into TypeDeclaration: interface(240) at 10", "Insert Modifier: static(216) into MethodDeclaration(239) at 0", "Insert TypeParameter(220) into MethodDeclaration(239) at 1", "Insert SimpleType: L(222) into MethodDeclaration(239) at 2", "Insert SimpleName: validateListener(223) into MethodDeclaration(239) at 3", "Insert SingleVariableDeclaration(227) into MethodDeclaration(239) at 4", "Insert Block(238) into MethodDeclaration(239) at 5", "Insert SimpleName: L(217) into TypeParameter(220) at 0", "Insert SimpleType: ChannelListener(219) into TypeParameter(220) at 1", "Insert SimpleName: L(221) into SimpleType: L(222) at 0", "Insert SimpleType: L(225) into SingleVariableDeclaration(227) at 0", "Insert SimpleName: listener(226) into SingleVariableDeclaration(227) at 1", "Insert ReturnStatement(237) into Block(238) at 0", "Insert TextElement: or the name of an exception class(152) into TagElement: @param(153) at 5", "Insert SimpleName: ChannelListener(218) into SimpleType: ChannelListener(219) at 0", "Insert SimpleName: L(224) into SimpleType: L(225) at 0", "Insert MethodInvocation(236) into ReturnStatement(237) at 0", "Insert SimpleName: SshdEventListener(228) into MethodInvocation(236) at 0", "Insert SimpleName: validateListener(229) into MethodInvocation(236) at 1", "Insert SimpleName: listener(230) into MethodInvocation(236) at 2", "Insert MethodInvocation(235) into MethodInvocation(236) at 3", "Insert TypeLiteral(233) into MethodInvocation(235) at 0", "Insert SimpleName: getSimpleName(234) into MethodInvocation(235) at 1", "Insert SimpleType: ChannelListener(232) into TypeLiteral(233) at 0", "Insert SimpleName: ChannelListener(231) into SimpleType: ChannelListener(232) at 0"]}}, {"DefaultTcpipForwarder_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: java.util.concurrent.CopyOnWriteArraySet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS ImportDeclaration to CompilationUnit at 34", "operations": ["INS QualifiedName: org.apache.sshd.common.util.Invoker to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 34"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 19", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: Collection to ParameterizedType: Collection<PortForwardingEventListenerManager> at 0", "INS SimpleType: PortForwardingEventListenerManager to ParameterizedType: Collection<PortForwardingEventListenerManager> at 1", "INS ParameterizedType: Collection<PortForwardingEventListenerManager> to FieldDeclaration at 2", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0", "INS FieldDeclaration to TypeDeclaration: class at 19", "INS SimpleName: managersHolder to VariableDeclarationFragment at 0", "INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0", "INS SimpleName: PortForwardingEventListenerManager to SimpleType: PortForwardingEventListenerManager at 0", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS ConditionalExpression to ReturnStatement at 0", "INS SimpleType: PortForwardingEventListenerManager to ParameterizedType: Collection<PortForwardingEventListenerManager> at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: getRegisteredManagers to MethodDeclaration at 3", "INS SimpleName: managersHolder to MethodInvocation at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: emptyList to MethodInvocation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to ConditionalExpression at 0", "INS ClassInstanceCreation to ConditionalExpression at 2", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS MethodDeclaration to TypeDeclaration: class at 26", "INS SimpleName: Collections to MethodInvocation at 0", "INS ParameterizedType: Collection<PortForwardingEventListenerManager> to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS SimpleName: PortForwardingEventListenerManager to SimpleType: PortForwardingEventListenerManager at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleType: Collection to ParameterizedType: Collection<PortForwardingEventListenerManager> at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: managersHolder to ClassInstanceCreation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: addPortForwardingEventListenerManager to MethodDeclaration at 3", "INS MethodInvocation to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: manager to SingleVariableDeclaration at 1", "INS StringLiteral: \"No manager\" to MethodInvocation at 3", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS SimpleName: managersHolder to MethodInvocation at 0", "INS SimpleName: requireNonNull to MethodInvocation at 1", "INS SimpleName: Objects to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: PortForwardingEventListenerManager to SimpleType: PortForwardingEventListenerManager at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: PortForwardingEventListenerManager to SingleVariableDeclaration at 0", "INS SimpleName: manager to MethodInvocation at 2", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 28", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: manager to InfixExpression: == at 0", "INS SimpleType: PortForwardingEventListenerManager to SingleVariableDeclaration at 0", "INS SimpleName: PortForwardingEventListenerManager to SimpleType: PortForwardingEventListenerManager at 0", "INS NullLiteral to InfixExpression: == at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: remove to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 28", "INS ReturnStatement to Block at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS IfStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: manager to MethodInvocation at 2", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: manager to SingleVariableDeclaration at 1", "INS SimpleName: managersHolder to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: removePortForwardingEventListenerManager to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 31", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: defaultListeners to VariableDeclarationFragment at 0", "INS SimpleName: getSession to MethodInvocation at 0", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS SimpleName: manager to MethodInvocation at 0", "INS SimpleName: getDefaultListeners to MethodDeclaration at 2", "INS SimpleType: Session to VariableDeclarationStatement at 0", "INS SimpleType: PortForwardingEventListener to ParameterizedType: Collection<PortForwardingEventListener> at 1", "INS SimpleName: defaultListeners to MethodInvocation at 0", "INS SimpleName: defaultListeners to ReturnStatement at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS SimpleName: session to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Block to MethodDeclaration at 3", "INS SimpleName: add to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: l to InfixExpression: != at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleType: Collection to ParameterizedType: Collection<PortForwardingEventListener> at 0", "INS SimpleName: Session to SimpleType: Session at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: FactoryManager to VariableDeclarationStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to ConditionalExpression at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: l to MethodInvocation at 2", "INS SimpleName: session to MethodInvocation at 0", "INS SimpleName: getPortForwardingEventListenerProxy to MethodInvocation at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS IfStatement to Block at 7", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 6", "INS Assignment: = to ExpressionStatement at 0", "INS NullLiteral to ConditionalExpression at 1", "INS SimpleName: defaultListeners to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: getFactoryManager to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS ParameterizedType: Collection<PortForwardingEventListener> to MethodDeclaration at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getPortForwardingEventListenerProxy to MethodInvocation at 1", "INS SimpleName: manager to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS ParameterizedType: Collection<PortForwardingEventListener> to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: session to MethodInvocation at 0", "INS IfStatement to Block at 4", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: FactoryManager to SimpleType: FactoryManager at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleName: defaultListeners to MethodInvocation at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleType: Collection to ParameterizedType: Collection<PortForwardingEventListener> at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: session to VariableDeclarationFragment at 0", "INS ConditionalExpression to Assignment: = at 1", "INS SimpleName: l to InfixExpression: != at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: l to Assignment: = at 0", "INS SimpleName: manager to InfixExpression: == at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS Block to IfStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleType: PortForwardingEventListener to ParameterizedType: Collection<PortForwardingEventListener> at 1", "INS VariableDeclarationStatement to Block at 3", "INS ReturnStatement to Block at 8", "INS SimpleName: l to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS SimpleName: IOException to SimpleType: IOException at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: t to CastExpression at 1", "INS CastExpression to ThrowStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleType: IOException to MethodDeclaration at 5", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS NullLiteral to ReturnStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to CatchClause at 1", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: localForwarding to SingleVariableDeclaration at 1", "INS SimpleType: Error to CastExpression at 0", "INS LambdaExpression to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS StringLiteral: \" to signal tearing down explicit tunnel for local=\" to InfixExpression: + at 3", "INS IfStatement to Block at 0", "INS SimpleName: localForwarding to InfixExpression: + at 4", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: t to CastExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 36", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS Block to LambdaExpression at 1", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 1", "INS SimpleName: t to ClassInstanceCreation at 2", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS ExpressionStatement to Block at 0", "INS StringLiteral: \" on bound=\" to InfixExpression: + at 5", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleType: RuntimeException to CastExpression at 0", "INS TryStatement to Block at 0", "INS SimpleName: invokePortEventListenerSignaller to MethodInvocation at 0", "INS StringLiteral: \"Failed (\" to InfixExpression: + at 0", "INS Block to TryStatement at 0", "INS SimpleName: signalTearingDownExplicitTunnel to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: boundAddress to SingleVariableDeclaration at 1", "INS SimpleName: t to InstanceofExpression at 0", "INS IfStatement to IfStatement at 2", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: t to CastExpression at 1", "INS CastExpression to ThrowStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS CastExpression to ThrowStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: signalTearingDownExplicitTunnel to MethodDeclaration at 2", "INS ThrowStatement to Block at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: boundAddress to InfixExpression: + at 6", "INS InstanceofExpression to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: boundAddress to MethodInvocation at 2", "INS SimpleType: IOException to CastExpression at 0", "INS SimpleName: t to MethodInvocation at 0", "INS SimpleName: l to MethodInvocation at 1", "INS ThrowStatement to Block at 0", "INS SimpleName: localForwarding to MethodInvocation at 3", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS StringLiteral: \")\" to InfixExpression: + at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleType: IOException to InstanceofExpression at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Error to InstanceofExpression at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 37", "operations": ["INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS InfixExpression: == to IfStatement at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: listener to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS IfStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: boundAddress to MethodInvocation at 3", "INS Modifier: protected to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: boundAddress to SingleVariableDeclaration at 1", "INS SimpleName: localForwarding to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleType: IOException to MethodDeclaration at 6", "INS MethodDeclaration to TypeDeclaration: class at 37", "INS SimpleName: signalTearingDownExplicitTunnel to MethodDeclaration at 2", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: listener to InfixExpression: == at 0", "INS SimpleName: tearingDownExplicitTunnel to MethodInvocation at 1", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: localForwarding to MethodInvocation at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS InstanceofExpression to IfStatement at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleName: boundAddress to InfixExpression: + at 6", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: localForwarding to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS Block to IfStatement at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS SimpleType: RuntimeException to CastExpression at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS ThrowStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: localForwarding to InfixExpression: + at 4", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to TryStatement at 0", "INS SimpleName: l to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: signalTornDownExplicitTunnel to MethodInvocation at 0", "INS StringLiteral: \" on bound=\" to InfixExpression: + at 5", "INS SimpleType: IOException to MethodDeclaration at 6", "INS ThrowStatement to Block at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS Block to LambdaExpression at 1", "INS StringLiteral: \" to signal torn down explicit tunnel local=\" to InfixExpression: + at 3", "INS LambdaExpression to MethodInvocation at 1", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS SimpleType: Error to CastExpression at 0", "INS IfStatement to IfStatement at 2", "INS TryStatement to Block at 0", "INS SimpleName: signalTornDownExplicitTunnel to MethodDeclaration at 2", "INS CastExpression to ThrowStatement at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS SimpleName: t to MethodInvocation at 0", "INS InstanceofExpression to IfStatement at 0", "INS ThrowStatement to Block at 0", "INS IfStatement to IfStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: boundAddress to SingleVariableDeclaration at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS ThrowStatement to Block at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: reason to MethodInvocation at 4", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS StringLiteral: \"Failed (\" to InfixExpression: + at 0", "INS StringLiteral: \")\" to InfixExpression: + at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS Block to CatchClause at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: invokePortEventListenerSignaller to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to IfStatement at 1", "INS SimpleType: IOException to InstanceofExpression at 1", "INS SimpleName: boundAddress to MethodInvocation at 2", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: t to CastExpression at 1", "INS Block to IfStatement at 2", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: t to ClassInstanceCreation at 2", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS SimpleType: IOException to CastExpression at 0", "INS SimpleName: t to CastExpression at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: localForwarding to MethodInvocation at 3", "INS SimpleType: Error to InstanceofExpression at 1", "INS SimpleName: t to CastExpression at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 39", "operations": ["INS SimpleName: reason to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: tornDownExplicitTunnel to MethodInvocation at 1", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: boundAddress to MethodInvocation at 3", "INS SimpleName: localForwarding to SingleVariableDeclaration at 1", "INS SimpleType: IOException to MethodDeclaration at 7", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS IfStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: boundAddress to SingleVariableDeclaration at 1", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: listener to MethodInvocation at 0", "INS SimpleName: reason to MethodInvocation at 5", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: localForwarding to MethodInvocation at 4", "INS Block to IfStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS SimpleName: listener to InfixExpression: == at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 39", "INS SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: signalTornDownExplicitTunnel to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS VariableDeclarationFragment to LambdaExpression at 0", "INS SimpleName: boundAddress to InfixExpression: + at 6", "INS CatchClause to TryStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ThrowStatement to Block at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS CastExpression to ThrowStatement at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ThrowStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS Block to TryStatement at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: RuntimeException to CastExpression at 0", "INS SimpleType: IOException to InstanceofExpression at 1", "INS SimpleName: signalEstablishedDynamicTunnel to MethodInvocation at 0", "INS SimpleType: IOException to MethodDeclaration at 6", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS IfStatement to IfStatement at 2", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: boundAddress to MethodInvocation at 3", "INS SimpleName: reason to MethodInvocation at 4", "INS Block to IfStatement at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS StringLiteral: \"Failed (\" to InfixExpression: + at 0", "INS StringLiteral: \" on bound=\" to InfixExpression: + at 5", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: t to ClassInstanceCreation at 2", "INS ReturnStatement to Block at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS IfStatement to Block at 0", "INS InstanceofExpression to IfStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: signalEstablishedDynamicTunnel to MethodDeclaration at 2", "INS IfStatement to IfStatement at 2", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleName: local to MethodInvocation at 2", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: t to CastExpression at 1", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: t to CastExpression at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS Block to MethodDeclaration at 7", "INS Block to LambdaExpression at 1", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS StringLiteral: \")\" to InfixExpression: + at 2", "INS SimpleName: t to CastExpression at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: boundAddress to SingleVariableDeclaration at 1", "INS SimpleType: IOException to CastExpression at 0", "INS StringLiteral: \" to signal establishing dynamic tunnel for local=\" to InfixExpression: + at 3", "INS TryStatement to Block at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS SimpleName: invokePortEventListenerSignaller to MethodInvocation at 0", "INS SimpleName: local to InfixExpression: + at 4", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: local to SingleVariableDeclaration at 1", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleType: Error to CastExpression at 0", "INS Block to IfStatement at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS Block to IfStatement at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS LambdaExpression to MethodInvocation at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: t to MethodInvocation at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS NullLiteral to ReturnStatement at 0", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS SimpleType: Error to InstanceofExpression at 1", "INS Block to IfStatement at 2", "INS ThrowStatement to Block at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: l to MethodInvocation at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS SimpleType: IOException to MethodDeclaration at 7", "INS ExpressionStatement to Block at 1", "INS SimpleName: signalEstablishedDynamicTunnel to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: boundAddress to MethodInvocation at 4", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: establishedDynamicTunnel to MethodInvocation at 1", "INS Block to MethodDeclaration at 8", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: reason to MethodInvocation at 5", "INS SimpleName: boundAddress to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: listener to MethodInvocation at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: local to SingleVariableDeclaration at 1", "INS SimpleName: listener to InfixExpression: == at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS IfStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS SimpleName: local to MethodInvocation at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: t to CastExpression at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: t to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS SimpleName: t to CastExpression at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: t to InstanceofExpression at 0", "INS CastExpression to ThrowStatement at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: local to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS Block to TryStatement at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS IfStatement to IfStatement at 2", "INS SimpleName: signalEstablishingDynamicTunnel to MethodInvocation at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS TryStatement to Block at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleType: IOException to InstanceofExpression at 1", "INS Block to LambdaExpression at 1", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleType: Error to InstanceofExpression at 1", "INS NullLiteral to ReturnStatement at 0", "INS LambdaExpression to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS SimpleType: Error to CastExpression at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: l to MethodInvocation at 1", "INS StringLiteral: \" to signal establishing dynamic tunnel for local=\" to InfixExpression: + at 3", "INS InstanceofExpression to IfStatement at 0", "INS ThrowStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ThrowStatement to Block at 0", "INS StringLiteral: \")\" to InfixExpression: + at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: signalEstablishingDynamicTunnel to MethodDeclaration at 2", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: t to CastExpression at 1", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleType: IOException to CastExpression at 0", "INS SimpleName: t to ClassInstanceCreation at 2", "INS Block to IfStatement at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: invokePortEventListenerSignaller to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS InstanceofExpression to IfStatement at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: local to InfixExpression: + at 4", "INS SimpleName: local to SingleVariableDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: RuntimeException to CastExpression at 0", "INS SimpleType: IOException to MethodDeclaration at 4", "INS CastExpression to ThrowStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS StringLiteral: \"Failed (\" to InfixExpression: + at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS ThrowStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 44", "operations": ["INS Modifier: protected to MethodDeclaration at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Block to MethodDeclaration at 6", "INS IfStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: listener to InfixExpression: == at 0", "INS SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS SimpleName: local to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 44", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: signalEstablishingDynamicTunnel to MethodDeclaration at 2", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: IOException to SimpleType: IOException at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 45", "operations": ["INS ExpressionStatement to Block at 1", "INS IfStatement to Block at 2", "INS SimpleName: local to MethodInvocation at 1", "INS SimpleName: local to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS NullLiteral to MethodInvocation at 2", "INS ExpressionStatement to Block at 3", "INS CatchClause to TryStatement at 1", "INS Block to CatchClause at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: local to MethodInvocation at 1", "INS TryStatement to Block at 2", "INS SimpleName: e to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 45", "INS Block to IfStatement at 1", "INS SimpleName: signalTearingDownDynamicTunnel to MethodInvocation at 0", "INS SimpleName: signalTornDownDynamicTunnel to MethodInvocation at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: signalTornDownDynamicTunnel to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 46", "operations": ["INS SimpleType: RuntimeException to CastExpression at 0", "INS SimpleName: t to CastExpression at 1", "INS ThrowStatement to Block at 0", "INS Block to TryStatement at 0", "INS SimpleName: l to MethodInvocation at 1", "INS SimpleType: IOException to CastExpression at 0", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS LambdaExpression to MethodInvocation at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: signalTearingDownDynamicTunnel to MethodDeclaration at 2", "INS Block to LambdaExpression at 1", "INS Block to MethodDeclaration at 5", "INS IfStatement to IfStatement at 2", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS SimpleType: IOException to MethodDeclaration at 4", "INS MethodDeclaration to TypeDeclaration: class at 46", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS StringLiteral: \"Failed (\" to InfixExpression: + at 0", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: IOException to InstanceofExpression at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: Error to SimpleType: Error at 0", "INS Block to IfStatement at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: t to CastExpression at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: invokePortEventListenerSignaller to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS ReturnStatement to Block at 1", "INS ThrowStatement to Block at 0", "INS SimpleName: address to SingleVariableDeclaration at 1", "INS SimpleName: signalTearingDownDynamicTunnel to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: t to MethodInvocation at 0", "INS InstanceofExpression to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS Block to IfStatement at 1", "INS ThrowStatement to Block at 0", "INS IfStatement to Block at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: t to ClassInstanceCreation at 2", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS TryStatement to Block at 0", "INS SimpleName: address to MethodInvocation at 2", "INS StringLiteral: \" to signal tearing down dynamic tunnel for address=\" to InfixExpression: + at 3", "INS IfStatement to IfStatement at 2", "INS Block to IfStatement at 1", "INS SimpleType: Error to InstanceofExpression at 1", "INS InstanceofExpression to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS Block to CatchClause at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS CatchClause to TryStatement at 1", "INS Block to IfStatement at 2", "INS SimpleName: t to CastExpression at 1", "INS CastExpression to ThrowStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \")\" to InfixExpression: + at 2", "INS SimpleType: Error to CastExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: address to InfixExpression: + at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 47", "operations": ["INS ExpressionStatement to Block at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: address to SingleVariableDeclaration at 1", "INS SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS MethodDeclaration to TypeDeclaration: class at 47", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS IfStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: address to MethodInvocation at 3", "INS SimpleName: listener to InfixExpression: == at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS Block to MethodDeclaration at 6", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: listener to MethodInvocation at 0", "INS SimpleName: signalTearingDownDynamicTunnel to MethodDeclaration at 2", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleName: tearingDownDynamicTunnel to MethodInvocation at 1", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 48", "operations": ["INS VariableDeclarationFragment to LambdaExpression at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS TryStatement to Block at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS Block to TryStatement at 0", "INS SimpleName: signalTornDownDynamicTunnel to MethodInvocation at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS CatchClause to TryStatement at 1", "INS StringLiteral: \")\" to InfixExpression: + at 2", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS SimpleName: t to CastExpression at 1", "INS SimpleName: address to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS Block to CatchClause at 1", "INS SimpleType: Error to CastExpression at 0", "INS Block to IfStatement at 1", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS ReturnStatement to Block at 1", "INS InstanceofExpression to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: t to CastExpression at 1", "INS CastExpression to ThrowStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 48", "INS ThrowStatement to Block at 0", "INS SimpleType: IOException to CastExpression at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: t to ClassInstanceCreation at 2", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS InstanceofExpression to IfStatement at 0", "INS CastExpression to ThrowStatement at 0", "INS ThrowStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: t to MethodInvocation at 0", "INS SimpleName: address to InfixExpression: + at 4", "INS ThrowStatement to Block at 0", "INS SimpleName: t to CastExpression at 1", "INS Block to IfStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS IfStatement to IfStatement at 2", "INS IfStatement to IfStatement at 2", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS SimpleType: IOException to InstanceofExpression at 1", "INS StringLiteral: \"Failed (\" to InfixExpression: + at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \" to signal torn down dynamic tunnel for address=\" to InfixExpression: + at 3", "INS SimpleName: reason to MethodInvocation at 3", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS ThrowStatement to Block at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS Block to IfStatement at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS Block to LambdaExpression at 1", "INS SimpleType: Error to InstanceofExpression at 1", "INS Block to IfStatement at 1", "INS SimpleType: RuntimeException to CastExpression at 0", "INS SimpleName: l to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: signalTornDownDynamicTunnel to MethodDeclaration at 2", "INS Block to MethodDeclaration at 6", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: address to MethodInvocation at 2", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: Error to SimpleType: Error at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS LambdaExpression to MethodInvocation at 1", "INS NullLiteral to ReturnStatement at 0", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 49", "operations": ["INS SimpleName: listener to InfixExpression: == at 0", "INS IfStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 49", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS InfixExpression: == to IfStatement at 0", "INS Block to MethodDeclaration at 7", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: address to SingleVariableDeclaration at 1", "INS SimpleType: IOException to MethodDeclaration at 6", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleName: signalTornDownDynamicTunnel to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 54", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 54", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: localForwarding to SingleVariableDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: signalEstablishingExplicitTunnel to MethodDeclaration at 2", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: local to SingleVariableDeclaration at 1", "INS SimpleName: remote to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 7", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 55", "operations": ["INS SimpleName: remote to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: local to SingleVariableDeclaration at 1", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: listener to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS MethodDeclaration to TypeDeclaration: class at 55", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS SimpleName: localForwarding to SingleVariableDeclaration at 1", "INS SimpleName: listener to InfixExpression: == at 0", "INS SimpleName: local to MethodInvocation at 3", "INS SimpleName: localForwarding to MethodInvocation at 5", "INS SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: remote to MethodInvocation at 4", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: establishingExplicitTunnel to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: signalEstablishingExplicitTunnel to MethodDeclaration at 2", "INS IfStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 56", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: local to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 56", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleName: t to MethodInvocation at 0", "INS IfStatement to IfStatement at 2", "INS InstanceofExpression to IfStatement at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS InstanceofExpression to IfStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleType: IOException to MethodDeclaration at 8", "INS Block to CatchClause at 1", "INS SimpleType: IOException to InstanceofExpression at 1", "INS SimpleName: remote to InfixExpression: + at 6", "INS Modifier: protected to MethodDeclaration at 0", "INS Block to IfStatement at 2", "INS Block to IfStatement at 1", "INS CatchClause to TryStatement at 1", "INS StringLiteral: \"Failed (\" to InfixExpression: + at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS ThrowStatement to Block at 0", "INS SimpleName: localForwarding to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: t to CastExpression at 1", "INS IfStatement to IfStatement at 2", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS SimpleName: t to ClassInstanceCreation at 2", "INS SimpleName: local to InfixExpression: + at 4", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS Block to TryStatement at 0", "INS SimpleType: RuntimeException to CastExpression at 0", "INS SimpleName: t to CastExpression at 1", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: boundAddress to InfixExpression: + at 10", "INS SimpleName: boundAddress to SingleVariableDeclaration at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleType: Error to InstanceofExpression at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS Block to MethodDeclaration at 9", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: t to CastExpression at 1", "INS StringLiteral: \", remote=\" to InfixExpression: + at 5", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleType: IOException to CastExpression at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS CastExpression to ThrowStatement at 0", "INS StringLiteral: \", localForwarding=\" to InfixExpression: + at 7", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: remote to SingleVariableDeclaration at 1", "INS CastExpression to ThrowStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS TryStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS StringLiteral: \")\" to InfixExpression: + at 2", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: signalEstablishedExplicitTunnel to MethodDeclaration at 2", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to IfStatement at 1", "INS SimpleType: Error to CastExpression at 0", "INS SimpleName: localForwarding to InfixExpression: + at 8", "INS StringLiteral: \", bound=\" to InfixExpression: + at 9", "INS StringLiteral: \" to signal established explicit tunnel for local=\" to InfixExpression: + at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 57", "operations": ["INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleName: local to MethodInvocation at 3", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: listener to InfixExpression: == at 0", "INS SimpleName: boundAddress to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 10", "INS PrimitiveType: boolean to SingleVariableDeclaration at 0", "INS SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0", "INS SimpleName: localForwarding to MethodInvocation at 5", "INS SimpleName: signalEstablishedExplicitTunnel to MethodDeclaration at 2", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: remote to MethodInvocation at 4", "INS SimpleName: localForwarding to SingleVariableDeclaration at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: remote to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS NullLiteral to InfixExpression: == at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SimpleType: SshdSocketAddress to SingleVariableDeclaration at 0", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: reason to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS SimpleName: reason to MethodInvocation at 7", "INS SimpleName: establishedExplicitTunnel to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: SshdSocketAddress to SimpleType: SshdSocketAddress at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to IfStatement at 1", "INS SimpleName: boundAddress to MethodInvocation at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 57", "INS SimpleName: listener to MethodInvocation at 0", "INS SimpleName: local to SingleVariableDeclaration at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleType: IOException to MethodDeclaration at 9", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 58", "operations": ["INS SimpleType: Throwable to MethodDeclaration at 4", "INS SimpleType: Void to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 2", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS CatchClause to TryStatement at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: err to ThrowStatement at 0", "INS TryStatement to Block at 1", "INS Block to TryStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: e to MethodInvocation at 3", "INS SingleVariableDeclaration to CatchClause at 0", "INS ParameterizedType: Invoker<PortForwardingEventListener,Void> to SingleVariableDeclaration at 0", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: invokePortEventListenerSignaller to MethodDeclaration at 2", "INS SimpleName: e to VariableDeclarationFragment at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: peelException to MethodInvocation at 1", "INS SimpleName: invokePortEventListenerSignallerListeners to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS NullLiteral to InfixExpression: != at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS Block to TryStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TryStatement to Block at 2", "INS ThrowStatement to Block at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS Block to CatchClause at 1", "INS SimpleName: err to InfixExpression: != at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: e to VariableDeclarationFragment at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: invoker to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS Block to CatchClause at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: err to Assignment: = at 0", "INS SimpleName: Void to SimpleType: Void at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS CatchClause to TryStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: invoker to SingleVariableDeclaration at 1", "INS SimpleName: err to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleName: err to MethodInvocation at 2", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: e to MethodInvocation at 3", "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS SimpleName: err to MethodInvocation at 2", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: accumulateException to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: accumulateException to MethodInvocation at 1", "INS SimpleName: getDefaultListeners to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: err to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: peelException to MethodInvocation at 1", "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: t to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: t to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 58", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 3", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: Invoker to SimpleType: Invoker at 0", "INS SimpleName: managersHolder to MethodInvocation at 1", "INS SimpleName: invokePortEventListenerSignallerHolders to MethodInvocation at 0", "INS SimpleName: invoker to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS SimpleType: Invoker to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 59", "operations": ["INS SimpleName: invoker to SingleVariableDeclaration at 1", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS SimpleType: Throwable to MethodDeclaration at 5", "INS MethodInvocation to Assignment: = at 1", "INS IfStatement to Block at 3", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS ReturnStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: listeners to EnhancedForStatement at 1", "INS SimpleType: Void to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 2", "INS SimpleName: err to InfixExpression: != at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: accumulateException to MethodInvocation at 1", "INS SimpleName: listeners to SingleVariableDeclaration at 1", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS TryStatement to Block at 1", "INS SimpleName: Void to SimpleType: Void at 0", "INS Block to IfStatement at 1", "INS SimpleName: t to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: invoker to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 3", "INS ThrowStatement to Block at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 59", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS WildcardType: ? extends PortForwardingEventListener to ParameterizedType: Collection<? extends PortForwardingEventListener> at 1", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: err to VariableDeclarationFragment at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS ParameterizedType: Collection<? extends PortForwardingEventListener> to SingleVariableDeclaration at 0", "INS InfixExpression: != to IfStatement at 0", "INS Block to MethodDeclaration at 6", "INS Block to CatchClause at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Collection to ParameterizedType: Collection<? extends PortForwardingEventListener> at 0", "INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 0", "INS ContinueStatement to Block at 0", "INS SimpleName: invokePortEventListenerSignallerListeners to MethodDeclaration at 2", "INS ParameterizedType: Invoker<PortForwardingEventListener,Void> to SingleVariableDeclaration at 0", "INS SimpleName: l to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: l to InfixExpression: == at 0", "INS SimpleName: Invoker to SimpleType: Invoker at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to TryStatement at 0", "INS Block to EnhancedForStatement at 2", "INS Modifier: protected to MethodDeclaration at 0", "INS SimpleName: err to ThrowStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: l to SingleVariableDeclaration at 1", "INS SimpleName: err to Assignment: = at 0", "INS SimpleType: Invoker to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 0", "INS SimpleName: invoke to MethodInvocation at 1", "INS EnhancedForStatement to Block at 2", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: peelException to MethodInvocation at 1", "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS SimpleName: e to VariableDeclarationFragment at 0", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: err to MethodInvocation at 2", "INS SimpleName: listeners to MethodInvocation at 2", "INS NullLiteral to VariableDeclarationFragment at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 60", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: m to MethodInvocation at 0", "INS SimpleName: e to VariableDeclarationFragment at 0", "INS SimpleName: PortForwardingEventListenerManager to SimpleType: PortForwardingEventListenerManager at 0", "INS SimpleName: invokePortEventListenerSignallerHolders to MethodInvocation at 0", "INS Block to TryStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleType: PortForwardingEventListenerManagerHolder to InstanceofExpression at 1", "INS SimpleName: listener to MethodInvocation at 2", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS SimpleName: listener to InfixExpression: != at 0", "INS SimpleName: invoker to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: err to Assignment: = at 0", "INS SimpleName: Void to SimpleType: Void at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: m to InstanceofExpression at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: holders to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleType: PortForwardingEventListenerManager to SingleVariableDeclaration at 0", "INS NullLiteral to VariableDeclarationFragment at 1", "INS SimpleType: Collection to ParameterizedType: Collection<? extends PortForwardingEventListenerManager> at 0", "INS SimpleName: accumulateException to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: getRegisteredManagers to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ParameterizedType: Collection<? extends PortForwardingEventListenerManager> to SingleVariableDeclaration at 0", "INS MethodInvocation to IfStatement at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS WildcardType: ? extends PortForwardingEventListenerManager to ParameterizedType: Collection<? extends PortForwardingEventListenerManager> at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: m to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS TryStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: t to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: e to MethodInvocation at 3", "INS Modifier: protected to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS InstanceofExpression to IfStatement at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: invoker to MethodInvocation at 0", "INS SimpleName: err to InfixExpression: != at 0", "INS MethodDeclaration to TypeDeclaration: class at 60", "INS SimpleName: holders to EnhancedForStatement at 1", "INS SimpleName: e to VariableDeclarationFragment at 0", "INS SimpleName: PortForwardingEventListenerManagerHolder to SimpleType: PortForwardingEventListenerManagerHolder at 0", "INS SimpleName: peelException to MethodInvocation at 1", "INS SimpleName: Invoker to SimpleType: Invoker at 0", "INS IfStatement to Block at 1", "INS SimpleType: Throwable to MethodDeclaration at 5", "INS IfStatement to Block at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: invoke to MethodInvocation at 1", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS Block to TryStatement at 0", "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ThrowStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS SimpleName: holders to SingleVariableDeclaration at 1", "INS Block to CatchClause at 1", "INS TryStatement to Block at 0", "INS SimpleName: err to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: accumulateException to MethodInvocation at 1", "INS SimpleType: Void to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS CatchClause to TryStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: invoker to MethodInvocation at 2", "INS SimpleName: err to MethodInvocation at 2", "INS SimpleName: listener to VariableDeclarationFragment at 0", "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: invokePortEventListenerSignallerHolders to MethodDeclaration at 2", "INS SimpleType: Invoker to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 0", "INS IfStatement to Block at 1", "INS SimpleName: err to VariableDeclarationFragment at 0", "INS SimpleName: err to Assignment: = at 0", "INS SimpleName: t to MethodInvocation at 2", "INS SimpleType: PortForwardingEventListenerManager to WildcardType: ? extends PortForwardingEventListenerManager at 0", "INS SimpleName: PortForwardingEventListenerManager to SimpleType: PortForwardingEventListenerManager at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: err to ThrowStatement at 0", "INS SimpleName: PortForwardingEventListenerManagerHolder to SimpleType: PortForwardingEventListenerManagerHolder at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS Block to CatchClause at 1", "INS EnhancedForStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: peelException to MethodInvocation at 1", "INS SimpleName: m to CastExpression at 1", "INS SimpleType: Throwable to VariableDeclarationStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: e to MethodInvocation at 3", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: PortForwardingEventListenerManagerHolder to CastExpression at 0", "INS SimpleName: GenericUtils to MethodInvocation at 0", "INS SimpleName: getPortForwardingEventListenerProxy to MethodInvocation at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ParameterizedType: Invoker<PortForwardingEventListener,Void> to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV PrimitiveType: void to MethodDeclaration at 3", "MOV SimpleName: stopDynamicPortForwarding to MethodDeclaration at 4", "MOV SimpleType: IOException to MethodDeclaration at 6", "MOV Modifier: synchronized to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0"]}, {"root": "INS ExpressionStatement to Block at 8", "operations": ["INS ExpressionStatement to Block at 8", "INS SimpleName: signalEstablishingDynamicTunnel to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV SynchronizedStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 0", "MOV TryStatement to Block at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS FieldAccess to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: clear to MethodInvocation at 1", "INS SimpleName: managersHolder to FieldAccess at 1", "INS ExpressionStatement to Block at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: PortForwardingEventListener to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0", "MOV Block to IfStatement at 2"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS Block to TryStatement at 0"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS StringLiteral: \")\" to InfixExpression: + at 2", "INS SimpleName: t to ClassInstanceCreation at 2", "INS SimpleType: Error to InstanceofExpression at 1", "INS StringLiteral: \"Failed (\" to InfixExpression: + at 0", "INS SimpleType: IOException to InstanceofExpression at 1", "INS Block to IfStatement at 2", "INS SimpleType: IOException to CastExpression at 0", "INS StringLiteral: \", localForwarding=\" to InfixExpression: + at 7", "INS IfStatement to Block at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: remote to InfixExpression: + at 6", "INS ThrowStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleType: RuntimeException to InstanceofExpression at 1", "INS IfStatement to IfStatement at 2", "INS Block to IfStatement at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: localForwarding to InfixExpression: + at 8", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS StringLiteral: \" to signal establishing explicit tunnel for local=\" to InfixExpression: + at 3", "INS CastExpression to ThrowStatement at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS IfStatement to IfStatement at 2", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: t to MethodInvocation at 0", "INS ThrowStatement to Block at 0", "INS SimpleType: RuntimeException to CastExpression at 0", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleType: Error to CastExpression at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS CatchClause to TryStatement at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS CastExpression to ThrowStatement at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: t to CastExpression at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: t to InstanceofExpression at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: t to SingleVariableDeclaration at 1", "INS Block to CatchClause at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: t to CastExpression at 1", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: Error to SimpleType: Error at 0", "INS SimpleName: local to InfixExpression: + at 4", "INS ThrowStatement to Block at 0", "INS StringLiteral: \", remote=\" to InfixExpression: + at 5", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: t to CastExpression at 1"]}, {"root": "MOVE from ParameterizedType: Invoker<PortForwardingEventListener,Void>", "operations": ["MOV SimpleType: PortForwardingEventListener to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 1"]}, {"root": "MOVE from ParameterizedType: Invoker<PortForwardingEventListener,Void>", "operations": ["MOV SimpleType: PortForwardingEventListener to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 1"]}, {"root": "MOVE from ParameterizedType: Invoker<PortForwardingEventListener,Void>", "operations": ["MOV SimpleType: PortForwardingEventListener to ParameterizedType: Invoker<PortForwardingEventListener,Void> at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: validateListener to MethodInvocation at 1", "INS SimpleName: PortForwardingEventListener to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from tornDownDynamicTunnel to signalEstablishingExplicitTunnel", "operations": ["UPD SimpleName: tornDownDynamicTunnel from tornDownDynamicTunnel to signalEstablishingExplicitTunnel", "UPD SimpleName: establishingExplicitTunnel from establishingExplicitTunnel to signalEstablishingExplicitTunnel", "UPD SimpleName: establishingExplicitTunnel from establishingExplicitTunnel to signalEstablishingExplicitTunnel", "UPD SimpleName: establishingExplicitTunnel from establishingExplicitTunnel to signalEstablishingExplicitTunnel"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: local to MethodInvocation at 2", "MOV SimpleName: tornDownDynamicTunnel to MethodInvocation at 0"]}, {"root": "UPDATE from getPortForwardingEventListenerProxy to local", "operations": ["UPD SimpleName: getPortForwardingEventListenerProxy from getPortForwardingEventListenerProxy to local"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getPortForwardingEventListenerProxy to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from tearingDownDynamicTunnel to tornDownDynamicTunnel", "operations": ["UPD SimpleName: tearingDownDynamicTunnel from tearingDownDynamicTunnel to tornDownDynamicTunnel"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from sessionInstance to address", "operations": ["UPD SimpleName: sessionInstance from sessionInstance to address"]}, {"root": "UPDATE from local to reason", "operations": ["UPD SimpleName: local from local to reason"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from WildcardType: ? extends PortForwardingEventListener", "operations": ["MOV SimpleType: PortForwardingEventListener to WildcardType: ? extends PortForwardingEventListener at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: PortForwardingEventListener to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from Objects to PortForwardingEventListener", "operations": ["UPD SimpleName: Objects from Objects to PortForwardingEventListener"]}, {"root": "UPDATE from requireNonNull to validateListener", "operations": ["UPD SimpleName: requireNonNull from requireNonNull to validateListener"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: listener to MethodInvocation at 2"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}, {"root": "UPDATE from establishedExplicitTunnel to signalEstablishedExplicitTunnel", "operations": ["UPD SimpleName: establishedExplicitTunnel from establishedExplicitTunnel to signalEstablishedExplicitTunnel", "UPD SimpleName: tornDownDynamicTunnel from tornDownDynamicTunnel to signalEstablishedExplicitTunnel", "UPD SimpleName: establishedExplicitTunnel from establishedExplicitTunnel to signalEstablishedExplicitTunnel", "UPD SimpleName: establishedExplicitTunnel from establishedExplicitTunnel to signalEstablishedExplicitTunnel", "UPD SimpleName: establishedExplicitTunnel from establishedExplicitTunnel to signalEstablishedExplicitTunnel", "UPD SimpleName: establishedExplicitTunnel from establishedExplicitTunnel to signalEstablishedExplicitTunnel", "UPD SimpleName: establishedExplicitTunnel from establishedExplicitTunnel to signalEstablishedExplicitTunnel"]}, {"root": "UPDATE from tearingDownExplicitTunnel to signalTearingDownExplicitTunnel", "operations": ["UPD SimpleName: tearingDownExplicitTunnel from tearingDownExplicitTunnel to signalTearingDownExplicitTunnel", "UPD SimpleName: tearingDownExplicitTunnel from tearingDownExplicitTunnel to signalTearingDownExplicitTunnel", "UPD SimpleName: tearingDownExplicitTunnel from tearingDownExplicitTunnel to signalTearingDownExplicitTunnel"]}, {"root": "UPDATE from tornDownExplicitTunnel to signalTornDownExplicitTunnel", "operations": ["UPD SimpleName: tornDownExplicitTunnel from tornDownExplicitTunnel to signalTornDownExplicitTunnel", "UPD SimpleName: tornDownExplicitTunnel from tornDownExplicitTunnel to signalTornDownExplicitTunnel", "UPD SimpleName: tornDownExplicitTunnel from tornDownExplicitTunnel to signalTornDownExplicitTunnel", "UPD SimpleName: tornDownExplicitTunnel from tornDownExplicitTunnel to signalTornDownExplicitTunnel", "UPD SimpleName: tornDownExplicitTunnel from tornDownExplicitTunnel to signalTornDownExplicitTunnel", "UPD SimpleName: tornDownExplicitTunnel from tornDownExplicitTunnel to signalTornDownExplicitTunnel"]}, {"root": "UPDATE from establishedDynamicTunnel to signalEstablishedDynamicTunnel", "operations": ["UPD SimpleName: establishedDynamicTunnel from establishedDynamicTunnel to signalEstablishedDynamicTunnel", "UPD SimpleName: establishedDynamicTunnel from establishedDynamicTunnel to signalEstablishedDynamicTunnel"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "UPDATE from listener to invokePortEventListenerSignaller", "operations": ["UPD SimpleName: listener from listener to invokePortEventListenerSignaller", "UPD SimpleName: listener from listener to invokePortEventListenerSignaller", "UPD SimpleName: getPortForwardingEventListenerProxy from getPortForwardingEventListenerProxy to invokePortEventListenerSignaller"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getPortForwardingEventListenerProxy to MethodInvocation at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "INS LambdaExpression to MethodInvocation at 1", "operations": ["INS LambdaExpression to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: localForwarding to MethodInvocation at 4", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS Block to LambdaExpression at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS NullLiteral to ReturnStatement at 0", "INS ReturnStatement to Block at 1"]}, {"root": "INS LambdaExpression to MethodInvocation at 1", "operations": ["INS Block to LambdaExpression at 1", "INS SimpleName: l to VariableDeclarationFragment at 0", "INS SimpleName: reason to MethodInvocation at 6", "INS SimpleName: localForwarding to MethodInvocation at 4", "INS NullLiteral to ReturnStatement at 0", "INS ReturnStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: boundAddress to MethodInvocation at 5", "INS ExpressionStatement to Block at 0", "INS SimpleName: l to MethodInvocation at 1", "INS VariableDeclarationFragment to LambdaExpression at 0", "INS LambdaExpression to MethodInvocation at 1", "INS SimpleName: remote to MethodInvocation at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: PortForwardingEventListener to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tornDownDynamicTunnel to MethodInvocation at 0", "MOV SimpleName: e to MethodInvocation at 3", "MOV SimpleName: local to MethodInvocation at 2"]}, {"root": "UPDATE from getSession to l", "operations": ["UPD SimpleName: getSession from getSession to l"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getSession to MethodInvocation at 1"]}, {"root": "UPDATE from e to remote", "operations": ["UPD SimpleName: e from e to remote"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: EventListenerUtils", "DEL SimpleName: synchronizedListenersSet"]}, {"root": "DEL StringLiteral: \"No listener to add\"", "operations": ["DEL StringLiteral: \"No listener to add\""]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: listener", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSession"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSession"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSession"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: getPortForwardingEventListenerProxy", "DEL SimpleName: listener", "DEL MethodInvocation", "DEL SimpleType: PortForwardingEventListener", "DEL VariableDeclarationStatement", "DEL SimpleName: PortForwardingEventListener", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSession"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSession", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSession"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: listener", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: getPortForwardingEventListenerProxy", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSession", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL SimpleName: session", "operations": ["DEL SimpleName: session"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSession", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: getPortForwardingEventListenerProxy", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: listener"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSession"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSession", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSession", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: listener", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getSession"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: listener", "DEL Block", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL MethodDeclaration", "DEL Block"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: getPortForwardingEventListenerProxy", "DEL SimpleName: listener", "DEL VariableDeclarationFragment"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSession", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: getPortForwardingEventListenerProxy", "DEL SimpleName: listener", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL CatchClause", "operations": ["DEL CatchClause", "DEL Block"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}]}}, {"DefaultTcpipForwarder_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(4038) at 5", "Insert ImportDeclaration(29) into CompilationUnit(4038) at 14", "Insert ImportDeclaration(69) into CompilationUnit(4038) at 34", "Insert QualifiedName: java.util.ArrayList(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.util.concurrent.CopyOnWriteArraySet(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: org.apache.sshd.common.util.Invoker(68) into ImportDeclaration(69) at 0", "Insert FieldDeclaration(281) into TypeDeclaration: class(4037) at 19", "Insert MethodDeclaration(418) into TypeDeclaration: class(4037) at 26", "Insert MethodDeclaration(438) into TypeDeclaration: class(4037) at 27", "Insert MethodDeclaration(461) into TypeDeclaration: class(4037) at 28", "Insert MethodDeclaration(570) into TypeDeclaration: class(4037) at 31", "Insert MethodDeclaration(1407) into TypeDeclaration: class(4037) at 36", "Insert MethodDeclaration(1439) into TypeDeclaration: class(4037) at 37", "Insert MethodDeclaration(1532) into TypeDeclaration: class(4037) at 38", "Insert MethodDeclaration(1569) into TypeDeclaration: class(4037) at 39", "Insert MethodDeclaration(1870) into TypeDeclaration: class(4037) at 41", "Insert MethodDeclaration(1908) into TypeDeclaration: class(4037) at 42", "Insert MethodDeclaration(1990) into TypeDeclaration: class(4037) at 43", "Insert MethodDeclaration(2018) into TypeDeclaration: class(4037) at 44", "Insert MethodDeclaration(2117) into TypeDeclaration: class(4037) at 45", "Insert MethodDeclaration(2199) into TypeDeclaration: class(4037) at 46", "Insert MethodDeclaration(2227) into TypeDeclaration: class(4037) at 47", "Insert MethodDeclaration(2314) into TypeDeclaration: class(4037) at 48", "Insert MethodDeclaration(2347) into TypeDeclaration: class(4037) at 49", "Insert MethodDeclaration(2868) into TypeDeclaration: class(4037) at 53", "Insert MethodDeclaration(2905) into TypeDeclaration: class(4037) at 54", "Insert MethodDeclaration(3012) into TypeDeclaration: class(4037) at 55", "Insert MethodDeclaration(3059) into TypeDeclaration: class(4037) at 56", "Insert MethodDeclaration(3149) into TypeDeclaration: class(4037) at 57", "Insert MethodDeclaration(3236) into TypeDeclaration: class(4037) at 58", "Insert MethodDeclaration(3372) into TypeDeclaration: class(4037) at 59", "Insert Modifier: private(268) into FieldDeclaration(281) at 0", "Insert Modifier: final(269) into FieldDeclaration(281) at 1", "Insert ParameterizedType: Collection<PortForwardingEventListenerManager>(274) into FieldDeclaration(281) at 2", "Insert VariableDeclarationFragment(280) into FieldDeclaration(281) at 3", "Move MarkerAnnotation(351) into MethodDeclaration(369) at 0", "Move SingleVariableDeclaration(358) into MethodDeclaration(369) at 5", "Move MarkerAnnotation(331) into MethodDeclaration(394) at 0", "Move SingleVariableDeclaration(338) into MethodDeclaration(394) at 4", "Insert MarkerAnnotation(396) into MethodDeclaration(418) at 0", "Move Modifier: public(1428) into MethodDeclaration(418) at 1", "Insert ParameterizedType: Collection<PortForwardingEventListenerManager>(402) into MethodDeclaration(418) at 2", "Insert SimpleName: getRegisteredManagers(403) into MethodDeclaration(418) at 3", "Insert Block(417) into MethodDeclaration(418) at 4", "Insert MarkerAnnotation(420) into MethodDeclaration(438) at 0", "Insert Modifier: public(421) into MethodDeclaration(438) at 1", "Insert PrimitiveType: boolean(422) into MethodDeclaration(438) at 2", "Insert SimpleName: addPortForwardingEventListenerManager(423) into MethodDeclaration(438) at 3", "Insert SingleVariableDeclaration(427) into MethodDeclaration(438) at 4", "Insert Block(437) into MethodDeclaration(438) at 5", "Insert MarkerAnnotation(440) into MethodDeclaration(461) at 0", "Insert Modifier: public(441) into MethodDeclaration(461) at 1", "Insert PrimitiveType: boolean(442) into MethodDeclaration(461) at 2", "Insert SimpleName: removePortForwardingEventListenerManager(443) into MethodDeclaration(461) at 3", "Insert SingleVariableDeclaration(447) into MethodDeclaration(461) at 4", "Insert Block(460) into MethodDeclaration(461) at 5", "Insert Modifier: protected(481) into MethodDeclaration(570) at 0", "Insert ParameterizedType: Collection<PortForwardingEventListener>(486) into MethodDeclaration(570) at 1", "Insert SimpleName: getDefaultListeners(487) into MethodDeclaration(570) at 2", "Insert Block(569) into MethodDeclaration(570) at 3", "Insert Modifier: protected(1320) into MethodDeclaration(1407) at 0", "Insert PrimitiveType: void(1321) into MethodDeclaration(1407) at 1", "Insert SimpleName: signalTearingDownExplicitTunnel(1322) into MethodDeclaration(1407) at 2", "Insert SingleVariableDeclaration(1326) into MethodDeclaration(1407) at 3", "Insert SingleVariableDeclaration(1329) into MethodDeclaration(1407) at 4", "Insert SimpleType: IOException(1331) into MethodDeclaration(1407) at 5", "Insert Block(1406) into MethodDeclaration(1407) at 6", "Insert Modifier: protected(1408) into MethodDeclaration(1439) at 0", "Insert PrimitiveType: void(1409) into MethodDeclaration(1439) at 1", "Insert SimpleName: signalTearingDownExplicitTunnel(1410) into MethodDeclaration(1439) at 2", "Insert SingleVariableDeclaration(1414) into MethodDeclaration(1439) at 3", "Insert SingleVariableDeclaration(1418) into MethodDeclaration(1439) at 4", "Insert SingleVariableDeclaration(1421) into MethodDeclaration(1439) at 5", "Insert SimpleType: IOException(1423) into MethodDeclaration(1439) at 6", "Insert Block(1438) into MethodDeclaration(1439) at 7", "Insert Modifier: protected(1440) into MethodDeclaration(1532) at 0", "Insert PrimitiveType: void(1441) into MethodDeclaration(1532) at 1", "Insert SimpleName: signalTornDownExplicitTunnel(1442) into MethodDeclaration(1532) at 2", "Insert SingleVariableDeclaration(1446) into MethodDeclaration(1532) at 3", "Insert SingleVariableDeclaration(1449) into MethodDeclaration(1532) at 4", "Insert SingleVariableDeclaration(1453) into MethodDeclaration(1532) at 5", "Insert SimpleType: IOException(1455) into MethodDeclaration(1532) at 6", "Insert Block(1531) into MethodDeclaration(1532) at 7", "Insert Modifier: protected(1533) into MethodDeclaration(1569) at 0", "Insert PrimitiveType: void(1534) into MethodDeclaration(1569) at 1", "Insert SimpleName: signalTornDownExplicitTunnel(1535) into MethodDeclaration(1569) at 2", "Insert SingleVariableDeclaration(1539) into MethodDeclaration(1569) at 3", "Insert SingleVariableDeclaration(1543) into MethodDeclaration(1569) at 4", "Insert SingleVariableDeclaration(1546) into MethodDeclaration(1569) at 5", "Insert SingleVariableDeclaration(1550) into MethodDeclaration(1569) at 6", "Insert SimpleType: IOException(1552) into MethodDeclaration(1569) at 7", "Insert Block(1568) into MethodDeclaration(1569) at 8", "Insert Modifier: protected(1777) into MethodDeclaration(1870) at 0", "Insert PrimitiveType: void(1778) into MethodDeclaration(1870) at 1", "Insert SimpleName: signalEstablishedDynamicTunnel(1779) into MethodDeclaration(1870) at 2", "Insert SingleVariableDeclaration(1783) into MethodDeclaration(1870) at 3", "Insert SingleVariableDeclaration(1787) into MethodDeclaration(1870) at 4", "Insert SingleVariableDeclaration(1791) into MethodDeclaration(1870) at 5", "Insert SimpleType: IOException(1793) into MethodDeclaration(1870) at 6", "Insert Block(1869) into MethodDeclaration(1870) at 7", "Insert Modifier: protected(1871) into MethodDeclaration(1908) at 0", "Insert PrimitiveType: void(1872) into MethodDeclaration(1908) at 1", "Insert SimpleName: signalEstablishedDynamicTunnel(1873) into MethodDeclaration(1908) at 2", "Insert SingleVariableDeclaration(1877) into MethodDeclaration(1908) at 3", "Insert SingleVariableDeclaration(1881) into MethodDeclaration(1908) at 4", "Insert SingleVariableDeclaration(1885) into MethodDeclaration(1908) at 5", "Insert SingleVariableDeclaration(1889) into MethodDeclaration(1908) at 6", "Insert SimpleType: IOException(1891) into MethodDeclaration(1908) at 7", "Insert Block(1907) into MethodDeclaration(1908) at 8", "Insert Modifier: protected(1909) into MethodDeclaration(1990) at 0", "Insert PrimitiveType: void(1910) into MethodDeclaration(1990) at 1", "Insert SimpleName: signalEstablishingDynamicTunnel(1911) into MethodDeclaration(1990) at 2", "Insert SingleVariableDeclaration(1915) into MethodDeclaration(1990) at 3", "Insert SimpleType: IOException(1917) into MethodDeclaration(1990) at 4", "Insert Block(1989) into MethodDeclaration(1990) at 5", "Insert Modifier: protected(1991) into MethodDeclaration(2018) at 0", "Insert PrimitiveType: void(1992) into MethodDeclaration(2018) at 1", "Insert SimpleName: signalEstablishingDynamicTunnel(1993) into MethodDeclaration(2018) at 2", "Insert SingleVariableDeclaration(1997) into MethodDeclaration(2018) at 3", "Insert SingleVariableDeclaration(2001) into MethodDeclaration(2018) at 4", "Insert SimpleType: IOException(2003) into MethodDeclaration(2018) at 5", "Insert Block(2017) into MethodDeclaration(2018) at 6", "Move MarkerAnnotation(1427) into MethodDeclaration(2117) at 0", "Insert Modifier: public(2021) into MethodDeclaration(2117) at 1", "Move Modifier: synchronized(1429) into MethodDeclaration(2117) at 2", "Move PrimitiveType: void(1430) into MethodDeclaration(2117) at 3", "Move SimpleName: stopDynamicPortForwarding(1431) into MethodDeclaration(2117) at 4", "Move SingleVariableDeclaration(1435) into MethodDeclaration(2117) at 5", "Move SimpleType: IOException(1437) into MethodDeclaration(2117) at 6", "Insert Block(2116) into MethodDeclaration(2117) at 7", "Insert Modifier: protected(2118) into MethodDeclaration(2199) at 0", "Insert PrimitiveType: void(2119) into MethodDeclaration(2199) at 1", "Insert SimpleName: signalTearingDownDynamicTunnel(2120) into MethodDeclaration(2199) at 2", "Insert SingleVariableDeclaration(2124) into MethodDeclaration(2199) at 3", "Insert SimpleType: IOException(2126) into MethodDeclaration(2199) at 4", "Insert Block(2198) into MethodDeclaration(2199) at 5", "Insert Modifier: protected(2200) into MethodDeclaration(2227) at 0", "Insert PrimitiveType: void(2201) into MethodDeclaration(2227) at 1", "Insert SimpleName: signalTearingDownDynamicTunnel(2202) into MethodDeclaration(2227) at 2", "Insert SingleVariableDeclaration(2206) into MethodDeclaration(2227) at 3", "Insert SingleVariableDeclaration(2210) into MethodDeclaration(2227) at 4", "Insert SimpleType: IOException(2212) into MethodDeclaration(2227) at 5", "Insert Block(2226) into MethodDeclaration(2227) at 6", "Insert Modifier: protected(2228) into MethodDeclaration(2314) at 0", "Insert PrimitiveType: void(2229) into MethodDeclaration(2314) at 1", "Insert SimpleName: signalTornDownDynamicTunnel(2230) into MethodDeclaration(2314) at 2", "Insert SingleVariableDeclaration(2234) into MethodDeclaration(2314) at 3", "Insert SingleVariableDeclaration(2238) into MethodDeclaration(2314) at 4", "Insert SimpleType: IOException(2240) into MethodDeclaration(2314) at 5", "Insert Block(2313) into MethodDeclaration(2314) at 6", "Insert Modifier: protected(2315) into MethodDeclaration(2347) at 0", "Insert PrimitiveType: void(2316) into MethodDeclaration(2347) at 1", "Insert SimpleName: signalTornDownDynamicTunnel(2317) into MethodDeclaration(2347) at 2", "Insert SingleVariableDeclaration(2321) into MethodDeclaration(2347) at 3", "Insert SingleVariableDeclaration(2325) into MethodDeclaration(2347) at 4", "Insert SingleVariableDeclaration(2329) into MethodDeclaration(2347) at 5", "Insert SimpleType: IOException(2331) into MethodDeclaration(2347) at 6", "Insert Block(2346) into MethodDeclaration(2347) at 7", "Insert Modifier: protected(2774) into MethodDeclaration(2868) at 0", "Insert PrimitiveType: void(2775) into MethodDeclaration(2868) at 1", "Insert SimpleName: signalEstablishingExplicitTunnel(2776) into MethodDeclaration(2868) at 2", "Insert SingleVariableDeclaration(2780) into MethodDeclaration(2868) at 3", "Insert SingleVariableDeclaration(2784) into MethodDeclaration(2868) at 4", "Insert SingleVariableDeclaration(2787) into MethodDeclaration(2868) at 5", "Insert SimpleType: IOException(2789) into MethodDeclaration(2868) at 6", "Insert Block(2867) into MethodDeclaration(2868) at 7", "Insert Modifier: protected(2869) into MethodDeclaration(2905) at 0", "Insert PrimitiveType: void(2870) into MethodDeclaration(2905) at 1", "Insert SimpleName: signalEstablishingExplicitTunnel(2871) into MethodDeclaration(2905) at 2", "Insert SingleVariableDeclaration(2875) into MethodDeclaration(2905) at 3", "Insert SingleVariableDeclaration(2879) into MethodDeclaration(2905) at 4", "Insert SingleVariableDeclaration(2883) into MethodDeclaration(2905) at 5", "Insert SingleVariableDeclaration(2886) into MethodDeclaration(2905) at 6", "Insert SimpleType: IOException(2888) into MethodDeclaration(2905) at 7", "Insert Block(2904) into MethodDeclaration(2905) at 8", "Insert Modifier: protected(2906) into MethodDeclaration(3012) at 0", "Insert PrimitiveType: void(2907) into MethodDeclaration(3012) at 1", "Insert SimpleName: signalEstablishedExplicitTunnel(2908) into MethodDeclaration(3012) at 2", "Insert SingleVariableDeclaration(2912) into MethodDeclaration(3012) at 3", "Insert SingleVariableDeclaration(2916) into MethodDeclaration(3012) at 4", "Insert SingleVariableDeclaration(2919) into MethodDeclaration(3012) at 5", "Insert SingleVariableDeclaration(2923) into MethodDeclaration(3012) at 6", "Insert SingleVariableDeclaration(2927) into MethodDeclaration(3012) at 7", "Insert SimpleType: IOException(2929) into MethodDeclaration(3012) at 8", "Insert Block(3011) into MethodDeclaration(3012) at 9", "Insert Modifier: protected(3013) into MethodDeclaration(3059) at 0", "Insert PrimitiveType: void(3014) into MethodDeclaration(3059) at 1", "Insert SimpleName: signalEstablishedExplicitTunnel(3015) into MethodDeclaration(3059) at 2", "Insert SingleVariableDeclaration(3019) into MethodDeclaration(3059) at 3", "Insert SingleVariableDeclaration(3023) into MethodDeclaration(3059) at 4", "Insert SingleVariableDeclaration(3027) into MethodDeclaration(3059) at 5", "Insert SingleVariableDeclaration(3030) into MethodDeclaration(3059) at 6", "Insert SingleVariableDeclaration(3034) into MethodDeclaration(3059) at 7", "Insert SingleVariableDeclaration(3038) into MethodDeclaration(3059) at 8", "Insert SimpleType: IOException(3040) into MethodDeclaration(3059) at 9", "Insert Block(3058) into MethodDeclaration(3059) at 10", "Insert Modifier: protected(3060) into MethodDeclaration(3149) at 0", "Insert PrimitiveType: void(3061) into MethodDeclaration(3149) at 1", "Insert SimpleName: invokePortEventListenerSignaller(3062) into MethodDeclaration(3149) at 2", "Insert SingleVariableDeclaration(3071) into MethodDeclaration(3149) at 3", "Insert SimpleType: Throwable(3073) into MethodDeclaration(3149) at 4", "Insert Block(3148) into MethodDeclaration(3149) at 5", "Insert Modifier: protected(3150) into MethodDeclaration(3236) at 0", "Insert PrimitiveType: void(3151) into MethodDeclaration(3236) at 1", "Insert SimpleName: invokePortEventListenerSignallerListeners(3152) into MethodDeclaration(3236) at 2", "Insert SingleVariableDeclaration(3160) into MethodDeclaration(3236) at 3", "Insert SingleVariableDeclaration(3169) into MethodDeclaration(3236) at 4", "Insert SimpleType: Throwable(3171) into MethodDeclaration(3236) at 5", "Insert Block(3235) into MethodDeclaration(3236) at 6", "Insert Modifier: protected(3237) into MethodDeclaration(3372) at 0", "Insert PrimitiveType: void(3238) into MethodDeclaration(3372) at 1", "Insert SimpleName: invokePortEventListenerSignallerHolders(3239) into MethodDeclaration(3372) at 2", "Insert SingleVariableDeclaration(3247) into MethodDeclaration(3372) at 3", "Insert SingleVariableDeclaration(3256) into MethodDeclaration(3372) at 4", "Insert SimpleType: Throwable(3258) into MethodDeclaration(3372) at 5", "Insert Block(3371) into MethodDeclaration(3372) at 6", "Insert ClassInstanceCreation(265) into VariableDeclarationFragment(266) at 1", "Insert SimpleType: Collection(271) into ParameterizedType: Collection<PortForwardingEventListenerManager>(274) at 0", "Insert SimpleType: PortForwardingEventListenerManager(273) into ParameterizedType: Collection<PortForwardingEventListenerManager>(274) at 1", "Insert SimpleName: managersHolder(275) into VariableDeclarationFragment(280) at 0", "Insert ClassInstanceCreation(279) into VariableDeclarationFragment(280) at 1", "Insert SimpleName: Override(395) into MarkerAnnotation(396) at 0", "Insert SimpleType: Collection(399) into ParameterizedType: Collection<PortForwardingEventListenerManager>(402) at 0", "Insert SimpleType: PortForwardingEventListenerManager(401) into ParameterizedType: Collection<PortForwardingEventListenerManager>(402) at 1", "Insert ReturnStatement(416) into Block(417) at 0", "Insert SimpleName: Override(419) into MarkerAnnotation(420) at 0", "Insert SimpleType: PortForwardingEventListenerManager(425) into SingleVariableDeclaration(427) at 0", "Insert SimpleName: manager(426) into SingleVariableDeclaration(427) at 1", "Insert ReturnStatement(436) into Block(437) at 0", "Insert SimpleName: Override(439) into MarkerAnnotation(440) at 0", "Insert SimpleType: PortForwardingEventListenerManager(445) into SingleVariableDeclaration(447) at 0", "Insert SimpleName: manager(446) into SingleVariableDeclaration(447) at 1", "Insert IfStatement(454) into Block(460) at 0", "Insert ReturnStatement(459) into Block(460) at 1", "Insert SimpleType: Collection(483) into ParameterizedType: Collection<PortForwardingEventListener>(486) at 0", "Insert SimpleType: PortForwardingEventListener(485) into ParameterizedType: Collection<PortForwardingEventListener>(486) at 1", "Insert VariableDeclarationStatement(499) into Block(569) at 0", "Insert ExpressionStatement(505) into Block(569) at 1", "Insert VariableDeclarationStatement(512) into Block(569) at 2", "Insert VariableDeclarationStatement(520) into Block(569) at 3", "Insert IfStatement(530) into Block(569) at 4", "Insert VariableDeclarationStatement(544) into Block(569) at 5", "Insert ExpressionStatement(556) into Block(569) at 6", "Insert IfStatement(566) into Block(569) at 7", "Insert ReturnStatement(568) into Block(569) at 8", "Insert SimpleType: SshdSocketAddress(1324) into SingleVariableDeclaration(1326) at 0", "Insert SimpleName: boundAddress(1325) into SingleVariableDeclaration(1326) at 1", "Insert PrimitiveType: boolean(1327) into SingleVariableDeclaration(1329) at 0", "Insert SimpleName: localForwarding(1328) into SingleVariableDeclaration(1329) at 1", "Insert SimpleName: IOException(1330) into SimpleType: IOException(1331) at 0", "Insert TryStatement(1405) into Block(1406) at 0", "Insert SimpleType: PortForwardingEventListener(1412) into SingleVariableDeclaration(1414) at 0", "Insert SimpleName: listener(1413) into SingleVariableDeclaration(1414) at 1", "Insert SimpleType: SshdSocketAddress(1416) into SingleVariableDeclaration(1418) at 0", "Insert SimpleName: boundAddress(1417) into SingleVariableDeclaration(1418) at 1", "Insert PrimitiveType: boolean(1419) into SingleVariableDeclaration(1421) at 0", "Insert SimpleName: localForwarding(1420) into SingleVariableDeclaration(1421) at 1", "Insert SimpleName: IOException(1422) into SimpleType: IOException(1423) at 0", "Insert IfStatement(1429) into Block(1438) at 0", "Insert ExpressionStatement(1437) into Block(1438) at 1", "Insert SimpleType: SshdSocketAddress(1444) into SingleVariableDeclaration(1446) at 0", "Insert SimpleName: boundAddress(1445) into SingleVariableDeclaration(1446) at 1", "Insert PrimitiveType: boolean(1447) into SingleVariableDeclaration(1449) at 0", "Insert SimpleName: localForwarding(1448) into SingleVariableDeclaration(1449) at 1", "Insert SimpleType: Throwable(1451) into SingleVariableDeclaration(1453) at 0", "Insert SimpleName: reason(1452) into SingleVariableDeclaration(1453) at 1", "Insert SimpleName: IOException(1454) into SimpleType: IOException(1455) at 0", "Insert TryStatement(1530) into Block(1531) at 0", "Insert SimpleType: PortForwardingEventListener(1537) into SingleVariableDeclaration(1539) at 0", "Insert SimpleName: listener(1538) into SingleVariableDeclaration(1539) at 1", "Insert SimpleType: SshdSocketAddress(1541) into SingleVariableDeclaration(1543) at 0", "Insert SimpleName: boundAddress(1542) into SingleVariableDeclaration(1543) at 1", "Insert PrimitiveType: boolean(1544) into SingleVariableDeclaration(1546) at 0", "Insert SimpleName: localForwarding(1545) into SingleVariableDeclaration(1546) at 1", "Insert SimpleType: Throwable(1548) into SingleVariableDeclaration(1550) at 0", "Insert SimpleName: reason(1549) into SingleVariableDeclaration(1550) at 1", "Insert SimpleName: IOException(1551) into SimpleType: IOException(1552) at 0", "Insert IfStatement(1558) into Block(1568) at 0", "Insert ExpressionStatement(1567) into Block(1568) at 1", "Insert ExpressionStatement(1644) into Block(1775) at 8", "Insert SimpleType: SshdSocketAddress(1781) into SingleVariableDeclaration(1783) at 0", "Insert SimpleName: local(1782) into SingleVariableDeclaration(1783) at 1", "Insert SimpleType: SshdSocketAddress(1785) into SingleVariableDeclaration(1787) at 0", "Insert SimpleName: boundAddress(1786) into SingleVariableDeclaration(1787) at 1", "Insert SimpleType: Throwable(1789) into SingleVariableDeclaration(1791) at 0", "Insert SimpleName: reason(1790) into SingleVariableDeclaration(1791) at 1", "Insert SimpleName: IOException(1792) into SimpleType: IOException(1793) at 0", "Insert TryStatement(1868) into Block(1869) at 0", "Insert SimpleType: PortForwardingEventListener(1875) into SingleVariableDeclaration(1877) at 0", "Insert SimpleName: listener(1876) into SingleVariableDeclaration(1877) at 1", "Insert SimpleType: SshdSocketAddress(1879) into SingleVariableDeclaration(1881) at 0", "Insert SimpleName: local(1880) into SingleVariableDeclaration(1881) at 1", "Insert SimpleType: SshdSocketAddress(1883) into SingleVariableDeclaration(1885) at 0", "Insert SimpleName: boundAddress(1884) into SingleVariableDeclaration(1885) at 1", "Insert SimpleType: Throwable(1887) into SingleVariableDeclaration(1889) at 0", "Insert SimpleName: reason(1888) into SingleVariableDeclaration(1889) at 1", "Insert SimpleName: IOException(1890) into SimpleType: IOException(1891) at 0", "Insert IfStatement(1897) into Block(1907) at 0", "Insert ExpressionStatement(1906) into Block(1907) at 1", "Insert SimpleType: SshdSocketAddress(1913) into SingleVariableDeclaration(1915) at 0", "Insert SimpleName: local(1914) into SingleVariableDeclaration(1915) at 1", "Insert SimpleName: IOException(1916) into SimpleType: IOException(1917) at 0", "Insert TryStatement(1988) into Block(1989) at 0", "Insert SimpleType: PortForwardingEventListener(1995) into SingleVariableDeclaration(1997) at 0", "Insert SimpleName: listener(1996) into SingleVariableDeclaration(1997) at 1", "Insert SimpleType: SshdSocketAddress(1999) into SingleVariableDeclaration(2001) at 0", "Insert SimpleName: local(2000) into SingleVariableDeclaration(2001) at 1", "Insert SimpleName: IOException(2002) into SimpleType: IOException(2003) at 0", "Insert IfStatement(2009) into Block(2017) at 0", "Move ExpressionStatement(1287) into Block(2017) at 1", "Move VariableDeclarationStatement(1442) into Block(2116) at 0", "Move SynchronizedStatement(1454) into Block(2116) at 1", "Insert IfStatement(2115) into Block(2116) at 2", "Insert SimpleType: SshdSocketAddress(2122) into SingleVariableDeclaration(2124) at 0", "Insert SimpleName: address(2123) into SingleVariableDeclaration(2124) at 1", "Insert SimpleName: IOException(2125) into SimpleType: IOException(2126) at 0", "Insert TryStatement(2197) into Block(2198) at 0", "Insert SimpleType: PortForwardingEventListener(2204) into SingleVariableDeclaration(2206) at 0", "Insert SimpleName: listener(2205) into SingleVariableDeclaration(2206) at 1", "Insert SimpleType: SshdSocketAddress(2208) into SingleVariableDeclaration(2210) at 0", "Insert SimpleName: address(2209) into SingleVariableDeclaration(2210) at 1", "Insert SimpleName: IOException(2211) into SimpleType: IOException(2212) at 0", "Insert IfStatement(2218) into Block(2226) at 0", "Insert ExpressionStatement(2225) into Block(2226) at 1", "Insert SimpleType: SshdSocketAddress(2232) into SingleVariableDeclaration(2234) at 0", "Insert SimpleName: address(2233) into SingleVariableDeclaration(2234) at 1", "Insert SimpleType: Throwable(2236) into SingleVariableDeclaration(2238) at 0", "Insert SimpleName: reason(2237) into SingleVariableDeclaration(2238) at 1", "Insert SimpleName: IOException(2239) into SimpleType: IOException(2240) at 0", "Insert TryStatement(2312) into Block(2313) at 0", "Insert SimpleType: PortForwardingEventListener(2319) into SingleVariableDeclaration(2321) at 0", "Insert SimpleName: listener(2320) into SingleVariableDeclaration(2321) at 1", "Insert SimpleType: SshdSocketAddress(2323) into SingleVariableDeclaration(2325) at 0", "Insert SimpleName: address(2324) into SingleVariableDeclaration(2325) at 1", "Insert SimpleType: Throwable(2327) into SingleVariableDeclaration(2329) at 0", "Insert SimpleName: reason(2328) into SingleVariableDeclaration(2329) at 1", "Insert SimpleName: IOException(2330) into SimpleType: IOException(2331) at 0", "Insert IfStatement(2337) into Block(2346) at 0", "Move ExpressionStatement(1483) into Block(2346) at 1", "Insert SimpleType: SshdSocketAddress(2778) into SingleVariableDeclaration(2780) at 0", "Insert SimpleName: local(2779) into SingleVariableDeclaration(2780) at 1", "Insert SimpleType: SshdSocketAddress(2782) into SingleVariableDeclaration(2784) at 0", "Insert SimpleName: remote(2783) into SingleVariableDeclaration(2784) at 1", "Insert PrimitiveType: boolean(2785) into SingleVariableDeclaration(2787) at 0", "Insert SimpleName: localForwarding(2786) into SingleVariableDeclaration(2787) at 1", "Insert SimpleName: IOException(2788) into SimpleType: IOException(2789) at 0", "Move TryStatement(1513) into Block(2867) at 0", "Insert SimpleType: PortForwardingEventListener(2873) into SingleVariableDeclaration(2875) at 0", "Insert SimpleName: listener(2874) into SingleVariableDeclaration(2875) at 1", "Insert SimpleType: SshdSocketAddress(2877) into SingleVariableDeclaration(2879) at 0", "Insert SimpleName: local(2878) into SingleVariableDeclaration(2879) at 1", "Insert SimpleType: SshdSocketAddress(2881) into SingleVariableDeclaration(2883) at 0", "Insert SimpleName: remote(2882) into SingleVariableDeclaration(2883) at 1", "Insert PrimitiveType: boolean(2884) into SingleVariableDeclaration(2886) at 0", "Insert SimpleName: localForwarding(2885) into SingleVariableDeclaration(2886) at 1", "Insert SimpleName: IOException(2887) into SimpleType: IOException(2888) at 0", "Insert IfStatement(2894) into Block(2904) at 0", "Insert ExpressionStatement(2903) into Block(2904) at 1", "Insert SimpleType: SshdSocketAddress(2910) into SingleVariableDeclaration(2912) at 0", "Insert SimpleName: local(2911) into SingleVariableDeclaration(2912) at 1", "Insert SimpleType: SshdSocketAddress(2914) into SingleVariableDeclaration(2916) at 0", "Insert SimpleName: remote(2915) into SingleVariableDeclaration(2916) at 1", "Insert PrimitiveType: boolean(2917) into SingleVariableDeclaration(2919) at 0", "Insert SimpleName: localForwarding(2918) into SingleVariableDeclaration(2919) at 1", "Insert SimpleType: SshdSocketAddress(2921) into SingleVariableDeclaration(2923) at 0", "Insert SimpleName: boundAddress(2922) into SingleVariableDeclaration(2923) at 1", "Insert SimpleType: Throwable(2925) into SingleVariableDeclaration(2927) at 0", "Insert SimpleName: reason(2926) into SingleVariableDeclaration(2927) at 1", "Insert SimpleName: IOException(2928) into SimpleType: IOException(2929) at 0", "Insert TryStatement(3010) into Block(3011) at 0", "Insert SimpleType: PortForwardingEventListener(3017) into SingleVariableDeclaration(3019) at 0", "Insert SimpleName: listener(3018) into SingleVariableDeclaration(3019) at 1", "Insert SimpleType: SshdSocketAddress(3021) into SingleVariableDeclaration(3023) at 0", "Insert SimpleName: local(3022) into SingleVariableDeclaration(3023) at 1", "Insert SimpleType: SshdSocketAddress(3025) into SingleVariableDeclaration(3027) at 0", "Insert SimpleName: remote(3026) into SingleVariableDeclaration(3027) at 1", "Insert PrimitiveType: boolean(3028) into SingleVariableDeclaration(3030) at 0", "Insert SimpleName: localForwarding(3029) into SingleVariableDeclaration(3030) at 1", "Insert SimpleType: SshdSocketAddress(3032) into SingleVariableDeclaration(3034) at 0", "Insert SimpleName: boundAddress(3033) into SingleVariableDeclaration(3034) at 1", "Insert SimpleType: Throwable(3036) into SingleVariableDeclaration(3038) at 0", "Insert SimpleName: reason(3037) into SingleVariableDeclaration(3038) at 1", "Insert SimpleName: IOException(3039) into SimpleType: IOException(3040) at 0", "Insert IfStatement(3046) into Block(3058) at 0", "Insert ExpressionStatement(3057) into Block(3058) at 1", "Insert ParameterizedType: Invoker<PortForwardingEventListener,Void>(3069) into SingleVariableDeclaration(3071) at 0", "Insert SimpleName: invoker(3070) into SingleVariableDeclaration(3071) at 1", "Insert SimpleName: Throwable(3072) into SimpleType: Throwable(3073) at 0", "Insert VariableDeclarationStatement(3079) into Block(3148) at 0", "Insert TryStatement(3110) into Block(3148) at 1", "Insert TryStatement(3140) into Block(3148) at 2", "Insert IfStatement(3147) into Block(3148) at 3", "Insert ParameterizedType: Collection<? extends PortForwardingEventListener>(3158) into SingleVariableDeclaration(3160) at 0", "Insert SimpleName: listeners(3159) into SingleVariableDeclaration(3160) at 1", "Insert ParameterizedType: Invoker<PortForwardingEventListener,Void>(3167) into SingleVariableDeclaration(3169) at 0", "Insert SimpleName: invoker(3168) into SingleVariableDeclaration(3169) at 1", "Insert SimpleName: Throwable(3170) into SimpleType: Throwable(3171) at 0", "Insert IfStatement(3178) into Block(3235) at 0", "Insert VariableDeclarationStatement(3184) into Block(3235) at 1", "Insert EnhancedForStatement(3227) into Block(3235) at 2", "Insert IfStatement(3234) into Block(3235) at 3", "Insert ParameterizedType: Collection<? extends PortForwardingEventListenerManager>(3245) into SingleVariableDeclaration(3247) at 0", "Insert SimpleName: holders(3246) into SingleVariableDeclaration(3247) at 1", "Insert ParameterizedType: Invoker<PortForwardingEventListener,Void>(3254) into SingleVariableDeclaration(3256) at 0", "Insert SimpleName: invoker(3255) into SingleVariableDeclaration(3256) at 1", "Insert SimpleName: Throwable(3257) into SimpleType: Throwable(3258) at 0", "Insert IfStatement(3265) into Block(3371) at 0", "Insert VariableDeclarationStatement(3271) into Block(3371) at 1", "Insert EnhancedForStatement(3363) into Block(3371) at 2", "Insert IfStatement(3370) into Block(3371) at 3", "Insert ExpressionStatement(3411) into Block(3415) at 1", "Insert ParameterizedType: CopyOnWriteArraySet<>(264) into ClassInstanceCreation(265) at 0", "Insert SimpleName: Collection(270) into SimpleType: Collection(271) at 0", "Insert SimpleName: PortForwardingEventListenerManager(272) into SimpleType: PortForwardingEventListenerManager(273) at 0", "Insert ParameterizedType: CopyOnWriteArraySet<>(278) into ClassInstanceCreation(279) at 0", "Insert SimpleName: Collection(398) into SimpleType: Collection(399) at 0", "Insert SimpleName: PortForwardingEventListenerManager(400) into SimpleType: PortForwardingEventListenerManager(401) at 0", "Insert ConditionalExpression(415) into ReturnStatement(416) at 0", "Insert SimpleName: PortForwardingEventListenerManager(424) into SimpleType: PortForwardingEventListenerManager(425) at 0", "Insert MethodInvocation(435) into ReturnStatement(436) at 0", "Insert SimpleName: PortForwardingEventListenerManager(444) into SimpleType: PortForwardingEventListenerManager(445) at 0", "Insert InfixExpression: ==(450) into IfStatement(454) at 0", "Insert Block(453) into IfStatement(454) at 1", "Insert MethodInvocation(458) into ReturnStatement(459) at 0", "Insert SimpleName: Collection(482) into SimpleType: Collection(483) at 0", "Insert SimpleName: PortForwardingEventListener(484) into SimpleType: PortForwardingEventListener(485) at 0", "Insert ParameterizedType: Collection<PortForwardingEventListener>(492) into VariableDeclarationStatement(499) at 0", "Insert VariableDeclarationFragment(498) into VariableDeclarationStatement(499) at 1", "Insert MethodInvocation(504) into ExpressionStatement(505) at 0", "Insert SimpleType: Session(507) into VariableDeclarationStatement(512) at 0", "Insert VariableDeclarationFragment(511) into VariableDeclarationStatement(512) at 1", "Move SimpleType: PortForwardingEventListener(459) into VariableDeclarationStatement(520) at 0", "Insert VariableDeclarationFragment(519) into VariableDeclarationStatement(520) at 1", "Insert InfixExpression: !=(523) into IfStatement(530) at 0", "Insert Block(529) into IfStatement(530) at 1", "Insert SimpleType: FactoryManager(532) into VariableDeclarationStatement(544) at 0", "Insert VariableDeclarationFragment(543) into VariableDeclarationStatement(544) at 1", "Insert Assignment: =(555) into ExpressionStatement(556) at 0", "Insert InfixExpression: !=(559) into IfStatement(566) at 0", "Insert Block(565) into IfStatement(566) at 1", "Insert SimpleName: defaultListeners(567) into ReturnStatement(568) at 0", "Insert SimpleName: SshdSocketAddress(1323) into SimpleType: SshdSocketAddress(1324) at 0", "Insert Block(1347) into TryStatement(1405) at 0", "Insert CatchClause(1404) into TryStatement(1405) at 1", "Insert SimpleName: PortForwardingEventListener(1411) into SimpleType: PortForwardingEventListener(1412) at 0", "Insert SimpleName: SshdSocketAddress(1415) into SimpleType: SshdSocketAddress(1416) at 0", "Insert InfixExpression: ==(1426) into IfStatement(1429) at 0", "Insert Block(1428) into IfStatement(1429) at 1", "Insert MethodInvocation(1436) into ExpressionStatement(1437) at 0", "Insert SimpleName: SshdSocketAddress(1443) into SimpleType: SshdSocketAddress(1444) at 0", "Insert SimpleName: Throwable(1450) into SimpleType: Throwable(1451) at 0", "Insert Block(1472) into TryStatement(1530) at 0", "Insert CatchClause(1529) into TryStatement(1530) at 1", "Insert SimpleName: PortForwardingEventListener(1536) into SimpleType: PortForwardingEventListener(1537) at 0", "Insert SimpleName: SshdSocketAddress(1540) into SimpleType: SshdSocketAddress(1541) at 0", "Insert SimpleName: Throwable(1547) into SimpleType: Throwable(1548) at 0", "Insert InfixExpression: ==(1555) into IfStatement(1558) at 0", "Insert Block(1557) into IfStatement(1558) at 1", "Insert MethodInvocation(1566) into ExpressionStatement(1567) at 0", "Insert MethodInvocation(1643) into ExpressionStatement(1644) at 0", "Insert SimpleName: SshdSocketAddress(1780) into SimpleType: SshdSocketAddress(1781) at 0", "Insert SimpleName: SshdSocketAddress(1784) into SimpleType: SshdSocketAddress(1785) at 0", "Insert SimpleName: Throwable(1788) into SimpleType: Throwable(1789) at 0", "Insert Block(1810) into TryStatement(1868) at 0", "Insert CatchClause(1867) into TryStatement(1868) at 1", "Insert SimpleName: PortForwardingEventListener(1874) into SimpleType: PortForwardingEventListener(1875) at 0", "Insert SimpleName: SshdSocketAddress(1878) into SimpleType: SshdSocketAddress(1879) at 0", "Insert SimpleName: SshdSocketAddress(1882) into SimpleType: SshdSocketAddress(1883) at 0", "Insert SimpleName: Throwable(1886) into SimpleType: Throwable(1887) at 0", "Insert InfixExpression: ==(1894) into IfStatement(1897) at 0", "Insert Block(1896) into IfStatement(1897) at 1", "Insert MethodInvocation(1905) into ExpressionStatement(1906) at 0", "Insert SimpleName: SshdSocketAddress(1912) into SimpleType: SshdSocketAddress(1913) at 0", "Insert Block(1932) into TryStatement(1988) at 0", "Insert CatchClause(1987) into TryStatement(1988) at 1", "Insert SimpleName: PortForwardingEventListener(1994) into SimpleType: PortForwardingEventListener(1995) at 0", "Insert SimpleName: SshdSocketAddress(1998) into SimpleType: SshdSocketAddress(1999) at 0", "Insert InfixExpression: ==(2006) into IfStatement(2009) at 0", "Insert Block(2008) into IfStatement(2009) at 1", "Move InfixExpression: !=(1457) into IfStatement(2115) at 0", "Insert Block(2100) into IfStatement(2115) at 1", "Move Block(1536) into IfStatement(2115) at 2", "Insert SimpleName: SshdSocketAddress(2121) into SimpleType: SshdSocketAddress(2122) at 0", "Insert Block(2141) into TryStatement(2197) at 0", "Insert CatchClause(2196) into TryStatement(2197) at 1", "Insert SimpleName: PortForwardingEventListener(2203) into SimpleType: PortForwardingEventListener(2204) at 0", "Insert SimpleName: SshdSocketAddress(2207) into SimpleType: SshdSocketAddress(2208) at 0", "Insert InfixExpression: ==(2215) into IfStatement(2218) at 0", "Insert Block(2217) into IfStatement(2218) at 1", "Insert MethodInvocation(2224) into ExpressionStatement(2225) at 0", "Insert SimpleName: SshdSocketAddress(2231) into SimpleType: SshdSocketAddress(2232) at 0", "Insert SimpleName: Throwable(2235) into SimpleType: Throwable(2236) at 0", "Insert Block(2256) into TryStatement(2312) at 0", "Insert CatchClause(2311) into TryStatement(2312) at 1", "Insert SimpleName: PortForwardingEventListener(2318) into SimpleType: PortForwardingEventListener(2319) at 0", "Insert SimpleName: SshdSocketAddress(2322) into SimpleType: SshdSocketAddress(2323) at 0", "Insert SimpleName: Throwable(2326) into SimpleType: Throwable(2327) at 0", "Insert InfixExpression: ==(2334) into IfStatement(2337) at 0", "Insert Block(2336) into IfStatement(2337) at 1", "Insert SimpleName: SshdSocketAddress(2777) into SimpleType: SshdSocketAddress(2778) at 0", "Insert SimpleName: SshdSocketAddress(2781) into SimpleType: SshdSocketAddress(2782) at 0", "Insert Block(2806) into TryStatement(2866) at 0", "Insert CatchClause(2865) into TryStatement(2866) at 1", "Insert SimpleName: PortForwardingEventListener(2872) into SimpleType: PortForwardingEventListener(2873) at 0", "Insert SimpleName: SshdSocketAddress(2876) into SimpleType: SshdSocketAddress(2877) at 0", "Insert SimpleName: SshdSocketAddress(2880) into SimpleType: SshdSocketAddress(2881) at 0", "Insert InfixExpression: ==(2891) into IfStatement(2894) at 0", "Insert Block(2893) into IfStatement(2894) at 1", "Insert MethodInvocation(2902) into ExpressionStatement(2903) at 0", "Insert SimpleName: SshdSocketAddress(2909) into SimpleType: SshdSocketAddress(2910) at 0", "Insert SimpleName: SshdSocketAddress(2913) into SimpleType: SshdSocketAddress(2914) at 0", "Insert SimpleName: SshdSocketAddress(2920) into SimpleType: SshdSocketAddress(2921) at 0", "Insert SimpleName: Throwable(2924) into SimpleType: Throwable(2925) at 0", "Insert Block(2948) into TryStatement(3010) at 0", "Insert CatchClause(3009) into TryStatement(3010) at 1", "Insert SimpleName: PortForwardingEventListener(3016) into SimpleType: PortForwardingEventListener(3017) at 0", "Insert SimpleName: SshdSocketAddress(3020) into SimpleType: SshdSocketAddress(3021) at 0", "Insert SimpleName: SshdSocketAddress(3024) into SimpleType: SshdSocketAddress(3025) at 0", "Insert SimpleName: SshdSocketAddress(3031) into SimpleType: SshdSocketAddress(3032) at 0", "Insert SimpleName: Throwable(3035) into SimpleType: Throwable(3036) at 0", "Insert InfixExpression: ==(3043) into IfStatement(3046) at 0", "Insert Block(3045) into IfStatement(3046) at 1", "Insert MethodInvocation(3056) into ExpressionStatement(3057) at 0", "Insert SimpleType: Invoker(3064) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3069) at 0", "Move SimpleType: PortForwardingEventListener(1275) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3069) at 1", "Insert SimpleType: Void(3068) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3069) at 2", "Insert SimpleType: Throwable(3075) into VariableDeclarationStatement(3079) at 0", "Insert VariableDeclarationFragment(3078) into VariableDeclarationStatement(3079) at 1", "Insert Block(3086) into TryStatement(3110) at 0", "Insert CatchClause(3109) into TryStatement(3110) at 1", "Insert Block(3116) into TryStatement(3140) at 0", "Insert CatchClause(3139) into TryStatement(3140) at 1", "Insert InfixExpression: !=(3143) into IfStatement(3147) at 0", "Insert Block(3146) into IfStatement(3147) at 1", "Insert SimpleType: Collection(3154) into ParameterizedType: Collection<? extends PortForwardingEventListener>(3158) at 0", "Insert WildcardType: ? extends PortForwardingEventListener(3157) into ParameterizedType: Collection<? extends PortForwardingEventListener>(3158) at 1", "Insert SimpleType: Invoker(3162) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3167) at 0", "Move SimpleType: PortForwardingEventListener(1135) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3167) at 1", "Insert SimpleType: Void(3166) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3167) at 2", "Insert MethodInvocation(3175) into IfStatement(3178) at 0", "Insert Block(3177) into IfStatement(3178) at 1", "Insert SimpleType: Throwable(3180) into VariableDeclarationStatement(3184) at 0", "Insert VariableDeclarationFragment(3183) into VariableDeclarationStatement(3184) at 1", "Insert SingleVariableDeclaration(3188) into EnhancedForStatement(3227) at 0", "Insert SimpleName: listeners(3189) into EnhancedForStatement(3227) at 1", "Insert Block(3226) into EnhancedForStatement(3227) at 2", "Insert InfixExpression: !=(3230) into IfStatement(3234) at 0", "Insert Block(3233) into IfStatement(3234) at 1", "Insert SimpleType: Collection(3241) into ParameterizedType: Collection<? extends PortForwardingEventListenerManager>(3245) at 0", "Insert WildcardType: ? extends PortForwardingEventListenerManager(3244) into ParameterizedType: Collection<? extends PortForwardingEventListenerManager>(3245) at 1", "Insert SimpleType: Invoker(3249) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3254) at 0", "Move SimpleType: PortForwardingEventListener(855) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3254) at 1", "Insert SimpleType: Void(3253) into ParameterizedType: Invoker<PortForwardingEventListener,Void>(3254) at 2", "Insert MethodInvocation(3262) into IfStatement(3265) at 0", "Insert Block(3264) into IfStatement(3265) at 1", "Insert SimpleType: Throwable(3267) into VariableDeclarationStatement(3271) at 0", "Insert VariableDeclarationFragment(3270) into VariableDeclarationStatement(3271) at 1", "Insert SingleVariableDeclaration(3275) into EnhancedForStatement(3363) at 0", "Insert SimpleName: holders(3276) into EnhancedForStatement(3363) at 1", "Insert Block(3362) into EnhancedForStatement(3363) at 2", "Insert InfixExpression: !=(3366) into IfStatement(3370) at 0", "Insert Block(3369) into IfStatement(3370) at 1", "Insert MethodInvocation(3410) into ExpressionStatement(3411) at 0", "Insert SimpleType: CopyOnWriteArraySet(263) into ParameterizedType: CopyOnWriteArraySet<>(264) at 0", "Insert SimpleType: CopyOnWriteArraySet(277) into ParameterizedType: CopyOnWriteArraySet<>(278) at 0", "Insert MethodInvocation(390) into MethodInvocation(391) at 2", "Insert MethodInvocation(406) into ConditionalExpression(415) at 0", "Insert MethodInvocation(409) into ConditionalExpression(415) at 1", "Insert ClassInstanceCreation(414) into ConditionalExpression(415) at 2", "Insert SimpleName: managersHolder(428) into MethodInvocation(435) at 0", "Insert SimpleName: add(429) into MethodInvocation(435) at 1", "Insert MethodInvocation(434) into MethodInvocation(435) at 2", "Insert SimpleName: manager(448) into InfixExpression: ==(450) at 0", "Insert NullLiteral(449) into InfixExpression: ==(450) at 1", "Insert ReturnStatement(452) into Block(453) at 0", "Insert SimpleName: managersHolder(455) into MethodInvocation(458) at 0", "Insert SimpleName: remove(456) into MethodInvocation(458) at 1", "Insert SimpleName: manager(457) into MethodInvocation(458) at 2", "Insert SimpleType: Collection(489) into ParameterizedType: Collection<PortForwardingEventListener>(492) at 0", "Insert SimpleType: PortForwardingEventListener(491) into ParameterizedType: Collection<PortForwardingEventListener>(492) at 1", "Insert SimpleName: defaultListeners(493) into VariableDeclarationFragment(498) at 0", "Insert ClassInstanceCreation(497) into VariableDeclarationFragment(498) at 1", "Insert SimpleName: defaultListeners(500) into MethodInvocation(504) at 0", "Insert SimpleName: add(501) into MethodInvocation(504) at 1", "Move MethodInvocation(462) into MethodInvocation(504) at 2", "Insert SimpleName: Session(506) into SimpleType: Session(507) at 0", "Insert SimpleName: session(508) into VariableDeclarationFragment(511) at 0", "Insert MethodInvocation(510) into VariableDeclarationFragment(511) at 1", "Insert SimpleName: l(515) into VariableDeclarationFragment(519) at 0", "Insert MethodInvocation(518) into VariableDeclarationFragment(519) at 1", "Insert SimpleName: l(521) into InfixExpression: !=(523) at 0", "Insert NullLiteral(522) into InfixExpression: !=(523) at 1", "Insert ExpressionStatement(528) into Block(529) at 0", "Insert SimpleName: FactoryManager(531) into SimpleType: FactoryManager(532) at 0", "Insert SimpleName: manager(533) into VariableDeclarationFragment(543) at 0", "Insert ConditionalExpression(542) into VariableDeclarationFragment(543) at 1", "Insert SimpleName: l(545) into Assignment: =(555) at 0", "Insert ConditionalExpression(554) into Assignment: =(555) at 1", "Insert SimpleName: l(557) into InfixExpression: !=(559) at 0", "Insert NullLiteral(558) into InfixExpression: !=(559) at 1", "Insert ExpressionStatement(564) into Block(565) at 0", "Update SimpleName: establishingExplicitTunnel(466) to signalEstablishingExplicitTunnel", "Update SimpleName: establishingExplicitTunnel(862) to signalEstablishingExplicitTunnel", "Insert ExpressionStatement(1346) into Block(1347) at 0", "Insert SingleVariableDeclaration(1351) into CatchClause(1404) at 0", "Insert Block(1403) into CatchClause(1404) at 1", "Insert SimpleName: listener(1424) into InfixExpression: ==(1426) at 0", "Insert NullLiteral(1425) into InfixExpression: ==(1426) at 1", "Insert ReturnStatement(1427) into Block(1428) at 0", "Insert SimpleName: listener(1430) into MethodInvocation(1436) at 0", "Insert SimpleName: tearingDownExplicitTunnel(1431) into MethodInvocation(1436) at 1", "Move MethodInvocation(1399) into MethodInvocation(1436) at 2", "Insert SimpleName: boundAddress(1434) into MethodInvocation(1436) at 3", "Insert SimpleName: localForwarding(1435) into MethodInvocation(1436) at 4", "Insert ExpressionStatement(1471) into Block(1472) at 0", "Insert SingleVariableDeclaration(1476) into CatchClause(1529) at 0", "Insert Block(1528) into CatchClause(1529) at 1", "Insert SimpleName: listener(1553) into InfixExpression: ==(1555) at 0", "Insert NullLiteral(1554) into InfixExpression: ==(1555) at 1", "Insert ReturnStatement(1556) into Block(1557) at 0", "Insert SimpleName: listener(1559) into MethodInvocation(1566) at 0", "Insert SimpleName: tornDownExplicitTunnel(1560) into MethodInvocation(1566) at 1", "Move MethodInvocation(1517) into MethodInvocation(1566) at 2", "Insert SimpleName: boundAddress(1563) into MethodInvocation(1566) at 3", "Insert SimpleName: localForwarding(1564) into MethodInvocation(1566) at 4", "Insert SimpleName: reason(1565) into MethodInvocation(1566) at 5", "Insert SimpleName: signalEstablishingDynamicTunnel(1641) into MethodInvocation(1643) at 0", "Update SimpleName: getPortForwardingEventListenerProxy(1277) to local", "Move SimpleName: getPortForwardingEventListenerProxy(1277) into MethodInvocation(1643) at 1", "Insert ExpressionStatement(1809) into Block(1810) at 0", "Insert SingleVariableDeclaration(1814) into CatchClause(1867) at 0", "Insert Block(1866) into CatchClause(1867) at 1", "Insert SimpleName: listener(1892) into InfixExpression: ==(1894) at 0", "Insert NullLiteral(1893) into InfixExpression: ==(1894) at 1", "Insert ReturnStatement(1895) into Block(1896) at 0", "Insert SimpleName: listener(1898) into MethodInvocation(1905) at 0", "Insert SimpleName: establishedDynamicTunnel(1899) into MethodInvocation(1905) at 1", "Move MethodInvocation(1939) into MethodInvocation(1905) at 2", "Insert SimpleName: local(1902) into MethodInvocation(1905) at 3", "Insert SimpleName: boundAddress(1903) into MethodInvocation(1905) at 4", "Insert SimpleName: reason(1904) into MethodInvocation(1905) at 5", "Insert ExpressionStatement(1931) into Block(1932) at 0", "Insert SingleVariableDeclaration(1936) into CatchClause(1987) at 0", "Insert Block(1986) into CatchClause(1987) at 1", "Insert SimpleName: listener(2004) into InfixExpression: ==(2006) at 0", "Insert NullLiteral(2005) into InfixExpression: ==(2006) at 1", "Insert ReturnStatement(2007) into Block(2008) at 0", "Move IfStatement(1470) into Block(2100) at 0", "Insert ExpressionStatement(2067) into Block(2100) at 1", "Insert TryStatement(2094) into Block(2100) at 2", "Insert ExpressionStatement(2099) into Block(2100) at 3", "Insert ExpressionStatement(2140) into Block(2141) at 0", "Insert SingleVariableDeclaration(2145) into CatchClause(2196) at 0", "Insert Block(2195) into CatchClause(2196) at 1", "Insert SimpleName: listener(2213) into InfixExpression: ==(2215) at 0", "Insert NullLiteral(2214) into InfixExpression: ==(2215) at 1", "Insert ReturnStatement(2216) into Block(2217) at 0", "Insert SimpleName: listener(2219) into MethodInvocation(2224) at 0", "Insert SimpleName: tearingDownDynamicTunnel(2220) into MethodInvocation(2224) at 1", "Move MethodInvocation(1973) into MethodInvocation(2224) at 2", "Insert SimpleName: address(2223) into MethodInvocation(2224) at 3", "Insert ExpressionStatement(2255) into Block(2256) at 0", "Insert SingleVariableDeclaration(2260) into CatchClause(2311) at 0", "Insert Block(2310) into CatchClause(2311) at 1", "Insert SimpleName: listener(2332) into InfixExpression: ==(2334) at 0", "Insert NullLiteral(2333) into InfixExpression: ==(2334) at 1", "Insert ReturnStatement(2335) into Block(2336) at 0", "Update SimpleName: tearingDownDynamicTunnel(1479) to tornDownDynamicTunnel", "Move MethodInvocation(1959) into MethodInvocation(2344) at 2", "Update SimpleName: sessionInstance(1480) to address", "Update SimpleName: local(1481) to reason", "Update SimpleName: establishingExplicitTunnel(1705) to signalEstablishingExplicitTunnel", "Move ExpressionStatement(1508) into Block(2806) at 0", "Insert SingleVariableDeclaration(2810) into CatchClause(2865) at 0", "Insert Block(2864) into CatchClause(2865) at 1", "Insert SimpleName: listener(2889) into InfixExpression: ==(2891) at 0", "Insert NullLiteral(2890) into InfixExpression: ==(2891) at 1", "Insert ReturnStatement(2892) into Block(2893) at 0", "Insert SimpleName: listener(2895) into MethodInvocation(2902) at 0", "Insert SimpleName: establishingExplicitTunnel(2896) into MethodInvocation(2902) at 1", "Move MethodInvocation(1838) into MethodInvocation(2902) at 2", "Insert SimpleName: local(2899) into MethodInvocation(2902) at 3", "Insert SimpleName: remote(2900) into MethodInvocation(2902) at 4", "Insert SimpleName: localForwarding(2901) into MethodInvocation(2902) at 5", "Move ExpressionStatement(1521) into Block(2948) at 0", "Insert SingleVariableDeclaration(2952) into CatchClause(3009) at 0", "Insert Block(3008) into CatchClause(3009) at 1", "Insert SimpleName: listener(3041) into InfixExpression: ==(3043) at 0", "Insert NullLiteral(3042) into InfixExpression: ==(3043) at 1", "Insert ReturnStatement(3044) into Block(3045) at 0", "Insert SimpleName: listener(3047) into MethodInvocation(3056) at 0", "Insert SimpleName: establishedExplicitTunnel(3048) into MethodInvocation(3056) at 1", "Move MethodInvocation(1822) into MethodInvocation(3056) at 2", "Insert SimpleName: local(3051) into MethodInvocation(3056) at 3", "Insert SimpleName: remote(3052) into MethodInvocation(3056) at 4", "Insert SimpleName: localForwarding(3053) into MethodInvocation(3056) at 5", "Insert SimpleName: boundAddress(3054) into MethodInvocation(3056) at 6", "Insert SimpleName: reason(3055) into MethodInvocation(3056) at 7", "Insert SimpleName: Invoker(3063) into SimpleType: Invoker(3064) at 0", "Insert SimpleName: Void(3067) into SimpleType: Void(3068) at 0", "Insert SimpleName: Throwable(3074) into SimpleType: Throwable(3075) at 0", "Insert SimpleName: err(3076) into VariableDeclarationFragment(3078) at 0", "Insert NullLiteral(3077) into VariableDeclarationFragment(3078) at 1", "Insert ExpressionStatement(3085) into Block(3086) at 0", "Insert SingleVariableDeclaration(3090) into CatchClause(3109) at 0", "Insert Block(3108) into CatchClause(3109) at 1", "Insert ExpressionStatement(3115) into Block(3116) at 0", "Insert SingleVariableDeclaration(3120) into CatchClause(3139) at 0", "Insert Block(3138) into CatchClause(3139) at 1", "Insert SimpleName: err(3141) into InfixExpression: !=(3143) at 0", "Insert NullLiteral(3142) into InfixExpression: !=(3143) at 1", "Insert ThrowStatement(3145) into Block(3146) at 0", "Insert SimpleName: Collection(3153) into SimpleType: Collection(3154) at 0", "Move SimpleType: PortForwardingEventListener(1930) into WildcardType: ? extends PortForwardingEventListener(3157) at 0", "Insert SimpleName: Invoker(3161) into SimpleType: Invoker(3162) at 0", "Insert SimpleName: Void(3165) into SimpleType: Void(3166) at 0", "Insert SimpleName: GenericUtils(3172) into MethodInvocation(3175) at 0", "Insert SimpleName: isEmpty(3173) into MethodInvocation(3175) at 1", "Insert SimpleName: listeners(3174) into MethodInvocation(3175) at 2", "Insert ReturnStatement(3176) into Block(3177) at 0", "Insert SimpleName: Throwable(3179) into SimpleType: Throwable(3180) at 0", "Insert SimpleName: err(3181) into VariableDeclarationFragment(3183) at 0", "Insert NullLiteral(3182) into VariableDeclarationFragment(3183) at 1", "Move SimpleType: PortForwardingEventListener(1698) into SingleVariableDeclaration(3188) at 0", "Insert SimpleName: l(3187) into SingleVariableDeclaration(3188) at 1", "Insert IfStatement(3195) into Block(3226) at 0", "Insert TryStatement(3225) into Block(3226) at 1", "Insert SimpleName: err(3228) into InfixExpression: !=(3230) at 0", "Insert NullLiteral(3229) into InfixExpression: !=(3230) at 1", "Insert ThrowStatement(3232) into Block(3233) at 0", "Insert SimpleName: Collection(3240) into SimpleType: Collection(3241) at 0", "Insert SimpleType: PortForwardingEventListenerManager(3243) into WildcardType: ? extends PortForwardingEventListenerManager(3244) at 0", "Insert SimpleName: Invoker(3248) into SimpleType: Invoker(3249) at 0", "Insert SimpleName: Void(3252) into SimpleType: Void(3253) at 0", "Insert SimpleName: GenericUtils(3259) into MethodInvocation(3262) at 0", "Insert SimpleName: isEmpty(3260) into MethodInvocation(3262) at 1", "Insert SimpleName: holders(3261) into MethodInvocation(3262) at 2", "Insert ReturnStatement(3263) into Block(3264) at 0", "Insert SimpleName: Throwable(3266) into SimpleType: Throwable(3267) at 0", "Insert SimpleName: err(3268) into VariableDeclarationFragment(3270) at 0", "Insert NullLiteral(3269) into VariableDeclarationFragment(3270) at 1", "Insert SimpleType: PortForwardingEventListenerManager(3273) into SingleVariableDeclaration(3275) at 0", "Insert SimpleName: m(3274) into SingleVariableDeclaration(3275) at 1", "Insert TryStatement(3319) into Block(3362) at 0", "Insert IfStatement(3361) into Block(3362) at 1", "Insert SimpleName: err(3364) into InfixExpression: !=(3366) at 0", "Insert NullLiteral(3365) into InfixExpression: !=(3366) at 1", "Insert ThrowStatement(3368) into Block(3369) at 0", "Insert FieldAccess(3408) into MethodInvocation(3410) at 0", "Insert SimpleName: clear(3409) into MethodInvocation(3410) at 1", "Insert SimpleName: CopyOnWriteArraySet(262) into SimpleType: CopyOnWriteArraySet(263) at 0", "Insert SimpleName: CopyOnWriteArraySet(276) into SimpleType: CopyOnWriteArraySet(277) at 0", "Update SimpleName: Objects(341) to PortForwardingEventListener", "Update SimpleName: requireNonNull(342) to validateListener", "Insert SimpleName: PortForwardingEventListener(387) into MethodInvocation(390) at 0", "Insert SimpleName: validateListener(388) into MethodInvocation(390) at 1", "Move SimpleName: listener(367) into MethodInvocation(390) at 2", "Insert SimpleName: managersHolder(404) into MethodInvocation(406) at 0", "Insert SimpleName: isEmpty(405) into MethodInvocation(406) at 1", "Insert SimpleName: Collections(407) into MethodInvocation(409) at 0", "Insert SimpleName: emptyList(408) into MethodInvocation(409) at 1", "Insert ParameterizedType: ArrayList<>(412) into ClassInstanceCreation(414) at 0", "Insert SimpleName: managersHolder(413) into ClassInstanceCreation(414) at 1", "Insert SimpleName: Objects(430) into MethodInvocation(434) at 0", "Insert SimpleName: requireNonNull(431) into MethodInvocation(434) at 1", "Insert SimpleName: manager(432) into MethodInvocation(434) at 2", "Insert StringLiteral: \"No manager\"(433) into MethodInvocation(434) at 3", "Insert BooleanLiteral: false(451) into ReturnStatement(452) at 0", "Insert SimpleName: Collection(488) into SimpleType: Collection(489) at 0", "Insert SimpleName: PortForwardingEventListener(490) into SimpleType: PortForwardingEventListener(491) at 0", "Insert ParameterizedType: ArrayList<>(496) into ClassInstanceCreation(497) at 0", "Insert SimpleName: getSession(509) into MethodInvocation(510) at 0", "Insert SimpleName: session(516) into MethodInvocation(518) at 0", "Insert SimpleName: getPortForwardingEventListenerProxy(517) into MethodInvocation(518) at 1", "Insert MethodInvocation(527) into ExpressionStatement(528) at 0", "Insert ParenthesizedExpression(537) into ConditionalExpression(542) at 0", "Insert NullLiteral(538) into ConditionalExpression(542) at 1", "Insert MethodInvocation(541) into ConditionalExpression(542) at 2", "Insert ParenthesizedExpression(549) into ConditionalExpression(554) at 0", "Insert NullLiteral(550) into ConditionalExpression(554) at 1", "Insert MethodInvocation(553) into ConditionalExpression(554) at 2", "Insert MethodInvocation(563) into ExpressionStatement(564) at 0", "Insert MethodInvocation(1345) into ExpressionStatement(1346) at 0", "Insert SimpleType: Throwable(1349) into SingleVariableDeclaration(1351) at 0", "Insert SimpleName: t(1350) into SingleVariableDeclaration(1351) at 1", "Insert IfStatement(1402) into Block(1403) at 0", "Insert MethodInvocation(1470) into ExpressionStatement(1471) at 0", "Insert SimpleType: Throwable(1474) into SingleVariableDeclaration(1476) at 0", "Insert SimpleName: t(1475) into SingleVariableDeclaration(1476) at 1", "Insert IfStatement(1527) into Block(1528) at 0", "Insert MethodInvocation(1808) into ExpressionStatement(1809) at 0", "Insert SimpleType: Throwable(1812) into SingleVariableDeclaration(1814) at 0", "Insert SimpleName: t(1813) into SingleVariableDeclaration(1814) at 1", "Insert IfStatement(1865) into Block(1866) at 0", "Insert MethodInvocation(1930) into ExpressionStatement(1931) at 0", "Insert SimpleType: Throwable(1934) into SingleVariableDeclaration(1936) at 0", "Insert SimpleName: t(1935) into SingleVariableDeclaration(1936) at 1", "Insert IfStatement(1985) into Block(1986) at 0", "Insert MethodInvocation(2066) into ExpressionStatement(2067) at 0", "Move Block(1496) into TryStatement(2094) at 0", "Insert CatchClause(2093) into TryStatement(2094) at 1", "Insert MethodInvocation(2098) into ExpressionStatement(2099) at 0", "Insert MethodInvocation(2139) into ExpressionStatement(2140) at 0", "Insert SimpleType: Throwable(2143) into SingleVariableDeclaration(2145) at 0", "Insert SimpleName: t(2144) into SingleVariableDeclaration(2145) at 1", "Insert IfStatement(2194) into Block(2195) at 0", "Insert MethodInvocation(2254) into ExpressionStatement(2255) at 0", "Insert SimpleType: Throwable(2258) into SingleVariableDeclaration(2260) at 0", "Insert SimpleName: t(2259) into SingleVariableDeclaration(2260) at 1", "Insert IfStatement(2309) into Block(2310) at 0", "Insert SimpleType: Throwable(2808) into SingleVariableDeclaration(2810) at 0", "Insert SimpleName: t(2809) into SingleVariableDeclaration(2810) at 1", "Insert IfStatement(2863) into Block(2864) at 0", "Insert SimpleType: Throwable(2950) into SingleVariableDeclaration(2952) at 0", "Insert SimpleName: t(2951) into SingleVariableDeclaration(2952) at 1", "Insert IfStatement(3007) into Block(3008) at 0", "Insert MethodInvocation(3084) into ExpressionStatement(3085) at 0", "Insert SimpleType: Throwable(3088) into SingleVariableDeclaration(3090) at 0", "Insert SimpleName: t(3089) into SingleVariableDeclaration(3090) at 1", "Insert VariableDeclarationStatement(3099) into Block(3108) at 0", "Insert ExpressionStatement(3107) into Block(3108) at 1", "Insert MethodInvocation(3114) into ExpressionStatement(3115) at 0", "Insert SimpleType: Throwable(3118) into SingleVariableDeclaration(3120) at 0", "Insert SimpleName: t(3119) into SingleVariableDeclaration(3120) at 1", "Insert VariableDeclarationStatement(3129) into Block(3138) at 0", "Insert ExpressionStatement(3137) into Block(3138) at 1", "Insert SimpleName: err(3144) into ThrowStatement(3145) at 0", "Insert InfixExpression: ==(3192) into IfStatement(3195) at 0", "Insert Block(3194) into IfStatement(3195) at 1", "Insert Block(3201) into TryStatement(3225) at 0", "Insert CatchClause(3224) into TryStatement(3225) at 1", "Insert SimpleName: err(3231) into ThrowStatement(3232) at 0", "Insert SimpleName: PortForwardingEventListenerManager(3242) into SimpleType: PortForwardingEventListenerManager(3243) at 0", "Insert SimpleName: PortForwardingEventListenerManager(3272) into SimpleType: PortForwardingEventListenerManager(3273) at 0", "Insert Block(3295) into TryStatement(3319) at 0", "Insert CatchClause(3318) into TryStatement(3319) at 1", "Insert InstanceofExpression(3323) into IfStatement(3361) at 0", "Insert Block(3360) into IfStatement(3361) at 1", "Insert SimpleName: err(3367) into ThrowStatement(3368) at 0", "Insert ThisExpression(3406) into FieldAccess(3408) at 0", "Insert SimpleName: managersHolder(3407) into FieldAccess(3408) at 1", "Insert SimpleType: ArrayList(411) into ParameterizedType: ArrayList<>(412) at 0", "Insert SimpleType: ArrayList(495) into ParameterizedType: ArrayList<>(496) at 0", "Insert SimpleName: defaultListeners(524) into MethodInvocation(527) at 0", "Insert SimpleName: add(525) into MethodInvocation(527) at 1", "Insert SimpleName: l(526) into MethodInvocation(527) at 2", "Insert InfixExpression: ==(536) into ParenthesizedExpression(537) at 0", "Insert SimpleName: session(539) into MethodInvocation(541) at 0", "Insert SimpleName: getFactoryManager(540) into MethodInvocation(541) at 1", "Insert InfixExpression: ==(548) into ParenthesizedExpression(549) at 0", "Insert SimpleName: manager(551) into MethodInvocation(553) at 0", "Insert SimpleName: getPortForwardingEventListenerProxy(552) into MethodInvocation(553) at 1", "Insert SimpleName: defaultListeners(560) into MethodInvocation(563) at 0", "Insert SimpleName: add(561) into MethodInvocation(563) at 1", "Insert SimpleName: l(562) into MethodInvocation(563) at 2", "Update SimpleName: establishedExplicitTunnel(592) to signalEstablishedExplicitTunnel", "Update SimpleName: tearingDownExplicitTunnel(689) to signalTearingDownExplicitTunnel", "Update SimpleName: tornDownExplicitTunnel(723) to signalTornDownExplicitTunnel", "Update SimpleName: establishedExplicitTunnel(1006) to signalEstablishedExplicitTunnel", "Update SimpleName: tearingDownExplicitTunnel(1142) to signalTearingDownExplicitTunnel", "Update SimpleName: tornDownExplicitTunnel(1177) to signalTornDownExplicitTunnel", "Insert SimpleName: invokePortEventListenerSignaller(1332) into MethodInvocation(1345) at 0", "Insert LambdaExpression(1344) into MethodInvocation(1345) at 1", "Insert SimpleName: Throwable(1348) into SimpleType: Throwable(1349) at 0", "Insert InstanceofExpression(1355) into IfStatement(1402) at 0", "Insert Block(1361) into IfStatement(1402) at 1", "Insert IfStatement(1401) into IfStatement(1402) at 2", "Insert SimpleName: invokePortEventListenerSignaller(1456) into MethodInvocation(1470) at 0", "Insert LambdaExpression(1469) into MethodInvocation(1470) at 1", "Insert SimpleName: Throwable(1473) into SimpleType: Throwable(1474) at 0", "Insert InstanceofExpression(1480) into IfStatement(1527) at 0", "Insert Block(1486) into IfStatement(1527) at 1", "Insert IfStatement(1526) into IfStatement(1527) at 2", "Update SimpleName: establishedDynamicTunnel(1397) to signalEstablishedDynamicTunnel", "Insert SimpleName: invokePortEventListenerSignaller(1794) into MethodInvocation(1808) at 0", "Insert LambdaExpression(1807) into MethodInvocation(1808) at 1", "Insert SimpleName: Throwable(1811) into SimpleType: Throwable(1812) at 0", "Insert InstanceofExpression(1818) into IfStatement(1865) at 0", "Insert Block(1824) into IfStatement(1865) at 1", "Insert IfStatement(1864) into IfStatement(1865) at 2", "Insert SimpleName: invokePortEventListenerSignaller(1918) into MethodInvocation(1930) at 0", "Insert LambdaExpression(1929) into MethodInvocation(1930) at 1", "Insert SimpleName: Throwable(1933) into SimpleType: Throwable(1934) at 0", "Insert InstanceofExpression(1940) into IfStatement(1985) at 0", "Insert Block(1946) into IfStatement(1985) at 1", "Insert IfStatement(1984) into IfStatement(1985) at 2", "Insert SimpleName: signalTearingDownDynamicTunnel(2064) into MethodInvocation(2066) at 0", "Insert SimpleName: local(2065) into MethodInvocation(2066) at 1", "Move SingleVariableDeclaration(1955) into CatchClause(2093) at 0", "Insert Block(2092) into CatchClause(2093) at 1", "Insert SimpleName: signalTornDownDynamicTunnel(2095) into MethodInvocation(2098) at 0", "Insert SimpleName: local(2096) into MethodInvocation(2098) at 1", "Insert NullLiteral(2097) into MethodInvocation(2098) at 2", "Insert SimpleName: invokePortEventListenerSignaller(2127) into MethodInvocation(2139) at 0", "Insert LambdaExpression(2138) into MethodInvocation(2139) at 1", "Insert SimpleName: Throwable(2142) into SimpleType: Throwable(2143) at 0", "Insert InstanceofExpression(2149) into IfStatement(2194) at 0", "Insert Block(2155) into IfStatement(2194) at 1", "Insert IfStatement(2193) into IfStatement(2194) at 2", "Update SimpleName: getPortForwardingEventListenerProxy(1474) to invokePortEventListenerSignaller", "Move SimpleName: getPortForwardingEventListenerProxy(1474) into MethodInvocation(2254) at 0", "Insert LambdaExpression(2253) into MethodInvocation(2254) at 1", "Insert SimpleName: Throwable(2257) into SimpleType: Throwable(2258) at 0", "Insert InstanceofExpression(2264) into IfStatement(2309) at 0", "Insert Block(2270) into IfStatement(2309) at 1", "Insert IfStatement(2308) into IfStatement(2309) at 2", "Update SimpleName: establishedExplicitTunnel(1836) to signalEstablishedExplicitTunnel", "Update SimpleName: tearingDownExplicitTunnel(1937) to signalTearingDownExplicitTunnel", "Move SingleVariableDeclaration(1500) into CatchClause(2747) at 0", "Update SimpleName: tornDownExplicitTunnel(1971) to signalTornDownExplicitTunnel", "Update SimpleName: listener(1501) to invokePortEventListenerSignaller", "Insert LambdaExpression(2803) into MethodInvocation(2804) at 1", "Insert SimpleName: Throwable(2807) into SimpleType: Throwable(2808) at 0", "Insert InstanceofExpression(2814) into IfStatement(2863) at 0", "Insert Block(2820) into IfStatement(2863) at 1", "Insert IfStatement(2862) into IfStatement(2863) at 2", "Update SimpleName: listener(1514) to invokePortEventListenerSignaller", "Insert LambdaExpression(2945) into MethodInvocation(2946) at 1", "Insert SimpleName: Throwable(2949) into SimpleType: Throwable(2950) at 0", "Insert InstanceofExpression(2956) into IfStatement(3007) at 0", "Insert Block(2962) into IfStatement(3007) at 1", "Insert IfStatement(3006) into IfStatement(3007) at 2", "Insert SimpleName: invokePortEventListenerSignallerListeners(3080) into MethodInvocation(3084) at 0", "Insert MethodInvocation(3082) into MethodInvocation(3084) at 1", "Insert SimpleName: invoker(3083) into MethodInvocation(3084) at 2", "Insert SimpleName: Throwable(3087) into SimpleType: Throwable(3088) at 0", "Insert SimpleType: Throwable(3092) into VariableDeclarationStatement(3099) at 0", "Insert VariableDeclarationFragment(3098) into VariableDeclarationStatement(3099) at 1", "Insert Assignment: =(3106) into ExpressionStatement(3107) at 0", "Insert SimpleName: invokePortEventListenerSignallerHolders(3111) into MethodInvocation(3114) at 0", "Insert SimpleName: managersHolder(3112) into MethodInvocation(3114) at 1", "Insert SimpleName: invoker(3113) into MethodInvocation(3114) at 2", "Insert SimpleName: Throwable(3117) into SimpleType: Throwable(3118) at 0", "Insert SimpleType: Throwable(3122) into VariableDeclarationStatement(3129) at 0", "Insert VariableDeclarationFragment(3128) into VariableDeclarationStatement(3129) at 1", "Insert Assignment: =(3136) into ExpressionStatement(3137) at 0", "Insert SimpleName: l(3190) into InfixExpression: ==(3192) at 0", "Insert NullLiteral(3191) into InfixExpression: ==(3192) at 1", "Insert ContinueStatement(3193) into Block(3194) at 0", "Insert ExpressionStatement(3200) into Block(3201) at 0", "Insert SingleVariableDeclaration(3205) into CatchClause(3224) at 0", "Insert Block(3223) into CatchClause(3224) at 1", "Insert VariableDeclarationStatement(3284) into Block(3295) at 0", "Insert IfStatement(3294) into Block(3295) at 1", "Insert SingleVariableDeclaration(3299) into CatchClause(3318) at 0", "Insert Block(3317) into CatchClause(3318) at 1", "Insert SimpleName: m(3320) into InstanceofExpression(3323) at 0", "Insert SimpleType: PortForwardingEventListenerManagerHolder(3322) into InstanceofExpression(3323) at 1", "Insert TryStatement(3359) into Block(3360) at 0", "Insert SimpleName: ArrayList(410) into SimpleType: ArrayList(411) at 0", "Insert SimpleName: ArrayList(494) into SimpleType: ArrayList(495) at 0", "Insert SimpleName: session(534) into InfixExpression: ==(536) at 0", "Insert NullLiteral(535) into InfixExpression: ==(536) at 1", "Insert SimpleName: manager(546) into InfixExpression: ==(548) at 0", "Insert NullLiteral(547) into InfixExpression: ==(548) at 1", "Update SimpleName: establishedExplicitTunnel(548) to signalEstablishedExplicitTunnel", "Update SimpleName: establishedExplicitTunnel(965) to signalEstablishedExplicitTunnel", "Insert VariableDeclarationFragment(1334) into LambdaExpression(1344) at 0", "Insert Block(1343) into LambdaExpression(1344) at 1", "Insert SimpleName: t(1352) into InstanceofExpression(1355) at 0", "Insert SimpleType: RuntimeException(1354) into InstanceofExpression(1355) at 1", "Insert ThrowStatement(1360) into Block(1361) at 0", "Insert InstanceofExpression(1365) into IfStatement(1401) at 0", "Insert Block(1371) into IfStatement(1401) at 1", "Insert IfStatement(1400) into IfStatement(1401) at 2", "Insert VariableDeclarationFragment(1458) into LambdaExpression(1469) at 0", "Insert Block(1468) into LambdaExpression(1469) at 1", "Insert SimpleName: t(1477) into InstanceofExpression(1480) at 0", "Insert SimpleType: RuntimeException(1479) into InstanceofExpression(1480) at 1", "Insert ThrowStatement(1485) into Block(1486) at 0", "Insert InstanceofExpression(1490) into IfStatement(1526) at 0", "Insert Block(1496) into IfStatement(1526) at 1", "Insert IfStatement(1525) into IfStatement(1526) at 2", "Update SimpleName: establishedDynamicTunnel(1357) to signalEstablishedDynamicTunnel", "Insert VariableDeclarationFragment(1796) into LambdaExpression(1807) at 0", "Insert Block(1806) into LambdaExpression(1807) at 1", "Insert SimpleName: t(1815) into InstanceofExpression(1818) at 0", "Insert SimpleType: RuntimeException(1817) into InstanceofExpression(1818) at 1", "Insert ThrowStatement(1823) into Block(1824) at 0", "Insert InstanceofExpression(1828) into IfStatement(1864) at 0", "Insert Block(1834) into IfStatement(1864) at 1", "Insert IfStatement(1863) into IfStatement(1864) at 2", "Insert VariableDeclarationFragment(1920) into LambdaExpression(1929) at 0", "Insert Block(1928) into LambdaExpression(1929) at 1", "Insert SimpleName: t(1937) into InstanceofExpression(1940) at 0", "Insert SimpleType: RuntimeException(1939) into InstanceofExpression(1940) at 1", "Insert ThrowStatement(1945) into Block(1946) at 0", "Insert InstanceofExpression(1950) into IfStatement(1984) at 0", "Insert Block(1956) into IfStatement(1984) at 1", "Insert IfStatement(1983) into IfStatement(1984) at 2", "Insert ExpressionStatement(2089) into Block(2092) at 0", "Move ThrowStatement(1966) into Block(2092) at 1", "Insert VariableDeclarationFragment(2129) into LambdaExpression(2138) at 0", "Insert Block(2137) into LambdaExpression(2138) at 1", "Insert SimpleName: t(2146) into InstanceofExpression(2149) at 0", "Insert SimpleType: RuntimeException(2148) into InstanceofExpression(2149) at 1", "Insert ThrowStatement(2154) into Block(2155) at 0", "Insert InstanceofExpression(2159) into IfStatement(2193) at 0", "Insert Block(2165) into IfStatement(2193) at 1", "Insert IfStatement(2192) into IfStatement(2193) at 2", "Insert VariableDeclarationFragment(2243) into LambdaExpression(2253) at 0", "Insert Block(2252) into LambdaExpression(2253) at 1", "Insert SimpleName: t(2261) into InstanceofExpression(2264) at 0", "Insert SimpleType: RuntimeException(2263) into InstanceofExpression(2264) at 1", "Insert ThrowStatement(2269) into Block(2270) at 0", "Insert InstanceofExpression(2274) into IfStatement(2308) at 0", "Insert Block(2280) into IfStatement(2308) at 1", "Insert IfStatement(2307) into IfStatement(2308) at 2", "Update SimpleName: establishedExplicitTunnel(1820) to signalEstablishedExplicitTunnel", "Move ThrowStatement(1510) into Block(2746) at 1", "Insert VariableDeclarationFragment(2792) into LambdaExpression(2803) at 0", "Insert Block(2802) into LambdaExpression(2803) at 1", "Insert SimpleName: t(2811) into InstanceofExpression(2814) at 0", "Insert SimpleType: RuntimeException(2813) into InstanceofExpression(2814) at 1", "Insert ThrowStatement(2819) into Block(2820) at 0", "Insert InstanceofExpression(2824) into IfStatement(2862) at 0", "Insert Block(2830) into IfStatement(2862) at 1", "Insert IfStatement(2861) into IfStatement(2862) at 2", "Insert VariableDeclarationFragment(2932) into LambdaExpression(2945) at 0", "Insert Block(2944) into LambdaExpression(2945) at 1", "Insert SimpleName: t(2953) into InstanceofExpression(2956) at 0", "Insert SimpleType: RuntimeException(2955) into InstanceofExpression(2956) at 1", "Insert ThrowStatement(2961) into Block(2962) at 0", "Insert InstanceofExpression(2966) into IfStatement(3006) at 0", "Insert Block(2972) into IfStatement(3006) at 1", "Insert IfStatement(3005) into IfStatement(3006) at 2", "Insert SimpleName: getDefaultListeners(3081) into MethodInvocation(3082) at 0", "Insert SimpleName: Throwable(3091) into SimpleType: Throwable(3092) at 0", "Insert SimpleName: e(3093) into VariableDeclarationFragment(3098) at 0", "Insert MethodInvocation(3097) into VariableDeclarationFragment(3098) at 1", "Insert SimpleName: err(3100) into Assignment: =(3106) at 0", "Insert MethodInvocation(3105) into Assignment: =(3106) at 1", "Insert SimpleName: Throwable(3121) into SimpleType: Throwable(3122) at 0", "Insert SimpleName: e(3123) into VariableDeclarationFragment(3128) at 0", "Insert MethodInvocation(3127) into VariableDeclarationFragment(3128) at 1", "Insert SimpleName: err(3130) into Assignment: =(3136) at 0", "Insert MethodInvocation(3135) into Assignment: =(3136) at 1", "Insert MethodInvocation(3199) into ExpressionStatement(3200) at 0", "Insert SimpleType: Throwable(3203) into SingleVariableDeclaration(3205) at 0", "Insert SimpleName: t(3204) into SingleVariableDeclaration(3205) at 1", "Insert VariableDeclarationStatement(3214) into Block(3223) at 0", "Insert ExpressionStatement(3222) into Block(3223) at 1", "Move SimpleType: PortForwardingEventListener(1472) into VariableDeclarationStatement(3284) at 0", "Insert VariableDeclarationFragment(3283) into VariableDeclarationStatement(3284) at 1", "Insert InfixExpression: !=(3287) into IfStatement(3294) at 0", "Insert Block(3293) into IfStatement(3294) at 1", "Insert SimpleType: Throwable(3297) into SingleVariableDeclaration(3299) at 0", "Insert SimpleName: t(3298) into SingleVariableDeclaration(3299) at 1", "Insert VariableDeclarationStatement(3308) into Block(3317) at 0", "Insert ExpressionStatement(3316) into Block(3317) at 1", "Insert SimpleName: PortForwardingEventListenerManagerHolder(3321) into SimpleType: PortForwardingEventListenerManagerHolder(3322) at 0", "Insert Block(3335) into TryStatement(3359) at 0", "Insert CatchClause(3358) into TryStatement(3359) at 1", "Insert SimpleName: l(1333) into VariableDeclarationFragment(1334) at 0", "Insert ExpressionStatement(1340) into Block(1343) at 0", "Insert ReturnStatement(1342) into Block(1343) at 1", "Insert SimpleName: RuntimeException(1353) into SimpleType: RuntimeException(1354) at 0", "Insert CastExpression(1359) into ThrowStatement(1360) at 0", "Insert SimpleName: t(1362) into InstanceofExpression(1365) at 0", "Insert SimpleType: Error(1364) into InstanceofExpression(1365) at 1", "Insert ThrowStatement(1370) into Block(1371) at 0", "Insert InstanceofExpression(1375) into IfStatement(1400) at 0", "Insert Block(1381) into IfStatement(1400) at 1", "Insert Block(1399) into IfStatement(1400) at 2", "Insert SimpleName: l(1457) into VariableDeclarationFragment(1458) at 0", "Insert ExpressionStatement(1465) into Block(1468) at 0", "Insert ReturnStatement(1467) into Block(1468) at 1", "Insert SimpleName: RuntimeException(1478) into SimpleType: RuntimeException(1479) at 0", "Insert CastExpression(1484) into ThrowStatement(1485) at 0", "Insert SimpleName: t(1487) into InstanceofExpression(1490) at 0", "Insert SimpleType: Error(1489) into InstanceofExpression(1490) at 1", "Insert ThrowStatement(1495) into Block(1496) at 0", "Insert InstanceofExpression(1500) into IfStatement(1525) at 0", "Insert Block(1506) into IfStatement(1525) at 1", "Insert Block(1524) into IfStatement(1525) at 2", "Insert SimpleName: l(1795) into VariableDeclarationFragment(1796) at 0", "Insert ExpressionStatement(1803) into Block(1806) at 0", "Insert ReturnStatement(1805) into Block(1806) at 1", "Insert SimpleName: RuntimeException(1816) into SimpleType: RuntimeException(1817) at 0", "Insert CastExpression(1822) into ThrowStatement(1823) at 0", "Insert SimpleName: t(1825) into InstanceofExpression(1828) at 0", "Insert SimpleType: Error(1827) into InstanceofExpression(1828) at 1", "Insert ThrowStatement(1833) into Block(1834) at 0", "Insert InstanceofExpression(1838) into IfStatement(1863) at 0", "Insert Block(1844) into IfStatement(1863) at 1", "Insert Block(1862) into IfStatement(1863) at 2", "Insert SimpleName: l(1919) into VariableDeclarationFragment(1920) at 0", "Insert ExpressionStatement(1925) into Block(1928) at 0", "Insert ReturnStatement(1927) into Block(1928) at 1", "Insert SimpleName: RuntimeException(1938) into SimpleType: RuntimeException(1939) at 0", "Insert CastExpression(1944) into ThrowStatement(1945) at 0", "Insert SimpleName: t(1947) into InstanceofExpression(1950) at 0", "Insert SimpleType: Error(1949) into InstanceofExpression(1950) at 1", "Insert ThrowStatement(1955) into Block(1956) at 0", "Insert InstanceofExpression(1960) into IfStatement(1983) at 0", "Insert Block(1966) into IfStatement(1983) at 1", "Insert Block(1982) into IfStatement(1983) at 2", "Insert MethodInvocation(2088) into ExpressionStatement(2089) at 0", "Insert SimpleName: l(2128) into VariableDeclarationFragment(2129) at 0", "Insert ExpressionStatement(2134) into Block(2137) at 0", "Insert ReturnStatement(2136) into Block(2137) at 1", "Insert SimpleName: RuntimeException(2147) into SimpleType: RuntimeException(2148) at 0", "Insert CastExpression(2153) into ThrowStatement(2154) at 0", "Insert SimpleName: t(2156) into InstanceofExpression(2159) at 0", "Insert SimpleType: Error(2158) into InstanceofExpression(2159) at 1", "Insert ThrowStatement(2164) into Block(2165) at 0", "Insert InstanceofExpression(2169) into IfStatement(2192) at 0", "Insert Block(2175) into IfStatement(2192) at 1", "Insert Block(2191) into IfStatement(2192) at 2", "Insert SimpleName: l(2242) into VariableDeclarationFragment(2243) at 0", "Insert ExpressionStatement(2249) into Block(2252) at 0", "Insert ReturnStatement(2251) into Block(2252) at 1", "Insert SimpleName: RuntimeException(2262) into SimpleType: RuntimeException(2263) at 0", "Insert CastExpression(2268) into ThrowStatement(2269) at 0", "Insert SimpleName: t(2271) into InstanceofExpression(2274) at 0", "Insert SimpleType: Error(2273) into InstanceofExpression(2274) at 1", "Insert ThrowStatement(2279) into Block(2280) at 0", "Insert InstanceofExpression(2284) into IfStatement(2307) at 0", "Insert Block(2290) into IfStatement(2307) at 1", "Insert Block(2306) into IfStatement(2307) at 2", "Insert SimpleName: l(2791) into VariableDeclarationFragment(2792) at 0", "Insert ExpressionStatement(2799) into Block(2802) at 0", "Insert ReturnStatement(2801) into Block(2802) at 1", "Insert SimpleName: RuntimeException(2812) into SimpleType: RuntimeException(2813) at 0", "Insert CastExpression(2818) into ThrowStatement(2819) at 0", "Insert SimpleName: t(2821) into InstanceofExpression(2824) at 0", "Insert SimpleType: Error(2823) into InstanceofExpression(2824) at 1", "Insert ThrowStatement(2829) into Block(2830) at 0", "Insert InstanceofExpression(2834) into IfStatement(2861) at 0", "Insert Block(2840) into IfStatement(2861) at 1", "Insert Block(2860) into IfStatement(2861) at 2", "Insert SimpleName: l(2931) into VariableDeclarationFragment(2932) at 0", "Insert ExpressionStatement(2941) into Block(2944) at 0", "Insert ReturnStatement(2943) into Block(2944) at 1", "Insert SimpleName: RuntimeException(2954) into SimpleType: RuntimeException(2955) at 0", "Insert CastExpression(2960) into ThrowStatement(2961) at 0", "Insert SimpleName: t(2963) into InstanceofExpression(2966) at 0", "Insert SimpleType: Error(2965) into InstanceofExpression(2966) at 1", "Insert ThrowStatement(2971) into Block(2972) at 0", "Insert InstanceofExpression(2976) into IfStatement(3005) at 0", "Insert Block(2982) into IfStatement(3005) at 1", "Insert Block(3004) into IfStatement(3005) at 2", "Insert SimpleName: GenericUtils(3094) into MethodInvocation(3097) at 0", "Insert SimpleName: peelException(3095) into MethodInvocation(3097) at 1", "Insert SimpleName: t(3096) into MethodInvocation(3097) at 2", "Insert SimpleName: GenericUtils(3101) into MethodInvocation(3105) at 0", "Insert SimpleName: accumulateException(3102) into MethodInvocation(3105) at 1", "Insert SimpleName: err(3103) into MethodInvocation(3105) at 2", "Insert SimpleName: e(3104) into MethodInvocation(3105) at 3", "Insert SimpleName: GenericUtils(3124) into MethodInvocation(3127) at 0", "Insert SimpleName: peelException(3125) into MethodInvocation(3127) at 1", "Insert SimpleName: t(3126) into MethodInvocation(3127) at 2", "Insert SimpleName: GenericUtils(3131) into MethodInvocation(3135) at 0", "Insert SimpleName: accumulateException(3132) into MethodInvocation(3135) at 1", "Insert SimpleName: err(3133) into MethodInvocation(3135) at 2", "Insert SimpleName: e(3134) into MethodInvocation(3135) at 3", "Insert SimpleName: invoker(3196) into MethodInvocation(3199) at 0", "Insert SimpleName: invoke(3197) into MethodInvocation(3199) at 1", "Insert SimpleName: l(3198) into MethodInvocation(3199) at 2", "Insert SimpleName: Throwable(3202) into SimpleType: Throwable(3203) at 0", "Insert SimpleType: Throwable(3207) into VariableDeclarationStatement(3214) at 0", "Insert VariableDeclarationFragment(3213) into VariableDeclarationStatement(3214) at 1", "Insert Assignment: =(3221) into ExpressionStatement(3222) at 0", "Insert SimpleName: listener(3279) into VariableDeclarationFragment(3283) at 0", "Insert MethodInvocation(3282) into VariableDeclarationFragment(3283) at 1", "Insert SimpleName: listener(3285) into InfixExpression: !=(3287) at 0", "Insert NullLiteral(3286) into InfixExpression: !=(3287) at 1", "Insert ExpressionStatement(3292) into Block(3293) at 0", "Insert SimpleName: Throwable(3296) into SimpleType: Throwable(3297) at 0", "Insert SimpleType: Throwable(3301) into VariableDeclarationStatement(3308) at 0", "Insert VariableDeclarationFragment(3307) into VariableDeclarationStatement(3308) at 1", "Insert Assignment: =(3315) into ExpressionStatement(3316) at 0", "Insert ExpressionStatement(3334) into Block(3335) at 0", "Insert SingleVariableDeclaration(3339) into CatchClause(3358) at 0", "Insert Block(3357) into CatchClause(3358) at 1", "Update SimpleName: tornDownExplicitTunnel(709) to signalTornDownExplicitTunnel", "Update SimpleName: tornDownExplicitTunnel(1163) to signalTornDownExplicitTunnel", "Insert MethodInvocation(1339) into ExpressionStatement(1340) at 0", "Insert NullLiteral(1341) into ReturnStatement(1342) at 0", "Insert SimpleType: RuntimeException(1357) into CastExpression(1359) at 0", "Insert SimpleName: t(1358) into CastExpression(1359) at 1", "Insert SimpleName: Error(1363) into SimpleType: Error(1364) at 0", "Insert CastExpression(1369) into ThrowStatement(1370) at 0", "Insert SimpleName: t(1372) into InstanceofExpression(1375) at 0", "Insert SimpleType: IOException(1374) into InstanceofExpression(1375) at 1", "Insert ThrowStatement(1380) into Block(1381) at 0", "Insert ThrowStatement(1398) into Block(1399) at 0", "Insert MethodInvocation(1464) into ExpressionStatement(1465) at 0", "Insert NullLiteral(1466) into ReturnStatement(1467) at 0", "Insert SimpleType: RuntimeException(1482) into CastExpression(1484) at 0", "Insert SimpleName: t(1483) into CastExpression(1484) at 1", "Insert SimpleName: Error(1488) into SimpleType: Error(1489) at 0", "Insert CastExpression(1494) into ThrowStatement(1495) at 0", "Insert SimpleName: t(1497) into InstanceofExpression(1500) at 0", "Insert SimpleType: IOException(1499) into InstanceofExpression(1500) at 1", "Insert ThrowStatement(1505) into Block(1506) at 0", "Insert ThrowStatement(1523) into Block(1524) at 0", "Insert MethodInvocation(1802) into ExpressionStatement(1803) at 0", "Insert NullLiteral(1804) into ReturnStatement(1805) at 0", "Insert SimpleType: RuntimeException(1820) into CastExpression(1822) at 0", "Insert SimpleName: t(1821) into CastExpression(1822) at 1", "Insert SimpleName: Error(1826) into SimpleType: Error(1827) at 0", "Insert CastExpression(1832) into ThrowStatement(1833) at 0", "Insert SimpleName: t(1835) into InstanceofExpression(1838) at 0", "Insert SimpleType: IOException(1837) into InstanceofExpression(1838) at 1", "Insert ThrowStatement(1843) into Block(1844) at 0", "Insert ThrowStatement(1861) into Block(1862) at 0", "Insert MethodInvocation(1924) into ExpressionStatement(1925) at 0", "Insert NullLiteral(1926) into ReturnStatement(1927) at 0", "Insert SimpleType: RuntimeException(1942) into CastExpression(1944) at 0", "Insert SimpleName: t(1943) into CastExpression(1944) at 1", "Insert SimpleName: Error(1948) into SimpleType: Error(1949) at 0", "Insert CastExpression(1954) into ThrowStatement(1955) at 0", "Insert SimpleName: t(1957) into InstanceofExpression(1960) at 0", "Insert SimpleType: IOException(1959) into InstanceofExpression(1960) at 1", "Insert ThrowStatement(1965) into Block(1966) at 0", "Insert ThrowStatement(1981) into Block(1982) at 0", "Insert SimpleName: signalTornDownDynamicTunnel(2085) into MethodInvocation(2088) at 0", "Insert SimpleName: local(2086) into MethodInvocation(2088) at 1", "Insert SimpleName: e(2087) into MethodInvocation(2088) at 2", "Insert MethodInvocation(2133) into ExpressionStatement(2134) at 0", "Insert NullLiteral(2135) into ReturnStatement(2136) at 0", "Insert SimpleType: RuntimeException(2151) into CastExpression(2153) at 0", "Insert SimpleName: t(2152) into CastExpression(2153) at 1", "Insert SimpleName: Error(2157) into SimpleType: Error(2158) at 0", "Insert CastExpression(2163) into ThrowStatement(2164) at 0", "Insert SimpleName: t(2166) into InstanceofExpression(2169) at 0", "Insert SimpleType: IOException(2168) into InstanceofExpression(2169) at 1", "Insert ThrowStatement(2174) into Block(2175) at 0", "Insert ThrowStatement(2190) into Block(2191) at 0", "Insert MethodInvocation(2248) into ExpressionStatement(2249) at 0", "Insert NullLiteral(2250) into ReturnStatement(2251) at 0", "Insert SimpleType: RuntimeException(2266) into CastExpression(2268) at 0", "Insert SimpleName: t(2267) into CastExpression(2268) at 1", "Insert SimpleName: Error(2272) into SimpleType: Error(2273) at 0", "Insert CastExpression(2278) into ThrowStatement(2279) at 0", "Insert SimpleName: t(2281) into InstanceofExpression(2284) at 0", "Insert SimpleType: IOException(2283) into InstanceofExpression(2284) at 1", "Insert ThrowStatement(2289) into Block(2290) at 0", "Insert ThrowStatement(2305) into Block(2306) at 0", "Update SimpleName: tornDownExplicitTunnel(1957) to signalTornDownExplicitTunnel", "Insert MethodInvocation(2798) into ExpressionStatement(2799) at 0", "Insert NullLiteral(2800) into ReturnStatement(2801) at 0", "Insert SimpleType: RuntimeException(2816) into CastExpression(2818) at 0", "Insert SimpleName: t(2817) into CastExpression(2818) at 1", "Insert SimpleName: Error(2822) into SimpleType: Error(2823) at 0", "Insert CastExpression(2828) into ThrowStatement(2829) at 0", "Insert SimpleName: t(2831) into InstanceofExpression(2834) at 0", "Insert SimpleType: IOException(2833) into InstanceofExpression(2834) at 1", "Insert ThrowStatement(2839) into Block(2840) at 0", "Insert ThrowStatement(2859) into Block(2860) at 0", "Insert MethodInvocation(2940) into ExpressionStatement(2941) at 0", "Insert NullLiteral(2942) into ReturnStatement(2943) at 0", "Insert SimpleType: RuntimeException(2958) into CastExpression(2960) at 0", "Insert SimpleName: t(2959) into CastExpression(2960) at 1", "Insert SimpleName: Error(2964) into SimpleType: Error(2965) at 0", "Insert CastExpression(2970) into ThrowStatement(2971) at 0", "Insert SimpleName: t(2973) into InstanceofExpression(2976) at 0", "Insert SimpleType: IOException(2975) into InstanceofExpression(2976) at 1", "Insert ThrowStatement(2981) into Block(2982) at 0", "Insert ThrowStatement(3003) into Block(3004) at 0", "Insert SimpleName: Throwable(3206) into SimpleType: Throwable(3207) at 0", "Insert SimpleName: e(3208) into VariableDeclarationFragment(3213) at 0", "Insert MethodInvocation(3212) into VariableDeclarationFragment(3213) at 1", "Insert SimpleName: err(3215) into Assignment: =(3221) at 0", "Insert MethodInvocation(3220) into Assignment: =(3221) at 1", "Insert SimpleName: m(3280) into MethodInvocation(3282) at 0", "Insert SimpleName: getPortForwardingEventListenerProxy(3281) into MethodInvocation(3282) at 1", "Insert MethodInvocation(3291) into ExpressionStatement(3292) at 0", "Insert SimpleName: Throwable(3300) into SimpleType: Throwable(3301) at 0", "Insert SimpleName: e(3302) into VariableDeclarationFragment(3307) at 0", "Insert MethodInvocation(3306) into VariableDeclarationFragment(3307) at 1", "Insert SimpleName: err(3309) into Assignment: =(3315) at 0", "Insert MethodInvocation(3314) into Assignment: =(3315) at 1", "Insert MethodInvocation(3333) into ExpressionStatement(3334) at 0", "Insert SimpleType: Throwable(3337) into SingleVariableDeclaration(3339) at 0", "Insert SimpleName: t(3338) into SingleVariableDeclaration(3339) at 1", "Insert VariableDeclarationStatement(3348) into Block(3357) at 0", "Insert ExpressionStatement(3356) into Block(3357) at 1", "Insert SimpleName: signalTearingDownExplicitTunnel(1335) into MethodInvocation(1339) at 0", "Insert SimpleName: l(1336) into MethodInvocation(1339) at 1", "Insert SimpleName: boundAddress(1337) into MethodInvocation(1339) at 2", "Insert SimpleName: localForwarding(1338) into MethodInvocation(1339) at 3", "Insert SimpleName: RuntimeException(1356) into SimpleType: RuntimeException(1357) at 0", "Insert SimpleType: Error(1367) into CastExpression(1369) at 0", "Insert SimpleName: t(1368) into CastExpression(1369) at 1", "Insert SimpleName: IOException(1373) into SimpleType: IOException(1374) at 0", "Insert CastExpression(1379) into ThrowStatement(1380) at 0", "Insert ClassInstanceCreation(1397) into ThrowStatement(1398) at 0", "Insert SimpleName: signalTornDownExplicitTunnel(1459) into MethodInvocation(1464) at 0", "Insert SimpleName: l(1460) into MethodInvocation(1464) at 1", "Insert SimpleName: boundAddress(1461) into MethodInvocation(1464) at 2", "Insert SimpleName: localForwarding(1462) into MethodInvocation(1464) at 3", "Insert SimpleName: reason(1463) into MethodInvocation(1464) at 4", "Insert SimpleName: RuntimeException(1481) into SimpleType: RuntimeException(1482) at 0", "Insert SimpleType: Error(1492) into CastExpression(1494) at 0", "Insert SimpleName: t(1493) into CastExpression(1494) at 1", "Insert SimpleName: IOException(1498) into SimpleType: IOException(1499) at 0", "Insert CastExpression(1504) into ThrowStatement(1505) at 0", "Insert ClassInstanceCreation(1522) into ThrowStatement(1523) at 0", "Insert SimpleName: signalEstablishedDynamicTunnel(1797) into MethodInvocation(1802) at 0", "Insert SimpleName: l(1798) into MethodInvocation(1802) at 1", "Insert SimpleName: local(1799) into MethodInvocation(1802) at 2", "Insert SimpleName: boundAddress(1800) into MethodInvocation(1802) at 3", "Insert SimpleName: reason(1801) into MethodInvocation(1802) at 4", "Insert SimpleName: RuntimeException(1819) into SimpleType: RuntimeException(1820) at 0", "Insert SimpleType: Error(1830) into CastExpression(1832) at 0", "Insert SimpleName: t(1831) into CastExpression(1832) at 1", "Insert SimpleName: IOException(1836) into SimpleType: IOException(1837) at 0", "Insert CastExpression(1842) into ThrowStatement(1843) at 0", "Insert ClassInstanceCreation(1860) into ThrowStatement(1861) at 0", "Insert SimpleName: signalEstablishingDynamicTunnel(1921) into MethodInvocation(1924) at 0", "Insert SimpleName: l(1922) into MethodInvocation(1924) at 1", "Insert SimpleName: local(1923) into MethodInvocation(1924) at 2", "Insert SimpleName: RuntimeException(1941) into SimpleType: RuntimeException(1942) at 0", "Insert SimpleType: Error(1952) into CastExpression(1954) at 0", "Insert SimpleName: t(1953) into CastExpression(1954) at 1", "Insert SimpleName: IOException(1958) into SimpleType: IOException(1959) at 0", "Insert CastExpression(1964) into ThrowStatement(1965) at 0", "Insert ClassInstanceCreation(1980) into ThrowStatement(1981) at 0", "Insert SimpleName: signalTearingDownDynamicTunnel(2130) into MethodInvocation(2133) at 0", "Insert SimpleName: l(2131) into MethodInvocation(2133) at 1", "Insert SimpleName: address(2132) into MethodInvocation(2133) at 2", "Insert SimpleName: RuntimeException(2150) into SimpleType: RuntimeException(2151) at 0", "Insert SimpleType: Error(2161) into CastExpression(2163) at 0", "Insert SimpleName: t(2162) into CastExpression(2163) at 1", "Insert SimpleName: IOException(2167) into SimpleType: IOException(2168) at 0", "Insert CastExpression(2173) into ThrowStatement(2174) at 0", "Insert ClassInstanceCreation(2189) into ThrowStatement(2190) at 0", "Insert SimpleName: signalTornDownDynamicTunnel(2244) into MethodInvocation(2248) at 0", "Insert SimpleName: l(2245) into MethodInvocation(2248) at 1", "Insert SimpleName: address(2246) into MethodInvocation(2248) at 2", "Insert SimpleName: reason(2247) into MethodInvocation(2248) at 3", "Insert SimpleName: RuntimeException(2265) into SimpleType: RuntimeException(2266) at 0", "Insert SimpleType: Error(2276) into CastExpression(2278) at 0", "Insert SimpleName: t(2277) into CastExpression(2278) at 1", "Insert SimpleName: IOException(2282) into SimpleType: IOException(2283) at 0", "Insert CastExpression(2288) into ThrowStatement(2289) at 0", "Insert ClassInstanceCreation(2304) into ThrowStatement(2305) at 0", "Update SimpleName: tornDownDynamicTunnel(1502) to signalEstablishingExplicitTunnel", "Move SimpleName: tornDownDynamicTunnel(1502) into MethodInvocation(2798) at 0", "Update SimpleName: getSession(1503) to l", "Move SimpleName: getSession(1503) into MethodInvocation(2798) at 1", "Move SimpleName: local(1505) into MethodInvocation(2798) at 2", "Update SimpleName: e(1506) to remote", "Move SimpleName: e(1506) into MethodInvocation(2798) at 3", "Insert SimpleName: localForwarding(2797) into MethodInvocation(2798) at 4", "Insert SimpleName: RuntimeException(2815) into SimpleType: RuntimeException(2816) at 0", "Insert SimpleType: Error(2826) into CastExpression(2828) at 0", "Insert SimpleName: t(2827) into CastExpression(2828) at 1", "Insert SimpleName: IOException(2832) into SimpleType: IOException(2833) at 0", "Insert CastExpression(2838) into ThrowStatement(2839) at 0", "Insert ClassInstanceCreation(2858) into ThrowStatement(2859) at 0", "Update SimpleName: tornDownDynamicTunnel(1515) to signalEstablishedExplicitTunnel", "Move SimpleName: tornDownDynamicTunnel(1515) into MethodInvocation(2940) at 0", "Insert SimpleName: l(2934) into MethodInvocation(2940) at 1", "Move SimpleName: local(1518) into MethodInvocation(2940) at 2", "Insert SimpleName: remote(2936) into MethodInvocation(2940) at 3", "Insert SimpleName: localForwarding(2937) into MethodInvocation(2940) at 4", "Insert SimpleName: boundAddress(2938) into MethodInvocation(2940) at 5", "Insert SimpleName: reason(2939) into MethodInvocation(2940) at 6", "Insert SimpleName: RuntimeException(2957) into SimpleType: RuntimeException(2958) at 0", "Insert SimpleType: Error(2968) into CastExpression(2970) at 0", "Insert SimpleName: t(2969) into CastExpression(2970) at 1", "Insert SimpleName: IOException(2974) into SimpleType: IOException(2975) at 0", "Insert CastExpression(2980) into ThrowStatement(2981) at 0", "Insert ClassInstanceCreation(3002) into ThrowStatement(3003) at 0", "Insert SimpleName: GenericUtils(3209) into MethodInvocation(3212) at 0", "Insert SimpleName: peelException(3210) into MethodInvocation(3212) at 1", "Insert SimpleName: t(3211) into MethodInvocation(3212) at 2", "Insert SimpleName: GenericUtils(3216) into MethodInvocation(3220) at 0", "Insert SimpleName: accumulateException(3217) into MethodInvocation(3220) at 1", "Insert SimpleName: err(3218) into MethodInvocation(3220) at 2", "Insert SimpleName: e(3219) into MethodInvocation(3220) at 3", "Insert SimpleName: invoker(3288) into MethodInvocation(3291) at 0", "Insert SimpleName: invoke(3289) into MethodInvocation(3291) at 1", "Insert SimpleName: listener(3290) into MethodInvocation(3291) at 2", "Insert SimpleName: GenericUtils(3303) into MethodInvocation(3306) at 0", "Insert SimpleName: peelException(3304) into MethodInvocation(3306) at 1", "Insert SimpleName: t(3305) into MethodInvocation(3306) at 2", "Insert SimpleName: GenericUtils(3310) into MethodInvocation(3314) at 0", "Insert SimpleName: accumulateException(3311) into MethodInvocation(3314) at 1", "Insert SimpleName: err(3312) into MethodInvocation(3314) at 2", "Insert SimpleName: e(3313) into MethodInvocation(3314) at 3", "Insert SimpleName: invokePortEventListenerSignallerHolders(3324) into MethodInvocation(3333) at 0", "Insert MethodInvocation(3331) into MethodInvocation(3333) at 1", "Insert SimpleName: invoker(3332) into MethodInvocation(3333) at 2", "Insert SimpleName: Throwable(3336) into SimpleType: Throwable(3337) at 0", "Insert SimpleType: Throwable(3341) into VariableDeclarationStatement(3348) at 0", "Insert VariableDeclarationFragment(3347) into VariableDeclarationStatement(3348) at 1", "Insert Assignment: =(3355) into ExpressionStatement(3356) at 0", "Insert SimpleName: Error(1366) into SimpleType: Error(1367) at 0", "Insert SimpleType: IOException(1377) into CastExpression(1379) at 0", "Insert SimpleName: t(1378) into CastExpression(1379) at 1", "Insert SimpleType: IOException(1383) into ClassInstanceCreation(1397) at 0", "Insert InfixExpression: +(1395) into ClassInstanceCreation(1397) at 1", "Insert SimpleName: t(1396) into ClassInstanceCreation(1397) at 2", "Insert SimpleName: Error(1491) into SimpleType: Error(1492) at 0", "Insert SimpleType: IOException(1502) into CastExpression(1504) at 0", "Insert SimpleName: t(1503) into CastExpression(1504) at 1", "Insert SimpleType: IOException(1508) into ClassInstanceCreation(1522) at 0", "Insert InfixExpression: +(1520) into ClassInstanceCreation(1522) at 1", "Insert SimpleName: t(1521) into ClassInstanceCreation(1522) at 2", "Insert SimpleName: Error(1829) into SimpleType: Error(1830) at 0", "Insert SimpleType: IOException(1840) into CastExpression(1842) at 0", "Insert SimpleName: t(1841) into CastExpression(1842) at 1", "Insert SimpleType: IOException(1846) into ClassInstanceCreation(1860) at 0", "Insert InfixExpression: +(1858) into ClassInstanceCreation(1860) at 1", "Insert SimpleName: t(1859) into ClassInstanceCreation(1860) at 2", "Insert SimpleName: Error(1951) into SimpleType: Error(1952) at 0", "Insert SimpleType: IOException(1962) into CastExpression(1964) at 0", "Insert SimpleName: t(1963) into CastExpression(1964) at 1", "Insert SimpleType: IOException(1968) into ClassInstanceCreation(1980) at 0", "Insert InfixExpression: +(1978) into ClassInstanceCreation(1980) at 1", "Insert SimpleName: t(1979) into ClassInstanceCreation(1980) at 2", "Insert SimpleName: Error(2160) into SimpleType: Error(2161) at 0", "Insert SimpleType: IOException(2171) into CastExpression(2173) at 0", "Insert SimpleName: t(2172) into CastExpression(2173) at 1", "Insert SimpleType: IOException(2177) into ClassInstanceCreation(2189) at 0", "Insert InfixExpression: +(2187) into ClassInstanceCreation(2189) at 1", "Insert SimpleName: t(2188) into ClassInstanceCreation(2189) at 2", "Insert SimpleName: Error(2275) into SimpleType: Error(2276) at 0", "Insert SimpleType: IOException(2286) into CastExpression(2288) at 0", "Insert SimpleName: t(2287) into CastExpression(2288) at 1", "Insert SimpleType: IOException(2292) into ClassInstanceCreation(2304) at 0", "Insert InfixExpression: +(2302) into ClassInstanceCreation(2304) at 1", "Insert SimpleName: t(2303) into ClassInstanceCreation(2304) at 2", "Insert SimpleName: Error(2825) into SimpleType: Error(2826) at 0", "Insert SimpleType: IOException(2836) into CastExpression(2838) at 0", "Insert SimpleName: t(2837) into CastExpression(2838) at 1", "Insert SimpleType: IOException(2842) into ClassInstanceCreation(2858) at 0", "Insert InfixExpression: +(2856) into ClassInstanceCreation(2858) at 1", "Insert SimpleName: t(2857) into ClassInstanceCreation(2858) at 2", "Insert SimpleName: Error(2967) into SimpleType: Error(2968) at 0", "Insert SimpleType: IOException(2978) into CastExpression(2980) at 0", "Insert SimpleName: t(2979) into CastExpression(2980) at 1", "Insert SimpleType: IOException(2984) into ClassInstanceCreation(3002) at 0", "Insert InfixExpression: +(3000) into ClassInstanceCreation(3002) at 1", "Insert SimpleName: t(3001) into ClassInstanceCreation(3002) at 2", "Insert ParenthesizedExpression(3329) into MethodInvocation(3331) at 0", "Insert SimpleName: getRegisteredManagers(3330) into MethodInvocation(3331) at 1", "Insert SimpleName: Throwable(3340) into SimpleType: Throwable(3341) at 0", "Insert SimpleName: e(3342) into VariableDeclarationFragment(3347) at 0", "Insert MethodInvocation(3346) into VariableDeclarationFragment(3347) at 1", "Insert SimpleName: err(3349) into Assignment: =(3355) at 0", "Insert MethodInvocation(3354) into Assignment: =(3355) at 1", "Insert SimpleName: IOException(1376) into SimpleType: IOException(1377) at 0", "Insert SimpleName: IOException(1382) into SimpleType: IOException(1383) at 0", "Insert StringLiteral: \"Failed (\"(1384) into InfixExpression: +(1395) at 0", "Insert MethodInvocation(1389) into InfixExpression: +(1395) at 1", "Insert StringLiteral: \")\"(1390) into InfixExpression: +(1395) at 2", "Insert StringLiteral: \" to signal tearing down explicit tunnel for local=\"(1391) into InfixExpression: +(1395) at 3", "Insert SimpleName: localForwarding(1392) into InfixExpression: +(1395) at 4", "Insert StringLiteral: \" on bound=\"(1393) into InfixExpression: +(1395) at 5", "Insert SimpleName: boundAddress(1394) into InfixExpression: +(1395) at 6", "Insert SimpleName: IOException(1501) into SimpleType: IOException(1502) at 0", "Insert SimpleName: IOException(1507) into SimpleType: IOException(1508) at 0", "Insert StringLiteral: \"Failed (\"(1509) into InfixExpression: +(1520) at 0", "Insert MethodInvocation(1514) into InfixExpression: +(1520) at 1", "Insert StringLiteral: \")\"(1515) into InfixExpression: +(1520) at 2", "Insert StringLiteral: \" to signal torn down explicit tunnel local=\"(1516) into InfixExpression: +(1520) at 3", "Insert SimpleName: localForwarding(1517) into InfixExpression: +(1520) at 4", "Insert StringLiteral: \" on bound=\"(1518) into InfixExpression: +(1520) at 5", "Insert SimpleName: boundAddress(1519) into InfixExpression: +(1520) at 6", "Insert SimpleName: IOException(1839) into SimpleType: IOException(1840) at 0", "Insert SimpleName: IOException(1845) into SimpleType: IOException(1846) at 0", "Insert StringLiteral: \"Failed (\"(1847) into InfixExpression: +(1858) at 0", "Insert MethodInvocation(1852) into InfixExpression: +(1858) at 1", "Insert StringLiteral: \")\"(1853) into InfixExpression: +(1858) at 2", "Insert StringLiteral: \" to signal establishing dynamic tunnel for local=\"(1854) into InfixExpression: +(1858) at 3", "Insert SimpleName: local(1855) into InfixExpression: +(1858) at 4", "Insert StringLiteral: \" on bound=\"(1856) into InfixExpression: +(1858) at 5", "Insert SimpleName: boundAddress(1857) into InfixExpression: +(1858) at 6", "Insert SimpleName: IOException(1961) into SimpleType: IOException(1962) at 0", "Insert SimpleName: IOException(1967) into SimpleType: IOException(1968) at 0", "Insert StringLiteral: \"Failed (\"(1969) into InfixExpression: +(1978) at 0", "Insert MethodInvocation(1974) into InfixExpression: +(1978) at 1", "Insert StringLiteral: \")\"(1975) into InfixExpression: +(1978) at 2", "Insert StringLiteral: \" to signal establishing dynamic tunnel for local=\"(1976) into InfixExpression: +(1978) at 3", "Insert SimpleName: local(1977) into InfixExpression: +(1978) at 4", "Insert SimpleName: IOException(2170) into SimpleType: IOException(2171) at 0", "Insert SimpleName: IOException(2176) into SimpleType: IOException(2177) at 0", "Insert StringLiteral: \"Failed (\"(2178) into InfixExpression: +(2187) at 0", "Insert MethodInvocation(2183) into InfixExpression: +(2187) at 1", "Insert StringLiteral: \")\"(2184) into InfixExpression: +(2187) at 2", "Insert StringLiteral: \" to signal tearing down dynamic tunnel for address=\"(2185) into InfixExpression: +(2187) at 3", "Insert SimpleName: address(2186) into InfixExpression: +(2187) at 4", "Insert SimpleName: IOException(2285) into SimpleType: IOException(2286) at 0", "Insert SimpleName: IOException(2291) into SimpleType: IOException(2292) at 0", "Insert StringLiteral: \"Failed (\"(2293) into InfixExpression: +(2302) at 0", "Insert MethodInvocation(2298) into InfixExpression: +(2302) at 1", "Insert StringLiteral: \")\"(2299) into InfixExpression: +(2302) at 2", "Insert StringLiteral: \" to signal torn down dynamic tunnel for address=\"(2300) into InfixExpression: +(2302) at 3", "Insert SimpleName: address(2301) into InfixExpression: +(2302) at 4", "Insert SimpleName: IOException(2835) into SimpleType: IOException(2836) at 0", "Insert SimpleName: IOException(2841) into SimpleType: IOException(2842) at 0", "Insert StringLiteral: \"Failed (\"(2843) into InfixExpression: +(2856) at 0", "Insert MethodInvocation(2848) into InfixExpression: +(2856) at 1", "Insert StringLiteral: \")\"(2849) into InfixExpression: +(2856) at 2", "Insert StringLiteral: \" to signal establishing explicit tunnel for local=\"(2850) into InfixExpression: +(2856) at 3", "Insert SimpleName: local(2851) into InfixExpression: +(2856) at 4", "Insert StringLiteral: \", remote=\"(2852) into InfixExpression: +(2856) at 5", "Insert SimpleName: remote(2853) into InfixExpression: +(2856) at 6", "Insert StringLiteral: \", localForwarding=\"(2854) into InfixExpression: +(2856) at 7", "Insert SimpleName: localForwarding(2855) into InfixExpression: +(2856) at 8", "Insert SimpleName: IOException(2977) into SimpleType: IOException(2978) at 0", "Insert SimpleName: IOException(2983) into SimpleType: IOException(2984) at 0", "Insert StringLiteral: \"Failed (\"(2985) into InfixExpression: +(3000) at 0", "Insert MethodInvocation(2990) into InfixExpression: +(3000) at 1", "Insert StringLiteral: \")\"(2991) into InfixExpression: +(3000) at 2", "Insert StringLiteral: \" to signal established explicit tunnel for local=\"(2992) into InfixExpression: +(3000) at 3", "Insert SimpleName: local(2993) into InfixExpression: +(3000) at 4", "Insert StringLiteral: \", remote=\"(2994) into InfixExpression: +(3000) at 5", "Insert SimpleName: remote(2995) into InfixExpression: +(3000) at 6", "Insert StringLiteral: \", localForwarding=\"(2996) into InfixExpression: +(3000) at 7", "Insert SimpleName: localForwarding(2997) into InfixExpression: +(3000) at 8", "Insert StringLiteral: \", bound=\"(2998) into InfixExpression: +(3000) at 9", "Insert SimpleName: boundAddress(2999) into InfixExpression: +(3000) at 10", "Insert CastExpression(3328) into ParenthesizedExpression(3329) at 0", "Insert SimpleName: GenericUtils(3343) into MethodInvocation(3346) at 0", "Insert SimpleName: peelException(3344) into MethodInvocation(3346) at 1", "Insert SimpleName: t(3345) into MethodInvocation(3346) at 2", "Insert SimpleName: GenericUtils(3350) into MethodInvocation(3354) at 0", "Insert SimpleName: accumulateException(3351) into MethodInvocation(3354) at 1", "Insert SimpleName: err(3352) into MethodInvocation(3354) at 2", "Insert SimpleName: e(3353) into MethodInvocation(3354) at 3", "Insert MethodInvocation(1387) into MethodInvocation(1389) at 0", "Insert SimpleName: getSimpleName(1388) into MethodInvocation(1389) at 1", "Insert MethodInvocation(1512) into MethodInvocation(1514) at 0", "Insert SimpleName: getSimpleName(1513) into MethodInvocation(1514) at 1", "Insert MethodInvocation(1850) into MethodInvocation(1852) at 0", "Insert SimpleName: getSimpleName(1851) into MethodInvocation(1852) at 1", "Insert MethodInvocation(1972) into MethodInvocation(1974) at 0", "Insert SimpleName: getSimpleName(1973) into MethodInvocation(1974) at 1", "Insert MethodInvocation(2181) into MethodInvocation(2183) at 0", "Insert SimpleName: getSimpleName(2182) into MethodInvocation(2183) at 1", "Insert MethodInvocation(2296) into MethodInvocation(2298) at 0", "Insert SimpleName: getSimpleName(2297) into MethodInvocation(2298) at 1", "Insert MethodInvocation(2846) into MethodInvocation(2848) at 0", "Insert SimpleName: getSimpleName(2847) into MethodInvocation(2848) at 1", "Insert MethodInvocation(2988) into MethodInvocation(2990) at 0", "Insert SimpleName: getSimpleName(2989) into MethodInvocation(2990) at 1", "Insert SimpleType: PortForwardingEventListenerManagerHolder(3326) into CastExpression(3328) at 0", "Insert SimpleName: m(3327) into CastExpression(3328) at 1", "Insert SimpleName: t(1385) into MethodInvocation(1387) at 0", "Insert SimpleName: getClass(1386) into MethodInvocation(1387) at 1", "Insert SimpleName: t(1510) into MethodInvocation(1512) at 0", "Insert SimpleName: getClass(1511) into MethodInvocation(1512) at 1", "Insert SimpleName: t(1848) into MethodInvocation(1850) at 0", "Insert SimpleName: getClass(1849) into MethodInvocation(1850) at 1", "Insert SimpleName: t(1970) into MethodInvocation(1972) at 0", "Insert SimpleName: getClass(1971) into MethodInvocation(1972) at 1", "Insert SimpleName: t(2179) into MethodInvocation(2181) at 0", "Insert SimpleName: getClass(2180) into MethodInvocation(2181) at 1", "Insert SimpleName: t(2294) into MethodInvocation(2296) at 0", "Insert SimpleName: getClass(2295) into MethodInvocation(2296) at 1", "Insert SimpleName: t(2844) into MethodInvocation(2846) at 0", "Insert SimpleName: getClass(2845) into MethodInvocation(2846) at 1", "Insert SimpleName: t(2986) into MethodInvocation(2988) at 0", "Insert SimpleName: getClass(2987) into MethodInvocation(2988) at 1", "Insert SimpleName: PortForwardingEventListenerManagerHolder(3325) into SimpleType: PortForwardingEventListenerManagerHolder(3326) at 0", "Delete SimpleName: EventListenerUtils(256)", "Delete SimpleName: synchronizedListenersSet(257)", "Delete MethodInvocation(258)", "Delete StringLiteral: \"No listener to add\"(344)", "Delete SimpleName: listener(460)", "Delete VariableDeclarationFragment(463)", "Delete VariableDeclarationStatement(464)", "Delete SimpleName: listener(465)", "Delete SimpleName: getSession(467)", "Delete MethodInvocation(468)", "Delete SimpleName: listener(547)", "Delete SimpleName: getSession(549)", "Delete MethodInvocation(550)", "Delete SimpleName: listener(591)", "Delete SimpleName: getSession(593)", "Delete MethodInvocation(594)", "Delete SimpleName: PortForwardingEventListener(681)", "Delete SimpleType: PortForwardingEventListener(682)", "Delete SimpleName: listener(683)", "Delete SimpleName: getPortForwardingEventListenerProxy(684)", "Delete MethodInvocation(685)", "Delete VariableDeclarationFragment(686)", "Delete VariableDeclarationStatement(687)", "Delete SimpleName: listener(688)", "Delete SimpleName: getSession(690)", "Delete MethodInvocation(691)", "Delete SimpleName: listener(708)", "Delete SimpleName: getSession(710)", "Delete MethodInvocation(711)", "Delete SimpleName: listener(722)", "Delete SimpleName: getSession(724)", "Delete MethodInvocation(725)", "Delete SimpleName: listener(856)", "Delete SimpleName: getPortForwardingEventListenerProxy(857)", "Delete MethodInvocation(858)", "Delete VariableDeclarationFragment(859)", "Delete VariableDeclarationStatement(860)", "Delete SimpleName: listener(861)", "Delete SimpleName: getSession(863)", "Delete MethodInvocation(864)", "Delete SimpleName: listener(964)", "Delete SimpleName: session(966)", "Delete SimpleName: listener(1005)", "Delete SimpleName: getSession(1007)", "Delete MethodInvocation(1008)", "Delete SimpleName: listener(1136)", "Delete SimpleName: getPortForwardingEventListenerProxy(1137)", "Delete MethodInvocation(1138)", "Delete VariableDeclarationFragment(1139)", "Delete VariableDeclarationStatement(1140)", "Delete SimpleName: listener(1141)", "Delete SimpleName: getSession(1143)", "Delete MethodInvocation(1144)", "Delete SimpleName: listener(1162)", "Delete SimpleName: getSession(1164)", "Delete MethodInvocation(1165)", "Delete SimpleName: listener(1176)", "Delete SimpleName: getSession(1178)", "Delete MethodInvocation(1179)", "Delete SimpleName: listener(1276)", "Delete MethodInvocation(1278)", "Delete VariableDeclarationFragment(1279)", "Delete VariableDeclarationStatement(1280)", "Delete SimpleName: listener(1356)", "Delete SimpleName: getSession(1358)", "Delete MethodInvocation(1359)", "Delete SimpleName: listener(1396)", "Delete SimpleName: listener(1473)", "Delete MethodInvocation(1475)", "Delete VariableDeclarationFragment(1476)", "Delete VariableDeclarationStatement(1477)", "Delete Block(1522)", "Delete IfStatement(1537)", "Delete Block(1538)", "Delete MethodDeclaration(1539)", "Delete SimpleName: listener(1699)", "Delete SimpleName: getPortForwardingEventListenerProxy(1700)", "Delete MethodInvocation(1701)", "Delete VariableDeclarationFragment(1702)", "Delete VariableDeclarationStatement(1703)", "Delete SimpleName: listener(1704)", "Delete SimpleName: getSession(1706)", "Delete MethodInvocation(1707)", "Delete SimpleName: listener(1819)", "Delete SimpleName: listener(1835)", "Delete SimpleName: listener(1931)", "Delete SimpleName: getPortForwardingEventListenerProxy(1932)", "Delete MethodInvocation(1933)", "Delete VariableDeclarationFragment(1934)", "Delete VariableDeclarationStatement(1935)", "Delete SimpleName: listener(1936)", "Delete SimpleName: listener(1956)", "Delete SimpleName: listener(1970)", "Delete MethodInvocation(1504)", "Delete Block(1511)", "Delete CatchClause(1512)", "Delete NullLiteral(1519)"]}}, {"DefaultTcpipForwarderFactory_cluster": {"actions": [{"root": "UPDATE from java.util.Objects to java.util.concurrent.CopyOnWriteArraySet", "operations": ["UPD QualifiedName: java.util.Objects from java.util.Objects to java.util.concurrent.CopyOnWriteArraySet"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0", "INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 2", "operations": ["INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: PortForwardingEventListener to MethodDeclaration at 2", "INS Block to MethodDeclaration at 4", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS QualifiedName: PortForwardingEventListener.EMPTY to ReturnStatement at 0", "INS SimpleName: getPortForwardingEventListenerProxy to MethodDeclaration at 3", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: validateListener to MethodInvocation at 1", "INS SimpleName: PortForwardingEventListener to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from addPortForwardingEventListener to addPortForwardingEventListenerManager", "operations": ["UPD SimpleName: addPortForwardingEventListener from addPortForwardingEventListener to addPortForwardingEventListenerManager"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "UPDATE from Objects to PortForwardingEventListener", "operations": ["UPD SimpleName: Objects from Objects to PortForwardingEventListener"]}, {"root": "UPDATE from requireNonNull to validateListener", "operations": ["UPD SimpleName: requireNonNull from requireNonNull to validateListener"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: listener to MethodInvocation at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: EventListenerUtils", "DEL MethodInvocation", "DEL SimpleName: synchronizedListenersSet"]}, {"root": "DEL StringLiteral: \"No listener to add\"", "operations": ["DEL StringLiteral: \"No listener to add\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getPortForwardingEventListenerProxy"]}]}}, {"DefaultTcpipForwarderFactory_diff": {"operations": ["Update QualifiedName: java.util.Objects(4) to java.util.concurrent.CopyOnWriteArraySet", "Insert ClassInstanceCreation(95) into VariableDeclarationFragment(96) at 1", "Insert ParameterizedType: CopyOnWriteArraySet<>(94) into ClassInstanceCreation(95) at 0", "Insert MethodDeclaration(79) into AnonymousClassDeclaration(80) at 2", "Insert SimpleType: CopyOnWriteArraySet(93) into ParameterizedType: CopyOnWriteArraySet<>(94) at 0", "Insert MethodInvocation(172) into MethodInvocation(173) at 2", "Update SimpleName: addPortForwardingEventListener(184) to addPortForwardingEventListenerManager", "Insert ThisExpression(198) into MethodInvocation(199) at 2", "Insert MarkerAnnotation(71) into MethodDeclaration(79) at 0", "Insert Modifier: public(72) into MethodDeclaration(79) at 1", "Insert SimpleType: PortForwardingEventListener(74) into MethodDeclaration(79) at 2", "Insert SimpleName: getPortForwardingEventListenerProxy(75) into MethodDeclaration(79) at 3", "Insert Block(78) into MethodDeclaration(79) at 4", "Insert SimpleName: CopyOnWriteArraySet(92) into SimpleType: CopyOnWriteArraySet(93) at 0", "Update SimpleName: Objects(133) to PortForwardingEventListener", "Update SimpleName: requireNonNull(134) to validateListener", "Insert SimpleName: PortForwardingEventListener(169) into MethodInvocation(172) at 0", "Insert SimpleName: validateListener(170) into MethodInvocation(172) at 1", "Move SimpleName: listener(159) into MethodInvocation(172) at 2", "Insert SimpleName: Override(70) into MarkerAnnotation(71) at 0", "Insert SimpleName: PortForwardingEventListener(73) into SimpleType: PortForwardingEventListener(74) at 0", "Insert ReturnStatement(77) into Block(78) at 0", "Insert QualifiedName: PortForwardingEventListener.EMPTY(76) into ReturnStatement(77) at 0", "Delete SimpleName: EventListenerUtils(82)", "Delete SimpleName: synchronizedListenersSet(83)", "Delete MethodInvocation(84)", "Delete StringLiteral: \"No listener to add\"(136)", "Delete SimpleName: getPortForwardingEventListenerProxy(185)", "Delete MethodInvocation(186)"]}}, {"PortForwardingEventListener_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 13", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS SimpleType: PortForwardingEventListener to TypeParameter at 1", "INS SimpleName: validateListener to MethodDeclaration at 3", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS TypeParameter to MethodDeclaration at 1", "INS TypeLiteral to MethodInvocation at 0", "INS SimpleType: L to SingleVariableDeclaration at 0", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleName: listener to MethodInvocation at 2", "INS SimpleType: L to MethodDeclaration at 2", "INS MethodInvocation to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: interface at 13", "INS Modifier: static to MethodDeclaration at 0", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: SshdEventListener to MethodInvocation at 0", "INS SimpleType: PortForwardingEventListener to TypeLiteral at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: L to TypeParameter at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleName: validateListener to MethodInvocation at 1"]}]}}, {"PortForwardingEventListener_diff": {"operations": ["Insert MethodDeclaration(419) into TypeDeclaration: interface(420) at 13", "Insert Modifier: static(396) into MethodDeclaration(419) at 0", "Insert TypeParameter(400) into MethodDeclaration(419) at 1", "Insert SimpleType: L(402) into MethodDeclaration(419) at 2", "Insert SimpleName: validateListener(403) into MethodDeclaration(419) at 3", "Insert SingleVariableDeclaration(407) into MethodDeclaration(419) at 4", "Insert Block(418) into MethodDeclaration(419) at 5", "Insert SimpleName: L(397) into TypeParameter(400) at 0", "Insert SimpleType: PortForwardingEventListener(399) into TypeParameter(400) at 1", "Insert SimpleName: L(401) into SimpleType: L(402) at 0", "Insert SimpleType: L(405) into SingleVariableDeclaration(407) at 0", "Insert SimpleName: listener(406) into SingleVariableDeclaration(407) at 1", "Insert ReturnStatement(417) into Block(418) at 0", "Insert SimpleName: PortForwardingEventListener(398) into SimpleType: PortForwardingEventListener(399) at 0", "Insert SimpleName: L(404) into SimpleType: L(405) at 0", "Insert MethodInvocation(416) into ReturnStatement(417) at 0", "Insert SimpleName: SshdEventListener(408) into MethodInvocation(416) at 0", "Insert SimpleName: validateListener(409) into MethodInvocation(416) at 1", "Insert SimpleName: listener(410) into MethodInvocation(416) at 2", "Insert MethodInvocation(415) into MethodInvocation(416) at 3", "Insert TypeLiteral(413) into MethodInvocation(415) at 0", "Insert SimpleName: getSimpleName(414) into MethodInvocation(415) at 1", "Insert SimpleType: PortForwardingEventListener(412) into TypeLiteral(413) at 0", "Insert SimpleName: PortForwardingEventListener(411) into SimpleType: PortForwardingEventListener(412) at 0"]}}, {"TcpipForwarder_cluster": {"actions": [{"root": "INS SimpleType: PortForwardingEventListenerManagerHolder to TypeDeclaration: interface at 4", "operations": ["INS SimpleType: PortForwardingEventListenerManagerHolder to TypeDeclaration: interface at 4", "INS SimpleName: PortForwardingEventListenerManagerHolder to SimpleType: PortForwardingEventListenerManagerHolder at 0"]}]}}, {"TcpipForwarder_diff": {"operations": ["Insert SimpleType: PortForwardingEventListenerManagerHolder(15) into TypeDeclaration: interface(81) at 4", "Insert SimpleName: PortForwardingEventListenerManagerHolder(14) into SimpleType: PortForwardingEventListenerManagerHolder(15) at 0"]}}, {"ScpTransferEventListener_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 10", "operations": ["INS SimpleName: L to TypeParameter at 0", "INS SimpleType: L to SingleVariableDeclaration at 0", "INS SimpleName: SshdEventListener to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: ScpTransferEventListener to TypeLiteral at 0", "INS SimpleType: ScpTransferEventListener to TypeParameter at 1", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS TypeLiteral to MethodInvocation at 0", "INS SimpleName: ScpTransferEventListener to SimpleType: ScpTransferEventListener at 0", "INS SimpleName: validateListener to MethodDeclaration at 3", "INS SimpleName: L to SimpleType: L at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: ScpTransferEventListener to SimpleType: ScpTransferEventListener at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: L to SimpleType: L at 0", "INS TypeParameter to MethodDeclaration at 1", "INS SimpleType: L to MethodDeclaration at 2", "INS SimpleName: validateListener to MethodInvocation at 1", "INS Modifier: static to MethodDeclaration at 0", "INS SimpleName: listener to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: interface at 10", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS Block to MethodDeclaration at 5"]}]}}, {"ScpTransferEventListener_diff": {"operations": ["Insert MethodDeclaration(293) into TypeDeclaration: interface(294) at 10", "Insert Modifier: static(270) into MethodDeclaration(293) at 0", "Insert TypeParameter(274) into MethodDeclaration(293) at 1", "Insert SimpleType: L(276) into MethodDeclaration(293) at 2", "Insert SimpleName: validateListener(277) into MethodDeclaration(293) at 3", "Insert SingleVariableDeclaration(281) into MethodDeclaration(293) at 4", "Insert Block(292) into MethodDeclaration(293) at 5", "Insert SimpleName: L(271) into TypeParameter(274) at 0", "Insert SimpleType: ScpTransferEventListener(273) into TypeParameter(274) at 1", "Insert SimpleName: L(275) into SimpleType: L(276) at 0", "Insert SimpleType: L(279) into SingleVariableDeclaration(281) at 0", "Insert SimpleName: listener(280) into SingleVariableDeclaration(281) at 1", "Insert ReturnStatement(291) into Block(292) at 0", "Insert SimpleName: ScpTransferEventListener(272) into SimpleType: ScpTransferEventListener(273) at 0", "Insert SimpleName: L(278) into SimpleType: L(279) at 0", "Insert MethodInvocation(290) into ReturnStatement(291) at 0", "Insert SimpleName: SshdEventListener(282) into MethodInvocation(290) at 0", "Insert SimpleName: validateListener(283) into MethodInvocation(290) at 1", "Insert SimpleName: listener(284) into MethodInvocation(290) at 2", "Insert MethodInvocation(289) into MethodInvocation(290) at 3", "Insert TypeLiteral(287) into MethodInvocation(289) at 0", "Insert SimpleName: getSimpleName(288) into MethodInvocation(289) at 1", "Insert SimpleType: ScpTransferEventListener(286) into TypeLiteral(287) at 0", "Insert SimpleName: ScpTransferEventListener(285) into SimpleType: ScpTransferEventListener(286) at 0"]}}, {"AbstractConnectionServiceFactory_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: java.util.concurrent.CopyOnWriteArraySet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0", "INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: synchronizedListenersSet", "DEL SimpleName: EventListenerUtils"]}]}}, {"AbstractConnectionServiceFactory_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(118) at 3", "Insert QualifiedName: java.util.concurrent.CopyOnWriteArraySet(6) into ImportDeclaration(7) at 0", "Insert ClassInstanceCreation(37) into VariableDeclarationFragment(38) at 1", "Insert ParameterizedType: CopyOnWriteArraySet<>(36) into ClassInstanceCreation(37) at 0", "Insert SimpleType: CopyOnWriteArraySet(35) into ParameterizedType: CopyOnWriteArraySet<>(36) at 0", "Insert SimpleName: CopyOnWriteArraySet(34) into SimpleType: CopyOnWriteArraySet(35) at 0", "Delete SimpleName: EventListenerUtils(32)", "Delete SimpleName: synchronizedListenersSet(33)", "Delete MethodInvocation(34)"]}}, {"ConnectionService_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: org.apache.sshd.common.forward.PortForwardingEventListenerManagerHolder to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS SimpleType: PortForwardingEventListenerManagerHolder to TypeDeclaration: interface at 5", "operations": ["INS SimpleName: PortForwardingEventListenerManagerHolder to SimpleType: PortForwardingEventListenerManagerHolder at 0", "INS SimpleType: PortForwardingEventListenerManagerHolder to TypeDeclaration: interface at 5"]}]}}, {"ConnectionService_diff": {"operations": ["Insert ImportDeclaration(13) into CompilationUnit(99) at 6", "Insert QualifiedName: org.apache.sshd.common.forward.PortForwardingEventListenerManagerHolder(12) into ImportDeclaration(13) at 0", "Insert SimpleType: PortForwardingEventListenerManagerHolder(30) into TypeDeclaration: interface(98) at 5", "Insert SimpleName: PortForwardingEventListenerManagerHolder(29) into SimpleType: PortForwardingEventListenerManagerHolder(30) at 0"]}}, {"SessionListener_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 11", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: validateListener to MethodInvocation at 1", "INS SimpleType: L to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleType: SessionListener to TypeLiteral at 0", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS TypeParameter to MethodDeclaration at 1", "INS Modifier: static to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: L to MethodDeclaration at 2", "INS SimpleName: validateListener to MethodDeclaration at 3", "INS TypeLiteral to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: SshdEventListener to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: interface at 11", "INS SimpleType: SessionListener to TypeParameter at 1", "INS SimpleName: L to TypeParameter at 0", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleName: SessionListener to SimpleType: SessionListener at 0", "INS SimpleName: listener to MethodInvocation at 2", "INS SimpleName: SessionListener to SimpleType: SessionListener at 0", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleName: L to SimpleType: L at 0"]}]}}, {"SessionListener_diff": {"operations": ["Insert MethodDeclaration(247) into TypeDeclaration: interface(248) at 11", "Insert Modifier: static(224) into MethodDeclaration(247) at 0", "Insert TypeParameter(228) into MethodDeclaration(247) at 1", "Insert SimpleType: L(230) into MethodDeclaration(247) at 2", "Insert SimpleName: validateListener(231) into MethodDeclaration(247) at 3", "Insert SingleVariableDeclaration(235) into MethodDeclaration(247) at 4", "Insert Block(246) into MethodDeclaration(247) at 5", "Insert SimpleName: L(225) into TypeParameter(228) at 0", "Insert SimpleType: SessionListener(227) into TypeParameter(228) at 1", "Insert SimpleName: L(229) into SimpleType: L(230) at 0", "Insert SimpleType: L(233) into SingleVariableDeclaration(235) at 0", "Insert SimpleName: listener(234) into SingleVariableDeclaration(235) at 1", "Insert ReturnStatement(245) into Block(246) at 0", "Insert SimpleName: SessionListener(226) into SimpleType: SessionListener(227) at 0", "Insert SimpleName: L(232) into SimpleType: L(233) at 0", "Insert MethodInvocation(244) into ReturnStatement(245) at 0", "Insert SimpleName: SshdEventListener(236) into MethodInvocation(244) at 0", "Insert SimpleName: validateListener(237) into MethodInvocation(244) at 1", "Insert SimpleName: listener(238) into MethodInvocation(244) at 2", "Insert MethodInvocation(243) into MethodInvocation(244) at 3", "Insert TypeLiteral(241) into MethodInvocation(243) at 0", "Insert SimpleName: getSimpleName(242) into MethodInvocation(243) at 1", "Insert SimpleType: SessionListener(240) into TypeLiteral(241) at 0", "Insert SimpleName: SessionListener(239) into SimpleType: SessionListener(240) at 0"]}}, {"AbstractServerChannel_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 2"]}, {"root": "UPDATE from ChannelListener to String", "operations": ["UPD SimpleName: ChannelListener from ChannelListener to String", "UPD SimpleType: ChannelListener from ChannelListener to String"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: changeEvent to Assignment: = at 0"]}, {"root": "INS Block to TryStatement at 2", "operations": ["INS Block to TryStatement at 2"]}, {"root": "INS SimpleName: changeEvent to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: changeEvent to VariableDeclarationFragment at 0"]}, {"root": "INS StringLiteral: \"doInit\" to VariableDeclarationFragment at 1", "operations": ["INS StringLiteral: \"doInit\" to VariableDeclarationFragment at 1"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from channelOpenSuccess to signalChannelOpenSuccess", "operations": ["UPD SimpleName: channelOpenSuccess from channelOpenSuccess to signalChannelOpenSuccess"]}, {"root": "UPDATE from ignored to notifyStateChanged", "operations": ["UPD SimpleName: ignored from ignored to notifyStateChanged"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ignored to MethodInvocation at 0", "MOV SimpleName: getClass to MethodInvocation at 1"]}, {"root": "UPDATE from getClass to changeEvent", "operations": ["UPD SimpleName: getClass from getClass to changeEvent"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from channelOpenFailure to signalChannelOpenFailure", "operations": ["UPD SimpleName: channelOpenFailure from channelOpenFailure to signalChannelOpenFailure"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.sshd.common.channel.ChannelListener", "DEL ImportDeclaration"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getChannelListenerProxy"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSimpleName", "DEL ThisExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"doInit({}) failed ({}) to inform listener of open failure={}: {}\"", "DEL MethodInvocation", "DEL SimpleName: warn", "DEL SimpleName: getMessage", "DEL SimpleName: log", "DEL SimpleName: ignored"]}, {"root": "DEL CatchClause", "operations": ["DEL SimpleName: isTraceEnabled", "DEL Block", "DEL SimpleName: suppressed", "DEL SimpleName: length", "DEL Block", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: log", "DEL MethodInvocation", "DEL SimpleType: Throwable", "DEL TryStatement", "DEL SimpleName: Throwable", "DEL SimpleName: err", "DEL SimpleName: suppressed", "DEL Block", "DEL SingleVariableDeclaration", "DEL ThisExpression", "DEL VariableDeclarationStatement", "DEL CatchClause", "DEL SimpleName: err", "DEL SimpleName: suppressed", "DEL SimpleName: getSuppressed", "DEL Block", "DEL SimpleType: Throwable", "DEL SimpleName: debug", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: ignored", "DEL ArrayType: Throwable[]", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleName: Throwable", "DEL SimpleType: Throwable", "DEL SimpleName: GenericUtils", "DEL SimpleName: s", "DEL SimpleName: log", "DEL IfStatement", "DEL StringLiteral: \") suppressed channel open failure signalling\"", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: peelException", "DEL EnhancedForStatement", "DEL SimpleName: Throwable", "DEL SimpleName: log", "DEL Block", "DEL StringLiteral: \") listener inform failure details\"", "DEL StringLiteral: \"doInit(\"", "DEL InfixExpression: +", "DEL SimpleName: ignored", "DEL SimpleName: ignored", "DEL SingleVariableDeclaration", "DEL Block", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: isDebugEnabled", "DEL ThisExpression", "DEL SimpleName: s", "DEL CatchClause", "DEL SimpleName: Throwable", "DEL SimpleName: GenericUtils", "DEL SimpleType: Throwable", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL StringLiteral: \"doInit(\"", "DEL MethodInvocation", "DEL SimpleName: trace", "DEL SimpleName: log"]}]}}, {"AbstractServerChannel_diff": {"operations": ["Move VariableDeclarationStatement(255) into Block(310) at 2", "Update SimpleType: ChannelListener(250) to String", "Insert CatchClause(301) into TryStatement(307) at 1", "Insert Block(306) into TryStatement(307) at 2", "Update SimpleName: ChannelListener(249) to String", "Insert SimpleName: changeEvent(258) into VariableDeclarationFragment(260) at 0", "Insert StringLiteral: \"doInit\"(259) into VariableDeclarationFragment(260) at 1", "Move SingleVariableDeclaration(278) into CatchClause(301) at 0", "Insert Block(300) into CatchClause(301) at 1", "Move ExpressionStatement(326) into Block(306) at 0", "Move VariableDeclarationStatement(287) into Block(300) at 0", "Insert ExpressionStatement(290) into Block(300) at 1", "Move ExpressionStatement(293) into Block(300) at 2", "Move ExpressionStatement(387) into Block(300) at 3", "Insert MethodInvocation(304) into ExpressionStatement(305) at 0", "Update SimpleName: channelOpenSuccess(266) to signalChannelOpenSuccess", "Insert Assignment: =(289) into ExpressionStatement(290) at 0", "Update SimpleName: ignored(312) to notifyStateChanged", "Move SimpleName: ignored(312) into MethodInvocation(304) at 0", "Update SimpleName: getClass(313) to changeEvent", "Move SimpleName: getClass(313) into MethodInvocation(304) at 1", "Insert SimpleName: changeEvent(283) into Assignment: =(289) at 0", "Move MethodInvocation(321) into Assignment: =(289) at 1", "Update SimpleName: channelOpenFailure(289) to signalChannelOpenFailure", "Delete QualifiedName: org.apache.sshd.common.channel.ChannelListener(24)", "Delete ImportDeclaration(25)", "Delete SimpleName: listener(251)", "Delete SimpleName: getChannelListenerProxy(252)", "Delete MethodInvocation(253)", "Delete SimpleName: listener(265)", "Delete ThisExpression(267)", "Delete SimpleName: listener(288)", "Delete ThisExpression(290)", "Delete SimpleName: log(308)", "Delete SimpleName: warn(309)", "Delete StringLiteral: \"doInit({}) failed ({}) to inform listener of open failure={}: {}\"(310)", "Delete ThisExpression(311)", "Delete MethodInvocation(314)", "Delete SimpleName: getSimpleName(315)", "Delete MethodInvocation(316)", "Delete SimpleName: ignored(322)", "Delete SimpleName: getMessage(323)", "Delete MethodInvocation(324)", "Delete MethodInvocation(325)", "Delete Block(294)", "Delete SimpleName: Throwable(295)", "Delete SimpleType: Throwable(296)", "Delete SimpleName: err(297)", "Delete SingleVariableDeclaration(298)", "Delete SimpleName: Throwable(299)", "Delete SimpleType: Throwable(300)", "Delete SimpleName: ignored(301)", "Delete SimpleName: GenericUtils(302)", "Delete SimpleName: peelException(303)", "Delete SimpleName: err(304)", "Delete MethodInvocation(305)", "Delete VariableDeclarationFragment(306)", "Delete VariableDeclarationStatement(307)", "Delete SimpleName: log(327)", "Delete SimpleName: isDebugEnabled(328)", "Delete MethodInvocation(329)", "Delete SimpleName: log(330)", "Delete SimpleName: debug(331)", "Delete StringLiteral: \"doInit(\"(332)", "Delete ThisExpression(333)", "Delete StringLiteral: \") listener inform failure details\"(334)", "Delete InfixExpression: +(335)", "Delete SimpleName: ignored(336)", "Delete MethodInvocation(337)", "Delete ExpressionStatement(338)", "Delete Block(339)", "Delete IfStatement(340)", "Delete SimpleName: log(341)", "Delete SimpleName: isTraceEnabled(342)", "Delete MethodInvocation(343)", "Delete SimpleName: Throwable(344)", "Delete SimpleType: Throwable(345)", "Delete Dimension(346)", "Delete ArrayType: Throwable[](347)", "Delete SimpleName: suppressed(348)", "Delete SimpleName: ignored(349)", "Delete SimpleName: getSuppressed(350)", "Delete MethodInvocation(351)", "Delete VariableDeclarationFragment(352)", "Delete VariableDeclarationStatement(353)", "Delete SimpleName: GenericUtils(354)", "Delete SimpleName: length(355)", "Delete SimpleName: suppressed(356)", "Delete MethodInvocation(357)", "Delete NumberLiteral: 0(358)", "Delete InfixExpression: >(359)", "Delete SimpleName: Throwable(360)", "Delete SimpleType: Throwable(361)", "Delete SimpleName: s(362)", "Delete SingleVariableDeclaration(363)", "Delete SimpleName: suppressed(364)", "Delete SimpleName: log(365)", "Delete SimpleName: trace(366)", "Delete StringLiteral: \"doInit(\"(367)", "Delete ThisExpression(368)", "Delete StringLiteral: \") suppressed channel open failure signalling\"(369)", "Delete InfixExpression: +(370)", "Delete SimpleName: s(371)", "Delete MethodInvocation(372)", "Delete ExpressionStatement(373)", "Delete Block(374)", "Delete EnhancedForStatement(375)", "Delete Block(376)", "Delete IfStatement(377)", "Delete Block(378)", "Delete IfStatement(379)", "Delete Block(380)", "Delete CatchClause(381)", "Delete TryStatement(382)", "Delete Block(388)", "Delete CatchClause(389)"]}}, {"TcpipServerChannel_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from ChannelListener to String", "operations": ["UPD SimpleType: ChannelListener from ChannelListener to String", "UPD SimpleName: ChannelListener from ChannelListener to String"]}, {"root": "INS CatchClause to TryStatement at 1", "operations": ["INS SimpleName: changeEvent to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS CatchClause to TryStatement at 1", "INS Block to CatchClause at 1", "INS ExpressionStatement to Block at 1"]}, {"root": "INS Block to TryStatement at 2", "operations": ["INS Block to TryStatement at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from getClass to changeEvent", "operations": ["UPD SimpleName: getClass from getClass to changeEvent", "UPD SimpleName: listener from listener to changeEvent"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from channelOpenFailure to signalChannelOpenFailure", "operations": ["UPD SimpleName: channelOpenFailure from channelOpenFailure to signalChannelOpenFailure", "UPD SimpleName: channelOpenFailure from channelOpenFailure to signalChannelOpenFailure", "UPD SimpleName: channelOpenFailure from channelOpenFailure to signalChannelOpenFailure"]}, {"root": "UPDATE from ignored to notifyStateChanged", "operations": ["UPD SimpleName: ignored from ignored to notifyStateChanged", "UPD SimpleName: log from log to notifyStateChanged", "UPD SimpleName: ignored from ignored to notifyStateChanged"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ignored to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS TryStatement to Block at 2", "operations": ["INS Block to TryStatement at 1", "INS Block to TryStatement at 0", "INS TryStatement to Block at 2"]}, {"root": "UPDATE from getChannelListenerProxy to session", "operations": ["UPD SimpleName: getChannelListenerProxy from getChannelListenerProxy to session"]}, {"root": "INS SimpleName: toString to MethodInvocation at 1", "operations": ["INS SimpleName: toString to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from channelOpenSuccess to signalChannelOpenSuccess", "operations": ["UPD SimpleName: channelOpenSuccess from channelOpenSuccess to signalChannelOpenSuccess"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ignored to MethodInvocation at 0", "MOV SimpleName: getClass to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.sshd.common.channel.ChannelListener"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: ChannelListener", "DEL VariableDeclarationStatement", "DEL SimpleName: listener", "DEL SimpleType: ChannelListener", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: getChannelListenerProxy"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL SimpleName: trace", "operations": ["DEL SimpleName: trace"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL ThisExpression", "DEL InfixExpression: +", "DEL StringLiteral: \") suppressed channel open failure signalling\"", "DEL StringLiteral: \"handleChannelConnectResult(\""]}, {"root": "DEL SimpleName: s", "operations": ["DEL SimpleName: s"]}, {"root": "DEL TryStatement", "operations": ["DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: getSimpleName", "DEL SimpleName: log", "DEL NumberLiteral: 0", "DEL SimpleName: suppressed", "DEL MethodInvocation", "DEL ThisExpression", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: ignored", "DEL SimpleName: suppressed", "DEL SimpleName: Throwable", "DEL MethodInvocation", "DEL SimpleType: Throwable", "DEL Block", "DEL SimpleName: isTraceEnabled", "DEL SimpleName: debug", "DEL StringLiteral: \"handleChannelConnectResult({})[exception] failed ({}) to inform listener of open failure={}: {}\"", "DEL MethodInvocation", "DEL SimpleName: s", "DEL SimpleName: GenericUtils", "DEL TryStatement", "DEL SimpleName: ignored", "DEL SimpleName: log", "DEL Block", "DEL SimpleName: Throwable", "DEL IfStatement", "DEL InfixExpression: >", "DEL SimpleName: ignored", "DEL SimpleType: Throwable", "DEL SimpleName: getClass", "DEL SimpleName: err", "DEL ThisExpression", "DEL ArrayType: Throwable[]", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: isDebugEnabled", "DEL IfStatement", "DEL Dimension", "DEL SimpleName: peelException", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleType: Throwable", "DEL SimpleName: ignored", "DEL Block", "DEL EnhancedForStatement", "DEL InfixExpression: +", "DEL SimpleName: ignored", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleName: Throwable", "DEL SimpleName: suppressed", "DEL MethodInvocation", "DEL StringLiteral: \")[exception] listener exception details\"", "DEL Block", "DEL SimpleName: getMessage", "DEL SimpleName: log", "DEL SimpleName: warn", "DEL SimpleName: GenericUtils", "DEL SimpleName: err", "DEL VariableDeclarationStatement", "DEL SimpleName: log", "DEL StringLiteral: \"handleChannelConnectResult(\"", "DEL Block", "DEL SimpleName: length", "DEL SimpleName: Throwable", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleType: Throwable", "DEL IfStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: getSuppressed"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getSimpleName", "DEL SimpleName: getMessage", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ignored", "DEL SimpleName: warn", "DEL StringLiteral: \"handleChannelOpenSuccess({}) failed ({}) to inform listener of open failure={}: {}\"", "DEL SimpleName: log", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ThisExpression"]}, {"root": "DEL CatchClause", "operations": ["DEL SimpleType: Throwable", "DEL IfStatement", "DEL SimpleType: Throwable", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL CatchClause", "DEL SimpleName: GenericUtils", "DEL StringLiteral: \"handleChannelOpenSuccess(\"", "DEL SimpleName: Throwable", "DEL SimpleName: Throwable", "DEL IfStatement", "DEL Block", "DEL SimpleName: isTraceEnabled", "DEL InfixExpression: >", "DEL CatchClause", "DEL SimpleName: s", "DEL VariableDeclarationFragment", "DEL SimpleName: s", "DEL StringLiteral: \") suppressed channel open failure signalling\"", "DEL SimpleName: log", "DEL Dimension", "DEL StringLiteral: \"doInit(\"", "DEL MethodInvocation", "DEL SimpleName: peelException", "DEL ExpressionStatement", "DEL EnhancedForStatement", "DEL SimpleName: length", "DEL SimpleName: ignored", "DEL SimpleName: err", "DEL MethodInvocation", "DEL SimpleName: log", "DEL SimpleName: debug", "DEL SimpleName: Throwable", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL StringLiteral: \") listener inform failure details\"", "DEL SimpleName: isDebugEnabled", "DEL SingleVariableDeclaration", "DEL SimpleType: Throwable", "DEL IfStatement", "DEL Block", "DEL VariableDeclarationStatement", "DEL ArrayType: Throwable[]", "DEL MethodInvocation", "DEL SimpleName: log", "DEL SimpleName: err", "DEL SimpleName: getSuppressed", "DEL SimpleName: GenericUtils", "DEL VariableDeclarationFragment", "DEL ThisExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: suppressed", "DEL Block", "DEL SimpleName: trace", "DEL TryStatement", "DEL ThisExpression", "DEL SimpleName: suppressed", "DEL Block", "DEL Block", "DEL SimpleType: Throwable", "DEL MethodInvocation", "DEL SimpleName: ignored", "DEL SimpleName: Throwable", "DEL VariableDeclarationStatement", "DEL InfixExpression: +", "DEL Block", "DEL SimpleName: suppressed", "DEL ExpressionStatement", "DEL SimpleName: ignored", "DEL SimpleName: log", "DEL NumberLiteral: 0"]}, {"root": "DEL SimpleName: listener", "operations": ["DEL SimpleName: listener"]}, {"root": "DEL ThisExpression", "operations": ["DEL ThisExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: warn", "DEL MethodInvocation", "DEL SimpleName: getMessage", "DEL SimpleName: log", "DEL SimpleName: getSimpleName", "DEL SimpleName: ignored", "DEL MethodInvocation", "DEL StringLiteral: \"handleChannelOpenFailure({}) failed ({}) to inform listener of open failure={}: {}\"", "DEL SimpleName: getClass", "DEL MethodInvocation", "DEL ThisExpression", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: ChannelListener", "DEL VariableDeclarationFragment", "DEL SimpleType: ChannelListener", "DEL MethodInvocation", "DEL SimpleName: listener", "DEL SimpleName: getChannelListenerProxy", "DEL VariableDeclarationStatement"]}, {"root": "DEL TryStatement", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \") listener inform open failure details\"", "DEL VariableDeclarationStatement", "DEL SimpleName: log", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: ignored", "DEL SimpleName: GenericUtils", "DEL SimpleName: isTraceEnabled", "DEL VariableDeclarationStatement", "DEL SimpleName: Throwable", "DEL SimpleName: err", "DEL Block", "DEL InfixExpression: +", "DEL ArrayType: Throwable[]", "DEL SimpleType: Throwable", "DEL SimpleName: log", "DEL SimpleName: debug", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL ExpressionStatement", "DEL SimpleName: ignored", "DEL SimpleName: length", "DEL MethodInvocation", "DEL SimpleName: err", "DEL MethodInvocation", "DEL SimpleType: Throwable", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: log", "DEL SimpleName: suppressed", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: suppressed", "DEL IfStatement", "DEL SimpleName: ignored", "DEL IfStatement", "DEL SimpleName: trace", "DEL MethodInvocation", "DEL SimpleName: Throwable", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL SimpleType: Throwable", "DEL StringLiteral: \") suppressed channel open failure signalling\"", "DEL Block", "DEL TryStatement", "DEL IfStatement", "DEL SimpleName: peelException", "DEL SimpleName: log", "DEL SimpleName: isDebugEnabled", "DEL CatchClause", "DEL InfixExpression: >", "DEL SimpleName: s", "DEL StringLiteral: \"handleChannelOpenFailure(\"", "DEL SimpleName: s", "DEL ExpressionStatement", "DEL SimpleName: suppressed", "DEL SimpleName: Throwable", "DEL SimpleName: getSuppressed", "DEL SimpleType: Throwable", "DEL Block", "DEL StringLiteral: \"handleOpenChannelFailure(\"", "DEL ThisExpression", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: GenericUtils", "DEL InfixExpression: +", "DEL SimpleName: Throwable", "DEL ThisExpression", "DEL Block"]}]}}, {"TcpipServerChannel_diff": {"operations": ["Move ExpressionStatement(979) into Block(838) at 0", "Move ExpressionStatement(1012) into Block(838) at 1", "Update SimpleType: ChannelListener(822) to String", "Insert CatchClause(779) into TryStatement(785) at 1", "Insert Block(784) into TryStatement(785) at 2", "Insert MethodInvocation(809) into ExpressionStatement(810) at 0", "Update SimpleName: ChannelListener(821) to String", "Update SimpleName: listener(823) to changeEvent", "Move SingleVariableDeclaration(841) into CatchClause(779) at 0", "Insert Block(778) into CatchClause(779) at 1", "Move ExpressionStatement(889) into Block(784) at 0", "Update SimpleName: channelOpenFailure(975) to signalChannelOpenFailure", "Update SimpleName: ignored(998) to notifyStateChanged", "Move SimpleName: ignored(998) into MethodInvocation(809) at 0", "Move MethodInvocation(1007) into MethodInvocation(809) at 1", "Move ExpressionStatement(706) into Block(712) at 1", "Insert TryStatement(711) into Block(712) at 2", "Update SimpleName: getChannelListenerProxy(824) to session", "Insert SimpleName: toString(736) into MethodInvocation(737) at 1", "Move VariableDeclarationStatement(850) into Block(778) at 0", "Insert ExpressionStatement(768) into Block(778) at 1", "Move ExpressionStatement(856) into Block(778) at 2", "Move ExpressionStatement(800) into Block(778) at 3", "Insert MethodInvocation(782) into ExpressionStatement(783) at 0", "Insert Block(701) into TryStatement(711) at 0", "Insert Block(710) into TryStatement(711) at 1", "Update SimpleName: channelOpenSuccess(829) to signalChannelOpenSuccess", "Insert Assignment: =(767) into ExpressionStatement(768) at 0", "Update SimpleName: ignored(875) to notifyStateChanged", "Move SimpleName: ignored(875) into MethodInvocation(782) at 0", "Update SimpleName: getClass(876) to changeEvent", "Move SimpleName: getClass(876) into MethodInvocation(782) at 1", "Update SimpleName: channelOpenFailure(702) to signalChannelOpenFailure", "Move ExpressionStatement(950) into Block(701) at 0", "Move ExpressionStatement(786) into Block(710) at 0", "Insert SimpleName: changeEvent(761) into Assignment: =(767) at 0", "Move MethodInvocation(884) into Assignment: =(767) at 1", "Update SimpleName: channelOpenFailure(852) to signalChannelOpenFailure", "Update SimpleName: log(778) to notifyStateChanged", "Move MethodInvocation(734) into MethodInvocation(708) at 1", "Delete QualifiedName: org.apache.sshd.common.channel.ChannelListener(28)", "Delete ImportDeclaration(29)", "Delete SimpleName: ChannelListener(646)", "Delete SimpleType: ChannelListener(647)", "Delete SimpleName: listener(648)", "Delete SimpleName: getChannelListenerProxy(649)", "Delete MethodInvocation(650)", "Delete VariableDeclarationFragment(651)", "Delete VariableDeclarationStatement(652)", "Delete SimpleName: listener(701)", "Delete ThisExpression(703)", "Delete SimpleName: trace(779)", "Delete StringLiteral: \"handleChannelConnectResult(\"(780)", "Delete ThisExpression(781)", "Delete StringLiteral: \") suppressed channel open failure signalling\"(782)", "Delete InfixExpression: +(783)", "Delete SimpleName: s(784)", "Delete Block(707)", "Delete SimpleName: Throwable(708)", "Delete SimpleType: Throwable(709)", "Delete SimpleName: err(710)", "Delete SingleVariableDeclaration(711)", "Delete SimpleName: Throwable(712)", "Delete SimpleType: Throwable(713)", "Delete SimpleName: ignored(714)", "Delete SimpleName: GenericUtils(715)", "Delete SimpleName: peelException(716)", "Delete SimpleName: err(717)", "Delete MethodInvocation(718)", "Delete VariableDeclarationFragment(719)", "Delete VariableDeclarationStatement(720)", "Delete SimpleName: log(721)", "Delete SimpleName: warn(722)", "Delete StringLiteral: \"handleChannelConnectResult({})[exception] failed ({}) to inform listener of open failure={}: {}\"(723)", "Delete ThisExpression(724)", "Delete SimpleName: ignored(725)", "Delete SimpleName: getClass(726)", "Delete MethodInvocation(727)", "Delete SimpleName: getSimpleName(728)", "Delete MethodInvocation(729)", "Delete SimpleName: ignored(735)", "Delete SimpleName: getMessage(736)", "Delete MethodInvocation(737)", "Delete MethodInvocation(738)", "Delete ExpressionStatement(739)", "Delete SimpleName: log(740)", "Delete SimpleName: isDebugEnabled(741)", "Delete MethodInvocation(742)", "Delete SimpleName: log(743)", "Delete SimpleName: debug(744)", "Delete StringLiteral: \"handleChannelConnectResult(\"(745)", "Delete ThisExpression(746)", "Delete StringLiteral: \")[exception] listener exception details\"(747)", "Delete InfixExpression: +(748)", "Delete SimpleName: ignored(749)", "Delete MethodInvocation(750)", "Delete ExpressionStatement(751)", "Delete Block(752)", "Delete IfStatement(753)", "Delete SimpleName: log(754)", "Delete SimpleName: isTraceEnabled(755)", "Delete MethodInvocation(756)", "Delete SimpleName: Throwable(757)", "Delete SimpleType: Throwable(758)", "Delete Dimension(759)", "Delete ArrayType: Throwable[](760)", "Delete SimpleName: suppressed(761)", "Delete SimpleName: ignored(762)", "Delete SimpleName: getSuppressed(763)", "Delete MethodInvocation(764)", "Delete VariableDeclarationFragment(765)", "Delete VariableDeclarationStatement(766)", "Delete SimpleName: GenericUtils(767)", "Delete SimpleName: length(768)", "Delete SimpleName: suppressed(769)", "Delete MethodInvocation(770)", "Delete NumberLiteral: 0(771)", "Delete InfixExpression: >(772)", "Delete SimpleName: Throwable(773)", "Delete SimpleType: Throwable(774)", "Delete SimpleName: s(775)", "Delete SingleVariableDeclaration(776)", "Delete SimpleName: suppressed(777)", "Delete Block(787)", "Delete EnhancedForStatement(788)", "Delete Block(789)", "Delete IfStatement(790)", "Delete Block(791)", "Delete IfStatement(792)", "Delete Block(793)", "Delete CatchClause(794)", "Delete TryStatement(795)", "Delete SimpleName: listener(828)", "Delete ThisExpression(830)", "Delete SimpleName: listener(851)", "Delete ThisExpression(853)", "Delete SimpleName: log(871)", "Delete SimpleName: warn(872)", "Delete StringLiteral: \"handleChannelOpenSuccess({}) failed ({}) to inform listener of open failure={}: {}\"(873)", "Delete ThisExpression(874)", "Delete MethodInvocation(877)", "Delete SimpleName: getSimpleName(878)", "Delete MethodInvocation(879)", "Delete SimpleName: ignored(885)", "Delete SimpleName: getMessage(886)", "Delete MethodInvocation(887)", "Delete MethodInvocation(888)", "Delete Block(857)", "Delete SimpleName: Throwable(858)", "Delete SimpleType: Throwable(859)", "Delete SimpleName: err(860)", "Delete SingleVariableDeclaration(861)", "Delete SimpleName: Throwable(862)", "Delete SimpleType: Throwable(863)", "Delete SimpleName: ignored(864)", "Delete SimpleName: GenericUtils(865)", "Delete SimpleName: peelException(866)", "Delete SimpleName: err(867)", "Delete MethodInvocation(868)", "Delete VariableDeclarationFragment(869)", "Delete VariableDeclarationStatement(870)", "Delete SimpleName: log(890)", "Delete SimpleName: isDebugEnabled(891)", "Delete MethodInvocation(892)", "Delete SimpleName: log(893)", "Delete SimpleName: debug(894)", "Delete StringLiteral: \"doInit(\"(895)", "Delete ThisExpression(896)", "Delete StringLiteral: \") listener inform failure details\"(897)", "Delete InfixExpression: +(898)", "Delete SimpleName: ignored(899)", "Delete MethodInvocation(900)", "Delete ExpressionStatement(901)", "Delete Block(902)", "Delete IfStatement(903)", "Delete SimpleName: log(904)", "Delete SimpleName: isTraceEnabled(905)", "Delete MethodInvocation(906)", "Delete SimpleName: Throwable(907)", "Delete SimpleType: Throwable(908)", "Delete Dimension(909)", "Delete ArrayType: Throwable[](910)", "Delete SimpleName: suppressed(911)", "Delete SimpleName: ignored(912)", "Delete SimpleName: getSuppressed(913)", "Delete MethodInvocation(914)", "Delete VariableDeclarationFragment(915)", "Delete VariableDeclarationStatement(916)", "Delete SimpleName: GenericUtils(917)", "Delete SimpleName: length(918)", "Delete SimpleName: suppressed(919)", "Delete MethodInvocation(920)", "Delete NumberLiteral: 0(921)", "Delete InfixExpression: >(922)", "Delete SimpleName: Throwable(923)", "Delete SimpleType: Throwable(924)", "Delete SimpleName: s(925)", "Delete SingleVariableDeclaration(926)", "Delete SimpleName: suppressed(927)", "Delete SimpleName: log(928)", "Delete SimpleName: trace(929)", "Delete StringLiteral: \"handleChannelOpenSuccess(\"(930)", "Delete ThisExpression(931)", "Delete StringLiteral: \") suppressed channel open failure signalling\"(932)", "Delete InfixExpression: +(933)", "Delete SimpleName: s(934)", "Delete MethodInvocation(935)", "Delete ExpressionStatement(936)", "Delete Block(937)", "Delete EnhancedForStatement(938)", "Delete Block(939)", "Delete IfStatement(940)", "Delete Block(941)", "Delete IfStatement(942)", "Delete Block(943)", "Delete CatchClause(944)", "Delete TryStatement(945)", "Delete Block(951)", "Delete CatchClause(952)", "Delete SimpleName: listener(974)", "Delete ThisExpression(976)", "Delete SimpleName: log(994)", "Delete SimpleName: warn(995)", "Delete StringLiteral: \"handleChannelOpenFailure({}) failed ({}) to inform listener of open failure={}: {}\"(996)", "Delete ThisExpression(997)", "Delete SimpleName: getClass(999)", "Delete MethodInvocation(1000)", "Delete SimpleName: getSimpleName(1001)", "Delete MethodInvocation(1002)", "Delete SimpleName: ignored(1008)", "Delete SimpleName: getMessage(1009)", "Delete MethodInvocation(1010)", "Delete MethodInvocation(1011)", "Delete SimpleName: ChannelListener(967)", "Delete SimpleType: ChannelListener(968)", "Delete SimpleName: listener(969)", "Delete SimpleName: getChannelListenerProxy(970)", "Delete MethodInvocation(971)", "Delete VariableDeclarationFragment(972)", "Delete VariableDeclarationStatement(973)", "Delete Block(980)", "Delete SimpleName: Throwable(981)", "Delete SimpleType: Throwable(982)", "Delete SimpleName: err(983)", "Delete SingleVariableDeclaration(984)", "Delete SimpleName: Throwable(985)", "Delete SimpleType: Throwable(986)", "Delete SimpleName: ignored(987)", "Delete SimpleName: GenericUtils(988)", "Delete SimpleName: peelException(989)", "Delete SimpleName: err(990)", "Delete MethodInvocation(991)", "Delete VariableDeclarationFragment(992)", "Delete VariableDeclarationStatement(993)", "Delete SimpleName: log(1013)", "Delete SimpleName: isDebugEnabled(1014)", "Delete MethodInvocation(1015)", "Delete SimpleName: log(1016)", "Delete SimpleName: debug(1017)", "Delete StringLiteral: \"handleChannelOpenFailure(\"(1018)", "Delete ThisExpression(1019)", "Delete StringLiteral: \") listener inform open failure details\"(1020)", "Delete InfixExpression: +(1021)", "Delete SimpleName: ignored(1022)", "Delete MethodInvocation(1023)", "Delete ExpressionStatement(1024)", "Delete Block(1025)", "Delete IfStatement(1026)", "Delete SimpleName: log(1027)", "Delete SimpleName: isTraceEnabled(1028)", "Delete MethodInvocation(1029)", "Delete SimpleName: Throwable(1030)", "Delete SimpleType: Throwable(1031)", "Delete Dimension(1032)", "Delete ArrayType: Throwable[](1033)", "Delete SimpleName: suppressed(1034)", "Delete SimpleName: ignored(1035)", "Delete SimpleName: getSuppressed(1036)", "Delete MethodInvocation(1037)", "Delete VariableDeclarationFragment(1038)", "Delete VariableDeclarationStatement(1039)", "Delete SimpleName: GenericUtils(1040)", "Delete SimpleName: length(1041)", "Delete SimpleName: suppressed(1042)", "Delete MethodInvocation(1043)", "Delete NumberLiteral: 0(1044)", "Delete InfixExpression: >(1045)", "Delete SimpleName: Throwable(1046)", "Delete SimpleType: Throwable(1047)", "Delete SimpleName: s(1048)", "Delete SingleVariableDeclaration(1049)", "Delete SimpleName: suppressed(1050)", "Delete SimpleName: log(1051)", "Delete SimpleName: trace(1052)", "Delete StringLiteral: \"handleOpenChannelFailure(\"(1053)", "Delete ThisExpression(1054)", "Delete StringLiteral: \") suppressed channel open failure signalling\"(1055)", "Delete InfixExpression: +(1056)", "Delete SimpleName: s(1057)", "Delete MethodInvocation(1058)", "Delete ExpressionStatement(1059)", "Delete Block(1060)", "Delete EnhancedForStatement(1061)", "Delete Block(1062)", "Delete IfStatement(1063)", "Delete Block(1064)", "Delete IfStatement(1065)", "Delete Block(1066)", "Delete CatchClause(1067)", "Delete TryStatement(1068)"]}}, {"ScpCommandFactory_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: java.util.concurrent.CopyOnWriteArraySet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0"]}, {"root": "INS ClassInstanceCreation to Assignment: = at 1", "operations": ["INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0", "INS ClassInstanceCreation to Assignment: = at 1", "INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV FieldAccess to ClassInstanceCreation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: synchronizedListenersSet", "DEL MethodInvocation", "DEL SimpleName: EventListenerUtils"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: EventListenerUtils", "DEL SimpleName: synchronizedListenersSet"]}]}}, {"ScpCommandFactory_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(749) at 2", "Insert QualifiedName: java.util.concurrent.CopyOnWriteArraySet(4) into ImportDeclaration(5) at 0", "Insert ClassInstanceCreation(267) into VariableDeclarationFragment(268) at 1", "Insert ParameterizedType: CopyOnWriteArraySet<>(266) into ClassInstanceCreation(267) at 0", "Insert SimpleType: CopyOnWriteArraySet(265) into ParameterizedType: CopyOnWriteArraySet<>(266) at 0", "Insert SimpleName: CopyOnWriteArraySet(264) into SimpleType: CopyOnWriteArraySet(265) at 0", "Insert ClassInstanceCreation(714) into Assignment: =(715) at 1", "Insert ParameterizedType: CopyOnWriteArraySet<>(710) into ClassInstanceCreation(714) at 0", "Move FieldAccess(709) into ClassInstanceCreation(714) at 1", "Insert SimpleType: CopyOnWriteArraySet(709) into ParameterizedType: CopyOnWriteArraySet<>(710) at 0", "Insert SimpleName: CopyOnWriteArraySet(708) into SimpleType: CopyOnWriteArraySet(709) at 0", "Delete SimpleName: EventListenerUtils(262)", "Delete SimpleName: synchronizedListenersSet(263)", "Delete MethodInvocation(264)", "Delete SimpleName: EventListenerUtils(705)", "Delete SimpleName: synchronizedListenersSet(706)", "Delete MethodInvocation(710)"]}}, {"ServerConnectionServiceFactory_cluster": {"actions": [{"root": "INS MethodDeclaration to AnonymousClassDeclaration at 2", "operations": ["INS SimpleName: getPortForwardingEventListenerProxy to MethodDeclaration at 3", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: PortForwardingEventListener to MethodDeclaration at 2", "INS QualifiedName: PortForwardingEventListener.EMPTY to ReturnStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: PortForwardingEventListener to SimpleType: PortForwardingEventListener at 0"]}, {"root": "UPDATE from addPortForwardingEventListener to addPortForwardingEventListenerManager", "operations": ["UPD SimpleName: addPortForwardingEventListener from addPortForwardingEventListener to addPortForwardingEventListenerManager"]}, {"root": "INS ThisExpression to MethodInvocation at 2", "operations": ["INS ThisExpression to MethodInvocation at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getPortForwardingEventListenerProxy", "DEL MethodInvocation"]}]}}, {"ServerConnectionServiceFactory_diff": {"operations": ["Insert MethodDeclaration(80) into AnonymousClassDeclaration(81) at 2", "Update SimpleName: addPortForwardingEventListener(126) to addPortForwardingEventListenerManager", "Insert ThisExpression(137) into MethodInvocation(138) at 2", "Insert MarkerAnnotation(72) into MethodDeclaration(80) at 0", "Insert Modifier: public(73) into MethodDeclaration(80) at 1", "Insert SimpleType: PortForwardingEventListener(75) into MethodDeclaration(80) at 2", "Insert SimpleName: getPortForwardingEventListenerProxy(76) into MethodDeclaration(80) at 3", "Insert Block(79) into MethodDeclaration(80) at 4", "Insert SimpleName: Override(71) into MarkerAnnotation(72) at 0", "Insert SimpleName: PortForwardingEventListener(74) into SimpleType: PortForwardingEventListener(75) at 0", "Insert ReturnStatement(78) into Block(79) at 0", "Insert QualifiedName: PortForwardingEventListener.EMPTY(77) into ReturnStatement(78) at 0", "Delete SimpleName: getPortForwardingEventListenerProxy(127)", "Delete MethodInvocation(128)"]}}, {"ServerSessionImpl_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "MOVE from Block", "operations": ["MOV SuperConstructorInvocation to Block at 0", "MOV VariableDeclarationStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 3", "MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from log to signalSessionCreated", "operations": ["UPD SimpleName: log from log to signalSessionCreated"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.sshd.common.RuntimeSshException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.sshd.common.session.SessionListener"]}, {"root": "DEL SimpleName: debug", "operations": ["DEL SimpleName: debug"]}, {"root": "DEL StringLiteral: \"Server session created {}\"", "operations": ["DEL StringLiteral: \"Server session created {}\""]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: log", "DEL SimpleName: getClass", "DEL CatchClause", "DEL MethodInvocation", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ioSession", "DEL InstanceofExpression", "DEL ThrowStatement", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getSessionListenerProxy", "DEL Block", "DEL Block", "DEL SimpleName: e", "DEL SimpleName: e", "DEL IfStatement", "DEL ExpressionStatement", "DEL Block", "DEL StringLiteral: \"Failed ({}) to announce session={} created: {}\"", "DEL InfixExpression: +", "DEL StringLiteral: \" creation failure details\"", "DEL SimpleName: e", "DEL SimpleName: getMessage", "DEL SimpleName: log", "DEL MethodInvocation", "DEL SimpleType: Exception", "DEL Block", "DEL SimpleName: GenericUtils", "DEL SimpleName: e", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: listener", "DEL VariableDeclarationStatement", "DEL SimpleName: trace", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: t", "DEL SimpleName: debug", "DEL SimpleName: Throwable", "DEL SimpleName: log", "DEL SimpleName: getSimpleName", "DEL SimpleName: log", "DEL SimpleName: listener", "DEL SimpleName: peelException", "DEL VariableDeclarationFragment", "DEL SimpleType: Throwable", "DEL SimpleName: sessionCreated", "DEL SimpleName: isDebugEnabled", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: e", "DEL SimpleName: SessionListener", "DEL SimpleName: Exception", "DEL SimpleName: e", "DEL SimpleName: isDebugEnabled", "DEL SimpleName: e", "DEL SimpleType: Exception", "DEL SimpleName: RuntimeSshException", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL StringLiteral: \"Session=\"", "DEL TryStatement", "DEL SimpleName: ioSession", "DEL MethodInvocation", "DEL SimpleType: RuntimeSshException", "DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleType: SessionListener", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: Throwable", "DEL SimpleName: log", "DEL SimpleName: isTraceEnabled", "DEL SimpleType: Throwable", "DEL SimpleName: t", "DEL CastExpression", "DEL MethodInvocation"]}]}}, {"ServerSessionImpl_diff": {"operations": ["Insert Block(66) into MethodDeclaration(67) at 5", "Move SuperConstructorInvocation(39) into Block(66) at 0", "Move ExpressionStatement(48) into Block(66) at 1", "Move VariableDeclarationStatement(139) into Block(66) at 2", "Move VariableDeclarationStatement(151) into Block(66) at 3", "Move ExpressionStatement(155) into Block(66) at 4", "Update SimpleName: log(43) to signalSessionCreated", "Delete QualifiedName: org.apache.sshd.common.RuntimeSshException(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.apache.sshd.common.session.SessionListener(8)", "Delete ImportDeclaration(9)", "Delete SimpleName: debug(44)", "Delete StringLiteral: \"Server session created {}\"(45)", "Delete SimpleName: log(40)", "Delete SimpleName: isDebugEnabled(41)", "Delete MethodInvocation(42)", "Delete Block(49)", "Delete IfStatement(50)", "Delete SimpleName: SessionListener(51)", "Delete SimpleType: SessionListener(52)", "Delete SimpleName: listener(53)", "Delete SimpleName: getSessionListenerProxy(54)", "Delete MethodInvocation(55)", "Delete VariableDeclarationFragment(56)", "Delete VariableDeclarationStatement(57)", "Delete SimpleName: listener(58)", "Delete SimpleName: sessionCreated(59)", "Delete ThisExpression(60)", "Delete MethodInvocation(61)", "Delete ExpressionStatement(62)", "Delete Block(63)", "Delete SimpleName: Throwable(64)", "Delete SimpleType: Throwable(65)", "Delete SimpleName: t(66)", "Delete SingleVariableDeclaration(67)", "Delete SimpleName: Throwable(68)", "Delete SimpleType: Throwable(69)", "Delete SimpleName: e(70)", "Delete SimpleName: GenericUtils(71)", "Delete SimpleName: peelException(72)", "Delete SimpleName: t(73)", "Delete MethodInvocation(74)", "Delete VariableDeclarationFragment(75)", "Delete VariableDeclarationStatement(76)", "Delete SimpleName: log(77)", "Delete SimpleName: isDebugEnabled(78)", "Delete MethodInvocation(79)", "Delete SimpleName: log(80)", "Delete SimpleName: debug(81)", "Delete StringLiteral: \"Failed ({}) to announce session={} created: {}\"(82)", "Delete SimpleName: e(83)", "Delete SimpleName: getClass(84)", "Delete MethodInvocation(85)", "Delete SimpleName: getSimpleName(86)", "Delete MethodInvocation(87)", "Delete SimpleName: ioSession(88)", "Delete SimpleName: e(89)", "Delete SimpleName: getMessage(90)", "Delete MethodInvocation(91)", "Delete MethodInvocation(92)", "Delete ExpressionStatement(93)", "Delete Block(94)", "Delete IfStatement(95)", "Delete SimpleName: log(96)", "Delete SimpleName: isTraceEnabled(97)", "Delete MethodInvocation(98)", "Delete SimpleName: log(99)", "Delete SimpleName: trace(100)", "Delete StringLiteral: \"Session=\"(101)", "Delete SimpleName: ioSession(102)", "Delete StringLiteral: \" creation failure details\"(103)", "Delete InfixExpression: +(104)", "Delete SimpleName: e(105)", "Delete MethodInvocation(106)", "Delete ExpressionStatement(107)", "Delete Block(108)", "Delete IfStatement(109)", "Delete SimpleName: e(110)", "Delete SimpleName: Exception(111)", "Delete SimpleType: Exception(112)", "Delete InstanceofExpression(113)", "Delete SimpleName: Exception(114)", "Delete SimpleType: Exception(115)", "Delete SimpleName: e(116)", "Delete CastExpression(117)", "Delete ThrowStatement(118)", "Delete Block(119)", "Delete SimpleName: RuntimeSshException(120)", "Delete SimpleType: RuntimeSshException(121)", "Delete SimpleName: e(122)", "Delete ClassInstanceCreation(123)", "Delete ThrowStatement(124)", "Delete Block(125)", "Delete IfStatement(126)", "Delete Block(127)", "Delete CatchClause(128)", "Delete TryStatement(129)", "Delete Block(156)"]}}, {"AbstractSftpEventListenerManager_cluster": {"actions": [{"root": "UPDATE from java.util.Objects to java.util.concurrent.CopyOnWriteArraySet", "operations": ["UPD QualifiedName: java.util.Objects from java.util.Objects to java.util.concurrent.CopyOnWriteArraySet"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0", "INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS SimpleName: listener to InfixExpression: == at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS IfStatement to Block at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: SftpEventListener to MethodInvocation at 0", "INS SimpleName: validateListener to MethodInvocation at 1"]}, {"root": "UPDATE from Objects to SftpEventListener", "operations": ["UPD SimpleName: Objects from Objects to SftpEventListener"]}, {"root": "UPDATE from requireNonNull to validateListener", "operations": ["UPD SimpleName: requireNonNull from requireNonNull to validateListener"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: listener to MethodInvocation at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: EventListenerUtils", "DEL SimpleName: synchronizedListenersSet"]}, {"root": "DEL StringLiteral: \"No listener\"", "operations": ["DEL StringLiteral: \"No listener\""]}]}}, {"AbstractSftpEventListenerManager_diff": {"operations": ["Update QualifiedName: java.util.Objects(4) to java.util.concurrent.CopyOnWriteArraySet", "Insert ClassInstanceCreation(27) into VariableDeclarationFragment(28) at 1", "Insert IfStatement(110) into Block(119) at 0", "Insert ParameterizedType: CopyOnWriteArraySet<>(26) into ClassInstanceCreation(27) at 0", "Insert InfixExpression: ==(106) into IfStatement(110) at 0", "Insert Block(109) into IfStatement(110) at 1", "Insert SimpleType: CopyOnWriteArraySet(25) into ParameterizedType: CopyOnWriteArraySet<>(26) at 0", "Insert SimpleName: listener(104) into InfixExpression: ==(106) at 0", "Insert NullLiteral(105) into InfixExpression: ==(106) at 1", "Insert ReturnStatement(108) into Block(109) at 0", "Insert MethodInvocation(116) into MethodInvocation(117) at 2", "Insert SimpleName: CopyOnWriteArraySet(24) into SimpleType: CopyOnWriteArraySet(25) at 0", "Update SimpleName: Objects(86) to SftpEventListener", "Update SimpleName: requireNonNull(87) to validateListener", "Insert BooleanLiteral: false(107) into ReturnStatement(108) at 0", "Insert SimpleName: SftpEventListener(113) into MethodInvocation(116) at 0", "Insert SimpleName: validateListener(114) into MethodInvocation(116) at 1", "Move SimpleName: listener(106) into MethodInvocation(116) at 2", "Delete SimpleName: EventListenerUtils(24)", "Delete SimpleName: synchronizedListenersSet(25)", "Delete MethodInvocation(26)", "Delete StringLiteral: \"No listener\"(89)"]}}, {"SftpEventListener_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: interface at 27", "operations": ["INS MethodDeclaration to TypeDeclaration: interface at 27", "INS SimpleName: listener to SingleVariableDeclaration at 1", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleName: SshdEventListener to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: L to SimpleType: L at 0", "INS SimpleType: L to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getSimpleName to MethodInvocation at 1", "INS SimpleType: SftpEventListener to TypeParameter at 1", "INS SimpleName: SftpEventListener to SimpleType: SftpEventListener at 0", "INS TypeLiteral to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: SftpEventListener to TypeLiteral at 0", "INS SimpleType: L to SingleVariableDeclaration at 0", "INS SimpleName: L to TypeParameter at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: listener to MethodInvocation at 2", "INS SimpleName: validateListener to MethodDeclaration at 3", "INS TypeParameter to MethodDeclaration at 1", "INS Modifier: static to MethodDeclaration at 0", "INS SimpleName: SftpEventListener to SimpleType: SftpEventListener at 0", "INS SimpleName: validateListener to MethodInvocation at 1"]}]}}, {"SftpEventListener_diff": {"operations": ["Insert MethodDeclaration(1352) into TypeDeclaration: interface(1353) at 27", "Insert Modifier: static(1329) into MethodDeclaration(1352) at 0", "Insert TypeParameter(1333) into MethodDeclaration(1352) at 1", "Insert SimpleType: L(1335) into MethodDeclaration(1352) at 2", "Insert SimpleName: validateListener(1336) into MethodDeclaration(1352) at 3", "Insert SingleVariableDeclaration(1340) into MethodDeclaration(1352) at 4", "Insert Block(1351) into MethodDeclaration(1352) at 5", "Insert SimpleName: L(1330) into TypeParameter(1333) at 0", "Insert SimpleType: SftpEventListener(1332) into TypeParameter(1333) at 1", "Insert SimpleName: L(1334) into SimpleType: L(1335) at 0", "Insert SimpleType: L(1338) into SingleVariableDeclaration(1340) at 0", "Insert SimpleName: listener(1339) into SingleVariableDeclaration(1340) at 1", "Insert ReturnStatement(1350) into Block(1351) at 0", "Insert SimpleName: SftpEventListener(1331) into SimpleType: SftpEventListener(1332) at 0", "Insert SimpleName: L(1337) into SimpleType: L(1338) at 0", "Insert MethodInvocation(1349) into ReturnStatement(1350) at 0", "Insert SimpleName: SshdEventListener(1341) into MethodInvocation(1349) at 0", "Insert SimpleName: validateListener(1342) into MethodInvocation(1349) at 1", "Insert SimpleName: listener(1343) into MethodInvocation(1349) at 2", "Insert MethodInvocation(1348) into MethodInvocation(1349) at 3", "Insert TypeLiteral(1346) into MethodInvocation(1348) at 0", "Insert SimpleName: getSimpleName(1347) into MethodInvocation(1348) at 1", "Insert SimpleType: SftpEventListener(1345) into TypeLiteral(1346) at 0", "Insert SimpleName: SftpEventListener(1344) into SimpleType: SftpEventListener(1345) at 0"]}}, {"SftpSubsystem_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 52", "operations": ["INS ImportDeclaration to CompilationUnit at 52", "INS QualifiedName: java.util.concurrent.CopyOnWriteArraySet to ImportDeclaration at 0"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: CopyOnWriteArraySet to SimpleType: CopyOnWriteArraySet at 0", "INS SimpleType: CopyOnWriteArraySet to ParameterizedType: CopyOnWriteArraySet<> at 0", "INS ParameterizedType: CopyOnWriteArraySet<> to ClassInstanceCreation at 0"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: listener to InfixExpression: == at 0", "INS ReturnStatement to Block at 0", "INS NullLiteral to InfixExpression: == at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: validateListener to MethodInvocation at 1", "INS SimpleName: SftpEventListener to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from Objects to SftpEventListener", "operations": ["UPD SimpleName: Objects from Objects to SftpEventListener"]}, {"root": "UPDATE from requireNonNull to validateListener", "operations": ["UPD SimpleName: requireNonNull from requireNonNull to validateListener"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: listener to MethodInvocation at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: EventListenerUtils", "DEL SimpleName: synchronizedListenersSet"]}, {"root": "DEL StringLiteral: \"No listener\"", "operations": ["DEL StringLiteral: \"No listener\""]}]}}, {"SftpSubsystem_diff": {"operations": ["Insert ImportDeclaration(105) into CompilationUnit(15355) at 52", "Insert QualifiedName: java.util.concurrent.CopyOnWriteArraySet(104) into ImportDeclaration(105) at 0", "Insert ClassInstanceCreation(907) into VariableDeclarationFragment(908) at 1", "Insert IfStatement(1116) into Block(1125) at 0", "Insert ParameterizedType: CopyOnWriteArraySet<>(906) into ClassInstanceCreation(907) at 0", "Insert InfixExpression: ==(1112) into IfStatement(1116) at 0", "Insert Block(1115) into IfStatement(1116) at 1", "Insert SimpleType: CopyOnWriteArraySet(905) into ParameterizedType: CopyOnWriteArraySet<>(906) at 0", "Insert SimpleName: listener(1110) into InfixExpression: ==(1112) at 0", "Insert NullLiteral(1111) into InfixExpression: ==(1112) at 1", "Insert ReturnStatement(1114) into Block(1115) at 0", "Insert MethodInvocation(1122) into MethodInvocation(1123) at 2", "Insert SimpleName: CopyOnWriteArraySet(904) into SimpleType: CopyOnWriteArraySet(905) at 0", "Update SimpleName: Objects(1090) to SftpEventListener", "Update SimpleName: requireNonNull(1091) to validateListener", "Insert BooleanLiteral: false(1113) into ReturnStatement(1114) at 0", "Insert SimpleName: SftpEventListener(1119) into MethodInvocation(1122) at 0", "Insert SimpleName: validateListener(1120) into MethodInvocation(1122) at 1", "Move SimpleName: listener(1110) into MethodInvocation(1122) at 2", "Delete SimpleName: EventListenerUtils(902)", "Delete SimpleName: synchronizedListenersSet(903)", "Delete MethodInvocation(904)", "Delete StringLiteral: \"No listener\"(1093)"]}}], "commit_stats": [{"total_files": 33, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}