{"application": "google-error-prone", "csha": "96f1ed68df4d9085f60f62214008dfe67df92089", "files": [{"RequiresNamedParameters_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.errorprone.annotations"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.ElementType.METHOD", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.RetentionPolicy.CLASS", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.Documented", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.Retention", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.annotation.Target"]}, {"root": "DEL AnnotationTypeDeclaration", "operations": ["DEL TextElement: .", "DEL SimpleName: RequiresNamedParameters", "DEL SimpleName: Documented", "DEL Javadoc", "DEL TextElement: argument in a comment, e.g. ", "DEL TagElement: @code", "DEL SingleMemberAnnotation", "DEL SimpleName: METHOD", "DEL TextElement: an equals character. All arguments must be labelled.", "DEL SimpleName: Target", "DEL SingleMemberAnnotation", "DEL SimpleName: CLASS", "DEL TagElement: @author", "DEL TagElement", "DEL AnnotationTypeDeclaration", "DEL SimpleName: Retention", "DEL TextElement: Requires invocations of the method to record the corresponding formal parameter name for each", "DEL TextElement: <p>Labelling comments must be before the argument and must contain the parameter name followed by", "DEL MarkerAnnotation", "DEL TextElement:  andrewrice@google.com (Andrew Rice)", "DEL TextElement:  foo(/*x=*&#47; 1, /*y=&#47; 2)", "DEL Modifier: public"]}]}}, {"RequiresNamedParameters_diff": {"operations": ["Delete QualifiedName: com.google.errorprone.annotations(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.annotation.ElementType.METHOD(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.annotation.RetentionPolicy.CLASS(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.annotation.Documented(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.lang.annotation.Retention(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.lang.annotation.Target(10)", "Delete ImportDeclaration(11)", "Delete TextElement: Requires invocations of the method to record the corresponding formal parameter name for each(12)", "Delete TextElement: argument in a comment, e.g. (13)", "Delete TextElement:  foo(/*x=*&#47; 1, /*y=&#47; 2)(14)", "Delete TagElement: @code(15)", "Delete TextElement: .(16)", "Delete TextElement: <p>Labelling comments must be before the argument and must contain the parameter name followed by(17)", "Delete TextElement: an equals character. All arguments must be labelled.(18)", "Delete TagElement(19)", "Delete TextElement:  andrewrice@google.com (Andrew Rice)(20)", "Delete TagElement: @author(21)", "Delete Javadoc(22)", "Delete SimpleName: Documented(23)", "Delete MarkerAnnotation(24)", "Delete SimpleName: Retention(25)", "Delete SimpleName: CLASS(26)", "Delete SingleMemberAnnotation(27)", "Delete SimpleName: Target(28)", "Delete SimpleName: METHOD(29)", "Delete SingleMemberAnnotation(30)", "Delete Modifier: public(31)", "Delete SimpleName: RequiresNamedParameters(32)", "Delete AnnotationTypeDeclaration(33)"]}}, {"NameInCommentHeuristic_cluster": {"actions": [{"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: matchType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}]}}, {"NameInCommentHeuristic_diff": {"operations": ["Insert MethodInvocation(99) into VariableDeclarationFragment(100) at 1", "Move MethodInvocation(97) into MethodInvocation(99) at 0", "Insert SimpleName: matchType(98) into MethodInvocation(99) at 1"]}}, {"NamedParameterChecker_cluster": {"actions": [{"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 15", "MOV MethodDeclaration to TypeDeclaration: class at 15"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 8"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from describeIncorrectlyLabelledArgument to addComment", "operations": ["UPD SimpleName: describeIncorrectlyLabelledArgument from describeIncorrectlyLabelledArgument to addComment", "UPD SimpleName: incorrectlyLabelledArguments from incorrectlyLabelledArguments to addComment"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS QualifiedName: SuggestedFix.Builder to SimpleType: SuggestedFix.Builder at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: SuggestedFix.Builder to SingleVariableDeclaration at 0", "INS SimpleName: fixBuilder to SingleVariableDeclaration at 1"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS Javadoc to MethodDeclaration at 0", "INS TextElement: so should begin and end with block comment delimiters to TagElement at 1", "INS TagElement to Javadoc at 0", "INS TextElement: Replace the given comment with the replacementText. The replacement text is used verbatim and to TagElement at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "INS SimpleName: removeComment to MethodDeclaration at 3", "operations": ["INS SimpleName: removeComment to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: Comment to SingleVariableDeclaration at 0", "INS SimpleName: comment to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS QualifiedName: SuggestedFix.Builder to SimpleType: SuggestedFix.Builder at 0", "INS SimpleType: SuggestedFix.Builder to SingleVariableDeclaration at 0", "INS SimpleName: fixBuilder to SingleVariableDeclaration at 1"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS IfStatement to Block at 2"]}, {"root": "INS EnhancedForStatement to Block at 9", "operations": ["INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: MatchType.NOT_ANNOTATED to InfixExpression: == at 1", "INS SimpleName: addComment to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: removeComment to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS EnhancedForStatement to Block at 9", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to SwitchStatement at 12", "INS SwitchStatement to Block at 0", "INS SimpleName: labelledArgument to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to SwitchStatement at 0", "INS ExpressionStatement to SwitchStatement at 13", "INS ExpressionStatement to SwitchStatement at 5", "INS ExpressionStatement to SwitchStatement at 6", "INS IfStatement to Block at 2", "INS SimpleName: labelledArguments to EnhancedForStatement at 1", "INS SimpleName: fixBuilder to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: matchType to MethodInvocation at 1", "INS SimpleName: argumentWithCorrectLabel to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 0", "INS BreakStatement to SwitchStatement at 3", "INS SimpleName: matchedComment to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 10", "operations": ["INS IfStatement to Block at 10", "INS QualifiedName: Description.NO_MATCH to ReturnStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: fixBuilder to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 1"]}, {"root": "UPDATE from argumentWithBadLabel to labelledArgument", "operations": ["UPD SimpleName: argumentWithBadLabel from argumentWithBadLabel to labelledArgument", "UPD SimpleName: argumentWithBadLabel from argumentWithBadLabel to labelledArgument", "UPD SimpleName: argumentWithBadLabel from argumentWithBadLabel to labelledArgument", "UPD SimpleName: argumentWithBadLabel from argumentWithBadLabel to labelledArgument", "UPD SimpleName: p from p to labelledArgument", "UPD SimpleName: argumentWithBadLabel from argumentWithBadLabel to labelledArgument", "UPD SimpleName: p from p to labelledArgument", "UPD SimpleName: format from format to labelledArgument", "UPD SimpleName: argumentWithCorrectLabel from argumentWithCorrectLabel to labelledArgument", "UPD SimpleName: buildDescription from buildDescription to labelledArgument", "UPD SimpleName: argumentWithBadLabel from argumentWithBadLabel to labelledArgument"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: tree to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS StringLiteral: \"\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: comment to MethodInvocation at 1"]}, {"root": "UPDATE from MatchType to NamedParameterComment.MatchedComment", "operations": ["UPD SimpleType: MatchType from MatchType to NamedParameterComment.MatchedComment"]}, {"root": "UPDATE from label to matchedComment", "operations": ["UPD SimpleName: label from label to matchedComment", "UPD SimpleName: tree from tree to matchedComment", "UPD SimpleName: commentsRequired from commentsRequired to matchedComment", "UPD SimpleName: match from match to matchedComment"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS ParameterizedType: ImmutableList.Builder<String> to VariableDeclarationStatement at 0", "operations": ["INS QualifiedName: ImmutableList.Builder to SimpleType: ImmutableList.Builder at 0", "INS ParameterizedType: ImmutableList.Builder<String> to VariableDeclarationStatement at 0", "INS SimpleType: ImmutableList.Builder to ParameterizedType: ImmutableList.Builder<String> at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "UPDATE from Tree to Comment", "operations": ["UPD SimpleName: Tree from Tree to Comment"]}, {"root": "MOVE from SimpleType: Comment", "operations": ["MOV SimpleName: Tree to SimpleType: Comment at 0"]}, {"root": "INS QualifiedName: NamedParameterComment.MatchedComment to SimpleType: MatchType at 0", "operations": ["INS QualifiedName: NamedParameterComment.MatchedComment to SimpleType: MatchType at 0"]}, {"root": "MOVE from ParameterizedType: ImmutableList.Builder<String>", "operations": ["MOV SimpleType: String to ParameterizedType: ImmutableList.Builder<String> at 1"]}, {"root": "UPDATE from actualParameter to incorrectParameterDescriptions", "operations": ["UPD SimpleName: actualParameter from actualParameter to incorrectParameterDescriptions", "UPD SimpleName: incorrectlyLabelledArguments from incorrectlyLabelledArguments to incorrectParameterDescriptions", "UPD SimpleName: commentsRequired from commentsRequired to incorrectParameterDescriptions", "UPD SimpleName: replaceComment from replaceComment to incorrectParameterDescriptions"]}, {"root": "UPDATE from toImmutableList to fixBuilder", "operations": ["UPD SimpleName: toImmutableList from toImmutableList to fixBuilder", "UPD SimpleName: isPresent from isPresent to fixBuilder", "UPD SimpleName: argumentWithBadLabel from argumentWithBadLabel to fixBuilder", "UPD SimpleName: p from p to fixBuilder", "UPD SimpleName: getCanonicalName from getCanonicalName to fixBuilder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: p to MethodInvocation at 0", "MOV SimpleName: match to MethodInvocation at 1"]}, {"root": "UPDATE from match to prefixWith", "operations": ["UPD SimpleName: match from match to prefixWith"]}, {"root": "UPDATE from symbolHasAnnotation to replaceComment", "operations": ["UPD SimpleName: symbolHasAnnotation from symbolHasAnnotation to replaceComment", "UPD SimpleName: fixBuilder from fixBuilder to replaceComment"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: symbolHasAnnotation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getCanonicalName to MethodInvocation at 3"]}, {"root": "UPDATE from hasRequiresNamedParametersAnnotation to ImmutableList", "operations": ["UPD SimpleName: hasRequiresNamedParametersAnnotation from hasRequiresNamedParametersAnnotation to ImmutableList"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: hasRequiresNamedParametersAnnotation to MethodInvocation at 0"]}, {"root": "UPDATE from matches to builder", "operations": ["UPD SimpleName: matches from matches to builder"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV VariableDeclarationStatement to SwitchStatement at 10", "MOV SwitchCase to SwitchStatement at 4", "MOV ExpressionStatement to SwitchStatement at 7", "MOV BreakStatement to SwitchStatement at 8", "MOV SwitchCase to SwitchStatement at 9", "MOV VariableDeclarationStatement to SwitchStatement at 11", "MOV BreakStatement to SwitchStatement at 14", "MOV SwitchCase to SwitchStatement at 1"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV SwitchCase to SwitchStatement at 2"]}, {"root": "UPDATE from String to NamedParameterComment", "operations": ["UPD SimpleName: String from String to NamedParameterComment"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: format to MethodInvocation at 1", "MOV SimpleName: String to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from format to toCommentText", "operations": ["UPD SimpleName: format from format to toCommentText"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: setMessage to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from setMessage to matchType", "operations": ["UPD SimpleName: setMessage from setMessage to matchType"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2", "MOV Block to IfStatement at 2"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: format to MethodInvocation at 0"]}, {"root": "UPDATE from parameterName to actualParameter", "operations": ["UPD SimpleName: parameterName from parameterName to actualParameter"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parameterName to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: matchType to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toImmutableList to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: incorrectlyLabelledArguments to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: argumentWithBadLabel to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: actualParameter to MethodInvocation at 0"]}, {"root": "UPDATE from tree to add", "operations": ["UPD SimpleName: tree from tree to add", "UPD SimpleName: badLabel from badLabel to add"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tree to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS MethodInvocation to InfixExpression: == at 0", "operations": ["INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: matchType to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from collect to comment", "operations": ["UPD SimpleName: collect from collect to comment", "UPD SimpleName: get from get to comment", "UPD SimpleName: get from get to comment"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: collect to MethodInvocation at 1"]}, {"root": "UPDATE from NamedParameterComment to String", "operations": ["UPD SimpleName: NamedParameterComment from NamedParameterComment to String", "UPD SimpleName: NamedParameterComment from NamedParameterComment to String"]}, {"root": "UPDATE from toCommentText to format", "operations": ["UPD SimpleName: toCommentText from toCommentText to format", "UPD SimpleName: toCommentText from toCommentText to format"]}, {"root": "INS StringLiteral: \"%s (comment does not conform to required style)\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"%s (comment does not conform to required style)\" to MethodInvocation at 2"]}, {"root": "INS StringLiteral: \"%s (comment does not match formal parameter name)\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"%s (comment does not match formal parameter name)\" to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: labelledArgument to MethodInvocation at 0", "MOV SimpleName: commentsRequired to MethodInvocation at 1"]}, {"root": "UPDATE from argumentWithCorrectLabel to badLabel", "operations": ["UPD SimpleName: argumentWithCorrectLabel from argumentWithCorrectLabel to badLabel", "UPD SimpleName: label from label to badLabel"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: argumentWithCorrectLabel to MethodInvocation at 1"]}, {"root": "INS SimpleName: fixBuilder to MethodInvocation at 5", "operations": ["INS SimpleName: fixBuilder to MethodInvocation at 5"]}, {"root": "UPDATE from map to stream", "operations": ["UPD SimpleName: map from map to stream"]}, {"root": "UPDATE from stream to build", "operations": ["UPD SimpleName: stream from stream to build"]}, {"root": "UPDATE from argumentWithCorrectLabel to removeComment", "operations": ["UPD SimpleName: argumentWithCorrectLabel from argumentWithCorrectLabel to removeComment"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: label to MethodInvocation at 1", "MOV SimpleName: argumentWithCorrectLabel to MethodInvocation at 0"]}, {"root": "UPDATE from correctLabel to argumentWithCorrectLabel", "operations": ["UPD SimpleName: correctLabel from correctLabel to argumentWithCorrectLabel", "UPD SimpleName: correctLabel from correctLabel to argumentWithCorrectLabel"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: correctLabel to MethodInvocation at 1", "MOV SimpleName: isPresent to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: matchedComment to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: correctLabel to MethodInvocation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.matchers.Matchers.symbolHasAnnotation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.errorprone.annotations.RequiresNamedParameters"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.errorprone.matchers.Matcher", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.sun.tools.javac.parser.Tokens.Comment.CommentStyle", "DEL ImportDeclaration"]}, {"root": "DEL MemberValuePair", "operations": ["DEL StringLiteral: \"the name in the comment and the actual name will then cause a compilation error. If \"", "DEL InfixExpression: +", "DEL StringLiteral: \"containing the parameter name followed by an equals sign (\\\"=\\\"). Mismatches between \"", "DEL StringLiteral: \"the called method is annotated with RequiresNamedParameters then an error will occur \"", "DEL StringLiteral: \"if any names are omitted.\"", "DEL SimpleName: explanation", "DEL StringLiteral: \"For clarity, and to avoid potentially incorrectly swapping arguments, arguments may be \"", "DEL MemberValuePair", "DEL StringLiteral: \"explicitly matched to their parameter by preceding them with a block comment \""]}, {"root": "DEL SimpleName: state", "operations": ["DEL SimpleName: state"]}, {"root": "DEL SimpleName: state", "operations": ["DEL SimpleName: state"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: VisitorState", "DEL SingleVariableDeclaration", "DEL SimpleName: state", "DEL SimpleType: VisitorState"]}, {"root": "DEL IfStatement", "operations": ["DEL ReturnStatement", "DEL IfStatement", "DEL StringLiteral: \"Method requires parameter name comments but parameter names are not available.\"", "DEL ConditionalExpression", "DEL SimpleName: build", "DEL MethodInvocation", "DEL Block", "DEL QualifiedName: Description.NO_MATCH", "DEL SimpleName: commentsRequired", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL ParameterizedType: ImmutableList<LabelledArgument>", "DEL VariableDeclarationStatement", "DEL SimpleName: LabelledArgument", "DEL PrefixExpression: !", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: labelledArguments", "DEL SimpleName: isCorrectlyAnnotated", "DEL SimpleName: incorrectlyLabelledArguments", "DEL SimpleType: ImmutableList", "DEL VariableDeclarationFragment", "DEL SimpleName: labelledArgument", "DEL SimpleType: LabelledArgument", "DEL MethodInvocation", "DEL SimpleName: ImmutableList", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: stream", "DEL SimpleName: filter", "DEL LambdaExpression", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: isEmpty", "DEL MethodInvocation", "DEL IfStatement"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL SimpleName: tree", "operations": ["DEL SimpleName: tree"]}, {"root": "DEL SimpleName: state", "operations": ["DEL SimpleName: state"]}, {"root": "DEL SimpleName: fixBuilder", "operations": ["DEL SimpleName: fixBuilder"]}, {"root": "DEL SimpleName: prefixWith", "operations": ["DEL SimpleName: prefixWith"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: argumentWithBadLabel", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: badLabel", "DEL SimpleName: replaceComment", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"\"", "DEL SimpleName: fixBuilder"]}, {"root": "DEL SimpleName: prefixWith", "operations": ["DEL SimpleName: prefixWith"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: tree", "DEL SimpleName: actualParameter", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: fixBuilder", "operations": ["DEL SimpleName: fixBuilder"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL Block", "DEL MethodInvocation", "DEL SimpleName: incorrectlyLabelledArguments", "DEL SimpleName: match", "DEL Block", "DEL SimpleName: IllegalArgumentException", "DEL SwitchStatement", "DEL SimpleName: Optional", "DEL ExpressionStatement", "DEL SimpleName: Comment", "DEL MethodInvocation", "DEL SwitchCase", "DEL SimpleType: Comment", "DEL Block", "DEL IfStatement", "DEL IfStatement", "DEL SimpleType: Optional", "DEL ClassInstanceCreation", "DEL SimpleName: EXACT_MATCH", "DEL SimpleName: correctLabel", "DEL EnhancedForStatement", "DEL ThrowStatement", "DEL SimpleType: IllegalArgumentException", "DEL StringLiteral: \"There should be no good matches in the list of bad matches\"", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL ParameterizedType: Optional<Comment>", "DEL VariableDeclarationFragment"]}, {"root": "DEL ExpressionMethodReference", "operations": ["DEL ExpressionMethodReference", "DEL SimpleName: describeIncorrectlyLabelledArgument", "DEL SimpleName: NamedParameterChecker"]}, {"root": "DEL SwitchStatement", "operations": ["DEL SwitchCase", "DEL MethodInvocation", "DEL SimpleName: APPROXIMATE_MATCH", "DEL SimpleName: p", "DEL MethodInvocation", "DEL SwitchCase", "DEL SwitchCase", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: NOT_ANNOTATED", "DEL StringLiteral: \"%s (label doesn't match parameter name)\"", "DEL SimpleName: EXACT_MATCH", "DEL ReturnStatement", "DEL SwitchCase", "DEL StringLiteral: \"%s (missing name label)\"", "DEL MethodInvocation", "DEL SwitchStatement", "DEL SimpleName: BAD_MATCH", "DEL ReturnStatement"]}, {"root": "DEL ThrowStatement", "operations": ["DEL SimpleName: IllegalArgumentException", "DEL ThrowStatement", "DEL ClassInstanceCreation", "DEL SimpleType: IllegalArgumentException", "DEL StringLiteral: \"Impossible match type in list of bad matches\""]}, {"root": "DEL ParameterizedType: Matcher<Tree>", "operations": ["DEL SimpleType: Tree", "DEL SimpleType: Matcher", "DEL SimpleName: Matcher", "DEL ParameterizedType: Matcher<Tree>"]}, {"root": "DEL SimpleName: hasRequiresNamedParametersAnnotation", "operations": ["DEL SimpleName: hasRequiresNamedParametersAnnotation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleType: RequiresNamedParameters", "DEL MethodInvocation", "DEL SimpleName: RequiresNamedParameters", "DEL TypeLiteral", "DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL SimpleName: MatchType", "operations": ["DEL SimpleName: MatchType"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SwitchCase", "DEL SimpleName: match", "DEL BooleanLiteral: false", "DEL BooleanLiteral: false", "DEL SwitchCase", "DEL ReturnStatement", "DEL Block", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: APPROXIMATE_MATCH", "DEL SwitchCase", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL SimpleName: commentRequired", "DEL PrimitiveType: boolean", "DEL PrefixExpression: !", "DEL SimpleName: isCorrectlyAnnotated", "DEL SingleVariableDeclaration", "DEL SwitchStatement", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL SimpleName: BAD_MATCH", "DEL SimpleName: commentRequired", "DEL SimpleName: NOT_ANNOTATED"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getStyle", "DEL SimpleType: Comment", "DEL SimpleName: actualParameter", "DEL SimpleName: c", "DEL MethodInvocation", "DEL QualifiedName: CommentStyle.BLOCK", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleType: Optional", "DEL SimpleName: beforeComments", "DEL MethodInvocation", "DEL ParameterizedType: Optional<Comment>", "DEL SimpleName: Comment", "DEL InfixExpression: ==", "DEL SimpleName: label", "DEL SimpleName: stream", "DEL Block", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: Optional", "DEL SimpleName: findLast", "DEL LambdaExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: filter", "DEL SimpleName: Streams"]}]}}, {"NamedParameterChecker_diff": {"operations": ["Move MethodDeclaration(545) into TypeDeclaration: class(736) at 15", "Move MethodDeclaration(685) into TypeDeclaration: class(736) at 15", "Move Block(159) into MethodDeclaration(112) at 6", "Move Block(129) into MethodDeclaration(141) at 6", "Move VariableDeclarationStatement(203) into Block(407) at 8", "Insert PrimitiveType: void(411) into MethodDeclaration(437) at 2", "Update SimpleName: describeIncorrectlyLabelledArgument(470) to addComment", "Insert SingleVariableDeclaration(420) into MethodDeclaration(437) at 5", "Insert Javadoc(441) into MethodDeclaration(485) at 0", "Insert PrimitiveType: void(488) into MethodDeclaration(505) at 2", "Insert SimpleName: removeComment(489) into MethodDeclaration(505) at 3", "Insert SingleVariableDeclaration(493) into MethodDeclaration(505) at 4", "Insert SingleVariableDeclaration(497) into MethodDeclaration(505) at 5", "Insert IfStatement(188) into Block(407) at 2", "Insert EnhancedForStatement(373) into Block(407) at 6", "Insert IfStatement(380) into Block(407) at 7", "Update SimpleName: p(473) to labelledArgument", "Insert SimpleType: SuggestedFix.Builder(418) into SingleVariableDeclaration(420) at 0", "Insert SimpleName: fixBuilder(419) into SingleVariableDeclaration(420) at 1", "Insert ExpressionStatement(435) into Block(436) at 0", "Insert TagElement(440) into Javadoc(441) at 0", "Insert SimpleType: Comment(491) into SingleVariableDeclaration(493) at 0", "Insert SimpleName: comment(492) into SingleVariableDeclaration(493) at 1", "Insert SimpleType: SuggestedFix.Builder(495) into SingleVariableDeclaration(497) at 0", "Insert SimpleName: fixBuilder(496) into SingleVariableDeclaration(497) at 1", "Insert ExpressionStatement(503) into Block(504) at 0", "Update SimpleName: match(728) to matchedComment", "Move MethodInvocation(217) into IfStatement(188) at 0", "Move Block(275) into IfStatement(188) at 1", "Insert ParameterizedType: ImmutableList.Builder<String>(214) into VariableDeclarationStatement(220) at 0", "Move SingleVariableDeclaration(288) into EnhancedForStatement(373) at 0", "Insert SimpleName: labelledArguments(225) into EnhancedForStatement(373) at 1", "Insert Block(372) into EnhancedForStatement(373) at 2", "Insert MethodInvocation(376) into IfStatement(380) at 0", "Insert Block(379) into IfStatement(380) at 1", "Insert QualifiedName: SuggestedFix.Builder(417) into SimpleType: SuggestedFix.Builder(418) at 0", "Insert MethodInvocation(434) into ExpressionStatement(435) at 0", "Insert TextElement: Replace the given comment with the replacementText. The replacement text is used verbatim and(438) into TagElement(440) at 0", "Insert TextElement: so should begin and end with block comment delimiters(439) into TagElement(440) at 1", "Update SimpleName: Tree(690) to Comment", "Move SimpleName: Tree(690) into SimpleType: Comment(491) at 0", "Insert QualifiedName: SuggestedFix.Builder(494) into SimpleType: SuggestedFix.Builder(495) at 0", "Insert MethodInvocation(502) into ExpressionStatement(503) at 0", "Insert SimpleType: ImmutableList.Builder(211) into ParameterizedType: ImmutableList.Builder<String>(214) at 0", "Move SimpleType: String(469) into ParameterizedType: ImmutableList.Builder<String>(214) at 1", "Update SimpleName: commentsRequired(195) to incorrectParameterDescriptions", "Update SimpleName: argumentWithBadLabel(287) to labelledArgument", "Insert SwitchStatement(371) into Block(372) at 0", "Insert SimpleName: fixBuilder(374) into MethodInvocation(376) at 0", "Insert SimpleName: isEmpty(375) into MethodInvocation(376) at 1", "Insert ReturnStatement(378) into Block(379) at 0", "Update SimpleName: p(475) to fixBuilder", "Move SimpleName: p(475) into MethodInvocation(434) at 0", "Update SimpleName: match(476) to prefixWith", "Move SimpleName: match(476) into MethodInvocation(434) at 1", "Insert MethodInvocation(427) into MethodInvocation(434) at 2", "Insert MethodInvocation(433) into MethodInvocation(434) at 3", "Update SimpleName: symbolHasAnnotation(694) to replaceComment", "Move SimpleName: symbolHasAnnotation(694) into MethodInvocation(502) at 0", "Insert SimpleName: comment(499) into MethodInvocation(502) at 1", "Insert StringLiteral: \"\"(500) into MethodInvocation(502) at 2", "Update SimpleName: getCanonicalName(698) to fixBuilder", "Move SimpleName: getCanonicalName(698) into MethodInvocation(502) at 3", "Insert QualifiedName: ImmutableList.Builder(210) into SimpleType: ImmutableList.Builder(211) at 0", "Update SimpleName: hasRequiresNamedParametersAnnotation(196) to ImmutableList", "Move SimpleName: hasRequiresNamedParametersAnnotation(196) into MethodInvocation(218) at 0", "Update SimpleName: matches(198) to builder", "Insert MethodInvocation(230) into SwitchStatement(371) at 0", "Move SwitchCase(294) into SwitchStatement(371) at 1", "Move SwitchCase(738) into SwitchStatement(371) at 2", "Insert BreakStatement(235) into SwitchStatement(371) at 3", "Move SwitchCase(314) into SwitchStatement(371) at 4", "Insert ExpressionStatement(246) into SwitchStatement(371) at 5", "Insert ExpressionStatement(251) into SwitchStatement(371) at 6", "Move ExpressionStatement(309) into SwitchStatement(371) at 7", "Move BreakStatement(310) into SwitchStatement(371) at 8", "Move SwitchCase(312) into SwitchStatement(371) at 9", "Move VariableDeclarationStatement(324) into SwitchStatement(371) at 10", "Move VariableDeclarationStatement(336) into SwitchStatement(371) at 11", "Insert IfStatement(358) into SwitchStatement(371) at 12", "Insert ExpressionStatement(369) into SwitchStatement(371) at 13", "Move BreakStatement(424) into SwitchStatement(371) at 14", "Insert QualifiedName: Description.NO_MATCH(377) into ReturnStatement(378) at 0", "Insert MethodInvocation(425) into MethodInvocation(427) at 0", "Insert SimpleName: tree(426) into MethodInvocation(427) at 1", "Update SimpleName: String(492) to NamedParameterComment", "Move SimpleName: String(492) into MethodInvocation(433) at 0", "Update SimpleName: format(493) to toCommentText", "Move SimpleName: format(493) into MethodInvocation(433) at 1", "Move MethodInvocation(497) into MethodInvocation(433) at 2", "Move MethodInvocation(221) into MethodInvocation(230) at 0", "Update SimpleName: setMessage(222) to matchType", "Move SimpleName: setMessage(222) into MethodInvocation(230) at 1", "Insert MethodInvocation(245) into ExpressionStatement(246) at 0", "Insert MethodInvocation(250) into ExpressionStatement(251) at 0", "Move MethodInvocation(339) into IfStatement(358) at 0", "Insert Block(345) into IfStatement(358) at 1", "Move Block(408) into IfStatement(358) at 2", "Move MethodInvocation(420) into ExpressionStatement(369) at 0", "Update SimpleName: format(483) to labelledArgument", "Move SimpleName: format(483) into MethodInvocation(425) at 0", "Update SimpleName: parameterName(486) to actualParameter", "Move SimpleName: parameterName(486) into MethodInvocation(425) at 1", "Update SimpleName: p(495) to labelledArgument", "Insert MethodInvocation(610) into VariableDeclarationFragment(611) at 1", "Update SimpleName: buildDescription(219) to labelledArgument", "Update SimpleName: tree(220) to matchedComment", "Insert SimpleName: removeComment(238) into MethodInvocation(245) at 0", "Insert MethodInvocation(243) into MethodInvocation(245) at 1", "Update SimpleName: toImmutableList(265) to fixBuilder", "Move SimpleName: toImmutableList(265) into MethodInvocation(245) at 2", "Update SimpleName: incorrectlyLabelledArguments(270) to addComment", "Move SimpleName: incorrectlyLabelledArguments(270) into MethodInvocation(250) at 0", "Insert SimpleName: labelledArgument(248) into MethodInvocation(250) at 1", "Update SimpleName: argumentWithBadLabel(290) to fixBuilder", "Move SimpleName: argumentWithBadLabel(290) into MethodInvocation(250) at 2", "Update SimpleName: actualParameter(298) to incorrectParameterDescriptions", "Move SimpleName: actualParameter(298) into MethodInvocation(261) at 0", "Update SimpleName: tree(300) to add", "Move SimpleName: tree(300) into MethodInvocation(261) at 1", "Move VariableDeclarationStatement(347) into Block(345) at 0", "Move ExpressionStatement(361) into Block(345) at 1", "Insert IfStatement(344) into Block(345) at 2", "Update SimpleName: replaceComment(411) to incorrectParameterDescriptions", "Update SimpleName: badLabel(412) to add", "Insert MethodInvocation(592) into InfixExpression: ==(594) at 0", "Move MethodInvocation(654) into MethodInvocation(610) at 0", "Insert SimpleName: matchType(609) into MethodInvocation(610) at 1", "Insert MethodInvocation(241) into MethodInvocation(243) at 0", "Update SimpleName: collect(264) to comment", "Move SimpleName: collect(264) into MethodInvocation(243) at 1", "Update SimpleName: NamedParameterComment(302) to String", "Update SimpleName: toCommentText(303) to format", "Insert StringLiteral: \"%s (comment does not conform to required style)\"(256) into MethodInvocation(260) at 2", "Update SimpleName: get(321) to comment", "Update SimpleName: argumentWithBadLabel(332) to labelledArgument", "Insert InfixExpression: ==(319) into IfStatement(344) at 0", "Insert Block(330) into IfStatement(344) at 1", "Move Block(386) into IfStatement(344) at 2", "Update SimpleName: NamedParameterComment(413) to String", "Update SimpleName: toCommentText(414) to format", "Insert StringLiteral: \"%s (comment does not match formal parameter name)\"(363) into MethodInvocation(367) at 2", "Move MethodInvocation(638) into MethodInvocation(592) at 0", "Insert SimpleName: matchType(591) into MethodInvocation(592) at 1", "Move SimpleName: labelledArgument(257) into MethodInvocation(241) at 0", "Update SimpleName: commentsRequired(259) to matchedComment", "Move SimpleName: commentsRequired(259) into MethodInvocation(241) at 1", "Update SimpleName: argumentWithBadLabel(304) to labelledArgument", "Update SimpleName: argumentWithBadLabel(318) to labelledArgument", "Update SimpleName: label(319) to matchedComment", "Insert MethodInvocation(317) into InfixExpression: ==(319) at 0", "Insert ExpressionStatement(324) into Block(330) at 0", "Insert ExpressionStatement(329) into Block(330) at 1", "Update SimpleName: fixBuilder(393) to replaceComment", "Update SimpleName: argumentWithCorrectLabel(395) to badLabel", "Move SimpleName: argumentWithCorrectLabel(395) into MethodInvocation(355) at 1", "Insert SimpleName: fixBuilder(354) into MethodInvocation(355) at 3", "Update SimpleName: argumentWithBadLabel(415) to labelledArgument", "Update SimpleName: map(443) to stream", "Insert MethodInvocation(315) into MethodInvocation(317) at 0", "Insert SimpleName: matchType(316) into MethodInvocation(317) at 1", "Insert MethodInvocation(323) into ExpressionStatement(324) at 0", "Insert MethodInvocation(328) into ExpressionStatement(329) at 0", "Update SimpleName: incorrectlyLabelledArguments(440) to incorrectParameterDescriptions", "Update SimpleName: stream(441) to build", "Update SimpleName: argumentWithBadLabel(350) to labelledArgument", "Insert SimpleName: argumentWithCorrectLabel(313) into MethodInvocation(315) at 0", "Insert SimpleName: matchedComment(314) into MethodInvocation(315) at 1", "Update SimpleName: argumentWithCorrectLabel(368) to removeComment", "Move SimpleName: argumentWithCorrectLabel(368) into MethodInvocation(323) at 0", "Update SimpleName: label(369) to badLabel", "Move SimpleName: label(369) into MethodInvocation(323) at 1", "Insert SimpleName: fixBuilder(322) into MethodInvocation(323) at 2", "Insert SimpleName: addComment(325) into MethodInvocation(328) at 0", "Update SimpleName: correctLabel(373) to argumentWithCorrectLabel", "Move SimpleName: correctLabel(373) into MethodInvocation(328) at 1", "Update SimpleName: isPresent(374) to fixBuilder", "Move SimpleName: isPresent(374) into MethodInvocation(328) at 2", "Update SimpleName: argumentWithCorrectLabel(402) to labelledArgument", "Insert MethodInvocation(335) into MethodInvocation(337) at 0", "Update SimpleName: get(379) to comment", "Update SimpleName: correctLabel(378) to argumentWithCorrectLabel", "Move SimpleName: correctLabel(378) into MethodInvocation(335) at 0", "Insert SimpleName: matchedComment(334) into MethodInvocation(335) at 1", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.errorprone.annotations.RequiresNamedParameters(20)", "Delete ImportDeclaration(21)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.sun.tools.javac.parser.Tokens.Comment.CommentStyle(56)", "Delete ImportDeclaration(57)", "Delete SimpleName: explanation(77)", "Delete StringLiteral: \"For clarity, and to avoid potentially incorrectly swapping arguments, arguments may be \"(78)", "Delete StringLiteral: \"explicitly matched to their parameter by preceding them with a block comment \"(79)", "Delete StringLiteral: \"containing the parameter name followed by an equals sign (\\\"=\\\"). Mismatches between \"(80)", "Delete StringLiteral: \"the name in the comment and the actual name will then cause a compilation error. If \"(81)", "Delete StringLiteral: \"the called method is annotated with RequiresNamedParameters then an error will occur \"(82)", "Delete StringLiteral: \"if any names are omitted.\"(83)", "Delete InfixExpression: +(84)", "Delete MemberValuePair(85)", "Delete SimpleName: state(156)", "Delete SimpleName: state(126)", "Delete SimpleName: VisitorState(183)", "Delete SimpleType: VisitorState(184)", "Delete SimpleName: state(185)", "Delete SingleVariableDeclaration(186)", "Delete SimpleName: commentsRequired(218)", "Delete StringLiteral: \"Method requires parameter name comments but parameter names are not available.\"(223)", "Delete MethodInvocation(224)", "Delete SimpleName: build(225)", "Delete MethodInvocation(226)", "Delete QualifiedName: Description.NO_MATCH(227)", "Delete ConditionalExpression(228)", "Delete ReturnStatement(229)", "Delete Block(230)", "Delete IfStatement(231)", "Delete SimpleName: ImmutableList(245)", "Delete SimpleType: ImmutableList(246)", "Delete SimpleName: LabelledArgument(247)", "Delete SimpleType: LabelledArgument(248)", "Delete ParameterizedType: ImmutableList<LabelledArgument>(249)", "Delete SimpleName: incorrectlyLabelledArguments(250)", "Delete SimpleName: labelledArguments(251)", "Delete SimpleName: stream(252)", "Delete MethodInvocation(253)", "Delete SimpleName: filter(254)", "Delete SimpleName: labelledArgument(255)", "Delete VariableDeclarationFragment(256)", "Delete SimpleName: isCorrectlyAnnotated(258)", "Delete MethodInvocation(260)", "Delete PrefixExpression: !(261)", "Delete LambdaExpression(262)", "Delete MethodInvocation(263)", "Delete MethodInvocation(266)", "Delete MethodInvocation(267)", "Delete VariableDeclarationFragment(268)", "Delete VariableDeclarationStatement(269)", "Delete SimpleName: isEmpty(271)", "Delete MethodInvocation(272)", "Delete IfStatement(276)", "Delete PrimitiveType: boolean(194)", "Delete MethodInvocation(197)", "Delete SimpleName: tree(199)", "Delete SimpleName: state(200)", "Delete SimpleName: fixBuilder(295)", "Delete SimpleName: prefixWith(296)", "Delete SimpleName: argumentWithBadLabel(297)", "Delete MethodInvocation(299)", "Delete MethodInvocation(301)", "Delete SimpleName: replaceComment(387)", "Delete SimpleName: badLabel(388)", "Delete StringLiteral: \"\"(389)", "Delete SimpleName: fixBuilder(390)", "Delete MethodInvocation(391)", "Delete ExpressionStatement(392)", "Delete SimpleName: prefixWith(394)", "Delete SimpleName: actualParameter(396)", "Delete MethodInvocation(397)", "Delete SimpleName: tree(398)", "Delete MethodInvocation(399)", "Delete SimpleName: fixBuilder(419)", "Delete SimpleName: incorrectlyLabelledArguments(289)", "Delete SimpleName: match(291)", "Delete MethodInvocation(292)", "Delete SimpleName: Optional(362)", "Delete SimpleType: Optional(363)", "Delete SimpleName: Comment(364)", "Delete SimpleType: Comment(365)", "Delete ParameterizedType: Optional<Comment>(366)", "Delete SimpleName: correctLabel(367)", "Delete MethodInvocation(370)", "Delete VariableDeclarationFragment(371)", "Delete VariableDeclarationStatement(372)", "Delete MethodInvocation(375)", "Delete IfStatement(409)", "Delete Block(410)", "Delete ExpressionStatement(421)", "Delete Block(422)", "Delete IfStatement(423)", "Delete SimpleName: EXACT_MATCH(425)", "Delete SwitchCase(426)", "Delete SimpleName: IllegalArgumentException(427)", "Delete SimpleType: IllegalArgumentException(428)", "Delete StringLiteral: \"There should be no good matches in the list of bad matches\"(429)", "Delete ClassInstanceCreation(430)", "Delete ThrowStatement(431)", "Delete SwitchStatement(432)", "Delete Block(433)", "Delete EnhancedForStatement(434)", "Delete SimpleName: NamedParameterChecker(444)", "Delete SimpleName: describeIncorrectlyLabelledArgument(445)", "Delete ExpressionMethodReference(446)", "Delete MethodInvocation(477)", "Delete SimpleName: NOT_ANNOTATED(478)", "Delete SwitchCase(479)", "Delete SimpleName: APPROXIMATE_MATCH(480)", "Delete SwitchCase(481)", "Delete SimpleName: String(482)", "Delete StringLiteral: \"%s (missing name label)\"(484)", "Delete SimpleName: p(485)", "Delete MethodInvocation(487)", "Delete MethodInvocation(488)", "Delete ReturnStatement(489)", "Delete SimpleName: BAD_MATCH(490)", "Delete SwitchCase(491)", "Delete StringLiteral: \"%s (label doesn't match parameter name)\"(494)", "Delete MethodInvocation(498)", "Delete ReturnStatement(499)", "Delete SimpleName: EXACT_MATCH(500)", "Delete SwitchCase(501)", "Delete SwitchStatement(502)", "Delete SimpleName: IllegalArgumentException(503)", "Delete SimpleType: IllegalArgumentException(504)", "Delete StringLiteral: \"Impossible match type in list of bad matches\"(505)", "Delete ClassInstanceCreation(506)", "Delete ThrowStatement(507)", "Delete SimpleType: Tree(691)", "Delete SimpleName: hasRequiresNamedParametersAnnotation(693)", "Delete SimpleName: RequiresNamedParameters(695)", "Delete SimpleType: RequiresNamedParameters(696)", "Delete TypeLiteral(697)", "Delete MethodInvocation(699)", "Delete MethodInvocation(700)", "Delete ReturnStatement(701)", "Delete PrimitiveType: boolean(730)", "Delete SimpleName: isCorrectlyAnnotated(731)", "Delete PrimitiveType: boolean(732)", "Delete SimpleName: commentRequired(733)", "Delete SingleVariableDeclaration(734)", "Delete SimpleName: match(735)", "Delete MethodInvocation(736)", "Delete BooleanLiteral: true(739)", "Delete ReturnStatement(740)", "Delete SimpleName: BAD_MATCH(741)", "Delete SwitchCase(742)", "Delete SimpleName: APPROXIMATE_MATCH(743)", "Delete SwitchCase(744)", "Delete BooleanLiteral: false(745)", "Delete ReturnStatement(746)", "Delete SimpleName: NOT_ANNOTATED(747)", "Delete SwitchCase(748)", "Delete SimpleName: commentRequired(749)", "Delete PrefixExpression: !(750)", "Delete ReturnStatement(751)", "Delete SwitchStatement(752)", "Delete BooleanLiteral: false(753)", "Delete ReturnStatement(754)", "Delete Block(755)", "Delete MethodDeclaration(756)", "Delete SimpleName: Optional(757)", "Delete SimpleType: Optional(758)", "Delete SimpleName: Comment(759)", "Delete SimpleType: Comment(760)", "Delete ParameterizedType: Optional<Comment>(761)", "Delete SimpleName: label(762)", "Delete SimpleName: Streams(763)", "Delete SimpleName: findLast(764)", "Delete SimpleName: actualParameter(765)", "Delete MethodInvocation(766)", "Delete SimpleName: beforeComments(767)", "Delete MethodInvocation(768)", "Delete SimpleName: stream(769)", "Delete MethodInvocation(770)", "Delete SimpleName: filter(771)", "Delete SimpleName: c(772)", "Delete VariableDeclarationFragment(773)", "Delete SimpleName: c(774)", "Delete SimpleName: getStyle(775)", "Delete MethodInvocation(776)", "Delete QualifiedName: CommentStyle.BLOCK(777)", "Delete InfixExpression: ==(778)", "Delete LambdaExpression(779)", "Delete MethodInvocation(780)", "Delete MethodInvocation(781)", "Delete ReturnStatement(782)", "Delete Block(783)", "Delete MethodDeclaration(784)"]}}, {"NamedParameterComment_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.google.auto.value.AutoValue to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: com.google.common.base.CharMatcher to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 6", "operations": ["INS ClassInstanceCreation to ThrowStatement at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: isDeprecated to MethodDeclaration at 3", "INS Modifier: static to MethodDeclaration at 0", "INS SimpleType: MatchedComment to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS SimpleName: CommentStyle to SimpleType: CommentStyle at 0", "INS MarkerAnnotation to TypeDeclaration: class at 0", "INS SimpleName: AutoValue_NamedParameterComment_MatchedComment to SimpleType: AutoValue_NamedParameterComment_MatchedComment at 0", "INS SimpleName: getSourcePos to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Comment to SimpleType: Comment at 0", "INS SimpleName: MatchedComment to SimpleType: MatchedComment at 0", "INS SimpleName: matchType to SingleVariableDeclaration at 1", "INS StringLiteral: \"Attempt to call getText on comment when in NOT_ANNOTATED state\" to ClassInstanceCreation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS QualifiedName: MatchType.NOT_ANNOTATED to ClassInstanceCreation at 2", "INS Block to MethodDeclaration at 4", "INS ThrowStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS Modifier: static to TypeDeclaration: class at 2", "INS ReturnStatement to Block at 0", "INS StringLiteral: \"Attempt to call getText on comment when in NOT_ANNOTATED state\" to ClassInstanceCreation at 1", "INS StringLiteral: \"Attempt to call getText on comment when in NOT_ANNOTATED state\" to ClassInstanceCreation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: i to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: getText to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS ClassInstanceCreation to ClassInstanceCreation at 1", "INS ThrowStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ThrowStatement to Block at 0", "INS Modifier: abstract to TypeDeclaration: class at 1", "INS MethodDeclaration to TypeDeclaration: class at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS StringLiteral: \"Attempt to call getText on comment when in NOT_ANNOTATED state\" to ClassInstanceCreation at 1", "INS SimpleName: Comment to SimpleType: Comment at 0", "INS SimpleName: AutoValue_NamedParameterComment_MatchedComment to SimpleType: AutoValue_NamedParameterComment_MatchedComment at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS Modifier: abstract to MethodDeclaration at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: matchType to MethodDeclaration at 2", "INS SimpleName: matchType to ClassInstanceCreation at 2", "INS SimpleType: Comment to SingleVariableDeclaration at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS Block to MethodDeclaration at 4", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: comment to ClassInstanceCreation at 1", "INS SimpleName: MatchType to SimpleType: MatchType at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: create to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5", "INS SimpleName: String to SimpleType: String at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 6", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: abstract to MethodDeclaration at 0", "INS SimpleName: comment to MethodDeclaration at 2", "INS SimpleType: String to MethodDeclaration at 2", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: MatchedComment to TypeDeclaration: class at 3", "INS Modifier: static to MethodDeclaration at 0", "INS SimpleName: getStyle to MethodDeclaration at 3", "INS SimpleName: notAnnotated to MethodDeclaration at 2", "INS SimpleName: AutoValue to MarkerAnnotation at 0", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleType: MatchedComment to MethodDeclaration at 1", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 3", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: MatchType to SingleVariableDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS SimpleType: Comment to ClassInstanceCreation at 0", "INS SimpleType: IllegalArgumentException to ClassInstanceCreation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Comment to SimpleType: Comment at 0", "INS SimpleType: AutoValue_NamedParameterComment_MatchedComment to ClassInstanceCreation at 0", "INS Block to MethodDeclaration at 3", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: AutoValue_NamedParameterComment_MatchedComment to ClassInstanceCreation at 0", "INS SimpleType: Comment to MethodDeclaration at 1", "INS SimpleName: comment to SingleVariableDeclaration at 1", "INS SimpleName: IllegalArgumentException to SimpleType: IllegalArgumentException at 0", "INS SimpleName: MatchedComment to SimpleType: MatchedComment at 0", "INS ThrowStatement to Block at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleType: CommentStyle to MethodDeclaration at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS SimpleType: String to VariableDeclarationStatement at 0", "INS SwitchStatement to Block at 0", "INS SimpleName: getTextFromComment to MethodInvocation at 1", "INS VariableDeclarationStatement to SwitchStatement at 3", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: getStyle to MethodInvocation at 1", "INS SimpleName: tooMuchMarkup to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: Comment to SimpleType: Comment at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Modifier: static to MethodDeclaration at 1", "INS VariableDeclarationStatement to SwitchStatement at 5", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS InfixExpression: > to InfixExpression: && at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS StringLiteral: \"[^a-zA-Z0-9_]+\" to MethodInvocation at 2", "INS MethodInvocation to SwitchStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: countIn to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"-*!@<>\" to MethodInvocation at 2", "INS SimpleName: contains to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: BLOCK to SwitchCase at 0", "INS SimpleName: Arrays to MethodInvocation at 0", "INS SimpleName: comment to SingleVariableDeclaration at 1", "INS InfixExpression: > to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to SwitchStatement at 4", "INS SimpleType: Comment to SingleVariableDeclaration at 0", "INS SimpleName: split to MethodInvocation at 1", "INS ReturnStatement to SwitchStatement at 7", "INS SimpleName: tooLong to VariableDeclarationFragment at 0", "INS SimpleName: comment to MethodInvocation at 0", "INS InfixExpression: > to InfixExpression: && at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS InfixExpression: && to VariableDeclarationFragment at 1", "INS ReturnStatement to SwitchStatement at 9", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: commentText to MethodInvocation at 2", "INS SimpleName: commentText to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to InfixExpression: + at 0", "INS NumberLiteral: 5 to InfixExpression: > at 1", "INS SimpleName: LINE to SwitchCase at 0", "INS VariableDeclarationStatement to SwitchStatement at 6", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Comments to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: formal to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: commentText to VariableDeclarationFragment at 0", "INS SwitchCase to SwitchStatement at 2", "INS SimpleName: commentText to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 2", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SwitchCase to SwitchStatement at 1", "INS SimpleName: CharMatcher to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: tooMuchMarkup to PrefixExpression: ! at 0", "INS NumberLiteral: 5 to InfixExpression: + at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: formal to MethodInvocation at 0", "INS SimpleName: formal to SingleVariableDeclaration at 1", "INS SimpleName: isApproximateMatchingComment to MethodDeclaration at 3", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SwitchCase to SwitchStatement at 8", "INS SimpleName: tooLong to PrefixExpression: ! at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: asList to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: && to ReturnStatement at 0", "INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: anyOf to MethodInvocation at 1", "INS NumberLiteral: 50 to InfixExpression: > at 1", "INS SimpleName: commentText to MethodInvocation at 0", "INS SimpleName: comment to MethodInvocation at 2", "INS SimpleName: textMatches to InfixExpression: && at 0", "INS InfixExpression: + to InfixExpression: > at 1", "INS SimpleName: textMatches to VariableDeclarationFragment at 0"]}, {"root": "INS SimpleType: MatchedComment to MethodDeclaration at 2", "operations": ["INS SimpleName: MatchedComment to SimpleType: MatchedComment at 0", "INS SimpleType: MatchedComment to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: MatchType to MethodDeclaration at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleType: Optional to ParameterizedType: Optional<Comment> at 0", "INS SimpleName: approximateMatchComment to VariableDeclarationFragment at 0", "INS SimpleName: Comment to SimpleType: Comment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Optional to SimpleType: Optional at 0", "INS VariableDeclarationStatement to Block at 2", "INS ParameterizedType: Optional<Comment> to VariableDeclarationStatement at 0", "INS SimpleType: Comment to ParameterizedType: Optional<Comment> at 1"]}, {"root": "INS IfStatement to Block at 3", "operations": ["INS QualifiedName: MatchType.APPROXIMATE_MATCH to MethodInvocation at 3", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: get to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS IfStatement to Block at 3", "INS SimpleName: MatchedComment to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: notAnnotated to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: MatchedComment to MethodInvocation at 0"]}, {"root": "UPDATE from formal to approximateMatchComment", "operations": ["UPD SimpleName: formal from formal to approximateMatchComment", "UPD SimpleName: comment from comment to approximateMatchComment"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: split to MethodInvocation at 1", "MOV SimpleName: comment to MethodInvocation at 0"]}, {"root": "UPDATE from split to isPresent", "operations": ["UPD SimpleName: split from split to isPresent"]}, {"root": "UPDATE from \"/*%s%s*/\" to \"/* %s%s */\"", "operations": ["UPD StringLiteral: \"/*%s%s*/\" from \"/*%s%s*/\" to \"/* %s%s */\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from asList to findFirst", "operations": ["UPD SimpleName: asList from asList to findFirst"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: asList to MethodInvocation at 1"]}, {"root": "UPDATE from map to filter", "operations": ["UPD SimpleName: map from map to filter"]}, {"root": "INS LambdaExpression to MethodInvocation at 2", "operations": ["INS SimpleName: formal to MethodInvocation at 2", "INS SimpleName: isApproximateMatchingComment to MethodInvocation at 0", "INS SimpleName: comment to MethodInvocation at 1", "INS MethodInvocation to LambdaExpression at 1", "INS LambdaExpression to MethodInvocation at 2"]}, {"root": "UPDATE from contains to create", "operations": ["UPD SimpleName: contains from contains to create"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: formal to MethodInvocation at 0", "MOV SimpleName: contains to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: MatchedComment to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: create to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: lastBlockComment to MethodInvocation at 0"]}, {"root": "MOVE from LambdaExpression", "operations": ["MOV VariableDeclarationFragment to LambdaExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ConditionalExpression to MethodInvocation at 3"]}, {"root": "DEL ExpressionMethodReference", "operations": ["DEL SimpleName: Comments", "DEL SimpleName: getTextFromComment", "DEL ExpressionMethodReference"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL MethodInvocation", "DEL StringLiteral: \"[^a-zA-Z0-9_]+\"", "DEL LambdaExpression", "DEL ReturnStatement", "DEL SimpleName: anyMatch", "DEL MethodInvocation", "DEL QualifiedName: MatchType.APPROXIMATE_MATCH", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: Arrays"]}, {"root": "DEL QualifiedName: MatchType.NOT_ANNOTATED", "operations": ["DEL QualifiedName: MatchType.NOT_ANNOTATED"]}]}}, {"NamedParameterComment_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(437) at 1", "Insert ImportDeclaration(5) into CompilationUnit(437) at 2", "Insert QualifiedName: com.google.auto.value.AutoValue(2) into ImportDeclaration(3) at 0", "Insert TypeDeclaration: class(186) into TypeDeclaration: class(436) at 6", "Insert MethodDeclaration(273) into TypeDeclaration: class(436) at 7", "Insert MarkerAnnotation(84) into TypeDeclaration: class(186) at 0", "Insert Modifier: abstract(85) into TypeDeclaration: class(186) at 1", "Insert Modifier: static(86) into TypeDeclaration: class(186) at 2", "Insert MethodDeclaration(92) into TypeDeclaration: class(186) at 4", "Insert MethodDeclaration(97) into TypeDeclaration: class(186) at 5", "Insert MethodDeclaration(117) into TypeDeclaration: class(186) at 6", "Insert MethodDeclaration(185) into TypeDeclaration: class(186) at 7", "Insert Modifier: private(187) into MethodDeclaration(273) at 0", "Insert Modifier: static(188) into MethodDeclaration(273) at 1", "Insert PrimitiveType: boolean(189) into MethodDeclaration(273) at 2", "Insert SingleVariableDeclaration(194) into MethodDeclaration(273) at 4", "Insert SingleVariableDeclaration(198) into MethodDeclaration(273) at 5", "Insert Block(272) into MethodDeclaration(273) at 6", "Insert SimpleName: AutoValue(83) into MarkerAnnotation(84) at 0", "Insert Modifier: abstract(88) into MethodDeclaration(92) at 0", "Insert SimpleType: Comment(90) into MethodDeclaration(92) at 1", "Insert SimpleName: comment(91) into MethodDeclaration(92) at 2", "Insert Modifier: abstract(93) into MethodDeclaration(97) at 0", "Insert SimpleName: matchType(96) into MethodDeclaration(97) at 2", "Insert Modifier: static(98) into MethodDeclaration(117) at 0", "Insert SimpleName: create(101) into MethodDeclaration(117) at 2", "Insert SingleVariableDeclaration(105) into MethodDeclaration(117) at 3", "Insert SingleVariableDeclaration(109) into MethodDeclaration(117) at 4", "Insert Block(116) into MethodDeclaration(117) at 5", "Insert Modifier: static(118) into MethodDeclaration(185) at 0", "Insert SimpleName: notAnnotated(121) into MethodDeclaration(185) at 2", "Insert Block(184) into MethodDeclaration(185) at 3", "Insert SimpleType: Comment(192) into SingleVariableDeclaration(194) at 0", "Insert SimpleName: comment(193) into SingleVariableDeclaration(194) at 1", "Insert SimpleType: String(196) into SingleVariableDeclaration(198) at 0", "Insert SimpleName: formal(197) into SingleVariableDeclaration(198) at 1", "Insert SwitchStatement(271) into Block(272) at 0", "Insert VariableDeclarationStatement(391) into Block(409) at 2", "Insert IfStatement(404) into Block(409) at 3", "Insert SimpleName: Comment(89) into SimpleType: Comment(90) at 0", "Insert SimpleType: Comment(103) into SingleVariableDeclaration(105) at 0", "Insert SimpleName: comment(104) into SingleVariableDeclaration(105) at 1", "Insert SimpleName: matchType(108) into SingleVariableDeclaration(109) at 1", "Insert ReturnStatement(115) into Block(116) at 0", "Insert ReturnStatement(183) into Block(184) at 0", "Insert SimpleName: Comment(191) into SimpleType: Comment(192) at 0", "Insert SimpleName: String(195) into SimpleType: String(196) at 0", "Insert MethodInvocation(201) into SwitchStatement(271) at 0", "Insert SwitchCase(203) into SwitchStatement(271) at 1", "Insert SwitchCase(205) into SwitchStatement(271) at 2", "Insert VariableDeclarationStatement(214) into SwitchStatement(271) at 3", "Insert VariableDeclarationStatement(228) into SwitchStatement(271) at 4", "Insert VariableDeclarationStatement(247) into SwitchStatement(271) at 5", "Insert VariableDeclarationStatement(260) into SwitchStatement(271) at 6", "Insert ReturnStatement(267) into SwitchStatement(271) at 7", "Insert SwitchCase(268) into SwitchStatement(271) at 8", "Insert ReturnStatement(270) into SwitchStatement(271) at 9", "Insert ParameterizedType: Optional<Comment>(364) into VariableDeclarationStatement(391) at 0", "Insert VariableDeclarationFragment(390) into VariableDeclarationStatement(391) at 1", "Insert MethodInvocation(394) into IfStatement(404) at 0", "Insert Block(403) into IfStatement(404) at 1", "Insert MethodInvocation(407) into ReturnStatement(408) at 0", "Insert SimpleName: Comment(102) into SimpleType: Comment(103) at 0", "Insert ClassInstanceCreation(114) into ReturnStatement(115) at 0", "Insert ClassInstanceCreation(182) into ReturnStatement(183) at 0", "Insert SimpleName: comment(199) into MethodInvocation(201) at 0", "Insert SimpleName: getStyle(200) into MethodInvocation(201) at 1", "Insert SimpleName: BLOCK(202) into SwitchCase(203) at 0", "Insert SimpleName: LINE(204) into SwitchCase(205) at 0", "Insert SimpleType: String(207) into VariableDeclarationStatement(214) at 0", "Insert VariableDeclarationFragment(213) into VariableDeclarationStatement(214) at 1", "Insert PrimitiveType: boolean(215) into VariableDeclarationStatement(228) at 0", "Insert VariableDeclarationFragment(227) into VariableDeclarationStatement(228) at 1", "Insert PrimitiveType: boolean(229) into VariableDeclarationStatement(247) at 0", "Insert VariableDeclarationFragment(246) into VariableDeclarationStatement(247) at 1", "Insert PrimitiveType: boolean(248) into VariableDeclarationStatement(260) at 0", "Insert VariableDeclarationFragment(259) into VariableDeclarationStatement(260) at 1", "Insert InfixExpression: &&(266) into ReturnStatement(267) at 0", "Insert BooleanLiteral: false(269) into ReturnStatement(270) at 0", "Insert SimpleType: Optional(361) into ParameterizedType: Optional<Comment>(364) at 0", "Insert SimpleType: Comment(363) into ParameterizedType: Optional<Comment>(364) at 1", "Insert MethodInvocation(389) into VariableDeclarationFragment(390) at 1", "Move SimpleName: comment(182) into MethodInvocation(394) at 0", "Update SimpleName: split(183) to isPresent", "Move SimpleName: split(183) into MethodInvocation(394) at 1", "Insert ReturnStatement(402) into Block(403) at 0", "Insert SimpleName: notAnnotated(406) into MethodInvocation(407) at 1", "Update StringLiteral: \"/*%s%s*/\"(214) to \"/* %s%s */\"", "Insert SimpleName: comment(112) into ClassInstanceCreation(114) at 1", "Insert SimpleName: matchType(113) into ClassInstanceCreation(114) at 2", "Insert ClassInstanceCreation(180) into ClassInstanceCreation(182) at 1", "Insert SimpleName: String(206) into SimpleType: String(207) at 0", "Insert SimpleName: commentText(208) into VariableDeclarationFragment(213) at 0", "Insert MethodInvocation(212) into VariableDeclarationFragment(213) at 1", "Insert MethodInvocation(226) into VariableDeclarationFragment(227) at 1", "Insert SimpleName: tooLong(230) into VariableDeclarationFragment(246) at 0", "Insert InfixExpression: &&(245) into VariableDeclarationFragment(246) at 1", "Insert SimpleName: tooMuchMarkup(249) into VariableDeclarationFragment(259) at 0", "Insert InfixExpression: >(258) into VariableDeclarationFragment(259) at 1", "Insert PrefixExpression: !(263) into InfixExpression: &&(266) at 1", "Insert PrefixExpression: !(265) into InfixExpression: &&(266) at 2", "Insert SimpleName: Optional(360) into SimpleType: Optional(361) at 0", "Insert SimpleName: Comment(362) into SimpleType: Comment(363) at 0", "Move MethodInvocation(176) into MethodInvocation(389) at 0", "Update SimpleName: asList(181) to findFirst", "Move SimpleName: asList(181) into MethodInvocation(389) at 1", "Insert MethodInvocation(401) into ReturnStatement(402) at 0", "Insert SimpleType: Comment(125) into ClassInstanceCreation(180) at 0", "Insert AnonymousClassDeclaration(179) into ClassInstanceCreation(180) at 1", "Insert SimpleName: Comments(209) into MethodInvocation(212) at 0", "Insert SimpleName: getTextFromComment(210) into MethodInvocation(212) at 1", "Insert SimpleName: comment(211) into MethodInvocation(212) at 2", "Insert MethodInvocation(223) into MethodInvocation(226) at 0", "Insert SimpleName: contains(224) into MethodInvocation(226) at 1", "Insert SimpleName: formal(225) into MethodInvocation(226) at 2", "Insert InfixExpression: >(239) into InfixExpression: &&(245) at 0", "Insert InfixExpression: >(244) into InfixExpression: &&(245) at 1", "Insert MethodInvocation(256) into InfixExpression: >(258) at 0", "Insert NumberLiteral: 5(257) into InfixExpression: >(258) at 1", "Insert SimpleName: tooLong(262) into PrefixExpression: !(263) at 0", "Insert SimpleName: tooMuchMarkup(264) into PrefixExpression: !(265) at 0", "Update SimpleName: map(172) to filter", "Insert LambdaExpression(386) into MethodInvocation(387) at 2", "Update SimpleName: contains(187) to create", "Move SimpleName: contains(187) into MethodInvocation(401) at 1", "Insert MethodInvocation(399) into MethodInvocation(401) at 2", "Insert SimpleName: Comment(124) into SimpleType: Comment(125) at 0", "Insert MethodDeclaration(138) into AnonymousClassDeclaration(179) at 0", "Insert MethodDeclaration(153) into AnonymousClassDeclaration(179) at 1", "Insert MethodDeclaration(166) into AnonymousClassDeclaration(179) at 2", "Insert MethodDeclaration(178) into AnonymousClassDeclaration(179) at 3", "Insert SimpleName: Arrays(217) into MethodInvocation(223) at 0", "Insert SimpleName: asList(218) into MethodInvocation(223) at 1", "Insert MethodInvocation(222) into MethodInvocation(223) at 2", "Insert MethodInvocation(233) into InfixExpression: >(239) at 0", "Insert InfixExpression: +(238) into InfixExpression: >(239) at 1", "Insert MethodInvocation(242) into InfixExpression: >(244) at 0", "Insert NumberLiteral: 50(243) into InfixExpression: >(244) at 1", "Insert MethodInvocation(253) into MethodInvocation(256) at 0", "Insert SimpleName: countIn(254) into MethodInvocation(256) at 1", "Insert SimpleName: commentText(255) into MethodInvocation(256) at 2", "Insert MethodInvocation(354) into ReturnStatement(355) at 0", "Move VariableDeclarationFragment(179) into LambdaExpression(386) at 0", "Insert MethodInvocation(385) into LambdaExpression(386) at 1", "Move SimpleName: formal(188) into MethodInvocation(399) at 0", "Insert SimpleName: get(398) into MethodInvocation(399) at 1", "Insert MarkerAnnotation(127) into MethodDeclaration(138) at 0", "Insert Modifier: public(128) into MethodDeclaration(138) at 1", "Insert SimpleType: String(130) into MethodDeclaration(138) at 2", "Insert SimpleName: getText(131) into MethodDeclaration(138) at 3", "Insert Block(137) into MethodDeclaration(138) at 4", "Insert MarkerAnnotation(140) into MethodDeclaration(153) at 0", "Insert Modifier: public(141) into MethodDeclaration(153) at 1", "Insert PrimitiveType: int(142) into MethodDeclaration(153) at 2", "Insert SimpleName: getSourcePos(143) into MethodDeclaration(153) at 3", "Insert SingleVariableDeclaration(146) into MethodDeclaration(153) at 4", "Insert Block(152) into MethodDeclaration(153) at 5", "Insert MarkerAnnotation(155) into MethodDeclaration(166) at 0", "Insert Modifier: public(156) into MethodDeclaration(166) at 1", "Insert SimpleType: CommentStyle(158) into MethodDeclaration(166) at 2", "Insert SimpleName: getStyle(159) into MethodDeclaration(166) at 3", "Insert Block(165) into MethodDeclaration(166) at 4", "Insert MarkerAnnotation(168) into MethodDeclaration(178) at 0", "Insert Modifier: public(169) into MethodDeclaration(178) at 1", "Insert PrimitiveType: boolean(170) into MethodDeclaration(178) at 2", "Insert SimpleName: isDeprecated(171) into MethodDeclaration(178) at 3", "Insert Block(177) into MethodDeclaration(178) at 4", "Insert SimpleName: commentText(219) into MethodInvocation(222) at 0", "Insert SimpleName: split(220) into MethodInvocation(222) at 1", "Insert StringLiteral: \"[^a-zA-Z0-9_]+\"(221) into MethodInvocation(222) at 2", "Insert SimpleName: commentText(231) into MethodInvocation(233) at 0", "Insert SimpleName: length(232) into MethodInvocation(233) at 1", "Insert MethodInvocation(236) into InfixExpression: +(238) at 0", "Insert NumberLiteral: 5(237) into InfixExpression: +(238) at 1", "Insert SimpleName: commentText(240) into MethodInvocation(242) at 0", "Insert SimpleName: length(241) into MethodInvocation(242) at 1", "Insert SimpleName: anyOf(251) into MethodInvocation(253) at 1", "Insert StringLiteral: \"-*!@<>\"(252) into MethodInvocation(253) at 2", "Insert SimpleName: create(340) into MethodInvocation(354) at 1", "Insert MethodInvocation(343) into MethodInvocation(354) at 2", "Move ConditionalExpression(153) into MethodInvocation(354) at 3", "Insert SimpleName: comment(383) into MethodInvocation(385) at 1", "Insert SimpleName: formal(384) into MethodInvocation(385) at 2", "Insert SimpleName: Override(126) into MarkerAnnotation(127) at 0", "Insert SimpleName: String(129) into SimpleType: String(130) at 0", "Insert ThrowStatement(136) into Block(137) at 0", "Insert SimpleName: Override(139) into MarkerAnnotation(140) at 0", "Insert PrimitiveType: int(144) into SingleVariableDeclaration(146) at 0", "Insert SimpleName: i(145) into SingleVariableDeclaration(146) at 1", "Insert ThrowStatement(151) into Block(152) at 0", "Insert SimpleName: Override(154) into MarkerAnnotation(155) at 0", "Insert SimpleName: CommentStyle(157) into SimpleType: CommentStyle(158) at 0", "Insert ThrowStatement(164) into Block(165) at 0", "Insert SimpleName: Override(167) into MarkerAnnotation(168) at 0", "Insert ThrowStatement(176) into Block(177) at 0", "Insert SimpleName: formal(234) into MethodInvocation(236) at 0", "Insert SimpleName: length(235) into MethodInvocation(236) at 1", "Insert SimpleName: lastBlockComment(341) into MethodInvocation(343) at 0", "Insert SimpleName: get(342) into MethodInvocation(343) at 1", "Insert ClassInstanceCreation(135) into ThrowStatement(136) at 0", "Insert ClassInstanceCreation(150) into ThrowStatement(151) at 0", "Insert ClassInstanceCreation(163) into ThrowStatement(164) at 0", "Insert ClassInstanceCreation(175) into ThrowStatement(176) at 0", "Insert SimpleType: IllegalArgumentException(133) into ClassInstanceCreation(135) at 0", "Insert StringLiteral: \"Attempt to call getText on comment when in NOT_ANNOTATED state\"(134) into ClassInstanceCreation(135) at 1", "Insert SimpleType: IllegalArgumentException(148) into ClassInstanceCreation(150) at 0", "Insert StringLiteral: \"Attempt to call getText on comment when in NOT_ANNOTATED state\"(149) into ClassInstanceCreation(150) at 1", "Insert SimpleType: IllegalArgumentException(161) into ClassInstanceCreation(163) at 0", "Insert StringLiteral: \"Attempt to call getText on comment when in NOT_ANNOTATED state\"(162) into ClassInstanceCreation(163) at 1", "Insert SimpleType: IllegalArgumentException(173) into ClassInstanceCreation(175) at 0", "Insert StringLiteral: \"Attempt to call getText on comment when in NOT_ANNOTATED state\"(174) into ClassInstanceCreation(175) at 1", "Insert SimpleName: IllegalArgumentException(132) into SimpleType: IllegalArgumentException(133) at 0", "Insert SimpleName: IllegalArgumentException(147) into SimpleType: IllegalArgumentException(148) at 0", "Insert SimpleName: IllegalArgumentException(160) into SimpleType: IllegalArgumentException(161) at 0", "Insert SimpleName: IllegalArgumentException(172) into SimpleType: IllegalArgumentException(173) at 0", "Delete SimpleName: Comments(173)", "Delete SimpleName: getTextFromComment(174)", "Delete ExpressionMethodReference(175)", "Delete SimpleName: Arrays(180)", "Delete StringLiteral: \"[^a-zA-Z0-9_]+\"(184)", "Delete MethodInvocation(185)", "Delete MethodInvocation(186)", "Delete MethodInvocation(189)", "Delete LambdaExpression(190)", "Delete MethodInvocation(191)", "Delete ReturnStatement(193)", "Delete Block(194)", "Delete IfStatement(195)"]}}], "commit_stats": [{"total_files": 9, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}