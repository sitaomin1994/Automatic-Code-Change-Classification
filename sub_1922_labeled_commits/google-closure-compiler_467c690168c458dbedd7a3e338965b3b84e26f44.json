{"application": "google-closure-compiler", "csha": "467c690168c458dbedd7a3e338965b3b84e26f44", "files": [{"AggressiveInlineAliases_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: alias to TagElement: @param at 0", "INS SimpleName: getParent to MethodInvocation at 1", "INS SimpleName: aliasParent to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Ref to SingleVariableDeclaration at 0", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS BooleanLiteral: true to ReturnStatement at 0", "INS TagElement: @param to Javadoc at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS IfStatement to Block at 0", "INS TagElement: @return to Javadoc at 2", "INS SimpleName: aliasParent to MethodInvocation at 0", "INS TextElement: caution than with locally scoped variables. May return false positives. to TagElement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: getParent to MethodInvocation at 1", "INS SimpleName: getParent to MethodInvocation at 1", "INS ReturnStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ReturnStatement to Block at 0", "INS QualifiedName: alias.scope to MethodInvocation at 0", "INS TextElement:  If the alias is possibly defined in the global scope. to TagElement: @return at 0", "INS IfStatement to Block at 2", "INS Block to MethodDeclaration at 5", "INS QualifiedName: alias.node to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 1", "INS Block to IfStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: isConst to MethodInvocation at 1", "INS TagElement to Javadoc at 0", "INS InfixExpression: || to IfStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 1", "INS SimpleName: Ref to SimpleType: Ref at 0", "INS TextElement:  An aliasing get. to TagElement: @param at 1", "INS SimpleName: isGlobal to MethodInvocation at 1", "INS SimpleName: isName to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: alias to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: aliasParent to VariableDeclarationFragment at 0", "INS TextElement: Returns true if the alias is possibly defined in the global scope, which we handle with more to TagElement at 0", "INS SimpleName: mayBeGlobalAlias to MethodDeclaration at 3", "INS SimpleName: isLet to MethodInvocation at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS IfStatement to Block at 0", "INS SimpleName: aliasParent to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: getParent to MethodInvocation at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: aliasParent to MethodInvocation at 0", "INS SimpleName: declarationType to VariableDeclarationFragment at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ParenthesizedExpression to InfixExpression: || at 0", "operations": ["INS ParenthesizedExpression to InfixExpression: || at 0"]}, {"root": "INS ParenthesizedExpression to InfixExpression: || at 1", "operations": ["INS ParenthesizedExpression to InfixExpression: || at 1"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InfixExpression: && to ParenthesizedExpression at 0", "MOV InfixExpression: && to ParenthesizedExpression at 0"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS QualifiedName: alias.scope to ConditionalExpression at 2", "INS SimpleName: declarationType to MethodInvocation at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to ConditionalExpression at 0", "INS QualifiedName: alias.scope to MethodInvocation at 0", "INS SimpleName: isVar to MethodInvocation at 1", "INS SimpleName: getClosestHoistScope to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: hoistScope to VariableDeclarationFragment at 0", "INS SimpleType: Scope to VariableDeclarationStatement at 0", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS SimpleName: getClosestHoistScope to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS QualifiedName: ref.scope to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "INS ParenthesizedExpression to InfixExpression: && at 1", "operations": ["INS ParenthesizedExpression to InfixExpression: && at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: mayBeGlobalAlias to MethodInvocation at 0", "INS SimpleName: ref to MethodInvocation at 1", "INS PrefixExpression: ! to InfixExpression: || at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV MethodInvocation to InfixExpression: || at 0"]}, {"root": "INS SimpleName: hoistScope to MethodInvocation at 0", "operations": ["INS SimpleName: hoistScope to MethodInvocation at 0"]}, {"root": "INS SimpleName: hoistScope to MethodInvocation at 0", "operations": ["INS SimpleName: hoistScope to MethodInvocation at 0"]}, {"root": "DEL QualifiedName: ref.scope", "operations": ["DEL QualifiedName: ref.scope"]}, {"root": "DEL QualifiedName: ref.scope", "operations": ["DEL QualifiedName: ref.scope"]}, {"root": "DEL QualifiedName: alias.scope", "operations": ["DEL QualifiedName: alias.scope"]}]}}, {"AggressiveInlineAliases_diff": {"operations": ["Insert MethodDeclaration(606) into TypeDeclaration: class(1115) at 11", "Insert Javadoc(560) into MethodDeclaration(606) at 0", "Insert Modifier: private(561) into MethodDeclaration(606) at 1", "Insert PrimitiveType: boolean(562) into MethodDeclaration(606) at 2", "Insert SimpleName: mayBeGlobalAlias(563) into MethodDeclaration(606) at 3", "Insert SingleVariableDeclaration(567) into MethodDeclaration(606) at 4", "Insert Block(605) into MethodDeclaration(606) at 5", "Insert TagElement(554) into Javadoc(560) at 0", "Insert TagElement: @param(557) into Javadoc(560) at 1", "Insert TagElement: @return(559) into Javadoc(560) at 2", "Insert SimpleType: Ref(565) into SingleVariableDeclaration(567) at 0", "Insert SimpleName: alias(566) into SingleVariableDeclaration(567) at 1", "Insert IfStatement(574) into Block(605) at 0", "Insert VariableDeclarationStatement(582) into Block(605) at 1", "Insert IfStatement(602) into Block(605) at 2", "Insert ReturnStatement(604) into Block(605) at 3", "Insert TextElement: Returns true if the alias is possibly defined in the global scope, which we handle with more(552) into TagElement(554) at 0", "Insert TextElement: caution than with locally scoped variables. May return false positives.(553) into TagElement(554) at 1", "Insert SimpleName: alias(555) into TagElement: @param(557) at 0", "Insert TextElement:  An aliasing get.(556) into TagElement: @param(557) at 1", "Insert TextElement:  If the alias is possibly defined in the global scope.(558) into TagElement: @return(559) at 0", "Insert SimpleName: Ref(564) into SimpleType: Ref(565) at 0", "Insert MethodInvocation(570) into IfStatement(574) at 0", "Insert Block(573) into IfStatement(574) at 1", "Insert SimpleType: Node(576) into VariableDeclarationStatement(582) at 0", "Insert VariableDeclarationFragment(581) into VariableDeclarationStatement(582) at 1", "Insert MethodInvocation(585) into IfStatement(602) at 0", "Insert Block(601) into IfStatement(602) at 1", "Insert BooleanLiteral: true(603) into ReturnStatement(604) at 0", "Insert QualifiedName: alias.scope(568) into MethodInvocation(570) at 0", "Insert SimpleName: isGlobal(569) into MethodInvocation(570) at 1", "Insert ReturnStatement(572) into Block(573) at 0", "Insert SimpleName: Node(575) into SimpleType: Node(576) at 0", "Insert SimpleName: aliasParent(577) into VariableDeclarationFragment(581) at 0", "Insert MethodInvocation(580) into VariableDeclarationFragment(581) at 1", "Insert SimpleName: aliasParent(583) into MethodInvocation(585) at 0", "Insert SimpleName: isName(584) into MethodInvocation(585) at 1", "Insert IfStatement(600) into Block(601) at 0", "Insert VariableDeclarationStatement(640) into Block(865) at 0", "Insert ParenthesizedExpression(917) into InfixExpression: ||(926) at 0", "Insert ParenthesizedExpression(925) into InfixExpression: ||(926) at 1", "Insert BooleanLiteral: true(571) into ReturnStatement(572) at 0", "Insert QualifiedName: alias.node(578) into MethodInvocation(580) at 0", "Insert SimpleName: getParent(579) into MethodInvocation(580) at 1", "Insert InfixExpression: ||(596) into IfStatement(600) at 0", "Insert Block(599) into IfStatement(600) at 1", "Insert SimpleType: Node(634) into VariableDeclarationStatement(640) at 0", "Insert VariableDeclarationFragment(639) into VariableDeclarationStatement(640) at 1", "Move InfixExpression: &&(832) into ParenthesizedExpression(917) at 0", "Move InfixExpression: &&(839) into ParenthesizedExpression(925) at 0", "Insert MethodInvocation(590) into InfixExpression: ||(596) at 0", "Insert MethodInvocation(595) into InfixExpression: ||(596) at 1", "Insert ReturnStatement(598) into Block(599) at 0", "Insert SimpleName: Node(633) into SimpleType: Node(634) at 0", "Insert SimpleName: declarationType(635) into VariableDeclarationFragment(639) at 0", "Insert MethodInvocation(638) into VariableDeclarationFragment(639) at 1", "Insert ConditionalExpression(651) into VariableDeclarationFragment(652) at 1", "Insert MethodInvocation(588) into MethodInvocation(590) at 0", "Insert SimpleName: isLet(589) into MethodInvocation(590) at 1", "Insert MethodInvocation(593) into MethodInvocation(595) at 0", "Insert SimpleName: isConst(594) into MethodInvocation(595) at 1", "Insert BooleanLiteral: false(597) into ReturnStatement(598) at 0", "Insert SimpleName: aliasParent(636) into MethodInvocation(638) at 0", "Insert SimpleName: getParent(637) into MethodInvocation(638) at 1", "Insert MethodInvocation(646) into ConditionalExpression(651) at 0", "Insert MethodInvocation(649) into ConditionalExpression(651) at 1", "Insert QualifiedName: alias.scope(650) into ConditionalExpression(651) at 2", "Insert VariableDeclarationStatement(466) into Block(521) at 0", "Insert SimpleName: aliasParent(586) into MethodInvocation(588) at 0", "Insert SimpleName: getParent(587) into MethodInvocation(588) at 1", "Insert SimpleName: aliasParent(591) into MethodInvocation(593) at 0", "Insert SimpleName: getParent(592) into MethodInvocation(593) at 1", "Insert SimpleName: declarationType(644) into MethodInvocation(646) at 0", "Insert SimpleName: isVar(645) into MethodInvocation(646) at 1", "Insert QualifiedName: alias.scope(647) into MethodInvocation(649) at 0", "Insert SimpleName: getClosestHoistScope(648) into MethodInvocation(649) at 1", "Insert SimpleType: Scope(460) into VariableDeclarationStatement(466) at 0", "Insert VariableDeclarationFragment(465) into VariableDeclarationStatement(466) at 1", "Insert SimpleName: Scope(459) into SimpleType: Scope(460) at 0", "Insert SimpleName: hoistScope(461) into VariableDeclarationFragment(465) at 0", "Insert MethodInvocation(464) into VariableDeclarationFragment(465) at 1", "Insert ParenthesizedExpression(478) into InfixExpression: &&(479) at 1", "Insert QualifiedName: ref.scope(462) into MethodInvocation(464) at 0", "Insert SimpleName: getClosestHoistScope(463) into MethodInvocation(464) at 1", "Insert InfixExpression: ||(477) into ParenthesizedExpression(478) at 0", "Move MethodInvocation(464) into InfixExpression: ||(477) at 0", "Insert PrefixExpression: !(476) into InfixExpression: ||(477) at 1", "Insert SimpleName: hoistScope(470) into MethodInvocation(472) at 0", "Insert MethodInvocation(475) into PrefixExpression: !(476) at 0", "Insert SimpleName: hoistScope(496) into MethodInvocation(498) at 0", "Insert SimpleName: mayBeGlobalAlias(473) into MethodInvocation(475) at 0", "Insert SimpleName: ref(474) into MethodInvocation(475) at 1", "Delete QualifiedName: ref.scope(462)", "Delete QualifiedName: ref.scope(482)", "Delete QualifiedName: alias.scope(567)"]}}, {"CheckGlobalNames_cluster": {"actions": [{"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getClosestHoistScope to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: ref.scope to MethodInvocation at 0"]}]}}, {"CheckGlobalNames_diff": {"operations": ["Insert MethodInvocation(490) into MethodInvocation(492) at 0", "Move QualifiedName: ref.scope(488) into MethodInvocation(490) at 0", "Insert SimpleName: getClosestHoistScope(489) into MethodInvocation(490) at 1"]}}, {"GlobalNamespace_cluster": {"actions": [{"root": "INS Javadoc to FieldDeclaration at 0", "operations": ["INS TextElement: this scope may not be the correct hoist scope of the aliasing VAR. to TagElement at 1", "INS Javadoc to FieldDeclaration at 0", "INS TextElement: The scope in which the reference is resolved. Note that for ALIASING_GETS like \"var x = ns;\" to TagElement at 0", "INS TagElement to Javadoc at 0"]}, {"root": "UPDATE from Updates our representation of the global namespace to reflect an to Updates our representation of the global namespace to reflect an assignment to a global name", "operations": ["UPD TextElement: Updates our representation of the global namespace to reflect an from Updates our representation of the global namespace to reflect an to Updates our representation of the global namespace to reflect an assignment to a global name"]}, {"root": "UPDATE from assignment to a global name in global scope. to in any scope where variables are hoisted to the global scope (i.e. the global scope in an ES5", "operations": ["UPD TextElement: assignment to a global name in global scope. from assignment to a global name in global scope. to in any scope where variables are hoisted to the global scope (i.e. the global scope in an ES5"]}, {"root": "INS TextElement: sense). to TagElement at 2", "operations": ["INS TextElement: sense). to TagElement at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: Scope to SimpleType: Scope at 0", "INS SimpleType: Scope to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: hoistScope to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from scope to hoistScope", "operations": ["UPD SimpleName: scope from scope to hoistScope"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: scope", "DEL Assignment: ="]}]}}, {"GlobalNamespace_diff": {"operations": ["Insert Javadoc(4145) into FieldDeclaration(4151) at 0", "Insert TagElement(4144) into Javadoc(4145) at 0", "Update TextElement: Updates our representation of the global namespace to reflect an(1688) to Updates our representation of the global namespace to reflect an assignment to a global name", "Update TextElement: assignment to a global name in global scope.(1689) to in any scope where variables are hoisted to the global scope (i.e. the global scope in an ES5", "Insert TextElement: sense).(1692) into TagElement(1693) at 2", "Insert TextElement: The scope in which the reference is resolved. Note that for ALIASING_GETS like \"var x = ns;\"(4142) into TagElement(4144) at 0", "Insert TextElement: this scope may not be the correct hoist scope of the aliasing VAR.(4143) into TagElement(4144) at 1", "Insert VariableDeclarationStatement(1324) into Block(1351) at 0", "Insert SimpleType: Scope(1318) into VariableDeclarationStatement(1324) at 0", "Insert VariableDeclarationFragment(1323) into VariableDeclarationStatement(1324) at 1", "Insert SimpleName: Scope(1317) into SimpleType: Scope(1318) at 0", "Insert SimpleName: hoistScope(1319) into VariableDeclarationFragment(1323) at 0", "Move MethodInvocation(1319) into VariableDeclarationFragment(1323) at 1", "Update SimpleName: scope(1323) to hoistScope", "Delete SimpleName: scope(1316)", "Delete Assignment: =(1320)", "Delete ExpressionStatement(1321)"]}}, {"ReferenceCollectingCallback_cluster": {"actions": [{"root": "INS Block to MethodDeclaration at 4", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: blockStack to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: BasicBlock to ClassInstanceCreation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: blockStack to MethodInvocation at 1", "INS PrefixExpression: ! to VariableDeclarationFragment at 1", "INS SimpleName: isHoistScope to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: shouldAddToBlockStack to IfStatement at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: scope to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: BasicBlock to SimpleType: BasicBlock at 0", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS IfStatement to Block at 4", "INS SimpleName: shouldAddToBlockStack to VariableDeclarationFragment at 0", "INS SimpleName: getRootNode to MethodInvocation at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: scope to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS IfStatement to Block at 2", "INS SimpleName: pop to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS NullLiteral to ClassInstanceCreation at 1", "INS SimpleName: shouldAddToBlockStack to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 3", "MOV ExpressionStatement to Block at 1"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"ReferenceCollectingCallback_diff": {"operations": ["Insert Block(381) into MethodDeclaration(382) at 4", "Insert VariableDeclarationStatement(336) into Block(381) at 0", "Move ExpressionStatement(334) into Block(381) at 1", "Insert IfStatement(356) into Block(381) at 2", "Move ExpressionStatement(345) into Block(381) at 3", "Insert IfStatement(374) into Block(381) at 4", "Move ExpressionStatement(351) into Block(381) at 5", "Insert PrimitiveType: boolean(329) into VariableDeclarationStatement(336) at 0", "Insert VariableDeclarationFragment(335) into VariableDeclarationStatement(336) at 1", "Insert SimpleName: shouldAddToBlockStack(343) into IfStatement(356) at 0", "Insert Block(355) into IfStatement(356) at 1", "Insert SimpleName: shouldAddToBlockStack(368) into IfStatement(374) at 0", "Insert Block(373) into IfStatement(374) at 1", "Insert SimpleName: shouldAddToBlockStack(330) into VariableDeclarationFragment(335) at 0", "Insert PrefixExpression: !(334) into VariableDeclarationFragment(335) at 1", "Insert ExpressionStatement(354) into Block(355) at 0", "Insert ExpressionStatement(372) into Block(373) at 0", "Insert MethodInvocation(333) into PrefixExpression: !(334) at 0", "Insert MethodInvocation(353) into ExpressionStatement(354) at 0", "Insert MethodInvocation(371) into ExpressionStatement(372) at 0", "Insert SimpleName: scope(331) into MethodInvocation(333) at 0", "Insert SimpleName: isHoistScope(332) into MethodInvocation(333) at 1", "Insert SimpleName: blockStack(344) into MethodInvocation(353) at 0", "Insert SimpleName: add(345) into MethodInvocation(353) at 1", "Insert ClassInstanceCreation(352) into MethodInvocation(353) at 2", "Insert SimpleName: pop(369) into MethodInvocation(371) at 0", "Insert SimpleName: blockStack(370) into MethodInvocation(371) at 1", "Insert SimpleType: BasicBlock(347) into ClassInstanceCreation(352) at 0", "Insert NullLiteral(348) into ClassInstanceCreation(352) at 1", "Insert MethodInvocation(351) into ClassInstanceCreation(352) at 2", "Insert SimpleName: BasicBlock(346) into SimpleType: BasicBlock(347) at 0", "Insert SimpleName: scope(349) into MethodInvocation(351) at 0", "Insert SimpleName: getRootNode(350) into MethodInvocation(351) at 1", "Delete Block(352)"]}}], "commit_stats": [{"total_files": 7, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}