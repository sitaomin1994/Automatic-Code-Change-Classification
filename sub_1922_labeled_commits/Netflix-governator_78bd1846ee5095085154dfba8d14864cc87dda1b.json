{"application": "Netflix-governator", "csha": "78bd1846ee5095085154dfba8d14864cc87dda1b", "files": [{"AutoBind_cluster": {"actions": [{"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:   AutoBind is deprecated in favor of using Guice modules", "DEL TagElement: @deprecated"]}]}}, {"AutoBind_diff": {"operations": ["Delete TextElement:   AutoBind is deprecated in favor of using Guice modules(20)", "Delete TagElement: @deprecated(21)"]}}, {"AutoBindSingleton_cluster": {"actions": [{"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:  AutoBindSingleton is bad!  It is hereby deprecated in favor of using guice modules.", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}]}}, {"AutoBindSingleton_diff": {"operations": ["Delete TextElement:  AutoBindSingleton is bad!  It is hereby deprecated in favor of using guice modules.(12)", "Delete TagElement: @deprecated(13)", "Delete SimpleName: Deprecated(23)", "Delete MarkerAnnotation(24)"]}}, {"Configuration_cluster": {"actions": [{"root": "DEL TagElement: @deprecated", "operations": ["DEL TagElement: @deprecated", "DEL TextElement:  All configuration based features in governator will soon be removed in favor of Archaius 2.0"]}]}}, {"Configuration_diff": {"operations": ["Delete TextElement:  All configuration based features in governator will soon be removed in favor of Archaius 2.0(22)", "Delete TagElement: @deprecated(23)"]}}, {"ConfigurationVariable_cluster": {"actions": [{"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}]}}, {"ConfigurationVariable_diff": {"operations": ["Delete SimpleName: Deprecated(20)", "Delete MarkerAnnotation(21)"]}}, {"PreConfiguration_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6", "MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.netflix.governator.lifecycle.LifecycleManager to ImportDeclaration at 0"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TagElement: @deprecated", "DEL TextElement:  All configuration based features in governator will soon be removed in favor of Archaius 2.0"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}]}}, {"PreConfiguration_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(29) at 6", "Move ImportDeclaration(5) into CompilationUnit(29) at 6", "Insert ImportDeclaration(3) into CompilationUnit(29) at 1", "Insert QualifiedName: com.netflix.governator.lifecycle.LifecycleManager(2) into ImportDeclaration(3) at 0", "Delete TextElement:  All configuration based features in governator will soon be removed in favor of Archaius 2.0(15)", "Delete TagElement: @deprecated(16)", "Delete SimpleName: Deprecated(26)", "Delete MarkerAnnotation(27)"]}}, {"AbstractObjectConfigurationProvider_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 2"]}, {"root": "UPDATE from com.fasterxml.jackson.databind.ObjectMapper to org.codehaus.jackson.map.ObjectMapper", "operations": ["UPD QualifiedName: com.fasterxml.jackson.databind.ObjectMapper from com.fasterxml.jackson.databind.ObjectMapper to org.codehaus.jackson.map.ObjectMapper"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:  Deprecated in favor of using Archaius 2.x", "DEL TagElement: @deprecated"]}]}}, {"AbstractObjectConfigurationProvider_diff": {"operations": ["Move ImportDeclaration(9) into CompilationUnit(180) at 2", "Update QualifiedName: com.fasterxml.jackson.databind.ObjectMapper(8) to org.codehaus.jackson.map.ObjectMapper", "Delete TextElement:  Deprecated in favor of using Archaius 2.x(16)", "Delete TagElement: @deprecated(17)"]}}, {"ConfigurationProvider_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: com.google.inject.ImplementedBy to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: com.netflix.governator.lifecycle.LifecycleConfigurationProviders to ImportDeclaration at 0"]}, {"root": "INS SingleMemberAnnotation to TypeDeclaration: interface at 1", "operations": ["INS TypeLiteral to SingleMemberAnnotation at 1", "INS SimpleName: ImplementedBy to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to TypeDeclaration: interface at 1", "INS SimpleName: LifecycleConfigurationProviders to SimpleType: LifecycleConfigurationProviders at 0", "INS SimpleType: LifecycleConfigurationProviders to TypeLiteral at 0"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement: be removed in favor of Archaius 2.0", "DEL TextElement:  All configuration based features in Governator will soon ", "DEL TagElement: @deprecated"]}]}}, {"ConfigurationProvider_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(236) at 4", "Insert ImportDeclaration(5) into CompilationUnit(236) at 2", "Insert ImportDeclaration(9) into CompilationUnit(236) at 4", "Insert QualifiedName: com.google.inject.ImplementedBy(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: com.netflix.governator.lifecycle.LifecycleConfigurationProviders(8) into ImportDeclaration(9) at 0", "Insert SingleMemberAnnotation(22) into TypeDeclaration: interface(235) at 1", "Insert SimpleName: ImplementedBy(18) into SingleMemberAnnotation(22) at 0", "Insert TypeLiteral(21) into SingleMemberAnnotation(22) at 1", "Insert SimpleType: LifecycleConfigurationProviders(20) into TypeLiteral(21) at 0", "Insert SimpleName: LifecycleConfigurationProviders(19) into SimpleType: LifecycleConfigurationProviders(20) at 0", "Delete TextElement:  All configuration based features in Governator will soon (13)", "Delete TextElement: be removed in favor of Archaius 2.0(14)", "Delete TagElement: @deprecated(15)"]}}, {"DefaultConfigurationProvider_cluster": {"actions": [{"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:  Deprecated in favor of using Archaius 2.x", "DEL TagElement: @deprecated"]}]}}, {"DefaultConfigurationProvider_diff": {"operations": ["Delete TextElement:  Deprecated in favor of using Archaius 2.x(10)", "Delete TagElement: @deprecated(11)"]}}, {"PropertiesConfigurationProvider_cluster": {"actions": [{"root": "UPDATE from com.fasterxml.jackson.databind.ObjectMapper to org.codehaus.jackson.map.ObjectMapper", "operations": ["UPD QualifiedName: com.fasterxml.jackson.databind.ObjectMapper from com.fasterxml.jackson.databind.ObjectMapper to org.codehaus.jackson.map.ObjectMapper"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:  Deprecated in favor of using Archaius 2.x", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}]}}, {"PropertiesConfigurationProvider_diff": {"operations": ["Update QualifiedName: com.fasterxml.jackson.databind.ObjectMapper(8) to org.codehaus.jackson.map.ObjectMapper", "Delete TextElement:  Deprecated in favor of using Archaius 2.x(14)", "Delete TagElement: @deprecated(15)", "Delete SimpleName: Deprecated(17)", "Delete MarkerAnnotation(18)"]}}, {"SystemConfigurationProvider_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1", "MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS ImportDeclaration to CompilationUnit at 1", "INS QualifiedName: com.google.common.base.Supplier to ImportDeclaration at 0"]}, {"root": "UPDATE from com.fasterxml.jackson.databind.ObjectMapper to org.codehaus.jackson.map.ObjectMapper", "operations": ["UPD QualifiedName: com.fasterxml.jackson.databind.ObjectMapper from com.fasterxml.jackson.databind.ObjectMapper to org.codehaus.jackson.map.ObjectMapper"]}]}}, {"SystemConfigurationProvider_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(486) at 1", "Move ImportDeclaration(9) into CompilationUnit(486) at 1", "Insert ImportDeclaration(3) into CompilationUnit(486) at 1", "Insert QualifiedName: com.google.common.base.Supplier(2) into ImportDeclaration(3) at 0", "Update QualifiedName: com.fasterxml.jackson.databind.ObjectMapper(6) to org.codehaus.jackson.map.ObjectMapper"]}}, {"AbstractBootstrapModule_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.guice", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Lists"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Key"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.MembersInjector", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.Module", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.Provider", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Stage"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.TypeLiteral", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.binder.LinkedBindingBuilder", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.multibindings.Multibinder", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.spi.Message"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.configuration.ConfigurationProvider"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleListener", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.ResourceLocator", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL SimpleName: modules", "DEL ExpressionStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL TextElement: . It internally uses a Multibinder to do the", "DEL ParameterizedType: Collection<Class<? extends Module>>", "DEL SimpleName: ResourceLocator", "DEL SimpleName: ResourceLocator", "DEL SimpleType: Class", "DEL Block", "DEL SimpleName: T", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: Module", "DEL SimpleName: mode", "DEL SimpleType: Class", "DEL ThisExpression", "DEL PrimitiveType: void", "DEL ParameterizedType: MembersInjector<T>", "DEL TypeParameter", "DEL SimpleName: type", "DEL SimpleName: key", "DEL ThisExpression", "DEL ReturnStatement", "DEL TypeDeclaration: class", "DEL Block", "DEL SimpleName: exclude", "DEL ThisExpression", "DEL MethodDeclaration", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleType: ResourceLocator", "DEL TypeParameter", "DEL SimpleName: mode", "DEL SimpleName: stage", "DEL Modifier: public", "DEL SimpleType: T", "DEL SimpleName: Class", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: newSetBinder", "DEL ParameterizedType: Class<T>", "DEL SimpleName: module", "DEL ReturnStatement", "DEL SimpleName: modules", "DEL SimpleName: binder", "DEL SimpleType: ModuleTransformer", "DEL SimpleName: modules", "DEL Block", "DEL SimpleName: LinkedBindingBuilder", "DEL SimpleName: Module", "DEL SimpleName: addError", "DEL MethodDeclaration", "DEL SimpleType: BootstrapBinder", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL SimpleName: inStage", "DEL SimpleName: includeModules", "DEL PrimitiveType: void", "DEL TypeParameter", "DEL SimpleName: bindLifecycleListener", "DEL SimpleName: binder", "DEL PrimitiveType: void", "DEL Block", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL ParameterizedType: MembersInjector<T>", "DEL ReturnStatement", "DEL SimpleName: include", "DEL SimpleName: Class", "DEL SimpleName: Module", "DEL SimpleName: binder", "DEL SimpleType: LifecycleListener", "DEL Modifier: public", "DEL SimpleName: message", "DEL SimpleName: include", "DEL SimpleName: Lists", "DEL NullLiteral", "DEL SimpleName: binder", "DEL WildcardType: ? extends Module", "DEL MethodInvocation", "DEL ParameterizedType: Key<T>", "DEL Block", "DEL SimpleName: include", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL SimpleName: T", "DEL SimpleType: Module", "DEL SimpleName: addError", "DEL TextElement: binding so that you can bind multiple LifecycleListeners", "DEL TextElement:  a binding builder used to add a new element in the set.", "DEL SimpleName: binder", "DEL TypeLiteral", "DEL TextElement:  a binding builder used to add a new element in the set.", "DEL SimpleName: binder", "DEL SingleVariableDeclaration", "DEL SimpleName: type", "DEL Modifier: public", "DEL PrimitiveType: void", "DEL Modifier: abstract", "DEL ParameterizedType: Class<? extends Module>", "DEL SimpleName: getMembersInjector", "DEL SimpleType: MembersInjector", "DEL SimpleName: include", "DEL SimpleName: binder", "DEL ReturnStatement", "DEL SimpleType: LifecycleInjectorMode", "DEL TypeLiteral", "DEL SimpleType: T", "DEL SimpleType: Object", "DEL SimpleName: binder", "DEL SimpleType: Class", "DEL SimpleName: t", "DEL SimpleName: newSetBinder", "DEL TextElement: Bind actions to perform after the injector is created.", "DEL SimpleName: exclude", "DEL SimpleName: Collection", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: T", "DEL SimpleName: MembersInjector", "DEL SimpleName: binder", "DEL SimpleName: disableAutoBinding", "DEL SimpleName: addBinding", "DEL MethodDeclaration", "DEL SimpleName: Provider", "DEL FieldAccess", "DEL Block", "DEL SimpleName: modules", "DEL MethodInvocation", "DEL SimpleName: exclude", "DEL Modifier: public", "DEL SimpleName: modules", "DEL MethodInvocation", "DEL SimpleType: Module", "DEL SimpleName: type", "DEL SimpleName: LinkedBindingBuilder", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL TextElement:  a binding builder used to add a new element in the set.", "DEL SimpleName: Module", "DEL Block", "DEL SimpleType: Module", "DEL SimpleName: Lists", "DEL SimpleName: T", "DEL MarkerAnnotation", "DEL TagElement", "DEL SimpleName: stage", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: AbstractBootstrapModule", "DEL SimpleType: LinkedBindingBuilder", "DEL SimpleName: Class", "DEL SimpleName: Module", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: newArrayList", "DEL SimpleType: Module", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: bindConfigurationProvider", "DEL Block", "DEL SimpleName: Module", "DEL SimpleName: addError", "DEL SimpleName: LifecycleListener", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL Modifier: public", "DEL MethodInvocation", "DEL ParameterizedType: Class<? extends Module>", "DEL SimpleName: newArrayList", "DEL SimpleName: getProvider", "DEL SimpleType: Module", "DEL Modifier: public", "DEL SimpleName: module", "DEL SimpleName: modules", "DEL Modifier: private", "DEL ParameterizedType: Provider<T>", "DEL InfixExpression: ==", "DEL TypeParameter", "DEL FieldAccess", "DEL SimpleName: type", "DEL MethodDeclaration", "DEL SimpleName: ModuleTransformer", "DEL SimpleName: message", "DEL SimpleType: LinkedBindingBuilder", "DEL TagElement", "DEL SimpleName: binder", "DEL TryStatement", "DEL SimpleName: module", "DEL Block", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL ThisExpression", "DEL SimpleName: include", "DEL SimpleName: Collection", "DEL Assignment: =", "DEL SimpleName: LinkedBindingBuilder", "DEL SimpleType: T", "DEL SimpleType: MembersInjector", "DEL SimpleName: configure", "DEL Modifier: public", "DEL SimpleType: Collection", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: MembersInjector", "DEL Modifier: public", "DEL Javadoc", "DEL WildcardType: ? extends Module", "DEL SimpleName: t", "DEL SimpleName: binder", "DEL MethodDeclaration", "DEL SimpleType: BootstrapBinder", "DEL Modifier: public", "DEL ExpressionStatement", "DEL Block", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL PrimitiveType: void", "DEL ParameterizedType: Collection<? extends Module>", "DEL SimpleName: binder", "DEL MethodInvocation", "DEL SimpleName: ResourceLocator", "DEL MethodInvocation", "DEL SimpleType: Message", "DEL ExpressionStatement", "DEL SimpleType: PostInjectorAction", "DEL MethodDeclaration", "DEL SimpleName: newSetBinder", "DEL SimpleType: Collection", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: include", "DEL SimpleName: binder", "DEL Modifier: final", "DEL Modifier: public", "DEL SimpleName: LinkedBindingBuilder", "DEL Block", "DEL SimpleName: addBinding", "DEL Modifier: abstract", "DEL SimpleName: getMembersInjector", "DEL SimpleName: include", "DEL SimpleName: message", "DEL SimpleName: Object", "DEL SimpleName: Multibinder", "DEL Block", "DEL SimpleType: Module", "DEL SimpleName: includeModules", "DEL Modifier: public", "DEL SimpleName: PostInjectorAction", "DEL SimpleName: typeLiteral", "DEL SimpleType: String", "DEL Modifier: public", "DEL TextElement:  a binding builder used to add a new element in the set.", "DEL SimpleType: LinkedBindingBuilder", "DEL SimpleType: Stage", "DEL MethodInvocation", "DEL SimpleName: modules", "DEL SimpleName: T", "DEL TypeLiteral", "DEL SimpleName: binder", "DEL Modifier: public", "DEL SimpleName: Lists", "DEL WildcardType: ? extends Module", "DEL SimpleName: T", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: Module", "DEL ExpressionStatement", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: binder", "DEL PrimitiveType: void", "DEL TextElement: . It internally uses a Multibinder to do the", "DEL MethodDeclaration", "DEL ParameterizedType: Collection<Class<? extends Module>>", "DEL SimpleName: TypeLiteral", "DEL SimpleName: Multibinder", "DEL Block", "DEL SimpleName: bindConfigurationProvider", "DEL ParameterizedType: Class<? extends Module>", "DEL SimpleName: Module", "DEL PrimitiveType: void", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: addBinding", "DEL TagElement: @return", "DEL SimpleName: T", "DEL MethodDeclaration", "DEL SimpleName: key", "DEL SimpleName: LifecycleListener", "DEL Modifier: public", "DEL SimpleType: Throwable", "DEL ParameterizedType: TypeLiteral<T>", "DEL SimpleName: arguments", "DEL SimpleName: binder", "DEL TextElement: Use this to bind a ", "DEL SimpleName: addBinding", "DEL SimpleName: typeLiteral", "DEL Block", "DEL SimpleType: T", "DEL SimpleType: Collection", "DEL SingleVariableDeclaration", "DEL SimpleName: bindPostInjectorAction", "DEL SimpleName: T", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL Modifier: protected", "DEL SimpleName: Key", "DEL SimpleType: T", "DEL TagElement", "DEL SimpleName: bindResourceLocator", "DEL SimpleName: binder", "DEL SimpleName: binder", "DEL SimpleType: LinkedBindingBuilder", "DEL PrimitiveType: void", "DEL SimpleType: LifecycleListener", "DEL SimpleType: T", "DEL SimpleName: ConfigurationProvider", "DEL SimpleName: modules", "DEL Block", "DEL ExpressionStatement", "DEL FieldAccess", "DEL SingleVariableDeclaration", "DEL SimpleName: addError", "DEL SimpleName: inMode", "DEL SimpleName: Stage", "DEL MethodDeclaration", "DEL SimpleName: binder", "DEL SimpleName: getProvider", "DEL SimpleType: BootstrapBinder", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Message", "DEL MethodInvocation", "DEL WildcardType: ? extends Module", "DEL ReturnStatement", "DEL Modifier: protected", "DEL Javadoc", "DEL PrimitiveType: void", "DEL SimpleName: getProvider", "DEL TagElement: @link", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: binder", "DEL SimpleName: configure", "DEL TagElement: @return", "DEL Modifier: public", "DEL SimpleType: ConfigurationProvider", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: PostInjectorAction", "DEL SimpleName: Module", "DEL PrimitiveType: void", "DEL SimpleName: includeModules", "DEL AssertStatement", "DEL SimpleName: LifecycleInjectorMode", "DEL Modifier: public", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: binder", "DEL ExpressionStatement", "DEL SimpleName: modules", "DEL SimpleType: T", "DEL SimpleName: newArrayList", "DEL SimpleType: Key", "DEL SimpleName: binder", "DEL MethodDeclaration", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL SimpleName: newSetBinder", "DEL TagElement: @return", "DEL FieldAccess", "DEL SimpleName: T", "DEL SingleVariableDeclaration", "DEL SimpleName: Provider", "DEL ExpressionStatement", "DEL SimpleName: arguments", "DEL SimpleName: T", "DEL SimpleName: exclude", "DEL ParameterizedType: Class<? extends Module>", "DEL SimpleName: exclude", "DEL PrimitiveType: void", "DEL SimpleType: PostInjectorAction", "DEL Block", "DEL SimpleName: disableAutoBinding", "DEL SimpleName: binder", "DEL SimpleName: LifecycleListener", "DEL MethodInvocation", "DEL SimpleType: ModuleTransformer", "DEL SimpleName: binder", "DEL SimpleName: binder", "DEL SimpleName: getMembersInjector", "DEL SimpleName: configure", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleType: BootstrapModule", "DEL SimpleName: Multibinder", "DEL ParameterizedType: LinkedBindingBuilder<ConfigurationProvider>", "DEL SimpleType: Module", "DEL SimpleName: bindModuleTransformer", "DEL TextElement: Use this to bind a ", "DEL MethodDeclaration", "DEL SimpleName: include", "DEL SingleVariableDeclaration", "DEL SimpleName: BootstrapBinder", "DEL SimpleName: binder", "DEL SimpleType: T", "DEL SimpleName: modules", "DEL WildcardType: ? extends Module", "DEL Modifier: public", "DEL SimpleType: Provider", "DEL SimpleName: ModuleTransformer", "DEL Modifier: public", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleType: Module", "DEL ParameterizedType: Provider<T>", "DEL Block", "DEL SimpleName: module", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: inMode", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL ParameterizedType: LinkedBindingBuilder<ResourceLocator>", "DEL TextElement: binding so that you can bind multiple ResourceLocators", "DEL SimpleName: T", "DEL SimpleType: Class", "DEL Block", "DEL SimpleName: LinkedBindingBuilder", "DEL SimpleName: binder", "DEL ParameterizedType: Class<T>", "DEL SimpleName: binder", "DEL TypeLiteral", "DEL SimpleName: Override", "DEL ThisExpression", "DEL SimpleName: Class", "DEL SimpleName: Class", "DEL SimpleName: Throwable", "DEL PrimitiveType: void", "DEL SimpleName: exclude", "DEL SimpleName: BootstrapModule", "DEL SimpleName: String", "DEL SimpleName: modules", "DEL SimpleName: module", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: Module", "DEL ParameterizedType: Class<? extends Module>", "DEL ExpressionStatement", "DEL TextElement: Bind module transform operations to perform on the final list of modules.", "DEL SingleVariableDeclaration", "DEL ParameterizedType: LinkedBindingBuilder<PostInjectorAction>", "DEL SimpleName: BootstrapBinder", "DEL MethodInvocation", "DEL SimpleType: TypeLiteral", "DEL WildcardType: ? extends Module", "DEL SimpleType: ResourceLocator", "DEL SimpleName: inStage", "DEL SimpleName: BootstrapBinder", "DEL MethodInvocation", "DEL Javadoc", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: LinkedBindingBuilder", "DEL MethodDeclaration", "DEL SimpleType: Class", "DEL SimpleName: addError", "DEL SimpleName: getProvider", "DEL ParameterizedType: LinkedBindingBuilder<LifecycleListener>", "DEL MethodDeclaration", "DEL Block", "DEL FieldAccess", "DEL SimpleName: getMembersInjector", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: binder", "DEL MethodInvocation", "DEL TagElement: @return", "DEL Modifier: public", "DEL ParameterizedType: LinkedBindingBuilder<ModuleTransformer>", "DEL SimpleName: T", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: Multibinder", "DEL SingleVariableDeclaration", "DEL WildcardType: ? extends Module", "DEL SimpleName: binder", "DEL ParameterizedType: Class<? extends Module>", "DEL SimpleType: Provider", "DEL SimpleName: module", "DEL SimpleName: binder", "DEL SimpleName: modules", "DEL SimpleName: binder", "DEL SimpleName: includeModules", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: addError", "DEL SimpleName: message", "DEL SimpleName: Collection"]}]}}, {"AbstractBootstrapModule_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.guice(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util.Collection(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.collect.Lists(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.inject.Key(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.inject.MembersInjector(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.inject.Module(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.inject.Provider(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.inject.Stage(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.inject.TypeLiteral(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.inject.binder.LinkedBindingBuilder(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.inject.multibindings.Multibinder(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.inject.spi.Message(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.netflix.governator.configuration.ConfigurationProvider(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleListener(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.netflix.governator.lifecycle.ResourceLocator(28)", "Delete ImportDeclaration(29)", "Delete Modifier: public(30)", "Delete Modifier: abstract(31)", "Delete SimpleName: AbstractBootstrapModule(32)", "Delete SimpleName: BootstrapModule(33)", "Delete SimpleType: BootstrapModule(34)", "Delete Modifier: private(35)", "Delete SimpleName: BootstrapBinder(36)", "Delete SimpleType: BootstrapBinder(37)", "Delete SimpleName: binder(38)", "Delete VariableDeclarationFragment(39)", "Delete FieldDeclaration(40)", "Delete SimpleName: Override(41)", "Delete MarkerAnnotation(42)", "Delete Modifier: final(43)", "Delete Modifier: public(44)", "Delete PrimitiveType: void(45)", "Delete SimpleName: configure(46)", "Delete SimpleName: BootstrapBinder(47)", "Delete SimpleType: BootstrapBinder(48)", "Delete SimpleName: binder(49)", "Delete SingleVariableDeclaration(50)", "Delete ThisExpression(51)", "Delete SimpleName: binder(52)", "Delete FieldAccess(53)", "Delete NullLiteral(54)", "Delete InfixExpression: ==(55)", "Delete AssertStatement(56)", "Delete ThisExpression(57)", "Delete SimpleName: binder(58)", "Delete FieldAccess(59)", "Delete SimpleName: binder(60)", "Delete Assignment: =(61)", "Delete ExpressionStatement(62)", "Delete SimpleName: configure(63)", "Delete MethodInvocation(64)", "Delete ExpressionStatement(65)", "Delete Block(66)", "Delete ThisExpression(67)", "Delete SimpleName: binder(68)", "Delete FieldAccess(69)", "Delete NullLiteral(70)", "Delete Assignment: =(71)", "Delete ExpressionStatement(72)", "Delete Block(73)", "Delete TryStatement(74)", "Delete Block(75)", "Delete MethodDeclaration(76)", "Delete Modifier: protected(77)", "Delete Modifier: abstract(78)", "Delete PrimitiveType: void(79)", "Delete SimpleName: configure(80)", "Delete MethodDeclaration(81)", "Delete TextElement: Bind actions to perform after the injector is created.(82)", "Delete TagElement(83)", "Delete TextElement:  a binding builder used to add a new element in the set.(84)", "Delete TagElement: @return(85)", "Delete Javadoc(86)", "Delete Modifier: public(87)", "Delete SimpleName: LinkedBindingBuilder(88)", "Delete SimpleType: LinkedBindingBuilder(89)", "Delete SimpleName: PostInjectorAction(90)", "Delete SimpleType: PostInjectorAction(91)", "Delete ParameterizedType: LinkedBindingBuilder<PostInjectorAction>(92)", "Delete SimpleName: bindPostInjectorAction(93)", "Delete SimpleName: Multibinder(94)", "Delete SimpleName: newSetBinder(95)", "Delete SimpleName: binder(96)", "Delete SimpleName: PostInjectorAction(97)", "Delete SimpleType: PostInjectorAction(98)", "Delete TypeLiteral(99)", "Delete MethodInvocation(100)", "Delete SimpleName: addBinding(101)", "Delete MethodInvocation(102)", "Delete ReturnStatement(103)", "Delete Block(104)", "Delete MethodDeclaration(105)", "Delete TextElement: Bind module transform operations to perform on the final list of modules.(106)", "Delete TagElement(107)", "Delete TextElement:  a binding builder used to add a new element in the set.(108)", "Delete TagElement: @return(109)", "Delete Javadoc(110)", "Delete Modifier: public(111)", "Delete SimpleName: LinkedBindingBuilder(112)", "Delete SimpleType: LinkedBindingBuilder(113)", "Delete SimpleName: ModuleTransformer(114)", "Delete SimpleType: ModuleTransformer(115)", "Delete ParameterizedType: LinkedBindingBuilder<ModuleTransformer>(116)", "Delete SimpleName: bindModuleTransformer(117)", "Delete SimpleName: Multibinder(118)", "Delete SimpleName: newSetBinder(119)", "Delete SimpleName: binder(120)", "Delete SimpleName: ModuleTransformer(121)", "Delete SimpleType: ModuleTransformer(122)", "Delete TypeLiteral(123)", "Delete MethodInvocation(124)", "Delete SimpleName: addBinding(125)", "Delete MethodInvocation(126)", "Delete ReturnStatement(127)", "Delete Block(128)", "Delete MethodDeclaration(129)", "Delete TextElement: Use this to bind a (130)", "Delete SimpleName: LifecycleListener(131)", "Delete TagElement: @link(132)", "Delete TextElement: . It internally uses a Multibinder to do the(133)", "Delete TextElement: binding so that you can bind multiple LifecycleListeners(134)", "Delete TagElement(135)", "Delete TextElement:  a binding builder used to add a new element in the set.(136)", "Delete TagElement: @return(137)", "Delete Javadoc(138)", "Delete Modifier: public(139)", "Delete SimpleName: LinkedBindingBuilder(140)", "Delete SimpleType: LinkedBindingBuilder(141)", "Delete SimpleName: LifecycleListener(142)", "Delete SimpleType: LifecycleListener(143)", "Delete ParameterizedType: LinkedBindingBuilder<LifecycleListener>(144)", "Delete SimpleName: bindLifecycleListener(145)", "Delete SimpleName: Multibinder(146)", "Delete SimpleName: newSetBinder(147)", "Delete SimpleName: binder(148)", "Delete SimpleName: LifecycleListener(149)", "Delete SimpleType: LifecycleListener(150)", "Delete TypeLiteral(151)", "Delete MethodInvocation(152)", "Delete SimpleName: addBinding(153)", "Delete MethodInvocation(154)", "Delete ReturnStatement(155)", "Delete Block(156)", "Delete MethodDeclaration(157)", "Delete TextElement: Use this to bind a (158)", "Delete SimpleName: ResourceLocator(159)", "Delete TagElement: @link(160)", "Delete TextElement: . It internally uses a Multibinder to do the(161)", "Delete TextElement: binding so that you can bind multiple ResourceLocators(162)", "Delete TagElement(163)", "Delete TextElement:  a binding builder used to add a new element in the set.(164)", "Delete TagElement: @return(165)", "Delete Javadoc(166)", "Delete Modifier: public(167)", "Delete SimpleName: LinkedBindingBuilder(168)", "Delete SimpleType: LinkedBindingBuilder(169)", "Delete SimpleName: ResourceLocator(170)", "Delete SimpleType: ResourceLocator(171)", "Delete ParameterizedType: LinkedBindingBuilder<ResourceLocator>(172)", "Delete SimpleName: bindResourceLocator(173)", "Delete SimpleName: Multibinder(174)", "Delete SimpleName: newSetBinder(175)", "Delete SimpleName: binder(176)", "Delete SimpleName: ResourceLocator(177)", "Delete SimpleType: ResourceLocator(178)", "Delete TypeLiteral(179)", "Delete MethodInvocation(180)", "Delete SimpleName: addBinding(181)", "Delete MethodInvocation(182)", "Delete ReturnStatement(183)", "Delete Block(184)", "Delete MethodDeclaration(185)", "Delete Modifier: public(186)", "Delete PrimitiveType: void(187)", "Delete SimpleName: include(188)", "Delete SimpleName: Class(189)", "Delete SimpleType: Class(190)", "Delete SimpleName: Module(191)", "Delete SimpleType: Module(192)", "Delete WildcardType: ? extends Module(193)", "Delete ParameterizedType: Class<? extends Module>(194)", "Delete SimpleName: module(195)", "Delete SingleVariableDeclaration(196)", "Delete ThisExpression(197)", "Delete SimpleName: binder(198)", "Delete FieldAccess(199)", "Delete SimpleName: include(200)", "Delete SimpleName: module(201)", "Delete MethodInvocation(202)", "Delete ExpressionStatement(203)", "Delete Block(204)", "Delete MethodDeclaration(205)", "Delete Modifier: public(206)", "Delete PrimitiveType: void(207)", "Delete SimpleName: include(208)", "Delete SimpleName: Class(209)", "Delete SimpleType: Class(210)", "Delete SimpleName: Module(211)", "Delete SimpleType: Module(212)", "Delete WildcardType: ? extends Module(213)", "Delete ParameterizedType: Class<? extends Module>(214)", "Delete SimpleName: modules(215)", "Delete SingleVariableDeclaration(216)", "Delete ThisExpression(217)", "Delete SimpleName: binder(218)", "Delete FieldAccess(219)", "Delete SimpleName: include(220)", "Delete SimpleName: Lists(221)", "Delete SimpleName: newArrayList(222)", "Delete SimpleName: modules(223)", "Delete MethodInvocation(224)", "Delete MethodInvocation(225)", "Delete ExpressionStatement(226)", "Delete Block(227)", "Delete MethodDeclaration(228)", "Delete Modifier: public(229)", "Delete PrimitiveType: void(230)", "Delete SimpleName: include(231)", "Delete SimpleName: Collection(232)", "Delete SimpleType: Collection(233)", "Delete SimpleName: Class(234)", "Delete SimpleType: Class(235)", "Delete SimpleName: Module(236)", "Delete SimpleType: Module(237)", "Delete WildcardType: ? extends Module(238)", "Delete ParameterizedType: Class<? extends Module>(239)", "Delete ParameterizedType: Collection<Class<? extends Module>>(240)", "Delete SimpleName: modules(241)", "Delete SingleVariableDeclaration(242)", "Delete SimpleName: binder(243)", "Delete SimpleName: include(244)", "Delete SimpleName: modules(245)", "Delete MethodInvocation(246)", "Delete ExpressionStatement(247)", "Delete Block(248)", "Delete MethodDeclaration(249)", "Delete Modifier: public(250)", "Delete PrimitiveType: void(251)", "Delete SimpleName: include(252)", "Delete SimpleName: Module(253)", "Delete SimpleType: Module(254)", "Delete SimpleName: module(255)", "Delete SingleVariableDeclaration(256)", "Delete SimpleName: binder(257)", "Delete SimpleName: include(258)", "Delete SimpleName: module(259)", "Delete MethodInvocation(260)", "Delete ExpressionStatement(261)", "Delete Block(262)", "Delete MethodDeclaration(263)", "Delete Modifier: public(264)", "Delete PrimitiveType: void(265)", "Delete SimpleName: includeModules(266)", "Delete SimpleName: Collection(267)", "Delete SimpleType: Collection(268)", "Delete SimpleName: Module(269)", "Delete SimpleType: Module(270)", "Delete WildcardType: ? extends Module(271)", "Delete ParameterizedType: Collection<? extends Module>(272)", "Delete SimpleName: modules(273)", "Delete SingleVariableDeclaration(274)", "Delete SimpleName: binder(275)", "Delete SimpleName: includeModules(276)", "Delete SimpleName: modules(277)", "Delete MethodInvocation(278)", "Delete ExpressionStatement(279)", "Delete Block(280)", "Delete MethodDeclaration(281)", "Delete Modifier: public(282)", "Delete PrimitiveType: void(283)", "Delete SimpleName: includeModules(284)", "Delete SimpleName: Module(285)", "Delete SimpleType: Module(286)", "Delete SimpleName: modules(287)", "Delete SingleVariableDeclaration(288)", "Delete SimpleName: binder(289)", "Delete SimpleName: includeModules(290)", "Delete SimpleName: Lists(291)", "Delete SimpleName: newArrayList(292)", "Delete SimpleName: modules(293)", "Delete MethodInvocation(294)", "Delete MethodInvocation(295)", "Delete ExpressionStatement(296)", "Delete Block(297)", "Delete MethodDeclaration(298)", "Delete Modifier: public(299)", "Delete PrimitiveType: void(300)", "Delete SimpleName: exclude(301)", "Delete SimpleName: Class(302)", "Delete SimpleType: Class(303)", "Delete SimpleName: Module(304)", "Delete SimpleType: Module(305)", "Delete WildcardType: ? extends Module(306)", "Delete ParameterizedType: Class<? extends Module>(307)", "Delete SimpleName: module(308)", "Delete SingleVariableDeclaration(309)", "Delete SimpleName: binder(310)", "Delete SimpleName: exclude(311)", "Delete SimpleName: module(312)", "Delete MethodInvocation(313)", "Delete ExpressionStatement(314)", "Delete Block(315)", "Delete MethodDeclaration(316)", "Delete Modifier: public(317)", "Delete PrimitiveType: void(318)", "Delete SimpleName: exclude(319)", "Delete SimpleName: Class(320)", "Delete SimpleType: Class(321)", "Delete SimpleName: Module(322)", "Delete SimpleType: Module(323)", "Delete WildcardType: ? extends Module(324)", "Delete ParameterizedType: Class<? extends Module>(325)", "Delete SimpleName: modules(326)", "Delete SingleVariableDeclaration(327)", "Delete SimpleName: binder(328)", "Delete SimpleName: exclude(329)", "Delete SimpleName: Lists(330)", "Delete SimpleName: newArrayList(331)", "Delete SimpleName: modules(332)", "Delete MethodInvocation(333)", "Delete MethodInvocation(334)", "Delete ExpressionStatement(335)", "Delete Block(336)", "Delete MethodDeclaration(337)", "Delete Modifier: public(338)", "Delete PrimitiveType: void(339)", "Delete SimpleName: exclude(340)", "Delete SimpleName: Collection(341)", "Delete SimpleType: Collection(342)", "Delete SimpleName: Class(343)", "Delete SimpleType: Class(344)", "Delete SimpleName: Module(345)", "Delete SimpleType: Module(346)", "Delete WildcardType: ? extends Module(347)", "Delete ParameterizedType: Class<? extends Module>(348)", "Delete ParameterizedType: Collection<Class<? extends Module>>(349)", "Delete SimpleName: modules(350)", "Delete SingleVariableDeclaration(351)", "Delete SimpleName: binder(352)", "Delete SimpleName: exclude(353)", "Delete SimpleName: modules(354)", "Delete MethodInvocation(355)", "Delete ExpressionStatement(356)", "Delete Block(357)", "Delete MethodDeclaration(358)", "Delete Modifier: public(359)", "Delete PrimitiveType: void(360)", "Delete SimpleName: addError(361)", "Delete SimpleName: String(362)", "Delete SimpleType: String(363)", "Delete SimpleName: message(364)", "Delete SingleVariableDeclaration(365)", "Delete SimpleName: Object(366)", "Delete SimpleType: Object(367)", "Delete SimpleName: arguments(368)", "Delete SingleVariableDeclaration(369)", "Delete SimpleName: binder(370)", "Delete SimpleName: addError(371)", "Delete SimpleName: message(372)", "Delete SimpleName: arguments(373)", "Delete MethodInvocation(374)", "Delete ExpressionStatement(375)", "Delete Block(376)", "Delete MethodDeclaration(377)", "Delete Modifier: public(378)", "Delete PrimitiveType: void(379)", "Delete SimpleName: addError(380)", "Delete SimpleName: Throwable(381)", "Delete SimpleType: Throwable(382)", "Delete SimpleName: t(383)", "Delete SingleVariableDeclaration(384)", "Delete SimpleName: binder(385)", "Delete SimpleName: addError(386)", "Delete SimpleName: t(387)", "Delete MethodInvocation(388)", "Delete ExpressionStatement(389)", "Delete Block(390)", "Delete MethodDeclaration(391)", "Delete Modifier: public(392)", "Delete PrimitiveType: void(393)", "Delete SimpleName: addError(394)", "Delete SimpleName: Message(395)", "Delete SimpleType: Message(396)", "Delete SimpleName: message(397)", "Delete SingleVariableDeclaration(398)", "Delete SimpleName: binder(399)", "Delete SimpleName: addError(400)", "Delete SimpleName: message(401)", "Delete MethodInvocation(402)", "Delete ExpressionStatement(403)", "Delete Block(404)", "Delete MethodDeclaration(405)", "Delete Modifier: public(406)", "Delete SimpleName: T(407)", "Delete TypeParameter(408)", "Delete SimpleName: Provider(409)", "Delete SimpleType: Provider(410)", "Delete SimpleName: T(411)", "Delete SimpleType: T(412)", "Delete ParameterizedType: Provider<T>(413)", "Delete SimpleName: getProvider(414)", "Delete SimpleName: Key(415)", "Delete SimpleType: Key(416)", "Delete SimpleName: T(417)", "Delete SimpleType: T(418)", "Delete ParameterizedType: Key<T>(419)", "Delete SimpleName: key(420)", "Delete SingleVariableDeclaration(421)", "Delete SimpleName: binder(422)", "Delete SimpleName: getProvider(423)", "Delete SimpleName: key(424)", "Delete MethodInvocation(425)", "Delete ReturnStatement(426)", "Delete Block(427)", "Delete MethodDeclaration(428)", "Delete Modifier: public(429)", "Delete SimpleName: T(430)", "Delete TypeParameter(431)", "Delete SimpleName: Provider(432)", "Delete SimpleType: Provider(433)", "Delete SimpleName: T(434)", "Delete SimpleType: T(435)", "Delete ParameterizedType: Provider<T>(436)", "Delete SimpleName: getProvider(437)", "Delete SimpleName: Class(438)", "Delete SimpleType: Class(439)", "Delete SimpleName: T(440)", "Delete SimpleType: T(441)", "Delete ParameterizedType: Class<T>(442)", "Delete SimpleName: type(443)", "Delete SingleVariableDeclaration(444)", "Delete SimpleName: binder(445)", "Delete SimpleName: getProvider(446)", "Delete SimpleName: type(447)", "Delete MethodInvocation(448)", "Delete ReturnStatement(449)", "Delete Block(450)", "Delete MethodDeclaration(451)", "Delete Modifier: public(452)", "Delete SimpleName: T(453)", "Delete TypeParameter(454)", "Delete SimpleName: MembersInjector(455)", "Delete SimpleType: MembersInjector(456)", "Delete SimpleName: T(457)", "Delete SimpleType: T(458)", "Delete ParameterizedType: MembersInjector<T>(459)", "Delete SimpleName: getMembersInjector(460)", "Delete SimpleName: TypeLiteral(461)", "Delete SimpleType: TypeLiteral(462)", "Delete SimpleName: T(463)", "Delete SimpleType: T(464)", "Delete ParameterizedType: TypeLiteral<T>(465)", "Delete SimpleName: typeLiteral(466)", "Delete SingleVariableDeclaration(467)", "Delete SimpleName: binder(468)", "Delete SimpleName: getMembersInjector(469)", "Delete SimpleName: typeLiteral(470)", "Delete MethodInvocation(471)", "Delete ReturnStatement(472)", "Delete Block(473)", "Delete MethodDeclaration(474)", "Delete Modifier: public(475)", "Delete SimpleName: T(476)", "Delete TypeParameter(477)", "Delete SimpleName: MembersInjector(478)", "Delete SimpleType: MembersInjector(479)", "Delete SimpleName: T(480)", "Delete SimpleType: T(481)", "Delete ParameterizedType: MembersInjector<T>(482)", "Delete SimpleName: getMembersInjector(483)", "Delete SimpleName: Class(484)", "Delete SimpleType: Class(485)", "Delete SimpleName: T(486)", "Delete SimpleType: T(487)", "Delete ParameterizedType: Class<T>(488)", "Delete SimpleName: type(489)", "Delete SingleVariableDeclaration(490)", "Delete SimpleName: binder(491)", "Delete SimpleName: getMembersInjector(492)", "Delete SimpleName: type(493)", "Delete MethodInvocation(494)", "Delete ReturnStatement(495)", "Delete Block(496)", "Delete MethodDeclaration(497)", "Delete Modifier: public(498)", "Delete SimpleName: LinkedBindingBuilder(499)", "Delete SimpleType: LinkedBindingBuilder(500)", "Delete SimpleName: ConfigurationProvider(501)", "Delete SimpleType: ConfigurationProvider(502)", "Delete ParameterizedType: LinkedBindingBuilder<ConfigurationProvider>(503)", "Delete SimpleName: bindConfigurationProvider(504)", "Delete SimpleName: binder(505)", "Delete SimpleName: bindConfigurationProvider(506)", "Delete MethodInvocation(507)", "Delete ReturnStatement(508)", "Delete Block(509)", "Delete MethodDeclaration(510)", "Delete Modifier: public(511)", "Delete PrimitiveType: void(512)", "Delete SimpleName: disableAutoBinding(513)", "Delete SimpleName: binder(514)", "Delete SimpleName: disableAutoBinding(515)", "Delete MethodInvocation(516)", "Delete ExpressionStatement(517)", "Delete Block(518)", "Delete MethodDeclaration(519)", "Delete Modifier: public(520)", "Delete PrimitiveType: void(521)", "Delete SimpleName: inStage(522)", "Delete SimpleName: Stage(523)", "Delete SimpleType: Stage(524)", "Delete SimpleName: stage(525)", "Delete SingleVariableDeclaration(526)", "Delete SimpleName: binder(527)", "Delete SimpleName: inStage(528)", "Delete SimpleName: stage(529)", "Delete MethodInvocation(530)", "Delete ExpressionStatement(531)", "Delete Block(532)", "Delete MethodDeclaration(533)", "Delete Modifier: public(534)", "Delete PrimitiveType: void(535)", "Delete SimpleName: inMode(536)", "Delete SimpleName: LifecycleInjectorMode(537)", "Delete SimpleType: LifecycleInjectorMode(538)", "Delete SimpleName: mode(539)", "Delete SingleVariableDeclaration(540)", "Delete SimpleName: binder(541)", "Delete SimpleName: inMode(542)", "Delete SimpleName: mode(543)", "Delete MethodInvocation(544)", "Delete ExpressionStatement(545)", "Delete Block(546)", "Delete MethodDeclaration(547)", "Delete Modifier: protected(548)", "Delete SimpleName: BootstrapBinder(549)", "Delete SimpleType: BootstrapBinder(550)", "Delete SimpleName: binder(551)", "Delete SimpleName: binder(552)", "Delete ReturnStatement(553)", "Delete Block(554)", "Delete MethodDeclaration(555)", "Delete TypeDeclaration: class(556)"]}}, {"AutoBindProvider_cluster": {"actions": [{"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:  Auto binding is deprecated in favor of using Guice modules", "DEL TagElement: @deprecated"]}]}}, {"AutoBindProvider_diff": {"operations": ["Delete TextElement:  Auto binding is deprecated in favor of using Guice modules(13)", "Delete TagElement: @deprecated(14)"]}}, {"BootstrapBinder_cluster": {"actions": [{"root": "DEL Javadoc", "operations": ["DEL TextElement:  These bindings should be done on a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL Javadoc", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  These bindings should be done on a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL TagElement: @deprecated", "DEL Javadoc"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:  All configuration based features in governator will soon be removed in favor of Archaius 2.0", "DEL TagElement: @deprecated"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL Javadoc", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL TagElement: @deprecated", "DEL Javadoc"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @deprecated", "DEL Javadoc", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL TagElement: @deprecated", "DEL Javadoc"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @deprecated", "DEL Javadoc", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @deprecated", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL Javadoc"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @deprecated", "DEL Javadoc", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL Javadoc", "operations": ["DEL SimpleName: mode", "DEL TextElement:  Mode no longer an option ", "DEL TagElement: @param", "DEL TagElement: @deprecated", "DEL Javadoc"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TagElement: @deprecated", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TagElement: @deprecated", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL Javadoc", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule", "DEL TagElement: @deprecated"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @deprecated", "DEL Javadoc", "DEL TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation"]}]}}, {"BootstrapBinder_diff": {"operations": ["Delete TextElement:  These bindings should be done on a standard guice Module or AbstractModule and not in a BootstrapModule(280)", "Delete TagElement: @deprecated(281)", "Delete Javadoc(282)", "Delete SimpleName: Deprecated(285)", "Delete MarkerAnnotation(286)", "Delete TextElement:  These bindings should be done on a standard guice Module or AbstractModule and not in a BootstrapModule(321)", "Delete TagElement: @deprecated(322)", "Delete Javadoc(323)", "Delete SimpleName: Deprecated(326)", "Delete MarkerAnnotation(327)", "Delete TextElement:  All configuration based features in governator will soon be removed in favor of Archaius 2.0(462)", "Delete TagElement: @deprecated(463)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(484)", "Delete TagElement: @deprecated(485)", "Delete Javadoc(486)", "Delete SimpleName: Deprecated(489)", "Delete MarkerAnnotation(490)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(526)", "Delete TagElement: @deprecated(527)", "Delete Javadoc(528)", "Delete SimpleName: Deprecated(531)", "Delete MarkerAnnotation(532)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(566)", "Delete TagElement: @deprecated(567)", "Delete Javadoc(568)", "Delete SimpleName: Deprecated(571)", "Delete MarkerAnnotation(572)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(604)", "Delete TagElement: @deprecated(605)", "Delete Javadoc(606)", "Delete SimpleName: Deprecated(609)", "Delete MarkerAnnotation(610)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(625)", "Delete TagElement: @deprecated(626)", "Delete Javadoc(627)", "Delete SimpleName: Deprecated(630)", "Delete MarkerAnnotation(631)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(660)", "Delete TagElement: @deprecated(661)", "Delete Javadoc(662)", "Delete SimpleName: Deprecated(665)", "Delete MarkerAnnotation(666)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(685)", "Delete TagElement: @deprecated(686)", "Delete Javadoc(687)", "Delete SimpleName: Deprecated(690)", "Delete MarkerAnnotation(691)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(712)", "Delete TagElement: @deprecated(713)", "Delete Javadoc(714)", "Delete SimpleName: Deprecated(717)", "Delete MarkerAnnotation(718)", "Delete TextElement:  Mode no longer an option (939)", "Delete TagElement: @deprecated(940)", "Delete SimpleName: mode(941)", "Delete TagElement: @param(942)", "Delete Javadoc(943)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(1124)", "Delete TagElement: @deprecated(1125)", "Delete Javadoc(1126)", "Delete SimpleName: Deprecated(1129)", "Delete MarkerAnnotation(1130)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(1156)", "Delete TagElement: @deprecated(1157)", "Delete Javadoc(1158)", "Delete SimpleName: Deprecated(1161)", "Delete MarkerAnnotation(1162)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(1192)", "Delete TagElement: @deprecated(1193)", "Delete Javadoc(1194)", "Delete SimpleName: Deprecated(1197)", "Delete MarkerAnnotation(1198)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(1214)", "Delete TagElement: @deprecated(1215)", "Delete Javadoc(1216)", "Delete SimpleName: Deprecated(1219)", "Delete MarkerAnnotation(1220)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(1239)", "Delete TagElement: @deprecated(1240)", "Delete Javadoc(1241)", "Delete SimpleName: Deprecated(1244)", "Delete MarkerAnnotation(1245)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(1256)", "Delete TagElement: @deprecated(1257)", "Delete Javadoc(1258)", "Delete SimpleName: Deprecated(1261)", "Delete MarkerAnnotation(1262)", "Delete TextElement:  These bindings should be done in a standard guice Module or AbstractModule and not in a BootstrapModule(1272)", "Delete TagElement: @deprecated(1273)", "Delete Javadoc(1274)", "Delete SimpleName: Deprecated(1277)", "Delete MarkerAnnotation(1278)"]}}, {"BootstrapModule_cluster": {"actions": [{"root": "UPDATE from Abstraction for binding during the bootstrap phase.   to Abstraction for binding during the bootstrap phase", "operations": ["UPD TextElement: Abstraction for binding during the bootstrap phase.   from Abstraction for binding during the bootstrap phase.   to Abstraction for binding during the bootstrap phase"]}, {"root": "DEL TextElement: BootstrapModule should be implemented only to customize the LifecycleInjector and not", "operations": ["DEL TextElement: BootstrapModule should be implemented only to customize the LifecycleInjector and not"]}, {"root": "DEL TextElement: for generic bindings.", "operations": ["DEL TextElement: for generic bindings."]}, {"root": "DEL TextElement: Code should extend ", "operations": ["DEL TextElement: Code should extend "]}, {"root": "DEL TagElement: @link", "operations": ["DEL SimpleName: AbstractBootstrapModule", "DEL TagElement: @link"]}, {"root": "DEL TextElement:  instead of implementing ", "operations": ["DEL TextElement:  instead of implementing "]}, {"root": "DEL TagElement: @link", "operations": ["DEL TagElement: @link", "DEL SimpleName: BootstrapModule"]}, {"root": "DEL TextElement:   ", "operations": ["DEL TextElement:   "]}, {"root": "DEL TextElement: directly.", "operations": ["DEL TextElement: directly."]}]}}, {"BootstrapModule_diff": {"operations": ["Update TextElement: Abstraction for binding during the bootstrap phase.  (2) to Abstraction for binding during the bootstrap phase", "Delete TextElement: BootstrapModule should be implemented only to customize the LifecycleInjector and not(3)", "Delete TextElement: for generic bindings.(4)", "Delete TextElement: Code should extend (5)", "Delete SimpleName: AbstractBootstrapModule(6)", "Delete TagElement: @link(7)", "Delete TextElement:  instead of implementing (8)", "Delete SimpleName: BootstrapModule(9)", "Delete TagElement: @link(10)", "Delete TextElement:   (11)", "Delete TextElement: directly.(12)"]}}, {"InternalAutoBindModule_cluster": {"actions": [{"root": "DEL Javadoc", "operations": ["DEL TextElement:  elandau", "DEL Javadoc", "DEL TagElement: @author", "DEL TextElement: Module for creating bindings from a class path scanner.", "DEL TagElement"]}]}}, {"InternalAutoBindModule_diff": {"operations": ["Delete TextElement: Module for creating bindings from a class path scanner.(58)", "Delete TagElement(59)", "Delete TextElement:  elandau(60)", "Delete TagElement: @author(61)", "Delete Javadoc(62)"]}}, {"InternalBootstrapModule_cluster": {"actions": [{"root": "UPDATE from com.netflix.governator.lifecycle.processors.ResourcesLifecycleAnnotationProcessor to com.netflix.governator.lifecycle.LifecycleManager", "operations": ["UPD QualifiedName: com.netflix.governator.lifecycle.processors.ResourcesLifecycleAnnotationProcessor from com.netflix.governator.lifecycle.processors.ResourcesLifecycleAnnotationProcessor to com.netflix.governator.lifecycle.LifecycleManager"]}, {"root": "UPDATE from Provider<ConfigurationProvider> to Provider<LifecycleConfigurationProviders>", "operations": ["UPD ParameterizedType: Provider<ConfigurationProvider> from Provider<ConfigurationProvider> to Provider<LifecycleConfigurationProviders>"]}, {"root": "UPDATE from ConfigurationProvider to LifecycleConfigurationProviders", "operations": ["UPD SimpleType: ConfigurationProvider from ConfigurationProvider to LifecycleConfigurationProviders", "UPD SimpleType: ConfigurationProvider from ConfigurationProvider to LifecycleConfigurationProviders", "UPD SimpleType: ConfigurationProvider from ConfigurationProvider to LifecycleConfigurationProviders", "UPD SimpleName: ConfigurationProvider from ConfigurationProvider to LifecycleConfigurationProviders", "UPD SimpleName: ConfigurationProvider from ConfigurationProvider to LifecycleConfigurationProviders", "UPD SimpleName: ConfigurationProvider from ConfigurationProvider to LifecycleConfigurationProviders"]}, {"root": "INS ExpressionStatement to Block at 11", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 11", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from addBinding to asEagerSingleton", "operations": ["UPD SimpleName: addBinding from addBinding to asEagerSingleton"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: addBinding to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from binding to bind", "operations": ["UPD SimpleName: binding from binding to bind"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: binding to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 2"]}, {"root": "UPDATE from ResourcesLifecycleAnnotationProcessor to LifecycleManager", "operations": ["UPD SimpleType: ResourcesLifecycleAnnotationProcessor from ResourcesLifecycleAnnotationProcessor to LifecycleManager", "UPD SimpleName: ResourcesLifecycleAnnotationProcessor from ResourcesLifecycleAnnotationProcessor to LifecycleManager"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.multibindings.Multibinder"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.processors.ConfigurationProviderLifecycleAnnotationProcessor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.processors.PostConstructLifecycleAnnotationProcessor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.processors.PreConfigureLifecycleAnnotationProcessor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.processors.PreDestroyLifecycleAnnotationProcessor"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: newSetBinder", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL TypeLiteral", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL ParameterizedType: Multibinder<LifecycleAnnotationProcessor>", "DEL MethodInvocation", "DEL SimpleType: Multibinder", "DEL SimpleName: Multibinder", "DEL SimpleName: binding", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL SimpleName: Multibinder"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: addBinding", "DEL SimpleName: to", "DEL SimpleName: PreConfigureLifecycleAnnotationProcessor", "DEL TypeLiteral", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: binding", "DEL SimpleType: PreConfigureLifecycleAnnotationProcessor", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: ConfigurationProviderLifecycleAnnotationProcessor", "DEL SimpleType: ConfigurationProviderLifecycleAnnotationProcessor", "DEL SimpleName: to", "DEL SimpleName: binding", "DEL SimpleName: addBinding", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TypeLiteral"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: to", "DEL MethodInvocation", "DEL SimpleName: addBinding", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL TypeLiteral", "DEL SimpleType: PostConstructLifecycleAnnotationProcessor", "DEL MethodInvocation", "DEL SimpleName: to", "DEL MethodInvocation", "DEL SimpleName: binding", "DEL SimpleName: PostConstructLifecycleAnnotationProcessor", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: PreDestroyLifecycleAnnotationProcessor", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: to", "DEL TypeLiteral", "DEL SimpleName: addBinding", "DEL ExpressionStatement", "DEL SimpleName: binding", "DEL SimpleType: PreDestroyLifecycleAnnotationProcessor"]}]}}, {"InternalBootstrapModule_diff": {"operations": ["Update QualifiedName: com.netflix.governator.lifecycle.processors.ResourcesLifecycleAnnotationProcessor(48) to com.netflix.governator.lifecycle.LifecycleManager", "Update ParameterizedType: Provider<ConfigurationProvider>(123) to Provider<LifecycleConfigurationProviders>", "Update SimpleType: ConfigurationProvider(122) to LifecycleConfigurationProviders", "Update SimpleType: ConfigurationProvider(145) to LifecycleConfigurationProviders", "Insert ExpressionStatement(316) into Block(348) at 5", "Update SimpleName: ConfigurationProvider(121) to LifecycleConfigurationProviders", "Update SimpleName: ConfigurationProvider(144) to LifecycleConfigurationProviders", "Insert MethodInvocation(315) into ExpressionStatement(316) at 0", "Insert MethodInvocation(313) into MethodInvocation(315) at 0", "Update SimpleName: addBinding(330) to asEagerSingleton", "Move SimpleName: addBinding(330) into MethodInvocation(315) at 1", "Move MethodInvocation(295) into MethodInvocation(313) at 0", "Update SimpleName: binding(320) to bind", "Move SimpleName: binding(320) into MethodInvocation(313) at 1", "Move TypeLiteral(326) into MethodInvocation(313) at 2", "Update SimpleType: ResourcesLifecycleAnnotationProcessor(325) to LifecycleManager", "Update SimpleName: ResourcesLifecycleAnnotationProcessor(324) to LifecycleManager", "Update SimpleType: ConfigurationProvider(382) to LifecycleConfigurationProviders", "Update SimpleName: ConfigurationProvider(381) to LifecycleConfigurationProviders", "Delete QualifiedName: com.google.inject.multibindings.Multibinder(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.netflix.governator.lifecycle.processors.ConfigurationProviderLifecycleAnnotationProcessor(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: com.netflix.governator.lifecycle.processors.PostConstructLifecycleAnnotationProcessor(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: com.netflix.governator.lifecycle.processors.PreConfigureLifecycleAnnotationProcessor(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.netflix.governator.lifecycle.processors.PreDestroyLifecycleAnnotationProcessor(46)", "Delete ImportDeclaration(47)", "Delete SimpleName: Multibinder(286)", "Delete SimpleType: Multibinder(287)", "Delete SimpleName: LifecycleAnnotationProcessor(288)", "Delete SimpleType: LifecycleAnnotationProcessor(289)", "Delete ParameterizedType: Multibinder<LifecycleAnnotationProcessor>(290)", "Delete SimpleName: binding(291)", "Delete SimpleName: Multibinder(292)", "Delete SimpleName: newSetBinder(293)", "Delete SimpleName: LifecycleAnnotationProcessor(296)", "Delete SimpleType: LifecycleAnnotationProcessor(297)", "Delete TypeLiteral(298)", "Delete MethodInvocation(299)", "Delete VariableDeclarationFragment(300)", "Delete VariableDeclarationStatement(301)", "Delete SimpleName: binding(302)", "Delete SimpleName: addBinding(303)", "Delete MethodInvocation(304)", "Delete SimpleName: to(305)", "Delete SimpleName: PreConfigureLifecycleAnnotationProcessor(306)", "Delete SimpleType: PreConfigureLifecycleAnnotationProcessor(307)", "Delete TypeLiteral(308)", "Delete MethodInvocation(309)", "Delete ExpressionStatement(310)", "Delete SimpleName: binding(311)", "Delete SimpleName: addBinding(312)", "Delete MethodInvocation(313)", "Delete SimpleName: to(314)", "Delete SimpleName: ConfigurationProviderLifecycleAnnotationProcessor(315)", "Delete SimpleType: ConfigurationProviderLifecycleAnnotationProcessor(316)", "Delete TypeLiteral(317)", "Delete MethodInvocation(318)", "Delete ExpressionStatement(319)", "Delete SimpleName: addBinding(321)", "Delete MethodInvocation(322)", "Delete SimpleName: to(323)", "Delete MethodInvocation(327)", "Delete ExpressionStatement(328)", "Delete SimpleName: binding(329)", "Delete MethodInvocation(331)", "Delete SimpleName: to(332)", "Delete SimpleName: PostConstructLifecycleAnnotationProcessor(333)", "Delete SimpleType: PostConstructLifecycleAnnotationProcessor(334)", "Delete TypeLiteral(335)", "Delete MethodInvocation(336)", "Delete ExpressionStatement(337)", "Delete SimpleName: binding(338)", "Delete SimpleName: addBinding(339)", "Delete MethodInvocation(340)", "Delete SimpleName: to(341)", "Delete SimpleName: PreDestroyLifecycleAnnotationProcessor(342)", "Delete SimpleType: PreDestroyLifecycleAnnotationProcessor(343)", "Delete TypeLiteral(344)", "Delete MethodInvocation(345)", "Delete ExpressionStatement(346)"]}}, {"InternalLifecycleModule_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: java.util.concurrent.ExecutionException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: java.util.concurrent.atomic.AtomicReference to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: com.google.common.cache.CacheBuilder to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "MOVE from CompilationUnit", "operations": ["MOV TypeDeclaration: class to CompilationUnit at 25", "MOV SimpleType: AbstractModule to TypeDeclaration: class at 3"]}, {"root": "UPDATE from java.util.concurrent.ConcurrentMap to java.util.concurrent.ConcurrentHashMap", "operations": ["UPD QualifiedName: java.util.concurrent.ConcurrentMap from java.util.concurrent.ConcurrentMap to java.util.concurrent.ConcurrentHashMap"]}, {"root": "UPDATE from com.google.common.collect.Maps to com.google.common.cache.CacheLoader", "operations": ["UPD QualifiedName: com.google.common.collect.Maps from com.google.common.collect.Maps to com.google.common.cache.CacheLoader"]}, {"root": "UPDATE from com.netflix.governator.lifecycle.LifecycleMethodsFactory to com.google.common.cache.LoadingCache", "operations": ["UPD QualifiedName: com.netflix.governator.lifecycle.LifecycleMethodsFactory from com.netflix.governator.lifecycle.LifecycleMethodsFactory to com.google.common.cache.LoadingCache"]}, {"root": "UPDATE from LifecycleInjectionListener to InternalLifecycleModule", "operations": ["UPD SimpleName: LifecycleInjectionListener from LifecycleInjectionListener to InternalLifecycleModule", "UPD SimpleName: LifecycleInjectionListener from LifecycleInjectionListener to InternalLifecycleModule"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: LifecycleMethods to ParameterizedType: CacheLoader<Class<?>,LifecycleMethods> at 2", "INS Modifier: public to MethodDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleType: Exception to MethodDeclaration at 5", "INS SimpleName: Class to SimpleType: Class at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: key to SingleVariableDeclaration at 1", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS SimpleType: CacheLoader to ParameterizedType: CacheLoader<Class<?>,LifecycleMethods> at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: key to ClassInstanceCreation at 1", "INS ParameterizedType: CacheLoader<Class<?>,LifecycleMethods> to ClassInstanceCreation at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: softValues to MethodInvocation at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS ParameterizedType: Class<?> to ParameterizedType: CacheLoader<Class<?>,LifecycleMethods> at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: LifecycleMethods to SimpleType: LifecycleMethods at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: build to MethodInvocation at 1", "INS SimpleName: load to MethodDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: CacheLoader to SimpleType: CacheLoader at 0", "INS SimpleName: Exception to SimpleType: Exception at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 10", "operations": ["INS Block to MethodDeclaration at 2", "INS SimpleType: AtomicReference to ParameterizedType: AtomicReference<LifecycleManager> at 0", "INS ParameterizedType: AtomicReference<LifecycleManager> to SingleVariableDeclaration at 0", "INS SimpleName: AtomicReference to SimpleType: AtomicReference at 0", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS SingleVariableDeclaration to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: configure to MethodDeclaration at 3", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS PrimitiveType: void to MethodDeclaration at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: bindListener to MethodInvocation at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: ConcurrentMap<Class<?>,LifecycleMethods> to FieldDeclaration at 2", "MOV Modifier: final to FieldDeclaration at 1", "MOV Modifier: private to FieldDeclaration at 0"]}, {"root": "UPDATE from ConcurrentMap<Class<?>,LifecycleMethods> to LoadingCache<Class<?>,LifecycleMethods>", "operations": ["UPD ParameterizedType: ConcurrentMap<Class<?>,LifecycleMethods> from ConcurrentMap<Class<?>,LifecycleMethods> to LoadingCache<Class<?>,LifecycleMethods>"]}, {"root": "INS ParameterizedType: AtomicReference<LifecycleManager> to FieldDeclaration at 2", "operations": ["INS SimpleType: AtomicReference to ParameterizedType: AtomicReference<LifecycleManager> at 0", "INS ParameterizedType: AtomicReference<LifecycleManager> to FieldDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: LifecycleInjectionListener to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6", "INS SimpleName: manager to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: get to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: lifecycleManager to MethodInvocation at 0", "INS SimpleName: manager to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from ConcurrentMap to LoadingCache", "operations": ["UPD SimpleName: ConcurrentMap from ConcurrentMap to LoadingCache", "UPD SimpleType: ConcurrentMap from ConcurrentMap to LoadingCache"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: lifecycleMethods to VariableDeclarationFragment at 0"]}, {"root": "MOVE from ParameterizedType: AtomicReference<LifecycleManager>", "operations": ["MOV SimpleType: LifecycleManager to ParameterizedType: AtomicReference<LifecycleManager> at 1"]}, {"root": "UPDATE from manager to lifecycleManager", "operations": ["UPD SimpleName: manager from manager to lifecycleManager", "UPD SimpleName: factory from factory to lifecycleManager", "UPD SimpleName: manager from manager to lifecycleManager", "UPD SimpleName: factory from factory to lifecycleManager"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: factory to SingleVariableDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS TryStatement to Block at 0", "operations": ["INS SimpleType: ExecutionException to SingleVariableDeclaration at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to TryStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: e to ClassInstanceCreation at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: ExecutionException to SimpleType: ExecutionException at 0", "INS Block to CatchClause at 1", "INS TryStatement to Block at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0"]}, {"root": "UPDATE from LifecycleMethodsFactory to AtomicReference", "operations": ["UPD SimpleName: LifecycleMethodsFactory from LifecycleMethodsFactory to AtomicReference"]}, {"root": "MOVE from SimpleType: AtomicReference", "operations": ["MOV SimpleName: LifecycleMethodsFactory to SimpleType: AtomicReference at 0"]}, {"root": "MOVE from ParameterizedType: AtomicReference<LifecycleManager>", "operations": ["MOV SimpleType: LifecycleManager to ParameterizedType: AtomicReference<LifecycleManager> at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: LifecycleManager to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from LifecycleMethodsFactory to LifecycleManager", "operations": ["UPD SimpleName: LifecycleMethodsFactory from LifecycleMethodsFactory to LifecycleManager"]}, {"root": "MOVE from SimpleType: LifecycleManager", "operations": ["MOV SimpleName: LifecycleMethodsFactory to SimpleType: LifecycleManager at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "UPDATE from Maps to CacheBuilder", "operations": ["UPD SimpleName: Maps from Maps to CacheBuilder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Maps to MethodInvocation at 0", "MOV SimpleName: newConcurrentMap to MethodInvocation at 1"]}, {"root": "UPDATE from newConcurrentMap to newBuilder", "operations": ["UPD SimpleName: newConcurrentMap from newConcurrentMap to newBuilder"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: TypeListener to ClassInstanceCreation at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: LifecycleMethods to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleName: hear to MethodDeclaration at 4", "MOV Block to MethodDeclaration at 7", "MOV PrimitiveType: void to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV TypeParameter to MethodDeclaration at 2", "MOV Modifier: public to MethodDeclaration at 1", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from I to T", "operations": ["UPD SimpleName: I from I to T", "UPD SimpleName: I from I to T", "UPD SimpleName: I from I to T", "UPD SimpleName: I from I to T", "UPD SimpleType: I from I to T", "UPD SimpleName: I from I to T", "UPD SimpleType: I from I to T", "UPD SimpleType: I from I to T", "UPD SimpleType: I from I to T"]}, {"root": "UPDATE from TypeLiteral<I> to TypeLiteral<T>", "operations": ["UPD ParameterizedType: TypeLiteral<I> from TypeLiteral<I> to TypeLiteral<T>"]}, {"root": "UPDATE from TypeEncounter<I> to TypeEncounter<T>", "operations": ["UPD ParameterizedType: TypeEncounter<I> from TypeEncounter<I> to TypeEncounter<T>"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: LifecycleMethods to ClassInstanceCreation at 0"]}, {"root": "UPDATE from InjectionListener<I> to InjectionListener<T>", "operations": ["UPD ParameterizedType: InjectionListener<I> from InjectionListener<I> to InjectionListener<T>"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleName: manager", "DEL Modifier: final", "DEL FieldDeclaration"]}, {"root": "DEL SimpleType: LifecycleMethodsFactory", "operations": ["DEL SimpleType: LifecycleMethodsFactory"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: factory", "DEL FieldAccess", "DEL SingleVariableDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL Assignment: =", "DEL ThisExpression", "DEL SimpleName: manager", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: factory", "DEL SimpleType: LifecycleMethodsFactory"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: methods", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: existing", "DEL SimpleName: existing", "DEL SimpleName: existing", "DEL Block", "DEL SimpleName: create", "DEL SimpleName: methods", "DEL InfixExpression: !=", "DEL IfStatement", "DEL NullLiteral", "DEL ReturnStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: methods", "DEL NullLiteral", "DEL SimpleName: methods", "DEL SimpleName: factory", "DEL SimpleName: lifecycleMethods", "DEL Block", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: clazz", "DEL SimpleName: clazz", "DEL SimpleName: putIfAbsent"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: methods", "DEL ReturnStatement"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ThisExpression", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleType: LifecycleMethodsFactory", "DEL SimpleName: factory", "DEL ExpressionStatement", "DEL SimpleName: LifecycleManager", "DEL SimpleName: LifecycleMethodsFactory", "DEL SimpleName: factory", "DEL ClassInstanceCreation", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL SimpleName: LifecycleMethodsFactory", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: manager", "DEL FieldAccess", "DEL MethodDeclaration", "DEL SimpleName: configure", "DEL Modifier: private", "DEL Modifier: final", "DEL ExpressionStatement", "DEL Modifier: private", "DEL Assignment: =", "DEL SimpleName: manager", "DEL SimpleType: LifecycleInjectionListener", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleName: LifecycleInjectionListener", "DEL SimpleName: InternalLifecycleModule", "DEL SimpleName: InternalLifecycleModule", "DEL SimpleName: manager", "DEL FieldDeclaration", "DEL SimpleName: manager", "DEL Block", "DEL Modifier: public", "DEL SimpleName: factory", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: factory", "DEL ExpressionStatement", "DEL SimpleName: manager", "DEL ThisExpression", "DEL SimpleType: LifecycleMethodsFactory", "DEL SimpleName: bindListener", "DEL SimpleName: factory", "DEL SimpleType: LifecycleManager"]}]}}, {"InternalLifecycleModule_diff": {"operations": ["Move ImportDeclaration(41) into CompilationUnit(653) at 6", "Insert ImportDeclaration(11) into CompilationUnit(653) at 5", "Insert ImportDeclaration(13) into CompilationUnit(653) at 6", "Insert ImportDeclaration(15) into CompilationUnit(653) at 7", "Move TypeDeclaration: class(618) into CompilationUnit(653) at 25", "Update QualifiedName: java.util.concurrent.ConcurrentMap(6) to java.util.concurrent.ConcurrentHashMap", "Insert QualifiedName: java.util.concurrent.ExecutionException(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: java.util.concurrent.atomic.AtomicReference(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: com.google.common.cache.CacheBuilder(14) into ImportDeclaration(15) at 0", "Update QualifiedName: com.google.common.collect.Maps(10) to com.google.common.cache.CacheLoader", "Update QualifiedName: com.netflix.governator.lifecycle.LifecycleMethodsFactory(40) to com.google.common.cache.LoadingCache", "Update SimpleName: LifecycleInjectionListener(49) to InternalLifecycleModule", "Move SimpleType: AbstractModule(46) into TypeDeclaration: class(652) at 3", "Insert FieldDeclaration(125) into TypeDeclaration: class(652) at 3", "Insert MethodDeclaration(151) into TypeDeclaration: class(652) at 5", "Insert MethodDeclaration(219) into TypeDeclaration: class(652) at 6", "Move Modifier: private(72) into FieldDeclaration(125) at 0", "Move Modifier: final(73) into FieldDeclaration(125) at 1", "Update ParameterizedType: ConcurrentMap<Class<?>,LifecycleMethods>(82) to LoadingCache<Class<?>,LifecycleMethods>", "Move ParameterizedType: ConcurrentMap<Class<?>,LifecycleMethods>(82) into FieldDeclaration(125) at 2", "Insert VariableDeclarationFragment(124) into FieldDeclaration(125) at 3", "Insert ParameterizedType: AtomicReference<LifecycleManager>(132) into FieldDeclaration(135) at 2", "Update SimpleName: LifecycleInjectionListener(103) to InternalLifecycleModule", "Move SimpleName: LifecycleInjectionListener(103) into MethodDeclaration(151) at 0", "Insert SingleVariableDeclaration(143) into MethodDeclaration(151) at 1", "Insert Block(150) into MethodDeclaration(151) at 2", "Move MarkerAnnotation(658) into MethodDeclaration(219) at 0", "Insert Modifier: public(154) into MethodDeclaration(219) at 1", "Insert PrimitiveType: void(155) into MethodDeclaration(219) at 2", "Insert SimpleName: configure(156) into MethodDeclaration(219) at 3", "Insert Block(218) into MethodDeclaration(219) at 4", "Insert Block(319) into MethodDeclaration(320) at 6", "Update SimpleType: ConcurrentMap(75) to LoadingCache", "Move SimpleName: lifecycleMethods(83) into VariableDeclarationFragment(124) at 0", "Insert MethodInvocation(123) into VariableDeclarationFragment(124) at 1", "Insert SimpleType: AtomicReference(129) into ParameterizedType: AtomicReference<LifecycleManager>(132) at 0", "Move SimpleType: LifecycleManager(92) into ParameterizedType: AtomicReference<LifecycleManager>(132) at 1", "Update SimpleName: factory(100) to lifecycleManager", "Insert ParameterizedType: AtomicReference<LifecycleManager>(141) into SingleVariableDeclaration(143) at 0", "Update SimpleName: factory(110) to lifecycleManager", "Move SimpleName: factory(110) into SingleVariableDeclaration(143) at 1", "Move ExpressionStatement(117) into Block(150) at 0", "Insert ExpressionStatement(217) into Block(218) at 0", "Insert VariableDeclarationStatement(243) into Block(319) at 0", "Insert IfStatement(318) into Block(319) at 1", "Insert TryStatement(649) into Block(650) at 0", "Update SimpleName: ConcurrentMap(74) to LoadingCache", "Insert MethodInvocation(89) into MethodInvocation(123) at 0", "Insert SimpleName: build(90) into MethodInvocation(123) at 1", "Insert ClassInstanceCreation(122) into MethodInvocation(123) at 2", "Update SimpleName: LifecycleMethodsFactory(98) to AtomicReference", "Move SimpleName: LifecycleMethodsFactory(98) into SimpleType: AtomicReference(129) at 0", "Insert SimpleType: AtomicReference(138) into ParameterizedType: AtomicReference<LifecycleManager>(141) at 0", "Move SimpleType: LifecycleManager(629) into ParameterizedType: AtomicReference<LifecycleManager>(141) at 1", "Insert MethodInvocation(216) into ExpressionStatement(217) at 0", "Move SimpleType: LifecycleManager(105) into VariableDeclarationStatement(243) at 0", "Insert VariableDeclarationFragment(242) into VariableDeclarationStatement(243) at 1", "Insert InfixExpression: !=(246) into IfStatement(318) at 0", "Move Block(263) into IfStatement(318) at 1", "Insert Block(637) into TryStatement(649) at 0", "Insert CatchClause(648) into TryStatement(649) at 1", "Insert MethodInvocation(87) into MethodInvocation(89) at 0", "Insert SimpleName: softValues(88) into MethodInvocation(89) at 1", "Insert ParameterizedType: CacheLoader<Class<?>,LifecycleMethods>(99) into ClassInstanceCreation(122) at 0", "Insert AnonymousClassDeclaration(121) into ClassInstanceCreation(122) at 1", "Insert SimpleName: AtomicReference(137) into SimpleType: AtomicReference(138) at 0", "Update SimpleName: LifecycleMethodsFactory(108) to LifecycleManager", "Move SimpleName: LifecycleMethodsFactory(108) into SimpleType: LifecycleManager(140) at 0", "Update SimpleName: manager(115) to lifecycleManager", "Insert SimpleName: bindListener(157) into MethodInvocation(216) at 0", "Move MethodInvocation(665) into MethodInvocation(216) at 1", "Insert ClassInstanceCreation(215) into MethodInvocation(216) at 2", "Insert SimpleName: manager(238) into VariableDeclarationFragment(242) at 0", "Insert MethodInvocation(241) into VariableDeclarationFragment(242) at 1", "Insert SimpleName: manager(244) into InfixExpression: !=(246) at 0", "Insert NullLiteral(245) into InfixExpression: !=(246) at 1", "Insert ReturnStatement(636) into Block(637) at 0", "Insert SingleVariableDeclaration(641) into CatchClause(648) at 0", "Insert Block(647) into CatchClause(648) at 1", "Update SimpleName: Maps(84) to CacheBuilder", "Move SimpleName: Maps(84) into MethodInvocation(87) at 0", "Update SimpleName: newConcurrentMap(85) to newBuilder", "Move SimpleName: newConcurrentMap(85) into MethodInvocation(87) at 1", "Insert SimpleType: CacheLoader(92) into ParameterizedType: CacheLoader<Class<?>,LifecycleMethods>(99) at 0", "Insert ParameterizedType: Class<?>(96) into ParameterizedType: CacheLoader<Class<?>,LifecycleMethods>(99) at 1", "Insert SimpleType: LifecycleMethods(98) into ParameterizedType: CacheLoader<Class<?>,LifecycleMethods>(99) at 2", "Insert MethodDeclaration(120) into AnonymousClassDeclaration(121) at 0", "Update SimpleName: manager(113) to lifecycleManager", "Move SimpleType: TypeListener(51) into ClassInstanceCreation(215) at 0", "Insert AnonymousClassDeclaration(214) into ClassInstanceCreation(215) at 1", "Insert SimpleName: lifecycleManager(239) into MethodInvocation(241) at 0", "Insert SimpleName: get(240) into MethodInvocation(241) at 1", "Move MethodInvocation(582) into ReturnStatement(636) at 0", "Insert SimpleType: ExecutionException(639) into SingleVariableDeclaration(641) at 0", "Insert SimpleName: e(640) into SingleVariableDeclaration(641) at 1", "Insert ThrowStatement(646) into Block(647) at 0", "Insert SimpleName: CacheLoader(91) into SimpleType: CacheLoader(92) at 0", "Insert SimpleType: Class(94) into ParameterizedType: Class<?>(96) at 0", "Insert WildcardType: ?(95) into ParameterizedType: Class<?>(96) at 1", "Insert SimpleName: LifecycleMethods(97) into SimpleType: LifecycleMethods(98) at 0", "Insert MarkerAnnotation(101) into MethodDeclaration(120) at 0", "Insert Modifier: public(102) into MethodDeclaration(120) at 1", "Move SimpleType: LifecycleMethods(596) into MethodDeclaration(120) at 2", "Insert SimpleName: load(105) into MethodDeclaration(120) at 3", "Insert SingleVariableDeclaration(111) into MethodDeclaration(120) at 4", "Insert SimpleType: Exception(113) into MethodDeclaration(120) at 5", "Insert Block(119) into MethodDeclaration(120) at 6", "Insert MethodDeclaration(213) into AnonymousClassDeclaration(214) at 0", "Insert SimpleName: ExecutionException(638) into SimpleType: ExecutionException(639) at 0", "Insert ClassInstanceCreation(645) into ThrowStatement(646) at 0", "Insert SimpleName: Class(93) into SimpleType: Class(94) at 0", "Insert SimpleName: Override(100) into MarkerAnnotation(101) at 0", "Insert ParameterizedType: Class<?>(109) into SingleVariableDeclaration(111) at 0", "Insert SimpleName: key(110) into SingleVariableDeclaration(111) at 1", "Insert SimpleName: Exception(112) into SimpleType: Exception(113) at 0", "Insert ReturnStatement(118) into Block(119) at 0", "Move MarkerAnnotation(127) into MethodDeclaration(213) at 0", "Move Modifier: public(128) into MethodDeclaration(213) at 1", "Move TypeParameter(130) into MethodDeclaration(213) at 2", "Move PrimitiveType: void(131) into MethodDeclaration(213) at 3", "Move SimpleName: hear(132) into MethodDeclaration(213) at 4", "Move SingleVariableDeclaration(140) into MethodDeclaration(213) at 5", "Move SingleVariableDeclaration(147) into MethodDeclaration(213) at 6", "Move Block(175) into MethodDeclaration(213) at 7", "Insert SimpleType: RuntimeException(643) into ClassInstanceCreation(645) at 0", "Insert SimpleName: e(644) into ClassInstanceCreation(645) at 1", "Insert SimpleType: Class(107) into ParameterizedType: Class<?>(109) at 0", "Insert WildcardType: ?(108) into ParameterizedType: Class<?>(109) at 1", "Insert ClassInstanceCreation(117) into ReturnStatement(118) at 0", "Update SimpleName: I(129) to T", "Update ParameterizedType: TypeLiteral<I>(138) to TypeLiteral<T>", "Update ParameterizedType: TypeEncounter<I>(145) to TypeEncounter<T>", "Insert SimpleName: RuntimeException(642) into SimpleType: RuntimeException(643) at 0", "Insert SimpleName: Class(106) into SimpleType: Class(107) at 0", "Move SimpleType: LifecycleMethods(577) into ClassInstanceCreation(117) at 0", "Insert SimpleName: key(116) into ClassInstanceCreation(117) at 1", "Update SimpleType: I(137) to T", "Update SimpleType: I(144) to T", "Update SimpleName: I(136) to T", "Update SimpleName: I(143) to T", "Update ParameterizedType: InjectionListener<I>(154) to InjectionListener<T>", "Update SimpleType: I(153) to T", "Update SimpleName: I(152) to T", "Update SimpleType: I(161) to T", "Update SimpleName: I(160) to T", "Delete Modifier: public(47)", "Delete Modifier: static(48)", "Delete MethodInvocation(86)", "Delete VariableDeclarationFragment(87)", "Delete FieldDeclaration(88)", "Delete Modifier: private(89)", "Delete Modifier: final(90)", "Delete SimpleName: manager(93)", "Delete VariableDeclarationFragment(94)", "Delete FieldDeclaration(95)", "Delete SimpleType: LifecycleMethodsFactory(99)", "Delete SimpleName: manager(106)", "Delete SingleVariableDeclaration(107)", "Delete SimpleType: LifecycleMethodsFactory(109)", "Delete SingleVariableDeclaration(111)", "Delete ThisExpression(118)", "Delete SimpleName: factory(119)", "Delete FieldAccess(120)", "Delete SimpleName: factory(121)", "Delete Assignment: =(122)", "Delete ExpressionStatement(123)", "Delete Block(124)", "Delete MethodDeclaration(125)", "Delete MethodDeclaration(176)", "Delete SimpleName: methods(578)", "Delete VariableDeclarationFragment(583)", "Delete VariableDeclarationStatement(584)", "Delete SimpleName: methods(585)", "Delete NullLiteral(586)", "Delete InfixExpression: ==(587)", "Delete SimpleName: methods(588)", "Delete SimpleName: factory(589)", "Delete SimpleName: create(590)", "Delete SimpleName: clazz(591)", "Delete MethodInvocation(592)", "Delete Assignment: =(593)", "Delete ExpressionStatement(594)", "Delete SimpleName: existing(597)", "Delete SimpleName: lifecycleMethods(598)", "Delete SimpleName: putIfAbsent(599)", "Delete SimpleName: clazz(600)", "Delete SimpleName: methods(601)", "Delete MethodInvocation(602)", "Delete VariableDeclarationFragment(603)", "Delete VariableDeclarationStatement(604)", "Delete SimpleName: existing(605)", "Delete NullLiteral(606)", "Delete InfixExpression: !=(607)", "Delete SimpleName: existing(608)", "Delete ReturnStatement(609)", "Delete Block(610)", "Delete IfStatement(611)", "Delete Block(612)", "Delete IfStatement(613)", "Delete SimpleName: methods(614)", "Delete ReturnStatement(615)", "Delete SimpleName: InternalLifecycleModule(44)", "Delete Modifier: final(619)", "Delete Modifier: private(620)", "Delete SimpleName: LifecycleMethodsFactory(621)", "Delete SimpleType: LifecycleMethodsFactory(622)", "Delete SimpleName: factory(623)", "Delete VariableDeclarationFragment(624)", "Delete FieldDeclaration(625)", "Delete Modifier: final(626)", "Delete Modifier: private(627)", "Delete SimpleName: manager(630)", "Delete VariableDeclarationFragment(631)", "Delete FieldDeclaration(632)", "Delete Modifier: public(633)", "Delete SimpleName: InternalLifecycleModule(634)", "Delete SimpleName: LifecycleManager(635)", "Delete SimpleType: LifecycleManager(636)", "Delete SimpleName: manager(637)", "Delete SingleVariableDeclaration(638)", "Delete SimpleName: LifecycleMethodsFactory(639)", "Delete SimpleType: LifecycleMethodsFactory(640)", "Delete SimpleName: factory(641)", "Delete SingleVariableDeclaration(642)", "Delete ThisExpression(643)", "Delete SimpleName: factory(644)", "Delete FieldAccess(645)", "Delete SimpleName: factory(646)", "Delete Assignment: =(647)", "Delete ExpressionStatement(648)", "Delete ThisExpression(649)", "Delete SimpleName: manager(650)", "Delete FieldAccess(651)", "Delete SimpleName: manager(652)", "Delete Assignment: =(653)", "Delete ExpressionStatement(654)", "Delete Block(655)", "Delete MethodDeclaration(656)", "Delete Modifier: public(659)", "Delete PrimitiveType: void(660)", "Delete SimpleName: configure(661)", "Delete SimpleName: bindListener(662)", "Delete SimpleName: LifecycleInjectionListener(666)", "Delete SimpleType: LifecycleInjectionListener(667)", "Delete SimpleName: manager(668)", "Delete SimpleName: factory(669)", "Delete ClassInstanceCreation(670)", "Delete MethodInvocation(671)", "Delete ExpressionStatement(672)", "Delete Block(673)", "Delete MethodDeclaration(674)", "Delete TypeDeclaration: class(675)"]}}, {"LifecycleAnnotationProcessor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.guice"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.annotation.Annotation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleState", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL SimpleType: LifecycleMethods", "DEL SimpleName: methods", "DEL TextElement: Return Field annotations that are to be processed by this LifecycleAnnotationProcessor", "DEL Javadoc", "DEL SimpleName: Exception", "DEL TagElement", "DEL TagElement", "DEL SimpleName: LifecycleState", "DEL SimpleName: LifecycleMethods", "DEL TextElement: Plugin to LifecycleManager which identifies annotations to be processed as well ", "DEL TagElement", "DEL TagElement: @param", "DEL PrimitiveType: void", "DEL TagElement", "DEL SimpleName: Annotation", "DEL Javadoc", "DEL SimpleName: process", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL TextElement: LifecycleManager which check if the class contains any annotations specified in ", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: getMethodAnnotations", "DEL SimpleName: Collection", "DEL SimpleType: Annotation", "DEL TextElement: injected.", "DEL TextElement: annotation processing (via. the process() methods) after a new instance is ", "DEL Javadoc", "DEL TagElement: @return", "DEL ParameterizedType: Class<? extends Annotation>", "DEL TagElement: @author", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: Collection", "DEL ParameterizedType: Class<? extends Annotation>", "DEL TagElement", "DEL SimpleName: Annotation", "DEL TagElement: @throws", "DEL SimpleType: Class", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL SimpleType: Exception", "DEL TextElement: Return Method annotations that are to be processed by this LifecycleAnnotationProcessor", "DEL TextElement: as a method through which they are processed.  As Guice hears about classes ", "DEL Javadoc", "DEL WildcardType: ? extends Annotation", "DEL SimpleType: Collection", "DEL SimpleName: methods", "DEL SimpleType: Annotation", "DEL Javadoc", "DEL SimpleType: Class", "DEL TextElement: Return the lifecycle state with which this processor is associated", "DEL MethodDeclaration", "DEL TextElement:  elandau", "DEL TextElement: Process annotations as part of lifecycle management for the provided object", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL TagElement: @return", "DEL SimpleName: getClassAnnotations", "DEL SimpleName: Class", "DEL TagElement: @return", "DEL SimpleName: obj", "DEL SimpleType: LifecycleState", "DEL SimpleName: Annotation", "DEL Modifier: public", "DEL SimpleType: Object", "DEL TagElement: @return", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL Javadoc", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: Collection", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL SimpleType: Collection", "DEL SimpleName: Class", "DEL TypeDeclaration: interface", "DEL WildcardType: ? extends Annotation", "DEL TextElement: any of the configuration LifecycleAnnotationProcessor's and then enables ", "DEL SimpleName: getState", "DEL TextElement: Return Class annotations that are to be processed by this LifecycleAnnotationProcessor", "DEL MethodDeclaration", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL MethodDeclaration", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL SimpleName: Exception", "DEL SimpleType: Collection", "DEL SimpleType: Annotation", "DEL SimpleName: getFieldAnnotations", "DEL SimpleType: Class", "DEL SimpleName: Object"]}]}}, {"LifecycleAnnotationProcessor_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.guice(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.annotation.Annotation(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Collection(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleState(8)", "Delete ImportDeclaration(9)", "Delete TextElement: Plugin to LifecycleManager which identifies annotations to be processed as well (10)", "Delete TextElement: as a method through which they are processed.  As Guice hears about classes (11)", "Delete TextElement: LifecycleManager which check if the class contains any annotations specified in (12)", "Delete TextElement: any of the configuration LifecycleAnnotationProcessor's and then enables (13)", "Delete TextElement: annotation processing (via. the process() methods) after a new instance is (14)", "Delete TextElement: injected.(15)", "Delete TagElement(16)", "Delete TextElement:  elandau(17)", "Delete TagElement: @author(18)", "Delete Javadoc(19)", "Delete Modifier: public(20)", "Delete SimpleName: LifecycleAnnotationProcessor(21)", "Delete TextElement: Process annotations as part of lifecycle management for the provided object(22)", "Delete TagElement(23)", "Delete SimpleName: obj(24)", "Delete TagElement: @param(25)", "Delete SimpleName: methods(26)", "Delete TagElement: @param(27)", "Delete SimpleName: Exception(28)", "Delete TagElement: @throws(29)", "Delete Javadoc(30)", "Delete PrimitiveType: void(31)", "Delete SimpleName: process(32)", "Delete SimpleName: Object(33)", "Delete SimpleType: Object(34)", "Delete SimpleName: obj(35)", "Delete SingleVariableDeclaration(36)", "Delete SimpleName: LifecycleMethods(37)", "Delete SimpleType: LifecycleMethods(38)", "Delete SimpleName: methods(39)", "Delete SingleVariableDeclaration(40)", "Delete SimpleName: Exception(41)", "Delete SimpleType: Exception(42)", "Delete MethodDeclaration(43)", "Delete TextElement: Return Field annotations that are to be processed by this LifecycleAnnotationProcessor(44)", "Delete TagElement(45)", "Delete TagElement: @return(46)", "Delete Javadoc(47)", "Delete SimpleName: Collection(48)", "Delete SimpleType: Collection(49)", "Delete SimpleName: Class(50)", "Delete SimpleType: Class(51)", "Delete SimpleName: Annotation(52)", "Delete SimpleType: Annotation(53)", "Delete WildcardType: ? extends Annotation(54)", "Delete ParameterizedType: Class<? extends Annotation>(55)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(56)", "Delete SimpleName: getFieldAnnotations(57)", "Delete MethodDeclaration(58)", "Delete TextElement: Return Method annotations that are to be processed by this LifecycleAnnotationProcessor(59)", "Delete TagElement(60)", "Delete TagElement: @return(61)", "Delete Javadoc(62)", "Delete SimpleName: Collection(63)", "Delete SimpleType: Collection(64)", "Delete SimpleName: Class(65)", "Delete SimpleType: Class(66)", "Delete SimpleName: Annotation(67)", "Delete SimpleType: Annotation(68)", "Delete WildcardType: ? extends Annotation(69)", "Delete ParameterizedType: Class<? extends Annotation>(70)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(71)", "Delete SimpleName: getMethodAnnotations(72)", "Delete MethodDeclaration(73)", "Delete TextElement: Return Class annotations that are to be processed by this LifecycleAnnotationProcessor(74)", "Delete TagElement(75)", "Delete TagElement: @return(76)", "Delete Javadoc(77)", "Delete SimpleName: Collection(78)", "Delete SimpleType: Collection(79)", "Delete SimpleName: Class(80)", "Delete SimpleType: Class(81)", "Delete SimpleName: Annotation(82)", "Delete SimpleType: Annotation(83)", "Delete WildcardType: ? extends Annotation(84)", "Delete ParameterizedType: Class<? extends Annotation>(85)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(86)", "Delete SimpleName: getClassAnnotations(87)", "Delete MethodDeclaration(88)", "Delete TextElement: Return the lifecycle state with which this processor is associated(89)", "Delete TagElement(90)", "Delete TagElement: @return(91)", "Delete Javadoc(92)", "Delete SimpleName: LifecycleState(93)", "Delete SimpleType: LifecycleState(94)", "Delete SimpleName: getState(95)", "Delete MethodDeclaration(96)", "Delete TypeDeclaration: interface(97)"]}}, {"LifecycleInjector_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 7", "MOV ImportDeclaration to CompilationUnit at 18", "MOV ImportDeclaration to CompilationUnit at 9"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 5"]}, {"root": "UPDATE from com.netflix.governator.lifecycle.DefaultClasspathScanner to java.util.Map.Entry", "operations": ["UPD QualifiedName: com.netflix.governator.lifecycle.DefaultClasspathScanner from com.netflix.governator.lifecycle.DefaultClasspathScanner to java.util.Map.Entry"]}, {"root": "UPDATE from com.netflix.governator.lifecycle.EmptyClasspathScanner to java.util.concurrent.atomic.AtomicReference", "operations": ["UPD QualifiedName: com.netflix.governator.lifecycle.EmptyClasspathScanner from com.netflix.governator.lifecycle.EmptyClasspathScanner to java.util.concurrent.atomic.AtomicReference"]}, {"root": "UPDATE from com.netflix.governator.lifecycle.LifecycleMethodsFactory to com.google.common.collect.Sets", "operations": ["UPD QualifiedName: com.netflix.governator.lifecycle.LifecycleMethodsFactory from com.netflix.governator.lifecycle.LifecycleMethodsFactory to com.google.common.collect.Sets"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: ignoreClasses to VariableDeclarationFragment at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS ParameterizedType: Collection<Class<?>> to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Class<?>> at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS ParameterizedType: Class<?> to ParameterizedType: Collection<Class<?>> at 1", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: ignoreAllClasses to VariableDeclarationFragment at 0", "INS PrimitiveType: boolean to FieldDeclaration at 2", "INS Modifier: final to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 7"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: Stage to SimpleType: Stage at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: stage to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS SimpleType: Stage to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 11", "INS SimpleType: LifecycleInjectorMode to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: LifecycleInjectorMode to SimpleType: LifecycleInjectorMode at 0", "INS SimpleName: mode to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 12", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: actions to VariableDeclarationFragment at 0", "INS SimpleType: PostInjectorAction to ParameterizedType: Set<PostInjectorAction> at 1", "INS FieldDeclaration to TypeDeclaration: class at 12", "INS ParameterizedType: Set<PostInjectorAction> to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleType: Set to ParameterizedType: Set<PostInjectorAction> at 0", "INS SimpleName: PostInjectorAction to SimpleType: PostInjectorAction at 0", "INS SimpleName: Set to SimpleType: Set at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: Set to SimpleType: Set at 0", "INS Modifier: private to FieldDeclaration at 0", "INS ParameterizedType: Set<ModuleTransformer> to FieldDeclaration at 1", "INS SimpleType: Set to ParameterizedType: Set<ModuleTransformer> at 0", "INS FieldDeclaration to TypeDeclaration: class at 13"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 22", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: createChildInjector to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SimpleName: childInjector to VariableDeclarationFragment at 0", "INS SimpleName: modules to VariableDeclarationFragment at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: call to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS EnhancedForStatement to Block at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: childInjector to ReturnStatement at 0", "INS SimpleName: createSimulatedChildInjector to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: == to IfStatement at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: mode to InfixExpression: == at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: transformer to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: localModules to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: localModules to MethodInvocation at 1", "INS SimpleName: transformers to EnhancedForStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to EnhancedForStatement at 2", "INS Block to IfStatement at 2", "INS QualifiedName: LifecycleInjectorMode.REAL_CHILD_INJECTORS to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: childInjector to Assignment: = at 0", "INS IfStatement to Block at 3", "INS EnhancedForStatement to Block at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: actions to EnhancedForStatement at 1", "INS SimpleName: childInjector to Assignment: = at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ReturnStatement to Block at 5", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: localModules to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: localModules to Assignment: = at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 28", "operations": ["INS SimpleName: localIgnoreClasses to ClassInstanceCreation at 3", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS SimpleName: localIgnoreClasses to VariableDeclarationFragment at 0", "INS SimpleName: injector to ClassInstanceCreation at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: ignoreAllClasses to PrefixExpression: ! at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS Block to IfStatement at 1", "INS SimpleName: scanner to ClassInstanceCreation at 2", "INS SimpleName: addAll to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 28", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: additionalModules to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: localModules to VariableDeclarationFragment at 0", "INS SimpleName: Sets to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: List to SimpleType: List at 0", "INS Block to MethodDeclaration at 5", "INS ReturnStatement to Block at 4", "INS IfStatement to Block at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ParameterizedType: List<Module> to VariableDeclarationStatement at 0", "INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 29", "operations": ["INS SimpleName: injector to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 4", "INS MethodDeclaration to TypeDeclaration: class at 29", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: ModuleTransformer to SimpleType: ModuleTransformer at 0", "INS ExpressionStatement to Block at 12", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: InternalLifecycleModule to ClassInstanceCreation at 0", "INS Block to MethodDeclaration at 2", "INS SimpleType: ModuleTransformer to ParameterizedType: Set<ModuleTransformer> at 1", "INS SimpleName: get to MethodInvocation at 1", "INS ParameterizedType: Set<ModuleTransformer> to ParameterizedType: TypeLiteral<Set<ModuleTransformer>> at 1", "INS SimpleName: lifecycleManagerRef to ClassInstanceCreation at 1", "INS SimpleName: set to MethodInvocation at 1", "INS SimpleType: Set to ParameterizedType: Set<ModuleTransformer> at 0", "INS ParameterizedType: TypeLiteral<Set<ModuleTransformer>> to ClassInstanceCreation at 0", "INS SimpleType: LifecycleManager to ParameterizedType: AtomicReference<LifecycleManager> at 1", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: TypeLiteral to SimpleType: TypeLiteral at 0", "INS ParameterizedType: AtomicReference<LifecycleManager> to VariableDeclarationStatement at 0", "INS SimpleName: LifecycleInjector to MethodDeclaration at 0", "INS ExpressionStatement to Block at 9", "INS SimpleName: internalBootstrapModule to MethodInvocation at 3", "INS SimpleType: AtomicReference to ParameterizedType: AtomicReference<LifecycleManager> at 0", "INS SimpleName: lifecycleManagerRef to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: Set to SimpleType: Set at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: TypeLiteral to ParameterizedType: TypeLiteral<Set<ModuleTransformer>> at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: InternalLifecycleModule to SimpleType: InternalLifecycleModule at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: injector to Assignment: = at 0", "INS ExpressionStatement to Block at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 30", "operations": ["INS ExpressionStatement to Block at 4", "INS Modifier: private to MethodDeclaration at 0", "INS ReturnStatement to Block at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: InternalLifecycleModule to ClassInstanceCreation at 0", "INS ParameterizedType: Collection<Module> to SingleVariableDeclaration at 0", "INS SimpleName: Module to SimpleType: Module at 0", "INS SimpleName: modules to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ParameterizedType: AtomicReference<LifecycleManager> to ClassInstanceCreation at 0", "INS SimpleName: List to SimpleType: List at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: lifecycleManagerAtomicReference to VariableDeclarationFragment at 0", "INS SimpleName: lifecycleManagerAtomicReference to ClassInstanceCreation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: AtomicReference to ParameterizedType: AtomicReference<LifecycleManager> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: AtomicReference to SimpleType: AtomicReference at 0", "INS SimpleName: createSimulatedChildInjector to MethodDeclaration at 2", "INS SimpleName: localModules to MethodInvocation at 0", "INS SimpleName: AtomicReference to SimpleType: AtomicReference at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Module> at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: parentObjects to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: lifecycleManager to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: localModules to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: LifecycleManager to ParameterizedType: AtomicReference<LifecycleManager> at 1", "INS MethodDeclaration to TypeDeclaration: class at 30", "INS SimpleName: LifecycleManager to SimpleType: LifecycleManager at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: internalLifecycleModule to VariableDeclarationFragment at 0", "INS SimpleName: modules to MethodInvocation at 2", "INS SimpleType: Module to ParameterizedType: Collection<Module> at 1", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: parentObjects to VariableDeclarationFragment at 0", "INS SimpleType: LifecycleManager to ParameterizedType: AtomicReference<LifecycleManager> at 1", "INS SimpleName: InternalLifecycleModule to SimpleType: InternalLifecycleModule at 0", "INS SimpleType: List to ParameterizedType: List<Module> at 0", "INS SimpleType: AtomicReference to ParameterizedType: AtomicReference<LifecycleManager> at 0", "INS SimpleType: AbstractModule to VariableDeclarationStatement at 0", "INS SimpleName: AbstractModule to SimpleType: AbstractModule at 0", "INS ParameterizedType: AtomicReference<LifecycleManager> to VariableDeclarationStatement at 0", "INS ParameterizedType: List<Module> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from List<ModuleTransformer> to List<Module>", "operations": ["UPD ParameterizedType: List<ModuleTransformer> from List<ModuleTransformer> to List<Module>"]}, {"root": "INS VariableDeclarationFragment to FieldDeclaration at 3", "operations": ["INS SimpleName: modules to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: Injector to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Injector to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: createChildInjector to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: Injector to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV Block to MethodDeclaration at 5", "MOV SimpleType: Injector to MethodDeclaration at 2", "MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleName: createInjector to MethodDeclaration at 3"]}, {"root": "UPDATE from clazz to createInjector", "operations": ["UPD SimpleName: clazz from clazz to createInjector", "UPD SimpleName: getPostInjectorActions from getPostInjectorActions to createInjector", "UPD SimpleName: getInjector from getInjector to createInjector"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: Injector to MethodDeclaration at 2", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Injector to MethodDeclaration at 1"]}, {"root": "INS SimpleType: Module to ParameterizedType: List<ModuleTransformer> at 1", "operations": ["INS SimpleType: Module to ParameterizedType: List<ModuleTransformer> at 1", "INS SimpleName: Module to SimpleType: Module at 0"]}, {"root": "MOVE from ParameterizedType: Set<ModuleTransformer>", "operations": ["MOV SimpleType: ModuleTransformer to ParameterizedType: Set<ModuleTransformer> at 1"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 10", "MOV VariableDeclarationStatement to Block at 2", "MOV ExpressionStatement to Block at 11", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 4", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 7", "MOV ExpressionStatement to Block at 8"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Injector to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Collection<Module> to VariableDeclarationStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "UPDATE from Return the main injector to Create the main injector", "operations": ["UPD TextElement: Return the main injector from Return the main injector to Create the main injector"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: createInjector to MethodInvocation at 0", "INS SimpleName: newArrayList to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: asList to MethodInvocation at 1", "INS SimpleName: modules to MethodInvocation at 2", "INS SimpleName: Arrays to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: createInjector to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: mode to FieldAccess at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: stage to FieldAccess at 1", "INS MethodInvocation to MethodInvocation at 2", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: ignoreAllClasses to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: ignoreClasses to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS FieldAccess to Assignment: = at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS SimpleName: actions to FieldAccess at 1", "INS SimpleName: Key to MethodInvocation at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS ParameterizedType: TypeLiteral<Set<PostInjectorAction>> to ClassInstanceCreation at 0", "INS SimpleName: getInstance to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: TypeLiteral to ParameterizedType: TypeLiteral<Set<PostInjectorAction>> at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS ParameterizedType: Set<PostInjectorAction> to ParameterizedType: TypeLiteral<Set<PostInjectorAction>> at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: TypeLiteral to SimpleType: TypeLiteral at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleType: PostInjectorAction to ParameterizedType: Set<PostInjectorAction> at 1", "INS SimpleName: PostInjectorAction to SimpleType: PostInjectorAction at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: InternalLifecycleModule to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from DefaultClasspathScanner to ClasspathScanner", "operations": ["UPD SimpleType: DefaultClasspathScanner from DefaultClasspathScanner to ClasspathScanner", "UPD SimpleName: DefaultClasspathScanner from DefaultClasspathScanner to ClasspathScanner"]}, {"root": "MOVE from ParameterizedType: Set<PostInjectorAction>", "operations": ["MOV SimpleType: Class to ParameterizedType: Set<PostInjectorAction> at 0", "MOV SimpleType: Module to ParameterizedType: List<Module> at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV NullLiteral to InfixExpression: != at 1"]}, {"root": "UPDATE from modules to localModules", "operations": ["UPD SimpleName: modules from modules to localModules", "UPD SimpleName: Collections from Collections to localModules", "UPD SimpleName: isAnnotationPresent from isAnnotationPresent to localModules", "UPD SimpleName: modules from modules to localModules", "UPD SimpleName: toIgnore from toIgnore to localModules", "UPD SimpleName: builder from builder to localModules", "UPD SimpleName: call from call to localModules"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Collections to MethodInvocation at 0", "MOV SimpleName: emptySet to MethodInvocation at 2"]}, {"root": "UPDATE from emptySet to modules", "operations": ["UPD SimpleName: emptySet from emptySet to modules"]}, {"root": "UPDATE from clazz to createChildInjector", "operations": ["UPD SimpleName: clazz from clazz to createChildInjector"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: clazz to MethodInvocation at 0", "MOV SimpleName: isAnnotationPresent to MethodInvocation at 1"]}, {"root": "UPDATE from annotation to lifecycleManagerRef", "operations": ["UPD SimpleName: annotation from annotation to lifecycleManagerRef"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: AtomicReference to SimpleType: AtomicReference at 0", "INS SimpleType: AtomicReference to ParameterizedType: AtomicReference<LifecycleManager> at 0", "INS ParameterizedType: AtomicReference<LifecycleManager> to ClassInstanceCreation at 0", "INS SimpleType: LifecycleManager to ParameterizedType: AtomicReference<LifecycleManager> at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "INS SimpleName: lifecycleManager to Assignment: = at 0", "operations": ["INS SimpleName: lifecycleManager to Assignment: = at 0"]}, {"root": "UPDATE from transformer to lifecycleManager", "operations": ["UPD SimpleName: transformer from transformer to lifecycleManager"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: transformer to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from ParameterizedType: List<Module>", "operations": ["MOV SimpleType: Module to ParameterizedType: List<Module> at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: modules to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: add to MethodInvocation at 1"]}, {"root": "UPDATE from build to internalLifecycleModule", "operations": ["UPD SimpleName: build from build to internalLifecycleModule"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 2"]}, {"root": "UPDATE from isAssignableFrom to Guice", "operations": ["UPD SimpleName: isAssignableFrom from isAssignableFrom to Guice", "UPD SimpleName: builder from builder to Guice"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: builder to MethodInvocation at 0", "MOV SimpleName: getPostInjectorActions to MethodInvocation at 1"]}, {"root": "UPDATE from action to stage", "operations": ["UPD SimpleName: action from action to stage"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: action to MethodInvocation at 2", "MOV SimpleName: call to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleType: Module to MethodInvocation at 1"]}, {"root": "UPDATE from injector to Lists", "operations": ["UPD SimpleName: injector from injector to Lists", "UPD SimpleName: tempInjector from tempInjector to Lists"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: injector to MethodInvocation at 0", "MOV SimpleName: createChildInjector to MethodInvocation at 1"]}, {"root": "UPDATE from getInstance to newArrayList", "operations": ["UPD SimpleName: getInstance from getInstance to newArrayList", "UPD SimpleName: createChildInjector from createChildInjector to newArrayList"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: Collection<Class<?>> to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS SimpleType: String to MethodInvocation at 1", "INS SimpleName: createStandardClasspathScanner to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS MethodInvocation to ConditionalExpression at 1", "INS SimpleName: Collections to MethodInvocation at 0", "INS ConditionalExpression to MethodInvocation at 1"]}, {"root": "UPDATE from AutoBindSingleton to AtomicReference", "operations": ["UPD SimpleName: AutoBindSingleton from AutoBindSingleton to AtomicReference"]}, {"root": "MOVE from SimpleType: AtomicReference", "operations": ["MOV SimpleName: AutoBindSingleton to SimpleType: AtomicReference at 0"]}, {"root": "UPDATE from AutoBindSingleton to LifecycleManager", "operations": ["UPD SimpleName: AutoBindSingleton from AutoBindSingleton to LifecycleManager", "UPD SimpleName: AutoBindSingleton from AutoBindSingleton to LifecycleManager"]}, {"root": "MOVE from SimpleType: LifecycleManager", "operations": ["MOV SimpleName: AutoBindSingleton to SimpleType: LifecycleManager at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: build to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isAssignableFrom to MethodInvocation at 0", "MOV SimpleName: clazz to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: checkState to MethodInvocation at 1", "MOV SimpleName: Preconditions to MethodInvocation at 0", "MOV StringLiteral: \"@AutoBindSingleton value cannot be set for Modules\" to MethodInvocation at 3"]}, {"root": "UPDATE from checkState to checkNotNull", "operations": ["UPD SimpleName: checkState from checkState to checkNotNull", "UPD SimpleName: checkState from checkState to checkNotNull"]}, {"root": "UPDATE from \"@AutoBindSingleton value cannot be set for Modules\" to \"mode cannot be null\"", "operations": ["UPD StringLiteral: \"@AutoBindSingleton value cannot be set for Modules\" from \"@AutoBindSingleton value cannot be set for Modules\" to \"mode cannot be null\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Preconditions to MethodInvocation at 0", "MOV SimpleName: checkState to MethodInvocation at 1", "MOV StringLiteral: \"@AutoBindSingleton value cannot be set for Modules\" to MethodInvocation at 3"]}, {"root": "UPDATE from \"@AutoBindSingleton value cannot be set for Modules\" to \"stage cannot be null\"", "operations": ["UPD StringLiteral: \"@AutoBindSingleton value cannot be set for Modules\" from \"@AutoBindSingleton value cannot be set for Modules\" to \"stage cannot be null\""]}, {"root": "UPDATE from annotation to internalBootstrapModule", "operations": ["UPD SimpleName: annotation from annotation to internalBootstrapModule", "UPD SimpleName: annotation from annotation to internalBootstrapModule", "UPD SimpleName: annotation from annotation to internalBootstrapModule", "UPD SimpleName: builder from builder to internalBootstrapModule"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: multiple to MethodInvocation at 1", "MOV SimpleName: annotation to MethodInvocation at 0"]}, {"root": "UPDATE from multiple to isDisableAutoBinding", "operations": ["UPD SimpleName: multiple from multiple to isDisableAutoBinding"]}, {"root": "UPDATE from clazz to ImmutableList", "operations": ["UPD SimpleName: clazz from clazz to ImmutableList"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: clazz to MethodInvocation at 0", "MOV SimpleName: getName to MethodInvocation at 1"]}, {"root": "UPDATE from getName to copyOf", "operations": ["UPD SimpleName: getName from getName to copyOf"]}, {"root": "UPDATE from builder to injector", "operations": ["UPD SimpleName: builder from builder to injector", "UPD SimpleName: builder from builder to injector", "UPD SimpleName: tempInjector from tempInjector to injector", "UPD SimpleName: tempInjector from tempInjector to injector"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: builder to MethodInvocation at 0", "MOV SimpleName: getModuleListBuilder to MethodInvocation at 1"]}, {"root": "UPDATE from getModuleTransformers to getInstance", "operations": ["UPD SimpleName: getModuleTransformers from getModuleTransformers to getInstance", "UPD SimpleName: Guice from Guice to getInstance"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Guice to MethodInvocation at 1", "MOV SimpleName: createInjector to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 2"]}, {"root": "MOVE from SimpleType: LifecycleManager", "operations": ["MOV SimpleName: LifecycleManager to SimpleType: LifecycleManager at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getInstance to MethodInvocation at 1", "MOV SimpleName: tempInjector to MethodInvocation at 0"]}, {"root": "UPDATE from injector to action", "operations": ["UPD SimpleName: injector from injector to action"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: createChildInjector to MethodInvocation at 1", "MOV SimpleName: injector to MethodInvocation at 0", "MOV SimpleName: modules to MethodInvocation at 2"]}, {"root": "UPDATE from createChildInjector to call", "operations": ["UPD SimpleName: createChildInjector from createChildInjector to call"]}, {"root": "UPDATE from modules to childInjector", "operations": ["UPD SimpleName: modules from modules to childInjector"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getIgnoreClasses to MethodInvocation at 2", "MOV SimpleName: builder to MethodInvocation at 0"]}, {"root": "UPDATE from getIgnoreClasses to additionalModules", "operations": ["UPD SimpleName: getIgnoreClasses from getIgnoreClasses to additionalModules"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toIgnore to MethodInvocation at 0", "MOV SimpleName: contains to MethodInvocation at 1"]}, {"root": "UPDATE from contains to add", "operations": ["UPD SimpleName: contains from contains to add"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: value to MethodInvocation at 1", "MOV SimpleName: annotation to MethodInvocation at 0"]}, {"root": "UPDATE from value to getMode", "operations": ["UPD SimpleName: value from value to getMode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: annotation to MethodInvocation at 0", "MOV SimpleName: baseClass to MethodInvocation at 1"]}, {"root": "UPDATE from baseClass to getStage", "operations": ["UPD SimpleName: baseClass from baseClass to getStage"]}, {"root": "UPDATE from getModuleListBuilder to get", "operations": ["UPD SimpleName: getModuleListBuilder from getModuleListBuilder to get"]}, {"root": "UPDATE from createInjector to Key", "operations": ["UPD SimpleName: createInjector from createInjector to Key"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: modules to FieldAccess at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: injector to MethodInvocation at 0", "MOV SimpleName: createChildInjector to MethodInvocation at 1", "MOV SimpleName: modules to MethodInvocation at 2"]}, {"root": "UPDATE from getClasses to ignoreClasses", "operations": ["UPD SimpleName: getClasses from getClasses to ignoreClasses"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getClasses to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: InternalAutoBindModule to ClassInstanceCreation at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 2", "MOV SimpleName: createStandardClasspathScanner to MethodInvocation at 2"]}, {"root": "MOVE from SimpleType: LifecycleManager", "operations": ["MOV SimpleName: AutoBindSingleton to SimpleType: LifecycleManager at 0"]}, {"root": "INS SimpleName: add to MethodInvocation at 1", "operations": ["INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 2", "operations": ["INS SimpleType: InternalAutoBindModuleBootstrapModule to ClassInstanceCreation at 0", "INS SimpleName: InternalAutoBindModuleBootstrapModule to SimpleType: InternalAutoBindModuleBootstrapModule at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: scanner to ClassInstanceCreation at 1"]}, {"root": "UPDATE from RuntimeException to ProvisionException", "operations": ["UPD SimpleName: RuntimeException from RuntimeException to ProvisionException", "UPD SimpleType: RuntimeException from RuntimeException to ProvisionException"]}, {"root": "INS StringLiteral: \"Unable to resolve list of modules\" to ClassInstanceCreation at 1", "operations": ["INS StringLiteral: \"Unable to resolve list of modules\" to ClassInstanceCreation at 1"]}, {"root": "UPDATE from createStandardClasspathScanner to emptyList", "operations": ["UPD SimpleName: createStandardClasspathScanner from createStandardClasspathScanner to emptyList"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 2"]}, {"root": "UPDATE from EmptyClasspathScanner to String", "operations": ["UPD SimpleName: EmptyClasspathScanner from EmptyClasspathScanner to String"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: EmptyClasspathScanner to SimpleType: String at 0"]}, {"root": "UPDATE from build to builder", "operations": ["UPD SimpleName: build from build to builder"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: build to MethodInvocation at 0"]}, {"root": "INS SimpleName: getIgnoreClasses to MethodInvocation at 1", "operations": ["INS SimpleName: getIgnoreClasses to MethodInvocation at 1"]}, {"root": "UPDATE from Class to Set", "operations": ["UPD SimpleName: Class from Class to Set", "UPD SimpleType: Class from Class to Set"]}, {"root": "UPDATE from java.util.Map.Entry<Key<?>,Binding<?>> to Entry<Key<?>,Binding<?>>", "operations": ["UPD ParameterizedType: java.util.Map.Entry<Key<?>,Binding<?>> from java.util.Map.Entry<Key<?>,Binding<?>> to Entry<Key<?>,Binding<?>>"]}, {"root": "UPDATE from java.util.Map.Entry to Entry", "operations": ["UPD SimpleType: java.util.Map.Entry from java.util.Map.Entry to Entry"]}, {"root": "INS SimpleName: Entry to SimpleType: java.util.Map.Entry at 0", "operations": ["INS SimpleName: Entry to SimpleType: java.util.Map.Entry at 0"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:   Child injector should be created directly from the main LifecycleInjector", "DEL TagElement: @deprecated"]}, {"root": "DEL SimpleName: injector", "operations": ["DEL SimpleName: injector"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:   Child injector should be created directly from the main LifecycleInjector", "DEL TagElement: @deprecated"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: Deprecated", "DEL MarkerAnnotation", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Deprecated", "DEL ReturnStatement", "DEL SimpleName: createChildInjector", "DEL Block", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL MethodInvocation"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement: Use ", "DEL TextElement:  LifecycleInjector creates the main Injector as soon as build() is called.", "DEL SimpleName: LifecycleInjector", "DEL TextElement:  instead.", "DEL TagElement: @deprecated", "DEL SimpleName: getInjector", "DEL MethodRef", "DEL TagElement: @link"]}, {"root": "DEL SimpleName: injector", "operations": ["DEL SimpleName: injector"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TagElement: @deprecated", "DEL TextElement:  LifecycleInjector creates the main Injector as soon as build() is called."]}, {"root": "DEL SimpleName: injector", "operations": ["DEL SimpleName: injector"]}, {"root": "DEL TagElement: @deprecated", "operations": ["DEL TextElement:  LifecycleInjector creates the main Injector as soon as build() is called.", "DEL TagElement: @deprecated"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleType: EmptyClasspathScanner", "DEL ConditionalExpression"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getAnnotation", "DEL SimpleType: AutoBindSingleton", "DEL SimpleName: clazz", "DEL TypeLiteral"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleType: AutoBindSingleton", "DEL SimpleName: AutoBindSingleton", "DEL TypeLiteral"]}, {"root": "DEL MethodInvocation", "operations": ["DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: AutoBindSingleton", "DEL SimpleType: AutoBindSingleton", "DEL TypeLiteral", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL PrefixExpression: !", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Preconditions", "DEL SimpleName: checkState", "DEL StringLiteral: \"@AutoBindSingleton(multiple=true) value cannot be set for Modules\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL StringLiteral: \"Found @AutoBindSingleton annotated module : {} \"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL SimpleName: info"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: include", "DEL SimpleName: clazz", "DEL CastExpression", "DEL ParameterizedType: Class<Module>", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: modules", "operations": ["DEL SimpleName: modules"]}, {"root": "DEL QualifiedName: java.util.Map.Entry", "operations": ["DEL QualifiedName: java.util.Map.Entry"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL SimpleName: Deprecated"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: Deprecated", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: additionalModules", "DEL SimpleName: createInjector", "DEL Modifier: public", "DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: getInstance", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL Modifier: final", "DEL FieldAccess", "DEL SimpleName: lifecycleManager", "DEL MethodInvocation", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SimpleName: modules", "DEL MethodInvocation", "DEL FieldAccess", "DEL SimpleName: getInstance", "DEL ExpressionStatement", "DEL SimpleName: tempInjector", "DEL ThisExpression", "DEL Block", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleType: AutoBindSingleton", "DEL PrefixExpression: !", "DEL SimpleName: Guice", "DEL ParameterizedType: Class<?>", "DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: transformers", "DEL SimpleType: LifecycleManager", "DEL SimpleName: ImmutableList", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: LifecycleInjector", "DEL SimpleName: toIgnore", "DEL SimpleName: modules", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL Assignment: =", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL TypeLiteral", "DEL VariableDeclarationFragment", "DEL ConditionalExpression", "DEL IfStatement", "DEL MethodInvocation", "DEL ThisExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TypeLiteral", "DEL SimpleName: addAll", "DEL VariableDeclarationStatement", "DEL SimpleName: tempInjector", "DEL ThisExpression", "DEL ClassInstanceCreation", "DEL ParameterizedType: Class<?>", "DEL SimpleName: internalBootstrapModule", "DEL InfixExpression: !=", "DEL Block", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: add", "DEL SimpleType: Class", "DEL EnhancedForStatement", "DEL SimpleName: modules", "DEL SimpleType: Class", "DEL SimpleName: call", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL WildcardType: ?", "DEL WildcardType: ?", "DEL Block", "DEL SimpleName: clazz", "DEL TypeLiteral", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: injector", "DEL MethodInvocation", "DEL SimpleName: createInjector", "DEL EnhancedForStatement", "DEL TypeLiteral", "DEL SimpleName: toIgnore", "DEL MethodInvocation", "DEL SimpleType: AutoBindSingleton", "DEL MethodInvocation", "DEL SimpleName: LifecycleMethodsFactory", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: Class", "DEL FieldAccess", "DEL SimpleName: scanner", "DEL Block", "DEL Modifier: final", "DEL Block", "DEL SimpleType: LifecycleMethodsFactory", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL SimpleName: tempInjector", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL SimpleName: add", "DEL SimpleName: tempInjector", "DEL MethodInvocation", "DEL SimpleName: scanner", "DEL ThisExpression", "DEL SimpleName: injector", "DEL ContinueStatement"]}]}}, {"LifecycleInjector_diff": {"operations": ["Move ImportDeclaration(73) into CompilationUnit(1644) at 7", "Move ImportDeclaration(75) into CompilationUnit(1644) at 9", "Move ImportDeclaration(79) into CompilationUnit(1644) at 18", "Move FieldDeclaration(149) into TypeDeclaration: class(1643) at 5", "Update QualifiedName: com.netflix.governator.lifecycle.DefaultClasspathScanner(72) to java.util.Map.Entry", "Update QualifiedName: com.netflix.governator.lifecycle.EmptyClasspathScanner(74) to java.util.concurrent.atomic.AtomicReference", "Update QualifiedName: com.netflix.governator.lifecycle.LifecycleMethodsFactory(78) to com.google.common.collect.Sets", "Insert FieldDeclaration(147) into TypeDeclaration: class(1643) at 6", "Insert FieldDeclaration(153) into TypeDeclaration: class(1643) at 7", "Insert FieldDeclaration(174) into TypeDeclaration: class(1643) at 10", "Insert FieldDeclaration(181) into TypeDeclaration: class(1643) at 11", "Insert FieldDeclaration(190) into TypeDeclaration: class(1643) at 12", "Insert FieldDeclaration(199) into TypeDeclaration: class(1643) at 13", "Insert MethodDeclaration(994) into TypeDeclaration: class(1643) at 22", "Insert MethodDeclaration(1076) into TypeDeclaration: class(1643) at 23", "Insert MethodDeclaration(1199) into TypeDeclaration: class(1643) at 26", "Insert MethodDeclaration(1441) into TypeDeclaration: class(1643) at 27", "Insert MethodDeclaration(1642) into TypeDeclaration: class(1643) at 28", "Update ParameterizedType: List<ModuleTransformer>(146) to List<Module>", "Insert VariableDeclarationFragment(134) into FieldDeclaration(135) at 3", "Insert Modifier: private(136) into FieldDeclaration(147) at 0", "Insert Modifier: final(137) into FieldDeclaration(147) at 1", "Insert ParameterizedType: Collection<Class<?>>(144) into FieldDeclaration(147) at 2", "Insert VariableDeclarationFragment(146) into FieldDeclaration(147) at 3", "Insert Modifier: private(148) into FieldDeclaration(153) at 0", "Insert Modifier: final(149) into FieldDeclaration(153) at 1", "Insert PrimitiveType: boolean(150) into FieldDeclaration(153) at 2", "Insert VariableDeclarationFragment(152) into FieldDeclaration(153) at 3", "Insert Modifier: private(168) into FieldDeclaration(174) at 0", "Insert Modifier: final(169) into FieldDeclaration(174) at 1", "Insert SimpleType: Stage(171) into FieldDeclaration(174) at 2", "Insert VariableDeclarationFragment(173) into FieldDeclaration(174) at 3", "Insert Modifier: private(175) into FieldDeclaration(181) at 0", "Insert Modifier: final(176) into FieldDeclaration(181) at 1", "Insert SimpleType: LifecycleInjectorMode(178) into FieldDeclaration(181) at 2", "Insert VariableDeclarationFragment(180) into FieldDeclaration(181) at 3", "Insert Modifier: private(182) into FieldDeclaration(190) at 0", "Insert ParameterizedType: Set<PostInjectorAction>(187) into FieldDeclaration(190) at 1", "Insert VariableDeclarationFragment(189) into FieldDeclaration(190) at 2", "Insert Modifier: private(191) into FieldDeclaration(199) at 0", "Insert ParameterizedType: Set<ModuleTransformer>(196) into FieldDeclaration(199) at 1", "Move VariableDeclarationFragment(148) into FieldDeclaration(199) at 2", "Move Javadoc(956) into MethodDeclaration(994) at 0", "Insert Modifier: public(978) into MethodDeclaration(994) at 1", "Move SimpleType: Injector(992) into MethodDeclaration(994) at 2", "Insert SimpleName: createChildInjector(981) into MethodDeclaration(994) at 3", "Move SingleVariableDeclaration(939) into MethodDeclaration(994) at 4", "Move Block(1034) into MethodDeclaration(994) at 5", "Move Javadoc(929) into MethodDeclaration(1076) at 0", "Move Modifier: public(932) into MethodDeclaration(1076) at 1", "Move SimpleType: Injector(961) into MethodDeclaration(1076) at 2", "Move SimpleName: createChildInjector(935) into MethodDeclaration(1076) at 3", "Move SingleVariableDeclaration(969) into MethodDeclaration(1076) at 4", "Insert Block(1075) into MethodDeclaration(1076) at 5", "Move SimpleType: Injector(934) into MethodDeclaration(1095) at 2", "Move Javadoc(1015) into MethodDeclaration(1120) at 0", "Move SimpleType: Injector(1020) into MethodDeclaration(1120) at 2", "Update SimpleName: getInjector(1001) to createInjector", "Move SingleVariableDeclaration(1025) into MethodDeclaration(1120) at 5", "Move Javadoc(1045) into MethodDeclaration(1199) at 0", "Move Modifier: public(1018) into MethodDeclaration(1199) at 1", "Move SimpleType: Injector(1050) into MethodDeclaration(1199) at 2", "Move SimpleName: createInjector(1021) into MethodDeclaration(1199) at 3", "Move SingleVariableDeclaration(1058) into MethodDeclaration(1199) at 4", "Insert Block(1198) into MethodDeclaration(1199) at 5", "Insert SimpleName: LifecycleInjector(1200) into MethodDeclaration(1441) at 0", "Move SingleVariableDeclaration(1070) into MethodDeclaration(1441) at 1", "Insert Block(1440) into MethodDeclaration(1441) at 2", "Insert Modifier: private(1442) into MethodDeclaration(1642) at 0", "Move SimpleType: Injector(1273) into MethodDeclaration(1642) at 1", "Insert SimpleName: createSimulatedChildInjector(1445) into MethodDeclaration(1642) at 2", "Insert SingleVariableDeclaration(1452) into MethodDeclaration(1642) at 3", "Insert Block(1641) into MethodDeclaration(1642) at 4", "Insert SimpleType: Module(131) into ParameterizedType: List<Module>(132) at 1", "Insert SimpleName: modules(133) into VariableDeclarationFragment(134) at 0", "Insert SimpleType: Collection(139) into ParameterizedType: Collection<Class<?>>(144) at 0", "Insert ParameterizedType: Class<?>(143) into ParameterizedType: Collection<Class<?>>(144) at 1", "Insert SimpleName: ignoreClasses(145) into VariableDeclarationFragment(146) at 0", "Insert SimpleName: ignoreAllClasses(151) into VariableDeclarationFragment(152) at 0", "Insert SimpleName: Stage(170) into SimpleType: Stage(171) at 0", "Insert SimpleName: stage(172) into VariableDeclarationFragment(173) at 0", "Insert SimpleName: LifecycleInjectorMode(177) into SimpleType: LifecycleInjectorMode(178) at 0", "Insert SimpleName: mode(179) into VariableDeclarationFragment(180) at 0", "Insert SimpleType: Set(184) into ParameterizedType: Set<PostInjectorAction>(187) at 0", "Insert SimpleType: PostInjectorAction(186) into ParameterizedType: Set<PostInjectorAction>(187) at 1", "Insert SimpleName: actions(188) into VariableDeclarationFragment(189) at 0", "Insert SimpleType: Set(193) into ParameterizedType: Set<ModuleTransformer>(196) at 0", "Move SimpleType: ModuleTransformer(145) into ParameterizedType: Set<ModuleTransformer>(196) at 1", "Insert VariableDeclarationStatement(1018) into Block(1075) at 0", "Insert VariableDeclarationStatement(1027) into Block(1075) at 1", "Insert EnhancedForStatement(1041) into Block(1075) at 2", "Insert IfStatement(1060) into Block(1075) at 3", "Insert EnhancedForStatement(1072) into Block(1075) at 4", "Insert ReturnStatement(1074) into Block(1075) at 5", "Insert VariableDeclarationStatement(1150) into Block(1198) at 0", "Insert IfStatement(1160) into Block(1198) at 1", "Insert ExpressionStatement(1165) into Block(1198) at 2", "Insert IfStatement(1193) into Block(1198) at 3", "Insert ReturnStatement(1197) into Block(1198) at 4", "Move ExpressionStatement(1097) into Block(1440) at 0", "Insert VariableDeclarationStatement(1247) into Block(1440) at 1", "Move VariableDeclarationStatement(1142) into Block(1440) at 2", "Insert ExpressionStatement(1315) into Block(1440) at 3", "Move ExpressionStatement(1224) into Block(1440) at 4", "Move ExpressionStatement(1236) into Block(1440) at 5", "Move ExpressionStatement(1245) into Block(1440) at 6", "Move ExpressionStatement(1253) into Block(1440) at 7", "Move ExpressionStatement(1266) into Block(1440) at 8", "Insert ExpressionStatement(1400) into Block(1440) at 9", "Move TryStatement(1311) into Block(1440) at 10", "Move ExpressionStatement(1319) into Block(1440) at 11", "Insert ExpressionStatement(1439) into Block(1440) at 12", "Insert ParameterizedType: Collection<Module>(1450) into SingleVariableDeclaration(1452) at 0", "Insert SimpleName: modules(1451) into SingleVariableDeclaration(1452) at 1", "Insert VariableDeclarationStatement(1588) into Block(1641) at 0", "Insert VariableDeclarationStatement(1603) into Block(1641) at 1", "Insert VariableDeclarationStatement(1612) into Block(1641) at 2", "Insert VariableDeclarationStatement(1624) into Block(1641) at 3", "Insert ExpressionStatement(1629) into Block(1641) at 4", "Insert ExpressionStatement(1634) into Block(1641) at 5", "Insert ReturnStatement(1640) into Block(1641) at 6", "Insert SimpleName: Module(130) into SimpleType: Module(131) at 0", "Insert SimpleName: Collection(138) into SimpleType: Collection(139) at 0", "Insert SimpleType: Class(141) into ParameterizedType: Class<?>(143) at 0", "Insert WildcardType: ?(142) into ParameterizedType: Class<?>(143) at 1", "Insert SimpleName: Set(183) into SimpleType: Set(184) at 0", "Insert SimpleName: PostInjectorAction(185) into SimpleType: PostInjectorAction(186) at 0", "Insert SimpleName: Set(192) into SimpleType: Set(193) at 0", "Move SimpleType: Injector(1000) into VariableDeclarationStatement(1018) at 0", "Insert VariableDeclarationFragment(1017) into VariableDeclarationStatement(1018) at 1", "Move ParameterizedType: Collection<Module>(1285) into VariableDeclarationStatement(1027) at 0", "Insert VariableDeclarationFragment(1026) into VariableDeclarationStatement(1027) at 1", "Move SingleVariableDeclaration(1323) into EnhancedForStatement(1041) at 0", "Insert SimpleName: transformers(1032) into EnhancedForStatement(1041) at 1", "Insert Block(1040) into EnhancedForStatement(1041) at 2", "Insert InfixExpression: ==(1044) into IfStatement(1060) at 0", "Insert Block(1052) into IfStatement(1060) at 1", "Insert Block(1059) into IfStatement(1060) at 2", "Move SingleVariableDeclaration(1529) into EnhancedForStatement(1072) at 0", "Insert SimpleName: actions(1065) into EnhancedForStatement(1072) at 1", "Insert Block(1071) into EnhancedForStatement(1072) at 2", "Insert SimpleName: childInjector(1073) into ReturnStatement(1074) at 0", "Update TextElement: Return the main injector(977) to Create the main injector", "Insert MethodInvocation(1092) into ReturnStatement(1093) at 0", "Insert MethodInvocation(1117) into ReturnStatement(1118) at 0", "Insert ParameterizedType: List<Module>(1144) into VariableDeclarationStatement(1150) at 0", "Insert VariableDeclarationFragment(1149) into VariableDeclarationStatement(1150) at 1", "Insert InfixExpression: !=(1153) into IfStatement(1160) at 0", "Insert Block(1159) into IfStatement(1160) at 1", "Insert MethodInvocation(1164) into ExpressionStatement(1165) at 0", "Insert PrefixExpression: !(1167) into IfStatement(1193) at 0", "Insert Block(1192) into IfStatement(1193) at 1", "Insert MethodInvocation(1196) into ReturnStatement(1197) at 0", "Insert ParameterizedType: AtomicReference<LifecycleManager>(1238) into VariableDeclarationStatement(1247) at 0", "Move VariableDeclarationFragment(1205) into VariableDeclarationStatement(1247) at 1", "Insert Assignment: =(1314) into ExpressionStatement(1315) at 0", "Insert Assignment: =(1326) into ExpressionStatement(1327) at 0", "Insert Assignment: =(1338) into ExpressionStatement(1339) at 0", "Insert Assignment: =(1346) into ExpressionStatement(1347) at 0", "Insert Assignment: =(1357) into ExpressionStatement(1358) at 0", "Insert Assignment: =(1378) into ExpressionStatement(1379) at 0", "Insert Assignment: =(1399) into ExpressionStatement(1400) at 0", "Insert MethodInvocation(1438) into ExpressionStatement(1439) at 0", "Insert SimpleType: Collection(1447) into ParameterizedType: Collection<Module>(1450) at 0", "Insert SimpleType: Module(1449) into ParameterizedType: Collection<Module>(1450) at 1", "Insert SimpleType: AbstractModule(1454) into VariableDeclarationStatement(1588) at 0", "Insert VariableDeclarationFragment(1587) into VariableDeclarationStatement(1588) at 1", "Insert ParameterizedType: AtomicReference<LifecycleManager>(1593) into VariableDeclarationStatement(1603) at 0", "Insert VariableDeclarationFragment(1602) into VariableDeclarationStatement(1603) at 1", "Move SimpleType: InternalLifecycleModule(1493) into VariableDeclarationStatement(1612) at 0", "Insert VariableDeclarationFragment(1611) into VariableDeclarationStatement(1612) at 1", "Insert ParameterizedType: List<Module>(1617) into VariableDeclarationStatement(1624) at 0", "Insert VariableDeclarationFragment(1623) into VariableDeclarationStatement(1624) at 1", "Insert MethodInvocation(1628) into ExpressionStatement(1629) at 0", "Insert MethodInvocation(1633) into ExpressionStatement(1634) at 0", "Insert MethodInvocation(1639) into ReturnStatement(1640) at 0", "Insert SimpleName: Class(140) into SimpleType: Class(141) at 0", "Update SimpleType: DefaultClasspathScanner(900) to ClasspathScanner", "Insert SimpleName: childInjector(1016) into VariableDeclarationFragment(1017) at 0", "Insert SimpleName: localModules(1024) into VariableDeclarationFragment(1026) at 0", "Insert SimpleName: modules(1025) into VariableDeclarationFragment(1026) at 1", "Insert ExpressionStatement(1039) into Block(1040) at 0", "Insert SimpleName: mode(1042) into InfixExpression: ==(1044) at 0", "Insert QualifiedName: LifecycleInjectorMode.REAL_CHILD_INJECTORS(1043) into InfixExpression: ==(1044) at 1", "Insert ExpressionStatement(1051) into Block(1052) at 0", "Insert ExpressionStatement(1058) into Block(1059) at 0", "Insert ExpressionStatement(1070) into Block(1071) at 0", "Insert SimpleName: createInjector(1086) into MethodInvocation(1092) at 0", "Insert MethodInvocation(1091) into MethodInvocation(1092) at 1", "Insert SimpleName: createInjector(1112) into MethodInvocation(1117) at 0", "Insert MethodInvocation(1116) into MethodInvocation(1117) at 1", "Insert SimpleType: List(1141) into ParameterizedType: List<Module>(1144) at 0", "Move SimpleType: Module(1261) into ParameterizedType: List<Module>(1144) at 1", "Insert SimpleName: localModules(1145) into VariableDeclarationFragment(1149) at 0", "Insert MethodInvocation(1148) into VariableDeclarationFragment(1149) at 1", "Insert SimpleName: additionalModules(1151) into InfixExpression: !=(1153) at 0", "Move NullLiteral(1154) into InfixExpression: !=(1153) at 1", "Insert ExpressionStatement(1158) into Block(1159) at 0", "Update SimpleName: Collections(1159) to localModules", "Move SimpleName: Collections(1159) into MethodInvocation(1164) at 0", "Insert SimpleName: addAll(1162) into MethodInvocation(1164) at 1", "Update SimpleName: emptySet(1164) to modules", "Move SimpleName: emptySet(1164) into MethodInvocation(1164) at 2", "Insert SimpleName: ignoreAllClasses(1166) into PrefixExpression: !(1167) at 0", "Insert VariableDeclarationStatement(1181) into Block(1192) at 0", "Insert ExpressionStatement(1191) into Block(1192) at 1", "Update SimpleName: clazz(1185) to createChildInjector", "Move SimpleName: clazz(1185) into MethodInvocation(1196) at 0", "Update SimpleName: isAnnotationPresent(1186) to localModules", "Move SimpleName: isAnnotationPresent(1186) into MethodInvocation(1196) at 1", "Insert SimpleType: AtomicReference(1235) into ParameterizedType: AtomicReference<LifecycleManager>(1238) at 0", "Insert SimpleType: LifecycleManager(1237) into ParameterizedType: AtomicReference<LifecycleManager>(1238) at 1", "Update SimpleName: annotation(1198) to lifecycleManagerRef", "Insert ClassInstanceCreation(1245) into VariableDeclarationFragment(1246) at 1", "Insert SimpleName: injector(1302) into Assignment: =(1314) at 0", "Insert MethodInvocation(1313) into Assignment: =(1314) at 1", "Insert FieldAccess(1318) into Assignment: =(1326) at 0", "Insert MethodInvocation(1325) into Assignment: =(1326) at 1", "Insert FieldAccess(1330) into Assignment: =(1338) at 0", "Insert MethodInvocation(1337) into Assignment: =(1338) at 1", "Insert FieldAccess(1342) into Assignment: =(1346) at 0", "Insert MethodInvocation(1345) into Assignment: =(1346) at 1", "Insert FieldAccess(1350) into Assignment: =(1357) at 0", "Insert MethodInvocation(1356) into Assignment: =(1357) at 1", "Insert FieldAccess(1361) into Assignment: =(1378) at 0", "Insert MethodInvocation(1377) into Assignment: =(1378) at 1", "Move FieldAccess(1314) into Assignment: =(1399) at 0", "Insert MethodInvocation(1398) into Assignment: =(1399) at 1", "Insert SimpleName: lifecycleManager(1426) into Assignment: =(1433) at 0", "Insert SimpleName: lifecycleManagerRef(1435) into MethodInvocation(1438) at 0", "Insert SimpleName: set(1436) into MethodInvocation(1438) at 1", "Update SimpleName: transformer(1326) to lifecycleManager", "Move SimpleName: transformer(1326) into MethodInvocation(1438) at 2", "Insert SimpleName: Collection(1446) into SimpleType: Collection(1447) at 0", "Insert SimpleName: Module(1448) into SimpleType: Module(1449) at 0", "Insert SimpleName: AbstractModule(1453) into SimpleType: AbstractModule(1454) at 0", "Insert SimpleName: parentObjects(1455) into VariableDeclarationFragment(1587) at 0", "Move ClassInstanceCreation(1489) into VariableDeclarationFragment(1587) at 1", "Insert SimpleType: AtomicReference(1590) into ParameterizedType: AtomicReference<LifecycleManager>(1593) at 0", "Insert SimpleType: LifecycleManager(1592) into ParameterizedType: AtomicReference<LifecycleManager>(1593) at 1", "Insert SimpleName: lifecycleManagerAtomicReference(1594) into VariableDeclarationFragment(1602) at 0", "Insert ClassInstanceCreation(1601) into VariableDeclarationFragment(1602) at 1", "Insert SimpleName: internalLifecycleModule(1606) into VariableDeclarationFragment(1611) at 0", "Insert ClassInstanceCreation(1610) into VariableDeclarationFragment(1611) at 1", "Insert SimpleType: List(1614) into ParameterizedType: List<Module>(1617) at 0", "Move SimpleType: Module(1355) into ParameterizedType: List<Module>(1617) at 1", "Insert SimpleName: localModules(1618) into VariableDeclarationFragment(1623) at 0", "Insert MethodInvocation(1622) into VariableDeclarationFragment(1623) at 1", "Update SimpleName: modules(1509) to localModules", "Move SimpleName: modules(1509) into MethodInvocation(1628) at 0", "Move SimpleName: add(1511) into MethodInvocation(1628) at 1", "Insert SimpleName: parentObjects(1627) into MethodInvocation(1628) at 2", "Insert SimpleName: localModules(1630) into MethodInvocation(1633) at 0", "Insert SimpleName: add(1631) into MethodInvocation(1633) at 1", "Update SimpleName: build(1521) to internalLifecycleModule", "Move SimpleName: build(1521) into MethodInvocation(1633) at 2", "Update SimpleName: builder(1530) to Guice", "Move SimpleName: builder(1530) into MethodInvocation(1639) at 0", "Update SimpleName: getPostInjectorActions(1531) to createInjector", "Move SimpleName: getPostInjectorActions(1531) into MethodInvocation(1639) at 1", "Update SimpleName: action(1533) to stage", "Move SimpleName: action(1533) into MethodInvocation(1639) at 2", "Update SimpleName: call(1534) to localModules", "Move SimpleName: call(1534) into MethodInvocation(1639) at 3", "Update SimpleName: DefaultClasspathScanner(899) to ClasspathScanner", "Insert Assignment: =(1038) into ExpressionStatement(1039) at 0", "Insert Assignment: =(1050) into ExpressionStatement(1051) at 0", "Insert Assignment: =(1057) into ExpressionStatement(1058) at 0", "Insert MethodInvocation(1069) into ExpressionStatement(1070) at 0", "Insert SimpleName: Lists(1087) into MethodInvocation(1091) at 0", "Move SimpleType: Module(1208) into MethodInvocation(1091) at 1", "Insert SimpleName: newArrayList(1090) into MethodInvocation(1091) at 2", "Insert SimpleName: Arrays(1113) into MethodInvocation(1116) at 0", "Insert SimpleName: asList(1114) into MethodInvocation(1116) at 1", "Insert SimpleName: modules(1115) into MethodInvocation(1116) at 2", "Insert SimpleName: List(1140) into SimpleType: List(1141) at 0", "Update SimpleName: injector(1059) to Lists", "Move SimpleName: injector(1059) into MethodInvocation(1148) at 0", "Update SimpleName: createChildInjector(1060) to newArrayList", "Move SimpleName: createChildInjector(1060) into MethodInvocation(1148) at 1", "Insert MethodInvocation(1157) into ExpressionStatement(1158) at 0", "Move ParameterizedType: Collection<Class<?>>(1149) into VariableDeclarationStatement(1181) at 0", "Insert VariableDeclarationFragment(1180) into VariableDeclarationStatement(1181) at 1", "Insert MethodInvocation(1190) into ExpressionStatement(1191) at 0", "Insert MethodInvocation(1230) into ConditionalExpression(1231) at 2", "Update SimpleName: AutoBindSingleton(1187) to AtomicReference", "Move SimpleName: AutoBindSingleton(1187) into SimpleType: AtomicReference(1235) at 0", "Update SimpleName: AutoBindSingleton(1196) to LifecycleManager", "Move SimpleName: AutoBindSingleton(1196) into SimpleType: LifecycleManager(1237) at 0", "Insert ParameterizedType: AtomicReference<LifecycleManager>(1244) into ClassInstanceCreation(1245) at 0", "Insert MethodInvocation(1279) into ClassInstanceCreation(1299) at 1", "Update SimpleName: isAssignableFrom(1210) to Guice", "Move SimpleName: isAssignableFrom(1210) into MethodInvocation(1313) at 0", "Update SimpleName: clazz(1211) to createInjector", "Move SimpleName: clazz(1211) into MethodInvocation(1313) at 1", "Move MethodInvocation(1352) into MethodInvocation(1313) at 2", "Insert SimpleName: internalBootstrapModule(1308) into MethodInvocation(1313) at 3", "Insert ClassInstanceCreation(1312) into MethodInvocation(1313) at 4", "Insert ThisExpression(1316) into FieldAccess(1318) at 0", "Insert SimpleName: mode(1317) into FieldAccess(1318) at 1", "Move SimpleName: Preconditions(1213) into MethodInvocation(1325) at 0", "Update SimpleName: checkState(1214) to checkNotNull", "Move SimpleName: checkState(1214) into MethodInvocation(1325) at 1", "Insert MethodInvocation(1323) into MethodInvocation(1325) at 2", "Update StringLiteral: \"@AutoBindSingleton value cannot be set for Modules\"(1222) to \"mode cannot be null\"", "Move StringLiteral: \"@AutoBindSingleton value cannot be set for Modules\"(1222) into MethodInvocation(1325) at 3", "Insert ThisExpression(1328) into FieldAccess(1330) at 0", "Insert SimpleName: stage(1329) into FieldAccess(1330) at 1", "Move SimpleName: Preconditions(1225) into MethodInvocation(1337) at 0", "Update SimpleName: checkState(1226) to checkNotNull", "Move SimpleName: checkState(1226) into MethodInvocation(1337) at 1", "Insert MethodInvocation(1335) into MethodInvocation(1337) at 2", "Update StringLiteral: \"@AutoBindSingleton value cannot be set for Modules\"(1234) to \"stage cannot be null\"", "Move StringLiteral: \"@AutoBindSingleton value cannot be set for Modules\"(1234) into MethodInvocation(1337) at 3", "Insert ThisExpression(1340) into FieldAccess(1342) at 0", "Insert SimpleName: ignoreAllClasses(1341) into FieldAccess(1342) at 1", "Update SimpleName: annotation(1239) to internalBootstrapModule", "Move SimpleName: annotation(1239) into MethodInvocation(1345) at 0", "Update SimpleName: multiple(1240) to isDisableAutoBinding", "Move SimpleName: multiple(1240) into MethodInvocation(1345) at 1", "Insert ThisExpression(1348) into FieldAccess(1350) at 0", "Insert SimpleName: ignoreClasses(1349) into FieldAccess(1350) at 1", "Update SimpleName: clazz(1249) to ImmutableList", "Move SimpleName: clazz(1249) into MethodInvocation(1356) at 0", "Update SimpleName: getName(1250) to copyOf", "Move SimpleName: getName(1250) into MethodInvocation(1356) at 1", "Move MethodInvocation(1153) into MethodInvocation(1356) at 2", "Insert ThisExpression(1359) into FieldAccess(1361) at 0", "Insert SimpleName: actions(1360) into FieldAccess(1361) at 1", "Update SimpleName: builder(1254) to injector", "Move SimpleName: builder(1254) into MethodInvocation(1377) at 0", "Insert SimpleName: getInstance(1363) into MethodInvocation(1377) at 1", "Insert MethodInvocation(1376) into MethodInvocation(1377) at 2", "Insert SimpleName: injector(1383) into MethodInvocation(1398) at 0", "Update SimpleName: Guice(1275) to getInstance", "Move SimpleName: Guice(1275) into MethodInvocation(1398) at 1", "Insert MethodInvocation(1397) into MethodInvocation(1398) at 2", "Update SimpleName: builder(1315) to injector", "Update SimpleName: getModuleTransformers(1316) to getInstance", "Move TypeLiteral(1498) into MethodInvocation(1432) at 2", "Insert SimpleName: AtomicReference(1589) into SimpleType: AtomicReference(1590) at 0", "Move SimpleName: LifecycleManager(1339) into SimpleType: LifecycleManager(1592) at 0", "Insert ParameterizedType: AtomicReference<LifecycleManager>(1599) into ClassInstanceCreation(1601) at 0", "Insert SimpleName: lifecycleManager(1600) into ClassInstanceCreation(1601) at 1", "Insert SimpleType: InternalLifecycleModule(1608) into ClassInstanceCreation(1610) at 0", "Insert SimpleName: lifecycleManagerAtomicReference(1609) into ClassInstanceCreation(1610) at 1", "Insert SimpleName: List(1613) into SimpleType: List(1614) at 0", "Update SimpleName: tempInjector(1500) to Lists", "Move SimpleName: tempInjector(1500) into MethodInvocation(1622) at 0", "Update SimpleName: getInstance(1501) to newArrayList", "Move SimpleName: getInstance(1501) into MethodInvocation(1622) at 1", "Insert SimpleName: modules(1621) into MethodInvocation(1622) at 2", "Insert SimpleName: localModules(1033) into Assignment: =(1038) at 0", "Insert MethodInvocation(1037) into Assignment: =(1038) at 1", "Insert SimpleName: childInjector(1045) into Assignment: =(1050) at 0", "Insert MethodInvocation(1049) into Assignment: =(1050) at 1", "Insert SimpleName: childInjector(1053) into Assignment: =(1057) at 0", "Insert MethodInvocation(1056) into Assignment: =(1057) at 1", "Update SimpleName: injector(970) to action", "Move SimpleName: injector(970) into MethodInvocation(1069) at 0", "Update SimpleName: createChildInjector(971) to call", "Move SimpleName: createChildInjector(971) into MethodInvocation(1069) at 1", "Update SimpleName: modules(972) to childInjector", "Move SimpleName: modules(972) into MethodInvocation(1069) at 2", "Update SimpleName: builder(1156) to localModules", "Move SimpleName: builder(1156) into MethodInvocation(1157) at 0", "Insert SimpleName: addAll(1155) into MethodInvocation(1157) at 1", "Update SimpleName: getIgnoreClasses(1157) to additionalModules", "Move SimpleName: getIgnoreClasses(1157) into MethodInvocation(1157) at 2", "Insert SimpleName: localIgnoreClasses(1175) into VariableDeclarationFragment(1180) at 0", "Insert MethodInvocation(1179) into VariableDeclarationFragment(1180) at 1", "Update SimpleName: toIgnore(1181) to localModules", "Move SimpleName: toIgnore(1181) into MethodInvocation(1190) at 0", "Update SimpleName: contains(1182) to add", "Move SimpleName: contains(1182) into MethodInvocation(1190) at 1", "Insert ClassInstanceCreation(1189) into MethodInvocation(1190) at 2", "Insert SimpleName: createStandardClasspathScanner(1217) into MethodInvocation(1230) at 0", "Insert ConditionalExpression(1229) into MethodInvocation(1230) at 1", "Insert SimpleType: AtomicReference(1241) into ParameterizedType: AtomicReference<LifecycleManager>(1244) at 0", "Insert SimpleType: LifecycleManager(1243) into ParameterizedType: AtomicReference<LifecycleManager>(1244) at 1", "Move MethodInvocation(1120) into MethodInvocation(1279) at 0", "Insert SimpleName: build(1278) into MethodInvocation(1279) at 1", "Insert SimpleType: InternalLifecycleModule(1310) into ClassInstanceCreation(1312) at 0", "Insert SimpleName: lifecycleManagerRef(1311) into ClassInstanceCreation(1312) at 1", "Update SimpleName: annotation(1215) to internalBootstrapModule", "Move SimpleName: annotation(1215) into MethodInvocation(1323) at 0", "Update SimpleName: value(1216) to getMode", "Move SimpleName: value(1216) into MethodInvocation(1323) at 1", "Update SimpleName: annotation(1227) to internalBootstrapModule", "Move SimpleName: annotation(1227) into MethodInvocation(1335) at 0", "Update SimpleName: baseClass(1228) to getStage", "Move SimpleName: baseClass(1228) into MethodInvocation(1335) at 1", "Insert SimpleName: Key(1364) into MethodInvocation(1376) at 0", "Update SimpleName: getModuleListBuilder(1255) to get", "Move SimpleName: getModuleListBuilder(1255) into MethodInvocation(1376) at 1", "Insert ClassInstanceCreation(1375) into MethodInvocation(1376) at 2", "Update SimpleName: createInjector(1276) to Key", "Move SimpleName: createInjector(1276) into MethodInvocation(1397) at 0", "Insert SimpleName: get(1386) into MethodInvocation(1397) at 1", "Insert ClassInstanceCreation(1396) into MethodInvocation(1397) at 2", "Insert FieldAccess(1403) into Assignment: =(1410) at 0", "Insert SimpleType: AtomicReference(1596) into ParameterizedType: AtomicReference<LifecycleManager>(1599) at 0", "Insert SimpleType: LifecycleManager(1598) into ParameterizedType: AtomicReference<LifecycleManager>(1599) at 1", "Insert SimpleName: InternalLifecycleModule(1607) into SimpleType: InternalLifecycleModule(1608) at 0", "Insert SimpleName: transformer(1034) into MethodInvocation(1037) at 0", "Insert SimpleName: call(1035) into MethodInvocation(1037) at 1", "Insert SimpleName: localModules(1036) into MethodInvocation(1037) at 2", "Move SimpleName: injector(940) into MethodInvocation(1049) at 0", "Move SimpleName: createChildInjector(941) into MethodInvocation(1049) at 1", "Update SimpleName: modules(942) to localModules", "Move SimpleName: modules(942) into MethodInvocation(1049) at 2", "Insert SimpleName: createSimulatedChildInjector(1054) into MethodInvocation(1056) at 0", "Insert SimpleName: localModules(1055) into MethodInvocation(1056) at 1", "Insert SimpleName: Sets(1176) into MethodInvocation(1179) at 0", "Insert SimpleName: newHashSet(1177) into MethodInvocation(1179) at 1", "Update SimpleName: getClasses(1179) to ignoreClasses", "Move SimpleName: getClasses(1179) into MethodInvocation(1179) at 2", "Move SimpleType: InternalAutoBindModule(1513) into ClassInstanceCreation(1189) at 0", "Insert SimpleName: injector(1186) into ClassInstanceCreation(1189) at 1", "Insert SimpleName: scanner(1187) into ClassInstanceCreation(1189) at 2", "Insert SimpleName: localIgnoreClasses(1188) into ClassInstanceCreation(1189) at 3", "Move MethodInvocation(1085) into ConditionalExpression(1229) at 0", "Insert MethodInvocation(1225) into ConditionalExpression(1229) at 1", "Move MethodInvocation(1092) into ConditionalExpression(1229) at 2", "Insert SimpleName: AtomicReference(1240) into SimpleType: AtomicReference(1241) at 0", "Update SimpleName: AutoBindSingleton(1201) to LifecycleManager", "Move SimpleName: AutoBindSingleton(1201) into SimpleType: LifecycleManager(1243) at 0", "Insert SimpleName: add(1269) into MethodInvocation(1277) at 1", "Insert ClassInstanceCreation(1276) into MethodInvocation(1277) at 2", "Insert SimpleName: InternalLifecycleModule(1309) into SimpleType: InternalLifecycleModule(1310) at 0", "Insert ParameterizedType: TypeLiteral<Set<PostInjectorAction>>(1373) into ClassInstanceCreation(1375) at 0", "Insert AnonymousClassDeclaration(1374) into ClassInstanceCreation(1375) at 1", "Insert ParameterizedType: TypeLiteral<Set<ModuleTransformer>>(1394) into ClassInstanceCreation(1396) at 0", "Insert AnonymousClassDeclaration(1395) into ClassInstanceCreation(1396) at 1", "Insert ThisExpression(1401) into FieldAccess(1403) at 0", "Insert SimpleName: modules(1402) into FieldAccess(1403) at 1", "Update SimpleName: tempInjector(1295) to injector", "Update SimpleType: RuntimeException(1305) to ProvisionException", "Insert StringLiteral: \"Unable to resolve list of modules\"(1419) into ClassInstanceCreation(1421) at 1", "Insert SimpleName: AtomicReference(1595) into SimpleType: AtomicReference(1596) at 0", "Insert SimpleName: LifecycleManager(1597) into SimpleType: LifecycleManager(1598) at 0", "Insert SimpleName: Collections(1221) into MethodInvocation(1225) at 0", "Insert SimpleType: String(1223) into MethodInvocation(1225) at 1", "Update SimpleName: createStandardClasspathScanner(1089) to emptyList", "Move SimpleName: createStandardClasspathScanner(1089) into MethodInvocation(1225) at 2", "Insert SimpleType: InternalAutoBindModuleBootstrapModule(1271) into ClassInstanceCreation(1276) at 0", "Insert SimpleName: scanner(1272) into ClassInstanceCreation(1276) at 1", "Move MethodInvocation(1158) into ClassInstanceCreation(1276) at 2", "Insert SimpleType: TypeLiteral(1367) into ParameterizedType: TypeLiteral<Set<PostInjectorAction>>(1373) at 0", "Insert ParameterizedType: Set<PostInjectorAction>(1372) into ParameterizedType: TypeLiteral<Set<PostInjectorAction>>(1373) at 1", "Insert SimpleType: TypeLiteral(1388) into ParameterizedType: TypeLiteral<Set<ModuleTransformer>>(1394) at 0", "Insert ParameterizedType: Set<ModuleTransformer>(1393) into ParameterizedType: TypeLiteral<Set<ModuleTransformer>>(1394) at 1", "Update SimpleName: builder(1291) to internalBootstrapModule", "Update SimpleName: RuntimeException(1304) to ProvisionException", "Update SimpleName: EmptyClasspathScanner(1086) to String", "Move SimpleName: EmptyClasspathScanner(1086) into SimpleType: String(1223) at 0", "Insert SimpleName: InternalAutoBindModuleBootstrapModule(1270) into SimpleType: InternalAutoBindModuleBootstrapModule(1271) at 0", "Update SimpleName: build(1119) to builder", "Move SimpleName: build(1119) into MethodInvocation(1275) at 0", "Insert SimpleName: getIgnoreClasses(1274) into MethodInvocation(1275) at 1", "Insert SimpleName: TypeLiteral(1366) into SimpleType: TypeLiteral(1367) at 0", "Update SimpleType: Class(1259) to Set", "Move SimpleType: Class(1259) into ParameterizedType: Set<PostInjectorAction>(1372) at 0", "Insert SimpleType: PostInjectorAction(1371) into ParameterizedType: Set<PostInjectorAction>(1372) at 1", "Insert SimpleName: TypeLiteral(1387) into SimpleType: TypeLiteral(1388) at 0", "Insert SimpleType: Set(1390) into ParameterizedType: Set<ModuleTransformer>(1393) at 0", "Insert SimpleType: ModuleTransformer(1392) into ParameterizedType: Set<ModuleTransformer>(1393) at 1", "Update SimpleName: Class(1258) to Set", "Insert SimpleName: PostInjectorAction(1370) into SimpleType: PostInjectorAction(1371) at 0", "Insert SimpleName: Set(1389) into SimpleType: Set(1390) at 0", "Insert SimpleName: ModuleTransformer(1391) into SimpleType: ModuleTransformer(1392) at 0", "Update ParameterizedType: java.util.Map.Entry<Key<?>,Binding<?>>(1411) to Entry<Key<?>,Binding<?>>", "Update SimpleName: tempInjector(1396) to injector", "Update SimpleType: java.util.Map.Entry(1402) to Entry", "Insert SimpleName: Entry(1498) into SimpleType: Entry(1499) at 0", "Delete TextElement:   Child injector should be created directly from the main LifecycleInjector(954)", "Delete TagElement: @deprecated(955)", "Delete SimpleName: injector(1026)", "Delete TextElement:   Child injector should be created directly from the main LifecycleInjector(927)", "Delete TagElement: @deprecated(928)", "Delete SimpleName: Deprecated(930)", "Delete MarkerAnnotation(931)", "Delete MethodInvocation(943)", "Delete ReturnStatement(944)", "Delete Block(945)", "Delete MethodDeclaration(946)", "Delete SimpleName: Deprecated(957)", "Delete MarkerAnnotation(958)", "Delete Modifier: public(959)", "Delete SimpleName: createChildInjector(962)", "Delete MethodInvocation(973)", "Delete ReturnStatement(974)", "Delete Block(975)", "Delete MethodDeclaration(976)", "Delete TextElement:  LifecycleInjector creates the main Injector as soon as build() is called.(981)", "Delete TextElement: Use (982)", "Delete SimpleName: LifecycleInjector(983)", "Delete SimpleName: getInjector(984)", "Delete MethodRef(985)", "Delete TagElement: @link(986)", "Delete TextElement:  instead.(987)", "Delete TagElement: @deprecated(988)", "Delete SimpleName: injector(994)", "Delete TextElement:  LifecycleInjector creates the main Injector as soon as build() is called.(1013)", "Delete TagElement: @deprecated(1014)", "Delete SimpleName: injector(1002)", "Delete TextElement:  LifecycleInjector creates the main Injector as soon as build() is called.(1043)", "Delete TagElement: @deprecated(1044)", "Delete SimpleType: EmptyClasspathScanner(1087)", "Delete ClassInstanceCreation(1088)", "Delete MethodInvocation(1093)", "Delete ConditionalExpression(1094)", "Delete SimpleName: clazz(1199)", "Delete SimpleName: getAnnotation(1200)", "Delete SimpleType: AutoBindSingleton(1202)", "Delete TypeLiteral(1203)", "Delete MethodInvocation(1204)", "Delete MethodInvocation(1217)", "Delete SimpleName: AutoBindSingleton(1218)", "Delete SimpleType: AutoBindSingleton(1219)", "Delete TypeLiteral(1220)", "Delete InfixExpression: ==(1221)", "Delete MethodInvocation(1223)", "Delete MethodInvocation(1229)", "Delete SimpleName: AutoBindSingleton(1230)", "Delete SimpleType: AutoBindSingleton(1231)", "Delete TypeLiteral(1232)", "Delete InfixExpression: ==(1233)", "Delete MethodInvocation(1235)", "Delete SimpleName: Preconditions(1237)", "Delete SimpleName: checkState(1238)", "Delete MethodInvocation(1241)", "Delete PrefixExpression: !(1242)", "Delete StringLiteral: \"@AutoBindSingleton(multiple=true) value cannot be set for Modules\"(1243)", "Delete MethodInvocation(1244)", "Delete SimpleName: LOG(1246)", "Delete SimpleName: info(1247)", "Delete StringLiteral: \"Found @AutoBindSingleton annotated module : {} \"(1248)", "Delete MethodInvocation(1251)", "Delete MethodInvocation(1252)", "Delete MethodInvocation(1256)", "Delete SimpleName: include(1257)", "Delete ParameterizedType: Class<Module>(1262)", "Delete SimpleName: clazz(1263)", "Delete CastExpression(1264)", "Delete MethodInvocation(1265)", "Delete SimpleName: modules(1290)", "Delete QualifiedName: java.util.Map.Entry(1401)", "Delete SimpleName: Deprecated(1016)", "Delete MarkerAnnotation(1017)", "Delete MethodDeclaration(1035)", "Delete SimpleName: Deprecated(1046)", "Delete MarkerAnnotation(1047)", "Delete Modifier: public(1048)", "Delete SimpleName: createInjector(1051)", "Delete SimpleName: additionalModules(1061)", "Delete MethodInvocation(1062)", "Delete ReturnStatement(1063)", "Delete Block(1064)", "Delete MethodDeclaration(1065)", "Delete SimpleName: LifecycleInjector(1066)", "Delete SimpleName: toIgnore(1150)", "Delete InfixExpression: !=(1155)", "Delete SimpleName: Class(1160)", "Delete SimpleType: Class(1161)", "Delete WildcardType: ?(1162)", "Delete ParameterizedType: Class<?>(1163)", "Delete MethodInvocation(1165)", "Delete ConditionalExpression(1166)", "Delete VariableDeclarationFragment(1167)", "Delete VariableDeclarationStatement(1168)", "Delete Modifier: final(1169)", "Delete SimpleName: Class(1170)", "Delete SimpleType: Class(1171)", "Delete WildcardType: ?(1172)", "Delete ParameterizedType: Class<?>(1173)", "Delete SimpleName: clazz(1174)", "Delete SingleVariableDeclaration(1175)", "Delete ThisExpression(1176)", "Delete SimpleName: scanner(1177)", "Delete FieldAccess(1178)", "Delete MethodInvocation(1180)", "Delete SimpleName: clazz(1183)", "Delete MethodInvocation(1184)", "Delete SimpleType: AutoBindSingleton(1188)", "Delete TypeLiteral(1189)", "Delete MethodInvocation(1190)", "Delete PrefixExpression: !(1191)", "Delete InfixExpression: ||(1192)", "Delete ContinueStatement(1193)", "Delete Block(1194)", "Delete IfStatement(1195)", "Delete SimpleType: AutoBindSingleton(1197)", "Delete VariableDeclarationStatement(1206)", "Delete TypeLiteral(1209)", "Delete MethodInvocation(1212)", "Delete Block(1267)", "Delete IfStatement(1268)", "Delete Block(1269)", "Delete EnhancedForStatement(1270)", "Delete Modifier: final(1271)", "Delete SimpleName: tempInjector(1274)", "Delete SimpleName: internalBootstrapModule(1277)", "Delete MethodInvocation(1278)", "Delete VariableDeclarationFragment(1279)", "Delete VariableDeclarationStatement(1280)", "Delete SimpleName: modules(1286)", "Delete NullLiteral(1287)", "Delete VariableDeclarationFragment(1288)", "Delete VariableDeclarationStatement(1289)", "Delete SimpleName: transformers(1324)", "Delete SimpleName: modules(1325)", "Delete SimpleName: call(1327)", "Delete SimpleName: modules(1328)", "Delete MethodInvocation(1329)", "Delete Assignment: =(1330)", "Delete ExpressionStatement(1331)", "Delete Block(1332)", "Delete EnhancedForStatement(1333)", "Delete ThisExpression(1334)", "Delete SimpleName: lifecycleManager(1335)", "Delete FieldAccess(1336)", "Delete SimpleName: tempInjector(1337)", "Delete SimpleName: getInstance(1338)", "Delete SimpleType: LifecycleManager(1340)", "Delete TypeLiteral(1341)", "Delete MethodInvocation(1342)", "Delete Assignment: =(1343)", "Delete ExpressionStatement(1344)", "Delete ThisExpression(1345)", "Delete SimpleName: injector(1346)", "Delete FieldAccess(1347)", "Delete SimpleName: Guice(1348)", "Delete SimpleName: createInjector(1349)", "Delete SimpleName: ImmutableList(1353)", "Delete SimpleName: builder(1356)", "Delete MethodInvocation(1357)", "Delete SimpleName: add(1358)", "Delete MethodInvocation(1490)", "Delete SimpleName: add(1491)", "Delete SimpleName: tempInjector(1494)", "Delete SimpleName: getInstance(1495)", "Delete MethodInvocation(1499)", "Delete SimpleName: LifecycleMethodsFactory(1502)", "Delete SimpleType: LifecycleMethodsFactory(1503)", "Delete TypeLiteral(1504)", "Delete MethodInvocation(1505)", "Delete ClassInstanceCreation(1506)", "Delete MethodInvocation(1507)", "Delete SimpleName: addAll(1508)", "Delete MethodInvocation(1510)", "Delete SimpleName: tempInjector(1514)", "Delete ThisExpression(1515)", "Delete SimpleName: scanner(1516)", "Delete FieldAccess(1517)", "Delete SimpleName: toIgnore(1518)", "Delete ClassInstanceCreation(1519)", "Delete MethodInvocation(1520)", "Delete MethodInvocation(1522)", "Delete MethodInvocation(1523)", "Delete Assignment: =(1524)", "Delete ExpressionStatement(1525)", "Delete MethodInvocation(1532)", "Delete SimpleName: injector(1535)", "Delete MethodInvocation(1536)", "Delete ExpressionStatement(1537)", "Delete Block(1538)", "Delete EnhancedForStatement(1539)", "Delete Block(1540)", "Delete MethodDeclaration(1541)"]}}, {"LifecycleInjectorBuilderImpl_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: javax.annotation.Nullable to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 2", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 2"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 2", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 2"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}]}}, {"LifecycleInjectorBuilderImpl_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(1242) at 4", "Insert QualifiedName: javax.annotation.Nullable(8) into ImportDeclaration(9) at 0", "Insert MarkerAnnotation(480) into MethodDeclaration(507) at 2", "Insert SimpleName: Nullable(479) into MarkerAnnotation(480) at 0", "Insert MarkerAnnotation(490) into SingleVariableDeclaration(496) at 0", "Insert MarkerAnnotation(597) into MethodDeclaration(624) at 2", "Insert SimpleName: Nullable(489) into MarkerAnnotation(490) at 0", "Insert SimpleName: Nullable(596) into MarkerAnnotation(597) at 0", "Insert MarkerAnnotation(607) into SingleVariableDeclaration(613) at 0", "Insert SimpleName: Nullable(606) into MarkerAnnotation(607) at 0"]}}, {"LoadersBootstrapModule_cluster": {"actions": [{"root": "UPDATE from AbstractBootstrapModule to BootstrapModule", "operations": ["UPD SimpleName: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule", "UPD SimpleType: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: binder to SingleVariableDeclaration at 1", "INS SimpleName: BootstrapBinder to SimpleType: BootstrapBinder at 0", "INS SimpleType: BootstrapBinder to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}]}}, {"LoadersBootstrapModule_diff": {"operations": ["Update SimpleType: AbstractBootstrapModule(13) to BootstrapModule", "Update SimpleName: AbstractBootstrapModule(12) to BootstrapModule", "Insert SingleVariableDeclaration(42) into MethodDeclaration(143) at 4", "Insert SimpleType: BootstrapBinder(40) into SingleVariableDeclaration(42) at 0", "Insert SimpleName: binder(41) into SingleVariableDeclaration(42) at 1", "Insert SimpleName: BootstrapBinder(39) into SimpleType: BootstrapBinder(40) at 0", "Insert SimpleName: binder(129) into MethodInvocation(131) at 0"]}}, {"ClasspathScanner_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.io.IOException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS QualifiedName: java.lang.annotation.Annotation to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 2"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: java.net.URL to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: java.util.Collection to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS QualifiedName: java.util.Enumeration to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 8"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: java.util.List to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: org.apache.xbean.finder.AnnotationFinder to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS QualifiedName: org.apache.xbean.finder.archive.Archive to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: org.apache.xbean.finder.archive.CompositeArchive to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS QualifiedName: org.apache.xbean.finder.archive.JarArchive to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 14"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS ImportDeclaration to CompilationUnit at 15", "INS QualifiedName: org.slf4j.Logger to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 16", "operations": ["INS QualifiedName: org.slf4j.LoggerFactory to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 16"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: com.google.common.base.Preconditions to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: com.google.common.collect.ImmutableSet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS QualifiedName: com.google.common.collect.Lists to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 19"]}, {"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS QualifiedName: com.google.common.collect.Sets to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 20"]}, {"root": "INS Javadoc to TypeDeclaration: class at 0", "operations": ["INS TextElement: Utility to find annotated classes to TagElement at 0", "INS TagElement to Javadoc at 0", "INS Javadoc to TypeDeclaration: class at 0"]}, {"root": "INS SimpleName: ClasspathScanner to TypeDeclaration: class at 2", "operations": ["INS SimpleName: ClasspathScanner to TypeDeclaration: class at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 3", "operations": ["INS SimpleType: Logger to FieldDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: ClasspathScanner to TypeLiteral at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: log to VariableDeclarationFragment at 0", "INS SimpleName: LoggerFactory to MethodInvocation at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: ClasspathScanner to SimpleType: ClasspathScanner at 0", "INS Modifier: final to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleName: Logger to SimpleType: Logger at 0", "INS TypeLiteral to MethodInvocation at 2", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS SimpleName: getLogger to MethodInvocation at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 4", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: protected to FieldDeclaration at 0", "INS SimpleName: ClassLoader to SimpleType: ClassLoader at 0", "INS SimpleName: classLoader to VariableDeclarationFragment at 0", "INS SimpleType: ClassLoader to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleName: classes to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: constructors to VariableDeclarationFragment at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: final to FieldDeclaration at 1", "INS SimpleName: methods to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: fields to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS VariableDeclarationFragment to FieldDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleName: basePackages to SingleVariableDeclaration at 1", "INS TagElement: @param to Javadoc at 1", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS Modifier: public to MethodDeclaration at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Class<? extends Annotation>> at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: basePackages to ConstructorInvocation at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Collection<Class<? extends Annotation>> at 1", "INS SimpleName: getContextClassLoader to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: annotations to SingleVariableDeclaration at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: basePackages to TagElement: @param at 0", "INS ConstructorInvocation to Block at 0", "INS SimpleName: annotations to TagElement: @param at 0", "INS SimpleName: annotations to ConstructorInvocation at 1", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: currentThread to MethodInvocation at 1", "INS MethodInvocation to ConstructorInvocation at 2", "INS TextElement:  list of packages to search (recursively) to TagElement: @param at 1", "INS SimpleType: Collection to ParameterizedType: Collection<String> at 0", "INS ParameterizedType: Collection<Class<? extends Annotation>> to SingleVariableDeclaration at 0", "INS SimpleType: String to ParameterizedType: Collection<String> at 1", "INS SimpleName: String to SimpleType: String at 0", "INS TagElement: @param to Javadoc at 0", "INS TextElement:  class annotations to search for to TagElement: @param at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: ClasspathScanner to MethodDeclaration at 2", "INS SimpleName: Thread to MethodInvocation at 0", "INS ParameterizedType: Collection<String> to SingleVariableDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS TextElement:  the found classes to TagElement: @return at 0", "INS Javadoc to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: classes to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS ParameterizedType: Set<Class<?>> to MethodDeclaration at 2", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS Block to MethodDeclaration at 4", "INS ParameterizedType: Class<?> to ParameterizedType: Set<Class<?>> at 1", "INS SimpleType: Set to ParameterizedType: Set<Class<?>> at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: getClasses to MethodDeclaration at 3", "INS TagElement: @return to Javadoc at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: constructors to ReturnStatement at 0", "INS SimpleName: Constructor to SimpleType: Constructor at 0", "INS SimpleType: Constructor to ParameterizedType: Set<Constructor> at 1", "INS ReturnStatement to Block at 0", "INS ParameterizedType: Set<Constructor> to MethodDeclaration at 1", "INS Block to MethodDeclaration at 3", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleType: Set to ParameterizedType: Set<Constructor> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 18", "operations": ["INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: archives to ClassInstanceCreation at 1", "INS SimpleName: annotationFinder to VariableDeclarationFragment at 0", "INS StringLiteral: \".\" to MethodInvocation at 2", "INS SimpleType: JarArchive to ClassInstanceCreation at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: localClasses to SingleVariableDeclaration at 1", "INS SimpleName: basePackages to EnhancedForStatement at 1", "INS SimpleName: getResources to MethodInvocation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleType: Collection to ParameterizedType: Collection<String> at 0", "INS ParameterizedType: Set<Constructor> to SingleVariableDeclaration at 0", "INS SimpleName: compositeArchive to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: annotation to MethodInvocation at 2", "INS SimpleName: warn to MethodInvocation at 1", "INS SimpleName: annotationFinder to MethodInvocation at 0", "INS SimpleName: CompositeArchive to SimpleType: CompositeArchive at 0", "INS IfStatement to Block at 0", "INS ParameterizedType: Set<Method> to SingleVariableDeclaration at 0", "INS MethodInvocation to WhileStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Set to ParameterizedType: Set<Class<?>> at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: annotationFinder to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleType: Enumeration to ParameterizedType: Enumeration<URL> at 0", "INS SimpleName: annotationFinder to MethodInvocation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleType: Constructor to ParameterizedType: Set<Constructor> at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: basePackages to MethodInvocation at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: nextElement to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleType: Field to ParameterizedType: Set<Field> at 1", "INS SimpleName: classLoader to MethodInvocation at 0", "INS ReturnStatement to Block at 1", "INS SimpleName: thisUrl to VariableDeclarationFragment at 0", "INS SimpleType: Archive to ParameterizedType: List<Archive> at 1", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: basePackages to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ParameterizedType: Collection<Class<? extends Annotation>> to SingleVariableDeclaration at 0", "INS ClassInstanceCreation to MethodInvocation at 2", "INS Block to MethodDeclaration at 9", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: findAnnotatedConstructors to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: localMethods to SingleVariableDeclaration at 1", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: newArrayList to MethodInvocation at 1", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: annotations to SingleVariableDeclaration at 1", "INS SimpleName: basePackage to MethodInvocation at 0", "INS SimpleType: Method to ParameterizedType: Set<Method> at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ParameterizedType: List<Archive> to VariableDeclarationStatement at 0", "INS SimpleName: localMethods to MethodInvocation at 0", "INS StringLiteral: \"No base packages specified - no classpath scanning will be done\" to MethodInvocation at 2", "INS SimpleName: URL to SimpleType: URL at 0", "INS CatchClause to TryStatement at 1", "INS SimpleType: AnnotationFinder to ClassInstanceCreation at 0", "INS SimpleName: thisUrl to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: thisUrl to ClassInstanceCreation at 2", "INS Block to IfStatement at 1", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: isJarURL to MethodInvocation at 0", "INS SimpleType: URL to ParameterizedType: Enumeration<URL> at 1", "INS Block to IfStatement at 1", "INS SimpleName: localConstructors to SingleVariableDeclaration at 1", "INS SimpleType: Set to ParameterizedType: Set<Constructor> at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleType: CompositeArchive to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 18", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Class to SimpleType: Class at 0", "INS ParameterizedType: Collection<String> to SingleVariableDeclaration at 0", "INS SimpleName: Enumeration to SimpleType: Enumeration at 0", "INS SimpleName: localFields to MethodInvocation at 0", "INS ParameterizedType: Set<Class<?>> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: localClasses to MethodInvocation at 0", "INS EnhancedForStatement to Block at 1", "INS SimpleName: size to MethodInvocation at 1", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS EnhancedForStatement to Block at 4", "INS ThrowStatement to Block at 0", "INS SimpleName: annotation to MethodInvocation at 2", "INS SimpleType: String to ParameterizedType: Collection<String> at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: URL to SimpleType: URL at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Constructor to SimpleType: Constructor at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: classLoader to ClassInstanceCreation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: findAnnotatedMethods to MethodInvocation at 1", "INS SimpleName: CompositeArchive to SimpleType: CompositeArchive at 0", "INS SimpleName: resources to MethodInvocation at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: archives to VariableDeclarationFragment at 0", "INS SimpleName: annotation to MethodInvocation at 2", "INS ParameterizedType: Class<?> to ParameterizedType: Set<Class<?>> at 1", "INS SimpleName: compositeArchive to ClassInstanceCreation at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: localFields to SingleVariableDeclaration at 1", "INS SimpleName: hasMoreElements to MethodInvocation at 1", "INS Block to IfStatement at 2", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: resources to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: CompositeArchive to ClassInstanceCreation at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: localConstructors to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<Archive> at 0", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Collection<Class<? extends Annotation>> at 1", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS ParameterizedType: Set<Field> to SingleVariableDeclaration at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS IfStatement to Block at 1", "INS StringLiteral: \"/\" to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Archive to SimpleType: Archive at 0", "INS SimpleName: archives to MethodInvocation at 0", "INS SimpleName: thisUrl to ClassInstanceCreation at 2", "INS SimpleName: findAnnotatedClasses to MethodInvocation at 1", "INS SimpleType: URL to VariableDeclarationStatement at 0", "INS SimpleName: JarArchive to SimpleType: JarArchive at 0", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0", "INS SimpleName: AnnotationFinder to SimpleType: AnnotationFinder at 0", "INS TryStatement to Block at 1", "INS SimpleName: annotation to SingleVariableDeclaration at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: AnnotationFinder to SimpleType: AnnotationFinder at 0", "INS SimpleName: findAnnotatedFields to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: replace to MethodInvocation at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS Block to WhileStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: Collection to ParameterizedType: Collection<Class<? extends Annotation>> at 0", "INS SimpleType: Set to ParameterizedType: Set<Field> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: basePackage to ClassInstanceCreation at 3", "INS SimpleName: resources to VariableDeclarationFragment at 0", "INS SimpleName: GovernatorFileArchive to SimpleType: GovernatorFileArchive at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS SimpleName: annotationFinder to MethodInvocation at 0", "INS SimpleType: GovernatorFileArchive to ClassInstanceCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: annotation to MethodInvocation at 2", "INS SimpleType: Set to ParameterizedType: Set<Method> at 0", "INS SimpleName: basePackage to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: annotations to EnhancedForStatement at 1", "INS SimpleName: classLoader to ClassInstanceCreation at 1", "INS Block to TryStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleName: addAll to MethodInvocation at 1", "INS SimpleType: AnnotationFinder to VariableDeclarationStatement at 0", "INS SimpleName: archives to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: Set to SimpleType: Set at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: Field to SimpleType: Field at 0", "INS ParameterizedType: Enumeration<URL> to VariableDeclarationStatement at 0", "INS SimpleName: addAll to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ExpressionStatement to Block at 1", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS ParameterizedType: Class<? extends Annotation> to SingleVariableDeclaration at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleType: IOException to SingleVariableDeclaration at 0", "INS SimpleName: doScanning to MethodDeclaration at 2", "INS WhileStatement to Block at 1", "INS Block to CatchClause at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \"zip\" to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS ReturnStatement to Block at 1", "INS SimpleName: url to SingleVariableDeclaration at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleType: URL to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to InfixExpression: || at 1", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS SimpleName: protocol to VariableDeclarationFragment at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: protocol to MethodInvocation at 2", "INS SimpleName: URL to SimpleType: URL at 0", "INS SimpleName: getProtocol to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: url to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: isJarURL to MethodDeclaration at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS InfixExpression: || to ReturnStatement at 0", "INS SimpleName: protocol to MethodInvocation at 2", "INS StringLiteral: \"jar\" to MethodInvocation at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: Set<Class<?>> to FieldDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: abstract to MethodDeclaration at 0", "MOV ParameterizedType: Set<Constructor> to FieldDeclaration at 2", "MOV SimpleName: getConstructors to MethodDeclaration at 2", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: Set<Method> to FieldDeclaration at 2"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV ParameterizedType: Set<Field> to FieldDeclaration at 2"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS SimpleName: basePackages to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 0", "INS TextElement:  list of packages to search (recursively) to TagElement: @param at 1", "INS TextElement:  class annotations to search for to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: classLoader to TagElement: @param at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleName: annotations to TagElement: @param at 0", "INS TextElement:  ClassLoader containing the classes to be scanned to TagElement: @param at 1"]}, {"root": "INS SimpleName: ClasspathScanner to MethodDeclaration at 2", "operations": ["INS SimpleName: ClasspathScanner to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: Collection to SimpleType: Collection at 0", "INS ParameterizedType: Collection<String> to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Collection to ParameterizedType: Collection<String> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: basePackages to SingleVariableDeclaration at 1", "INS SimpleType: String to ParameterizedType: Collection<String> at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: Collection to ParameterizedType: Collection<Class<? extends Annotation>> at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS SimpleName: annotations to SingleVariableDeclaration at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ParameterizedType: Collection<Class<? extends Annotation>> to SingleVariableDeclaration at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Collection<Class<? extends Annotation>> at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: classLoader to SingleVariableDeclaration at 2", "INS SimpleType: ClassLoader to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: ClassLoader to SimpleType: ClassLoader at 0", "INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: Method to SimpleType: Method at 0", "INS ParameterizedType: Set<Method> to VariableDeclarationStatement at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Sets to MethodInvocation at 0", "INS SimpleName: copyOf to MethodInvocation at 1", "INS ParameterizedType: Set<Field> to VariableDeclarationStatement at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS ExpressionStatement to Block at 10", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: checkNotNull to MethodInvocation at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS ParameterizedType: Set<Constructor> to VariableDeclarationStatement at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: localClasses to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS SimpleName: checkNotNull to MethodInvocation at 1", "INS SimpleName: classLoader to MethodInvocation at 2", "INS SimpleName: log to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleType: Set to ParameterizedType: Set<Method> at 0", "INS SimpleName: localClasses to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: copyOf to MethodInvocation at 1", "INS SimpleName: copyOf to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 5", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS ExpressionStatement to Block at 12", "INS ExpressionStatement to Block at 8", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 6", "INS SimpleType: Method to ParameterizedType: Set<Method> at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: copyOf to MethodInvocation at 1", "INS SimpleName: Constructor to SimpleType: Constructor at 0", "INS ParameterizedType: Class<?> to ParameterizedType: Set<Class<?>> at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Field to SimpleType: Field at 0", "INS SimpleName: Sets to MethodInvocation at 0", "INS SimpleName: localMethods to MethodInvocation at 2", "INS FieldAccess to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: localFields to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: classLoader to Assignment: = at 1", "INS SimpleType: Set to ParameterizedType: Set<Field> at 0", "INS SimpleType: Set to ParameterizedType: Set<Constructor> at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: methods to Assignment: = at 0", "INS SimpleName: Sets to MethodInvocation at 0", "INS StringLiteral: \"Classpath scanning done\" to MethodInvocation at 2", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS ExpressionStatement to Block at 11", "INS SimpleName: doScanning to MethodInvocation at 0", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS SimpleName: localMethods to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 4", "INS SimpleName: annotations to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: newHashSet to MethodInvocation at 1", "INS SimpleName: localFields to MethodInvocation at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Preconditions to MethodInvocation at 0", "INS SimpleName: Sets to MethodInvocation at 0", "INS SimpleName: annotations to MethodInvocation at 2", "INS ExpressionStatement to Block at 13", "INS ParameterizedType: Set<Class<?>> to VariableDeclarationStatement at 0", "INS SimpleName: Set to SimpleType: Set at 0", "INS StringLiteral: \"classLoader cannot be null\" to MethodInvocation at 3", "INS ExpressionStatement to Block at 9", "INS SimpleName: classes to Assignment: = at 0", "INS SimpleName: localConstructors to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS StringLiteral: \"Starting classpath scanning...\" to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: Field to ParameterizedType: Set<Field> at 1", "INS VariableDeclarationStatement to Block at 6", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: classLoader to FieldAccess at 1", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: localConstructors to MethodInvocation at 4", "INS SimpleName: fields to Assignment: = at 0", "INS SimpleType: Set to ParameterizedType: Set<Class<?>> at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: localFields to VariableDeclarationFragment at 0", "INS SimpleName: localConstructors to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: constructors to Assignment: = at 0", "INS VariableDeclarationStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Constructor to ParameterizedType: Set<Constructor> at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: basePackages to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: localClasses to MethodInvocation at 2", "INS StringLiteral: \"additionalAnnotations cannot be null\" to MethodInvocation at 3", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: localMethods to MethodInvocation at 5"]}, {"root": "UPDATE from abstract to public", "operations": ["UPD Modifier: abstract from abstract to public"]}, {"root": "INS ParameterizedType: Set<Method> to MethodDeclaration at 1", "operations": ["INS SimpleType: Set to ParameterizedType: Set<Method> at 0", "INS SimpleType: Method to ParameterizedType: Set<Method> at 1", "INS ParameterizedType: Set<Method> to MethodDeclaration at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: Set to SimpleType: Set at 0"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: methods to ReturnStatement at 0", "INS Block to MethodDeclaration at 4"]}, {"root": "INS ParameterizedType: Set<Field> to MethodDeclaration at 1", "operations": ["INS SimpleType: Set to ParameterizedType: Set<Field> at 0", "INS ParameterizedType: Set<Field> to MethodDeclaration at 1", "INS SimpleName: Set to SimpleType: Set at 0", "INS SimpleType: Field to ParameterizedType: Set<Field> at 1", "INS SimpleName: Field to SimpleType: Field at 0"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS SimpleName: fields to ReturnStatement at 0", "INS Block to MethodDeclaration at 4", "INS ReturnStatement to Block at 0"]}, {"root": "DEL Modifier: abstract", "operations": ["DEL Modifier: abstract"]}, {"root": "DEL SimpleName: ClasspathScanner", "operations": ["DEL SimpleName: ClasspathScanner"]}, {"root": "DEL Modifier: abstract", "operations": ["DEL Modifier: abstract"]}, {"root": "DEL SimpleName: getClasses", "operations": ["DEL SimpleName: getClasses"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration"]}, {"root": "DEL Modifier: abstract", "operations": ["DEL Modifier: abstract"]}, {"root": "DEL Modifier: abstract", "operations": ["DEL Modifier: abstract"]}]}}, {"ClasspathScanner_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(584) at 1", "Insert ImportDeclaration(5) into CompilationUnit(584) at 2", "Insert ImportDeclaration(13) into CompilationUnit(584) at 6", "Insert ImportDeclaration(15) into CompilationUnit(584) at 7", "Insert ImportDeclaration(17) into CompilationUnit(584) at 8", "Insert ImportDeclaration(19) into CompilationUnit(584) at 9", "Insert ImportDeclaration(23) into CompilationUnit(584) at 11", "Insert ImportDeclaration(25) into CompilationUnit(584) at 12", "Insert ImportDeclaration(27) into CompilationUnit(584) at 13", "Insert ImportDeclaration(29) into CompilationUnit(584) at 14", "Insert ImportDeclaration(31) into CompilationUnit(584) at 15", "Insert ImportDeclaration(33) into CompilationUnit(584) at 16", "Insert ImportDeclaration(35) into CompilationUnit(584) at 17", "Insert ImportDeclaration(37) into CompilationUnit(584) at 18", "Insert ImportDeclaration(39) into CompilationUnit(584) at 19", "Insert ImportDeclaration(41) into CompilationUnit(584) at 20", "Insert QualifiedName: java.io.IOException(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: java.lang.annotation.Annotation(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.net.URL(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: java.util.Collection(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: java.util.Enumeration(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: java.util.List(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: org.apache.xbean.finder.AnnotationFinder(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: org.apache.xbean.finder.archive.Archive(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: org.apache.xbean.finder.archive.CompositeArchive(26) into ImportDeclaration(27) at 0", "Insert QualifiedName: org.apache.xbean.finder.archive.JarArchive(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: org.slf4j.Logger(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: org.slf4j.LoggerFactory(32) into ImportDeclaration(33) at 0", "Insert QualifiedName: com.google.common.base.Preconditions(34) into ImportDeclaration(35) at 0", "Insert QualifiedName: com.google.common.collect.ImmutableSet(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: com.google.common.collect.Lists(38) into ImportDeclaration(39) at 0", "Insert QualifiedName: com.google.common.collect.Sets(40) into ImportDeclaration(41) at 0", "Insert Javadoc(44) into TypeDeclaration: class(583) at 0", "Insert SimpleName: ClasspathScanner(46) into TypeDeclaration: class(583) at 2", "Insert FieldDeclaration(60) into TypeDeclaration: class(583) at 3", "Insert FieldDeclaration(67) into TypeDeclaration: class(583) at 4", "Insert FieldDeclaration(79) into TypeDeclaration: class(583) at 5", "Insert FieldDeclaration(89) into TypeDeclaration: class(583) at 6", "Insert FieldDeclaration(99) into TypeDeclaration: class(583) at 7", "Insert FieldDeclaration(109) into TypeDeclaration: class(583) at 8", "Insert MethodDeclaration(146) into TypeDeclaration: class(583) at 9", "Insert MethodDeclaration(310) into TypeDeclaration: class(583) at 11", "Insert MethodDeclaration(321) into TypeDeclaration: class(583) at 12", "Insert MethodDeclaration(555) into TypeDeclaration: class(583) at 15", "Insert MethodDeclaration(582) into TypeDeclaration: class(583) at 16", "Insert TagElement(43) into Javadoc(44) at 0", "Insert Modifier: private(47) into FieldDeclaration(60) at 0", "Insert Modifier: static(48) into FieldDeclaration(60) at 1", "Insert Modifier: final(49) into FieldDeclaration(60) at 2", "Insert SimpleType: Logger(51) into FieldDeclaration(60) at 3", "Insert VariableDeclarationFragment(59) into FieldDeclaration(60) at 4", "Insert Modifier: protected(61) into FieldDeclaration(67) at 0", "Insert Modifier: final(62) into FieldDeclaration(67) at 1", "Insert SimpleType: ClassLoader(64) into FieldDeclaration(67) at 2", "Insert VariableDeclarationFragment(66) into FieldDeclaration(67) at 3", "Insert Modifier: private(68) into FieldDeclaration(79) at 0", "Insert Modifier: final(69) into FieldDeclaration(79) at 1", "Move ParameterizedType: Set<Class<?>>(21) into FieldDeclaration(79) at 2", "Insert VariableDeclarationFragment(78) into FieldDeclaration(79) at 3", "Insert Modifier: private(80) into FieldDeclaration(89) at 0", "Insert Modifier: final(81) into FieldDeclaration(89) at 1", "Move ParameterizedType: Set<Constructor>(30) into FieldDeclaration(89) at 2", "Insert VariableDeclarationFragment(88) into FieldDeclaration(89) at 3", "Insert Modifier: private(90) into FieldDeclaration(99) at 0", "Insert Modifier: final(91) into FieldDeclaration(99) at 1", "Move ParameterizedType: Set<Method>(39) into FieldDeclaration(99) at 2", "Insert VariableDeclarationFragment(98) into FieldDeclaration(99) at 3", "Insert Modifier: private(100) into FieldDeclaration(109) at 0", "Insert Modifier: final(101) into FieldDeclaration(109) at 1", "Move ParameterizedType: Set<Field>(48) into FieldDeclaration(109) at 2", "Insert VariableDeclarationFragment(108) into FieldDeclaration(109) at 3", "Insert Javadoc(116) into MethodDeclaration(146) at 0", "Insert Modifier: public(117) into MethodDeclaration(146) at 1", "Insert SimpleName: ClasspathScanner(118) into MethodDeclaration(146) at 2", "Insert SingleVariableDeclaration(125) into MethodDeclaration(146) at 3", "Insert SingleVariableDeclaration(136) into MethodDeclaration(146) at 4", "Insert Block(145) into MethodDeclaration(146) at 5", "Insert Javadoc(156) into MethodDeclaration(294) at 0", "Insert SimpleName: ClasspathScanner(158) into MethodDeclaration(294) at 2", "Insert SingleVariableDeclaration(165) into MethodDeclaration(294) at 3", "Insert SingleVariableDeclaration(176) into MethodDeclaration(294) at 4", "Insert SingleVariableDeclaration(181) into MethodDeclaration(294) at 5", "Insert Block(293) into MethodDeclaration(294) at 6", "Insert Javadoc(297) into MethodDeclaration(310) at 0", "Move Modifier: public(24) into MethodDeclaration(310) at 1", "Insert ParameterizedType: Set<Class<?>>(305) into MethodDeclaration(310) at 2", "Insert SimpleName: getClasses(306) into MethodDeclaration(310) at 3", "Insert Block(309) into MethodDeclaration(310) at 4", "Update Modifier: abstract(25) to public", "Move Modifier: abstract(25) into MethodDeclaration(321) at 0", "Insert ParameterizedType: Set<Constructor>(316) into MethodDeclaration(321) at 1", "Move SimpleName: getConstructors(31) into MethodDeclaration(321) at 2", "Insert Block(320) into MethodDeclaration(321) at 3", "Insert ParameterizedType: Set<Method>(327) into MethodDeclaration(332) at 1", "Insert Block(331) into MethodDeclaration(332) at 3", "Insert ParameterizedType: Set<Field>(338) into MethodDeclaration(343) at 1", "Insert Block(342) into MethodDeclaration(343) at 3", "Insert Modifier: protected(344) into MethodDeclaration(555) at 0", "Insert PrimitiveType: void(345) into MethodDeclaration(555) at 1", "Insert SimpleName: doScanning(346) into MethodDeclaration(555) at 2", "Insert SingleVariableDeclaration(353) into MethodDeclaration(555) at 3", "Insert SingleVariableDeclaration(364) into MethodDeclaration(555) at 4", "Insert SingleVariableDeclaration(373) into MethodDeclaration(555) at 5", "Insert SingleVariableDeclaration(380) into MethodDeclaration(555) at 6", "Insert SingleVariableDeclaration(387) into MethodDeclaration(555) at 7", "Insert SingleVariableDeclaration(394) into MethodDeclaration(555) at 8", "Insert Block(554) into MethodDeclaration(555) at 9", "Insert Modifier: private(556) into MethodDeclaration(582) at 0", "Insert PrimitiveType: boolean(557) into MethodDeclaration(582) at 1", "Insert SimpleName: isJarURL(558) into MethodDeclaration(582) at 2", "Insert SingleVariableDeclaration(562) into MethodDeclaration(582) at 3", "Insert Block(581) into MethodDeclaration(582) at 4", "Insert TextElement: Utility to find annotated classes(42) into TagElement(43) at 0", "Insert SimpleName: Logger(50) into SimpleType: Logger(51) at 0", "Insert SimpleName: log(52) into VariableDeclarationFragment(59) at 0", "Insert MethodInvocation(58) into VariableDeclarationFragment(59) at 1", "Insert SimpleName: ClassLoader(63) into SimpleType: ClassLoader(64) at 0", "Insert SimpleName: classLoader(65) into VariableDeclarationFragment(66) at 0", "Insert SimpleName: classes(77) into VariableDeclarationFragment(78) at 0", "Insert SimpleName: constructors(87) into VariableDeclarationFragment(88) at 0", "Insert SimpleName: methods(97) into VariableDeclarationFragment(98) at 0", "Insert SimpleName: fields(107) into VariableDeclarationFragment(108) at 0", "Insert TagElement: @param(112) into Javadoc(116) at 0", "Insert TagElement: @param(115) into Javadoc(116) at 1", "Insert ParameterizedType: Collection<String>(123) into SingleVariableDeclaration(125) at 0", "Insert SimpleName: basePackages(124) into SingleVariableDeclaration(125) at 1", "Insert ParameterizedType: Collection<Class<? extends Annotation>>(134) into SingleVariableDeclaration(136) at 0", "Insert SimpleName: annotations(135) into SingleVariableDeclaration(136) at 1", "Insert ConstructorInvocation(144) into Block(145) at 0", "Insert TagElement: @param(149) into Javadoc(156) at 0", "Insert TagElement: @param(152) into Javadoc(156) at 1", "Insert TagElement: @param(155) into Javadoc(156) at 2", "Insert ParameterizedType: Collection<String>(163) into SingleVariableDeclaration(165) at 0", "Insert SimpleName: basePackages(164) into SingleVariableDeclaration(165) at 1", "Insert ParameterizedType: Collection<Class<? extends Annotation>>(174) into SingleVariableDeclaration(176) at 0", "Insert SimpleName: annotations(175) into SingleVariableDeclaration(176) at 1", "Insert Modifier: final(177) into SingleVariableDeclaration(181) at 0", "Insert SimpleType: ClassLoader(179) into SingleVariableDeclaration(181) at 1", "Insert SimpleName: classLoader(180) into SingleVariableDeclaration(181) at 2", "Insert ExpressionStatement(187) into Block(293) at 0", "Insert ExpressionStatement(193) into Block(293) at 1", "Insert ExpressionStatement(198) into Block(293) at 2", "Insert ExpressionStatement(204) into Block(293) at 3", "Insert VariableDeclarationStatement(217) into Block(293) at 4", "Insert VariableDeclarationStatement(228) into Block(293) at 5", "Insert VariableDeclarationStatement(239) into Block(293) at 6", "Insert VariableDeclarationStatement(250) into Block(293) at 7", "Insert ExpressionStatement(259) into Block(293) at 8", "Insert ExpressionStatement(266) into Block(293) at 9", "Insert ExpressionStatement(273) into Block(293) at 10", "Insert ExpressionStatement(280) into Block(293) at 11", "Insert ExpressionStatement(287) into Block(293) at 12", "Insert ExpressionStatement(292) into Block(293) at 13", "Insert TagElement: @return(296) into Javadoc(297) at 0", "Insert SimpleType: Set(300) into ParameterizedType: Set<Class<?>>(305) at 0", "Insert ParameterizedType: Class<?>(304) into ParameterizedType: Set<Class<?>>(305) at 1", "Insert ReturnStatement(308) into Block(309) at 0", "Insert SimpleType: Set(313) into ParameterizedType: Set<Constructor>(316) at 0", "Insert SimpleType: Constructor(315) into ParameterizedType: Set<Constructor>(316) at 1", "Insert ReturnStatement(319) into Block(320) at 0", "Insert SimpleType: Set(324) into ParameterizedType: Set<Method>(327) at 0", "Insert SimpleType: Method(326) into ParameterizedType: Set<Method>(327) at 1", "Insert ReturnStatement(330) into Block(331) at 0", "Insert SimpleType: Set(335) into ParameterizedType: Set<Field>(338) at 0", "Insert SimpleType: Field(337) into ParameterizedType: Set<Field>(338) at 1", "Insert ReturnStatement(341) into Block(342) at 0", "Insert ParameterizedType: Collection<String>(351) into SingleVariableDeclaration(353) at 0", "Insert SimpleName: basePackages(352) into SingleVariableDeclaration(353) at 1", "Insert ParameterizedType: Collection<Class<? extends Annotation>>(362) into SingleVariableDeclaration(364) at 0", "Insert SimpleName: annotations(363) into SingleVariableDeclaration(364) at 1", "Insert ParameterizedType: Set<Class<?>>(371) into SingleVariableDeclaration(373) at 0", "Insert SimpleName: localClasses(372) into SingleVariableDeclaration(373) at 1", "Insert ParameterizedType: Set<Constructor>(378) into SingleVariableDeclaration(380) at 0", "Insert SimpleName: localConstructors(379) into SingleVariableDeclaration(380) at 1", "Insert ParameterizedType: Set<Method>(385) into SingleVariableDeclaration(387) at 0", "Insert SimpleName: localMethods(386) into SingleVariableDeclaration(387) at 1", "Insert ParameterizedType: Set<Field>(392) into SingleVariableDeclaration(394) at 0", "Insert SimpleName: localFields(393) into SingleVariableDeclaration(394) at 1", "Insert IfStatement(407) into Block(554) at 0", "Insert TryStatement(553) into Block(554) at 1", "Insert SimpleType: URL(560) into SingleVariableDeclaration(562) at 0", "Insert SimpleName: url(561) into SingleVariableDeclaration(562) at 1", "Insert VariableDeclarationStatement(570) into Block(581) at 0", "Insert ReturnStatement(580) into Block(581) at 1", "Insert SimpleName: LoggerFactory(53) into MethodInvocation(58) at 0", "Insert SimpleName: getLogger(54) into MethodInvocation(58) at 1", "Insert TypeLiteral(57) into MethodInvocation(58) at 2", "Insert SimpleName: basePackages(110) into TagElement: @param(112) at 0", "Insert TextElement:  list of packages to search (recursively)(111) into TagElement: @param(112) at 1", "Insert SimpleName: annotations(113) into TagElement: @param(115) at 0", "Insert TextElement:  class annotations to search for(114) into TagElement: @param(115) at 1", "Insert SimpleType: Collection(120) into ParameterizedType: Collection<String>(123) at 0", "Insert SimpleType: String(122) into ParameterizedType: Collection<String>(123) at 1", "Insert SimpleType: Collection(127) into ParameterizedType: Collection<Class<? extends Annotation>>(134) at 0", "Insert ParameterizedType: Class<? extends Annotation>(133) into ParameterizedType: Collection<Class<? extends Annotation>>(134) at 1", "Insert SimpleName: basePackages(137) into ConstructorInvocation(144) at 0", "Insert SimpleName: annotations(138) into ConstructorInvocation(144) at 1", "Insert MethodInvocation(143) into ConstructorInvocation(144) at 2", "Insert SimpleName: basePackages(147) into TagElement: @param(149) at 0", "Insert TextElement:  list of packages to search (recursively)(148) into TagElement: @param(149) at 1", "Insert SimpleName: annotations(150) into TagElement: @param(152) at 0", "Insert TextElement:  class annotations to search for(151) into TagElement: @param(152) at 1", "Insert SimpleName: classLoader(153) into TagElement: @param(155) at 0", "Insert TextElement:  ClassLoader containing the classes to be scanned(154) into TagElement: @param(155) at 1", "Insert SimpleType: Collection(160) into ParameterizedType: Collection<String>(163) at 0", "Insert SimpleType: String(162) into ParameterizedType: Collection<String>(163) at 1", "Insert SimpleType: Collection(167) into ParameterizedType: Collection<Class<? extends Annotation>>(174) at 0", "Insert ParameterizedType: Class<? extends Annotation>(173) into ParameterizedType: Collection<Class<? extends Annotation>>(174) at 1", "Insert SimpleName: ClassLoader(178) into SimpleType: ClassLoader(179) at 0", "Insert MethodInvocation(186) into ExpressionStatement(187) at 0", "Insert MethodInvocation(192) into ExpressionStatement(193) at 0", "Insert MethodInvocation(197) into ExpressionStatement(198) at 0", "Insert Assignment: =(203) into ExpressionStatement(204) at 0", "Insert ParameterizedType: Set<Class<?>>(211) into VariableDeclarationStatement(217) at 0", "Insert VariableDeclarationFragment(216) into VariableDeclarationStatement(217) at 1", "Insert ParameterizedType: Set<Constructor>(222) into VariableDeclarationStatement(228) at 0", "Insert VariableDeclarationFragment(227) into VariableDeclarationStatement(228) at 1", "Insert ParameterizedType: Set<Method>(233) into VariableDeclarationStatement(239) at 0", "Insert VariableDeclarationFragment(238) into VariableDeclarationStatement(239) at 1", "Insert ParameterizedType: Set<Field>(244) into VariableDeclarationStatement(250) at 0", "Insert VariableDeclarationFragment(249) into VariableDeclarationStatement(250) at 1", "Insert MethodInvocation(258) into ExpressionStatement(259) at 0", "Insert Assignment: =(265) into ExpressionStatement(266) at 0", "Insert Assignment: =(272) into ExpressionStatement(273) at 0", "Insert Assignment: =(279) into ExpressionStatement(280) at 0", "Insert Assignment: =(286) into ExpressionStatement(287) at 0", "Insert MethodInvocation(291) into ExpressionStatement(292) at 0", "Insert TextElement:  the found classes(295) into TagElement: @return(296) at 0", "Insert SimpleName: Set(299) into SimpleType: Set(300) at 0", "Insert SimpleType: Class(302) into ParameterizedType: Class<?>(304) at 0", "Insert WildcardType: ?(303) into ParameterizedType: Class<?>(304) at 1", "Insert SimpleName: classes(307) into ReturnStatement(308) at 0", "Insert SimpleName: Set(312) into SimpleType: Set(313) at 0", "Insert SimpleName: Constructor(314) into SimpleType: Constructor(315) at 0", "Insert SimpleName: constructors(318) into ReturnStatement(319) at 0", "Insert SimpleName: Set(323) into SimpleType: Set(324) at 0", "Insert SimpleName: Method(325) into SimpleType: Method(326) at 0", "Insert SimpleName: methods(329) into ReturnStatement(330) at 0", "Insert SimpleName: Set(334) into SimpleType: Set(335) at 0", "Insert SimpleName: Field(336) into SimpleType: Field(337) at 0", "Insert SimpleName: fields(340) into ReturnStatement(341) at 0", "Insert SimpleType: Collection(348) into ParameterizedType: Collection<String>(351) at 0", "Insert SimpleType: String(350) into ParameterizedType: Collection<String>(351) at 1", "Insert SimpleType: Collection(355) into ParameterizedType: Collection<Class<? extends Annotation>>(362) at 0", "Insert ParameterizedType: Class<? extends Annotation>(361) into ParameterizedType: Collection<Class<? extends Annotation>>(362) at 1", "Insert SimpleType: Set(366) into ParameterizedType: Set<Class<?>>(371) at 0", "Insert ParameterizedType: Class<?>(370) into ParameterizedType: Set<Class<?>>(371) at 1", "Insert SimpleType: Set(375) into ParameterizedType: Set<Constructor>(378) at 0", "Insert SimpleType: Constructor(377) into ParameterizedType: Set<Constructor>(378) at 1", "Insert SimpleType: Set(382) into ParameterizedType: Set<Method>(385) at 0", "Insert SimpleType: Method(384) into ParameterizedType: Set<Method>(385) at 1", "Insert SimpleType: Set(389) into ParameterizedType: Set<Field>(392) at 0", "Insert SimpleType: Field(391) into ParameterizedType: Set<Field>(392) at 1", "Insert InfixExpression: ==(399) into IfStatement(407) at 0", "Insert Block(406) into IfStatement(407) at 1", "Insert Block(541) into TryStatement(553) at 0", "Insert CatchClause(552) into TryStatement(553) at 1", "Insert SimpleName: URL(559) into SimpleType: URL(560) at 0", "Insert SimpleType: String(564) into VariableDeclarationStatement(570) at 0", "Insert VariableDeclarationFragment(569) into VariableDeclarationStatement(570) at 1", "Insert InfixExpression: ||(579) into ReturnStatement(580) at 0", "Insert SimpleType: ClasspathScanner(56) into TypeLiteral(57) at 0", "Insert SimpleName: Collection(119) into SimpleType: Collection(120) at 0", "Insert SimpleName: String(121) into SimpleType: String(122) at 0", "Insert SimpleName: Collection(126) into SimpleType: Collection(127) at 0", "Insert SimpleType: Class(129) into ParameterizedType: Class<? extends Annotation>(133) at 0", "Insert WildcardType: ? extends Annotation(132) into ParameterizedType: Class<? extends Annotation>(133) at 1", "Insert MethodInvocation(141) into MethodInvocation(143) at 0", "Insert SimpleName: getContextClassLoader(142) into MethodInvocation(143) at 1", "Insert SimpleName: Collection(159) into SimpleType: Collection(160) at 0", "Insert SimpleName: String(161) into SimpleType: String(162) at 0", "Insert SimpleName: Collection(166) into SimpleType: Collection(167) at 0", "Insert SimpleType: Class(169) into ParameterizedType: Class<? extends Annotation>(173) at 0", "Insert WildcardType: ? extends Annotation(172) into ParameterizedType: Class<? extends Annotation>(173) at 1", "Insert SimpleName: Preconditions(182) into MethodInvocation(186) at 0", "Insert SimpleName: checkNotNull(183) into MethodInvocation(186) at 1", "Insert SimpleName: annotations(184) into MethodInvocation(186) at 2", "Insert StringLiteral: \"additionalAnnotations cannot be null\"(185) into MethodInvocation(186) at 3", "Insert SimpleName: Preconditions(188) into MethodInvocation(192) at 0", "Insert SimpleName: checkNotNull(189) into MethodInvocation(192) at 1", "Insert SimpleName: classLoader(190) into MethodInvocation(192) at 2", "Insert StringLiteral: \"classLoader cannot be null\"(191) into MethodInvocation(192) at 3", "Insert SimpleName: log(194) into MethodInvocation(197) at 0", "Insert SimpleName: debug(195) into MethodInvocation(197) at 1", "Insert StringLiteral: \"Starting classpath scanning...\"(196) into MethodInvocation(197) at 2", "Insert FieldAccess(201) into Assignment: =(203) at 0", "Insert SimpleName: classLoader(202) into Assignment: =(203) at 1", "Insert SimpleType: Set(206) into ParameterizedType: Set<Class<?>>(211) at 0", "Insert ParameterizedType: Class<?>(210) into ParameterizedType: Set<Class<?>>(211) at 1", "Insert SimpleName: localClasses(212) into VariableDeclarationFragment(216) at 0", "Insert MethodInvocation(215) into VariableDeclarationFragment(216) at 1", "Insert SimpleType: Set(219) into ParameterizedType: Set<Constructor>(222) at 0", "Insert SimpleType: Constructor(221) into ParameterizedType: Set<Constructor>(222) at 1", "Insert SimpleName: localConstructors(223) into VariableDeclarationFragment(227) at 0", "Insert MethodInvocation(226) into VariableDeclarationFragment(227) at 1", "Insert SimpleType: Set(230) into ParameterizedType: Set<Method>(233) at 0", "Insert SimpleType: Method(232) into ParameterizedType: Set<Method>(233) at 1", "Insert SimpleName: localMethods(234) into VariableDeclarationFragment(238) at 0", "Insert MethodInvocation(237) into VariableDeclarationFragment(238) at 1", "Insert SimpleType: Set(241) into ParameterizedType: Set<Field>(244) at 0", "Insert SimpleType: Field(243) into ParameterizedType: Set<Field>(244) at 1", "Insert SimpleName: localFields(245) into VariableDeclarationFragment(249) at 0", "Insert MethodInvocation(248) into VariableDeclarationFragment(249) at 1", "Insert SimpleName: doScanning(251) into MethodInvocation(258) at 0", "Insert SimpleName: basePackages(252) into MethodInvocation(258) at 1", "Insert SimpleName: annotations(253) into MethodInvocation(258) at 2", "Insert SimpleName: localClasses(254) into MethodInvocation(258) at 3", "Insert SimpleName: localConstructors(255) into MethodInvocation(258) at 4", "Insert SimpleName: localMethods(256) into MethodInvocation(258) at 5", "Insert SimpleName: localFields(257) into MethodInvocation(258) at 6", "Insert SimpleName: classes(260) into Assignment: =(265) at 0", "Insert MethodInvocation(264) into Assignment: =(265) at 1", "Insert SimpleName: constructors(267) into Assignment: =(272) at 0", "Insert MethodInvocation(271) into Assignment: =(272) at 1", "Insert SimpleName: methods(274) into Assignment: =(279) at 0", "Insert MethodInvocation(278) into Assignment: =(279) at 1", "Insert SimpleName: fields(281) into Assignment: =(286) at 0", "Insert MethodInvocation(285) into Assignment: =(286) at 1", "Insert SimpleName: log(288) into MethodInvocation(291) at 0", "Insert SimpleName: debug(289) into MethodInvocation(291) at 1", "Insert StringLiteral: \"Classpath scanning done\"(290) into MethodInvocation(291) at 2", "Insert SimpleName: Class(301) into SimpleType: Class(302) at 0", "Insert SimpleName: Collection(347) into SimpleType: Collection(348) at 0", "Insert SimpleName: String(349) into SimpleType: String(350) at 0", "Insert SimpleName: Collection(354) into SimpleType: Collection(355) at 0", "Insert SimpleType: Class(357) into ParameterizedType: Class<? extends Annotation>(361) at 0", "Insert WildcardType: ? extends Annotation(360) into ParameterizedType: Class<? extends Annotation>(361) at 1", "Insert SimpleName: Set(365) into SimpleType: Set(366) at 0", "Insert SimpleType: Class(368) into ParameterizedType: Class<?>(370) at 0", "Insert WildcardType: ?(369) into ParameterizedType: Class<?>(370) at 1", "Insert SimpleName: Set(374) into SimpleType: Set(375) at 0", "Insert SimpleName: Constructor(376) into SimpleType: Constructor(377) at 0", "Insert SimpleName: Set(381) into SimpleType: Set(382) at 0", "Insert SimpleName: Method(383) into SimpleType: Method(384) at 0", "Insert SimpleName: Set(388) into SimpleType: Set(389) at 0", "Insert SimpleName: Field(390) into SimpleType: Field(391) at 0", "Insert MethodInvocation(397) into InfixExpression: ==(399) at 0", "Insert NumberLiteral: 0(398) into InfixExpression: ==(399) at 1", "Insert ExpressionStatement(404) into Block(406) at 0", "Insert ReturnStatement(405) into Block(406) at 1", "Insert VariableDeclarationStatement(418) into Block(541) at 0", "Insert EnhancedForStatement(540) into Block(541) at 1", "Insert SingleVariableDeclaration(545) into CatchClause(552) at 0", "Insert Block(551) into CatchClause(552) at 1", "Insert SimpleName: String(563) into SimpleType: String(564) at 0", "Insert SimpleName: protocol(565) into VariableDeclarationFragment(569) at 0", "Insert MethodInvocation(568) into VariableDeclarationFragment(569) at 1", "Insert MethodInvocation(574) into InfixExpression: ||(579) at 0", "Insert MethodInvocation(578) into InfixExpression: ||(579) at 1", "Insert SimpleName: ClasspathScanner(55) into SimpleType: ClasspathScanner(56) at 0", "Insert SimpleName: Class(128) into SimpleType: Class(129) at 0", "Insert SimpleType: Annotation(131) into WildcardType: ? extends Annotation(132) at 0", "Insert SimpleName: Thread(139) into MethodInvocation(141) at 0", "Insert SimpleName: currentThread(140) into MethodInvocation(141) at 1", "Insert SimpleName: Class(168) into SimpleType: Class(169) at 0", "Insert SimpleType: Annotation(171) into WildcardType: ? extends Annotation(172) at 0", "Insert ThisExpression(199) into FieldAccess(201) at 0", "Insert SimpleName: classLoader(200) into FieldAccess(201) at 1", "Insert SimpleName: Set(205) into SimpleType: Set(206) at 0", "Insert SimpleType: Class(208) into ParameterizedType: Class<?>(210) at 0", "Insert WildcardType: ?(209) into ParameterizedType: Class<?>(210) at 1", "Insert SimpleName: Sets(213) into MethodInvocation(215) at 0", "Insert SimpleName: newHashSet(214) into MethodInvocation(215) at 1", "Insert SimpleName: Set(218) into SimpleType: Set(219) at 0", "Insert SimpleName: Constructor(220) into SimpleType: Constructor(221) at 0", "Insert SimpleName: Sets(224) into MethodInvocation(226) at 0", "Insert SimpleName: newHashSet(225) into MethodInvocation(226) at 1", "Insert SimpleName: Set(229) into SimpleType: Set(230) at 0", "Insert SimpleName: Method(231) into SimpleType: Method(232) at 0", "Insert SimpleName: Sets(235) into MethodInvocation(237) at 0", "Insert SimpleName: newHashSet(236) into MethodInvocation(237) at 1", "Insert SimpleName: Set(240) into SimpleType: Set(241) at 0", "Insert SimpleName: Field(242) into SimpleType: Field(243) at 0", "Insert SimpleName: Sets(246) into MethodInvocation(248) at 0", "Insert SimpleName: newHashSet(247) into MethodInvocation(248) at 1", "Insert SimpleName: ImmutableSet(261) into MethodInvocation(264) at 0", "Insert SimpleName: copyOf(262) into MethodInvocation(264) at 1", "Insert SimpleName: localClasses(263) into MethodInvocation(264) at 2", "Insert SimpleName: ImmutableSet(268) into MethodInvocation(271) at 0", "Insert SimpleName: copyOf(269) into MethodInvocation(271) at 1", "Insert SimpleName: localConstructors(270) into MethodInvocation(271) at 2", "Insert SimpleName: ImmutableSet(275) into MethodInvocation(278) at 0", "Insert SimpleName: copyOf(276) into MethodInvocation(278) at 1", "Insert SimpleName: localMethods(277) into MethodInvocation(278) at 2", "Insert SimpleName: ImmutableSet(282) into MethodInvocation(285) at 0", "Insert SimpleName: copyOf(283) into MethodInvocation(285) at 1", "Insert SimpleName: localFields(284) into MethodInvocation(285) at 2", "Insert SimpleName: Class(356) into SimpleType: Class(357) at 0", "Insert SimpleType: Annotation(359) into WildcardType: ? extends Annotation(360) at 0", "Insert SimpleName: Class(367) into SimpleType: Class(368) at 0", "Insert SimpleName: basePackages(395) into MethodInvocation(397) at 0", "Insert SimpleName: size(396) into MethodInvocation(397) at 1", "Insert MethodInvocation(403) into ExpressionStatement(404) at 0", "Insert ParameterizedType: List<Archive>(412) into VariableDeclarationStatement(418) at 0", "Insert VariableDeclarationFragment(417) into VariableDeclarationStatement(418) at 1", "Insert SingleVariableDeclaration(422) into EnhancedForStatement(540) at 0", "Insert SimpleName: basePackages(423) into EnhancedForStatement(540) at 1", "Insert Block(539) into EnhancedForStatement(540) at 2", "Insert SimpleType: IOException(543) into SingleVariableDeclaration(545) at 0", "Insert SimpleName: e(544) into SingleVariableDeclaration(545) at 1", "Insert ThrowStatement(550) into Block(551) at 0", "Insert SimpleName: url(566) into MethodInvocation(568) at 0", "Insert SimpleName: getProtocol(567) into MethodInvocation(568) at 1", "Insert StringLiteral: \"zip\"(571) into MethodInvocation(574) at 0", "Insert SimpleName: equals(572) into MethodInvocation(574) at 1", "Insert SimpleName: protocol(573) into MethodInvocation(574) at 2", "Insert StringLiteral: \"jar\"(575) into MethodInvocation(578) at 0", "Insert SimpleName: equals(576) into MethodInvocation(578) at 1", "Insert SimpleName: protocol(577) into MethodInvocation(578) at 2", "Insert SimpleName: Annotation(130) into SimpleType: Annotation(131) at 0", "Insert SimpleName: Annotation(170) into SimpleType: Annotation(171) at 0", "Insert SimpleName: Class(207) into SimpleType: Class(208) at 0", "Insert SimpleName: Annotation(358) into SimpleType: Annotation(359) at 0", "Insert SimpleName: log(400) into MethodInvocation(403) at 0", "Insert SimpleName: warn(401) into MethodInvocation(403) at 1", "Insert StringLiteral: \"No base packages specified - no classpath scanning will be done\"(402) into MethodInvocation(403) at 2", "Insert SimpleType: List(409) into ParameterizedType: List<Archive>(412) at 0", "Insert SimpleType: Archive(411) into ParameterizedType: List<Archive>(412) at 1", "Insert SimpleName: archives(413) into VariableDeclarationFragment(417) at 0", "Insert MethodInvocation(416) into VariableDeclarationFragment(417) at 1", "Insert SimpleType: String(420) into SingleVariableDeclaration(422) at 0", "Insert SimpleName: basePackage(421) into SingleVariableDeclaration(422) at 1", "Insert VariableDeclarationStatement(439) into Block(539) at 0", "Insert WhileStatement(477) into Block(539) at 1", "Insert VariableDeclarationStatement(486) into Block(539) at 2", "Insert VariableDeclarationStatement(495) into Block(539) at 3", "Insert EnhancedForStatement(538) into Block(539) at 4", "Insert SimpleName: IOException(542) into SimpleType: IOException(543) at 0", "Insert ClassInstanceCreation(549) into ThrowStatement(550) at 0", "Insert SimpleName: List(408) into SimpleType: List(409) at 0", "Insert SimpleName: Archive(410) into SimpleType: Archive(411) at 0", "Insert SimpleName: Lists(414) into MethodInvocation(416) at 0", "Insert SimpleName: newArrayList(415) into MethodInvocation(416) at 1", "Insert SimpleName: String(419) into SimpleType: String(420) at 0", "Insert ParameterizedType: Enumeration<URL>(428) into VariableDeclarationStatement(439) at 0", "Insert VariableDeclarationFragment(438) into VariableDeclarationStatement(439) at 1", "Insert MethodInvocation(442) into WhileStatement(477) at 0", "Insert Block(476) into WhileStatement(477) at 1", "Insert SimpleType: CompositeArchive(479) into VariableDeclarationStatement(486) at 0", "Insert VariableDeclarationFragment(485) into VariableDeclarationStatement(486) at 1", "Insert SimpleType: AnnotationFinder(488) into VariableDeclarationStatement(495) at 0", "Insert VariableDeclarationFragment(494) into VariableDeclarationStatement(495) at 1", "Insert SingleVariableDeclaration(503) into EnhancedForStatement(538) at 0", "Insert SimpleName: annotations(504) into EnhancedForStatement(538) at 1", "Insert Block(537) into EnhancedForStatement(538) at 2", "Insert SimpleType: RuntimeException(547) into ClassInstanceCreation(549) at 0", "Insert SimpleName: e(548) into ClassInstanceCreation(549) at 1", "Insert SimpleType: Enumeration(425) into ParameterizedType: Enumeration<URL>(428) at 0", "Insert SimpleType: URL(427) into ParameterizedType: Enumeration<URL>(428) at 1", "Insert SimpleName: resources(429) into VariableDeclarationFragment(438) at 0", "Insert MethodInvocation(437) into VariableDeclarationFragment(438) at 1", "Insert SimpleName: resources(440) into MethodInvocation(442) at 0", "Insert SimpleName: hasMoreElements(441) into MethodInvocation(442) at 1", "Insert VariableDeclarationStatement(450) into Block(476) at 0", "Insert IfStatement(475) into Block(476) at 1", "Insert SimpleName: CompositeArchive(478) into SimpleType: CompositeArchive(479) at 0", "Insert SimpleName: compositeArchive(480) into VariableDeclarationFragment(485) at 0", "Insert ClassInstanceCreation(484) into VariableDeclarationFragment(485) at 1", "Insert SimpleName: AnnotationFinder(487) into SimpleType: AnnotationFinder(488) at 0", "Insert SimpleName: annotationFinder(489) into VariableDeclarationFragment(494) at 0", "Insert ClassInstanceCreation(493) into VariableDeclarationFragment(494) at 1", "Insert ParameterizedType: Class<? extends Annotation>(501) into SingleVariableDeclaration(503) at 0", "Insert SimpleName: annotation(502) into SingleVariableDeclaration(503) at 1", "Insert ExpressionStatement(512) into Block(537) at 0", "Insert ExpressionStatement(520) into Block(537) at 1", "Insert ExpressionStatement(528) into Block(537) at 2", "Insert ExpressionStatement(536) into Block(537) at 3", "Insert SimpleName: RuntimeException(546) into SimpleType: RuntimeException(547) at 0", "Insert SimpleName: Enumeration(424) into SimpleType: Enumeration(425) at 0", "Insert SimpleName: URL(426) into SimpleType: URL(427) at 0", "Insert SimpleName: classLoader(430) into MethodInvocation(437) at 0", "Insert SimpleName: getResources(431) into MethodInvocation(437) at 1", "Insert MethodInvocation(436) into MethodInvocation(437) at 2", "Insert SimpleType: URL(444) into VariableDeclarationStatement(450) at 0", "Insert VariableDeclarationFragment(449) into VariableDeclarationStatement(450) at 1", "Insert MethodInvocation(453) into IfStatement(475) at 0", "Insert Block(463) into IfStatement(475) at 1", "Insert Block(474) into IfStatement(475) at 2", "Insert SimpleType: CompositeArchive(482) into ClassInstanceCreation(484) at 0", "Insert SimpleName: archives(483) into ClassInstanceCreation(484) at 1", "Insert SimpleType: AnnotationFinder(491) into ClassInstanceCreation(493) at 0", "Insert SimpleName: compositeArchive(492) into ClassInstanceCreation(493) at 1", "Insert SimpleType: Class(497) into ParameterizedType: Class<? extends Annotation>(501) at 0", "Insert WildcardType: ? extends Annotation(500) into ParameterizedType: Class<? extends Annotation>(501) at 1", "Insert MethodInvocation(511) into ExpressionStatement(512) at 0", "Insert MethodInvocation(519) into ExpressionStatement(520) at 0", "Insert MethodInvocation(527) into ExpressionStatement(528) at 0", "Insert MethodInvocation(535) into ExpressionStatement(536) at 0", "Insert SimpleName: basePackage(432) into MethodInvocation(436) at 0", "Insert SimpleName: replace(433) into MethodInvocation(436) at 1", "Insert StringLiteral: \".\"(434) into MethodInvocation(436) at 2", "Insert StringLiteral: \"/\"(435) into MethodInvocation(436) at 3", "Insert SimpleName: URL(443) into SimpleType: URL(444) at 0", "Insert SimpleName: thisUrl(445) into VariableDeclarationFragment(449) at 0", "Insert MethodInvocation(448) into VariableDeclarationFragment(449) at 1", "Insert SimpleName: isJarURL(451) into MethodInvocation(453) at 0", "Insert SimpleName: thisUrl(452) into MethodInvocation(453) at 1", "Insert ExpressionStatement(462) into Block(463) at 0", "Insert ExpressionStatement(473) into Block(474) at 0", "Insert SimpleName: CompositeArchive(481) into SimpleType: CompositeArchive(482) at 0", "Insert SimpleName: AnnotationFinder(490) into SimpleType: AnnotationFinder(491) at 0", "Insert SimpleName: Class(496) into SimpleType: Class(497) at 0", "Insert SimpleType: Annotation(499) into WildcardType: ? extends Annotation(500) at 0", "Insert SimpleName: localClasses(505) into MethodInvocation(511) at 0", "Insert SimpleName: addAll(506) into MethodInvocation(511) at 1", "Insert MethodInvocation(510) into MethodInvocation(511) at 2", "Insert SimpleName: localConstructors(513) into MethodInvocation(519) at 0", "Insert SimpleName: addAll(514) into MethodInvocation(519) at 1", "Insert MethodInvocation(518) into MethodInvocation(519) at 2", "Insert SimpleName: localMethods(521) into MethodInvocation(527) at 0", "Insert SimpleName: addAll(522) into MethodInvocation(527) at 1", "Insert MethodInvocation(526) into MethodInvocation(527) at 2", "Insert SimpleName: localFields(529) into MethodInvocation(535) at 0", "Insert SimpleName: addAll(530) into MethodInvocation(535) at 1", "Insert MethodInvocation(534) into MethodInvocation(535) at 2", "Insert SimpleName: resources(446) into MethodInvocation(448) at 0", "Insert SimpleName: nextElement(447) into MethodInvocation(448) at 1", "Insert MethodInvocation(461) into ExpressionStatement(462) at 0", "Insert MethodInvocation(472) into ExpressionStatement(473) at 0", "Insert SimpleName: Annotation(498) into SimpleType: Annotation(499) at 0", "Insert SimpleName: annotationFinder(507) into MethodInvocation(510) at 0", "Insert SimpleName: findAnnotatedClasses(508) into MethodInvocation(510) at 1", "Insert SimpleName: annotation(509) into MethodInvocation(510) at 2", "Insert SimpleName: annotationFinder(515) into MethodInvocation(518) at 0", "Insert SimpleName: findAnnotatedConstructors(516) into MethodInvocation(518) at 1", "Insert SimpleName: annotation(517) into MethodInvocation(518) at 2", "Insert SimpleName: annotationFinder(523) into MethodInvocation(526) at 0", "Insert SimpleName: findAnnotatedMethods(524) into MethodInvocation(526) at 1", "Insert SimpleName: annotation(525) into MethodInvocation(526) at 2", "Insert SimpleName: annotationFinder(531) into MethodInvocation(534) at 0", "Insert SimpleName: findAnnotatedFields(532) into MethodInvocation(534) at 1", "Insert SimpleName: annotation(533) into MethodInvocation(534) at 2", "Insert SimpleName: archives(454) into MethodInvocation(461) at 0", "Insert SimpleName: add(455) into MethodInvocation(461) at 1", "Insert ClassInstanceCreation(460) into MethodInvocation(461) at 2", "Insert SimpleName: archives(464) into MethodInvocation(472) at 0", "Insert SimpleName: add(465) into MethodInvocation(472) at 1", "Insert ClassInstanceCreation(471) into MethodInvocation(472) at 2", "Insert SimpleType: JarArchive(457) into ClassInstanceCreation(460) at 0", "Insert SimpleName: classLoader(458) into ClassInstanceCreation(460) at 1", "Insert SimpleName: thisUrl(459) into ClassInstanceCreation(460) at 2", "Insert SimpleType: GovernatorFileArchive(467) into ClassInstanceCreation(471) at 0", "Insert SimpleName: classLoader(468) into ClassInstanceCreation(471) at 1", "Insert SimpleName: thisUrl(469) into ClassInstanceCreation(471) at 2", "Insert SimpleName: basePackage(470) into ClassInstanceCreation(471) at 3", "Insert SimpleName: JarArchive(456) into SimpleType: JarArchive(457) at 0", "Insert SimpleName: GovernatorFileArchive(466) into SimpleType: GovernatorFileArchive(467) at 0", "Delete Modifier: abstract(11)", "Delete SimpleName: ClasspathScanner(12)", "Delete Modifier: abstract(14)", "Delete SimpleName: getClasses(22)", "Delete MethodDeclaration(32)", "Delete Modifier: abstract(34)", "Delete Modifier: abstract(43)"]}}, {"ConfigurationProcessor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 17", "MOV ImportDeclaration to CompilationUnit at 12", "MOV ImportDeclaration to CompilationUnit at 17", "MOV ImportDeclaration to CompilationUnit at 12", "MOV ImportDeclaration to CompilationUnit at 17", "MOV ImportDeclaration to CompilationUnit at 17", "MOV ImportDeclaration to CompilationUnit at 17"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: org.apache.commons.configuration.ConversionException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "UPDATE from Exception to ConversionException", "operations": ["UPD SimpleName: Exception from Exception to ConversionException", "UPD SimpleType: Exception from Exception to ConversionException"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}]}}, {"ConfigurationProcessor_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(895) at 17", "Move ImportDeclaration(5) into CompilationUnit(895) at 17", "Move ImportDeclaration(7) into CompilationUnit(895) at 17", "Move ImportDeclaration(9) into CompilationUnit(895) at 17", "Move ImportDeclaration(11) into CompilationUnit(895) at 17", "Move ImportDeclaration(13) into CompilationUnit(895) at 12", "Move ImportDeclaration(15) into CompilationUnit(895) at 12", "Insert ImportDeclaration(21) into CompilationUnit(895) at 10", "Insert QualifiedName: org.apache.commons.configuration.ConversionException(20) into ImportDeclaration(21) at 0", "Update SimpleType: Exception(491) to ConversionException", "Update SimpleName: Exception(490) to ConversionException", "Delete SimpleName: Deprecated(34)", "Delete MarkerAnnotation(35)"]}}, {"DefaultClasspathScanner_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.Annotation", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Constructor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Field", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.net.URL", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Enumeration", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Set"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.xbean.finder.AnnotationFinder", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.xbean.finder.archive.Archive", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.xbean.finder.archive.CompositeArchive", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.xbean.finder.archive.JarArchive"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.Logger", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.LoggerFactory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.ImmutableSet", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.Lists", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.Sets", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: e", "DEL Assignment: =", "DEL SimpleName: newHashSet", "DEL SimpleName: annotations", "DEL SimpleName: Set", "DEL SingleVariableDeclaration", "DEL SimpleName: basePackages", "DEL SimpleName: Method", "DEL SimpleName: Thread", "DEL SimpleName: localConstructors", "DEL SimpleName: classLoader", "DEL FieldDeclaration", "DEL SimpleName: newHashSet", "DEL SimpleName: thisUrl", "DEL Javadoc", "DEL MethodInvocation", "DEL ParameterizedType: Set<Constructor>", "DEL SimpleName: constructors", "DEL Modifier: final", "DEL Block", "DEL TypeLiteral", "DEL SimpleName: Set", "DEL SimpleName: size", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: classLoader", "DEL SimpleName: url", "DEL SimpleName: getFields", "DEL PrimitiveType: boolean", "DEL TagElement: @return", "DEL MethodInvocation", "DEL SimpleName: doScanning", "DEL SimpleName: debug", "DEL VariableDeclarationFragment", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: localConstructors", "DEL SimpleName: archives", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Set", "DEL VariableDeclarationStatement", "DEL SimpleName: Set", "DEL SimpleType: Set", "DEL Modifier: public", "DEL SimpleType: Collection", "DEL SimpleType: Constructor", "DEL SimpleName: log", "DEL Block", "DEL SimpleType: CompositeArchive", "DEL SimpleName: localMethods", "DEL TagElement: @param", "DEL SimpleName: localMethods", "DEL StringLiteral: \"additionalAnnotations cannot be null\"", "DEL SimpleType: JarArchive", "DEL SimpleName: Set", "DEL ThrowStatement", "DEL ThisExpression", "DEL ParameterizedType: Set<Class<?>>", "DEL SimpleName: annotationFinder", "DEL SimpleName: basePackages", "DEL MarkerAnnotation", "DEL ParameterizedType: Set<Field>", "DEL ParameterizedType: Set<Class<?>>", "DEL SimpleName: basePackages", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL SimpleName: resources", "DEL SimpleName: Constructor", "DEL IfStatement", "DEL Modifier: protected", "DEL SimpleType: Set", "DEL SimpleName: Collection", "DEL SimpleName: equals", "DEL ParameterizedType: Set<Field>", "DEL MethodInvocation", "DEL Modifier: private", "DEL ParameterizedType: Set<Method>", "DEL SimpleType: Annotation", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL InfixExpression: ||", "DEL IfStatement", "DEL SimpleName: Sets", "DEL SimpleName: Annotation", "DEL SimpleName: IOException", "DEL MethodDeclaration", "DEL SimpleName: localClasses", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL FieldDeclaration", "DEL ParameterizedType: Collection<String>", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: getResources", "DEL SimpleName: debug", "DEL SimpleName: Enumeration", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: resources", "DEL SimpleName: findAnnotatedConstructors", "DEL SimpleName: localFields", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL ParameterizedType: Set<Method>", "DEL SimpleName: fields", "DEL SimpleName: Collection", "DEL MethodInvocation", "DEL SimpleType: Archive", "DEL SimpleType: Set", "DEL SimpleName: copyOf", "DEL SimpleName: annotations", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: DefaultClasspathScanner", "DEL CatchClause", "DEL SimpleType: List", "DEL SimpleName: add", "DEL SimpleName: getClasses", "DEL SimpleName: String", "DEL Assignment: =", "DEL StringLiteral: \"jar\"", "DEL SimpleType: Method", "DEL SimpleName: addAll", "DEL SimpleName: basePackage", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: Sets", "DEL SimpleName: String", "DEL SimpleName: JarArchive", "DEL SimpleName: getConstructors", "DEL SimpleName: classLoader", "DEL MethodInvocation", "DEL SimpleType: GovernatorFileArchive", "DEL SimpleName: ClassLoader", "DEL MethodInvocation", "DEL SimpleName: basePackages", "DEL Modifier: protected", "DEL SimpleType: Method", "DEL SimpleName: annotations", "DEL WildcardType: ?", "DEL SimpleName: CompositeArchive", "DEL TextElement: Utility to find annotated classes", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: getProtocol", "DEL SimpleName: nextElement", "DEL SimpleName: thisUrl", "DEL SimpleType: Set", "DEL SimpleName: Set", "DEL SimpleType: Collection", "DEL SimpleName: Class", "DEL SimpleType: Field", "DEL VariableDeclarationFragment", "DEL Block", "DEL ParameterizedType: Set<Constructor>", "DEL SimpleName: isJarURL", "DEL ParameterizedType: Set<Method>", "DEL SimpleName: localClasses", "DEL SimpleName: methods", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: Set", "DEL Modifier: private", "DEL SimpleName: addAll", "DEL SimpleName: Collection", "DEL SimpleType: Set", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"Classpath scanning done\"", "DEL TextElement:  class annotations to search for", "DEL MethodDeclaration", "DEL SimpleName: Class", "DEL ParameterizedType: Class<?>", "DEL ClassInstanceCreation", "DEL SimpleName: annotation", "DEL SimpleType: ClasspathScanner", "DEL SimpleType: CompositeArchive", "DEL ExpressionStatement", "DEL ParameterizedType: Set<Class<?>>", "DEL StringLiteral: \"/\"", "DEL Javadoc", "DEL SimpleName: annotationFinder", "DEL SimpleType: URL", "DEL Assignment: =", "DEL SimpleName: newArrayList", "DEL SimpleType: Set", "DEL SimpleName: ImmutableSet", "DEL SimpleType: Collection", "DEL SimpleName: protocol", "DEL SimpleType: String", "DEL ParameterizedType: Class<?>", "DEL ReturnStatement", "DEL SimpleName: constructors", "DEL SimpleName: basePackages", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Collection", "DEL SimpleName: annotations", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: localFields", "DEL SimpleName: isJarURL", "DEL SimpleName: localMethods", "DEL VariableDeclarationFragment", "DEL EnhancedForStatement", "DEL ExpressionStatement", "DEL SimpleType: Set", "DEL SimpleName: annotationFinder", "DEL SimpleName: annotations", "DEL SimpleType: URL", "DEL SimpleName: Field", "DEL StringLiteral: \"Starting classpath scanning...\"", "DEL Block", "DEL SimpleType: Set", "DEL SimpleName: classes", "DEL MethodDeclaration", "DEL SimpleName: hasMoreElements", "DEL VariableDeclarationFragment", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: Set", "DEL SimpleName: AnnotationFinder", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: compositeArchive", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL SimpleName: findAnnotatedClasses", "DEL Modifier: static", "DEL SimpleName: add", "DEL SimpleName: equals", "DEL SimpleName: annotation", "DEL SimpleType: Constructor", "DEL WildcardType: ? extends Annotation", "DEL Modifier: public", "DEL SimpleName: Field", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleType: Field", "DEL ExpressionStatement", "DEL SimpleType: Set", "DEL SimpleType: Set", "DEL SimpleType: Annotation", "DEL SimpleType: String", "DEL SimpleName: basePackages", "DEL SimpleName: annotations", "DEL ParameterizedType: Collection<String>", "DEL SimpleName: basePackage", "DEL SimpleName: localFields", "DEL SimpleName: localClasses", "DEL SimpleType: String", "DEL SimpleType: Class", "DEL SimpleName: classes", "DEL SimpleName: Set", "DEL ParameterizedType: Set<Field>", "DEL SimpleName: basePackages", "DEL ParameterizedType: Collection<String>", "DEL SimpleName: List", "DEL SimpleName: URL", "DEL SimpleName: ImmutableSet", "DEL SimpleType: ClassLoader", "DEL SimpleName: Field", "DEL TryStatement", "DEL ParameterizedType: Class<? extends Annotation>", "DEL TypeDeclaration: class", "DEL VariableDeclarationFragment", "DEL SimpleName: ClassLoader", "DEL MethodDeclaration", "DEL SimpleType: Class", "DEL SimpleType: Collection", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL FieldAccess", "DEL SimpleName: getMethods", "DEL SimpleName: annotationFinder", "DEL SimpleType: Enumeration", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: Set", "DEL SimpleName: Method", "DEL SimpleType: Set", "DEL SimpleName: Preconditions", "DEL TagElement: @param", "DEL SimpleName: Preconditions", "DEL SimpleName: methods", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: basePackages", "DEL SimpleName: Set", "DEL StringLiteral: \".\"", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: Logger", "DEL ParameterizedType: Set<Constructor>", "DEL SimpleName: localClasses", "DEL TextElement:  the found classes", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: checkNotNull", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: String", "DEL ParameterizedType: Set<Class<?>>", "DEL Modifier: final", "DEL SimpleName: annotation", "DEL SimpleType: Field", "DEL SimpleName: localConstructors", "DEL ReturnStatement", "DEL TextElement:  list of packages to search (recursively)", "DEL SimpleType: Field", "DEL SimpleName: Override", "DEL ParameterizedType: List<Archive>", "DEL EnhancedForStatement", "DEL SimpleName: annotations", "DEL ClassInstanceCreation", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SingleVariableDeclaration", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL SimpleName: classLoader", "DEL Modifier: final", "DEL SimpleType: Annotation", "DEL SimpleName: log", "DEL SimpleName: addAll", "DEL VariableDeclarationFragment", "DEL SimpleName: Collection", "DEL SimpleType: ClasspathScanner", "DEL WildcardType: ?", "DEL Block", "DEL SimpleName: CompositeArchive", "DEL SimpleName: Logger", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: archives", "DEL SimpleName: archives", "DEL SimpleType: Class", "DEL SimpleName: newHashSet", "DEL SimpleType: Set", "DEL SimpleName: resources", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL ParameterizedType: Set<Method>", "DEL SimpleName: thisUrl", "DEL SimpleName: Method", "DEL ParameterizedType: Set<Field>", "DEL SimpleName: copyOf", "DEL SimpleName: Class", "DEL SimpleName: findAnnotatedMethods", "DEL Modifier: final", "DEL SimpleName: annotation", "DEL MarkerAnnotation", "DEL SimpleType: Method", "DEL SimpleName: classLoader", "DEL Javadoc", "DEL SimpleName: Collection", "DEL SimpleName: thisUrl", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL ParameterizedType: Class<?>", "DEL SimpleName: String", "DEL SimpleType: String", "DEL SimpleName: annotation", "DEL SimpleName: e", "DEL SimpleName: archives", "DEL VariableDeclarationStatement", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL SimpleName: copyOf", "DEL SimpleName: Annotation", "DEL SimpleName: getContextClassLoader", "DEL SimpleName: classLoader", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SimpleName: Constructor", "DEL VariableDeclarationFragment", "DEL SimpleName: doScanning", "DEL SingleVariableDeclaration", "DEL SimpleName: localFields", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL SimpleName: Class", "DEL SimpleName: log", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: classes", "DEL SimpleType: Set", "DEL ExpressionStatement", "DEL ParameterizedType: Set<Constructor>", "DEL Assignment: =", "DEL SimpleName: localConstructors", "DEL TextElement:  ClassLoader containing the classes to be scanned", "DEL SimpleName: Method", "DEL ReturnStatement", "DEL SimpleType: Annotation", "DEL StringLiteral: \"No base packages specified - no classpath scanning will be done\"", "DEL SimpleType: RuntimeException", "DEL SimpleName: annotations", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL SimpleName: classLoader", "DEL SimpleName: basePackage", "DEL MethodInvocation", "DEL SimpleType: Constructor", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: url", "DEL SimpleName: Set", "DEL ExpressionStatement", "DEL SimpleName: fields", "DEL SimpleType: Class", "DEL Block", "DEL SimpleName: getLogger", "DEL SimpleName: ClasspathScanner", "DEL SimpleName: Class", "DEL SimpleName: annotationFinder", "DEL SimpleName: RuntimeException", "DEL SimpleType: ClassLoader", "DEL Block", "DEL Modifier: public", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: ImmutableSet", "DEL VariableDeclarationFragment", "DEL Block", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL FieldDeclaration", "DEL SimpleName: log", "DEL SimpleName: classLoader", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleType: Set", "DEL SimpleType: Set", "DEL ParameterizedType: Class<?>", "DEL VariableDeclarationStatement", "DEL SimpleName: protocol", "DEL MethodDeclaration", "DEL SimpleName: warn", "DEL SimpleName: localMethods", "DEL MarkerAnnotation", "DEL TextElement:  class annotations to search for", "DEL MethodInvocation", "DEL TextElement:  list of packages to search (recursively)", "DEL SimpleName: protocol", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Annotation", "DEL SimpleType: URL", "DEL ExpressionStatement", "DEL SimpleName: replace", "DEL SimpleName: Field", "DEL SimpleName: LoggerFactory", "DEL SimpleName: localMethods", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: DefaultClasspathScanner", "DEL ReturnStatement", "DEL SimpleName: checkNotNull", "DEL SimpleName: Override", "DEL SimpleName: Sets", "DEL StringLiteral: \"zip\"", "DEL SimpleName: Set", "DEL SimpleName: Set", "DEL SimpleName: Set", "DEL Block", "DEL SimpleType: Collection", "DEL MethodInvocation", "DEL Modifier: private", "DEL InfixExpression: ==", "DEL ConstructorInvocation", "DEL SimpleName: URL", "DEL SimpleName: Override", "DEL SimpleName: addAll", "DEL MethodDeclaration", "DEL SimpleName: ClasspathScanner", "DEL SimpleName: Set", "DEL PrimitiveType: void", "DEL Modifier: final", "DEL WildcardType: ?", "DEL SimpleType: Class", "DEL SimpleName: Lists", "DEL SimpleName: Sets", "DEL SimpleName: Class", "DEL SimpleName: annotations", "DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL Modifier: final", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL SimpleName: localFields", "DEL SimpleName: DefaultClasspathScanner", "DEL VariableDeclarationFragment", "DEL SimpleName: Set", "DEL VariableDeclarationFragment", "DEL WhileStatement", "DEL Modifier: private", "DEL Block", "DEL MarkerAnnotation", "DEL VariableDeclarationFragment", "DEL SimpleName: localConstructors", "DEL MethodInvocation", "DEL SimpleName: classLoader", "DEL SimpleName: Constructor", "DEL SimpleType: Class", "DEL SimpleName: Class", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: compositeArchive", "DEL MethodInvocation", "DEL SimpleName: fields", "DEL SimpleName: Archive", "DEL Modifier: private", "DEL SimpleName: constructors", "DEL SimpleName: currentThread", "DEL FieldDeclaration", "DEL SimpleType: Constructor", "DEL ClassInstanceCreation", "DEL SimpleName: URL", "DEL SimpleName: Constructor", "DEL ParameterizedType: Enumeration<URL>", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleType: Collection", "DEL SimpleName: AnnotationFinder", "DEL SimpleName: localClasses", "DEL MethodInvocation", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: ImmutableSet", "DEL FieldDeclaration", "DEL SimpleType: Method", "DEL StringLiteral: \"classLoader cannot be null\"", "DEL SimpleType: AnnotationFinder", "DEL MethodInvocation", "DEL SimpleName: GovernatorFileArchive", "DEL SimpleName: basePackages", "DEL SimpleName: findAnnotatedFields", "DEL VariableDeclarationStatement", "DEL SimpleName: newHashSet", "DEL SimpleType: AnnotationFinder", "DEL SimpleName: copyOf", "DEL SimpleName: methods", "DEL MethodInvocation", "DEL SimpleName: Annotation"]}]}}, {"DefaultClasspathScanner_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.io.IOException(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.annotation.Annotation(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Constructor(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.lang.reflect.Field(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.lang.reflect.Method(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.net.URL(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.Collection(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Enumeration(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.List(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: java.util.Set(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: org.apache.xbean.finder.AnnotationFinder(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: org.apache.xbean.finder.archive.Archive(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: org.apache.xbean.finder.archive.CompositeArchive(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: org.apache.xbean.finder.archive.JarArchive(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: org.slf4j.Logger(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: org.slf4j.LoggerFactory(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: com.google.common.base.Preconditions(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.google.common.collect.ImmutableSet(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: com.google.common.collect.Lists(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: com.google.common.collect.Sets(40)", "Delete ImportDeclaration(41)", "Delete TextElement: Utility to find annotated classes(42)", "Delete TagElement(43)", "Delete Javadoc(44)", "Delete Modifier: public(45)", "Delete SimpleName: DefaultClasspathScanner(46)", "Delete SimpleName: ClasspathScanner(47)", "Delete SimpleType: ClasspathScanner(48)", "Delete Modifier: private(49)", "Delete Modifier: static(50)", "Delete Modifier: final(51)", "Delete SimpleName: Logger(52)", "Delete SimpleType: Logger(53)", "Delete SimpleName: log(54)", "Delete SimpleName: LoggerFactory(55)", "Delete SimpleName: getLogger(56)", "Delete SimpleName: ClasspathScanner(57)", "Delete SimpleType: ClasspathScanner(58)", "Delete TypeLiteral(59)", "Delete MethodInvocation(60)", "Delete VariableDeclarationFragment(61)", "Delete FieldDeclaration(62)", "Delete Modifier: protected(63)", "Delete Modifier: final(64)", "Delete SimpleName: ClassLoader(65)", "Delete SimpleType: ClassLoader(66)", "Delete SimpleName: classLoader(67)", "Delete VariableDeclarationFragment(68)", "Delete FieldDeclaration(69)", "Delete Modifier: private(70)", "Delete Modifier: final(71)", "Delete SimpleName: Set(72)", "Delete SimpleType: Set(73)", "Delete SimpleName: Class(74)", "Delete SimpleType: Class(75)", "Delete WildcardType: ?(76)", "Delete ParameterizedType: Class<?>(77)", "Delete ParameterizedType: Set<Class<?>>(78)", "Delete SimpleName: classes(79)", "Delete VariableDeclarationFragment(80)", "Delete FieldDeclaration(81)", "Delete Modifier: private(82)", "Delete Modifier: final(83)", "Delete SimpleName: Set(84)", "Delete SimpleType: Set(85)", "Delete SimpleName: Constructor(86)", "Delete SimpleType: Constructor(87)", "Delete ParameterizedType: Set<Constructor>(88)", "Delete SimpleName: constructors(89)", "Delete VariableDeclarationFragment(90)", "Delete FieldDeclaration(91)", "Delete Modifier: private(92)", "Delete Modifier: final(93)", "Delete SimpleName: Set(94)", "Delete SimpleType: Set(95)", "Delete SimpleName: Method(96)", "Delete SimpleType: Method(97)", "Delete ParameterizedType: Set<Method>(98)", "Delete SimpleName: methods(99)", "Delete VariableDeclarationFragment(100)", "Delete FieldDeclaration(101)", "Delete Modifier: private(102)", "Delete Modifier: final(103)", "Delete SimpleName: Set(104)", "Delete SimpleType: Set(105)", "Delete SimpleName: Field(106)", "Delete SimpleType: Field(107)", "Delete ParameterizedType: Set<Field>(108)", "Delete SimpleName: fields(109)", "Delete VariableDeclarationFragment(110)", "Delete FieldDeclaration(111)", "Delete SimpleName: basePackages(112)", "Delete TextElement:  list of packages to search (recursively)(113)", "Delete TagElement: @param(114)", "Delete SimpleName: annotations(115)", "Delete TextElement:  class annotations to search for(116)", "Delete TagElement: @param(117)", "Delete Javadoc(118)", "Delete Modifier: public(119)", "Delete SimpleName: DefaultClasspathScanner(120)", "Delete SimpleName: Collection(121)", "Delete SimpleType: Collection(122)", "Delete SimpleName: String(123)", "Delete SimpleType: String(124)", "Delete ParameterizedType: Collection<String>(125)", "Delete SimpleName: basePackages(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: Collection(128)", "Delete SimpleType: Collection(129)", "Delete SimpleName: Class(130)", "Delete SimpleType: Class(131)", "Delete SimpleName: Annotation(132)", "Delete SimpleType: Annotation(133)", "Delete WildcardType: ? extends Annotation(134)", "Delete ParameterizedType: Class<? extends Annotation>(135)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(136)", "Delete SimpleName: annotations(137)", "Delete SingleVariableDeclaration(138)", "Delete SimpleName: basePackages(139)", "Delete SimpleName: annotations(140)", "Delete SimpleName: Thread(141)", "Delete SimpleName: currentThread(142)", "Delete MethodInvocation(143)", "Delete SimpleName: getContextClassLoader(144)", "Delete MethodInvocation(145)", "Delete ConstructorInvocation(146)", "Delete Block(147)", "Delete MethodDeclaration(148)", "Delete SimpleName: basePackages(149)", "Delete TextElement:  list of packages to search (recursively)(150)", "Delete TagElement: @param(151)", "Delete SimpleName: annotations(152)", "Delete TextElement:  class annotations to search for(153)", "Delete TagElement: @param(154)", "Delete SimpleName: classLoader(155)", "Delete TextElement:  ClassLoader containing the classes to be scanned(156)", "Delete TagElement: @param(157)", "Delete Javadoc(158)", "Delete Modifier: public(159)", "Delete SimpleName: DefaultClasspathScanner(160)", "Delete SimpleName: Collection(161)", "Delete SimpleType: Collection(162)", "Delete SimpleName: String(163)", "Delete SimpleType: String(164)", "Delete ParameterizedType: Collection<String>(165)", "Delete SimpleName: basePackages(166)", "Delete SingleVariableDeclaration(167)", "Delete SimpleName: Collection(168)", "Delete SimpleType: Collection(169)", "Delete SimpleName: Class(170)", "Delete SimpleType: Class(171)", "Delete SimpleName: Annotation(172)", "Delete SimpleType: Annotation(173)", "Delete WildcardType: ? extends Annotation(174)", "Delete ParameterizedType: Class<? extends Annotation>(175)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(176)", "Delete SimpleName: annotations(177)", "Delete SingleVariableDeclaration(178)", "Delete Modifier: final(179)", "Delete SimpleName: ClassLoader(180)", "Delete SimpleType: ClassLoader(181)", "Delete SimpleName: classLoader(182)", "Delete SingleVariableDeclaration(183)", "Delete SimpleName: Preconditions(184)", "Delete SimpleName: checkNotNull(185)", "Delete SimpleName: annotations(186)", "Delete StringLiteral: \"additionalAnnotations cannot be null\"(187)", "Delete MethodInvocation(188)", "Delete ExpressionStatement(189)", "Delete SimpleName: Preconditions(190)", "Delete SimpleName: checkNotNull(191)", "Delete SimpleName: classLoader(192)", "Delete StringLiteral: \"classLoader cannot be null\"(193)", "Delete MethodInvocation(194)", "Delete ExpressionStatement(195)", "Delete SimpleName: log(196)", "Delete SimpleName: debug(197)", "Delete StringLiteral: \"Starting classpath scanning...\"(198)", "Delete MethodInvocation(199)", "Delete ExpressionStatement(200)", "Delete ThisExpression(201)", "Delete SimpleName: classLoader(202)", "Delete FieldAccess(203)", "Delete SimpleName: classLoader(204)", "Delete Assignment: =(205)", "Delete ExpressionStatement(206)", "Delete SimpleName: Set(207)", "Delete SimpleType: Set(208)", "Delete SimpleName: Class(209)", "Delete SimpleType: Class(210)", "Delete WildcardType: ?(211)", "Delete ParameterizedType: Class<?>(212)", "Delete ParameterizedType: Set<Class<?>>(213)", "Delete SimpleName: localClasses(214)", "Delete SimpleName: Sets(215)", "Delete SimpleName: newHashSet(216)", "Delete MethodInvocation(217)", "Delete VariableDeclarationFragment(218)", "Delete VariableDeclarationStatement(219)", "Delete SimpleName: Set(220)", "Delete SimpleType: Set(221)", "Delete SimpleName: Constructor(222)", "Delete SimpleType: Constructor(223)", "Delete ParameterizedType: Set<Constructor>(224)", "Delete SimpleName: localConstructors(225)", "Delete SimpleName: Sets(226)", "Delete SimpleName: newHashSet(227)", "Delete MethodInvocation(228)", "Delete VariableDeclarationFragment(229)", "Delete VariableDeclarationStatement(230)", "Delete SimpleName: Set(231)", "Delete SimpleType: Set(232)", "Delete SimpleName: Method(233)", "Delete SimpleType: Method(234)", "Delete ParameterizedType: Set<Method>(235)", "Delete SimpleName: localMethods(236)", "Delete SimpleName: Sets(237)", "Delete SimpleName: newHashSet(238)", "Delete MethodInvocation(239)", "Delete VariableDeclarationFragment(240)", "Delete VariableDeclarationStatement(241)", "Delete SimpleName: Set(242)", "Delete SimpleType: Set(243)", "Delete SimpleName: Field(244)", "Delete SimpleType: Field(245)", "Delete ParameterizedType: Set<Field>(246)", "Delete SimpleName: localFields(247)", "Delete SimpleName: Sets(248)", "Delete SimpleName: newHashSet(249)", "Delete MethodInvocation(250)", "Delete VariableDeclarationFragment(251)", "Delete VariableDeclarationStatement(252)", "Delete SimpleName: doScanning(253)", "Delete SimpleName: basePackages(254)", "Delete SimpleName: annotations(255)", "Delete SimpleName: localClasses(256)", "Delete SimpleName: localConstructors(257)", "Delete SimpleName: localMethods(258)", "Delete SimpleName: localFields(259)", "Delete MethodInvocation(260)", "Delete ExpressionStatement(261)", "Delete SimpleName: classes(262)", "Delete SimpleName: ImmutableSet(263)", "Delete SimpleName: copyOf(264)", "Delete SimpleName: localClasses(265)", "Delete MethodInvocation(266)", "Delete Assignment: =(267)", "Delete ExpressionStatement(268)", "Delete SimpleName: constructors(269)", "Delete SimpleName: ImmutableSet(270)", "Delete SimpleName: copyOf(271)", "Delete SimpleName: localConstructors(272)", "Delete MethodInvocation(273)", "Delete Assignment: =(274)", "Delete ExpressionStatement(275)", "Delete SimpleName: methods(276)", "Delete SimpleName: ImmutableSet(277)", "Delete SimpleName: copyOf(278)", "Delete SimpleName: localMethods(279)", "Delete MethodInvocation(280)", "Delete Assignment: =(281)", "Delete ExpressionStatement(282)", "Delete SimpleName: fields(283)", "Delete SimpleName: ImmutableSet(284)", "Delete SimpleName: copyOf(285)", "Delete SimpleName: localFields(286)", "Delete MethodInvocation(287)", "Delete Assignment: =(288)", "Delete ExpressionStatement(289)", "Delete SimpleName: log(290)", "Delete SimpleName: debug(291)", "Delete StringLiteral: \"Classpath scanning done\"(292)", "Delete MethodInvocation(293)", "Delete ExpressionStatement(294)", "Delete Block(295)", "Delete MethodDeclaration(296)", "Delete TextElement:  the found classes(297)", "Delete TagElement: @return(298)", "Delete Javadoc(299)", "Delete SimpleName: Override(300)", "Delete MarkerAnnotation(301)", "Delete Modifier: public(302)", "Delete SimpleName: Set(303)", "Delete SimpleType: Set(304)", "Delete SimpleName: Class(305)", "Delete SimpleType: Class(306)", "Delete WildcardType: ?(307)", "Delete ParameterizedType: Class<?>(308)", "Delete ParameterizedType: Set<Class<?>>(309)", "Delete SimpleName: getClasses(310)", "Delete SimpleName: classes(311)", "Delete ReturnStatement(312)", "Delete Block(313)", "Delete MethodDeclaration(314)", "Delete SimpleName: Override(315)", "Delete MarkerAnnotation(316)", "Delete Modifier: public(317)", "Delete SimpleName: Set(318)", "Delete SimpleType: Set(319)", "Delete SimpleName: Constructor(320)", "Delete SimpleType: Constructor(321)", "Delete ParameterizedType: Set<Constructor>(322)", "Delete SimpleName: getConstructors(323)", "Delete SimpleName: constructors(324)", "Delete ReturnStatement(325)", "Delete Block(326)", "Delete MethodDeclaration(327)", "Delete SimpleName: Override(328)", "Delete MarkerAnnotation(329)", "Delete Modifier: public(330)", "Delete SimpleName: Set(331)", "Delete SimpleType: Set(332)", "Delete SimpleName: Method(333)", "Delete SimpleType: Method(334)", "Delete ParameterizedType: Set<Method>(335)", "Delete SimpleName: getMethods(336)", "Delete SimpleName: methods(337)", "Delete ReturnStatement(338)", "Delete Block(339)", "Delete MethodDeclaration(340)", "Delete SimpleName: Override(341)", "Delete MarkerAnnotation(342)", "Delete Modifier: public(343)", "Delete SimpleName: Set(344)", "Delete SimpleType: Set(345)", "Delete SimpleName: Field(346)", "Delete SimpleType: Field(347)", "Delete ParameterizedType: Set<Field>(348)", "Delete SimpleName: getFields(349)", "Delete SimpleName: fields(350)", "Delete ReturnStatement(351)", "Delete Block(352)", "Delete MethodDeclaration(353)", "Delete Modifier: protected(354)", "Delete PrimitiveType: void(355)", "Delete SimpleName: doScanning(356)", "Delete SimpleName: Collection(357)", "Delete SimpleType: Collection(358)", "Delete SimpleName: String(359)", "Delete SimpleType: String(360)", "Delete ParameterizedType: Collection<String>(361)", "Delete SimpleName: basePackages(362)", "Delete SingleVariableDeclaration(363)", "Delete SimpleName: Collection(364)", "Delete SimpleType: Collection(365)", "Delete SimpleName: Class(366)", "Delete SimpleType: Class(367)", "Delete SimpleName: Annotation(368)", "Delete SimpleType: Annotation(369)", "Delete WildcardType: ? extends Annotation(370)", "Delete ParameterizedType: Class<? extends Annotation>(371)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(372)", "Delete SimpleName: annotations(373)", "Delete SingleVariableDeclaration(374)", "Delete SimpleName: Set(375)", "Delete SimpleType: Set(376)", "Delete SimpleName: Class(377)", "Delete SimpleType: Class(378)", "Delete WildcardType: ?(379)", "Delete ParameterizedType: Class<?>(380)", "Delete ParameterizedType: Set<Class<?>>(381)", "Delete SimpleName: localClasses(382)", "Delete SingleVariableDeclaration(383)", "Delete SimpleName: Set(384)", "Delete SimpleType: Set(385)", "Delete SimpleName: Constructor(386)", "Delete SimpleType: Constructor(387)", "Delete ParameterizedType: Set<Constructor>(388)", "Delete SimpleName: localConstructors(389)", "Delete SingleVariableDeclaration(390)", "Delete SimpleName: Set(391)", "Delete SimpleType: Set(392)", "Delete SimpleName: Method(393)", "Delete SimpleType: Method(394)", "Delete ParameterizedType: Set<Method>(395)", "Delete SimpleName: localMethods(396)", "Delete SingleVariableDeclaration(397)", "Delete SimpleName: Set(398)", "Delete SimpleType: Set(399)", "Delete SimpleName: Field(400)", "Delete SimpleType: Field(401)", "Delete ParameterizedType: Set<Field>(402)", "Delete SimpleName: localFields(403)", "Delete SingleVariableDeclaration(404)", "Delete SimpleName: basePackages(405)", "Delete SimpleName: size(406)", "Delete MethodInvocation(407)", "Delete NumberLiteral: 0(408)", "Delete InfixExpression: ==(409)", "Delete SimpleName: log(410)", "Delete SimpleName: warn(411)", "Delete StringLiteral: \"No base packages specified - no classpath scanning will be done\"(412)", "Delete MethodInvocation(413)", "Delete ExpressionStatement(414)", "Delete ReturnStatement(415)", "Delete Block(416)", "Delete IfStatement(417)", "Delete SimpleName: List(418)", "Delete SimpleType: List(419)", "Delete SimpleName: Archive(420)", "Delete SimpleType: Archive(421)", "Delete ParameterizedType: List<Archive>(422)", "Delete SimpleName: archives(423)", "Delete SimpleName: Lists(424)", "Delete SimpleName: newArrayList(425)", "Delete MethodInvocation(426)", "Delete VariableDeclarationFragment(427)", "Delete VariableDeclarationStatement(428)", "Delete SimpleName: String(429)", "Delete SimpleType: String(430)", "Delete SimpleName: basePackage(431)", "Delete SingleVariableDeclaration(432)", "Delete SimpleName: basePackages(433)", "Delete SimpleName: Enumeration(434)", "Delete SimpleType: Enumeration(435)", "Delete SimpleName: URL(436)", "Delete SimpleType: URL(437)", "Delete ParameterizedType: Enumeration<URL>(438)", "Delete SimpleName: resources(439)", "Delete SimpleName: classLoader(440)", "Delete SimpleName: getResources(441)", "Delete SimpleName: basePackage(442)", "Delete SimpleName: replace(443)", "Delete StringLiteral: \".\"(444)", "Delete StringLiteral: \"/\"(445)", "Delete MethodInvocation(446)", "Delete MethodInvocation(447)", "Delete VariableDeclarationFragment(448)", "Delete VariableDeclarationStatement(449)", "Delete SimpleName: resources(450)", "Delete SimpleName: hasMoreElements(451)", "Delete MethodInvocation(452)", "Delete SimpleName: URL(453)", "Delete SimpleType: URL(454)", "Delete SimpleName: thisUrl(455)", "Delete SimpleName: resources(456)", "Delete SimpleName: nextElement(457)", "Delete MethodInvocation(458)", "Delete VariableDeclarationFragment(459)", "Delete VariableDeclarationStatement(460)", "Delete SimpleName: isJarURL(461)", "Delete SimpleName: thisUrl(462)", "Delete MethodInvocation(463)", "Delete SimpleName: archives(464)", "Delete SimpleName: add(465)", "Delete SimpleName: JarArchive(466)", "Delete SimpleType: JarArchive(467)", "Delete SimpleName: classLoader(468)", "Delete SimpleName: thisUrl(469)", "Delete ClassInstanceCreation(470)", "Delete MethodInvocation(471)", "Delete ExpressionStatement(472)", "Delete Block(473)", "Delete SimpleName: archives(474)", "Delete SimpleName: add(475)", "Delete SimpleName: GovernatorFileArchive(476)", "Delete SimpleType: GovernatorFileArchive(477)", "Delete SimpleName: classLoader(478)", "Delete SimpleName: thisUrl(479)", "Delete SimpleName: basePackage(480)", "Delete ClassInstanceCreation(481)", "Delete MethodInvocation(482)", "Delete ExpressionStatement(483)", "Delete Block(484)", "Delete IfStatement(485)", "Delete Block(486)", "Delete WhileStatement(487)", "Delete SimpleName: CompositeArchive(488)", "Delete SimpleType: CompositeArchive(489)", "Delete SimpleName: compositeArchive(490)", "Delete SimpleName: CompositeArchive(491)", "Delete SimpleType: CompositeArchive(492)", "Delete SimpleName: archives(493)", "Delete ClassInstanceCreation(494)", "Delete VariableDeclarationFragment(495)", "Delete VariableDeclarationStatement(496)", "Delete SimpleName: AnnotationFinder(497)", "Delete SimpleType: AnnotationFinder(498)", "Delete SimpleName: annotationFinder(499)", "Delete SimpleName: AnnotationFinder(500)", "Delete SimpleType: AnnotationFinder(501)", "Delete SimpleName: compositeArchive(502)", "Delete ClassInstanceCreation(503)", "Delete VariableDeclarationFragment(504)", "Delete VariableDeclarationStatement(505)", "Delete SimpleName: Class(506)", "Delete SimpleType: Class(507)", "Delete SimpleName: Annotation(508)", "Delete SimpleType: Annotation(509)", "Delete WildcardType: ? extends Annotation(510)", "Delete ParameterizedType: Class<? extends Annotation>(511)", "Delete SimpleName: annotation(512)", "Delete SingleVariableDeclaration(513)", "Delete SimpleName: annotations(514)", "Delete SimpleName: localClasses(515)", "Delete SimpleName: addAll(516)", "Delete SimpleName: annotationFinder(517)", "Delete SimpleName: findAnnotatedClasses(518)", "Delete SimpleName: annotation(519)", "Delete MethodInvocation(520)", "Delete MethodInvocation(521)", "Delete ExpressionStatement(522)", "Delete SimpleName: localConstructors(523)", "Delete SimpleName: addAll(524)", "Delete SimpleName: annotationFinder(525)", "Delete SimpleName: findAnnotatedConstructors(526)", "Delete SimpleName: annotation(527)", "Delete MethodInvocation(528)", "Delete MethodInvocation(529)", "Delete ExpressionStatement(530)", "Delete SimpleName: localMethods(531)", "Delete SimpleName: addAll(532)", "Delete SimpleName: annotationFinder(533)", "Delete SimpleName: findAnnotatedMethods(534)", "Delete SimpleName: annotation(535)", "Delete MethodInvocation(536)", "Delete MethodInvocation(537)", "Delete ExpressionStatement(538)", "Delete SimpleName: localFields(539)", "Delete SimpleName: addAll(540)", "Delete SimpleName: annotationFinder(541)", "Delete SimpleName: findAnnotatedFields(542)", "Delete SimpleName: annotation(543)", "Delete MethodInvocation(544)", "Delete MethodInvocation(545)", "Delete ExpressionStatement(546)", "Delete Block(547)", "Delete EnhancedForStatement(548)", "Delete Block(549)", "Delete EnhancedForStatement(550)", "Delete Block(551)", "Delete SimpleName: IOException(552)", "Delete SimpleType: IOException(553)", "Delete SimpleName: e(554)", "Delete SingleVariableDeclaration(555)", "Delete SimpleName: RuntimeException(556)", "Delete SimpleType: RuntimeException(557)", "Delete SimpleName: e(558)", "Delete ClassInstanceCreation(559)", "Delete ThrowStatement(560)", "Delete Block(561)", "Delete CatchClause(562)", "Delete TryStatement(563)", "Delete Block(564)", "Delete MethodDeclaration(565)", "Delete Modifier: private(566)", "Delete PrimitiveType: boolean(567)", "Delete SimpleName: isJarURL(568)", "Delete SimpleName: URL(569)", "Delete SimpleType: URL(570)", "Delete SimpleName: url(571)", "Delete SingleVariableDeclaration(572)", "Delete SimpleName: String(573)", "Delete SimpleType: String(574)", "Delete SimpleName: protocol(575)", "Delete SimpleName: url(576)", "Delete SimpleName: getProtocol(577)", "Delete MethodInvocation(578)", "Delete VariableDeclarationFragment(579)", "Delete VariableDeclarationStatement(580)", "Delete StringLiteral: \"zip\"(581)", "Delete SimpleName: equals(582)", "Delete SimpleName: protocol(583)", "Delete MethodInvocation(584)", "Delete StringLiteral: \"jar\"(585)", "Delete SimpleName: equals(586)", "Delete SimpleName: protocol(587)", "Delete MethodInvocation(588)", "Delete InfixExpression: ||(589)", "Delete ReturnStatement(590)", "Delete Block(591)", "Delete MethodDeclaration(592)", "Delete TypeDeclaration: class(593)"]}}, {"DefaultLifecycleMethodsFactory_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.annotation.Annotation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Field"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.HashSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.concurrent.atomic.AtomicBoolean"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.inject.Singleton", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.validation.Constraint"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.slf4j.Logger"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.slf4j.LoggerFactory"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.collect.ArrayListMultimap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Multimap"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.Inject", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.annotations.WarmUp"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: Throwable", "DEL SimpleName: annotationClass", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Singleton", "DEL SimpleName: handleReflectionError", "DEL Assignment: =", "DEL ParameterizedType: Class<? extends Annotation>", "DEL StringLiteral: \"Class %s could not be resolved because of a class path error. Governator cannot further process the class.\"", "DEL SimpleName: isAnnotationPresent", "DEL SimpleType: Annotation", "DEL BooleanLiteral: false", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleName: annotationClass", "DEL SimpleName: fieldMap", "DEL SimpleName: field", "DEL MethodInvocation", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL WildcardType: ?", "DEL ParameterizedType: Class<?>", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL SimpleName: annotationClass", "DEL SimpleName: put", "DEL SimpleName: methodMap", "DEL SimpleType: Class", "DEL SimpleName: processMethod", "DEL SimpleName: Class", "DEL SimpleType: Class", "DEL SimpleType: Class", "DEL Modifier: public", "DEL SimpleName: classMap", "DEL ReturnStatement", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,Field>", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: method", "DEL SimpleName: annotationClass", "DEL EmptyStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: Field", "DEL SimpleType: Annotation", "DEL MethodInvocation", "DEL SimpleName: annotationClass", "DEL SimpleName: usedNames", "DEL SimpleName: method", "DEL SimpleName: isSynthetic", "DEL SimpleName: Class", "DEL ParameterizedType: Class<? extends Annotation>", "DEL Block", "DEL WildcardType: ?", "DEL SimpleName: annotationClass", "DEL Block", "DEL SimpleName: clazz", "DEL VariableDeclarationFragment", "DEL SimpleType: Field", "DEL SimpleName: Class", "DEL SimpleType: Field", "DEL SimpleName: Annotation", "DEL SimpleName: getAnnotationProcessors", "DEL Block", "DEL SimpleName: Field", "DEL SimpleName: Annotation", "DEL SimpleName: field", "DEL ArrayCreation", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL SimpleName: method", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Constraint", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL SimpleName: Class", "DEL SimpleName: annotationClass", "DEL MethodDeclaration", "DEL SimpleName: Annotation", "DEL SimpleType: Multimap", "DEL SimpleName: put", "DEL WildcardType: ?", "DEL SingleVariableDeclaration", "DEL SimpleName: annotationClass", "DEL Block", "DEL SimpleName: getName", "DEL SimpleName: methodMap", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL ParameterizedType: Set<Class<? extends Annotation>>", "DEL BooleanLiteral: true", "DEL SimpleName: processField", "DEL SingleVariableDeclaration", "DEL SimpleType: Annotation", "DEL Dimension", "DEL SingleVariableDeclaration", "DEL SimpleName: DefaultLifecycleMethodsFactory", "DEL SimpleType: Multimap", "DEL SimpleName: setAccessible", "DEL ParameterizedType: Class<? extends Annotation>", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Multimap", "DEL Block", "DEL CatchClause", "DEL Block", "DEL Modifier: private", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: Multimap", "DEL SimpleName: annotation", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL WildcardType: ? extends Annotation", "DEL Block", "DEL EnhancedForStatement", "DEL ArrayInitializer", "DEL SimpleName: Class", "DEL SimpleName: clazz", "DEL SimpleName: WarmUp", "DEL SimpleName: Field", "DEL SimpleName: Field", "DEL TypeLiteral", "DEL SimpleType: Set", "DEL SimpleName: AtomicBoolean", "DEL SimpleName: Multimap", "DEL SimpleName: getName", "DEL SimpleName: hasValidations", "DEL SimpleType: HashSet", "DEL IfStatement", "DEL CatchClause", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: Throwable", "DEL Block", "DEL SimpleType: Annotation", "DEL SimpleName: e", "DEL SimpleName: Multimap", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: DefaultLifecycleMethodsFactory", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: ArrayListMultimap", "DEL SimpleType: AtomicBoolean", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: annotation", "DEL SimpleType: Annotation", "DEL SimpleName: hasValidations", "DEL IfStatement", "DEL SimpleName: ClassNotFoundException", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleType: String", "DEL VariableDeclarationFragment", "DEL SimpleType: Annotation", "DEL SimpleName: create", "DEL SimpleName: getAnnotation", "DEL SingleVariableDeclaration", "DEL ArrayCreation", "DEL SimpleType: Annotation", "DEL SimpleName: Class", "DEL ParameterizedType: Class<? extends Annotation>", "DEL ParameterizedType: HashSet<Class<? extends Annotation>>", "DEL SingleVariableDeclaration", "DEL SimpleType: Multimap", "DEL SingleVariableDeclaration", "DEL SimpleName: getClass", "DEL SimpleName: fieldMap", "DEL MethodInvocation", "DEL SimpleName: Set", "DEL ReturnStatement", "DEL Block", "DEL Block", "DEL TypeDeclaration: class", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,Field>", "DEL SimpleType: Annotation", "DEL SimpleName: addAll", "DEL VariableDeclarationStatement", "DEL SimpleName: WarmUp", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: clazz", "DEL SimpleName: Field", "DEL MethodInvocation", "DEL Block", "DEL WildcardType: ?", "DEL SimpleName: addLifeCycleMethods", "DEL SimpleType: Annotation", "DEL SimpleType: Method", "DEL SimpleName: checkForValidations", "DEL MethodInvocation", "DEL SimpleType: Annotation", "DEL SimpleName: field", "DEL SimpleName: Annotation", "DEL SimpleName: method", "DEL SimpleType: Class", "DEL Modifier: private", "DEL SimpleName: classAnnotations", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: e", "DEL SimpleType: Annotation", "DEL SimpleName: isSynthetic", "DEL Modifier: final", "DEL SimpleName: Method", "DEL SimpleName: getMethodAnnotations", "DEL SimpleName: HashSet", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleType: Method", "DEL Modifier: private", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: fieldAnnotations", "DEL SimpleName: clazz", "DEL SimpleType: Class", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: field", "DEL SimpleName: methodAnnotations", "DEL MethodInvocation", "DEL Modifier: private", "DEL ExpressionStatement", "DEL SimpleName: put", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleType: Class", "DEL EnhancedForStatement", "DEL WildcardType: ? extends Annotation", "DEL ReturnStatement", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL SimpleType: LifecycleMethods", "DEL TypeParameter", "DEL SingleVariableDeclaration", "DEL SimpleType: Class", "DEL SimpleType: Annotation", "DEL FieldDeclaration", "DEL SimpleName: get", "DEL Block", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,Method>", "DEL SimpleName: fieldMap", "DEL VariableDeclarationFragment", "DEL SimpleType: AtomicBoolean", "DEL SimpleName: method", "DEL SingleVariableDeclaration", "DEL SimpleType: Method", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL IfStatement", "DEL SimpleName: annotationClass", "DEL Block", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: field", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL SimpleName: Method", "DEL SimpleName: field", "DEL Modifier: private", "DEL EmptyStatement", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Annotation", "DEL SimpleType: Class", "DEL SimpleName: hasValidations", "DEL SimpleName: Annotation", "DEL WildcardType: ? extends Annotation", "DEL EnhancedForStatement", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,Annotation>", "DEL SimpleName: e", "DEL SimpleName: usedNames", "DEL SimpleName: processor", "DEL SimpleName: field", "DEL SimpleName: arguments", "DEL ArrayType: Method[]", "DEL SimpleName: clazz", "DEL SimpleName: Class", "DEL SimpleName: processField", "DEL SimpleType: Class", "DEL SimpleName: face", "DEL SimpleName: ArrayListMultimap", "DEL SimpleName: Set", "DEL SimpleName: Annotation", "DEL SimpleName: methodMap", "DEL ParameterizedType: Class<? extends Annotation>", "DEL MethodDeclaration", "DEL SimpleName: classMap", "DEL SimpleName: usedNames", "DEL ExpressionStatement", "DEL SimpleName: fieldAnnotations", "DEL SimpleName: classAnnotations", "DEL SimpleName: clazz", "DEL ParameterizedType: Set<Class<? extends Annotation>>", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL SimpleName: AtomicBoolean", "DEL SimpleName: processor", "DEL SimpleName: classAnnotations", "DEL SimpleName: String", "DEL SimpleName: String", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,String>", "DEL SimpleName: Field", "DEL MethodInvocation", "DEL SimpleType: WarmUp", "DEL BooleanLiteral: true", "DEL SimpleName: methodMap", "DEL SimpleName: face", "DEL SingleVariableDeclaration", "DEL PrefixExpression: !", "DEL SimpleName: Annotation", "DEL ContinueStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: getDeclaredAnnotations", "DEL MarkerAnnotation", "DEL SimpleName: fieldMap", "DEL SimpleType: Class", "DEL SimpleName: T", "DEL SimpleName: Class", "DEL SimpleType: Class", "DEL SimpleName: addLifeCycleMethods", "DEL SimpleName: methodMap", "DEL SimpleName: getClassAnnotations", "DEL SimpleType: String", "DEL SimpleType: Field", "DEL SimpleName: HashSet", "DEL SimpleType: HashSet", "DEL Block", "DEL SimpleName: classMap", "DEL SimpleName: annotationClass", "DEL SimpleType: Class", "DEL SimpleName: e", "DEL SimpleName: method", "DEL Block", "DEL SimpleType: Annotation", "DEL SimpleType: Class", "DEL Dimension", "DEL SimpleName: Class", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: isAnnotationPresent", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: put", "DEL SimpleName: LifecycleMethods", "DEL ParameterizedType: Class<? extends Annotation>", "DEL ParameterizedType: HashSet<Class<? extends Annotation>>", "DEL SimpleName: getName", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: LoggerFactory", "DEL ReturnStatement", "DEL EnhancedForStatement", "DEL SimpleName: Annotation", "DEL Modifier: final", "DEL SimpleType: Multimap", "DEL ParameterizedType: Set<Class<? extends Annotation>>", "DEL ParameterizedType: Class<?>", "DEL SimpleName: getDeclaredMethods", "DEL SimpleName: Class", "DEL SimpleType: Class", "DEL SimpleName: fieldAnnotations", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL SimpleName: get", "DEL ArrayType: Field[]", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleType: Field", "DEL SimpleName: Multimap", "DEL FieldDeclaration", "DEL SimpleName: annotationClass", "DEL SimpleName: getDeclaredMethods", "DEL Block", "DEL SimpleName: usedNames", "DEL SimpleName: get", "DEL SimpleType: String", "DEL SimpleName: Class", "DEL SimpleName: Annotation", "DEL ParameterizedType: Class<?>", "DEL SimpleName: Annotation", "DEL NullLiteral", "DEL SimpleName: isAnnotationPresent", "DEL SimpleName: Method", "DEL SimpleName: Annotation", "DEL SingleVariableDeclaration", "DEL WildcardType: ? extends Annotation", "DEL BooleanLiteral: false", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: Class", "DEL SimpleType: Throwable", "DEL SimpleName: clazz", "DEL SimpleName: methodAnnotations", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: processor", "DEL SimpleName: classMap", "DEL MethodInvocation", "DEL SimpleName: Annotation", "DEL SimpleType: NoClassDefFoundError", "DEL SimpleType: Logger", "DEL SimpleName: Annotation", "DEL SimpleName: usedNames", "DEL ExpressionStatement", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Annotation", "DEL SimpleType: AtomicBoolean", "DEL SimpleName: String", "DEL SimpleName: getDeclaredMethods", "DEL TypeLiteral", "DEL SimpleName: log", "DEL MarkerAnnotation", "DEL SimpleType: Class", "DEL SimpleName: put", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ArrayListMultimap", "DEL MethodInvocation", "DEL SimpleType: Multimap", "DEL InfixExpression: ==", "DEL SimpleName: Annotation", "DEL SimpleName: handleReflectionError", "DEL SimpleType: Class", "DEL SimpleType: Class", "DEL SimpleName: Class", "DEL SimpleName: field", "DEL ExpressionStatement", "DEL SimpleType: Annotation", "DEL SimpleType: Annotation", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: hasValidations", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,Annotation>", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: methodMap", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Class", "DEL SimpleName: e", "DEL SimpleType: Throwable", "DEL SimpleName: classMap", "DEL SimpleName: getDeclardFields", "DEL SingleVariableDeclaration", "DEL SimpleName: getDeclardFields", "DEL ExpressionStatement", "DEL SimpleName: methodAnnotations", "DEL SimpleName: contains", "DEL SimpleName: usedNames", "DEL SimpleName: NoClassDefFoundError", "DEL SimpleName: usedNames", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: classAnnotations", "DEL SimpleName: clazz", "DEL SimpleName: usedNames", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,String>", "DEL SimpleName: Multimap", "DEL SimpleName: arguments", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: set", "DEL Block", "DEL ParameterizedType: Class<?>", "DEL SimpleType: Set", "DEL SimpleName: Annotation", "DEL SimpleName: usedNames", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Dimension", "DEL SimpleName: isBridge", "DEL SingleVariableDeclaration", "DEL SimpleType: HashSet", "DEL SimpleName: processor", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleType: Method", "DEL SimpleType: Annotation", "DEL WildcardType: ? extends Annotation", "DEL ExpressionStatement", "DEL SimpleName: annotationClass", "DEL SimpleName: Multimap", "DEL SimpleName: Annotation", "DEL SimpleName: Annotation", "DEL WildcardType: ? extends Annotation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: field", "DEL SimpleName: classMap", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Field", "DEL ArrayType: Method[]", "DEL SimpleName: Field", "DEL SimpleType: Annotation", "DEL MethodInvocation", "DEL TryStatement", "DEL SimpleName: put", "DEL SimpleName: usedNames", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: annotationClass", "DEL TypeLiteral", "DEL InstanceofExpression", "DEL SimpleType: WarmUp", "DEL SimpleType: String", "DEL SimpleName: field", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL SimpleType: Annotation", "DEL SimpleName: getDeclaredFields", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleType: Field", "DEL Assignment: =", "DEL SimpleName: setAccessible", "DEL SimpleName: Inject", "DEL IfStatement", "DEL ParameterizedType: Class<? extends Annotation>", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: AtomicBoolean", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: create", "DEL SimpleName: annotationClass", "DEL SimpleName: addAll", "DEL SimpleName: Annotation", "DEL Modifier: private", "DEL IfStatement", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleName: addLifeCycleMethods", "DEL MethodInvocation", "DEL SimpleName: Annotation", "DEL SimpleName: method", "DEL Modifier: public", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ParameterizedType: Class<? extends Annotation>", "DEL ExpressionStatement", "DEL SimpleType: LifecycleMethods", "DEL SimpleName: HashSet", "DEL SimpleType: Method", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: fieldAnnotations", "DEL MethodInvocation", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL ParameterizedType: Class<? extends Annotation>", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: log", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,String>", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Set", "DEL SimpleName: clazz", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: getSuperclass", "DEL SimpleType: Class", "DEL ExpressionStatement", "DEL SimpleName: usedNames", "DEL SimpleName: hasValidations", "DEL ReturnStatement", "DEL SimpleName: addLifeCycleMethods", "DEL SimpleName: get", "DEL ExpressionStatement", "DEL SimpleType: Class", "DEL Modifier: private", "DEL SimpleName: Annotation", "DEL SimpleName: hasValidations", "DEL EnhancedForStatement", "DEL SimpleType: LifecycleManagerArguments", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: fieldMap", "DEL SimpleName: processMethod", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: getInterfaces", "DEL ArrayType: Field[]", "DEL Modifier: final", "DEL SimpleName: Annotation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: e", "DEL SimpleName: method", "DEL ReturnStatement", "DEL SimpleName: e", "DEL SimpleName: format", "DEL SimpleName: checkForValidations", "DEL Block", "DEL SimpleName: clazz", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: method", "DEL SimpleName: handleReflectionError", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ParameterizedType: HashSet<Class<? extends Annotation>>", "DEL SimpleName: LifecycleMethodsFactory", "DEL SimpleName: Method", "DEL Block", "DEL SimpleName: clazz", "DEL SimpleName: Class", "DEL SimpleName: e", "DEL SimpleType: Multimap", "DEL SingleVariableDeclaration", "DEL InfixExpression: ||", "DEL SingleVariableDeclaration", "DEL SimpleName: Method", "DEL NullLiteral", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: field", "DEL SimpleName: ArrayListMultimap", "DEL MarkerAnnotation", "DEL BooleanLiteral: false", "DEL MethodInvocation", "DEL SimpleName: clazz", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleType: Annotation", "DEL ParameterizedType: Class<T>", "DEL SimpleName: create", "DEL SimpleType: Multimap", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleType: Annotation", "DEL SimpleName: clazz", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL SimpleName: LifecycleMethods", "DEL SimpleName: getName", "DEL SimpleType: LifecycleMethodsFactory", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL IfStatement", "DEL SimpleType: Field", "DEL SimpleName: method", "DEL Modifier: public", "DEL EnhancedForStatement", "DEL SimpleName: methodMap", "DEL IfStatement", "DEL SimpleType: Multimap", "DEL InstanceofExpression", "DEL ParenthesizedExpression", "DEL SimpleName: Multimap", "DEL SimpleName: method", "DEL ParenthesizedExpression", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Class", "DEL SimpleName: clazz", "DEL SimpleName: contains", "DEL SimpleName: fieldMap", "DEL SingleVariableDeclaration", "DEL Dimension", "DEL PrimitiveType: void", "DEL SimpleName: fieldMap", "DEL VariableDeclarationStatement", "DEL SimpleName: addAll", "DEL SingleVariableDeclaration", "DEL SimpleType: Annotation", "DEL TryStatement", "DEL Block", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: Throwable", "DEL SimpleType: Annotation", "DEL IfStatement", "DEL Block", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL SimpleName: method", "DEL BooleanLiteral: false", "DEL Modifier: private", "DEL Assignment: =", "DEL SimpleName: hasValidations", "DEL SimpleName: getCause", "DEL SimpleType: Constraint", "DEL SimpleName: annotationType", "DEL ParameterizedType: Multimap<Class<? extends Annotation>,Method>", "DEL SimpleName: Class", "DEL SimpleName: Annotation", "DEL SimpleName: String", "DEL SimpleName: Multimap", "DEL PrimitiveType: boolean", "DEL ExpressionStatement", "DEL SimpleName: isAnnotationPresent", "DEL BooleanLiteral: true", "DEL SimpleName: clazz", "DEL PrefixExpression: !", "DEL SimpleType: Class", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Logger", "DEL SingleVariableDeclaration", "DEL SimpleType: Throwable", "DEL SimpleType: T", "DEL Block", "DEL Block", "DEL VariableDeclarationStatement", "DEL ParameterizedType: Class<?>", "DEL MethodDeclaration", "DEL SimpleName: methodMap", "DEL Modifier: final", "DEL SimpleName: Method", "DEL SimpleName: clazz", "DEL SimpleName: LifecycleManagerArguments", "DEL VariableDeclarationFragment", "DEL SimpleType: Annotation", "DEL SimpleName: create", "DEL SimpleName: annotationClass", "DEL Block", "DEL SimpleName: Class", "DEL SimpleType: Annotation", "DEL MethodInvocation", "DEL SimpleType: Method", "DEL SimpleName: isAnnotationPresent", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: String", "DEL SimpleType: Class", "DEL VariableDeclarationFragment", "DEL SimpleName: methodAnnotations", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL ReturnStatement", "DEL SimpleName: e", "DEL SimpleName: Class", "DEL PrimitiveType: boolean", "DEL SimpleName: annotationClass", "DEL SimpleName: e", "DEL SimpleType: Set", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: annotationClass", "DEL VariableDeclarationFragment", "DEL SimpleType: ClassNotFoundException", "DEL SimpleName: annotationClass", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL SimpleType: Multimap", "DEL ExpressionStatement", "DEL SimpleName: getLogger", "DEL SimpleName: field", "DEL IfStatement", "DEL SimpleName: create", "DEL SimpleName: hasValidations", "DEL ExpressionStatement", "DEL SimpleName: handleReflectionError", "DEL SimpleName: classMap", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: T", "DEL Block", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL ParameterizedType: Class<? extends Annotation>", "DEL ArrayInitializer", "DEL MethodInvocation", "DEL ContinueStatement", "DEL SimpleName: getFieldAnnotations"]}]}}, {"DefaultLifecycleMethodsFactory_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.annotation.Annotation(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Field(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Method(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.HashSet(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Set(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.concurrent.atomic.AtomicBoolean(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: javax.inject.Singleton(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: javax.validation.Constraint(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: org.slf4j.Logger(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: org.slf4j.LoggerFactory(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.common.collect.ArrayListMultimap(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.google.common.collect.Multimap(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.google.inject.Inject(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.netflix.governator.annotations.WarmUp(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor(30)", "Delete ImportDeclaration(31)", "Delete SimpleName: Singleton(32)", "Delete MarkerAnnotation(33)", "Delete Modifier: public(34)", "Delete SimpleName: DefaultLifecycleMethodsFactory(35)", "Delete SimpleName: LifecycleMethodsFactory(36)", "Delete SimpleType: LifecycleMethodsFactory(37)", "Delete Modifier: private(38)", "Delete Modifier: final(39)", "Delete SimpleName: Logger(40)", "Delete SimpleType: Logger(41)", "Delete SimpleName: log(42)", "Delete SimpleName: LoggerFactory(43)", "Delete SimpleName: getLogger(44)", "Delete SimpleName: getClass(45)", "Delete MethodInvocation(46)", "Delete MethodInvocation(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete Modifier: private(50)", "Delete Modifier: final(51)", "Delete SimpleName: Set(52)", "Delete SimpleType: Set(53)", "Delete SimpleName: Class(54)", "Delete SimpleType: Class(55)", "Delete SimpleName: Annotation(56)", "Delete SimpleType: Annotation(57)", "Delete WildcardType: ? extends Annotation(58)", "Delete ParameterizedType: Class<? extends Annotation>(59)", "Delete ParameterizedType: Set<Class<? extends Annotation>>(60)", "Delete SimpleName: fieldAnnotations(61)", "Delete VariableDeclarationFragment(62)", "Delete FieldDeclaration(63)", "Delete Modifier: private(64)", "Delete Modifier: final(65)", "Delete SimpleName: Set(66)", "Delete SimpleType: Set(67)", "Delete SimpleName: Class(68)", "Delete SimpleType: Class(69)", "Delete SimpleName: Annotation(70)", "Delete SimpleType: Annotation(71)", "Delete WildcardType: ? extends Annotation(72)", "Delete ParameterizedType: Class<? extends Annotation>(73)", "Delete ParameterizedType: Set<Class<? extends Annotation>>(74)", "Delete SimpleName: methodAnnotations(75)", "Delete VariableDeclarationFragment(76)", "Delete FieldDeclaration(77)", "Delete Modifier: private(78)", "Delete Modifier: final(79)", "Delete SimpleName: Set(80)", "Delete SimpleType: Set(81)", "Delete SimpleName: Class(82)", "Delete SimpleType: Class(83)", "Delete SimpleName: Annotation(84)", "Delete SimpleType: Annotation(85)", "Delete WildcardType: ? extends Annotation(86)", "Delete ParameterizedType: Class<? extends Annotation>(87)", "Delete ParameterizedType: Set<Class<? extends Annotation>>(88)", "Delete SimpleName: classAnnotations(89)", "Delete VariableDeclarationFragment(90)", "Delete FieldDeclaration(91)", "Delete SimpleName: Inject(92)", "Delete MarkerAnnotation(93)", "Delete Modifier: public(94)", "Delete SimpleName: DefaultLifecycleMethodsFactory(95)", "Delete SimpleName: LifecycleManagerArguments(96)", "Delete SimpleType: LifecycleManagerArguments(97)", "Delete SimpleName: arguments(98)", "Delete SingleVariableDeclaration(99)", "Delete SimpleName: fieldAnnotations(100)", "Delete SimpleName: HashSet(101)", "Delete SimpleType: HashSet(102)", "Delete SimpleName: Class(103)", "Delete SimpleType: Class(104)", "Delete SimpleName: Annotation(105)", "Delete SimpleType: Annotation(106)", "Delete WildcardType: ? extends Annotation(107)", "Delete ParameterizedType: Class<? extends Annotation>(108)", "Delete ParameterizedType: HashSet<Class<? extends Annotation>>(109)", "Delete ClassInstanceCreation(110)", "Delete Assignment: =(111)", "Delete ExpressionStatement(112)", "Delete SimpleName: methodAnnotations(113)", "Delete SimpleName: HashSet(114)", "Delete SimpleType: HashSet(115)", "Delete SimpleName: Class(116)", "Delete SimpleType: Class(117)", "Delete SimpleName: Annotation(118)", "Delete SimpleType: Annotation(119)", "Delete WildcardType: ? extends Annotation(120)", "Delete ParameterizedType: Class<? extends Annotation>(121)", "Delete ParameterizedType: HashSet<Class<? extends Annotation>>(122)", "Delete ClassInstanceCreation(123)", "Delete Assignment: =(124)", "Delete ExpressionStatement(125)", "Delete SimpleName: classAnnotations(126)", "Delete SimpleName: HashSet(127)", "Delete SimpleType: HashSet(128)", "Delete SimpleName: Class(129)", "Delete SimpleType: Class(130)", "Delete SimpleName: Annotation(131)", "Delete SimpleType: Annotation(132)", "Delete WildcardType: ? extends Annotation(133)", "Delete ParameterizedType: Class<? extends Annotation>(134)", "Delete ParameterizedType: HashSet<Class<? extends Annotation>>(135)", "Delete ClassInstanceCreation(136)", "Delete Assignment: =(137)", "Delete ExpressionStatement(138)", "Delete SimpleName: LifecycleAnnotationProcessor(139)", "Delete SimpleType: LifecycleAnnotationProcessor(140)", "Delete SimpleName: processor(141)", "Delete SingleVariableDeclaration(142)", "Delete SimpleName: arguments(143)", "Delete SimpleName: getAnnotationProcessors(144)", "Delete MethodInvocation(145)", "Delete SimpleName: fieldAnnotations(146)", "Delete SimpleName: addAll(147)", "Delete SimpleName: processor(148)", "Delete SimpleName: getFieldAnnotations(149)", "Delete MethodInvocation(150)", "Delete MethodInvocation(151)", "Delete ExpressionStatement(152)", "Delete SimpleName: methodAnnotations(153)", "Delete SimpleName: addAll(154)", "Delete SimpleName: processor(155)", "Delete SimpleName: getMethodAnnotations(156)", "Delete MethodInvocation(157)", "Delete MethodInvocation(158)", "Delete ExpressionStatement(159)", "Delete SimpleName: classAnnotations(160)", "Delete SimpleName: addAll(161)", "Delete SimpleName: processor(162)", "Delete SimpleName: getClassAnnotations(163)", "Delete MethodInvocation(164)", "Delete MethodInvocation(165)", "Delete ExpressionStatement(166)", "Delete Block(167)", "Delete EnhancedForStatement(168)", "Delete Block(169)", "Delete MethodDeclaration(170)", "Delete SimpleName: Override(171)", "Delete MarkerAnnotation(172)", "Delete Modifier: public(173)", "Delete SimpleName: T(174)", "Delete TypeParameter(175)", "Delete SimpleName: LifecycleMethods(176)", "Delete SimpleType: LifecycleMethods(177)", "Delete SimpleName: create(178)", "Delete SimpleName: Class(179)", "Delete SimpleType: Class(180)", "Delete SimpleName: T(181)", "Delete SimpleType: T(182)", "Delete ParameterizedType: Class<T>(183)", "Delete SimpleName: clazz(184)", "Delete SingleVariableDeclaration(185)", "Delete SimpleName: Multimap(186)", "Delete SimpleType: Multimap(187)", "Delete SimpleName: Class(188)", "Delete SimpleType: Class(189)", "Delete SimpleName: Annotation(190)", "Delete SimpleType: Annotation(191)", "Delete WildcardType: ? extends Annotation(192)", "Delete ParameterizedType: Class<? extends Annotation>(193)", "Delete SimpleName: Field(194)", "Delete SimpleType: Field(195)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,Field>(196)", "Delete SimpleName: fieldMap(197)", "Delete SimpleName: ArrayListMultimap(198)", "Delete SimpleName: create(199)", "Delete MethodInvocation(200)", "Delete VariableDeclarationFragment(201)", "Delete VariableDeclarationStatement(202)", "Delete SimpleName: Multimap(203)", "Delete SimpleType: Multimap(204)", "Delete SimpleName: Class(205)", "Delete SimpleType: Class(206)", "Delete SimpleName: Annotation(207)", "Delete SimpleType: Annotation(208)", "Delete WildcardType: ? extends Annotation(209)", "Delete ParameterizedType: Class<? extends Annotation>(210)", "Delete SimpleName: Method(211)", "Delete SimpleType: Method(212)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,Method>(213)", "Delete SimpleName: methodMap(214)", "Delete SimpleName: ArrayListMultimap(215)", "Delete SimpleName: create(216)", "Delete MethodInvocation(217)", "Delete VariableDeclarationFragment(218)", "Delete VariableDeclarationStatement(219)", "Delete EmptyStatement(220)", "Delete SimpleName: Multimap(221)", "Delete SimpleType: Multimap(222)", "Delete SimpleName: Class(223)", "Delete SimpleType: Class(224)", "Delete SimpleName: Annotation(225)", "Delete SimpleType: Annotation(226)", "Delete WildcardType: ? extends Annotation(227)", "Delete ParameterizedType: Class<? extends Annotation>(228)", "Delete SimpleName: Annotation(229)", "Delete SimpleType: Annotation(230)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,Annotation>(231)", "Delete SimpleName: classMap(232)", "Delete SimpleName: ArrayListMultimap(233)", "Delete SimpleName: create(234)", "Delete MethodInvocation(235)", "Delete VariableDeclarationFragment(236)", "Delete VariableDeclarationStatement(237)", "Delete EmptyStatement(238)", "Delete SimpleName: AtomicBoolean(239)", "Delete SimpleType: AtomicBoolean(240)", "Delete SimpleName: hasValidations(241)", "Delete SimpleName: AtomicBoolean(242)", "Delete SimpleType: AtomicBoolean(243)", "Delete BooleanLiteral: false(244)", "Delete ClassInstanceCreation(245)", "Delete VariableDeclarationFragment(246)", "Delete VariableDeclarationStatement(247)", "Delete SimpleName: addLifeCycleMethods(248)", "Delete SimpleName: clazz(249)", "Delete SimpleName: fieldMap(250)", "Delete SimpleName: methodMap(251)", "Delete SimpleName: classMap(252)", "Delete SimpleName: hasValidations(253)", "Delete SimpleName: ArrayListMultimap(254)", "Delete SimpleName: Class(255)", "Delete SimpleType: Class(256)", "Delete SimpleName: Annotation(257)", "Delete SimpleType: Annotation(258)", "Delete WildcardType: ? extends Annotation(259)", "Delete ParameterizedType: Class<? extends Annotation>(260)", "Delete SimpleName: String(261)", "Delete SimpleType: String(262)", "Delete SimpleName: create(263)", "Delete MethodInvocation(264)", "Delete MethodInvocation(265)", "Delete ExpressionStatement(266)", "Delete SimpleName: LifecycleMethods(267)", "Delete SimpleType: LifecycleMethods(268)", "Delete SimpleName: fieldMap(269)", "Delete SimpleName: methodMap(270)", "Delete SimpleName: classMap(271)", "Delete SimpleName: hasValidations(272)", "Delete SimpleName: get(273)", "Delete MethodInvocation(274)", "Delete ClassInstanceCreation(275)", "Delete ReturnStatement(276)", "Delete Block(277)", "Delete MethodDeclaration(278)", "Delete Modifier: private(279)", "Delete PrimitiveType: void(280)", "Delete SimpleName: addLifeCycleMethods(281)", "Delete SimpleName: Class(282)", "Delete SimpleType: Class(283)", "Delete WildcardType: ?(284)", "Delete ParameterizedType: Class<?>(285)", "Delete SimpleName: clazz(286)", "Delete SingleVariableDeclaration(287)", "Delete SimpleName: Multimap(288)", "Delete SimpleType: Multimap(289)", "Delete SimpleName: Class(290)", "Delete SimpleType: Class(291)", "Delete SimpleName: Annotation(292)", "Delete SimpleType: Annotation(293)", "Delete WildcardType: ? extends Annotation(294)", "Delete ParameterizedType: Class<? extends Annotation>(295)", "Delete SimpleName: Field(296)", "Delete SimpleType: Field(297)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,Field>(298)", "Delete SimpleName: fieldMap(299)", "Delete SingleVariableDeclaration(300)", "Delete SimpleName: Multimap(301)", "Delete SimpleType: Multimap(302)", "Delete SimpleName: Class(303)", "Delete SimpleType: Class(304)", "Delete SimpleName: Annotation(305)", "Delete SimpleType: Annotation(306)", "Delete WildcardType: ? extends Annotation(307)", "Delete ParameterizedType: Class<? extends Annotation>(308)", "Delete SimpleName: Method(309)", "Delete SimpleType: Method(310)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,Method>(311)", "Delete SimpleName: methodMap(312)", "Delete SingleVariableDeclaration(313)", "Delete SimpleName: Multimap(314)", "Delete SimpleType: Multimap(315)", "Delete SimpleName: Class(316)", "Delete SimpleType: Class(317)", "Delete SimpleName: Annotation(318)", "Delete SimpleType: Annotation(319)", "Delete WildcardType: ? extends Annotation(320)", "Delete ParameterizedType: Class<? extends Annotation>(321)", "Delete SimpleName: Annotation(322)", "Delete SimpleType: Annotation(323)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,Annotation>(324)", "Delete SimpleName: classMap(325)", "Delete SingleVariableDeclaration(326)", "Delete SimpleName: AtomicBoolean(327)", "Delete SimpleType: AtomicBoolean(328)", "Delete SimpleName: hasValidations(329)", "Delete SingleVariableDeclaration(330)", "Delete SimpleName: Multimap(331)", "Delete SimpleType: Multimap(332)", "Delete SimpleName: Class(333)", "Delete SimpleType: Class(334)", "Delete SimpleName: Annotation(335)", "Delete SimpleType: Annotation(336)", "Delete WildcardType: ? extends Annotation(337)", "Delete ParameterizedType: Class<? extends Annotation>(338)", "Delete SimpleName: String(339)", "Delete SimpleType: String(340)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,String>(341)", "Delete SimpleName: usedNames(342)", "Delete SingleVariableDeclaration(343)", "Delete SimpleName: clazz(344)", "Delete NullLiteral(345)", "Delete InfixExpression: ==(346)", "Delete ReturnStatement(347)", "Delete Block(348)", "Delete IfStatement(349)", "Delete SimpleName: Class(350)", "Delete SimpleType: Class(351)", "Delete SimpleName: Annotation(352)", "Delete SimpleType: Annotation(353)", "Delete WildcardType: ? extends Annotation(354)", "Delete ParameterizedType: Class<? extends Annotation>(355)", "Delete SimpleName: annotationClass(356)", "Delete SingleVariableDeclaration(357)", "Delete SimpleName: classAnnotations(358)", "Delete SimpleName: clazz(359)", "Delete SimpleName: isAnnotationPresent(360)", "Delete SimpleName: annotationClass(361)", "Delete MethodInvocation(362)", "Delete SimpleName: classMap(363)", "Delete SimpleName: put(364)", "Delete SimpleName: annotationClass(365)", "Delete SimpleName: clazz(366)", "Delete SimpleName: getAnnotation(367)", "Delete SimpleName: annotationClass(368)", "Delete MethodInvocation(369)", "Delete MethodInvocation(370)", "Delete ExpressionStatement(371)", "Delete Block(372)", "Delete IfStatement(373)", "Delete Block(374)", "Delete EnhancedForStatement(375)", "Delete SimpleName: Field(376)", "Delete SimpleType: Field(377)", "Delete SimpleName: field(378)", "Delete SingleVariableDeclaration(379)", "Delete SimpleName: getDeclardFields(380)", "Delete SimpleName: clazz(381)", "Delete MethodInvocation(382)", "Delete SimpleName: field(383)", "Delete SimpleName: isSynthetic(384)", "Delete MethodInvocation(385)", "Delete ContinueStatement(386)", "Delete Block(387)", "Delete IfStatement(388)", "Delete SimpleName: hasValidations(389)", "Delete SimpleName: get(390)", "Delete MethodInvocation(391)", "Delete PrefixExpression: !(392)", "Delete SimpleName: hasValidations(393)", "Delete SimpleName: set(394)", "Delete SimpleName: checkForValidations(395)", "Delete SimpleName: field(396)", "Delete MethodInvocation(397)", "Delete MethodInvocation(398)", "Delete ExpressionStatement(399)", "Delete Block(400)", "Delete IfStatement(401)", "Delete SimpleName: Class(402)", "Delete SimpleType: Class(403)", "Delete SimpleName: Annotation(404)", "Delete SimpleType: Annotation(405)", "Delete WildcardType: ? extends Annotation(406)", "Delete ParameterizedType: Class<? extends Annotation>(407)", "Delete SimpleName: annotationClass(408)", "Delete SingleVariableDeclaration(409)", "Delete SimpleName: fieldAnnotations(410)", "Delete SimpleName: processField(411)", "Delete SimpleName: field(412)", "Delete SimpleName: annotationClass(413)", "Delete SimpleName: usedNames(414)", "Delete MethodInvocation(415)", "Delete SimpleName: fieldMap(416)", "Delete SimpleName: put(417)", "Delete SimpleName: annotationClass(418)", "Delete SimpleName: field(419)", "Delete MethodInvocation(420)", "Delete ExpressionStatement(421)", "Delete Block(422)", "Delete IfStatement(423)", "Delete Block(424)", "Delete EnhancedForStatement(425)", "Delete Block(426)", "Delete EnhancedForStatement(427)", "Delete SimpleName: Method(428)", "Delete SimpleType: Method(429)", "Delete SimpleName: method(430)", "Delete SingleVariableDeclaration(431)", "Delete SimpleName: getDeclaredMethods(432)", "Delete SimpleName: clazz(433)", "Delete MethodInvocation(434)", "Delete SimpleName: method(435)", "Delete SimpleName: isSynthetic(436)", "Delete MethodInvocation(437)", "Delete SimpleName: method(438)", "Delete SimpleName: isBridge(439)", "Delete MethodInvocation(440)", "Delete InfixExpression: ||(441)", "Delete ContinueStatement(442)", "Delete Block(443)", "Delete IfStatement(444)", "Delete SimpleName: Class(445)", "Delete SimpleType: Class(446)", "Delete SimpleName: Annotation(447)", "Delete SimpleType: Annotation(448)", "Delete WildcardType: ? extends Annotation(449)", "Delete ParameterizedType: Class<? extends Annotation>(450)", "Delete SimpleName: annotationClass(451)", "Delete SingleVariableDeclaration(452)", "Delete SimpleName: methodAnnotations(453)", "Delete SimpleName: processMethod(454)", "Delete SimpleName: method(455)", "Delete SimpleName: annotationClass(456)", "Delete SimpleName: usedNames(457)", "Delete MethodInvocation(458)", "Delete SimpleName: methodMap(459)", "Delete SimpleName: put(460)", "Delete SimpleName: annotationClass(461)", "Delete SimpleName: method(462)", "Delete MethodInvocation(463)", "Delete ExpressionStatement(464)", "Delete Block(465)", "Delete IfStatement(466)", "Delete Block(467)", "Delete EnhancedForStatement(468)", "Delete SimpleName: method(469)", "Delete SimpleName: isAnnotationPresent(470)", "Delete SimpleName: WarmUp(471)", "Delete SimpleType: WarmUp(472)", "Delete TypeLiteral(473)", "Delete MethodInvocation(474)", "Delete SimpleName: methodMap(475)", "Delete SimpleName: put(476)", "Delete SimpleName: WarmUp(477)", "Delete SimpleType: WarmUp(478)", "Delete TypeLiteral(479)", "Delete SimpleName: method(480)", "Delete MethodInvocation(481)", "Delete ExpressionStatement(482)", "Delete Block(483)", "Delete IfStatement(484)", "Delete Block(485)", "Delete EnhancedForStatement(486)", "Delete SimpleName: addLifeCycleMethods(487)", "Delete SimpleName: clazz(488)", "Delete SimpleName: getSuperclass(489)", "Delete MethodInvocation(490)", "Delete SimpleName: fieldMap(491)", "Delete SimpleName: methodMap(492)", "Delete SimpleName: classMap(493)", "Delete SimpleName: hasValidations(494)", "Delete SimpleName: usedNames(495)", "Delete MethodInvocation(496)", "Delete ExpressionStatement(497)", "Delete SimpleName: Class(498)", "Delete SimpleType: Class(499)", "Delete WildcardType: ?(500)", "Delete ParameterizedType: Class<?>(501)", "Delete SimpleName: face(502)", "Delete SingleVariableDeclaration(503)", "Delete SimpleName: clazz(504)", "Delete SimpleName: getInterfaces(505)", "Delete MethodInvocation(506)", "Delete SimpleName: addLifeCycleMethods(507)", "Delete SimpleName: face(508)", "Delete SimpleName: fieldMap(509)", "Delete SimpleName: methodMap(510)", "Delete SimpleName: classMap(511)", "Delete SimpleName: hasValidations(512)", "Delete SimpleName: usedNames(513)", "Delete MethodInvocation(514)", "Delete ExpressionStatement(515)", "Delete Block(516)", "Delete EnhancedForStatement(517)", "Delete Block(518)", "Delete MethodDeclaration(519)", "Delete Modifier: private(520)", "Delete SimpleName: Method(521)", "Delete SimpleType: Method(522)", "Delete Dimension(523)", "Delete ArrayType: Method[](524)", "Delete SimpleName: getDeclaredMethods(525)", "Delete SimpleName: Class(526)", "Delete SimpleType: Class(527)", "Delete WildcardType: ?(528)", "Delete ParameterizedType: Class<?>(529)", "Delete SimpleName: clazz(530)", "Delete SingleVariableDeclaration(531)", "Delete SimpleName: clazz(532)", "Delete SimpleName: getDeclaredMethods(533)", "Delete MethodInvocation(534)", "Delete ReturnStatement(535)", "Delete Block(536)", "Delete SimpleName: Throwable(537)", "Delete SimpleType: Throwable(538)", "Delete SimpleName: e(539)", "Delete SingleVariableDeclaration(540)", "Delete SimpleName: handleReflectionError(541)", "Delete SimpleName: clazz(542)", "Delete SimpleName: e(543)", "Delete MethodInvocation(544)", "Delete ExpressionStatement(545)", "Delete Block(546)", "Delete CatchClause(547)", "Delete TryStatement(548)", "Delete SimpleName: Method(549)", "Delete SimpleType: Method(550)", "Delete Dimension(551)", "Delete ArrayType: Method[](552)", "Delete ArrayInitializer(553)", "Delete ArrayCreation(554)", "Delete ReturnStatement(555)", "Delete Block(556)", "Delete MethodDeclaration(557)", "Delete Modifier: private(558)", "Delete SimpleName: Field(559)", "Delete SimpleType: Field(560)", "Delete Dimension(561)", "Delete ArrayType: Field[](562)", "Delete SimpleName: getDeclardFields(563)", "Delete SimpleName: Class(564)", "Delete SimpleType: Class(565)", "Delete WildcardType: ?(566)", "Delete ParameterizedType: Class<?>(567)", "Delete SimpleName: clazz(568)", "Delete SingleVariableDeclaration(569)", "Delete SimpleName: clazz(570)", "Delete SimpleName: getDeclaredFields(571)", "Delete MethodInvocation(572)", "Delete ReturnStatement(573)", "Delete Block(574)", "Delete SimpleName: Throwable(575)", "Delete SimpleType: Throwable(576)", "Delete SimpleName: e(577)", "Delete SingleVariableDeclaration(578)", "Delete SimpleName: handleReflectionError(579)", "Delete SimpleName: clazz(580)", "Delete SimpleName: e(581)", "Delete MethodInvocation(582)", "Delete ExpressionStatement(583)", "Delete Block(584)", "Delete CatchClause(585)", "Delete TryStatement(586)", "Delete SimpleName: Field(587)", "Delete SimpleType: Field(588)", "Delete Dimension(589)", "Delete ArrayType: Field[](590)", "Delete ArrayInitializer(591)", "Delete ArrayCreation(592)", "Delete ReturnStatement(593)", "Delete Block(594)", "Delete MethodDeclaration(595)", "Delete Modifier: private(596)", "Delete PrimitiveType: void(597)", "Delete SimpleName: handleReflectionError(598)", "Delete SimpleName: Class(599)", "Delete SimpleType: Class(600)", "Delete WildcardType: ?(601)", "Delete ParameterizedType: Class<?>(602)", "Delete SimpleName: clazz(603)", "Delete SingleVariableDeclaration(604)", "Delete SimpleName: Throwable(605)", "Delete SimpleType: Throwable(606)", "Delete SimpleName: e(607)", "Delete SingleVariableDeclaration(608)", "Delete SimpleName: e(609)", "Delete NullLiteral(610)", "Delete InfixExpression: !=(611)", "Delete SimpleName: e(612)", "Delete SimpleName: NoClassDefFoundError(613)", "Delete SimpleType: NoClassDefFoundError(614)", "Delete InstanceofExpression(615)", "Delete ParenthesizedExpression(616)", "Delete SimpleName: e(617)", "Delete SimpleName: ClassNotFoundException(618)", "Delete SimpleType: ClassNotFoundException(619)", "Delete InstanceofExpression(620)", "Delete ParenthesizedExpression(621)", "Delete InfixExpression: ||(622)", "Delete SimpleName: log(623)", "Delete SimpleName: debug(624)", "Delete SimpleName: String(625)", "Delete SimpleName: format(626)", "Delete StringLiteral: \"Class %s could not be resolved because of a class path error. Governator cannot further process the class.\"(627)", "Delete SimpleName: clazz(628)", "Delete SimpleName: getName(629)", "Delete MethodInvocation(630)", "Delete MethodInvocation(631)", "Delete SimpleName: e(632)", "Delete MethodInvocation(633)", "Delete ExpressionStatement(634)", "Delete ReturnStatement(635)", "Delete Block(636)", "Delete IfStatement(637)", "Delete SimpleName: handleReflectionError(638)", "Delete SimpleName: clazz(639)", "Delete SimpleName: e(640)", "Delete SimpleName: getCause(641)", "Delete MethodInvocation(642)", "Delete MethodInvocation(643)", "Delete ExpressionStatement(644)", "Delete Block(645)", "Delete IfStatement(646)", "Delete Block(647)", "Delete MethodDeclaration(648)", "Delete Modifier: private(649)", "Delete PrimitiveType: boolean(650)", "Delete SimpleName: checkForValidations(651)", "Delete SimpleName: Field(652)", "Delete SimpleType: Field(653)", "Delete SimpleName: field(654)", "Delete SingleVariableDeclaration(655)", "Delete SimpleName: Annotation(656)", "Delete SimpleType: Annotation(657)", "Delete SimpleName: annotation(658)", "Delete SingleVariableDeclaration(659)", "Delete SimpleName: field(660)", "Delete SimpleName: getDeclaredAnnotations(661)", "Delete MethodInvocation(662)", "Delete SimpleName: annotation(663)", "Delete SimpleName: annotationType(664)", "Delete MethodInvocation(665)", "Delete SimpleName: isAnnotationPresent(666)", "Delete SimpleName: Constraint(667)", "Delete SimpleType: Constraint(668)", "Delete TypeLiteral(669)", "Delete MethodInvocation(670)", "Delete BooleanLiteral: true(671)", "Delete ReturnStatement(672)", "Delete Block(673)", "Delete IfStatement(674)", "Delete Block(675)", "Delete EnhancedForStatement(676)", "Delete BooleanLiteral: false(677)", "Delete ReturnStatement(678)", "Delete Block(679)", "Delete MethodDeclaration(680)", "Delete Modifier: private(681)", "Delete PrimitiveType: boolean(682)", "Delete SimpleName: processField(683)", "Delete SimpleName: Field(684)", "Delete SimpleType: Field(685)", "Delete SimpleName: field(686)", "Delete SingleVariableDeclaration(687)", "Delete SimpleName: Class(688)", "Delete SimpleType: Class(689)", "Delete SimpleName: Annotation(690)", "Delete SimpleType: Annotation(691)", "Delete WildcardType: ? extends Annotation(692)", "Delete ParameterizedType: Class<? extends Annotation>(693)", "Delete SimpleName: annotationClass(694)", "Delete SingleVariableDeclaration(695)", "Delete SimpleName: Multimap(696)", "Delete SimpleType: Multimap(697)", "Delete SimpleName: Class(698)", "Delete SimpleType: Class(699)", "Delete SimpleName: Annotation(700)", "Delete SimpleType: Annotation(701)", "Delete WildcardType: ? extends Annotation(702)", "Delete ParameterizedType: Class<? extends Annotation>(703)", "Delete SimpleName: String(704)", "Delete SimpleType: String(705)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,String>(706)", "Delete SimpleName: usedNames(707)", "Delete SingleVariableDeclaration(708)", "Delete SimpleName: field(709)", "Delete SimpleName: isAnnotationPresent(710)", "Delete SimpleName: annotationClass(711)", "Delete MethodInvocation(712)", "Delete SimpleName: usedNames(713)", "Delete SimpleName: get(714)", "Delete SimpleName: annotationClass(715)", "Delete MethodInvocation(716)", "Delete SimpleName: contains(717)", "Delete SimpleName: field(718)", "Delete SimpleName: getName(719)", "Delete MethodInvocation(720)", "Delete MethodInvocation(721)", "Delete PrefixExpression: !(722)", "Delete SimpleName: field(723)", "Delete SimpleName: setAccessible(724)", "Delete BooleanLiteral: true(725)", "Delete MethodInvocation(726)", "Delete ExpressionStatement(727)", "Delete SimpleName: usedNames(728)", "Delete SimpleName: put(729)", "Delete SimpleName: annotationClass(730)", "Delete SimpleName: field(731)", "Delete SimpleName: getName(732)", "Delete MethodInvocation(733)", "Delete MethodInvocation(734)", "Delete ExpressionStatement(735)", "Delete BooleanLiteral: true(736)", "Delete ReturnStatement(737)", "Delete Block(738)", "Delete IfStatement(739)", "Delete Block(740)", "Delete IfStatement(741)", "Delete BooleanLiteral: false(742)", "Delete ReturnStatement(743)", "Delete Block(744)", "Delete MethodDeclaration(745)", "Delete Modifier: private(746)", "Delete PrimitiveType: boolean(747)", "Delete SimpleName: processMethod(748)", "Delete SimpleName: Method(749)", "Delete SimpleType: Method(750)", "Delete SimpleName: method(751)", "Delete SingleVariableDeclaration(752)", "Delete SimpleName: Class(753)", "Delete SimpleType: Class(754)", "Delete SimpleName: Annotation(755)", "Delete SimpleType: Annotation(756)", "Delete WildcardType: ? extends Annotation(757)", "Delete ParameterizedType: Class<? extends Annotation>(758)", "Delete SimpleName: annotationClass(759)", "Delete SingleVariableDeclaration(760)", "Delete SimpleName: Multimap(761)", "Delete SimpleType: Multimap(762)", "Delete SimpleName: Class(763)", "Delete SimpleType: Class(764)", "Delete SimpleName: Annotation(765)", "Delete SimpleType: Annotation(766)", "Delete WildcardType: ? extends Annotation(767)", "Delete ParameterizedType: Class<? extends Annotation>(768)", "Delete SimpleName: String(769)", "Delete SimpleType: String(770)", "Delete ParameterizedType: Multimap<Class<? extends Annotation>,String>(771)", "Delete SimpleName: usedNames(772)", "Delete SingleVariableDeclaration(773)", "Delete SimpleName: method(774)", "Delete SimpleName: isAnnotationPresent(775)", "Delete SimpleName: annotationClass(776)", "Delete MethodInvocation(777)", "Delete SimpleName: usedNames(778)", "Delete SimpleName: get(779)", "Delete SimpleName: annotationClass(780)", "Delete MethodInvocation(781)", "Delete SimpleName: contains(782)", "Delete SimpleName: method(783)", "Delete SimpleName: getName(784)", "Delete MethodInvocation(785)", "Delete MethodInvocation(786)", "Delete PrefixExpression: !(787)", "Delete SimpleName: method(788)", "Delete SimpleName: setAccessible(789)", "Delete BooleanLiteral: true(790)", "Delete MethodInvocation(791)", "Delete ExpressionStatement(792)", "Delete SimpleName: usedNames(793)", "Delete SimpleName: put(794)", "Delete SimpleName: annotationClass(795)", "Delete SimpleName: method(796)", "Delete SimpleName: getName(797)", "Delete MethodInvocation(798)", "Delete MethodInvocation(799)", "Delete ExpressionStatement(800)", "Delete BooleanLiteral: true(801)", "Delete ReturnStatement(802)", "Delete Block(803)", "Delete IfStatement(804)", "Delete Block(805)", "Delete IfStatement(806)", "Delete BooleanLiteral: false(807)", "Delete ReturnStatement(808)", "Delete Block(809)", "Delete MethodDeclaration(810)", "Delete TypeDeclaration: class(811)"]}}, {"EmptyClasspathScanner_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Constructor", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Field"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: getConstructors", "DEL ReturnStatement", "DEL SimpleName: Field", "DEL SimpleName: Constructor", "DEL Block", "DEL Modifier: public", "DEL ParameterizedType: Set<Method>", "DEL ReturnStatement", "DEL SimpleName: emptySet", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Collections", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL SimpleName: getMethods", "DEL SimpleName: Override", "DEL SimpleName: emptySet", "DEL SimpleName: Collections", "DEL SimpleName: ClasspathScanner", "DEL Modifier: public", "DEL SimpleName: emptySet", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleType: Set", "DEL SimpleType: Method", "DEL SimpleName: Method", "DEL WildcardType: ?", "DEL ParameterizedType: Set<Constructor>", "DEL SimpleName: Set", "DEL MarkerAnnotation", "DEL SimpleType: ClasspathScanner", "DEL ParameterizedType: Class<?>", "DEL Modifier: public", "DEL Block", "DEL SimpleName: Set", "DEL SimpleName: Collections", "DEL SimpleName: Collections", "DEL SimpleName: emptySet", "DEL SimpleType: Class", "DEL SimpleName: getFields", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleType: Set", "DEL SimpleName: Override", "DEL SimpleName: Class", "DEL Block", "DEL ParameterizedType: Set<Field>", "DEL SimpleType: Set", "DEL Block", "DEL SimpleName: EmptyClasspathScanner", "DEL SimpleName: Set", "DEL SimpleName: Override", "DEL SimpleType: Constructor", "DEL Modifier: public", "DEL SimpleName: getClasses", "DEL SimpleType: Field", "DEL SimpleName: Set", "DEL SimpleType: Set", "DEL ParameterizedType: Set<Class<?>>", "DEL MarkerAnnotation"]}]}}, {"EmptyClasspathScanner_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.reflect.Constructor(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Field(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Method(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Collections(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Set(10)", "Delete ImportDeclaration(11)", "Delete Modifier: public(12)", "Delete SimpleName: EmptyClasspathScanner(13)", "Delete SimpleName: ClasspathScanner(14)", "Delete SimpleType: ClasspathScanner(15)", "Delete SimpleName: Override(16)", "Delete MarkerAnnotation(17)", "Delete Modifier: public(18)", "Delete SimpleName: Set(19)", "Delete SimpleType: Set(20)", "Delete SimpleName: Class(21)", "Delete SimpleType: Class(22)", "Delete WildcardType: ?(23)", "Delete ParameterizedType: Class<?>(24)", "Delete ParameterizedType: Set<Class<?>>(25)", "Delete SimpleName: getClasses(26)", "Delete SimpleName: Collections(27)", "Delete SimpleName: emptySet(28)", "Delete MethodInvocation(29)", "Delete ReturnStatement(30)", "Delete Block(31)", "Delete MethodDeclaration(32)", "Delete SimpleName: Override(33)", "Delete MarkerAnnotation(34)", "Delete Modifier: public(35)", "Delete SimpleName: Set(36)", "Delete SimpleType: Set(37)", "Delete SimpleName: Constructor(38)", "Delete SimpleType: Constructor(39)", "Delete ParameterizedType: Set<Constructor>(40)", "Delete SimpleName: getConstructors(41)", "Delete SimpleName: Collections(42)", "Delete SimpleName: emptySet(43)", "Delete MethodInvocation(44)", "Delete ReturnStatement(45)", "Delete Block(46)", "Delete MethodDeclaration(47)", "Delete SimpleName: Override(48)", "Delete MarkerAnnotation(49)", "Delete Modifier: public(50)", "Delete SimpleName: Set(51)", "Delete SimpleType: Set(52)", "Delete SimpleName: Method(53)", "Delete SimpleType: Method(54)", "Delete ParameterizedType: Set<Method>(55)", "Delete SimpleName: getMethods(56)", "Delete SimpleName: Collections(57)", "Delete SimpleName: emptySet(58)", "Delete MethodInvocation(59)", "Delete ReturnStatement(60)", "Delete Block(61)", "Delete MethodDeclaration(62)", "Delete SimpleName: Override(63)", "Delete MarkerAnnotation(64)", "Delete Modifier: public(65)", "Delete SimpleName: Set(66)", "Delete SimpleType: Set(67)", "Delete SimpleName: Field(68)", "Delete SimpleType: Field(69)", "Delete ParameterizedType: Set<Field>(70)", "Delete SimpleName: getFields(71)", "Delete SimpleName: Collections(72)", "Delete SimpleName: emptySet(73)", "Delete MethodInvocation(74)", "Delete ReturnStatement(75)", "Delete Block(76)", "Delete MethodDeclaration(77)", "Delete TypeDeclaration: class(78)"]}}, {"FilteredLifecycleListener_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6", "MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: java.util.concurrent.TimeUnit to ImportDeclaration at 0"]}]}}, {"FilteredLifecycleListener_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(217) at 6", "Move ImportDeclaration(5) into CompilationUnit(217) at 6", "Insert ImportDeclaration(13) into CompilationUnit(217) at 6", "Insert QualifiedName: java.util.concurrent.TimeUnit(12) into ImportDeclaration(13) at 0"]}}, {"LifecycleListener_cluster": {"actions": [{"root": "UPDATE from When Guice injects an object, this callback will be notified.   to When Guice injects an object, this callback will be notified", "operations": ["UPD TextElement: When Guice injects an object, this callback will be notified.   from When Guice injects an object, this callback will be notified.   to When Guice injects an object, this callback will be notified"]}]}}, {"LifecycleListener_diff": {"operations": ["Update TextElement: When Guice injects an object, this callback will be notified.  (11) to When Guice injects an object, this callback will be notified"]}}, {"LifecycleManager_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 24", "MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 18", "MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 24", "MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 10", "MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 24", "MOV ImportDeclaration to CompilationUnit at 24", "MOV ImportDeclaration to CompilationUnit at 24", "MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 24", "MOV ImportDeclaration to CompilationUnit at 18", "MOV ImportDeclaration to CompilationUnit at 34", "MOV ImportDeclaration to CompilationUnit at 34"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: com.google.inject.Injector to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 14", "operations": ["INS ImportDeclaration to CompilationUnit at 14", "INS QualifiedName: com.netflix.governator.configuration.ConfigurationMapper to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: com.netflix.governator.configuration.ConfigurationProvider to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS ImportDeclaration to CompilationUnit at 21", "INS QualifiedName: javax.annotation.PostConstruct to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 23", "operations": ["INS QualifiedName: javax.annotation.Resource to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 23"]}, {"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS ImportDeclaration to CompilationUnit at 24", "INS QualifiedName: javax.annotation.Resources to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 25", "operations": ["INS ImportDeclaration to CompilationUnit at 25", "INS QualifiedName: javax.naming.NamingException to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 31", "operations": ["INS ImportDeclaration to CompilationUnit at 31", "INS QualifiedName: java.beans.Introspector to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 33", "operations": ["INS QualifiedName: java.lang.annotation.Annotation to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 33"]}, {"root": "INS ImportDeclaration to CompilationUnit at 34", "operations": ["INS ImportDeclaration to CompilationUnit at 34", "INS QualifiedName: java.lang.reflect.Field to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 35", "operations": ["INS QualifiedName: java.lang.reflect.Method to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 35"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 32", "MOV FieldDeclaration to TypeDeclaration: class at 10", "MOV MethodDeclaration to TypeDeclaration: class at 32"]}, {"root": "UPDATE from com.netflix.governator.guice.LifecycleAnnotationProcessor to com.netflix.governator.annotations.PreConfiguration", "operations": ["UPD QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor from com.netflix.governator.guice.LifecycleAnnotationProcessor to com.netflix.governator.annotations.PreConfiguration"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 11", "operations": ["INS SimpleType: ConfigurationMapper to FieldDeclaration at 2", "INS SimpleName: configurationMapper to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 11"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 13", "operations": ["INS ParameterizedType: Collection<ResourceLocator> to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: private to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 13", "INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 18", "operations": ["INS SimpleName: Injector to SimpleType: Injector at 0", "INS SimpleName: injector to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: Injector to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 18"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SimpleName: LifecycleManager to MethodDeclaration at 1", "INS SimpleType: LifecycleManagerArguments to ClassInstanceCreation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS ConstructorInvocation to Block at 0", "INS ClassInstanceCreation to ConstructorInvocation at 0", "INS SimpleName: LifecycleManagerArguments to SimpleType: LifecycleManagerArguments at 0", "INS Block to MethodDeclaration at 2", "INS NullLiteral to ConstructorInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 19"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS SimpleName: arguments to ConstructorInvocation at 0", "INS NullLiteral to ConstructorInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS ConstructorInvocation to Block at 0", "INS Block to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleName: Injector to SimpleType: Injector at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: configurationProvider to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: LifecycleManager to MethodDeclaration at 2", "INS SimpleType: Injector to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 7", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: injector to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: configurationMapper to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 26", "operations": ["INS Block to MethodDeclaration at 6", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleName: add to MethodDeclaration at 3", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 26"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 36", "operations": ["INS Modifier: private to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: setState to MethodDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 36"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 40", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ThrowStatement to Block at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: Exception to MethodDeclaration at 4", "INS MethodInvocation to InfixExpression: == at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: loadClassResource to MethodDeclaration at 2", "INS SimpleType: Object to TypeLiteral at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS IfStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: type to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: resource to MethodInvocation at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: resource to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS SimpleName: resource to InfixExpression: + at 1", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS MethodDeclaration to TypeDeclaration: class at 40", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS ParenthesizedExpression to InfixExpression: || at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS TypeLiteral to InfixExpression: == at 1", "INS SimpleName: name to MethodInvocation at 1", "INS SimpleName: resource to MethodInvocation at 1", "INS StringLiteral: \"Class resources must have both name() and type(): \" to InfixExpression: + at 0", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: findResource to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 41", "operations": ["INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS SimpleName: method to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: substring to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: startsWith to MethodInvocation at 1", "INS SimpleName: findResource to MethodInvocation at 0", "INS SimpleName: method to MethodInvocation at 0", "INS BooleanLiteral: true to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: != to ParenthesizedExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: obj to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS NumberLiteral: 0 to ArrayAccess at 1", "INS Block to IfStatement at 1", "INS SimpleName: getParameterTypes to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 4", "INS Block to IfStatement at 1", "INS ArrayAccess to MethodInvocation at 2", "INS SimpleName: getParameterTypes to MethodInvocation at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: beanName to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS InfixExpression: || to IfStatement at 0", "INS ExpressionStatement to Block at 8", "INS FieldAccess to InfixExpression: != at 0", "INS SimpleName: method to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getReturnType to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS MethodInvocation to InfixExpression: + at 0", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleType: Object to VariableDeclarationStatement at 0", "INS SimpleName: method to MethodInvocation at 0", "INS StringLiteral: \"set\" to MethodInvocation at 0", "INS SimpleName: toLowerCase to MethodInvocation at 1", "INS SimpleName: beanName to Assignment: = at 0", "INS ExpressionStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: beanName to MethodInvocation at 0", "INS ExpressionStatement to Block at 5", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS ThrowStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: adjustResource to MethodInvocation at 0", "INS SimpleName: String to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: beanName to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: obj to MethodInvocation at 0", "INS SimpleName: resource to MethodInvocation at 1", "INS MethodInvocation to FieldAccess at 0", "INS SimpleName: obj to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS NumberLiteral: 1 to InfixExpression: != at 1", "INS StringLiteral: \"%s.%s() is not a proper JavaBean setter.\" to MethodInvocation at 2", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: resourceObj to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 6", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: method to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS ParenthesizedExpression to InfixExpression: || at 0", "INS MethodDeclaration to TypeDeclaration: class at 41", "INS InfixExpression: != to ParenthesizedExpression at 0", "INS SimpleName: resource to MethodInvocation at 1", "INS SimpleName: beanName to InfixExpression: + at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleName: beanName to VariableDeclarationFragment at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS MethodInvocation to ArrayAccess at 0", "INS SimpleName: invoke to MethodInvocation at 1", "INS SimpleName: method to SingleVariableDeclaration at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: siteName to VariableDeclarationFragment at 0", "INS Block to MethodDeclaration at 7", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS StringLiteral: \"set\" to MethodInvocation at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: resourceObj to MethodInvocation at 3", "INS SimpleName: getClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: beanName to Assignment: = at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"/\" to InfixExpression: + at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SimpleType: Exception to ClassInstanceCreation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: length to FieldAccess at 1", "INS SimpleName: setMethodResource to MethodDeclaration at 2", "INS SimpleName: siteName to MethodInvocation at 3", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: setAccessible to MethodInvocation at 1", "INS SimpleName: method to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: decapitalize to MethodInvocation at 1", "INS SimpleName: resource to Assignment: = at 0", "INS SimpleName: format to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: Void.TYPE to InfixExpression: != at 1", "INS SimpleName: Introspector to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS InfixExpression: + to VariableDeclarationFragment at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: resourceObj to VariableDeclarationFragment at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS SimpleName: field to MethodInvocation at 0", "INS SimpleName: resource to MethodInvocation at 1", "INS ExpressionStatement to Block at 3", "INS SimpleName: resourceObj to MethodInvocation at 3", "INS MethodInvocation to InfixExpression: + at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS SimpleName: Field to SimpleType: Field at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS SimpleName: Object to SimpleType: Object at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS BooleanLiteral: true to MethodInvocation at 2", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: obj to MethodInvocation at 2", "INS SimpleName: field to MethodInvocation at 0", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: field to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"/\" to InfixExpression: + at 1", "INS SimpleName: obj to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS SimpleName: setFieldResource to MethodDeclaration at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: setAccessible to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: siteName to MethodInvocation at 3", "INS SimpleName: set to MethodInvocation at 1", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: field to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: Exception to MethodDeclaration at 6", "INS SimpleName: findResource to MethodInvocation at 0", "INS SimpleName: adjustResource to MethodInvocation at 0", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: siteName to VariableDeclarationFragment at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: Object to VariableDeclarationStatement at 0", "INS SimpleType: Field to SingleVariableDeclaration at 0", "INS SimpleName: field to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS Block to MethodDeclaration at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: resource to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: siteName to SingleVariableDeclaration at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS TextElement: Method needed for eventual java7 compatibility to TagElement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: resource to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: name to MethodInvocation at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleType: Class to SingleVariableDeclaration at 1", "INS SimpleName: name to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: resource to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS SimpleName: siteType to SingleVariableDeclaration at 2", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: type to MethodInvocation at 1", "INS SimpleName: resource to SingleVariableDeclaration at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: mappedName to MethodInvocation at 1", "INS SimpleName: resource to MethodInvocation at 0", "INS SimpleName: name to MethodInvocation at 0", "INS SimpleType: String to SingleVariableDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: authenticationType to MethodInvocation at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS InfixExpression: == to ParenthesizedExpression at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: resource to MethodInvocation at 0", "INS SimpleName: shareable to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Class to SimpleType: Class at 0", "INS NumberLiteral: 0 to InfixExpression: == at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: resource to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS MethodDeclaration to AnonymousClassDeclaration at 3", "INS SimpleName: authenticationType to MethodDeclaration at 3", "INS SimpleName: shareable to MethodDeclaration at 3", "INS SimpleName: mappedName to MethodDeclaration at 3", "INS SimpleName: adjustResource to MethodDeclaration at 2", "INS SimpleName: type to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS Block to MethodDeclaration at 4", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 4", "INS TypeLiteral to InfixExpression: == at 1", "INS SimpleName: resource to MethodInvocation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 5", "INS MethodDeclaration to AnonymousClassDeclaration at 6", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: siteName to ConditionalExpression at 1", "INS SimpleName: description to MethodInvocation at 1", "INS SimpleType: Class to MethodDeclaration at 2", "INS MethodInvocation to InfixExpression: == at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: Resource to MethodDeclaration at 1", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: Object to TypeLiteral at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS ReturnStatement to Block at 0", "INS Modifier: public to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 7", "INS ReturnStatement to Block at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: annotationType to MethodDeclaration at 3", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: resource to MethodInvocation at 0", "INS SimpleName: name to MethodDeclaration at 3", "INS ReturnStatement to Block at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: lookup to MethodDeclaration at 3", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: Class to SimpleType: Class at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS TagElement to Javadoc at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: Resource to ClassInstanceCreation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: type to MethodDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: description to MethodDeclaration at 3", "INS SimpleType: String to MethodDeclaration at 2", "INS SimpleType: AuthenticationType to MethodDeclaration at 2", "INS SimpleName: siteType to ConditionalExpression at 1", "INS ReturnStatement to Block at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: resource to MethodInvocation at 0", "INS SimpleType: Resource to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS ParameterizedType: Class<? extends Annotation> to MethodDeclaration at 2", "INS SimpleName: AuthenticationType to SimpleType: AuthenticationType at 0", "INS SimpleName: annotationType to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 44", "operations": ["INS MethodInvocation to InfixExpression: > at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: resourceLocators to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS ThisExpression to MethodInvocation at 3", "INS SimpleName: locate to MethodDeclaration at 3", "INS SimpleName: findResource to MethodDeclaration at 2", "INS SimpleName: nextInChain to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleType: ResourceLocator to ClassInstanceCreation at 0", "INS ReturnStatement to Block at 3", "INS SimpleName: defaultFindResource to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS InfixExpression: > to IfStatement at 0", "INS SimpleName: ResourceLocator to SimpleType: ResourceLocator at 0", "INS SimpleName: ResourceLocator to SimpleType: ResourceLocator at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleName: ResourceLocator to SimpleType: ResourceLocator at 0", "INS SimpleName: hasNext to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS Modifier: public to MethodDeclaration at 1", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 7", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to MethodDeclaration at 5", "INS IfStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: next to MethodInvocation at 1", "INS SimpleType: ResourceLocator to VariableDeclarationStatement at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: resource to MethodInvocation at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: iterator to MethodInvocation at 0", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 1", "INS SimpleName: resource to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS ParameterizedType: Iterator<ResourceLocator> to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Exception to MethodDeclaration at 6", "INS SimpleType: Exception to MethodDeclaration at 4", "INS SimpleName: resource to MethodInvocation at 1", "INS SimpleName: locator to VariableDeclarationFragment at 0", "INS SimpleName: nextInChain to VariableDeclarationFragment at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: locate to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: ResourceLocator to SimpleType: ResourceLocator at 0", "INS SimpleType: Object to MethodDeclaration at 1", "INS SimpleName: next to MethodInvocation at 1", "INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS SimpleType: ResourceLocator to ParameterizedType: Iterator<ResourceLocator> at 1", "INS SimpleName: locate to MethodInvocation at 1", "INS SimpleName: defaultFindResource to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: resourceLocators to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: iterator to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: ResourceLocator to SingleVariableDeclaration at 0", "INS Modifier: private to MethodDeclaration at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: resource to MethodInvocation at 1", "INS SimpleName: size to MethodInvocation at 1", "INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS SimpleName: nextInChain to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 44", "INS SimpleName: iterator to VariableDeclarationFragment at 0", "INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS SimpleType: Object to MethodDeclaration at 2", "INS ReturnStatement to Block at 1", "INS SimpleName: locator to MethodInvocation at 0", "INS SimpleName: iterator to MethodInvocation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS SimpleName: ResourceLocator to SimpleType: ResourceLocator at 0", "INS SimpleName: iterator to MethodInvocation at 0", "INS SimpleType: ResourceLocator to VariableDeclarationStatement at 0", "INS SimpleType: Iterator to ParameterizedType: Iterator<ResourceLocator> at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 45", "operations": ["INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS Modifier: private to MethodDeclaration at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS StringLiteral: \"Could not find resource: \" to InfixExpression: + at 0", "INS SimpleName: resource to MethodInvocation at 0", "INS SimpleType: NamingException to ClassInstanceCreation at 0", "INS ReturnStatement to Block at 1", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS ThrowStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 45", "INS SimpleName: resource to InfixExpression: + at 1", "INS SimpleName: getInstance to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Exception to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5", "INS SimpleName: Object to SimpleType: Object at 0", "INS InfixExpression: == to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: NamingException to SimpleType: NamingException at 0", "INS SimpleName: injector to InfixExpression: == at 0", "INS SimpleName: injector to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: Exception to SimpleType: Exception at 0", "INS IfStatement to Block at 0", "INS SimpleName: defaultFindResource to MethodDeclaration at 2", "INS SimpleType: Object to MethodDeclaration at 1", "INS SimpleName: type to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 49", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 49", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleType: ValidationException to MethodDeclaration at 4", "INS SimpleName: initializeObjectPostStart to MethodDeclaration at 2", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: ValidationException to SimpleType: ValidationException at 0"]}, {"root": "UPDATE from LifecycleMethodsFactory to ConfigurationProvider", "operations": ["UPD SimpleName: LifecycleMethodsFactory from LifecycleMethodsFactory to ConfigurationProvider", "UPD SimpleType: LifecycleMethodsFactory from LifecycleMethodsFactory to ConfigurationProvider"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV Modifier: private to FieldDeclaration at 0", "MOV Modifier: final to FieldDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleName: LifecycleManager to MethodDeclaration at 1", "MOV Modifier: public to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SimpleType: Exception to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SimpleType: Exception to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS SimpleName: Object to SimpleType: Object at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: Exception to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from add to startInstance", "operations": ["UPD SimpleName: add from add to startInstance", "UPD SimpleName: add from add to startInstance"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "INS SimpleType: Exception to MethodDeclaration at 5", "operations": ["INS SimpleName: Exception to SimpleType: Exception at 0", "INS SimpleType: Exception to MethodDeclaration at 5"]}, {"root": "UPDATE from setState to setResources", "operations": ["UPD SimpleName: setState from setState to setResources"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: obj to SingleVariableDeclaration at 1", "INS SimpleType: Object to SingleVariableDeclaration at 0", "INS SimpleName: Object to SimpleType: Object at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SimpleType: Exception to MethodDeclaration at 5", "operations": ["INS SimpleType: Exception to MethodDeclaration at 5", "INS SimpleName: Exception to SimpleType: Exception at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5", "MOV MethodInvocation to IfStatement at 0"]}, {"root": "UPDATE from methodsFactory to configurationProvider", "operations": ["UPD SimpleName: methodsFactory from methodsFactory to configurationProvider"]}, {"root": "UPDATE from List to ConfigurationMapper", "operations": ["UPD SimpleName: List from List to ConfigurationMapper"]}, {"root": "MOVE from SimpleType: ConfigurationMapper", "operations": ["MOV SimpleName: List to SimpleType: ConfigurationMapper at 0"]}, {"root": "UPDATE from List to Collection", "operations": ["UPD SimpleName: List from List to Collection", "UPD SimpleType: List from List to Collection"]}, {"root": "MOVE from ParameterizedType: Collection<ResourceLocator>", "operations": ["MOV SimpleType: List to ParameterizedType: Collection<ResourceLocator> at 0", "MOV SimpleType: LifecycleAnnotationProcessor to ParameterizedType: Collection<ResourceLocator> at 1"]}, {"root": "UPDATE from LifecycleAnnotationProcessor to ResourceLocator", "operations": ["UPD SimpleType: LifecycleAnnotationProcessor from LifecycleAnnotationProcessor to ResourceLocator", "UPD SimpleName: LifecycleAnnotationProcessor from LifecycleAnnotationProcessor to ResourceLocator"]}, {"root": "UPDATE from processors to resourceLocators", "operations": ["UPD SimpleName: processors from processors to resourceLocators"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV SimpleName: processors to VariableDeclarationFragment at 0"]}, {"root": "UPDATE from LifecycleMethodsFactory to LifecycleManagerArguments", "operations": ["UPD SimpleName: LifecycleMethodsFactory from LifecycleMethodsFactory to LifecycleManagerArguments", "UPD SimpleType: LifecycleMethodsFactory from LifecycleMethodsFactory to LifecycleManagerArguments"]}, {"root": "UPDATE from methodsFactory to arguments", "operations": ["UPD SimpleName: methodsFactory from methodsFactory to arguments", "UPD SimpleName: LifecycleState from LifecycleState to arguments", "UPD SimpleName: Lists from Lists to arguments"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 6", "MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 5", "MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 3"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS IfStatement to Block at 2", "INS SimpleName: initializeObjectPostStart to MethodInvocation at 0", "INS SimpleName: obj to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV EnhancedForStatement to Block at 1"]}, {"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS SimpleName: methods to MethodInvocation at 0", "INS SimpleName: log to MethodInvocation at 0", "INS EnhancedForStatement to Block at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: obj to MethodInvocation at 2", "INS SimpleName: debug to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: methodsFor to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: PreConfiguration to TypeLiteral at 0", "INS SimpleName: preConfiguration to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: preConfiguration to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS SimpleName: format to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: preConfiguration to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: String to MethodInvocation at 0", "INS StringLiteral: \"\\t%s()\" to MethodInvocation at 2", "INS SimpleName: invoke to MethodInvocation at 1", "INS SimpleName: PreConfiguration to SimpleType: PreConfiguration at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: configurationDocumentation to MethodInvocation at 3", "INS SimpleName: configurationMapper to MethodInvocation at 0", "INS SimpleName: methods to MethodInvocation at 5", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: mapConfiguration to MethodInvocation at 1", "INS SimpleName: configurationProvider to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS SimpleName: obj to MethodInvocation at 4"]}, {"root": "INS ExpressionStatement to Block at 6", "operations": ["INS SimpleName: obj to MethodInvocation at 1", "INS SimpleName: setResources to MethodInvocation at 0", "INS SimpleName: methods to MethodInvocation at 2", "INS ExpressionStatement to Block at 6", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS EnhancedForStatement to Block at 8", "operations": ["INS SimpleType: Method to SingleVariableDeclaration at 0", "INS TypeLiteral to MethodInvocation at 2", "INS StringLiteral: \"\\t%s()\" to MethodInvocation at 2", "INS SimpleName: postConstruct to SingleVariableDeclaration at 1", "INS SimpleName: PostConstruct to SimpleType: PostConstruct at 0", "INS SimpleName: invoke to MethodInvocation at 1", "INS SimpleType: PostConstruct to TypeLiteral at 0", "INS SimpleName: methodsFor to MethodInvocation at 1", "INS SimpleName: methods to MethodInvocation at 0", "INS SimpleName: postConstruct to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: format to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: postConstruct to MethodInvocation at 0", "INS SimpleName: obj to MethodInvocation at 2", "INS SimpleName: Method to SimpleType: Method at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: String to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: debug to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS EnhancedForStatement to Block at 8", "INS ExpressionStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 9", "operations": ["INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS ParameterizedType: Collection<Method> to VariableDeclarationStatement at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1", "INS SimpleName: preDestroyMethods to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 9"]}, {"root": "INS EnhancedForStatement to Block at 0", "operations": ["INS Block to EnhancedForStatement at 2", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS SimpleName: obj to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: value to MethodInvocation at 1", "INS SimpleName: Field to SimpleType: Field at 0", "INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS SimpleName: methods to MethodInvocation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Resources to VariableDeclarationStatement at 0", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS SimpleName: fieldsFor to MethodInvocation at 1", "INS EnhancedForStatement to Block at 1", "INS SimpleName: field to MethodInvocation at 0", "INS SimpleType: Field to SingleVariableDeclaration at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: resource to MethodInvocation at 3", "INS SimpleName: resources to VariableDeclarationFragment at 0", "INS SimpleName: resources to MethodInvocation at 0", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS TypeLiteral to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: setFieldResource to MethodInvocation at 0", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS SimpleName: field to MethodInvocation at 2", "INS SimpleName: field to SingleVariableDeclaration at 1", "INS SimpleType: Resources to TypeLiteral at 0", "INS SimpleType: Resources to TypeLiteral at 0", "INS EnhancedForStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS EnhancedForStatement to Block at 1", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Resource to TypeLiteral at 0", "INS SimpleName: obj to MethodInvocation at 1", "INS SimpleName: field to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: fieldsFor to MethodInvocation at 1", "INS SimpleName: methods to MethodInvocation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: resource to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Resource to VariableDeclarationStatement at 0", "INS SimpleName: setFieldResource to MethodInvocation at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Field to SingleVariableDeclaration at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS SimpleName: resource to MethodInvocation at 3", "INS SimpleName: Field to SimpleType: Field at 0", "INS SimpleType: Resource to TypeLiteral at 0", "INS SimpleName: field to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 2", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: field to SingleVariableDeclaration at 1", "INS EnhancedForStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV EnhancedForStatement to Block at 2"]}, {"root": "INS EnhancedForStatement to Block at 3", "operations": ["INS SimpleType: Method to SingleVariableDeclaration at 0", "INS SimpleName: method to SingleVariableDeclaration at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: methods to MethodInvocation at 0", "INS SimpleType: Resource to TypeLiteral at 0", "INS SimpleName: method to MethodInvocation at 2", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleType: Resource to TypeLiteral at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS ExpressionStatement to Block at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: resource to VariableDeclarationFragment at 0", "INS SimpleName: obj to MethodInvocation at 1", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS SimpleType: Resource to VariableDeclarationStatement at 0", "INS SimpleName: methodsFor to MethodInvocation at 1", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS EnhancedForStatement to Block at 3", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: resource to MethodInvocation at 3", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS SimpleName: setMethodResource to MethodInvocation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0"]}, {"root": "INS EnhancedForStatement to Block at 4", "operations": ["INS Block to EnhancedForStatement at 2", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS EnhancedForStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: resources to MethodInvocation at 0", "INS SimpleName: classAnnotationsFor to MethodInvocation at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleType: Resources to TypeLiteral at 0", "INS SimpleName: resource to MethodInvocation at 1", "INS SimpleName: value to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: methods to MethodInvocation at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: resources to SingleVariableDeclaration at 1", "INS EnhancedForStatement to Block at 4", "INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS SimpleName: loadClassResource to MethodInvocation at 0", "INS SimpleType: Resources to SingleVariableDeclaration at 0", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS SimpleName: Resources to SimpleType: Resources at 0"]}, {"root": "INS EnhancedForStatement to Block at 5", "operations": ["INS SimpleName: resource to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: resource to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS SimpleType: Resource to TypeLiteral at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: loadClassResource to MethodInvocation at 0", "INS EnhancedForStatement to Block at 5", "INS SimpleName: classAnnotationsFor to MethodInvocation at 1", "INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS SimpleName: methods to MethodInvocation at 0", "INS SimpleName: Resource to SimpleType: Resource at 0"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: SuppressWarnings to SingleMemberAnnotation at 0", "INS StringLiteral: \"SimplifiableIfStatement\" to SingleMemberAnnotation at 1"]}, {"root": "INS ParameterizedType: Collection<Method> to FieldDeclaration at 1", "operations": ["INS SimpleName: Collection to SimpleType: Collection at 0", "INS ParameterizedType: Collection<Method> to FieldDeclaration at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SimpleName: Collection to SimpleType: Collection at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Method to ParameterizedType: Collection<Method> at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS ParameterizedType: Collection<Method> to SingleVariableDeclaration at 0", "INS SimpleName: preDestroyMethods to SingleVariableDeclaration at 1", "INS SimpleType: Collection to ParameterizedType: Collection<Method> at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: resourceLocators to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS InfixExpression: > to IfStatement at 0", "operations": ["INS NumberLiteral: 0 to InfixExpression: > at 1", "INS SimpleName: size to MethodInvocation at 1", "INS InfixExpression: > to IfStatement at 0", "INS MethodInvocation to InfixExpression: > at 0"]}, {"root": "INS MethodInvocation to EnhancedForStatement at 1", "operations": ["INS SimpleType: Resources to TypeLiteral at 0", "INS TypeLiteral to MethodInvocation at 2", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: methods to MethodInvocation at 0", "INS SimpleName: methodsFor to MethodInvocation at 1", "INS SimpleName: Resources to SimpleType: Resources at 0"]}, {"root": "INS Block to EnhancedForStatement at 2", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: resource to SingleVariableDeclaration at 1", "INS SimpleName: resources to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: Resource to SingleVariableDeclaration at 0", "INS EnhancedForStatement to Block at 1", "INS SimpleType: Resources to TypeLiteral at 0", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleType: Resources to VariableDeclarationStatement at 0", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Resource to SimpleType: Resource at 0"]}, {"root": "UPDATE from methods to preDestroyMethods", "operations": ["UPD SimpleName: methods from methods to preDestroyMethods", "UPD SimpleName: methods from methods to preDestroyMethods", "UPD SimpleName: methods from methods to preDestroyMethods", "UPD SimpleName: isEmpty from isEmpty to preDestroyMethods", "UPD SimpleName: methods from methods to preDestroyMethods"]}, {"root": "UPDATE from methodsFactory to injector", "operations": ["UPD SimpleName: methodsFactory from methodsFactory to injector", "UPD SimpleName: methodsFactory from methodsFactory to injector"]}, {"root": "UPDATE from processor to obj", "operations": ["UPD SimpleName: processor from processor to obj"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 3", "operations": ["INS ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "UPDATE from methodsFactory to methods", "operations": ["UPD SimpleName: methodsFactory from methodsFactory to methods"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1", "MOV SimpleName: methodsFactory to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV SimpleName: isEmpty to MethodInvocation at 0"]}, {"root": "UPDATE from LifecycleAnnotationProcessor to Method", "operations": ["UPD SimpleType: LifecycleAnnotationProcessor from LifecycleAnnotationProcessor to Method", "UPD SimpleName: LifecycleAnnotationProcessor from LifecycleAnnotationProcessor to Method"]}, {"root": "UPDATE from methods to method", "operations": ["UPD SimpleName: methods from methods to method", "UPD SimpleName: processor from processor to method"]}, {"root": "INS EnhancedForStatement to Block at 2", "operations": ["INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: log to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: record.preDestroyMethods to EnhancedForStatement at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: invoke to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS SimpleName: log to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"\\t%s()\" to MethodInvocation at 2", "INS SimpleName: preDestroy to SingleVariableDeclaration at 1", "INS SimpleName: preDestroy to MethodInvocation at 0", "INS SimpleName: format to MethodInvocation at 1", "INS SimpleName: e to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: record.obj to MethodInvocation at 2", "INS EnhancedForStatement to Block at 2", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS Block to TryStatement at 0", "INS SimpleName: error to MethodInvocation at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: preDestroy to MethodInvocation at 0", "INS TryStatement to Block at 1", "INS StringLiteral: \"Couldn't stop lifecycle managed instance\" to MethodInvocation at 2", "INS Block to CatchClause at 1", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: String to MethodInvocation at 0", "INS Block to EnhancedForStatement at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: values to MethodInvocation at 1", "MOV SimpleName: LifecycleState to MethodInvocation at 0"]}, {"root": "UPDATE from values to getConfigurationMapper", "operations": ["UPD SimpleName: values from values to getConfigurationMapper"]}, {"root": "UPDATE from processors to ImmutableSet", "operations": ["UPD SimpleName: processors from processors to ImmutableSet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: processors to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: add to MethodInvocation at 1"]}, {"root": "UPDATE from add to copyOf", "operations": ["UPD SimpleName: add from add to copyOf"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAnnotationProcessors to MethodInvocation at 1", "MOV SimpleName: arguments to MethodInvocation at 0"]}, {"root": "UPDATE from getAnnotationProcessors to getConfigurationProvider", "operations": ["UPD SimpleName: getAnnotationProcessors from getAnnotationProcessors to getConfigurationProvider"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: LifecycleMethods to ClassInstanceCreation at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV Block to EnhancedForStatement at 2"]}, {"root": "INS SimpleName: getResourceLocators to MethodInvocation at 1", "operations": ["INS SimpleName: getResourceLocators to MethodInvocation at 1"]}, {"root": "UPDATE from state to resources", "operations": ["UPD SimpleName: state from state to resources"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ordinal to MethodInvocation at 1", "MOV SimpleName: state to MethodInvocation at 0"]}, {"root": "UPDATE from ordinal to value", "operations": ["UPD SimpleName: ordinal from ordinal to value"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Exception to ClassInstanceCreation at 0"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "INS SimpleName: o to MethodInvocation at 0", "operations": ["INS SimpleName: o to MethodInvocation at 0"]}, {"root": "UPDATE from get to getAnnotation", "operations": ["UPD SimpleName: get from get to getAnnotation"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: get to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from processor to setMethodResource", "operations": ["UPD SimpleName: processor from processor to setMethodResource"]}, {"root": "INS SimpleName: resource to MethodInvocation at 4", "operations": ["INS SimpleName: resource to MethodInvocation at 4"]}, {"root": "DEL SimpleType: LifecycleAnnotationProcessor", "operations": ["DEL SimpleName: LifecycleAnnotationProcessor", "DEL SimpleType: LifecycleAnnotationProcessor"]}, {"root": "DEL SimpleName: newArrayList", "operations": ["DEL SimpleName: newArrayList"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL ParameterizedType: List<List<LifecycleAnnotationProcessor>>", "DEL SimpleType: List", "DEL SimpleName: newArrayList", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL ParameterizedType: List<LifecycleAnnotationProcessor>", "DEL SimpleName: Lists"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: LifecycleAnnotationProcessor", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL Block", "DEL Block", "DEL MethodDeclaration", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleName: state", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL SimpleType: LifecycleState", "DEL SimpleName: LifecycleState", "DEL SingleVariableDeclaration", "DEL SimpleName: processor"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: ordinal", "DEL SimpleName: processor", "DEL MethodInvocation", "DEL SimpleName: getState", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: processors"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: create", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: methods", "operations": ["DEL SimpleName: methods"]}, {"root": "DEL SimpleName: methods", "operations": ["DEL SimpleName: methods"]}, {"root": "DEL SimpleName: methods", "operations": ["DEL SimpleName: methods"]}, {"root": "DEL SimpleName: methods", "operations": ["DEL SimpleName: methods"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL MethodInvocation", "DEL PrefixExpression: !"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL SimpleName: process", "operations": ["DEL SimpleName: process"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: processors", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL Block", "DEL SimpleName: methods", "DEL NullLiteral", "DEL InfixExpression: !="]}, {"root": "DEL QualifiedName: record.methods", "operations": ["DEL QualifiedName: record.methods"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL Block", "operations": ["DEL TryStatement", "DEL SimpleName: warn", "DEL SimpleName: e", "DEL CatchClause", "DEL StringLiteral: \"Error changing state in warmp phase\"", "DEL Block", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: log", "DEL Block", "DEL SimpleName: e"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL SimpleName: o", "DEL SimpleType: StateKey", "DEL CastExpression", "DEL SimpleName: StateKey", "DEL ParenthesizedExpression"]}]}}, {"LifecycleManager_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(2224) at 34", "Move ImportDeclaration(5) into CompilationUnit(2224) at 34", "Move ImportDeclaration(7) into CompilationUnit(2224) at 34", "Move ImportDeclaration(9) into CompilationUnit(2224) at 34", "Move ImportDeclaration(11) into CompilationUnit(2224) at 34", "Move ImportDeclaration(13) into CompilationUnit(2224) at 34", "Move ImportDeclaration(15) into CompilationUnit(2224) at 34", "Move ImportDeclaration(17) into CompilationUnit(2224) at 34", "Move ImportDeclaration(19) into CompilationUnit(2224) at 34", "Move ImportDeclaration(21) into CompilationUnit(2224) at 34", "Move ImportDeclaration(23) into CompilationUnit(2224) at 24", "Move ImportDeclaration(25) into CompilationUnit(2224) at 24", "Move ImportDeclaration(27) into CompilationUnit(2224) at 24", "Move ImportDeclaration(29) into CompilationUnit(2224) at 24", "Move ImportDeclaration(31) into CompilationUnit(2224) at 24", "Move ImportDeclaration(33) into CompilationUnit(2224) at 24", "Move ImportDeclaration(35) into CompilationUnit(2224) at 18", "Move ImportDeclaration(37) into CompilationUnit(2224) at 18", "Move ImportDeclaration(61) into CompilationUnit(2224) at 10", "Insert ImportDeclaration(19) into CompilationUnit(2224) at 9", "Insert ImportDeclaration(29) into CompilationUnit(2224) at 14", "Insert ImportDeclaration(31) into CompilationUnit(2224) at 15", "Insert ImportDeclaration(43) into CompilationUnit(2224) at 21", "Insert ImportDeclaration(47) into CompilationUnit(2224) at 23", "Insert ImportDeclaration(49) into CompilationUnit(2224) at 24", "Insert ImportDeclaration(51) into CompilationUnit(2224) at 25", "Insert ImportDeclaration(63) into CompilationUnit(2224) at 31", "Insert ImportDeclaration(67) into CompilationUnit(2224) at 33", "Insert ImportDeclaration(69) into CompilationUnit(2224) at 34", "Insert ImportDeclaration(71) into CompilationUnit(2224) at 35", "Move FieldDeclaration(201) into TypeDeclaration: class(2223) at 10", "Move MethodDeclaration(506) into TypeDeclaration: class(2223) at 32", "Move MethodDeclaration(907) into TypeDeclaration: class(2223) at 32", "Insert QualifiedName: com.google.inject.Injector(18) into ImportDeclaration(19) at 0", "Update QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor(60) to com.netflix.governator.annotations.PreConfiguration", "Insert QualifiedName: com.netflix.governator.configuration.ConfigurationMapper(28) into ImportDeclaration(29) at 0", "Insert QualifiedName: com.netflix.governator.configuration.ConfigurationProvider(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: javax.annotation.PostConstruct(42) into ImportDeclaration(43) at 0", "Insert QualifiedName: javax.annotation.Resource(46) into ImportDeclaration(47) at 0", "Insert QualifiedName: javax.annotation.Resources(48) into ImportDeclaration(49) at 0", "Insert QualifiedName: javax.naming.NamingException(50) into ImportDeclaration(51) at 0", "Insert QualifiedName: java.beans.Introspector(62) into ImportDeclaration(63) at 0", "Insert QualifiedName: java.lang.annotation.Annotation(66) into ImportDeclaration(67) at 0", "Insert QualifiedName: java.lang.reflect.Field(68) into ImportDeclaration(69) at 0", "Insert QualifiedName: java.lang.reflect.Method(70) into ImportDeclaration(71) at 0", "Insert FieldDeclaration(179) into TypeDeclaration: class(2223) at 11", "Insert FieldDeclaration(199) into TypeDeclaration: class(2223) at 13", "Insert FieldDeclaration(247) into TypeDeclaration: class(2223) at 18", "Insert MethodDeclaration(256) into TypeDeclaration: class(2223) at 19", "Insert MethodDeclaration(267) into TypeDeclaration: class(2223) at 20", "Insert MethodDeclaration(335) into TypeDeclaration: class(2223) at 21", "Insert MethodDeclaration(412) into TypeDeclaration: class(2223) at 24", "Insert MethodDeclaration(835) into TypeDeclaration: class(2223) at 34", "Insert MethodDeclaration(1311) into TypeDeclaration: class(2223) at 38", "Insert MethodDeclaration(1439) into TypeDeclaration: class(2223) at 39", "Insert MethodDeclaration(1498) into TypeDeclaration: class(2223) at 40", "Insert MethodDeclaration(1643) into TypeDeclaration: class(2223) at 41", "Insert MethodDeclaration(1736) into TypeDeclaration: class(2223) at 42", "Insert MethodDeclaration(1767) into TypeDeclaration: class(2223) at 43", "Insert MethodDeclaration(1983) into TypeDeclaration: class(2223) at 47", "Update SimpleType: LifecycleMethodsFactory(198) to ConfigurationProvider", "Move Modifier: private(202) into FieldDeclaration(179) at 0", "Move Modifier: final(203) into FieldDeclaration(179) at 1", "Insert SimpleType: ConfigurationMapper(176) into FieldDeclaration(179) at 2", "Insert VariableDeclarationFragment(178) into FieldDeclaration(179) at 3", "Insert Modifier: private(190) into FieldDeclaration(199) at 0", "Insert Modifier: final(191) into FieldDeclaration(199) at 1", "Insert ParameterizedType: Collection<ResourceLocator>(196) into FieldDeclaration(199) at 2", "Insert VariableDeclarationFragment(198) into FieldDeclaration(199) at 3", "Insert Modifier: private(241) into FieldDeclaration(247) at 0", "Insert Modifier: final(242) into FieldDeclaration(247) at 1", "Insert SimpleType: Injector(244) into FieldDeclaration(247) at 2", "Insert VariableDeclarationFragment(246) into FieldDeclaration(247) at 3", "Insert Modifier: public(248) into MethodDeclaration(256) at 0", "Insert SimpleName: LifecycleManager(249) into MethodDeclaration(256) at 1", "Insert Block(255) into MethodDeclaration(256) at 2", "Move Modifier: public(220) into MethodDeclaration(267) at 0", "Move SimpleName: LifecycleManager(221) into MethodDeclaration(267) at 1", "Move SingleVariableDeclaration(229) into MethodDeclaration(267) at 2", "Insert Block(266) into MethodDeclaration(267) at 3", "Move MarkerAnnotation(219) into MethodDeclaration(335) at 0", "Insert Modifier: public(270) into MethodDeclaration(335) at 1", "Insert SimpleName: LifecycleManager(271) into MethodDeclaration(335) at 2", "Move SingleVariableDeclaration(225) into MethodDeclaration(335) at 3", "Insert SingleVariableDeclaration(279) into MethodDeclaration(335) at 4", "Insert Block(334) into MethodDeclaration(335) at 5", "Move Javadoc(359) into MethodDeclaration(412) at 0", "Insert Modifier: public(392) into MethodDeclaration(412) at 1", "Insert PrimitiveType: void(393) into MethodDeclaration(412) at 2", "Insert SimpleName: add(394) into MethodDeclaration(412) at 3", "Move SingleVariableDeclaration(366) into MethodDeclaration(412) at 4", "Move SimpleType: Exception(368) into MethodDeclaration(412) at 5", "Insert Block(411) into MethodDeclaration(412) at 6", "Move Javadoc(393) into MethodDeclaration(463) at 0", "Insert SingleVariableDeclaration(432) into MethodDeclaration(463) at 4", "Move SingleVariableDeclaration(404) into MethodDeclaration(463) at 5", "Move SimpleType: Exception(406) into MethodDeclaration(463) at 6", "Insert Modifier: private(801) into MethodDeclaration(835) at 0", "Insert PrimitiveType: void(802) into MethodDeclaration(835) at 1", "Insert SimpleName: setState(803) into MethodDeclaration(835) at 2", "Move SingleVariableDeclaration(850) into MethodDeclaration(835) at 3", "Move SingleVariableDeclaration(858) into MethodDeclaration(835) at 4", "Insert Block(834) into MethodDeclaration(835) at 5", "Update Modifier: public(394) to private", "Update SimpleName: add(396) to startInstance", "Insert SingleVariableDeclaration(940) into MethodDeclaration(1080) at 3", "Move SingleVariableDeclaration(854) into MethodDeclaration(1080) at 4", "Insert SimpleType: Exception(946) into MethodDeclaration(1080) at 5", "Update SimpleName: setState(846) to setResources", "Insert SingleVariableDeclaration(1087) into MethodDeclaration(1270) at 3", "Move SingleVariableDeclaration(1381) into MethodDeclaration(1270) at 4", "Insert SimpleType: Exception(1093) into MethodDeclaration(1270) at 5", "Insert Modifier: private(1271) into MethodDeclaration(1311) at 0", "Insert PrimitiveType: void(1272) into MethodDeclaration(1311) at 1", "Insert SimpleName: loadClassResource(1273) into MethodDeclaration(1311) at 2", "Insert SingleVariableDeclaration(1277) into MethodDeclaration(1311) at 3", "Insert SimpleType: Exception(1279) into MethodDeclaration(1311) at 4", "Insert Block(1310) into MethodDeclaration(1311) at 5", "Insert Modifier: private(1312) into MethodDeclaration(1439) at 0", "Insert PrimitiveType: void(1313) into MethodDeclaration(1439) at 1", "Insert SimpleName: setMethodResource(1314) into MethodDeclaration(1439) at 2", "Insert SingleVariableDeclaration(1318) into MethodDeclaration(1439) at 3", "Insert SingleVariableDeclaration(1322) into MethodDeclaration(1439) at 4", "Insert SingleVariableDeclaration(1326) into MethodDeclaration(1439) at 5", "Move SimpleType: Exception(860) into MethodDeclaration(1439) at 6", "Insert Block(1438) into MethodDeclaration(1439) at 7", "Insert Modifier: private(1440) into MethodDeclaration(1498) at 0", "Insert PrimitiveType: void(1441) into MethodDeclaration(1498) at 1", "Insert SimpleName: setFieldResource(1442) into MethodDeclaration(1498) at 2", "Insert SingleVariableDeclaration(1446) into MethodDeclaration(1498) at 3", "Insert SingleVariableDeclaration(1450) into MethodDeclaration(1498) at 4", "Insert SingleVariableDeclaration(1454) into MethodDeclaration(1498) at 5", "Insert SimpleType: Exception(1456) into MethodDeclaration(1498) at 6", "Insert Block(1497) into MethodDeclaration(1498) at 7", "Insert Modifier: private(1499) into MethodDeclaration(1643) at 0", "Insert SimpleType: Resource(1501) into MethodDeclaration(1643) at 1", "Insert SimpleName: adjustResource(1502) into MethodDeclaration(1643) at 2", "Insert SingleVariableDeclaration(1507) into MethodDeclaration(1643) at 3", "Insert SingleVariableDeclaration(1512) into MethodDeclaration(1643) at 4", "Insert SingleVariableDeclaration(1517) into MethodDeclaration(1643) at 5", "Insert Block(1642) into MethodDeclaration(1643) at 6", "Insert Modifier: private(1644) into MethodDeclaration(1736) at 0", "Insert SimpleType: Object(1646) into MethodDeclaration(1736) at 1", "Insert SimpleName: findResource(1647) into MethodDeclaration(1736) at 2", "Insert SingleVariableDeclaration(1651) into MethodDeclaration(1736) at 3", "Insert SimpleType: Exception(1653) into MethodDeclaration(1736) at 4", "Insert Block(1735) into MethodDeclaration(1736) at 5", "Insert Modifier: private(1737) into MethodDeclaration(1767) at 0", "Insert SimpleType: Object(1739) into MethodDeclaration(1767) at 1", "Insert SimpleName: defaultFindResource(1740) into MethodDeclaration(1767) at 2", "Insert SingleVariableDeclaration(1744) into MethodDeclaration(1767) at 3", "Insert SimpleType: Exception(1746) into MethodDeclaration(1767) at 4", "Insert Block(1766) into MethodDeclaration(1767) at 5", "Insert Modifier: private(1946) into MethodDeclaration(1983) at 0", "Insert PrimitiveType: void(1947) into MethodDeclaration(1983) at 1", "Insert SimpleName: initializeObjectPostStart(1948) into MethodDeclaration(1983) at 2", "Move SingleVariableDeclaration(400) into MethodDeclaration(1983) at 3", "Insert SimpleType: ValidationException(1954) into MethodDeclaration(1983) at 4", "Move Block(503) into MethodDeclaration(1983) at 5", "Update SimpleName: LifecycleMethodsFactory(197) to ConfigurationProvider", "Update SimpleName: methodsFactory(199) to configurationProvider", "Update SimpleName: List(204) to ConfigurationMapper", "Move SimpleName: List(204) into SimpleType: ConfigurationMapper(176) at 0", "Insert SimpleName: configurationMapper(177) into VariableDeclarationFragment(178) at 0", "Update SimpleType: List(207) to Collection", "Move SimpleType: List(207) into ParameterizedType: Collection<ResourceLocator>(196) at 0", "Update SimpleType: LifecycleAnnotationProcessor(209) to ResourceLocator", "Move SimpleType: LifecycleAnnotationProcessor(209) into ParameterizedType: Collection<ResourceLocator>(196) at 1", "Update SimpleName: processors(212) to resourceLocators", "Move SimpleName: processors(212) into VariableDeclarationFragment(198) at 0", "Insert SimpleName: Injector(243) into SimpleType: Injector(244) at 0", "Insert SimpleName: injector(245) into VariableDeclarationFragment(246) at 0", "Insert ConstructorInvocation(254) into Block(255) at 0", "Update SimpleType: LifecycleMethodsFactory(227) to LifecycleManagerArguments", "Update SimpleName: methodsFactory(228) to arguments", "Insert ConstructorInvocation(265) into Block(266) at 0", "Insert SimpleType: Injector(277) into SingleVariableDeclaration(279) at 0", "Insert SimpleName: injector(278) into SingleVariableDeclaration(279) at 1", "Move ExpressionStatement(235) into Block(334) at 0", "Insert ExpressionStatement(291) into Block(334) at 1", "Move ExpressionStatement(244) into Block(334) at 2", "Move ExpressionStatement(278) into Block(334) at 3", "Move ExpressionStatement(250) into Block(334) at 4", "Move ExpressionStatement(256) into Block(334) at 5", "Move ExpressionStatement(262) into Block(334) at 6", "Insert ExpressionStatement(333) into Block(334) at 7", "Move ExpressionStatement(299) into Block(411) at 0", "Insert SimpleType: Object(430) into SingleVariableDeclaration(432) at 0", "Insert SimpleName: obj(431) into SingleVariableDeclaration(432) at 1", "Move ExpressionStatement(416) into Block(462) at 0", "Insert IfStatement(461) into Block(462) at 2", "Move ExpressionStatement(869) into Block(834) at 0", "Move EnhancedForStatement(882) into Block(834) at 1", "Insert SimpleType: Object(938) into SingleVariableDeclaration(940) at 0", "Insert SimpleName: obj(939) into SingleVariableDeclaration(940) at 1", "Insert SimpleName: Exception(945) into SimpleType: Exception(946) at 0", "Insert EnhancedForStatement(992) into Block(1079) at 2", "Insert ExpressionStatement(1005) into Block(1079) at 4", "Insert ExpressionStatement(1015) into Block(1079) at 6", "Insert EnhancedForStatement(1048) into Block(1079) at 8", "Insert VariableDeclarationStatement(1062) into Block(1079) at 9", "Insert SimpleType: Object(1085) into SingleVariableDeclaration(1087) at 0", "Insert SimpleName: obj(1086) into SingleVariableDeclaration(1087) at 1", "Insert SimpleName: Exception(1092) into SimpleType: Exception(1093) at 0", "Insert EnhancedForStatement(1131) into Block(1269) at 0", "Insert EnhancedForStatement(1160) into Block(1269) at 1", "Move EnhancedForStatement(903) into Block(1269) at 2", "Insert EnhancedForStatement(1227) into Block(1269) at 3", "Insert EnhancedForStatement(1252) into Block(1269) at 4", "Insert EnhancedForStatement(1268) into Block(1269) at 5", "Insert SimpleType: Resource(1275) into SingleVariableDeclaration(1277) at 0", "Insert SimpleName: resource(1276) into SingleVariableDeclaration(1277) at 1", "Insert SimpleName: Exception(1278) into SimpleType: Exception(1279) at 0", "Insert IfStatement(1305) into Block(1310) at 0", "Insert ExpressionStatement(1309) into Block(1310) at 1", "Insert SimpleType: Object(1316) into SingleVariableDeclaration(1318) at 0", "Insert SimpleName: obj(1317) into SingleVariableDeclaration(1318) at 1", "Insert SimpleType: Method(1320) into SingleVariableDeclaration(1322) at 0", "Insert SimpleName: method(1321) into SingleVariableDeclaration(1322) at 1", "Insert SimpleType: Resource(1324) into SingleVariableDeclaration(1326) at 0", "Insert SimpleName: resource(1325) into SingleVariableDeclaration(1326) at 1", "Insert IfStatement(1361) into Block(1438) at 0", "Insert VariableDeclarationStatement(1369) into Block(1438) at 1", "Insert IfStatement(1386) into Block(1438) at 2", "Insert ExpressionStatement(1393) into Block(1438) at 3", "Insert VariableDeclarationStatement(1406) into Block(1438) at 4", "Insert ExpressionStatement(1418) into Block(1438) at 5", "Insert VariableDeclarationStatement(1426) into Block(1438) at 6", "Insert ExpressionStatement(1431) into Block(1438) at 7", "Insert ExpressionStatement(1437) into Block(1438) at 8", "Insert SimpleType: Object(1444) into SingleVariableDeclaration(1446) at 0", "Insert SimpleName: obj(1445) into SingleVariableDeclaration(1446) at 1", "Insert SimpleType: Field(1448) into SingleVariableDeclaration(1450) at 0", "Insert SimpleName: field(1449) into SingleVariableDeclaration(1450) at 1", "Insert SimpleType: Resource(1452) into SingleVariableDeclaration(1454) at 0", "Insert SimpleName: resource(1453) into SingleVariableDeclaration(1454) at 1", "Insert SimpleName: Exception(1455) into SimpleType: Exception(1456) at 0", "Insert VariableDeclarationStatement(1471) into Block(1497) at 0", "Insert VariableDeclarationStatement(1485) into Block(1497) at 1", "Insert ExpressionStatement(1490) into Block(1497) at 2", "Insert ExpressionStatement(1496) into Block(1497) at 3", "Insert SimpleName: Resource(1500) into SimpleType: Resource(1501) at 0", "Insert Modifier: final(1503) into SingleVariableDeclaration(1507) at 0", "Insert SimpleType: Resource(1505) into SingleVariableDeclaration(1507) at 1", "Insert SimpleName: resource(1506) into SingleVariableDeclaration(1507) at 2", "Insert Modifier: final(1508) into SingleVariableDeclaration(1512) at 0", "Insert SimpleType: Class(1510) into SingleVariableDeclaration(1512) at 1", "Insert SimpleName: siteType(1511) into SingleVariableDeclaration(1512) at 2", "Insert Modifier: final(1513) into SingleVariableDeclaration(1517) at 0", "Insert SimpleType: String(1515) into SingleVariableDeclaration(1517) at 1", "Insert SimpleName: siteName(1516) into SingleVariableDeclaration(1517) at 2", "Insert ReturnStatement(1641) into Block(1642) at 0", "Insert SimpleName: Object(1645) into SimpleType: Object(1646) at 0", "Insert SimpleType: Resource(1649) into SingleVariableDeclaration(1651) at 0", "Insert SimpleName: resource(1650) into SingleVariableDeclaration(1651) at 1", "Insert SimpleName: Exception(1652) into SimpleType: Exception(1653) at 0", "Insert IfStatement(1730) into Block(1735) at 0", "Insert ReturnStatement(1734) into Block(1735) at 1", "Insert SimpleName: Object(1738) into SimpleType: Object(1739) at 0", "Insert SimpleType: Resource(1742) into SingleVariableDeclaration(1744) at 0", "Insert SimpleName: resource(1743) into SingleVariableDeclaration(1744) at 1", "Insert SimpleName: Exception(1745) into SimpleType: Exception(1746) at 0", "Insert IfStatement(1758) into Block(1766) at 0", "Insert ReturnStatement(1765) into Block(1766) at 1", "Insert SimpleName: ValidationException(1953) into SimpleType: ValidationException(1954) at 0", "Insert SingleMemberAnnotation(2136) into MethodDeclaration(2175) at 0", "Insert ParameterizedType: Collection<Method>(2191) into FieldDeclaration(2194) at 1", "Insert SingleVariableDeclaration(2207) into MethodDeclaration(2221) at 3", "Update SimpleName: List(206) to Collection", "Update SimpleName: LifecycleAnnotationProcessor(208) to ResourceLocator", "Insert ClassInstanceCreation(252) into ConstructorInvocation(254) at 0", "Insert NullLiteral(253) into ConstructorInvocation(254) at 1", "Update SimpleName: LifecycleMethodsFactory(226) to LifecycleManagerArguments", "Insert SimpleName: arguments(263) into ConstructorInvocation(265) at 0", "Insert NullLiteral(264) into ConstructorInvocation(265) at 1", "Insert SimpleName: Injector(276) into SimpleType: Injector(277) at 0", "Insert Assignment: =(290) into ExpressionStatement(291) at 0", "Insert Assignment: =(308) into ExpressionStatement(309) at 0", "Insert Assignment: =(332) into ExpressionStatement(333) at 0", "Insert SimpleName: Object(429) into SimpleType: Object(430) at 0", "Move MethodInvocation(475) into IfStatement(461) at 0", "Insert Block(460) into IfStatement(461) at 1", "Insert SimpleName: Object(937) into SimpleType: Object(938) at 0", "Insert SingleVariableDeclaration(968) into EnhancedForStatement(992) at 0", "Insert MethodInvocation(974) into EnhancedForStatement(992) at 1", "Insert Block(991) into EnhancedForStatement(992) at 2", "Insert MethodInvocation(1004) into ExpressionStatement(1005) at 0", "Insert MethodInvocation(1014) into ExpressionStatement(1015) at 0", "Insert SingleVariableDeclaration(1024) into EnhancedForStatement(1048) at 0", "Insert MethodInvocation(1030) into EnhancedForStatement(1048) at 1", "Insert Block(1047) into EnhancedForStatement(1048) at 2", "Insert ParameterizedType: Collection<Method>(1053) into VariableDeclarationStatement(1062) at 0", "Insert VariableDeclarationFragment(1061) into VariableDeclarationStatement(1062) at 1", "Insert InfixExpression: >(1067) into IfStatement(1078) at 0", "Insert SimpleName: Object(1084) into SimpleType: Object(1085) at 0", "Insert SingleVariableDeclaration(1097) into EnhancedForStatement(1131) at 0", "Insert MethodInvocation(1103) into EnhancedForStatement(1131) at 1", "Insert Block(1130) into EnhancedForStatement(1131) at 2", "Insert SingleVariableDeclaration(1135) into EnhancedForStatement(1160) at 0", "Insert MethodInvocation(1141) into EnhancedForStatement(1160) at 1", "Insert Block(1159) into EnhancedForStatement(1160) at 2", "Insert MethodInvocation(1170) into EnhancedForStatement(1198) at 1", "Insert Block(1197) into EnhancedForStatement(1198) at 2", "Insert SingleVariableDeclaration(1202) into EnhancedForStatement(1227) at 0", "Insert MethodInvocation(1208) into EnhancedForStatement(1227) at 1", "Insert Block(1226) into EnhancedForStatement(1227) at 2", "Insert SingleVariableDeclaration(1231) into EnhancedForStatement(1252) at 0", "Insert MethodInvocation(1237) into EnhancedForStatement(1252) at 1", "Insert Block(1251) into EnhancedForStatement(1252) at 2", "Insert SingleVariableDeclaration(1256) into EnhancedForStatement(1268) at 0", "Insert MethodInvocation(1262) into EnhancedForStatement(1268) at 1", "Insert Block(1267) into EnhancedForStatement(1268) at 2", "Insert SimpleName: Resource(1274) into SimpleType: Resource(1275) at 0", "Insert InfixExpression: ||(1296) into IfStatement(1305) at 0", "Insert Block(1304) into IfStatement(1305) at 1", "Insert MethodInvocation(1308) into ExpressionStatement(1309) at 0", "Insert SimpleName: Object(1315) into SimpleType: Object(1316) at 0", "Insert SimpleName: Method(1319) into SimpleType: Method(1320) at 0", "Insert SimpleName: Resource(1323) into SimpleType: Resource(1324) at 0", "Insert InfixExpression: ||(1343) into IfStatement(1361) at 0", "Insert Block(1360) into IfStatement(1361) at 1", "Insert SimpleType: String(1363) into VariableDeclarationStatement(1369) at 0", "Insert VariableDeclarationFragment(1368) into VariableDeclarationStatement(1369) at 1", "Insert MethodInvocation(1375) into IfStatement(1386) at 0", "Insert Block(1385) into IfStatement(1386) at 1", "Insert Assignment: =(1392) into ExpressionStatement(1393) at 0", "Insert SimpleType: String(1395) into VariableDeclarationStatement(1406) at 0", "Insert VariableDeclarationFragment(1405) into VariableDeclarationStatement(1406) at 1", "Insert Assignment: =(1417) into ExpressionStatement(1418) at 0", "Insert SimpleType: Object(1420) into VariableDeclarationStatement(1426) at 0", "Insert VariableDeclarationFragment(1425) into VariableDeclarationStatement(1426) at 1", "Insert MethodInvocation(1430) into ExpressionStatement(1431) at 0", "Insert MethodInvocation(1436) into ExpressionStatement(1437) at 0", "Insert SimpleName: Object(1443) into SimpleType: Object(1444) at 0", "Insert SimpleName: Field(1447) into SimpleType: Field(1448) at 0", "Insert SimpleName: Resource(1451) into SimpleType: Resource(1452) at 0", "Insert SimpleType: String(1458) into VariableDeclarationStatement(1471) at 0", "Insert VariableDeclarationFragment(1470) into VariableDeclarationStatement(1471) at 1", "Insert SimpleType: Object(1473) into VariableDeclarationStatement(1485) at 0", "Insert VariableDeclarationFragment(1484) into VariableDeclarationStatement(1485) at 1", "Insert MethodInvocation(1489) into ExpressionStatement(1490) at 0", "Insert MethodInvocation(1495) into ExpressionStatement(1496) at 0", "Insert SimpleName: Resource(1504) into SimpleType: Resource(1505) at 0", "Insert SimpleName: Class(1509) into SimpleType: Class(1510) at 0", "Insert SimpleName: String(1514) into SimpleType: String(1515) at 0", "Insert ClassInstanceCreation(1640) into ReturnStatement(1641) at 0", "Insert SimpleName: Resource(1648) into SimpleType: Resource(1649) at 0", "Insert InfixExpression: >(1658) into IfStatement(1730) at 0", "Insert Block(1729) into IfStatement(1730) at 1", "Insert MethodInvocation(1733) into ReturnStatement(1734) at 0", "Insert SimpleName: Resource(1741) into SimpleType: Resource(1742) at 0", "Insert InfixExpression: ==(1749) into IfStatement(1758) at 0", "Insert Block(1757) into IfStatement(1758) at 1", "Insert MethodInvocation(1764) into ReturnStatement(1765) at 0", "Insert SimpleName: SuppressWarnings(2134) into SingleMemberAnnotation(2136) at 0", "Insert StringLiteral: \"SimplifiableIfStatement\"(2135) into SingleMemberAnnotation(2136) at 1", "Insert SimpleType: Collection(2188) into ParameterizedType: Collection<Method>(2191) at 0", "Insert SimpleType: Method(2190) into ParameterizedType: Collection<Method>(2191) at 1", "Update SimpleName: methods(1369) to preDestroyMethods", "Insert ParameterizedType: Collection<Method>(2205) into SingleVariableDeclaration(2207) at 0", "Insert SimpleName: preDestroyMethods(2206) into SingleVariableDeclaration(2207) at 1", "Insert SimpleType: LifecycleManagerArguments(251) into ClassInstanceCreation(252) at 0", "Update SimpleName: methodsFactory(233) to injector", "Insert SimpleName: configurationMapper(286) into Assignment: =(290) at 0", "Insert MethodInvocation(289) into Assignment: =(290) at 1", "Insert SimpleName: resourceLocators(301) into Assignment: =(308) at 0", "Insert MethodInvocation(307) into Assignment: =(308) at 1", "Insert SimpleName: configurationProvider(328) into Assignment: =(332) at 0", "Insert MethodInvocation(331) into Assignment: =(332) at 1", "Update SimpleName: processor(297) to obj", "Insert ClassInstanceCreation(408) into MethodInvocation(409) at 2", "Update SimpleName: add(369) to startInstance", "Update SimpleName: methodsFactory(371) to methods", "Move SimpleName: methodsFactory(371) into MethodInvocation(452) at 2", "Insert ExpressionStatement(459) into Block(460) at 0", "Insert SimpleType: Method(966) into SingleVariableDeclaration(968) at 0", "Insert SimpleName: preConfiguration(967) into SingleVariableDeclaration(968) at 1", "Insert SimpleName: methods(969) into MethodInvocation(974) at 0", "Insert SimpleName: methodsFor(970) into MethodInvocation(974) at 1", "Insert TypeLiteral(973) into MethodInvocation(974) at 2", "Insert ExpressionStatement(985) into Block(991) at 0", "Insert ExpressionStatement(990) into Block(991) at 1", "Insert SimpleName: configurationMapper(998) into MethodInvocation(1004) at 0", "Insert SimpleName: mapConfiguration(999) into MethodInvocation(1004) at 1", "Insert SimpleName: configurationProvider(1000) into MethodInvocation(1004) at 2", "Insert SimpleName: configurationDocumentation(1001) into MethodInvocation(1004) at 3", "Insert SimpleName: obj(1002) into MethodInvocation(1004) at 4", "Insert SimpleName: methods(1003) into MethodInvocation(1004) at 5", "Insert SimpleName: setResources(1011) into MethodInvocation(1014) at 0", "Insert SimpleName: obj(1012) into MethodInvocation(1014) at 1", "Insert SimpleName: methods(1013) into MethodInvocation(1014) at 2", "Insert SimpleType: Method(1022) into SingleVariableDeclaration(1024) at 0", "Insert SimpleName: postConstruct(1023) into SingleVariableDeclaration(1024) at 1", "Insert SimpleName: methods(1025) into MethodInvocation(1030) at 0", "Insert SimpleName: methodsFor(1026) into MethodInvocation(1030) at 1", "Insert TypeLiteral(1029) into MethodInvocation(1030) at 2", "Insert ExpressionStatement(1041) into Block(1047) at 0", "Insert ExpressionStatement(1046) into Block(1047) at 1", "Insert SimpleType: Collection(1050) into ParameterizedType: Collection<Method>(1053) at 0", "Insert SimpleType: Method(1052) into ParameterizedType: Collection<Method>(1053) at 1", "Insert SimpleName: preDestroyMethods(1054) into VariableDeclarationFragment(1061) at 0", "Move MethodInvocation(459) into VariableDeclarationFragment(1061) at 1", "Insert MethodInvocation(1065) into InfixExpression: >(1067) at 0", "Insert NumberLiteral: 0(1066) into InfixExpression: >(1067) at 1", "Insert SimpleType: Field(1095) into SingleVariableDeclaration(1097) at 0", "Insert SimpleName: field(1096) into SingleVariableDeclaration(1097) at 1", "Insert SimpleName: methods(1098) into MethodInvocation(1103) at 0", "Insert SimpleName: fieldsFor(1099) into MethodInvocation(1103) at 1", "Insert TypeLiteral(1102) into MethodInvocation(1103) at 2", "Insert VariableDeclarationStatement(1114) into Block(1130) at 0", "Insert EnhancedForStatement(1129) into Block(1130) at 1", "Insert SimpleType: Field(1133) into SingleVariableDeclaration(1135) at 0", "Insert SimpleName: field(1134) into SingleVariableDeclaration(1135) at 1", "Insert SimpleName: methods(1136) into MethodInvocation(1141) at 0", "Insert SimpleName: fieldsFor(1137) into MethodInvocation(1141) at 1", "Insert TypeLiteral(1140) into MethodInvocation(1141) at 2", "Insert VariableDeclarationStatement(1152) into Block(1159) at 0", "Insert ExpressionStatement(1158) into Block(1159) at 1", "Update SimpleType: LifecycleAnnotationProcessor(887) to Method", "Update SimpleName: processor(888) to method", "Insert SimpleName: methods(1165) into MethodInvocation(1170) at 0", "Insert SimpleName: methodsFor(1166) into MethodInvocation(1170) at 1", "Insert TypeLiteral(1169) into MethodInvocation(1170) at 2", "Insert VariableDeclarationStatement(1181) into Block(1197) at 0", "Insert EnhancedForStatement(1196) into Block(1197) at 1", "Insert SimpleType: Method(1200) into SingleVariableDeclaration(1202) at 0", "Insert SimpleName: method(1201) into SingleVariableDeclaration(1202) at 1", "Insert SimpleName: methods(1203) into MethodInvocation(1208) at 0", "Insert SimpleName: methodsFor(1204) into MethodInvocation(1208) at 1", "Insert TypeLiteral(1207) into MethodInvocation(1208) at 2", "Insert VariableDeclarationStatement(1219) into Block(1226) at 0", "Insert ExpressionStatement(1225) into Block(1226) at 1", "Insert SimpleType: Resources(1229) into SingleVariableDeclaration(1231) at 0", "Insert SimpleName: resources(1230) into SingleVariableDeclaration(1231) at 1", "Insert SimpleName: methods(1232) into MethodInvocation(1237) at 0", "Insert SimpleName: classAnnotationsFor(1233) into MethodInvocation(1237) at 1", "Insert TypeLiteral(1236) into MethodInvocation(1237) at 2", "Insert EnhancedForStatement(1250) into Block(1251) at 0", "Insert SimpleType: Resource(1254) into SingleVariableDeclaration(1256) at 0", "Insert SimpleName: resource(1255) into SingleVariableDeclaration(1256) at 1", "Insert SimpleName: methods(1257) into MethodInvocation(1262) at 0", "Insert SimpleName: classAnnotationsFor(1258) into MethodInvocation(1262) at 1", "Insert TypeLiteral(1261) into MethodInvocation(1262) at 2", "Insert ExpressionStatement(1266) into Block(1267) at 0", "Insert ParenthesizedExpression(1287) into InfixExpression: ||(1296) at 0", "Insert ParenthesizedExpression(1295) into InfixExpression: ||(1296) at 1", "Insert ThrowStatement(1303) into Block(1304) at 0", "Insert SimpleName: findResource(1306) into MethodInvocation(1308) at 0", "Insert SimpleName: resource(1307) into MethodInvocation(1308) at 1", "Insert ParenthesizedExpression(1336) into InfixExpression: ||(1343) at 0", "Insert ParenthesizedExpression(1342) into InfixExpression: ||(1343) at 1", "Insert ThrowStatement(1359) into Block(1360) at 0", "Insert SimpleName: String(1362) into SimpleType: String(1363) at 0", "Insert SimpleName: beanName(1364) into VariableDeclarationFragment(1368) at 0", "Insert MethodInvocation(1367) into VariableDeclarationFragment(1368) at 1", "Insert MethodInvocation(1372) into MethodInvocation(1375) at 0", "Insert SimpleName: startsWith(1373) into MethodInvocation(1375) at 1", "Insert StringLiteral: \"set\"(1374) into MethodInvocation(1375) at 2", "Insert ExpressionStatement(1384) into Block(1385) at 0", "Insert SimpleName: beanName(1387) into Assignment: =(1392) at 0", "Insert MethodInvocation(1391) into Assignment: =(1392) at 1", "Insert SimpleName: String(1394) into SimpleType: String(1395) at 0", "Insert SimpleName: siteName(1396) into VariableDeclarationFragment(1405) at 0", "Insert InfixExpression: +(1404) into VariableDeclarationFragment(1405) at 1", "Insert SimpleName: resource(1407) into Assignment: =(1417) at 0", "Insert MethodInvocation(1416) into Assignment: =(1417) at 1", "Insert SimpleName: Object(1419) into SimpleType: Object(1420) at 0", "Insert SimpleName: resourceObj(1421) into VariableDeclarationFragment(1425) at 0", "Insert MethodInvocation(1424) into VariableDeclarationFragment(1425) at 1", "Insert SimpleName: method(1427) into MethodInvocation(1430) at 0", "Insert SimpleName: setAccessible(1428) into MethodInvocation(1430) at 1", "Insert BooleanLiteral: true(1429) into MethodInvocation(1430) at 2", "Insert SimpleName: method(1432) into MethodInvocation(1436) at 0", "Insert SimpleName: invoke(1433) into MethodInvocation(1436) at 1", "Insert SimpleName: obj(1434) into MethodInvocation(1436) at 2", "Insert SimpleName: resourceObj(1435) into MethodInvocation(1436) at 3", "Insert SimpleName: String(1457) into SimpleType: String(1458) at 0", "Insert SimpleName: siteName(1459) into VariableDeclarationFragment(1470) at 0", "Insert InfixExpression: +(1469) into VariableDeclarationFragment(1470) at 1", "Insert SimpleName: Object(1472) into SimpleType: Object(1473) at 0", "Insert SimpleName: resourceObj(1474) into VariableDeclarationFragment(1484) at 0", "Insert MethodInvocation(1483) into VariableDeclarationFragment(1484) at 1", "Insert SimpleName: field(1486) into MethodInvocation(1489) at 0", "Insert SimpleName: setAccessible(1487) into MethodInvocation(1489) at 1", "Insert BooleanLiteral: true(1488) into MethodInvocation(1489) at 2", "Insert SimpleName: field(1491) into MethodInvocation(1495) at 0", "Insert SimpleName: set(1492) into MethodInvocation(1495) at 1", "Insert SimpleName: obj(1493) into MethodInvocation(1495) at 2", "Insert SimpleName: resourceObj(1494) into MethodInvocation(1495) at 3", "Insert SimpleType: Resource(1519) into ClassInstanceCreation(1640) at 0", "Insert AnonymousClassDeclaration(1639) into ClassInstanceCreation(1640) at 1", "Insert MethodInvocation(1656) into InfixExpression: >(1658) at 0", "Insert NumberLiteral: 0(1657) into InfixExpression: >(1658) at 1", "Insert VariableDeclarationStatement(1670) into Block(1729) at 0", "Insert VariableDeclarationStatement(1678) into Block(1729) at 1", "Insert VariableDeclarationStatement(1722) into Block(1729) at 2", "Insert ReturnStatement(1728) into Block(1729) at 3", "Insert SimpleName: defaultFindResource(1731) into MethodInvocation(1733) at 0", "Insert SimpleName: resource(1732) into MethodInvocation(1733) at 1", "Insert SimpleName: injector(1747) into InfixExpression: ==(1749) at 0", "Insert NullLiteral(1748) into InfixExpression: ==(1749) at 1", "Insert ThrowStatement(1756) into Block(1757) at 0", "Insert SimpleName: injector(1759) into MethodInvocation(1764) at 0", "Insert SimpleName: getInstance(1760) into MethodInvocation(1764) at 1", "Insert MethodInvocation(1763) into MethodInvocation(1764) at 2", "Insert EnhancedForStatement(1838) into Block(1847) at 2", "Insert SimpleName: Collection(2187) into SimpleType: Collection(2188) at 0", "Insert SimpleName: Method(2189) into SimpleType: Method(2190) at 0", "Insert SimpleType: Collection(2202) into ParameterizedType: Collection<Method>(2205) at 0", "Insert SimpleType: Method(2204) into ParameterizedType: Collection<Method>(2205) at 1", "Insert SimpleName: LifecycleManagerArguments(250) into SimpleType: LifecycleManagerArguments(251) at 0", "Update SimpleName: methodsFactory(231) to injector", "Update SimpleName: LifecycleState(267) to arguments", "Move SimpleName: LifecycleState(267) into MethodInvocation(289) at 0", "Update SimpleName: values(268) to getConfigurationMapper", "Move SimpleName: values(268) into MethodInvocation(289) at 1", "Update SimpleName: processors(270) to ImmutableSet", "Move SimpleName: processors(270) into MethodInvocation(307) at 0", "Update SimpleName: add(271) to copyOf", "Move SimpleName: add(271) into MethodInvocation(307) at 1", "Move MethodInvocation(276) into MethodInvocation(307) at 2", "Move SimpleName: arguments(285) into MethodInvocation(331) at 0", "Update SimpleName: getAnnotationProcessors(286) to getConfigurationProvider", "Move SimpleName: getAnnotationProcessors(286) into MethodInvocation(331) at 1", "Move SimpleType: LifecycleMethods(1368) into ClassInstanceCreation(408) at 0", "Move MethodInvocation(375) into ClassInstanceCreation(408) at 1", "Insert MethodInvocation(458) into ExpressionStatement(459) at 0", "Insert SimpleName: Method(965) into SimpleType: Method(966) at 0", "Insert SimpleType: PreConfiguration(972) into TypeLiteral(973) at 0", "Insert MethodInvocation(984) into ExpressionStatement(985) at 0", "Insert MethodInvocation(989) into ExpressionStatement(990) at 0", "Insert SimpleName: Method(1021) into SimpleType: Method(1022) at 0", "Insert SimpleType: PostConstruct(1028) into TypeLiteral(1029) at 0", "Insert MethodInvocation(1040) into ExpressionStatement(1041) at 0", "Insert MethodInvocation(1045) into ExpressionStatement(1046) at 0", "Insert SimpleName: Collection(1049) into SimpleType: Collection(1050) at 0", "Insert SimpleName: Method(1051) into SimpleType: Method(1052) at 0", "Update SimpleName: isEmpty(460) to preDestroyMethods", "Move SimpleName: isEmpty(460) into MethodInvocation(1065) at 0", "Insert SimpleName: size(1064) into MethodInvocation(1065) at 1", "Insert SimpleName: Field(1094) into SimpleType: Field(1095) at 0", "Insert SimpleType: Resources(1101) into TypeLiteral(1102) at 0", "Insert SimpleType: Resources(1105) into VariableDeclarationStatement(1114) at 0", "Insert VariableDeclarationFragment(1113) into VariableDeclarationStatement(1114) at 1", "Insert SingleVariableDeclaration(1118) into EnhancedForStatement(1129) at 0", "Insert MethodInvocation(1121) into EnhancedForStatement(1129) at 1", "Insert Block(1128) into EnhancedForStatement(1129) at 2", "Insert SimpleName: Field(1132) into SimpleType: Field(1133) at 0", "Insert SimpleType: Resource(1139) into TypeLiteral(1140) at 0", "Insert SimpleType: Resource(1143) into VariableDeclarationStatement(1152) at 0", "Insert VariableDeclarationFragment(1151) into VariableDeclarationStatement(1152) at 1", "Insert MethodInvocation(1157) into ExpressionStatement(1158) at 0", "Update SimpleName: LifecycleAnnotationProcessor(886) to Method", "Insert SimpleType: Resources(1168) into TypeLiteral(1169) at 0", "Insert SimpleType: Resources(1172) into VariableDeclarationStatement(1181) at 0", "Insert VariableDeclarationFragment(1180) into VariableDeclarationStatement(1181) at 1", "Insert SingleVariableDeclaration(1185) into EnhancedForStatement(1196) at 0", "Insert MethodInvocation(1188) into EnhancedForStatement(1196) at 1", "Move Block(902) into EnhancedForStatement(1196) at 2", "Insert SimpleName: Method(1199) into SimpleType: Method(1200) at 0", "Insert SimpleType: Resource(1206) into TypeLiteral(1207) at 0", "Insert SimpleType: Resource(1210) into VariableDeclarationStatement(1219) at 0", "Insert VariableDeclarationFragment(1218) into VariableDeclarationStatement(1219) at 1", "Insert MethodInvocation(1224) into ExpressionStatement(1225) at 0", "Insert SimpleName: Resources(1228) into SimpleType: Resources(1229) at 0", "Insert SimpleType: Resources(1235) into TypeLiteral(1236) at 0", "Insert SingleVariableDeclaration(1241) into EnhancedForStatement(1250) at 0", "Insert MethodInvocation(1244) into EnhancedForStatement(1250) at 1", "Insert Block(1249) into EnhancedForStatement(1250) at 2", "Insert SimpleName: Resource(1253) into SimpleType: Resource(1254) at 0", "Insert SimpleType: Resource(1260) into TypeLiteral(1261) at 0", "Insert MethodInvocation(1265) into ExpressionStatement(1266) at 0", "Insert InfixExpression: ==(1286) into ParenthesizedExpression(1287) at 0", "Insert InfixExpression: ==(1294) into ParenthesizedExpression(1295) at 0", "Insert ClassInstanceCreation(1302) into ThrowStatement(1303) at 0", "Insert InfixExpression: !=(1335) into ParenthesizedExpression(1336) at 0", "Insert InfixExpression: !=(1341) into ParenthesizedExpression(1342) at 0", "Insert ClassInstanceCreation(1358) into ThrowStatement(1359) at 0", "Insert SimpleName: method(1365) into MethodInvocation(1367) at 0", "Insert SimpleName: getName(1366) into MethodInvocation(1367) at 1", "Insert SimpleName: beanName(1370) into MethodInvocation(1372) at 0", "Insert SimpleName: toLowerCase(1371) into MethodInvocation(1372) at 1", "Insert Assignment: =(1383) into ExpressionStatement(1384) at 0", "Insert SimpleName: Introspector(1388) into MethodInvocation(1391) at 0", "Insert SimpleName: decapitalize(1389) into MethodInvocation(1391) at 1", "Insert SimpleName: beanName(1390) into MethodInvocation(1391) at 2", "Insert MethodInvocation(1401) into InfixExpression: +(1404) at 0", "Insert StringLiteral: \"/\"(1402) into InfixExpression: +(1404) at 1", "Insert SimpleName: beanName(1403) into InfixExpression: +(1404) at 2", "Insert SimpleName: adjustResource(1408) into MethodInvocation(1416) at 0", "Insert SimpleName: resource(1409) into MethodInvocation(1416) at 1", "Insert ArrayAccess(1414) into MethodInvocation(1416) at 2", "Insert SimpleName: siteName(1415) into MethodInvocation(1416) at 3", "Insert SimpleName: findResource(1422) into MethodInvocation(1424) at 0", "Insert SimpleName: resource(1423) into MethodInvocation(1424) at 1", "Insert MethodInvocation(1464) into InfixExpression: +(1469) at 0", "Insert StringLiteral: \"/\"(1465) into InfixExpression: +(1469) at 1", "Insert MethodInvocation(1468) into InfixExpression: +(1469) at 2", "Insert SimpleName: findResource(1475) into MethodInvocation(1483) at 0", "Insert MethodInvocation(1482) into MethodInvocation(1483) at 1", "Insert SimpleName: Resource(1518) into SimpleType: Resource(1519) at 0", "Insert MethodDeclaration(1541) into AnonymousClassDeclaration(1639) at 0", "Insert MethodDeclaration(1553) into AnonymousClassDeclaration(1639) at 1", "Insert MethodDeclaration(1575) into AnonymousClassDeclaration(1639) at 2", "Insert MethodDeclaration(1587) into AnonymousClassDeclaration(1639) at 3", "Insert MethodDeclaration(1598) into AnonymousClassDeclaration(1639) at 4", "Insert MethodDeclaration(1610) into AnonymousClassDeclaration(1639) at 5", "Insert MethodDeclaration(1622) into AnonymousClassDeclaration(1639) at 6", "Insert MethodDeclaration(1638) into AnonymousClassDeclaration(1639) at 7", "Insert SimpleName: resourceLocators(1654) into MethodInvocation(1656) at 0", "Insert SimpleName: size(1655) into MethodInvocation(1656) at 1", "Insert Modifier: final(1659) into VariableDeclarationStatement(1670) at 0", "Insert ParameterizedType: Iterator<ResourceLocator>(1664) into VariableDeclarationStatement(1670) at 1", "Insert VariableDeclarationFragment(1669) into VariableDeclarationStatement(1670) at 2", "Insert SimpleType: ResourceLocator(1672) into VariableDeclarationStatement(1678) at 0", "Insert VariableDeclarationFragment(1677) into VariableDeclarationStatement(1678) at 1", "Insert SimpleType: ResourceLocator(1680) into VariableDeclarationStatement(1722) at 0", "Insert VariableDeclarationFragment(1721) into VariableDeclarationStatement(1722) at 1", "Insert MethodInvocation(1727) into ReturnStatement(1728) at 0", "Insert ClassInstanceCreation(1755) into ThrowStatement(1756) at 0", "Insert SimpleName: resource(1761) into MethodInvocation(1763) at 0", "Insert SimpleName: type(1762) into MethodInvocation(1763) at 1", "Insert SingleVariableDeclaration(1805) into EnhancedForStatement(1838) at 0", "Insert QualifiedName: record.preDestroyMethods(1806) into EnhancedForStatement(1838) at 1", "Insert Block(1837) into EnhancedForStatement(1838) at 2", "Insert SimpleName: Collection(2201) into SimpleType: Collection(2202) at 0", "Insert SimpleName: Method(2203) into SimpleType: Method(2204) at 0", "Update SimpleName: methods(1391) to preDestroyMethods", "Update SimpleName: Lists(272) to arguments", "Insert SimpleName: getResourceLocators(305) into MethodInvocation(306) at 1", "Insert SimpleName: initializeObjectPostStart(456) into MethodInvocation(458) at 0", "Insert SimpleName: obj(457) into MethodInvocation(458) at 1", "Insert SimpleName: PreConfiguration(971) into SimpleType: PreConfiguration(972) at 0", "Insert SimpleName: log(975) into MethodInvocation(984) at 0", "Insert SimpleName: debug(976) into MethodInvocation(984) at 1", "Insert MethodInvocation(983) into MethodInvocation(984) at 2", "Insert SimpleName: preConfiguration(986) into MethodInvocation(989) at 0", "Insert SimpleName: invoke(987) into MethodInvocation(989) at 1", "Insert SimpleName: obj(988) into MethodInvocation(989) at 2", "Insert SimpleName: PostConstruct(1027) into SimpleType: PostConstruct(1028) at 0", "Insert SimpleName: log(1031) into MethodInvocation(1040) at 0", "Insert SimpleName: debug(1032) into MethodInvocation(1040) at 1", "Insert MethodInvocation(1039) into MethodInvocation(1040) at 2", "Insert SimpleName: postConstruct(1042) into MethodInvocation(1045) at 0", "Insert SimpleName: invoke(1043) into MethodInvocation(1045) at 1", "Insert SimpleName: obj(1044) into MethodInvocation(1045) at 2", "Insert SimpleName: Resources(1100) into SimpleType: Resources(1101) at 0", "Insert SimpleName: Resources(1104) into SimpleType: Resources(1105) at 0", "Insert SimpleName: resources(1106) into VariableDeclarationFragment(1113) at 0", "Insert MethodInvocation(1112) into VariableDeclarationFragment(1113) at 1", "Insert SimpleType: Resource(1116) into SingleVariableDeclaration(1118) at 0", "Insert SimpleName: resource(1117) into SingleVariableDeclaration(1118) at 1", "Insert SimpleName: resources(1119) into MethodInvocation(1121) at 0", "Insert SimpleName: value(1120) into MethodInvocation(1121) at 1", "Insert ExpressionStatement(1127) into Block(1128) at 0", "Insert SimpleName: Resource(1138) into SimpleType: Resource(1139) at 0", "Insert SimpleName: Resource(1142) into SimpleType: Resource(1143) at 0", "Insert SimpleName: resource(1144) into VariableDeclarationFragment(1151) at 0", "Insert MethodInvocation(1150) into VariableDeclarationFragment(1151) at 1", "Insert SimpleName: setFieldResource(1153) into MethodInvocation(1157) at 0", "Insert SimpleName: obj(1154) into MethodInvocation(1157) at 1", "Insert SimpleName: field(1155) into MethodInvocation(1157) at 2", "Insert SimpleName: resource(1156) into MethodInvocation(1157) at 3", "Insert SimpleName: Resources(1167) into SimpleType: Resources(1168) at 0", "Insert SimpleName: Resources(1171) into SimpleType: Resources(1172) at 0", "Insert SimpleName: resources(1173) into VariableDeclarationFragment(1180) at 0", "Insert MethodInvocation(1179) into VariableDeclarationFragment(1180) at 1", "Insert SimpleType: Resource(1183) into SingleVariableDeclaration(1185) at 0", "Insert SimpleName: resource(1184) into SingleVariableDeclaration(1185) at 1", "Update SimpleName: state(892) to resources", "Move SimpleName: state(892) into MethodInvocation(1188) at 0", "Update SimpleName: ordinal(893) to value", "Move SimpleName: ordinal(893) into MethodInvocation(1188) at 1", "Insert SimpleName: Resource(1205) into SimpleType: Resource(1206) at 0", "Insert SimpleName: Resource(1209) into SimpleType: Resource(1210) at 0", "Insert SimpleName: resource(1211) into VariableDeclarationFragment(1218) at 0", "Insert MethodInvocation(1217) into VariableDeclarationFragment(1218) at 1", "Insert SimpleName: setMethodResource(1220) into MethodInvocation(1224) at 0", "Insert SimpleName: obj(1221) into MethodInvocation(1224) at 1", "Insert SimpleName: method(1222) into MethodInvocation(1224) at 2", "Insert SimpleName: resource(1223) into MethodInvocation(1224) at 3", "Insert SimpleName: Resources(1234) into SimpleType: Resources(1235) at 0", "Insert SimpleType: Resource(1239) into SingleVariableDeclaration(1241) at 0", "Insert SimpleName: resource(1240) into SingleVariableDeclaration(1241) at 1", "Insert SimpleName: resources(1242) into MethodInvocation(1244) at 0", "Insert SimpleName: value(1243) into MethodInvocation(1244) at 1", "Insert ExpressionStatement(1248) into Block(1249) at 0", "Insert SimpleName: Resource(1259) into SimpleType: Resource(1260) at 0", "Insert SimpleName: loadClassResource(1263) into MethodInvocation(1265) at 0", "Insert SimpleName: resource(1264) into MethodInvocation(1265) at 1", "Insert MethodInvocation(1284) into InfixExpression: ==(1286) at 0", "Insert NumberLiteral: 0(1285) into InfixExpression: ==(1286) at 1", "Insert MethodInvocation(1290) into InfixExpression: ==(1294) at 0", "Insert TypeLiteral(1293) into InfixExpression: ==(1294) at 1", "Move SimpleType: Exception(1245) into ClassInstanceCreation(1302) at 0", "Insert InfixExpression: +(1301) into ClassInstanceCreation(1302) at 1", "Insert FieldAccess(1333) into InfixExpression: !=(1335) at 0", "Insert NumberLiteral: 1(1334) into InfixExpression: !=(1335) at 1", "Insert MethodInvocation(1339) into InfixExpression: !=(1341) at 0", "Insert QualifiedName: Void.TYPE(1340) into InfixExpression: !=(1341) at 1", "Insert SimpleType: Exception(1345) into ClassInstanceCreation(1358) at 0", "Insert MethodInvocation(1357) into ClassInstanceCreation(1358) at 1", "Insert SimpleName: beanName(1376) into Assignment: =(1383) at 0", "Insert MethodInvocation(1382) into Assignment: =(1383) at 1", "Insert MethodInvocation(1399) into MethodInvocation(1401) at 0", "Insert SimpleName: getName(1400) into MethodInvocation(1401) at 1", "Insert MethodInvocation(1412) into ArrayAccess(1414) at 0", "Insert NumberLiteral: 0(1413) into ArrayAccess(1414) at 1", "Insert MethodInvocation(1462) into MethodInvocation(1464) at 0", "Insert SimpleName: getName(1463) into MethodInvocation(1464) at 1", "Insert SimpleName: field(1466) into MethodInvocation(1468) at 0", "Insert SimpleName: getName(1467) into MethodInvocation(1468) at 1", "Insert SimpleName: adjustResource(1476) into MethodInvocation(1482) at 0", "Insert SimpleName: resource(1477) into MethodInvocation(1482) at 1", "Insert MethodInvocation(1480) into MethodInvocation(1482) at 2", "Insert SimpleName: siteName(1481) into MethodInvocation(1482) at 3", "Insert MarkerAnnotation(1521) into MethodDeclaration(1541) at 0", "Insert Modifier: public(1522) into MethodDeclaration(1541) at 1", "Insert SimpleType: String(1524) into MethodDeclaration(1541) at 2", "Insert SimpleName: name(1525) into MethodDeclaration(1541) at 3", "Insert Block(1540) into MethodDeclaration(1541) at 4", "Insert Javadoc(1544) into MethodDeclaration(1553) at 0", "Insert Modifier: public(1545) into MethodDeclaration(1553) at 1", "Insert SimpleType: String(1547) into MethodDeclaration(1553) at 2", "Insert SimpleName: lookup(1548) into MethodDeclaration(1553) at 3", "Insert Block(1552) into MethodDeclaration(1553) at 4", "Insert MarkerAnnotation(1555) into MethodDeclaration(1575) at 0", "Insert Modifier: public(1556) into MethodDeclaration(1575) at 1", "Insert SimpleType: Class(1558) into MethodDeclaration(1575) at 2", "Insert SimpleName: type(1559) into MethodDeclaration(1575) at 3", "Insert Block(1574) into MethodDeclaration(1575) at 4", "Insert MarkerAnnotation(1577) into MethodDeclaration(1587) at 0", "Insert Modifier: public(1578) into MethodDeclaration(1587) at 1", "Insert SimpleType: AuthenticationType(1580) into MethodDeclaration(1587) at 2", "Insert SimpleName: authenticationType(1581) into MethodDeclaration(1587) at 3", "Insert Block(1586) into MethodDeclaration(1587) at 4", "Insert MarkerAnnotation(1589) into MethodDeclaration(1598) at 0", "Insert Modifier: public(1590) into MethodDeclaration(1598) at 1", "Insert PrimitiveType: boolean(1591) into MethodDeclaration(1598) at 2", "Insert SimpleName: shareable(1592) into MethodDeclaration(1598) at 3", "Insert Block(1597) into MethodDeclaration(1598) at 4", "Insert MarkerAnnotation(1600) into MethodDeclaration(1610) at 0", "Insert Modifier: public(1601) into MethodDeclaration(1610) at 1", "Insert SimpleType: String(1603) into MethodDeclaration(1610) at 2", "Insert SimpleName: mappedName(1604) into MethodDeclaration(1610) at 3", "Insert Block(1609) into MethodDeclaration(1610) at 4", "Insert MarkerAnnotation(1612) into MethodDeclaration(1622) at 0", "Insert Modifier: public(1613) into MethodDeclaration(1622) at 1", "Insert SimpleType: String(1615) into MethodDeclaration(1622) at 2", "Insert SimpleName: description(1616) into MethodDeclaration(1622) at 3", "Insert Block(1621) into MethodDeclaration(1622) at 4", "Insert MarkerAnnotation(1624) into MethodDeclaration(1638) at 0", "Insert Modifier: public(1625) into MethodDeclaration(1638) at 1", "Insert ParameterizedType: Class<? extends Annotation>(1631) into MethodDeclaration(1638) at 2", "Insert SimpleName: annotationType(1632) into MethodDeclaration(1638) at 3", "Insert Block(1637) into MethodDeclaration(1638) at 4", "Insert SimpleType: Iterator(1661) into ParameterizedType: Iterator<ResourceLocator>(1664) at 0", "Insert SimpleType: ResourceLocator(1663) into ParameterizedType: Iterator<ResourceLocator>(1664) at 1", "Insert SimpleName: iterator(1665) into VariableDeclarationFragment(1669) at 0", "Insert MethodInvocation(1668) into VariableDeclarationFragment(1669) at 1", "Insert SimpleName: ResourceLocator(1671) into SimpleType: ResourceLocator(1672) at 0", "Insert SimpleName: locator(1673) into VariableDeclarationFragment(1677) at 0", "Insert MethodInvocation(1676) into VariableDeclarationFragment(1677) at 1", "Insert SimpleName: ResourceLocator(1679) into SimpleType: ResourceLocator(1680) at 0", "Insert SimpleName: nextInChain(1681) into VariableDeclarationFragment(1721) at 0", "Insert ClassInstanceCreation(1720) into VariableDeclarationFragment(1721) at 1", "Insert SimpleName: locator(1723) into MethodInvocation(1727) at 0", "Insert SimpleName: locate(1724) into MethodInvocation(1727) at 1", "Insert SimpleName: resource(1725) into MethodInvocation(1727) at 2", "Insert SimpleName: nextInChain(1726) into MethodInvocation(1727) at 3", "Insert SimpleType: NamingException(1751) into ClassInstanceCreation(1755) at 0", "Insert InfixExpression: +(1754) into ClassInstanceCreation(1755) at 1", "Insert SimpleType: Method(1803) into SingleVariableDeclaration(1805) at 0", "Insert SimpleName: preDestroy(1804) into SingleVariableDeclaration(1805) at 1", "Insert ExpressionStatement(1817) into Block(1837) at 0", "Insert TryStatement(1836) into Block(1837) at 1", "Insert Block(2078) into MethodDeclaration(2079) at 6", "Insert SimpleName: o(2169) into MethodInvocation(2171) at 0", "Update SimpleName: methods(1389) to preDestroyMethods", "Insert SimpleName: String(977) into MethodInvocation(983) at 0", "Insert SimpleName: format(978) into MethodInvocation(983) at 1", "Insert StringLiteral: \"\\t%s()\"(979) into MethodInvocation(983) at 2", "Insert MethodInvocation(982) into MethodInvocation(983) at 3", "Insert SimpleName: String(1033) into MethodInvocation(1039) at 0", "Insert SimpleName: format(1034) into MethodInvocation(1039) at 1", "Insert StringLiteral: \"\\t%s()\"(1035) into MethodInvocation(1039) at 2", "Insert MethodInvocation(1038) into MethodInvocation(1039) at 3", "Update SimpleName: methods(468) to preDestroyMethods", "Insert SimpleName: field(1107) into MethodInvocation(1112) at 0", "Insert SimpleName: getAnnotation(1108) into MethodInvocation(1112) at 1", "Insert TypeLiteral(1111) into MethodInvocation(1112) at 2", "Insert SimpleName: Resource(1115) into SimpleType: Resource(1116) at 0", "Insert MethodInvocation(1126) into ExpressionStatement(1127) at 0", "Insert SimpleName: field(1145) into MethodInvocation(1150) at 0", "Insert SimpleName: getAnnotation(1146) into MethodInvocation(1150) at 1", "Insert TypeLiteral(1149) into MethodInvocation(1150) at 2", "Insert SimpleName: method(1174) into MethodInvocation(1179) at 0", "Update SimpleName: get(891) to getAnnotation", "Move SimpleName: get(891) into MethodInvocation(1179) at 1", "Insert TypeLiteral(1178) into MethodInvocation(1179) at 2", "Insert SimpleName: Resource(1182) into SimpleType: Resource(1183) at 0", "Insert SimpleName: method(1212) into MethodInvocation(1217) at 0", "Insert SimpleName: getAnnotation(1213) into MethodInvocation(1217) at 1", "Insert TypeLiteral(1216) into MethodInvocation(1217) at 2", "Insert SimpleName: Resource(1238) into SimpleType: Resource(1239) at 0", "Insert MethodInvocation(1247) into ExpressionStatement(1248) at 0", "Insert MethodInvocation(1282) into MethodInvocation(1284) at 0", "Insert SimpleName: length(1283) into MethodInvocation(1284) at 1", "Insert SimpleName: resource(1288) into MethodInvocation(1290) at 0", "Insert SimpleName: type(1289) into MethodInvocation(1290) at 1", "Insert SimpleType: Object(1292) into TypeLiteral(1293) at 0", "Insert StringLiteral: \"Class resources must have both name() and type(): \"(1299) into InfixExpression: +(1301) at 0", "Insert SimpleName: resource(1300) into InfixExpression: +(1301) at 1", "Insert MethodInvocation(1331) into FieldAccess(1333) at 0", "Insert SimpleName: length(1332) into FieldAccess(1333) at 1", "Insert SimpleName: method(1337) into MethodInvocation(1339) at 0", "Insert SimpleName: getReturnType(1338) into MethodInvocation(1339) at 1", "Insert SimpleName: Exception(1344) into SimpleType: Exception(1345) at 0", "Insert SimpleName: String(1346) into MethodInvocation(1357) at 0", "Insert SimpleName: format(1347) into MethodInvocation(1357) at 1", "Insert StringLiteral: \"%s.%s() is not a proper JavaBean setter.\"(1348) into MethodInvocation(1357) at 2", "Insert MethodInvocation(1353) into MethodInvocation(1357) at 3", "Insert MethodInvocation(1356) into MethodInvocation(1357) at 4", "Insert SimpleName: beanName(1377) into MethodInvocation(1382) at 0", "Insert SimpleName: substring(1378) into MethodInvocation(1382) at 1", "Insert MethodInvocation(1381) into MethodInvocation(1382) at 2", "Insert SimpleName: obj(1397) into MethodInvocation(1399) at 0", "Insert SimpleName: getClass(1398) into MethodInvocation(1399) at 1", "Insert SimpleName: method(1410) into MethodInvocation(1412) at 0", "Insert SimpleName: getParameterTypes(1411) into MethodInvocation(1412) at 1", "Insert SimpleName: obj(1460) into MethodInvocation(1462) at 0", "Insert SimpleName: getClass(1461) into MethodInvocation(1462) at 1", "Insert SimpleName: field(1478) into MethodInvocation(1480) at 0", "Insert SimpleName: getType(1479) into MethodInvocation(1480) at 1", "Insert SimpleName: Override(1520) into MarkerAnnotation(1521) at 0", "Insert SimpleName: String(1523) into SimpleType: String(1524) at 0", "Insert ReturnStatement(1539) into Block(1540) at 0", "Insert TagElement(1543) into Javadoc(1544) at 0", "Insert SimpleName: String(1546) into SimpleType: String(1547) at 0", "Insert ReturnStatement(1551) into Block(1552) at 0", "Insert SimpleName: Override(1554) into MarkerAnnotation(1555) at 0", "Insert SimpleName: Class(1557) into SimpleType: Class(1558) at 0", "Insert ReturnStatement(1573) into Block(1574) at 0", "Insert SimpleName: Override(1576) into MarkerAnnotation(1577) at 0", "Insert SimpleName: AuthenticationType(1579) into SimpleType: AuthenticationType(1580) at 0", "Insert ReturnStatement(1585) into Block(1586) at 0", "Insert SimpleName: Override(1588) into MarkerAnnotation(1589) at 0", "Insert ReturnStatement(1596) into Block(1597) at 0", "Insert SimpleName: Override(1599) into MarkerAnnotation(1600) at 0", "Insert SimpleName: String(1602) into SimpleType: String(1603) at 0", "Insert ReturnStatement(1608) into Block(1609) at 0", "Insert SimpleName: Override(1611) into MarkerAnnotation(1612) at 0", "Insert SimpleName: String(1614) into SimpleType: String(1615) at 0", "Insert ReturnStatement(1620) into Block(1621) at 0", "Insert SimpleName: Override(1623) into MarkerAnnotation(1624) at 0", "Insert SimpleType: Class(1627) into ParameterizedType: Class<? extends Annotation>(1631) at 0", "Insert WildcardType: ? extends Annotation(1630) into ParameterizedType: Class<? extends Annotation>(1631) at 1", "Insert ReturnStatement(1636) into Block(1637) at 0", "Insert SimpleName: Iterator(1660) into SimpleType: Iterator(1661) at 0", "Insert SimpleName: ResourceLocator(1662) into SimpleType: ResourceLocator(1663) at 0", "Insert SimpleName: resourceLocators(1666) into MethodInvocation(1668) at 0", "Insert SimpleName: iterator(1667) into MethodInvocation(1668) at 1", "Insert SimpleName: iterator(1674) into MethodInvocation(1676) at 0", "Insert SimpleName: next(1675) into MethodInvocation(1676) at 1", "Insert SimpleType: ResourceLocator(1683) into ClassInstanceCreation(1720) at 0", "Insert AnonymousClassDeclaration(1719) into ClassInstanceCreation(1720) at 1", "Insert SimpleName: NamingException(1750) into SimpleType: NamingException(1751) at 0", "Insert StringLiteral: \"Could not find resource: \"(1752) into InfixExpression: +(1754) at 0", "Insert SimpleName: resource(1753) into InfixExpression: +(1754) at 1", "Insert SimpleName: Method(1802) into SimpleType: Method(1803) at 0", "Insert MethodInvocation(1816) into ExpressionStatement(1817) at 0", "Insert Block(1823) into TryStatement(1836) at 0", "Insert CatchClause(1835) into TryStatement(1836) at 1", "Move ExpressionStatement(1242) into Block(2078) at 0", "Insert SimpleName: preConfiguration(980) into MethodInvocation(982) at 0", "Insert SimpleName: getName(981) into MethodInvocation(982) at 1", "Insert SimpleName: postConstruct(1036) into MethodInvocation(1038) at 0", "Insert SimpleName: getName(1037) into MethodInvocation(1038) at 1", "Insert SimpleType: Resources(1110) into TypeLiteral(1111) at 0", "Insert SimpleName: setFieldResource(1122) into MethodInvocation(1126) at 0", "Insert SimpleName: obj(1123) into MethodInvocation(1126) at 1", "Insert SimpleName: field(1124) into MethodInvocation(1126) at 2", "Insert SimpleName: resource(1125) into MethodInvocation(1126) at 3", "Insert SimpleType: Resource(1148) into TypeLiteral(1149) at 0", "Insert SimpleType: Resources(1177) into TypeLiteral(1178) at 0", "Update SimpleName: processor(896) to setMethodResource", "Update SimpleName: methods(899) to method", "Insert SimpleName: resource(1192) into MethodInvocation(1193) at 3", "Insert SimpleType: Resource(1215) into TypeLiteral(1216) at 0", "Insert SimpleName: loadClassResource(1245) into MethodInvocation(1247) at 0", "Insert SimpleName: resource(1246) into MethodInvocation(1247) at 1", "Insert SimpleName: resource(1280) into MethodInvocation(1282) at 0", "Insert SimpleName: name(1281) into MethodInvocation(1282) at 1", "Insert SimpleName: Object(1291) into SimpleType: Object(1292) at 0", "Insert SimpleName: method(1329) into MethodInvocation(1331) at 0", "Insert SimpleName: getParameterTypes(1330) into MethodInvocation(1331) at 1", "Insert MethodInvocation(1351) into MethodInvocation(1353) at 0", "Insert SimpleName: getName(1352) into MethodInvocation(1353) at 1", "Insert SimpleName: method(1354) into MethodInvocation(1356) at 0", "Insert SimpleName: getName(1355) into MethodInvocation(1356) at 1", "Insert StringLiteral: \"set\"(1379) into MethodInvocation(1381) at 0", "Insert SimpleName: length(1380) into MethodInvocation(1381) at 1", "Insert ConditionalExpression(1538) into ReturnStatement(1539) at 0", "Insert TextElement: Method needed for eventual java7 compatibility(1542) into TagElement(1543) at 0", "Insert MethodInvocation(1550) into ReturnStatement(1551) at 0", "Insert ConditionalExpression(1572) into ReturnStatement(1573) at 0", "Insert MethodInvocation(1584) into ReturnStatement(1585) at 0", "Insert MethodInvocation(1595) into ReturnStatement(1596) at 0", "Insert MethodInvocation(1607) into ReturnStatement(1608) at 0", "Insert MethodInvocation(1619) into ReturnStatement(1620) at 0", "Insert SimpleName: Class(1626) into SimpleType: Class(1627) at 0", "Insert SimpleType: Annotation(1629) into WildcardType: ? extends Annotation(1630) at 0", "Insert MethodInvocation(1635) into ReturnStatement(1636) at 0", "Insert SimpleName: ResourceLocator(1682) into SimpleType: ResourceLocator(1683) at 0", "Insert MethodDeclaration(1718) into AnonymousClassDeclaration(1719) at 0", "Insert SimpleName: log(1807) into MethodInvocation(1816) at 0", "Insert SimpleName: debug(1808) into MethodInvocation(1816) at 1", "Insert MethodInvocation(1815) into MethodInvocation(1816) at 2", "Insert ExpressionStatement(1822) into Block(1823) at 0", "Insert SingleVariableDeclaration(1827) into CatchClause(1835) at 0", "Insert Block(1834) into CatchClause(1835) at 1", "Insert SimpleName: Resources(1109) into SimpleType: Resources(1110) at 0", "Insert SimpleName: Resource(1147) into SimpleType: Resource(1148) at 0", "Insert SimpleName: Resources(1176) into SimpleType: Resources(1177) at 0", "Insert SimpleName: Resource(1214) into SimpleType: Resource(1215) at 0", "Insert SimpleName: obj(1349) into MethodInvocation(1351) at 0", "Insert SimpleName: getClass(1350) into MethodInvocation(1351) at 1", "Insert ParenthesizedExpression(1533) into ConditionalExpression(1538) at 0", "Insert SimpleName: siteName(1534) into ConditionalExpression(1538) at 1", "Insert MethodInvocation(1537) into ConditionalExpression(1538) at 2", "Insert SimpleName: name(1549) into MethodInvocation(1550) at 0", "Insert ParenthesizedExpression(1567) into ConditionalExpression(1572) at 0", "Insert SimpleName: siteType(1568) into ConditionalExpression(1572) at 1", "Insert MethodInvocation(1571) into ConditionalExpression(1572) at 2", "Insert SimpleName: resource(1582) into MethodInvocation(1584) at 0", "Insert SimpleName: authenticationType(1583) into MethodInvocation(1584) at 1", "Insert SimpleName: resource(1593) into MethodInvocation(1595) at 0", "Insert SimpleName: shareable(1594) into MethodInvocation(1595) at 1", "Insert SimpleName: resource(1605) into MethodInvocation(1607) at 0", "Insert SimpleName: mappedName(1606) into MethodInvocation(1607) at 1", "Insert SimpleName: resource(1617) into MethodInvocation(1619) at 0", "Insert SimpleName: description(1618) into MethodInvocation(1619) at 1", "Insert SimpleName: Annotation(1628) into SimpleType: Annotation(1629) at 0", "Insert SimpleName: resource(1633) into MethodInvocation(1635) at 0", "Insert SimpleName: annotationType(1634) into MethodInvocation(1635) at 1", "Insert MarkerAnnotation(1685) into MethodDeclaration(1718) at 0", "Insert Modifier: public(1686) into MethodDeclaration(1718) at 1", "Insert SimpleType: Object(1688) into MethodDeclaration(1718) at 2", "Insert SimpleName: locate(1689) into MethodDeclaration(1718) at 3", "Insert SingleVariableDeclaration(1693) into MethodDeclaration(1718) at 4", "Insert SingleVariableDeclaration(1697) into MethodDeclaration(1718) at 5", "Insert SimpleType: Exception(1699) into MethodDeclaration(1718) at 6", "Insert Block(1717) into MethodDeclaration(1718) at 7", "Insert SimpleName: String(1809) into MethodInvocation(1815) at 0", "Insert SimpleName: format(1810) into MethodInvocation(1815) at 1", "Insert StringLiteral: \"\\t%s()\"(1811) into MethodInvocation(1815) at 2", "Insert MethodInvocation(1814) into MethodInvocation(1815) at 3", "Insert MethodInvocation(1821) into ExpressionStatement(1822) at 0", "Insert SimpleType: Throwable(1825) into SingleVariableDeclaration(1827) at 0", "Insert SimpleName: e(1826) into SingleVariableDeclaration(1827) at 1", "Insert ExpressionStatement(1833) into Block(1834) at 0", "Insert InfixExpression: ==(1532) into ParenthesizedExpression(1533) at 0", "Insert SimpleName: resource(1535) into MethodInvocation(1537) at 0", "Insert SimpleName: name(1536) into MethodInvocation(1537) at 1", "Insert InfixExpression: ==(1566) into ParenthesizedExpression(1567) at 0", "Insert SimpleName: resource(1569) into MethodInvocation(1571) at 0", "Insert SimpleName: type(1570) into MethodInvocation(1571) at 1", "Insert SimpleName: Override(1684) into MarkerAnnotation(1685) at 0", "Insert SimpleName: Object(1687) into SimpleType: Object(1688) at 0", "Insert SimpleType: Resource(1691) into SingleVariableDeclaration(1693) at 0", "Insert SimpleName: resource(1692) into SingleVariableDeclaration(1693) at 1", "Insert SimpleType: ResourceLocator(1695) into SingleVariableDeclaration(1697) at 0", "Insert SimpleName: nextInChain(1696) into SingleVariableDeclaration(1697) at 1", "Insert SimpleName: Exception(1698) into SimpleType: Exception(1699) at 0", "Insert IfStatement(1712) into Block(1717) at 0", "Insert ReturnStatement(1716) into Block(1717) at 1", "Insert SimpleName: preDestroy(1812) into MethodInvocation(1814) at 0", "Insert SimpleName: getName(1813) into MethodInvocation(1814) at 1", "Insert SimpleName: preDestroy(1818) into MethodInvocation(1821) at 0", "Insert SimpleName: invoke(1819) into MethodInvocation(1821) at 1", "Insert QualifiedName: record.obj(1820) into MethodInvocation(1821) at 2", "Insert SimpleName: Throwable(1824) into SimpleType: Throwable(1825) at 0", "Insert MethodInvocation(1832) into ExpressionStatement(1833) at 0", "Insert MethodInvocation(1530) into InfixExpression: ==(1532) at 0", "Insert NumberLiteral: 0(1531) into InfixExpression: ==(1532) at 1", "Insert MethodInvocation(1562) into InfixExpression: ==(1566) at 0", "Insert TypeLiteral(1565) into InfixExpression: ==(1566) at 1", "Insert SimpleName: Resource(1690) into SimpleType: Resource(1691) at 0", "Insert SimpleName: ResourceLocator(1694) into SimpleType: ResourceLocator(1695) at 0", "Insert MethodInvocation(1702) into IfStatement(1712) at 0", "Insert Block(1711) into IfStatement(1712) at 1", "Insert MethodInvocation(1715) into ReturnStatement(1716) at 0", "Insert SimpleName: log(1828) into MethodInvocation(1832) at 0", "Insert SimpleName: error(1829) into MethodInvocation(1832) at 1", "Insert StringLiteral: \"Couldn't stop lifecycle managed instance\"(1830) into MethodInvocation(1832) at 2", "Insert SimpleName: e(1831) into MethodInvocation(1832) at 3", "Insert MethodInvocation(1528) into MethodInvocation(1530) at 0", "Insert SimpleName: length(1529) into MethodInvocation(1530) at 1", "Insert SimpleName: resource(1560) into MethodInvocation(1562) at 0", "Insert SimpleName: type(1561) into MethodInvocation(1562) at 1", "Insert SimpleType: Object(1564) into TypeLiteral(1565) at 0", "Insert SimpleName: iterator(1700) into MethodInvocation(1702) at 0", "Insert SimpleName: hasNext(1701) into MethodInvocation(1702) at 1", "Insert ReturnStatement(1710) into Block(1711) at 0", "Insert SimpleName: defaultFindResource(1713) into MethodInvocation(1715) at 0", "Insert SimpleName: resource(1714) into MethodInvocation(1715) at 1", "Insert SimpleName: resource(1526) into MethodInvocation(1528) at 0", "Insert SimpleName: name(1527) into MethodInvocation(1528) at 1", "Insert SimpleName: Object(1563) into SimpleType: Object(1564) at 0", "Insert MethodInvocation(1709) into ReturnStatement(1710) at 0", "Insert MethodInvocation(1705) into MethodInvocation(1709) at 0", "Insert SimpleName: locate(1706) into MethodInvocation(1709) at 1", "Insert SimpleName: resource(1707) into MethodInvocation(1709) at 2", "Insert ThisExpression(1708) into MethodInvocation(1709) at 3", "Insert SimpleName: iterator(1703) into MethodInvocation(1705) at 0", "Insert SimpleName: next(1704) into MethodInvocation(1705) at 1", "Delete SimpleName: LifecycleAnnotationProcessor(273)", "Delete SimpleType: LifecycleAnnotationProcessor(274)", "Delete SimpleName: newArrayList(275)", "Delete MethodInvocation(277)", "Delete SimpleType: List(205)", "Delete ParameterizedType: List<LifecycleAnnotationProcessor>(210)", "Delete ParameterizedType: List<List<LifecycleAnnotationProcessor>>(211)", "Delete SimpleName: Lists(213)", "Delete SimpleName: newArrayList(214)", "Delete MethodInvocation(215)", "Delete VariableDeclarationFragment(216)", "Delete FieldDeclaration(217)", "Delete SimpleName: LifecycleState(263)", "Delete SimpleType: LifecycleState(264)", "Delete SimpleName: state(265)", "Delete SingleVariableDeclaration(266)", "Delete MethodInvocation(269)", "Delete Block(279)", "Delete EnhancedForStatement(280)", "Delete SimpleName: LifecycleAnnotationProcessor(281)", "Delete SimpleType: LifecycleAnnotationProcessor(282)", "Delete SimpleName: processor(283)", "Delete SingleVariableDeclaration(284)", "Delete MethodInvocation(287)", "Delete Block(300)", "Delete EnhancedForStatement(301)", "Delete Block(302)", "Delete MethodDeclaration(303)", "Delete SimpleName: processors(288)", "Delete SimpleName: get(289)", "Delete SimpleName: processor(290)", "Delete SimpleName: getState(291)", "Delete MethodInvocation(292)", "Delete SimpleName: ordinal(293)", "Delete MethodInvocation(294)", "Delete MethodInvocation(295)", "Delete SimpleName: create(372)", "Delete MethodInvocation(376)", "Delete SimpleName: methods(432)", "Delete SimpleName: methods(438)", "Delete SimpleName: methods(444)", "Delete SimpleName: methods(450)", "Delete MethodInvocation(461)", "Delete PrefixExpression: !(462)", "Delete IfStatement(504)", "Delete SimpleName: process(897)", "Delete SimpleName: processors(890)", "Delete MethodInvocation(894)", "Delete MethodInvocation(895)", "Delete SimpleName: methods(883)", "Delete NullLiteral(884)", "Delete InfixExpression: !=(885)", "Delete Block(904)", "Delete IfStatement(905)", "Delete QualifiedName: record.methods(1037)", "Delete NullLiteral(1239)", "Delete Block(1243)", "Delete SimpleName: e(1246)", "Delete SingleVariableDeclaration(1247)", "Delete SimpleName: log(1248)", "Delete SimpleName: warn(1249)", "Delete StringLiteral: \"Error changing state in warmp phase\"(1250)", "Delete SimpleName: e(1251)", "Delete MethodInvocation(1252)", "Delete ExpressionStatement(1253)", "Delete Block(1254)", "Delete CatchClause(1255)", "Delete TryStatement(1256)", "Delete Block(1257)", "Delete SimpleName: StateKey(1345)", "Delete SimpleType: StateKey(1346)", "Delete SimpleName: o(1347)", "Delete CastExpression(1348)", "Delete ParenthesizedExpression(1349)"]}}, {"LifecycleManagerArguments_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 14", "MOV ImportDeclaration to CompilationUnit at 14", "MOV ImportDeclaration to CompilationUnit at 17", "MOV ImportDeclaration to CompilationUnit at 17", "MOV ImportDeclaration to CompilationUnit at 17"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleType: ConfigurationProvider to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: ConfigurationProvider to SimpleType: ConfigurationProvider at 0", "INS SimpleName: configurationProvider to SingleVariableDeclaration at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: configurationProvider to Assignment: = at 1", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: configurationProvider to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.inject.Singleton"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor", "DEL ImportDeclaration"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Singleton"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL FieldDeclaration", "DEL MarkerAnnotation", "DEL ParameterizedType: Set<LifecycleAnnotationProcessor>", "DEL SimpleType: Set", "DEL SimpleName: Inject", "DEL SimpleName: processors", "DEL Modifier: private", "DEL SimpleName: Set", "DEL SimpleName: LifecycleAnnotationProcessor"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL MarkerAnnotation", "DEL SimpleName: Deprecated"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL ReturnStatement", "DEL ConditionalExpression", "DEL SimpleName: getAnnotationProcessors", "DEL SimpleName: processors", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: processors", "DEL SimpleName: Collection", "DEL NullLiteral", "DEL Block", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL SimpleType: Collection", "DEL Modifier: public", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL ParameterizedType: Collection<LifecycleAnnotationProcessor>", "DEL SimpleName: emptyList", "DEL SimpleName: Collections", "DEL SimpleType: LifecycleAnnotationProcessor"]}]}}, {"LifecycleManagerArguments_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(388) at 17", "Move ImportDeclaration(9) into CompilationUnit(388) at 17", "Move ImportDeclaration(11) into CompilationUnit(388) at 17", "Move ImportDeclaration(15) into CompilationUnit(388) at 14", "Move ImportDeclaration(17) into CompilationUnit(388) at 14", "Insert SingleVariableDeclaration(182) into MethodDeclaration(202) at 5", "Insert SimpleType: ConfigurationProvider(180) into SingleVariableDeclaration(182) at 0", "Insert SimpleName: configurationProvider(181) into SingleVariableDeclaration(182) at 1", "Insert ExpressionStatement(200) into Block(201) at 2", "Insert SimpleName: ConfigurationProvider(179) into SimpleType: ConfigurationProvider(180) at 0", "Insert Assignment: =(199) into ExpressionStatement(200) at 0", "Insert FieldAccess(197) into Assignment: =(199) at 0", "Insert SimpleName: configurationProvider(198) into Assignment: =(199) at 1", "Insert ThisExpression(195) into FieldAccess(197) at 0", "Insert SimpleName: configurationProvider(196) into FieldAccess(197) at 1", "Delete QualifiedName: java.util.Collections(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.List(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: javax.inject.Singleton(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor(30)", "Delete ImportDeclaration(31)", "Delete SimpleName: Singleton(34)", "Delete MarkerAnnotation(35)", "Delete SimpleName: Inject(177)", "Delete MarkerAnnotation(178)", "Delete Modifier: private(179)", "Delete SimpleName: Set(180)", "Delete SimpleType: Set(181)", "Delete SimpleName: LifecycleAnnotationProcessor(182)", "Delete SimpleType: LifecycleAnnotationProcessor(183)", "Delete ParameterizedType: Set<LifecycleAnnotationProcessor>(184)", "Delete SimpleName: processors(185)", "Delete VariableDeclarationFragment(186)", "Delete FieldDeclaration(187)", "Delete SimpleName: Deprecated(214)", "Delete MarkerAnnotation(215)", "Delete Modifier: public(400)", "Delete SimpleName: Collection(401)", "Delete SimpleType: Collection(402)", "Delete SimpleName: LifecycleAnnotationProcessor(403)", "Delete SimpleType: LifecycleAnnotationProcessor(404)", "Delete ParameterizedType: Collection<LifecycleAnnotationProcessor>(405)", "Delete SimpleName: getAnnotationProcessors(406)", "Delete SimpleName: processors(407)", "Delete NullLiteral(408)", "Delete InfixExpression: ==(409)", "Delete SimpleName: Collections(410)", "Delete SimpleName: LifecycleAnnotationProcessor(411)", "Delete SimpleType: LifecycleAnnotationProcessor(412)", "Delete SimpleName: emptyList(413)", "Delete MethodInvocation(414)", "Delete SimpleName: processors(415)", "Delete ConditionalExpression(416)", "Delete ReturnStatement(417)", "Delete Block(418)", "Delete MethodDeclaration(419)"]}}, {"LifecycleMethods_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: javax.annotation.PostConstruct to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: javax.annotation.PreDestroy to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: javax.annotation.Resource to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: javax.annotation.Resources to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: javax.validation.Constraint to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS QualifiedName: org.slf4j.Logger to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 10"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS QualifiedName: org.slf4j.LoggerFactory to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 11"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS QualifiedName: com.google.common.collect.ArrayListMultimap to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 13"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: com.google.common.collect.ImmutableSet to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: com.netflix.governator.annotations.Configuration to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS ImportDeclaration to CompilationUnit at 19", "INS QualifiedName: com.netflix.governator.annotations.ConfigurationVariable to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS ImportDeclaration to CompilationUnit at 20", "INS QualifiedName: com.netflix.governator.annotations.PreConfiguration to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 21", "operations": ["INS QualifiedName: com.netflix.governator.annotations.WarmUp to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 21"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 3", "operations": ["INS SimpleName: log to VariableDeclarationFragment at 0", "INS SimpleName: getLogger to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getClass to MethodInvocation at 0", "INS SimpleName: Logger to SimpleType: Logger at 0", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS SimpleType: Logger to FieldDeclaration at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: LoggerFactory to MethodInvocation at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 7", "operations": ["INS FieldDeclaration to TypeDeclaration: class at 7", "INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: Collection to SimpleType: Collection at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS FieldDeclaration to TypeDeclaration: class at 8", "INS ParameterizedType: Collection<Class<? extends Annotation>> to FieldDeclaration at 3", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleType: Collection to ParameterizedType: Collection<Class<? extends Annotation>> at 0", "INS Modifier: private to FieldDeclaration at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS Modifier: final to FieldDeclaration at 2", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Collection<Class<? extends Annotation>> at 1", "INS SimpleName: fieldAnnotations to VariableDeclarationFragment at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS Modifier: static to FieldDeclaration at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleType: Collection to ParameterizedType: Collection<Class<? extends Annotation>> at 0", "INS SimpleName: methodAnnotations to VariableDeclarationFragment at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS Modifier: final to FieldDeclaration at 2", "INS FieldDeclaration to TypeDeclaration: class at 9", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS ParameterizedType: Collection<Class<? extends Annotation>> to FieldDeclaration at 3", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS Modifier: private to FieldDeclaration at 0", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Collection<Class<? extends Annotation>> at 1"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 10", "operations": ["INS SimpleType: Collection to ParameterizedType: Collection<Class<? extends Annotation>> at 0", "INS ParameterizedType: Collection<Class<? extends Annotation>> to FieldDeclaration at 3", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: Collection to SimpleType: Collection at 0", "INS FieldDeclaration to TypeDeclaration: class at 10", "INS Modifier: final to FieldDeclaration at 2", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: Collection<Class<? extends Annotation>> at 1", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: classAnnotations to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: static to FieldDeclaration at 1", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1"]}, {"root": "INS Initializer to TypeDeclaration: class at 11", "operations": ["INS SimpleType: Resources to TypeLiteral at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleType: Resource to TypeLiteral at 0", "INS Initializer to TypeDeclaration: class at 11", "INS SimpleName: classAnnotationsBuilder to VariableDeclarationFragment at 0", "INS SimpleName: fieldAnnotationsBuilder to MethodInvocation at 0", "INS Modifier: static to Initializer at 0", "INS SimpleName: PostConstruct to SimpleType: PostConstruct at 0", "INS ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> to VariableDeclarationStatement at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: fieldAnnotationsBuilder to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: methodAnnotationsBuilder to MethodInvocation at 0", "INS SimpleName: builder to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 2", "INS ExpressionStatement to Block at 17", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Resources to TypeLiteral at 0", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> at 1", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS ExpressionStatement to Block at 10", "INS ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> to VariableDeclarationStatement at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: fieldAnnotations to Assignment: = at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS ExpressionStatement to Block at 12", "INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: Configuration to TypeLiteral at 0", "INS SimpleName: methodAnnotationsBuilder to MethodInvocation at 0", "INS SimpleName: methodAnnotationsBuilder to MethodInvocation at 0", "INS SimpleName: fieldAnnotationsBuilder to MethodInvocation at 0", "INS ExpressionStatement to Block at 13", "INS ExpressionStatement to Block at 5", "INS TypeLiteral to MethodInvocation at 2", "INS ExpressionStatement to Block at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: classAnnotationsBuilder to MethodInvocation at 0", "INS SimpleType: PostConstruct to TypeLiteral at 0", "INS SimpleName: fieldAnnotationsBuilder to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TypeLiteral to MethodInvocation at 2", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> at 1", "INS SimpleName: methodAnnotations to Assignment: = at 0", "INS SimpleType: WarmUp to TypeLiteral at 0", "INS SimpleName: build to MethodInvocation at 1", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS SimpleType: ConfigurationVariable to TypeLiteral at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: fieldAnnotationsBuilder to MethodInvocation at 0", "INS SimpleType: PreDestroy to TypeLiteral at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: ImmutableSet.Builder to SimpleType: ImmutableSet.Builder at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS ExpressionStatement to Block at 15", "INS ExpressionStatement to Block at 9", "INS SimpleName: build to MethodInvocation at 1", "INS SimpleName: WarmUp to SimpleType: WarmUp at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: ImmutableSet.Builder to SimpleType: ImmutableSet.Builder at 0", "INS SimpleName: methodAnnotationsBuilder to VariableDeclarationFragment at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: Resource to TypeLiteral at 0", "INS SimpleName: builder to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS SimpleName: classAnnotationsBuilder to MethodInvocation at 0", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleType: ImmutableSet.Builder to ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS VariableDeclarationStatement to Block at 14", "INS SimpleType: ImmutableSet.Builder to ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: PreConfiguration to TypeLiteral at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: ImmutableSet.Builder to SimpleType: ImmutableSet.Builder at 0", "INS Block to Initializer at 1", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: methodAnnotationsBuilder to MethodInvocation at 0", "INS SimpleName: methodAnnotationsBuilder to MethodInvocation at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS ExpressionStatement to Block at 11", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS ParameterizedType: Class<? extends Annotation> to ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> at 1", "INS SimpleName: builder to MethodInvocation at 1", "INS ExpressionStatement to Block at 7", "INS SimpleName: classAnnotations to Assignment: = at 0", "INS SimpleName: classAnnotationsBuilder to MethodInvocation at 0", "INS TypeLiteral to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: PreConfiguration to SimpleType: PreConfiguration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: methodAnnotationsBuilder to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Resource to TypeLiteral at 0", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: Resource to SimpleType: Resource at 0", "INS ExpressionStatement to Block at 16", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS TypeLiteral to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS VariableDeclarationStatement to Block at 8", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: ConfigurationVariable to SimpleType: ConfigurationVariable at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TypeLiteral to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Resources to SimpleType: Resources at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 6", "INS SimpleType: ImmutableSet.Builder to ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> at 0", "INS SimpleName: ImmutableSet to MethodInvocation at 0", "INS SimpleName: PreDestroy to SimpleType: PreDestroy at 0", "INS SimpleName: build to MethodInvocation at 1", "INS SimpleName: Configuration to SimpleType: Configuration at 0", "INS SimpleType: Resources to TypeLiteral at 0", "INS SimpleName: fieldAnnotationsBuilder to MethodInvocation at 0", "INS ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>> to VariableDeclarationStatement at 0", "INS SimpleName: methodAnnotationsBuilder to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: add to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleName: clazz to MethodInvocation at 1", "INS ParameterizedType: Class<? extends Annotation> to MethodInvocation at 1", "INS SimpleName: create to MethodInvocation at 3", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: clazz to SingleVariableDeclaration at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS Block to MethodDeclaration at 3", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: ArrayListMultimap to MethodInvocation at 0", "INS SimpleName: addLifeCycleMethods to MethodInvocation at 0", "INS SimpleType: String to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 19", "operations": ["INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ParameterizedType: Class<? extends Annotation> to SingleVariableDeclaration at 0", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleName: getDeclardFields to MethodInvocation at 0", "INS EnhancedForStatement to Block at 2", "INS EnhancedForStatement to Block at 2", "INS SimpleName: clazz to MethodInvocation at 0", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: addLifeCycleMethods to MethodInvocation at 0", "INS SimpleName: clazz to MethodInvocation at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS InfixExpression: || to IfStatement at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: method to SingleVariableDeclaration at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: clazz to MethodInvocation at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: isSynthetic to MethodInvocation at 1", "INS SimpleName: isBridge to MethodInvocation at 1", "INS ContinueStatement to Block at 0", "INS SimpleName: addLifeCycleMethods to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: isSynthetic to MethodInvocation at 1", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS IfStatement to Block at 0", "INS EnhancedForStatement to Block at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS Block to EnhancedForStatement at 2", "INS SimpleName: face to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: field to MethodInvocation at 1", "INS Block to EnhancedForStatement at 2", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: field to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: clazz to MethodInvocation at 1", "INS SimpleName: getInterfaces to MethodInvocation at 1", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS ContinueStatement to Block at 0", "INS SimpleName: usedNames to MethodInvocation at 3", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: annotationClass to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: put to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS SimpleName: annotationClass to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS SimpleName: classAnnotations to EnhancedForStatement at 1", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS SimpleName: Field to SimpleType: Field at 0", "INS MethodDeclaration to TypeDeclaration: class at 19", "INS SimpleName: hasValidations to PrefixExpression: ! at 0", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: methodAnnotations to EnhancedForStatement at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: isAnnotationPresent to MethodInvocation at 1", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: usedNames to MethodInvocation at 3", "INS Block to EnhancedForStatement at 2", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS ParameterizedType: Class<? extends Annotation> to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: clazz to MethodInvocation at 1", "INS SimpleName: processMethod to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Modifier: private to MethodDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS EnhancedForStatement to Block at 3", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: clazz to MethodInvocation at 0", "INS SimpleType: Field to SingleVariableDeclaration at 0", "INS SimpleName: fieldAnnotations to EnhancedForStatement at 1", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS SimpleName: addLifeCycleMethods to MethodDeclaration at 2", "INS SimpleName: method to MethodInvocation at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS IfStatement to Block at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: getAnnotation to MethodInvocation at 1", "INS SimpleName: clazz to SingleVariableDeclaration at 1", "INS EnhancedForStatement to Block at 1", "INS IfStatement to Block at 0", "INS SimpleName: getDeclaredMethods to MethodInvocation at 0", "INS ParameterizedType: Class<? extends Annotation> to SingleVariableDeclaration at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: face to MethodInvocation at 1", "INS EnhancedForStatement to Block at 5", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS ReturnStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS SimpleName: getSuperclass to MethodInvocation at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: checkForValidations to MethodInvocation at 0", "INS SimpleName: annotationClass to SingleVariableDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: clazz to InfixExpression: == at 0", "INS SimpleName: field to MethodInvocation at 1", "INS SimpleName: usedNames to MethodInvocation at 2", "INS Block to EnhancedForStatement at 2", "INS SimpleName: field to SingleVariableDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: processField to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: classMap to MethodInvocation at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS Block to IfStatement at 1", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: usedNames to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 20", "operations": ["INS SimpleName: clazz to MethodInvocation at 0", "INS Dimension to ArrayType: Method[] at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 20", "INS TryStatement to Block at 0", "INS ArrayCreation to ReturnStatement at 0", "INS ArrayType: Method[] to ArrayCreation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Method to SimpleType: Method at 0", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS SimpleName: clazz to SingleVariableDeclaration at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS Block to MethodDeclaration at 4", "INS Block to CatchClause at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: handleReflectionError to MethodInvocation at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: e to MethodInvocation at 2", "INS SimpleName: clazz to MethodInvocation at 1", "INS ArrayInitializer to ArrayCreation at 1", "INS SimpleName: getDeclaredMethods to MethodInvocation at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS ExpressionStatement to Block at 0", "INS Block to TryStatement at 0", "INS SimpleType: Method to ArrayType: Method[] at 0", "INS SimpleName: getDeclaredMethods to MethodDeclaration at 2", "INS SimpleType: Method to ArrayType: Method[] at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS ReturnStatement to Block at 1", "INS Dimension to ArrayType: Method[] at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ArrayType: Method[] to MethodDeclaration at 1", "INS CatchClause to TryStatement at 1", "INS ReturnStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SingleVariableDeclaration to CatchClause at 0", "INS Block to MethodDeclaration at 4", "INS SimpleType: Field to ArrayType: Field[] at 0", "INS ReturnStatement to Block at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: getDeclaredFields to MethodInvocation at 1", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS TryStatement to Block at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS ArrayCreation to ReturnStatement at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS Block to TryStatement at 0", "INS ArrayType: Field[] to MethodDeclaration at 1", "INS SimpleName: clazz to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: Field to SimpleType: Field at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: clazz to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SimpleName: Field to SimpleType: Field at 0", "INS Dimension to ArrayType: Field[] at 1", "INS SimpleName: e to MethodInvocation at 2", "INS CatchClause to TryStatement at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS Dimension to ArrayType: Field[] at 1", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS SimpleName: clazz to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleType: Field to ArrayType: Field[] at 0", "INS SimpleName: getDeclardFields to MethodDeclaration at 2", "INS ArrayInitializer to ArrayCreation at 1", "INS Block to CatchClause at 1", "INS ArrayType: Field[] to ArrayCreation at 0", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: handleReflectionError to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS SimpleName: format to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: e to InfixExpression: != at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SimpleName: String to MethodInvocation at 0", "INS SimpleName: e to InstanceofExpression at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS SimpleName: e to InstanceofExpression at 0", "INS SimpleName: log to MethodInvocation at 0", "INS SimpleName: ClassNotFoundException to SimpleType: ClassNotFoundException at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: clazz to SingleVariableDeclaration at 1", "INS InfixExpression: || to IfStatement at 0", "INS InstanceofExpression to ParenthesizedExpression at 0", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS InstanceofExpression to ParenthesizedExpression at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: Throwable to SimpleType: Throwable at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to IfStatement at 1", "INS SimpleName: handleReflectionError to MethodDeclaration at 2", "INS IfStatement to Block at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS Block to IfStatement at 1", "INS ReturnStatement to Block at 1", "INS SimpleType: ClassNotFoundException to InstanceofExpression at 1", "INS ParenthesizedExpression to InfixExpression: || at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: Throwable to SingleVariableDeclaration at 0", "INS StringLiteral: \"Class %s could not be resolved because of a class path error. Governator cannot further process the class.\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ParameterizedType: Class<?> to SingleVariableDeclaration at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS MethodInvocation to MethodInvocation at 2", "INS ExpressionStatement to Block at 1", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS IfStatement to Block at 0", "INS SimpleName: e to MethodInvocation at 3", "INS SimpleName: handleReflectionError to MethodInvocation at 0", "INS SimpleName: clazz to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS SimpleType: NoClassDefFoundError to InstanceofExpression at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: NoClassDefFoundError to SimpleType: NoClassDefFoundError at 0", "INS SimpleName: getCause to MethodInvocation at 1", "INS SimpleName: clazz to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleName: checkForValidations to MethodDeclaration at 2", "INS IfStatement to Block at 0", "INS Block to MethodDeclaration at 4", "INS SimpleType: Field to SingleVariableDeclaration at 0", "INS SimpleName: annotationType to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Field to SimpleType: Field at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: field to MethodInvocation at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS BreakStatement to Block at 1", "INS SimpleName: isAnnotationPresent to MethodInvocation at 1", "INS SimpleName: annotation to SingleVariableDeclaration at 1", "INS TypeLiteral to MethodInvocation at 2", "INS SimpleName: getDeclaredAnnotations to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleType: Constraint to TypeLiteral at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS EnhancedForStatement to Block at 0", "INS SimpleType: Annotation to SingleVariableDeclaration at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS SimpleName: hasValidations to Assignment: = at 0", "INS SimpleName: annotation to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: field to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS Block to EnhancedForStatement at 2", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS SimpleName: Constraint to SimpleType: Constraint at 0", "INS Modifier: private to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS SimpleName: isAnnotationPresent to MethodInvocation at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: usedNames to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SimpleName: contains to MethodInvocation at 1", "INS SimpleType: Field to SingleVariableDeclaration at 0", "INS ParameterizedType: Class<? extends Annotation> to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: field to MethodInvocation at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS SimpleName: put to MethodInvocation at 1", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: field to MethodInvocation at 3", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: processField to MethodDeclaration at 2", "INS SimpleName: field to SingleVariableDeclaration at 1", "INS SimpleName: field to MethodInvocation at 0", "INS SimpleName: fieldMap to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS SimpleName: Field to SimpleType: Field at 0", "INS SimpleName: field to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: usedNames to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: field to MethodInvocation at 0", "INS SimpleName: annotationClass to SingleVariableDeclaration at 1", "INS BooleanLiteral: true to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ExpressionStatement to Block at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS IfStatement to Block at 0", "INS SimpleName: setAccessible to MethodInvocation at 1", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 25", "operations": ["INS SimpleName: get to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: method to SingleVariableDeclaration at 1", "INS SimpleType: Annotation to WildcardType: ? extends Annotation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: processMethod to MethodDeclaration at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 25", "INS PrefixExpression: ! to IfStatement at 0", "INS ParameterizedType: Class<? extends Annotation> to SingleVariableDeclaration at 0", "INS SimpleName: Annotation to SimpleType: Annotation at 0", "INS SimpleName: isAnnotationPresent to MethodInvocation at 1", "INS Block to MethodDeclaration at 6", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: method to MethodInvocation at 0", "INS WildcardType: ? extends Annotation to ParameterizedType: Class<? extends Annotation> at 1", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleType: Class to ParameterizedType: Class<? extends Annotation> at 0", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS SimpleType: Method to SingleVariableDeclaration at 0", "INS SimpleName: annotationClass to SingleVariableDeclaration at 1", "INS SimpleName: usedNames to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: contains to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS SimpleName: method to MethodInvocation at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV PrimitiveType: boolean to FieldDeclaration at 1", "MOV VariableDeclarationFragment to FieldDeclaration at 2", "MOV Modifier: final to FieldDeclaration at 1", "MOV Modifier: private to FieldDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SimpleName: LifecycleMethods to MethodDeclaration at 1", "MOV Modifier: public to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: ArrayListMultimap to MethodInvocation at 0", "INS SimpleName: create to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: create to MethodInvocation at 1", "INS SimpleName: ArrayListMultimap to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: ArrayListMultimap to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: create to MethodInvocation at 1"]}, {"root": "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "operations": ["INS BooleanLiteral: false to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from Multimap<Class<? extends Annotation>,Annotation> to Multimap<Class<? extends Annotation>,String>", "operations": ["UPD ParameterizedType: Multimap<Class<? extends Annotation>,Annotation> from Multimap<Class<? extends Annotation>,Annotation> to Multimap<Class<? extends Annotation>,String>", "UPD ParameterizedType: Multimap<Class<? extends Annotation>,Field> from Multimap<Class<? extends Annotation>,Field> to Multimap<Class<? extends Annotation>,String>", "UPD ParameterizedType: Multimap<Class<? extends Annotation>,Method> from Multimap<Class<? extends Annotation>,Method> to Multimap<Class<? extends Annotation>,String>"]}, {"root": "UPDATE from methodMap to usedNames", "operations": ["UPD SimpleName: methodMap from methodMap to usedNames", "UPD SimpleName: classMap from classMap to usedNames", "UPD SimpleName: fieldMap from fieldMap to usedNames"]}, {"root": "UPDATE from Field to String", "operations": ["UPD SimpleName: Field from Field to String", "UPD SimpleType: Annotation from Annotation to String", "UPD SimpleType: Field from Field to String", "UPD SimpleType: Method from Method to String", "UPD SimpleName: Annotation from Annotation to String", "UPD SimpleName: Method from Method to String"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS BooleanLiteral: true to MethodInvocation at 2", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleName: setAccessible to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: put to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS SimpleName: usedNames to MethodInvocation at 0", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: method to MethodInvocation at 3", "INS SimpleName: annotationClass to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: methodMap to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL ThisExpression", "DEL Block", "DEL SimpleName: fieldMap", "DEL SingleVariableDeclaration", "DEL SimpleName: fieldMap", "DEL PrimitiveType: boolean", "DEL SimpleName: hasValidations", "DEL FieldAccess", "DEL Assignment: =", "DEL ExpressionStatement"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement: @return", "DEL TagElement", "DEL TagElement: @param", "DEL TextElement: Return the collection of all methods with a specific annotation", "DEL Javadoc", "DEL SimpleName: annotation"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Return the collection of all fields with a specific annotation", "DEL TagElement", "DEL Javadoc", "DEL TagElement: @param", "DEL SimpleName: annotation", "DEL TagElement: @return"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Return the collection of all class annotations of a specific type", "DEL TagElement: @param", "DEL TagElement", "DEL SimpleName: annotation", "DEL Javadoc", "DEL TagElement: @return"]}, {"root": "DEL Assignment: =", "operations": ["DEL ThisExpression", "DEL SimpleName: methodMap", "DEL Assignment: =", "DEL SimpleName: methodMap", "DEL FieldAccess"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: classMap", "DEL SimpleName: classMap", "DEL FieldAccess", "DEL ThisExpression", "DEL Assignment: ="]}, {"root": "DEL Assignment: =", "operations": ["DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: hasValidations", "DEL SimpleName: hasValidations", "DEL ThisExpression"]}]}}, {"LifecycleMethods_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(961) at 5", "Insert ImportDeclaration(13) into CompilationUnit(961) at 6", "Insert ImportDeclaration(15) into CompilationUnit(961) at 7", "Insert ImportDeclaration(17) into CompilationUnit(961) at 8", "Insert ImportDeclaration(19) into CompilationUnit(961) at 9", "Insert ImportDeclaration(21) into CompilationUnit(961) at 10", "Insert ImportDeclaration(23) into CompilationUnit(961) at 11", "Insert ImportDeclaration(27) into CompilationUnit(961) at 13", "Insert ImportDeclaration(31) into CompilationUnit(961) at 15", "Insert ImportDeclaration(37) into CompilationUnit(961) at 18", "Insert ImportDeclaration(39) into CompilationUnit(961) at 19", "Insert ImportDeclaration(41) into CompilationUnit(961) at 20", "Insert ImportDeclaration(43) into CompilationUnit(961) at 21", "Insert QualifiedName: javax.annotation.PostConstruct(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: javax.annotation.PreDestroy(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: javax.annotation.Resource(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: javax.annotation.Resources(16) into ImportDeclaration(17) at 0", "Insert QualifiedName: javax.validation.Constraint(18) into ImportDeclaration(19) at 0", "Insert QualifiedName: org.slf4j.Logger(20) into ImportDeclaration(21) at 0", "Insert QualifiedName: org.slf4j.LoggerFactory(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: com.google.common.collect.ArrayListMultimap(26) into ImportDeclaration(27) at 0", "Insert QualifiedName: com.google.common.collect.ImmutableSet(30) into ImportDeclaration(31) at 0", "Insert QualifiedName: com.netflix.governator.annotations.Configuration(36) into ImportDeclaration(37) at 0", "Insert QualifiedName: com.netflix.governator.annotations.ConfigurationVariable(38) into ImportDeclaration(39) at 0", "Insert QualifiedName: com.netflix.governator.annotations.PreConfiguration(40) into ImportDeclaration(41) at 0", "Insert QualifiedName: com.netflix.governator.annotations.WarmUp(42) into ImportDeclaration(43) at 0", "Insert FieldDeclaration(60) into TypeDeclaration: class(960) at 3", "Insert FieldDeclaration(123) into TypeDeclaration: class(960) at 7", "Insert FieldDeclaration(138) into TypeDeclaration: class(960) at 8", "Insert FieldDeclaration(153) into TypeDeclaration: class(960) at 9", "Insert FieldDeclaration(168) into TypeDeclaration: class(960) at 10", "Insert Initializer(318) into TypeDeclaration: class(960) at 11", "Insert MethodDeclaration(343) into TypeDeclaration: class(960) at 12", "Insert MethodDeclaration(663) into TypeDeclaration: class(960) at 17", "Insert MethodDeclaration(701) into TypeDeclaration: class(960) at 18", "Insert MethodDeclaration(739) into TypeDeclaration: class(960) at 19", "Insert MethodDeclaration(792) into TypeDeclaration: class(960) at 20", "Insert MethodDeclaration(825) into TypeDeclaration: class(960) at 21", "Insert MethodDeclaration(892) into TypeDeclaration: class(960) at 22", "Insert MethodDeclaration(959) into TypeDeclaration: class(960) at 23", "Move Modifier: private(71) into FieldDeclaration(60) at 0", "Move Modifier: final(72) into FieldDeclaration(60) at 1", "Insert SimpleType: Logger(52) into FieldDeclaration(60) at 2", "Insert VariableDeclarationFragment(59) into FieldDeclaration(60) at 3", "Insert Modifier: private(118) into FieldDeclaration(123) at 0", "Move PrimitiveType: boolean(73) into FieldDeclaration(123) at 1", "Move VariableDeclarationFragment(75) into FieldDeclaration(123) at 2", "Insert Modifier: private(124) into FieldDeclaration(138) at 0", "Insert Modifier: static(125) into FieldDeclaration(138) at 1", "Insert Modifier: final(126) into FieldDeclaration(138) at 2", "Insert ParameterizedType: Collection<Class<? extends Annotation>>(135) into FieldDeclaration(138) at 3", "Insert VariableDeclarationFragment(137) into FieldDeclaration(138) at 4", "Insert Modifier: private(139) into FieldDeclaration(153) at 0", "Insert Modifier: static(140) into FieldDeclaration(153) at 1", "Insert Modifier: final(141) into FieldDeclaration(153) at 2", "Insert ParameterizedType: Collection<Class<? extends Annotation>>(150) into FieldDeclaration(153) at 3", "Insert VariableDeclarationFragment(152) into FieldDeclaration(153) at 4", "Insert Modifier: private(154) into FieldDeclaration(168) at 0", "Insert Modifier: static(155) into FieldDeclaration(168) at 1", "Insert Modifier: final(156) into FieldDeclaration(168) at 2", "Insert ParameterizedType: Collection<Class<? extends Annotation>>(165) into FieldDeclaration(168) at 3", "Insert VariableDeclarationFragment(167) into FieldDeclaration(168) at 4", "Insert Modifier: static(169) into Initializer(318) at 0", "Insert Block(317) into Initializer(318) at 1", "Move Modifier: public(77) into MethodDeclaration(343) at 0", "Move SimpleName: LifecycleMethods(78) into MethodDeclaration(343) at 1", "Insert SingleVariableDeclaration(326) into MethodDeclaration(343) at 2", "Insert Block(342) into MethodDeclaration(343) at 3", "Insert Modifier: private(509) into MethodDeclaration(663) at 0", "Insert PrimitiveType: void(510) into MethodDeclaration(663) at 1", "Insert SimpleName: addLifeCycleMethods(511) into MethodDeclaration(663) at 2", "Insert SingleVariableDeclaration(517) into MethodDeclaration(663) at 3", "Move SingleVariableDeclaration(91) into MethodDeclaration(663) at 4", "Insert Block(662) into MethodDeclaration(663) at 5", "Insert Modifier: private(664) into MethodDeclaration(701) at 0", "Insert ArrayType: Method[](668) into MethodDeclaration(701) at 1", "Insert SimpleName: getDeclaredMethods(669) into MethodDeclaration(701) at 2", "Insert SingleVariableDeclaration(675) into MethodDeclaration(701) at 3", "Insert Block(700) into MethodDeclaration(701) at 4", "Insert Modifier: private(702) into MethodDeclaration(739) at 0", "Insert ArrayType: Field[](706) into MethodDeclaration(739) at 1", "Insert SimpleName: getDeclardFields(707) into MethodDeclaration(739) at 2", "Insert SingleVariableDeclaration(713) into MethodDeclaration(739) at 3", "Insert Block(738) into MethodDeclaration(739) at 4", "Insert Modifier: private(740) into MethodDeclaration(792) at 0", "Insert PrimitiveType: void(741) into MethodDeclaration(792) at 1", "Insert SimpleName: handleReflectionError(742) into MethodDeclaration(792) at 2", "Insert SingleVariableDeclaration(748) into MethodDeclaration(792) at 3", "Insert SingleVariableDeclaration(752) into MethodDeclaration(792) at 4", "Insert Block(791) into MethodDeclaration(792) at 5", "Insert Modifier: private(793) into MethodDeclaration(825) at 0", "Insert PrimitiveType: void(794) into MethodDeclaration(825) at 1", "Insert SimpleName: checkForValidations(795) into MethodDeclaration(825) at 2", "Insert SingleVariableDeclaration(799) into MethodDeclaration(825) at 3", "Insert Block(824) into MethodDeclaration(825) at 4", "Insert Modifier: private(826) into MethodDeclaration(892) at 0", "Insert PrimitiveType: void(827) into MethodDeclaration(892) at 1", "Insert SimpleName: processField(828) into MethodDeclaration(892) at 2", "Insert SingleVariableDeclaration(832) into MethodDeclaration(892) at 3", "Insert SingleVariableDeclaration(840) into MethodDeclaration(892) at 4", "Move SingleVariableDeclaration(104) into MethodDeclaration(892) at 5", "Insert Block(891) into MethodDeclaration(892) at 6", "Insert Modifier: private(893) into MethodDeclaration(959) at 0", "Insert PrimitiveType: void(894) into MethodDeclaration(959) at 1", "Insert SimpleName: processMethod(895) into MethodDeclaration(959) at 2", "Insert SingleVariableDeclaration(899) into MethodDeclaration(959) at 3", "Insert SingleVariableDeclaration(907) into MethodDeclaration(959) at 4", "Move SingleVariableDeclaration(117) into MethodDeclaration(959) at 5", "Insert Block(958) into MethodDeclaration(959) at 6", "Insert SimpleName: Logger(51) into SimpleType: Logger(52) at 0", "Insert SimpleName: log(53) into VariableDeclarationFragment(59) at 0", "Insert MethodInvocation(58) into VariableDeclarationFragment(59) at 1", "Insert MethodInvocation(77) into VariableDeclarationFragment(78) at 1", "Insert MethodInvocation(96) into VariableDeclarationFragment(97) at 1", "Insert MethodInvocation(115) into VariableDeclarationFragment(116) at 1", "Insert BooleanLiteral: false(121) into VariableDeclarationFragment(122) at 1", "Insert SimpleType: Collection(128) into ParameterizedType: Collection<Class<? extends Annotation>>(135) at 0", "Insert ParameterizedType: Class<? extends Annotation>(134) into ParameterizedType: Collection<Class<? extends Annotation>>(135) at 1", "Insert SimpleName: fieldAnnotations(136) into VariableDeclarationFragment(137) at 0", "Insert SimpleType: Collection(143) into ParameterizedType: Collection<Class<? extends Annotation>>(150) at 0", "Insert ParameterizedType: Class<? extends Annotation>(149) into ParameterizedType: Collection<Class<? extends Annotation>>(150) at 1", "Insert SimpleName: methodAnnotations(151) into VariableDeclarationFragment(152) at 0", "Insert SimpleType: Collection(158) into ParameterizedType: Collection<Class<? extends Annotation>>(165) at 0", "Insert ParameterizedType: Class<? extends Annotation>(164) into ParameterizedType: Collection<Class<? extends Annotation>>(165) at 1", "Insert SimpleName: classAnnotations(166) into VariableDeclarationFragment(167) at 0", "Insert VariableDeclarationStatement(184) into Block(317) at 0", "Insert ExpressionStatement(191) into Block(317) at 1", "Insert ExpressionStatement(198) into Block(317) at 2", "Insert ExpressionStatement(205) into Block(317) at 3", "Insert ExpressionStatement(212) into Block(317) at 4", "Insert ExpressionStatement(219) into Block(317) at 5", "Insert ExpressionStatement(226) into Block(317) at 6", "Insert ExpressionStatement(232) into Block(317) at 7", "Insert VariableDeclarationStatement(247) into Block(317) at 8", "Insert ExpressionStatement(254) into Block(317) at 9", "Insert ExpressionStatement(261) into Block(317) at 10", "Insert ExpressionStatement(268) into Block(317) at 11", "Insert ExpressionStatement(275) into Block(317) at 12", "Insert ExpressionStatement(281) into Block(317) at 13", "Insert VariableDeclarationStatement(296) into Block(317) at 14", "Insert ExpressionStatement(303) into Block(317) at 15", "Insert ExpressionStatement(310) into Block(317) at 16", "Insert ExpressionStatement(316) into Block(317) at 17", "Insert ParameterizedType: Class<?>(324) into SingleVariableDeclaration(326) at 0", "Insert SimpleName: clazz(325) into SingleVariableDeclaration(326) at 1", "Insert ExpressionStatement(341) into Block(342) at 0", "Insert ParameterizedType: Class<?>(515) into SingleVariableDeclaration(517) at 0", "Insert SimpleName: clazz(516) into SingleVariableDeclaration(517) at 1", "Update ParameterizedType: Multimap<Class<? extends Annotation>,Field>(89) to Multimap<Class<? extends Annotation>,String>", "Update SimpleName: fieldMap(90) to usedNames", "Insert IfStatement(536) into Block(662) at 0", "Insert EnhancedForStatement(562) into Block(662) at 1", "Insert EnhancedForStatement(602) into Block(662) at 2", "Insert EnhancedForStatement(638) into Block(662) at 3", "Insert ExpressionStatement(645) into Block(662) at 4", "Insert EnhancedForStatement(661) into Block(662) at 5", "Insert SimpleType: Method(666) into ArrayType: Method[](668) at 0", "Insert Dimension(667) into ArrayType: Method[](668) at 1", "Insert ParameterizedType: Class<?>(673) into SingleVariableDeclaration(675) at 0", "Insert SimpleName: clazz(674) into SingleVariableDeclaration(675) at 1", "Insert TryStatement(692) into Block(700) at 0", "Insert ReturnStatement(699) into Block(700) at 1", "Insert SimpleType: Field(704) into ArrayType: Field[](706) at 0", "Insert Dimension(705) into ArrayType: Field[](706) at 1", "Insert ParameterizedType: Class<?>(711) into SingleVariableDeclaration(713) at 0", "Insert SimpleName: clazz(712) into SingleVariableDeclaration(713) at 1", "Insert TryStatement(730) into Block(738) at 0", "Insert ReturnStatement(737) into Block(738) at 1", "Insert ParameterizedType: Class<?>(746) into SingleVariableDeclaration(748) at 0", "Insert SimpleName: clazz(747) into SingleVariableDeclaration(748) at 1", "Insert SimpleType: Throwable(750) into SingleVariableDeclaration(752) at 0", "Insert SimpleName: e(751) into SingleVariableDeclaration(752) at 1", "Insert IfStatement(790) into Block(791) at 0", "Insert SimpleType: Field(797) into SingleVariableDeclaration(799) at 0", "Insert SimpleName: field(798) into SingleVariableDeclaration(799) at 1", "Insert EnhancedForStatement(823) into Block(824) at 0", "Insert SimpleType: Field(830) into SingleVariableDeclaration(832) at 0", "Insert SimpleName: field(831) into SingleVariableDeclaration(832) at 1", "Insert ParameterizedType: Class<? extends Annotation>(838) into SingleVariableDeclaration(840) at 0", "Insert SimpleName: annotationClass(839) into SingleVariableDeclaration(840) at 1", "Update ParameterizedType: Multimap<Class<? extends Annotation>,Method>(102) to Multimap<Class<? extends Annotation>,String>", "Update SimpleName: methodMap(103) to usedNames", "Insert IfStatement(890) into Block(891) at 0", "Insert SimpleType: Method(897) into SingleVariableDeclaration(899) at 0", "Insert SimpleName: method(898) into SingleVariableDeclaration(899) at 1", "Insert ParameterizedType: Class<? extends Annotation>(905) into SingleVariableDeclaration(907) at 0", "Insert SimpleName: annotationClass(906) into SingleVariableDeclaration(907) at 1", "Update ParameterizedType: Multimap<Class<? extends Annotation>,Annotation>(115) to Multimap<Class<? extends Annotation>,String>", "Update SimpleName: classMap(116) to usedNames", "Insert IfStatement(957) into Block(958) at 0", "Insert SimpleName: LoggerFactory(54) into MethodInvocation(58) at 0", "Insert SimpleName: getLogger(55) into MethodInvocation(58) at 1", "Insert MethodInvocation(57) into MethodInvocation(58) at 2", "Insert SimpleName: ArrayListMultimap(75) into MethodInvocation(77) at 0", "Insert SimpleName: create(76) into MethodInvocation(77) at 1", "Insert SimpleName: ArrayListMultimap(94) into MethodInvocation(96) at 0", "Insert SimpleName: create(95) into MethodInvocation(96) at 1", "Insert SimpleName: ArrayListMultimap(113) into MethodInvocation(115) at 0", "Insert SimpleName: create(114) into MethodInvocation(115) at 1", "Insert SimpleName: Collection(127) into SimpleType: Collection(128) at 0", "Insert SimpleType: Class(130) into ParameterizedType: Class<? extends Annotation>(134) at 0", "Insert WildcardType: ? extends Annotation(133) into ParameterizedType: Class<? extends Annotation>(134) at 1", "Insert SimpleName: Collection(142) into SimpleType: Collection(143) at 0", "Insert SimpleType: Class(145) into ParameterizedType: Class<? extends Annotation>(149) at 0", "Insert WildcardType: ? extends Annotation(148) into ParameterizedType: Class<? extends Annotation>(149) at 1", "Insert SimpleName: Collection(157) into SimpleType: Collection(158) at 0", "Insert SimpleType: Class(160) into ParameterizedType: Class<? extends Annotation>(164) at 0", "Insert WildcardType: ? extends Annotation(163) into ParameterizedType: Class<? extends Annotation>(164) at 1", "Insert ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(178) into VariableDeclarationStatement(184) at 0", "Insert VariableDeclarationFragment(183) into VariableDeclarationStatement(184) at 1", "Insert MethodInvocation(190) into ExpressionStatement(191) at 0", "Insert MethodInvocation(197) into ExpressionStatement(198) at 0", "Insert MethodInvocation(204) into ExpressionStatement(205) at 0", "Insert MethodInvocation(211) into ExpressionStatement(212) at 0", "Insert MethodInvocation(218) into ExpressionStatement(219) at 0", "Insert MethodInvocation(225) into ExpressionStatement(226) at 0", "Insert Assignment: =(231) into ExpressionStatement(232) at 0", "Insert ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(241) into VariableDeclarationStatement(247) at 0", "Insert VariableDeclarationFragment(246) into VariableDeclarationStatement(247) at 1", "Insert MethodInvocation(253) into ExpressionStatement(254) at 0", "Insert MethodInvocation(260) into ExpressionStatement(261) at 0", "Insert MethodInvocation(267) into ExpressionStatement(268) at 0", "Insert MethodInvocation(274) into ExpressionStatement(275) at 0", "Insert Assignment: =(280) into ExpressionStatement(281) at 0", "Insert ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(290) into VariableDeclarationStatement(296) at 0", "Insert VariableDeclarationFragment(295) into VariableDeclarationStatement(296) at 1", "Insert MethodInvocation(302) into ExpressionStatement(303) at 0", "Insert MethodInvocation(309) into ExpressionStatement(310) at 0", "Insert Assignment: =(315) into ExpressionStatement(316) at 0", "Insert SimpleType: Class(322) into ParameterizedType: Class<?>(324) at 0", "Insert WildcardType: ?(323) into ParameterizedType: Class<?>(324) at 1", "Insert MethodInvocation(340) into ExpressionStatement(341) at 0", "Insert SimpleType: Class(513) into ParameterizedType: Class<?>(515) at 0", "Insert WildcardType: ?(514) into ParameterizedType: Class<?>(515) at 1", "Update SimpleType: Field(88) to String", "Insert InfixExpression: ==(533) into IfStatement(536) at 0", "Insert Block(535) into IfStatement(536) at 1", "Insert SingleVariableDeclaration(544) into EnhancedForStatement(562) at 0", "Insert SimpleName: classAnnotations(545) into EnhancedForStatement(562) at 1", "Insert Block(561) into EnhancedForStatement(562) at 2", "Insert SingleVariableDeclaration(566) into EnhancedForStatement(602) at 0", "Insert MethodInvocation(569) into EnhancedForStatement(602) at 1", "Insert Block(601) into EnhancedForStatement(602) at 2", "Insert SingleVariableDeclaration(606) into EnhancedForStatement(638) at 0", "Insert MethodInvocation(609) into EnhancedForStatement(638) at 1", "Insert Block(637) into EnhancedForStatement(638) at 2", "Insert MethodInvocation(644) into ExpressionStatement(645) at 0", "Insert SingleVariableDeclaration(651) into EnhancedForStatement(661) at 0", "Insert MethodInvocation(654) into EnhancedForStatement(661) at 1", "Insert Block(660) into EnhancedForStatement(661) at 2", "Insert SimpleName: Method(665) into SimpleType: Method(666) at 0", "Insert SimpleType: Class(671) into ParameterizedType: Class<?>(673) at 0", "Insert WildcardType: ?(672) into ParameterizedType: Class<?>(673) at 1", "Insert Block(680) into TryStatement(692) at 0", "Insert CatchClause(691) into TryStatement(692) at 1", "Insert ArrayCreation(698) into ReturnStatement(699) at 0", "Insert SimpleName: Field(703) into SimpleType: Field(704) at 0", "Insert SimpleType: Class(709) into ParameterizedType: Class<?>(711) at 0", "Insert WildcardType: ?(710) into ParameterizedType: Class<?>(711) at 1", "Insert Block(718) into TryStatement(730) at 0", "Insert CatchClause(729) into TryStatement(730) at 1", "Insert ArrayCreation(736) into ReturnStatement(737) at 0", "Insert SimpleType: Class(744) into ParameterizedType: Class<?>(746) at 0", "Insert WildcardType: ?(745) into ParameterizedType: Class<?>(746) at 1", "Insert SimpleName: Throwable(749) into SimpleType: Throwable(750) at 0", "Insert InfixExpression: !=(755) into IfStatement(790) at 0", "Insert Block(789) into IfStatement(790) at 1", "Insert SimpleName: Field(796) into SimpleType: Field(797) at 0", "Insert SingleVariableDeclaration(803) into EnhancedForStatement(823) at 0", "Insert MethodInvocation(806) into EnhancedForStatement(823) at 1", "Insert Block(822) into EnhancedForStatement(823) at 2", "Insert SimpleName: Field(829) into SimpleType: Field(830) at 0", "Insert SimpleType: Class(834) into ParameterizedType: Class<? extends Annotation>(838) at 0", "Insert WildcardType: ? extends Annotation(837) into ParameterizedType: Class<? extends Annotation>(838) at 1", "Update SimpleType: Method(101) to String", "Insert MethodInvocation(857) into IfStatement(890) at 0", "Insert Block(889) into IfStatement(890) at 1", "Insert SimpleName: Method(896) into SimpleType: Method(897) at 0", "Insert SimpleType: Class(901) into ParameterizedType: Class<? extends Annotation>(905) at 0", "Insert WildcardType: ? extends Annotation(904) into ParameterizedType: Class<? extends Annotation>(905) at 1", "Update SimpleType: Annotation(114) to String", "Insert MethodInvocation(924) into IfStatement(957) at 0", "Insert Block(956) into IfStatement(957) at 1", "Insert SimpleName: getClass(56) into MethodInvocation(57) at 0", "Insert SimpleName: Class(129) into SimpleType: Class(130) at 0", "Insert SimpleType: Annotation(132) into WildcardType: ? extends Annotation(133) at 0", "Insert SimpleName: Class(144) into SimpleType: Class(145) at 0", "Insert SimpleType: Annotation(147) into WildcardType: ? extends Annotation(148) at 0", "Insert SimpleName: Class(159) into SimpleType: Class(160) at 0", "Insert SimpleType: Annotation(162) into WildcardType: ? extends Annotation(163) at 0", "Insert SimpleType: ImmutableSet.Builder(171) into ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(178) at 0", "Insert ParameterizedType: Class<? extends Annotation>(177) into ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(178) at 1", "Insert SimpleName: methodAnnotationsBuilder(179) into VariableDeclarationFragment(183) at 0", "Insert MethodInvocation(182) into VariableDeclarationFragment(183) at 1", "Insert SimpleName: methodAnnotationsBuilder(185) into MethodInvocation(190) at 0", "Insert SimpleName: add(186) into MethodInvocation(190) at 1", "Insert TypeLiteral(189) into MethodInvocation(190) at 2", "Insert SimpleName: methodAnnotationsBuilder(192) into MethodInvocation(197) at 0", "Insert SimpleName: add(193) into MethodInvocation(197) at 1", "Insert TypeLiteral(196) into MethodInvocation(197) at 2", "Insert SimpleName: methodAnnotationsBuilder(199) into MethodInvocation(204) at 0", "Insert SimpleName: add(200) into MethodInvocation(204) at 1", "Insert TypeLiteral(203) into MethodInvocation(204) at 2", "Insert SimpleName: methodAnnotationsBuilder(206) into MethodInvocation(211) at 0", "Insert SimpleName: add(207) into MethodInvocation(211) at 1", "Insert TypeLiteral(210) into MethodInvocation(211) at 2", "Insert SimpleName: methodAnnotationsBuilder(213) into MethodInvocation(218) at 0", "Insert SimpleName: add(214) into MethodInvocation(218) at 1", "Insert TypeLiteral(217) into MethodInvocation(218) at 2", "Insert SimpleName: methodAnnotationsBuilder(220) into MethodInvocation(225) at 0", "Insert SimpleName: add(221) into MethodInvocation(225) at 1", "Insert TypeLiteral(224) into MethodInvocation(225) at 2", "Insert SimpleName: methodAnnotations(227) into Assignment: =(231) at 0", "Insert MethodInvocation(230) into Assignment: =(231) at 1", "Insert SimpleType: ImmutableSet.Builder(234) into ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(241) at 0", "Insert ParameterizedType: Class<? extends Annotation>(240) into ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(241) at 1", "Insert SimpleName: fieldAnnotationsBuilder(242) into VariableDeclarationFragment(246) at 0", "Insert MethodInvocation(245) into VariableDeclarationFragment(246) at 1", "Insert SimpleName: fieldAnnotationsBuilder(248) into MethodInvocation(253) at 0", "Insert SimpleName: add(249) into MethodInvocation(253) at 1", "Insert TypeLiteral(252) into MethodInvocation(253) at 2", "Insert SimpleName: fieldAnnotationsBuilder(255) into MethodInvocation(260) at 0", "Insert SimpleName: add(256) into MethodInvocation(260) at 1", "Insert TypeLiteral(259) into MethodInvocation(260) at 2", "Insert SimpleName: fieldAnnotationsBuilder(262) into MethodInvocation(267) at 0", "Insert SimpleName: add(263) into MethodInvocation(267) at 1", "Insert TypeLiteral(266) into MethodInvocation(267) at 2", "Insert SimpleName: fieldAnnotationsBuilder(269) into MethodInvocation(274) at 0", "Insert SimpleName: add(270) into MethodInvocation(274) at 1", "Insert TypeLiteral(273) into MethodInvocation(274) at 2", "Insert SimpleName: fieldAnnotations(276) into Assignment: =(280) at 0", "Insert MethodInvocation(279) into Assignment: =(280) at 1", "Insert SimpleType: ImmutableSet.Builder(283) into ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(290) at 0", "Insert ParameterizedType: Class<? extends Annotation>(289) into ParameterizedType: ImmutableSet.Builder<Class<? extends Annotation>>(290) at 1", "Insert SimpleName: classAnnotationsBuilder(291) into VariableDeclarationFragment(295) at 0", "Insert MethodInvocation(294) into VariableDeclarationFragment(295) at 1", "Insert SimpleName: classAnnotationsBuilder(297) into MethodInvocation(302) at 0", "Insert SimpleName: add(298) into MethodInvocation(302) at 1", "Insert TypeLiteral(301) into MethodInvocation(302) at 2", "Insert SimpleName: classAnnotationsBuilder(304) into MethodInvocation(309) at 0", "Insert SimpleName: add(305) into MethodInvocation(309) at 1", "Insert TypeLiteral(308) into MethodInvocation(309) at 2", "Insert SimpleName: classAnnotations(311) into Assignment: =(315) at 0", "Insert MethodInvocation(314) into Assignment: =(315) at 1", "Insert SimpleName: Class(321) into SimpleType: Class(322) at 0", "Insert SimpleName: addLifeCycleMethods(327) into MethodInvocation(340) at 0", "Insert SimpleName: clazz(328) into MethodInvocation(340) at 1", "Insert MethodInvocation(339) into MethodInvocation(340) at 2", "Insert SimpleName: Class(512) into SimpleType: Class(513) at 0", "Update SimpleName: Field(87) to String", "Insert SimpleName: clazz(531) into InfixExpression: ==(533) at 0", "Insert NullLiteral(532) into InfixExpression: ==(533) at 1", "Insert ReturnStatement(534) into Block(535) at 0", "Insert ParameterizedType: Class<? extends Annotation>(542) into SingleVariableDeclaration(544) at 0", "Insert SimpleName: annotationClass(543) into SingleVariableDeclaration(544) at 1", "Insert IfStatement(560) into Block(561) at 0", "Insert SimpleType: Field(564) into SingleVariableDeclaration(566) at 0", "Insert SimpleName: field(565) into SingleVariableDeclaration(566) at 1", "Insert SimpleName: getDeclardFields(567) into MethodInvocation(569) at 0", "Insert SimpleName: clazz(568) into MethodInvocation(569) at 1", "Insert IfStatement(575) into Block(601) at 0", "Insert IfStatement(583) into Block(601) at 1", "Insert EnhancedForStatement(600) into Block(601) at 2", "Insert SimpleType: Method(604) into SingleVariableDeclaration(606) at 0", "Insert SimpleName: method(605) into SingleVariableDeclaration(606) at 1", "Insert SimpleName: getDeclaredMethods(607) into MethodInvocation(609) at 0", "Insert SimpleName: clazz(608) into MethodInvocation(609) at 1", "Insert IfStatement(619) into Block(637) at 0", "Insert EnhancedForStatement(636) into Block(637) at 1", "Insert SimpleName: addLifeCycleMethods(639) into MethodInvocation(644) at 0", "Insert MethodInvocation(642) into MethodInvocation(644) at 1", "Insert SimpleName: usedNames(643) into MethodInvocation(644) at 2", "Insert ParameterizedType: Class<?>(649) into SingleVariableDeclaration(651) at 0", "Insert SimpleName: face(650) into SingleVariableDeclaration(651) at 1", "Insert SimpleName: clazz(652) into MethodInvocation(654) at 0", "Insert SimpleName: getInterfaces(653) into MethodInvocation(654) at 1", "Insert ExpressionStatement(659) into Block(660) at 0", "Insert SimpleName: Class(670) into SimpleType: Class(671) at 0", "Insert ReturnStatement(679) into Block(680) at 0", "Insert SingleVariableDeclaration(684) into CatchClause(691) at 0", "Insert Block(690) into CatchClause(691) at 1", "Insert ArrayType: Method[](696) into ArrayCreation(698) at 0", "Insert ArrayInitializer(697) into ArrayCreation(698) at 1", "Insert SimpleName: Class(708) into SimpleType: Class(709) at 0", "Insert ReturnStatement(717) into Block(718) at 0", "Insert SingleVariableDeclaration(722) into CatchClause(729) at 0", "Insert Block(728) into CatchClause(729) at 1", "Insert ArrayType: Field[](734) into ArrayCreation(736) at 0", "Insert ArrayInitializer(735) into ArrayCreation(736) at 1", "Insert SimpleName: Class(743) into SimpleType: Class(744) at 0", "Insert SimpleName: e(753) into InfixExpression: !=(755) at 0", "Insert NullLiteral(754) into InfixExpression: !=(755) at 1", "Insert IfStatement(781) into Block(789) at 0", "Insert ExpressionStatement(788) into Block(789) at 1", "Insert SimpleType: Annotation(801) into SingleVariableDeclaration(803) at 0", "Insert SimpleName: annotation(802) into SingleVariableDeclaration(803) at 1", "Insert SimpleName: field(804) into MethodInvocation(806) at 0", "Insert SimpleName: getDeclaredAnnotations(805) into MethodInvocation(806) at 1", "Insert IfStatement(821) into Block(822) at 0", "Insert SimpleName: Class(833) into SimpleType: Class(834) at 0", "Insert SimpleType: Annotation(836) into WildcardType: ? extends Annotation(837) at 0", "Update SimpleName: Method(100) to String", "Insert SimpleName: field(854) into MethodInvocation(857) at 0", "Insert SimpleName: isAnnotationPresent(855) into MethodInvocation(857) at 1", "Insert SimpleName: annotationClass(856) into MethodInvocation(857) at 2", "Insert IfStatement(888) into Block(889) at 0", "Insert SimpleName: Class(900) into SimpleType: Class(901) at 0", "Insert SimpleType: Annotation(903) into WildcardType: ? extends Annotation(904) at 0", "Update SimpleName: Annotation(113) to String", "Insert SimpleName: method(921) into MethodInvocation(924) at 0", "Insert SimpleName: isAnnotationPresent(922) into MethodInvocation(924) at 1", "Insert SimpleName: annotationClass(923) into MethodInvocation(924) at 2", "Insert IfStatement(955) into Block(956) at 0", "Insert SimpleName: Annotation(131) into SimpleType: Annotation(132) at 0", "Insert SimpleName: Annotation(146) into SimpleType: Annotation(147) at 0", "Insert SimpleName: Annotation(161) into SimpleType: Annotation(162) at 0", "Insert QualifiedName: ImmutableSet.Builder(170) into SimpleType: ImmutableSet.Builder(171) at 0", "Insert SimpleType: Class(173) into ParameterizedType: Class<? extends Annotation>(177) at 0", "Insert WildcardType: ? extends Annotation(176) into ParameterizedType: Class<? extends Annotation>(177) at 1", "Insert SimpleName: ImmutableSet(180) into MethodInvocation(182) at 0", "Insert SimpleName: builder(181) into MethodInvocation(182) at 1", "Insert SimpleType: PreConfiguration(188) into TypeLiteral(189) at 0", "Insert SimpleType: PostConstruct(195) into TypeLiteral(196) at 0", "Insert SimpleType: PreDestroy(202) into TypeLiteral(203) at 0", "Insert SimpleType: Resource(209) into TypeLiteral(210) at 0", "Insert SimpleType: Resources(216) into TypeLiteral(217) at 0", "Insert SimpleType: WarmUp(223) into TypeLiteral(224) at 0", "Insert SimpleName: methodAnnotationsBuilder(228) into MethodInvocation(230) at 0", "Insert SimpleName: build(229) into MethodInvocation(230) at 1", "Insert QualifiedName: ImmutableSet.Builder(233) into SimpleType: ImmutableSet.Builder(234) at 0", "Insert SimpleType: Class(236) into ParameterizedType: Class<? extends Annotation>(240) at 0", "Insert WildcardType: ? extends Annotation(239) into ParameterizedType: Class<? extends Annotation>(240) at 1", "Insert SimpleName: ImmutableSet(243) into MethodInvocation(245) at 0", "Insert SimpleName: builder(244) into MethodInvocation(245) at 1", "Insert SimpleType: Configuration(251) into TypeLiteral(252) at 0", "Insert SimpleType: Resource(258) into TypeLiteral(259) at 0", "Insert SimpleType: Resources(265) into TypeLiteral(266) at 0", "Insert SimpleType: ConfigurationVariable(272) into TypeLiteral(273) at 0", "Insert SimpleName: fieldAnnotationsBuilder(277) into MethodInvocation(279) at 0", "Insert SimpleName: build(278) into MethodInvocation(279) at 1", "Insert QualifiedName: ImmutableSet.Builder(282) into SimpleType: ImmutableSet.Builder(283) at 0", "Insert SimpleType: Class(285) into ParameterizedType: Class<? extends Annotation>(289) at 0", "Insert WildcardType: ? extends Annotation(288) into ParameterizedType: Class<? extends Annotation>(289) at 1", "Insert SimpleName: ImmutableSet(292) into MethodInvocation(294) at 0", "Insert SimpleName: builder(293) into MethodInvocation(294) at 1", "Insert SimpleType: Resource(300) into TypeLiteral(301) at 0", "Insert SimpleType: Resources(307) into TypeLiteral(308) at 0", "Insert SimpleName: classAnnotationsBuilder(312) into MethodInvocation(314) at 0", "Insert SimpleName: build(313) into MethodInvocation(314) at 1", "Insert SimpleName: ArrayListMultimap(329) into MethodInvocation(339) at 0", "Insert ParameterizedType: Class<? extends Annotation>(335) into MethodInvocation(339) at 1", "Insert SimpleType: String(337) into MethodInvocation(339) at 2", "Insert SimpleName: create(338) into MethodInvocation(339) at 3", "Insert SimpleType: Class(538) into ParameterizedType: Class<? extends Annotation>(542) at 0", "Insert WildcardType: ? extends Annotation(541) into ParameterizedType: Class<? extends Annotation>(542) at 1", "Insert MethodInvocation(549) into IfStatement(560) at 0", "Insert Block(559) into IfStatement(560) at 1", "Insert SimpleName: Field(563) into SimpleType: Field(564) at 0", "Insert MethodInvocation(572) into IfStatement(575) at 0", "Insert Block(574) into IfStatement(575) at 1", "Insert PrefixExpression: !(577) into IfStatement(583) at 0", "Insert Block(582) into IfStatement(583) at 1", "Insert SingleVariableDeclaration(591) into EnhancedForStatement(600) at 0", "Insert SimpleName: fieldAnnotations(592) into EnhancedForStatement(600) at 1", "Insert Block(599) into EnhancedForStatement(600) at 2", "Insert SimpleName: Method(603) into SimpleType: Method(604) at 0", "Insert InfixExpression: ||(616) into IfStatement(619) at 0", "Insert Block(618) into IfStatement(619) at 1", "Insert SingleVariableDeclaration(627) into EnhancedForStatement(636) at 0", "Insert SimpleName: methodAnnotations(628) into EnhancedForStatement(636) at 1", "Insert Block(635) into EnhancedForStatement(636) at 2", "Insert SimpleName: clazz(640) into MethodInvocation(642) at 0", "Insert SimpleName: getSuperclass(641) into MethodInvocation(642) at 1", "Insert SimpleType: Class(647) into ParameterizedType: Class<?>(649) at 0", "Insert WildcardType: ?(648) into ParameterizedType: Class<?>(649) at 1", "Insert MethodInvocation(658) into ExpressionStatement(659) at 0", "Insert MethodInvocation(678) into ReturnStatement(679) at 0", "Insert SimpleType: Throwable(682) into SingleVariableDeclaration(684) at 0", "Insert SimpleName: e(683) into SingleVariableDeclaration(684) at 1", "Insert ExpressionStatement(689) into Block(690) at 0", "Insert SimpleType: Method(694) into ArrayType: Method[](696) at 0", "Insert Dimension(695) into ArrayType: Method[](696) at 1", "Insert MethodInvocation(716) into ReturnStatement(717) at 0", "Insert SimpleType: Throwable(720) into SingleVariableDeclaration(722) at 0", "Insert SimpleName: e(721) into SingleVariableDeclaration(722) at 1", "Insert ExpressionStatement(727) into Block(728) at 0", "Insert SimpleType: Field(732) into ArrayType: Field[](734) at 0", "Insert Dimension(733) into ArrayType: Field[](734) at 1", "Insert InfixExpression: ||(766) into IfStatement(781) at 0", "Insert Block(780) into IfStatement(781) at 1", "Insert MethodInvocation(787) into ExpressionStatement(788) at 0", "Insert SimpleName: Annotation(800) into SimpleType: Annotation(801) at 0", "Insert MethodInvocation(814) into IfStatement(821) at 0", "Insert Block(820) into IfStatement(821) at 1", "Insert SimpleName: Annotation(835) into SimpleType: Annotation(836) at 0", "Insert PrefixExpression: !(867) into IfStatement(888) at 0", "Insert Block(887) into IfStatement(888) at 1", "Insert SimpleName: Annotation(902) into SimpleType: Annotation(903) at 0", "Insert PrefixExpression: !(934) into IfStatement(955) at 0", "Insert Block(954) into IfStatement(955) at 1", "Insert SimpleName: Class(172) into SimpleType: Class(173) at 0", "Insert SimpleType: Annotation(175) into WildcardType: ? extends Annotation(176) at 0", "Insert SimpleName: PreConfiguration(187) into SimpleType: PreConfiguration(188) at 0", "Insert SimpleName: PostConstruct(194) into SimpleType: PostConstruct(195) at 0", "Insert SimpleName: PreDestroy(201) into SimpleType: PreDestroy(202) at 0", "Insert SimpleName: Resource(208) into SimpleType: Resource(209) at 0", "Insert SimpleName: Resources(215) into SimpleType: Resources(216) at 0", "Insert SimpleName: WarmUp(222) into SimpleType: WarmUp(223) at 0", "Insert SimpleName: Class(235) into SimpleType: Class(236) at 0", "Insert SimpleType: Annotation(238) into WildcardType: ? extends Annotation(239) at 0", "Insert SimpleName: Configuration(250) into SimpleType: Configuration(251) at 0", "Insert SimpleName: Resource(257) into SimpleType: Resource(258) at 0", "Insert SimpleName: Resources(264) into SimpleType: Resources(265) at 0", "Insert SimpleName: ConfigurationVariable(271) into SimpleType: ConfigurationVariable(272) at 0", "Insert SimpleName: Class(284) into SimpleType: Class(285) at 0", "Insert SimpleType: Annotation(287) into WildcardType: ? extends Annotation(288) at 0", "Insert SimpleName: Resource(299) into SimpleType: Resource(300) at 0", "Insert SimpleName: Resources(306) into SimpleType: Resources(307) at 0", "Insert SimpleType: Class(331) into ParameterizedType: Class<? extends Annotation>(335) at 0", "Insert WildcardType: ? extends Annotation(334) into ParameterizedType: Class<? extends Annotation>(335) at 1", "Insert SimpleName: String(336) into SimpleType: String(337) at 0", "Insert SimpleName: Class(537) into SimpleType: Class(538) at 0", "Insert SimpleType: Annotation(540) into WildcardType: ? extends Annotation(541) at 0", "Insert SimpleName: clazz(546) into MethodInvocation(549) at 0", "Insert SimpleName: isAnnotationPresent(547) into MethodInvocation(549) at 1", "Insert SimpleName: annotationClass(548) into MethodInvocation(549) at 2", "Insert ExpressionStatement(558) into Block(559) at 0", "Insert SimpleName: field(570) into MethodInvocation(572) at 0", "Insert SimpleName: isSynthetic(571) into MethodInvocation(572) at 1", "Insert ContinueStatement(573) into Block(574) at 0", "Insert SimpleName: hasValidations(576) into PrefixExpression: !(577) at 0", "Insert ExpressionStatement(581) into Block(582) at 0", "Insert ParameterizedType: Class<? extends Annotation>(589) into SingleVariableDeclaration(591) at 0", "Insert SimpleName: annotationClass(590) into SingleVariableDeclaration(591) at 1", "Insert ExpressionStatement(598) into Block(599) at 0", "Insert MethodInvocation(612) into InfixExpression: ||(616) at 0", "Insert MethodInvocation(615) into InfixExpression: ||(616) at 1", "Insert ContinueStatement(617) into Block(618) at 0", "Insert ParameterizedType: Class<? extends Annotation>(625) into SingleVariableDeclaration(627) at 0", "Insert SimpleName: annotationClass(626) into SingleVariableDeclaration(627) at 1", "Insert ExpressionStatement(634) into Block(635) at 0", "Insert SimpleName: Class(646) into SimpleType: Class(647) at 0", "Insert SimpleName: addLifeCycleMethods(655) into MethodInvocation(658) at 0", "Insert SimpleName: face(656) into MethodInvocation(658) at 1", "Insert SimpleName: usedNames(657) into MethodInvocation(658) at 2", "Insert SimpleName: clazz(676) into MethodInvocation(678) at 0", "Insert SimpleName: getDeclaredMethods(677) into MethodInvocation(678) at 1", "Insert SimpleName: Throwable(681) into SimpleType: Throwable(682) at 0", "Insert MethodInvocation(688) into ExpressionStatement(689) at 0", "Insert SimpleName: Method(693) into SimpleType: Method(694) at 0", "Insert SimpleName: clazz(714) into MethodInvocation(716) at 0", "Insert SimpleName: getDeclaredFields(715) into MethodInvocation(716) at 1", "Insert SimpleName: Throwable(719) into SimpleType: Throwable(720) at 0", "Insert MethodInvocation(726) into ExpressionStatement(727) at 0", "Insert SimpleName: Field(731) into SimpleType: Field(732) at 0", "Insert ParenthesizedExpression(760) into InfixExpression: ||(766) at 0", "Insert ParenthesizedExpression(765) into InfixExpression: ||(766) at 1", "Insert ExpressionStatement(778) into Block(780) at 0", "Insert ReturnStatement(779) into Block(780) at 1", "Insert SimpleName: handleReflectionError(782) into MethodInvocation(787) at 0", "Insert SimpleName: clazz(783) into MethodInvocation(787) at 1", "Insert MethodInvocation(786) into MethodInvocation(787) at 2", "Insert MethodInvocation(809) into MethodInvocation(814) at 0", "Insert SimpleName: isAnnotationPresent(810) into MethodInvocation(814) at 1", "Insert TypeLiteral(813) into MethodInvocation(814) at 2", "Insert ExpressionStatement(818) into Block(820) at 0", "Insert BreakStatement(819) into Block(820) at 1", "Insert MethodInvocation(866) into PrefixExpression: !(867) at 0", "Insert ExpressionStatement(872) into Block(887) at 0", "Insert ExpressionStatement(880) into Block(887) at 1", "Insert ExpressionStatement(886) into Block(887) at 2", "Insert MethodInvocation(933) into PrefixExpression: !(934) at 0", "Move ExpressionStatement(132) into Block(954) at 0", "Move ExpressionStatement(138) into Block(954) at 1", "Move ExpressionStatement(144) into Block(954) at 2", "Insert SimpleName: Annotation(174) into SimpleType: Annotation(175) at 0", "Insert SimpleName: Annotation(237) into SimpleType: Annotation(238) at 0", "Insert SimpleName: Annotation(286) into SimpleType: Annotation(287) at 0", "Insert SimpleName: Class(330) into SimpleType: Class(331) at 0", "Insert SimpleType: Annotation(333) into WildcardType: ? extends Annotation(334) at 0", "Insert SimpleName: Annotation(539) into SimpleType: Annotation(540) at 0", "Insert MethodInvocation(557) into ExpressionStatement(558) at 0", "Insert MethodInvocation(580) into ExpressionStatement(581) at 0", "Insert SimpleType: Class(585) into ParameterizedType: Class<? extends Annotation>(589) at 0", "Insert WildcardType: ? extends Annotation(588) into ParameterizedType: Class<? extends Annotation>(589) at 1", "Insert MethodInvocation(597) into ExpressionStatement(598) at 0", "Insert SimpleName: method(610) into MethodInvocation(612) at 0", "Insert SimpleName: isSynthetic(611) into MethodInvocation(612) at 1", "Insert SimpleName: method(613) into MethodInvocation(615) at 0", "Insert SimpleName: isBridge(614) into MethodInvocation(615) at 1", "Insert SimpleType: Class(621) into ParameterizedType: Class<? extends Annotation>(625) at 0", "Insert WildcardType: ? extends Annotation(624) into ParameterizedType: Class<? extends Annotation>(625) at 1", "Insert MethodInvocation(633) into ExpressionStatement(634) at 0", "Insert SimpleName: handleReflectionError(685) into MethodInvocation(688) at 0", "Insert SimpleName: clazz(686) into MethodInvocation(688) at 1", "Insert SimpleName: e(687) into MethodInvocation(688) at 2", "Insert SimpleName: handleReflectionError(723) into MethodInvocation(726) at 0", "Insert SimpleName: clazz(724) into MethodInvocation(726) at 1", "Insert SimpleName: e(725) into MethodInvocation(726) at 2", "Insert InstanceofExpression(759) into ParenthesizedExpression(760) at 0", "Insert InstanceofExpression(764) into ParenthesizedExpression(765) at 0", "Insert MethodInvocation(777) into ExpressionStatement(778) at 0", "Insert SimpleName: e(784) into MethodInvocation(786) at 0", "Insert SimpleName: getCause(785) into MethodInvocation(786) at 1", "Insert SimpleName: annotation(807) into MethodInvocation(809) at 0", "Insert SimpleName: annotationType(808) into MethodInvocation(809) at 1", "Insert SimpleType: Constraint(812) into TypeLiteral(813) at 0", "Insert Assignment: =(817) into ExpressionStatement(818) at 0", "Insert MethodInvocation(861) into MethodInvocation(866) at 0", "Insert SimpleName: contains(862) into MethodInvocation(866) at 1", "Insert MethodInvocation(865) into MethodInvocation(866) at 2", "Insert MethodInvocation(871) into ExpressionStatement(872) at 0", "Insert MethodInvocation(879) into ExpressionStatement(880) at 0", "Insert MethodInvocation(885) into ExpressionStatement(886) at 0", "Insert MethodInvocation(928) into MethodInvocation(933) at 0", "Insert SimpleName: contains(929) into MethodInvocation(933) at 1", "Insert MethodInvocation(932) into MethodInvocation(933) at 2", "Insert MethodInvocation(938) into ExpressionStatement(939) at 0", "Insert MethodInvocation(946) into ExpressionStatement(947) at 0", "Insert MethodInvocation(952) into ExpressionStatement(953) at 0", "Insert SimpleName: Annotation(332) into SimpleType: Annotation(333) at 0", "Insert SimpleName: classMap(550) into MethodInvocation(557) at 0", "Insert SimpleName: put(551) into MethodInvocation(557) at 1", "Insert SimpleName: annotationClass(552) into MethodInvocation(557) at 2", "Insert MethodInvocation(556) into MethodInvocation(557) at 3", "Insert SimpleName: checkForValidations(578) into MethodInvocation(580) at 0", "Insert SimpleName: field(579) into MethodInvocation(580) at 1", "Insert SimpleName: Class(584) into SimpleType: Class(585) at 0", "Insert SimpleType: Annotation(587) into WildcardType: ? extends Annotation(588) at 0", "Insert SimpleName: processField(593) into MethodInvocation(597) at 0", "Insert SimpleName: field(594) into MethodInvocation(597) at 1", "Insert SimpleName: annotationClass(595) into MethodInvocation(597) at 2", "Insert SimpleName: usedNames(596) into MethodInvocation(597) at 3", "Insert SimpleName: Class(620) into SimpleType: Class(621) at 0", "Insert SimpleType: Annotation(623) into WildcardType: ? extends Annotation(624) at 0", "Insert SimpleName: processMethod(629) into MethodInvocation(633) at 0", "Insert SimpleName: method(630) into MethodInvocation(633) at 1", "Insert SimpleName: annotationClass(631) into MethodInvocation(633) at 2", "Insert SimpleName: usedNames(632) into MethodInvocation(633) at 3", "Insert SimpleName: e(756) into InstanceofExpression(759) at 0", "Insert SimpleType: NoClassDefFoundError(758) into InstanceofExpression(759) at 1", "Insert SimpleName: e(761) into InstanceofExpression(764) at 0", "Insert SimpleType: ClassNotFoundException(763) into InstanceofExpression(764) at 1", "Insert SimpleName: log(767) into MethodInvocation(777) at 0", "Insert SimpleName: debug(768) into MethodInvocation(777) at 1", "Insert MethodInvocation(775) into MethodInvocation(777) at 2", "Insert SimpleName: e(776) into MethodInvocation(777) at 3", "Insert SimpleName: Constraint(811) into SimpleType: Constraint(812) at 0", "Insert SimpleName: hasValidations(815) into Assignment: =(817) at 0", "Insert BooleanLiteral: true(816) into Assignment: =(817) at 1", "Insert SimpleName: usedNames(858) into MethodInvocation(861) at 0", "Insert SimpleName: get(859) into MethodInvocation(861) at 1", "Insert SimpleName: annotationClass(860) into MethodInvocation(861) at 2", "Insert SimpleName: field(863) into MethodInvocation(865) at 0", "Insert SimpleName: getName(864) into MethodInvocation(865) at 1", "Insert SimpleName: field(868) into MethodInvocation(871) at 0", "Insert SimpleName: setAccessible(869) into MethodInvocation(871) at 1", "Insert BooleanLiteral: true(870) into MethodInvocation(871) at 2", "Insert SimpleName: usedNames(873) into MethodInvocation(879) at 0", "Insert SimpleName: put(874) into MethodInvocation(879) at 1", "Insert SimpleName: annotationClass(875) into MethodInvocation(879) at 2", "Insert MethodInvocation(878) into MethodInvocation(879) at 3", "Insert SimpleName: fieldMap(881) into MethodInvocation(885) at 0", "Insert SimpleName: put(882) into MethodInvocation(885) at 1", "Insert SimpleName: annotationClass(883) into MethodInvocation(885) at 2", "Insert SimpleName: field(884) into MethodInvocation(885) at 3", "Insert SimpleName: usedNames(925) into MethodInvocation(928) at 0", "Insert SimpleName: get(926) into MethodInvocation(928) at 1", "Insert SimpleName: annotationClass(927) into MethodInvocation(928) at 2", "Insert SimpleName: method(930) into MethodInvocation(932) at 0", "Insert SimpleName: getName(931) into MethodInvocation(932) at 1", "Insert SimpleName: method(935) into MethodInvocation(938) at 0", "Insert SimpleName: setAccessible(936) into MethodInvocation(938) at 1", "Insert BooleanLiteral: true(937) into MethodInvocation(938) at 2", "Insert SimpleName: usedNames(940) into MethodInvocation(946) at 0", "Insert SimpleName: put(941) into MethodInvocation(946) at 1", "Insert SimpleName: annotationClass(942) into MethodInvocation(946) at 2", "Insert MethodInvocation(945) into MethodInvocation(946) at 3", "Insert SimpleName: methodMap(948) into MethodInvocation(952) at 0", "Insert SimpleName: put(949) into MethodInvocation(952) at 1", "Insert SimpleName: annotationClass(950) into MethodInvocation(952) at 2", "Insert SimpleName: method(951) into MethodInvocation(952) at 3", "Insert SimpleName: clazz(553) into MethodInvocation(556) at 0", "Insert SimpleName: getAnnotation(554) into MethodInvocation(556) at 1", "Insert SimpleName: annotationClass(555) into MethodInvocation(556) at 2", "Insert SimpleName: Annotation(586) into SimpleType: Annotation(587) at 0", "Insert SimpleName: Annotation(622) into SimpleType: Annotation(623) at 0", "Insert SimpleName: NoClassDefFoundError(757) into SimpleType: NoClassDefFoundError(758) at 0", "Insert SimpleName: ClassNotFoundException(762) into SimpleType: ClassNotFoundException(763) at 0", "Insert SimpleName: String(769) into MethodInvocation(775) at 0", "Insert SimpleName: format(770) into MethodInvocation(775) at 1", "Insert StringLiteral: \"Class %s could not be resolved because of a class path error. Governator cannot further process the class.\"(771) into MethodInvocation(775) at 2", "Insert MethodInvocation(774) into MethodInvocation(775) at 3", "Insert SimpleName: field(876) into MethodInvocation(878) at 0", "Insert SimpleName: getName(877) into MethodInvocation(878) at 1", "Insert SimpleName: method(943) into MethodInvocation(945) at 0", "Insert SimpleName: getName(944) into MethodInvocation(945) at 1", "Insert SimpleName: clazz(772) into MethodInvocation(774) at 0", "Insert SimpleName: getName(773) into MethodInvocation(774) at 1", "Delete FieldDeclaration(76)", "Delete PrimitiveType: boolean(118)", "Delete SimpleName: hasValidations(119)", "Delete SingleVariableDeclaration(120)", "Delete ThisExpression(121)", "Delete SimpleName: fieldMap(122)", "Delete FieldAccess(123)", "Delete SimpleName: fieldMap(124)", "Delete Assignment: =(125)", "Delete ExpressionStatement(126)", "Delete Block(145)", "Delete MethodDeclaration(146)", "Delete TextElement: Return the collection of all methods with a specific annotation(167)", "Delete TagElement(168)", "Delete SimpleName: annotation(169)", "Delete TagElement: @param(170)", "Delete TagElement: @return(171)", "Delete Javadoc(172)", "Delete TextElement: Return the collection of all fields with a specific annotation(214)", "Delete TagElement(215)", "Delete SimpleName: annotation(216)", "Delete TagElement: @param(217)", "Delete TagElement: @return(218)", "Delete Javadoc(219)", "Delete TextElement: Return the collection of all class annotations of a specific type(261)", "Delete TagElement(262)", "Delete SimpleName: annotation(263)", "Delete TagElement: @param(264)", "Delete TagElement: @return(265)", "Delete Javadoc(266)", "Delete ThisExpression(127)", "Delete SimpleName: methodMap(128)", "Delete FieldAccess(129)", "Delete SimpleName: methodMap(130)", "Delete Assignment: =(131)", "Delete ThisExpression(133)", "Delete SimpleName: classMap(134)", "Delete FieldAccess(135)", "Delete SimpleName: classMap(136)", "Delete Assignment: =(137)", "Delete ThisExpression(139)", "Delete SimpleName: hasValidations(140)", "Delete FieldAccess(141)", "Delete SimpleName: hasValidations(142)", "Delete Assignment: =(143)"]}}, {"LifecycleMethodsFactory_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.ImplementedBy", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL MethodDeclaration", "DEL Modifier: public", "DEL SingleMemberAnnotation", "DEL SimpleName: create", "DEL TypeLiteral", "DEL ParameterizedType: Class<T>", "DEL SimpleName: T", "DEL SimpleName: LifecycleMethodsFactory", "DEL SingleVariableDeclaration", "DEL SimpleName: ImplementedBy", "DEL SimpleName: LifecycleMethods", "DEL SimpleType: LifecycleMethods", "DEL SimpleType: DefaultLifecycleMethodsFactory", "DEL SimpleName: DefaultLifecycleMethodsFactory", "DEL SimpleName: Class", "DEL TypeDeclaration: interface", "DEL SimpleType: T", "DEL SimpleName: type", "DEL SimpleType: Class", "DEL TypeParameter", "DEL SimpleName: T"]}]}}, {"LifecycleMethodsFactory_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.inject.ImplementedBy(2)", "Delete ImportDeclaration(3)", "Delete SimpleName: ImplementedBy(4)", "Delete SimpleName: DefaultLifecycleMethodsFactory(5)", "Delete SimpleType: DefaultLifecycleMethodsFactory(6)", "Delete TypeLiteral(7)", "Delete SingleMemberAnnotation(8)", "Delete Modifier: public(9)", "Delete SimpleName: LifecycleMethodsFactory(10)", "Delete SimpleName: T(11)", "Delete TypeParameter(12)", "Delete SimpleName: LifecycleMethods(13)", "Delete SimpleType: LifecycleMethods(14)", "Delete SimpleName: create(15)", "Delete SimpleName: Class(16)", "Delete SimpleType: Class(17)", "Delete SimpleName: T(18)", "Delete SimpleType: T(19)", "Delete ParameterizedType: Class<T>(20)", "Delete SimpleName: type(21)", "Delete SingleVariableDeclaration(22)", "Delete MethodDeclaration(23)", "Delete TypeDeclaration: interface(24)"]}}, {"LoggingLifecycleListener_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: org.apache.commons.lang.ObjectUtils to ImportDeclaration at 0"]}, {"root": "INS MethodInvocation to ArrayInitializer at 0", "operations": ["INS MethodInvocation to ArrayInitializer at 0"]}, {"root": "INS MethodInvocation to ArrayInitializer at 1", "operations": ["INS SimpleName: identityToString to MethodInvocation at 1", "INS MethodInvocation to ArrayInitializer at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: type to MethodInvocation at 0", "MOV SimpleName: getRawType to MethodInvocation at 1"]}, {"root": "UPDATE from getRawType to toString", "operations": ["UPD SimpleName: getRawType from getRawType to toString"]}, {"root": "UPDATE from getName to ObjectUtils", "operations": ["UPD SimpleName: getName from getName to ObjectUtils"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getName to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: obj to MethodInvocation at 2"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: hashCode", "DEL MethodInvocation"]}]}}, {"LoggingLifecycleListener_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(161) at 2", "Insert QualifiedName: org.apache.commons.lang.ObjectUtils(4) into ImportDeclaration(5) at 0", "Insert MethodInvocation(57) into ArrayInitializer(62) at 0", "Insert MethodInvocation(61) into ArrayInitializer(62) at 1", "Move SimpleName: type(53) into MethodInvocation(57) at 0", "Update SimpleName: getRawType(54) to toString", "Move SimpleName: getRawType(54) into MethodInvocation(57) at 1", "Update SimpleName: getName(56) to ObjectUtils", "Move SimpleName: getName(56) into MethodInvocation(61) at 0", "Insert SimpleName: identityToString(59) into MethodInvocation(61) at 1", "Move SimpleName: obj(58) into MethodInvocation(61) at 2", "Delete MethodInvocation(55)", "Delete MethodInvocation(57)", "Delete SimpleName: hashCode(59)", "Delete MethodInvocation(60)"]}}, {"Bootstrap_cluster": {"actions": [{"root": "UPDATE from com.netflix.governator.guice.AbstractBootstrapModule to com.netflix.governator.guice.BootstrapBinder", "operations": ["UPD QualifiedName: com.netflix.governator.guice.AbstractBootstrapModule from com.netflix.governator.guice.AbstractBootstrapModule to com.netflix.governator.guice.BootstrapBinder"]}, {"root": "UPDATE from AbstractBootstrapModule to BootstrapModule", "operations": ["UPD SimpleName: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule", "UPD SimpleType: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: BootstrapBinder to SimpleType: BootstrapBinder at 0", "INS SimpleName: binder to SingleVariableDeclaration at 1", "INS SimpleType: BootstrapBinder to SingleVariableDeclaration at 0"]}]}}, {"Bootstrap_diff": {"operations": ["Update QualifiedName: com.netflix.governator.guice.AbstractBootstrapModule(14) to com.netflix.governator.guice.BootstrapBinder", "Update SimpleType: AbstractBootstrapModule(77) to BootstrapModule", "Update SimpleName: AbstractBootstrapModule(76) to BootstrapModule", "Insert SingleVariableDeclaration(86) into MethodDeclaration(88) at 4", "Insert SimpleType: BootstrapBinder(84) into SingleVariableDeclaration(86) at 0", "Insert SimpleName: binder(85) into SingleVariableDeclaration(86) at 1", "Insert SimpleName: BootstrapBinder(83) into SimpleType: BootstrapBinder(84) at 0"]}}, {"GovernatorBootstrap_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: com.netflix.governator.guice.BootstrapBinder to ImportDeclaration at 0"]}, {"root": "UPDATE from com.netflix.governator.guice.AbstractBootstrapModule to com.netflix.governator.guice.BootstrapModule", "operations": ["UPD QualifiedName: com.netflix.governator.guice.AbstractBootstrapModule from com.netflix.governator.guice.AbstractBootstrapModule to com.netflix.governator.guice.BootstrapModule"]}, {"root": "UPDATE from AbstractBootstrapModule to BootstrapModule", "operations": ["UPD SimpleType: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule", "UPD SimpleName: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: BootstrapBinder to SingleVariableDeclaration at 0", "INS SimpleName: binder to SingleVariableDeclaration at 1", "INS SimpleName: BootstrapBinder to SimpleType: BootstrapBinder at 0"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS InfixExpression: == to IfStatement at 0", "INS BooleanLiteral: false to InfixExpression: == at 1"]}, {"root": "INS ExpressionStatement to IfStatement at 1", "operations": ["INS ExpressionStatement to IfStatement at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV MethodInvocation to InfixExpression: == at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL ExpressionStatement"]}]}}, {"GovernatorBootstrap_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(160) at 3", "Insert QualifiedName: com.netflix.governator.guice.BootstrapBinder(6) into ImportDeclaration(7) at 0", "Update QualifiedName: com.netflix.governator.guice.AbstractBootstrapModule(6) to com.netflix.governator.guice.BootstrapModule", "Update SimpleType: AbstractBootstrapModule(20) to BootstrapModule", "Update SimpleName: AbstractBootstrapModule(19) to BootstrapModule", "Insert SingleVariableDeclaration(54) into MethodDeclaration(158) at 4", "Insert SimpleType: BootstrapBinder(52) into SingleVariableDeclaration(54) at 0", "Insert SimpleName: binder(53) into SingleVariableDeclaration(54) at 1", "Insert SimpleName: BootstrapBinder(51) into SimpleType: BootstrapBinder(52) at 0", "Insert InfixExpression: ==(59) into IfStatement(64) at 0", "Insert ExpressionStatement(63) into IfStatement(64) at 1", "Move MethodInvocation(51) into InfixExpression: ==(59) at 0", "Insert BooleanLiteral: false(58) into InfixExpression: ==(59) at 1", "Move MethodInvocation(54) into ExpressionStatement(63) at 0", "Insert SimpleName: binder(65) into MethodInvocation(70) at 0", "Insert SimpleName: binder(72) into MethodInvocation(77) at 0", "Insert SimpleName: binder(60) into MethodInvocation(62) at 0", "Insert SimpleName: binder(90) into MethodInvocation(92) at 0", "Insert SimpleName: binder(129) into MethodInvocation(131) at 0", "Delete PrefixExpression: !(52)", "Delete ExpressionStatement(55)", "Delete Block(56)"]}}, {"ModulesBootstrap_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: com.netflix.governator.guice.BootstrapBinder to ImportDeclaration at 0"]}, {"root": "UPDATE from com.netflix.governator.guice.AbstractBootstrapModule to com.netflix.governator.guice.BootstrapModule", "operations": ["UPD QualifiedName: com.netflix.governator.guice.AbstractBootstrapModule from com.netflix.governator.guice.AbstractBootstrapModule to com.netflix.governator.guice.BootstrapModule"]}, {"root": "UPDATE from AbstractBootstrapModule to BootstrapModule", "operations": ["UPD SimpleType: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule", "UPD SimpleName: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: BootstrapBinder to SingleVariableDeclaration at 0", "INS SimpleName: binder to SingleVariableDeclaration at 1", "INS SimpleName: BootstrapBinder to SimpleType: BootstrapBinder at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}]}}, {"ModulesBootstrap_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(63) at 3", "Insert QualifiedName: com.netflix.governator.guice.BootstrapBinder(6) into ImportDeclaration(7) at 0", "Update QualifiedName: com.netflix.governator.guice.AbstractBootstrapModule(6) to com.netflix.governator.guice.BootstrapModule", "Update SimpleType: AbstractBootstrapModule(11) to BootstrapModule", "Update SimpleName: AbstractBootstrapModule(10) to BootstrapModule", "Insert SingleVariableDeclaration(45) into MethodDeclaration(61) at 4", "Insert SimpleType: BootstrapBinder(43) into SingleVariableDeclaration(45) at 0", "Insert SimpleName: binder(44) into SingleVariableDeclaration(45) at 1", "Insert SimpleName: BootstrapBinder(42) into SimpleType: BootstrapBinder(43) at 0", "Insert SimpleName: binder(46) into MethodInvocation(51) at 0", "Insert SimpleName: binder(53) into MethodInvocation(58) at 0"]}}, {"ServiceLoaderBootstrapModule_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS ImportDeclaration to CompilationUnit at 4", "INS QualifiedName: com.netflix.governator.guice.BootstrapBinder to ImportDeclaration at 0"]}, {"root": "UPDATE from com.netflix.governator.guice.AbstractBootstrapModule to com.netflix.governator.guice.BootstrapModule", "operations": ["UPD QualifiedName: com.netflix.governator.guice.AbstractBootstrapModule from com.netflix.governator.guice.AbstractBootstrapModule to com.netflix.governator.guice.BootstrapModule"]}, {"root": "UPDATE from AbstractBootstrapModule to BootstrapModule", "operations": ["UPD SimpleType: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule", "UPD SimpleName: AbstractBootstrapModule from AbstractBootstrapModule to BootstrapModule"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleType: BootstrapBinder to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: binder to SingleVariableDeclaration at 1", "INS SimpleName: BootstrapBinder to SimpleType: BootstrapBinder at 0"]}, {"root": "INS SimpleName: binder to MethodInvocation at 0", "operations": ["INS SimpleName: binder to MethodInvocation at 0"]}]}}, {"ServiceLoaderBootstrapModule_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(93) at 4", "Insert QualifiedName: com.netflix.governator.guice.BootstrapBinder(8) into ImportDeclaration(9) at 0", "Update QualifiedName: com.netflix.governator.guice.AbstractBootstrapModule(8) to com.netflix.governator.guice.BootstrapModule", "Update SimpleType: AbstractBootstrapModule(18) to BootstrapModule", "Update SimpleName: AbstractBootstrapModule(17) to BootstrapModule", "Insert SingleVariableDeclaration(66) into MethodDeclaration(91) at 4", "Insert SimpleType: BootstrapBinder(64) into SingleVariableDeclaration(66) at 0", "Insert SimpleName: binder(65) into SingleVariableDeclaration(66) at 1", "Insert SimpleName: BootstrapBinder(63) into SimpleType: BootstrapBinder(64) at 0", "Insert SimpleName: binder(80) into MethodInvocation(88) at 0"]}}, {"ConfigurationProviderLifecycleAnnotationProcessor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.processors"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.Annotation", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Arrays"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collections"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.inject.Inject", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.inject.Singleton", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.annotations.Configuration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.annotations.ConfigurationVariable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.configuration.ConfigurationDocumentation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.configuration.ConfigurationMapper", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.configuration.ConfigurationProvider", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleState"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Modifier: public", "DEL SimpleName: mapper", "DEL SimpleName: Collection", "DEL SimpleName: Override", "DEL SimpleName: getState", "DEL SimpleType: Collection", "DEL SimpleName: ConfigurationMapper", "DEL SimpleName: ConfigurationProviderLifecycleAnnotationProcessor", "DEL SimpleName: provider", "DEL Modifier: private", "DEL SimpleName: Arrays", "DEL ReturnStatement", "DEL SimpleName: Class", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: Collections", "DEL FieldDeclaration", "DEL Block", "DEL SimpleType: Annotation", "DEL SimpleName: Annotation", "DEL FieldDeclaration", "DEL FieldDeclaration", "DEL Assignment: =", "DEL SimpleType: ConfigurationDocumentation", "DEL SimpleType: Collection", "DEL SimpleName: Override", "DEL SimpleName: provider", "DEL SimpleName: provider", "DEL MarkerAnnotation", "DEL SimpleName: methods", "DEL SimpleName: unmodifiableList", "DEL SimpleType: Annotation", "DEL SimpleName: Annotation", "DEL SimpleName: Annotation", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleType: ConfigurationVariable", "DEL PrimitiveType: void", "DEL SimpleName: emptyList", "DEL SimpleType: Annotation", "DEL SimpleType: Class", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: Singleton", "DEL ExpressionStatement", "DEL Modifier: public", "DEL WildcardType: ? extends Annotation", "DEL MethodInvocation", "DEL SimpleName: mapper", "DEL SimpleName: ConfigurationMapper", "DEL SimpleName: Collections", "DEL Modifier: public", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL ThisExpression", "DEL QualifiedName: LifecycleState.SETTING_CONFIGURATION", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL SimpleName: documentation", "DEL SimpleName: ConfigurationProviderLifecycleAnnotationProcessor", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: LifecycleState", "DEL MethodDeclaration", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: Annotation", "DEL SimpleName: getClassAnnotations", "DEL MarkerAnnotation", "DEL SimpleName: Configuration", "DEL SimpleName: asList", "DEL SimpleName: documentation", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL Modifier: final", "DEL ParameterizedType: Class<? extends Annotation>", "DEL MethodDeclaration", "DEL SimpleType: ConfigurationDocumentation", "DEL SimpleType: Collection", "DEL SimpleName: getMethodAnnotations", "DEL SimpleName: Exception", "DEL Modifier: public", "DEL SimpleType: Object", "DEL SimpleType: ConfigurationMapper", "DEL SimpleType: ConfigurationProvider", "DEL SimpleName: Override", "DEL SimpleName: ConfigurationProvider", "DEL FieldAccess", "DEL SimpleName: documentation", "DEL SimpleName: Collection", "DEL SimpleType: Class", "DEL SimpleName: mapper", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: process", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL FieldAccess", "DEL Modifier: public", "DEL Block", "DEL WildcardType: ? extends Annotation", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: emptyList", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: mapper", "DEL MethodDeclaration", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL SimpleName: ConfigurationProvider", "DEL SimpleName: Collections", "DEL SimpleName: ConfigurationDocumentation", "DEL ThisExpression", "DEL SimpleType: ConfigurationMapper", "DEL SimpleName: mapConfiguration", "DEL VariableDeclarationFragment", "DEL MarkerAnnotation", "DEL SimpleName: Collection", "DEL SimpleType: Exception", "DEL SimpleType: Configuration", "DEL SimpleName: provider", "DEL SimpleName: Override", "DEL ReturnStatement", "DEL SimpleName: Class", "DEL SimpleName: obj", "DEL SimpleName: getFieldAnnotations", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL Block", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: provider", "DEL SimpleName: methods", "DEL SimpleType: LifecycleState", "DEL SimpleName: Inject", "DEL SimpleType: Class", "DEL SimpleName: obj", "DEL Modifier: private", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: ConfigurationDocumentation", "DEL SimpleName: ConfigurationVariable", "DEL SingleVariableDeclaration", "DEL WildcardType: ? extends Annotation", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: LifecycleMethods", "DEL Modifier: private", "DEL ThisExpression", "DEL MarkerAnnotation", "DEL SimpleType: ConfigurationProvider", "DEL ParameterizedType: Class<? extends Annotation>", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL Assignment: =", "DEL SimpleName: Object", "DEL SimpleName: mapper", "DEL Modifier: final", "DEL SimpleType: Annotation", "DEL SimpleType: LifecycleMethods", "DEL FieldAccess", "DEL MarkerAnnotation", "DEL SimpleName: Class", "DEL TypeLiteral", "DEL SimpleName: documentation", "DEL SimpleName: documentation", "DEL ParameterizedType: Class<? extends Annotation>", "DEL ReturnStatement"]}]}}, {"ConfigurationProviderLifecycleAnnotationProcessor_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle.processors(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.annotation.Annotation(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.util.Arrays(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Collection(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Collections(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: javax.inject.Inject(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: javax.inject.Singleton(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.netflix.governator.annotations.Configuration(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.netflix.governator.annotations.ConfigurationVariable(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.netflix.governator.configuration.ConfigurationDocumentation(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.netflix.governator.configuration.ConfigurationMapper(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.netflix.governator.configuration.ConfigurationProvider(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleState(28)", "Delete ImportDeclaration(29)", "Delete SimpleName: Singleton(30)", "Delete MarkerAnnotation(31)", "Delete Modifier: public(32)", "Delete SimpleName: ConfigurationProviderLifecycleAnnotationProcessor(33)", "Delete SimpleName: LifecycleAnnotationProcessor(34)", "Delete SimpleType: LifecycleAnnotationProcessor(35)", "Delete Modifier: private(36)", "Delete Modifier: final(37)", "Delete SimpleName: ConfigurationProvider(38)", "Delete SimpleType: ConfigurationProvider(39)", "Delete SimpleName: provider(40)", "Delete VariableDeclarationFragment(41)", "Delete FieldDeclaration(42)", "Delete Modifier: private(43)", "Delete Modifier: final(44)", "Delete SimpleName: ConfigurationDocumentation(45)", "Delete SimpleType: ConfigurationDocumentation(46)", "Delete SimpleName: documentation(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete Modifier: private(50)", "Delete Modifier: final(51)", "Delete SimpleName: ConfigurationMapper(52)", "Delete SimpleType: ConfigurationMapper(53)", "Delete SimpleName: mapper(54)", "Delete VariableDeclarationFragment(55)", "Delete FieldDeclaration(56)", "Delete SimpleName: Inject(57)", "Delete MarkerAnnotation(58)", "Delete Modifier: public(59)", "Delete SimpleName: ConfigurationProviderLifecycleAnnotationProcessor(60)", "Delete SimpleName: ConfigurationProvider(61)", "Delete SimpleType: ConfigurationProvider(62)", "Delete SimpleName: provider(63)", "Delete SingleVariableDeclaration(64)", "Delete SimpleName: ConfigurationDocumentation(65)", "Delete SimpleType: ConfigurationDocumentation(66)", "Delete SimpleName: documentation(67)", "Delete SingleVariableDeclaration(68)", "Delete SimpleName: ConfigurationMapper(69)", "Delete SimpleType: ConfigurationMapper(70)", "Delete SimpleName: mapper(71)", "Delete SingleVariableDeclaration(72)", "Delete ThisExpression(73)", "Delete SimpleName: provider(74)", "Delete FieldAccess(75)", "Delete SimpleName: provider(76)", "Delete Assignment: =(77)", "Delete ExpressionStatement(78)", "Delete ThisExpression(79)", "Delete SimpleName: documentation(80)", "Delete FieldAccess(81)", "Delete SimpleName: documentation(82)", "Delete Assignment: =(83)", "Delete ExpressionStatement(84)", "Delete ThisExpression(85)", "Delete SimpleName: mapper(86)", "Delete FieldAccess(87)", "Delete SimpleName: mapper(88)", "Delete Assignment: =(89)", "Delete ExpressionStatement(90)", "Delete Block(91)", "Delete MethodDeclaration(92)", "Delete SimpleName: Override(93)", "Delete MarkerAnnotation(94)", "Delete Modifier: public(95)", "Delete PrimitiveType: void(96)", "Delete SimpleName: process(97)", "Delete SimpleName: Object(98)", "Delete SimpleType: Object(99)", "Delete SimpleName: obj(100)", "Delete SingleVariableDeclaration(101)", "Delete SimpleName: LifecycleMethods(102)", "Delete SimpleType: LifecycleMethods(103)", "Delete SimpleName: methods(104)", "Delete SingleVariableDeclaration(105)", "Delete SimpleName: Exception(106)", "Delete SimpleType: Exception(107)", "Delete SimpleName: mapper(108)", "Delete SimpleName: mapConfiguration(109)", "Delete SimpleName: provider(110)", "Delete SimpleName: documentation(111)", "Delete SimpleName: obj(112)", "Delete SimpleName: methods(113)", "Delete MethodInvocation(114)", "Delete ExpressionStatement(115)", "Delete Block(116)", "Delete MethodDeclaration(117)", "Delete SimpleName: Override(118)", "Delete MarkerAnnotation(119)", "Delete Modifier: public(120)", "Delete SimpleName: Collection(121)", "Delete SimpleType: Collection(122)", "Delete SimpleName: Class(123)", "Delete SimpleType: Class(124)", "Delete SimpleName: Annotation(125)", "Delete SimpleType: Annotation(126)", "Delete WildcardType: ? extends Annotation(127)", "Delete ParameterizedType: Class<? extends Annotation>(128)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(129)", "Delete SimpleName: getFieldAnnotations(130)", "Delete SimpleName: Collections(131)", "Delete SimpleName: unmodifiableList(132)", "Delete SimpleName: Arrays(133)", "Delete SimpleName: Class(134)", "Delete SimpleType: Class(135)", "Delete SimpleName: Annotation(136)", "Delete SimpleType: Annotation(137)", "Delete WildcardType: ? extends Annotation(138)", "Delete ParameterizedType: Class<? extends Annotation>(139)", "Delete SimpleName: asList(140)", "Delete SimpleName: Configuration(141)", "Delete SimpleType: Configuration(142)", "Delete TypeLiteral(143)", "Delete SimpleName: ConfigurationVariable(144)", "Delete SimpleType: ConfigurationVariable(145)", "Delete TypeLiteral(146)", "Delete MethodInvocation(147)", "Delete MethodInvocation(148)", "Delete ReturnStatement(149)", "Delete Block(150)", "Delete MethodDeclaration(151)", "Delete SimpleName: Override(152)", "Delete MarkerAnnotation(153)", "Delete Modifier: public(154)", "Delete SimpleName: Collection(155)", "Delete SimpleType: Collection(156)", "Delete SimpleName: Class(157)", "Delete SimpleType: Class(158)", "Delete SimpleName: Annotation(159)", "Delete SimpleType: Annotation(160)", "Delete WildcardType: ? extends Annotation(161)", "Delete ParameterizedType: Class<? extends Annotation>(162)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(163)", "Delete SimpleName: getMethodAnnotations(164)", "Delete SimpleName: Collections(165)", "Delete SimpleName: emptyList(166)", "Delete MethodInvocation(167)", "Delete ReturnStatement(168)", "Delete Block(169)", "Delete MethodDeclaration(170)", "Delete SimpleName: Override(171)", "Delete MarkerAnnotation(172)", "Delete Modifier: public(173)", "Delete SimpleName: Collection(174)", "Delete SimpleType: Collection(175)", "Delete SimpleName: Class(176)", "Delete SimpleType: Class(177)", "Delete SimpleName: Annotation(178)", "Delete SimpleType: Annotation(179)", "Delete WildcardType: ? extends Annotation(180)", "Delete ParameterizedType: Class<? extends Annotation>(181)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(182)", "Delete SimpleName: getClassAnnotations(183)", "Delete SimpleName: Collections(184)", "Delete SimpleName: emptyList(185)", "Delete MethodInvocation(186)", "Delete ReturnStatement(187)", "Delete Block(188)", "Delete MethodDeclaration(189)", "Delete SimpleName: Override(190)", "Delete MarkerAnnotation(191)", "Delete Modifier: public(192)", "Delete SimpleName: LifecycleState(193)", "Delete SimpleType: LifecycleState(194)", "Delete SimpleName: getState(195)", "Delete QualifiedName: LifecycleState.SETTING_CONFIGURATION(196)", "Delete ReturnStatement(197)", "Delete Block(198)", "Delete MethodDeclaration(199)", "Delete TypeDeclaration: class(200)"]}}, {"PostConstructLifecycleAnnotationProcessor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.processors", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.annotation.Annotation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Arrays"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.annotation.PostConstruct"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.Logger", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.slf4j.LoggerFactory"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.inject.Singleton", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleState"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MarkerAnnotation", "DEL SimpleType: Collection", "DEL SimpleName: emptyList", "DEL SimpleName: Collections", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL SimpleName: method", "DEL Modifier: public", "DEL Modifier: public", "DEL SimpleName: Class", "DEL WildcardType: ? extends Annotation", "DEL MethodInvocation", "DEL SimpleName: method", "DEL MethodInvocation", "DEL SimpleName: PostConstruct", "DEL SimpleName: asList", "DEL SimpleType: Class", "DEL Block", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: Arrays", "DEL QualifiedName: LifecycleState.POST_CONSTRUCTING", "DEL SimpleType: Annotation", "DEL SimpleName: Collections", "DEL SimpleName: methods", "DEL SimpleName: Collections", "DEL SimpleName: Logger", "DEL ReturnStatement", "DEL SimpleName: getLogger", "DEL TypeLiteral", "DEL EnhancedForStatement", "DEL SimpleName: format", "DEL MarkerAnnotation", "DEL SimpleType: Collection", "DEL SimpleName: Collection", "DEL Block", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleType: Logger", "DEL Modifier: public", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL MarkerAnnotation", "DEL TypeLiteral", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: Override", "DEL SimpleName: methods", "DEL Modifier: static", "DEL SimpleType: LifecycleMethods", "DEL MethodInvocation", "DEL SimpleName: Annotation", "DEL SimpleType: Exception", "DEL WildcardType: ? extends Annotation", "DEL SimpleType: Annotation", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL SimpleName: log", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: LifecycleState", "DEL SimpleType: Class", "DEL SimpleType: Annotation", "DEL SimpleName: process", "DEL SimpleName: method", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: Singleton", "DEL SimpleType: Collection", "DEL MethodInvocation", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL TypeDeclaration: class", "DEL SimpleName: PostConstructLifecycleAnnotationProcessor", "DEL WildcardType: ? extends Annotation", "DEL FieldDeclaration", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL SimpleName: methodsFor", "DEL SimpleType: Class", "DEL MethodDeclaration", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: PostConstructLifecycleAnnotationProcessor", "DEL VariableDeclarationFragment", "DEL SimpleName: Annotation", "DEL SimpleType: Object", "DEL SimpleType: LifecycleState", "DEL SimpleName: LoggerFactory", "DEL SimpleName: Override", "DEL SimpleName: Class", "DEL ExpressionStatement", "DEL SimpleType: Annotation", "DEL SimpleType: PostConstructLifecycleAnnotationProcessor", "DEL TypeLiteral", "DEL SimpleName: emptyList", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: Collection", "DEL Block", "DEL SimpleName: Annotation", "DEL SimpleName: getClassAnnotations", "DEL SimpleName: unmodifiableList", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL SimpleName: Override", "DEL SimpleName: LifecycleMethods", "DEL PrimitiveType: void", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL SimpleName: Class", "DEL ReturnStatement", "DEL SimpleName: Collection", "DEL SimpleName: Annotation", "DEL Modifier: public", "DEL StringLiteral: \"\\t%s()\"", "DEL ReturnStatement", "DEL SimpleName: Object", "DEL SimpleName: PostConstruct", "DEL Modifier: public", "DEL SimpleName: getMethodAnnotations", "DEL SimpleName: getFieldAnnotations", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: Override", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: Method", "DEL Modifier: private", "DEL SimpleType: PostConstruct", "DEL MethodDeclaration", "DEL SimpleName: log", "DEL SimpleName: obj", "DEL SimpleName: getName", "DEL Block", "DEL SimpleName: invoke", "DEL SimpleName: Override", "DEL SimpleName: obj", "DEL Block", "DEL Block", "DEL SimpleName: Class", "DEL SimpleType: PostConstruct", "DEL MethodInvocation", "DEL SimpleName: getState", "DEL SimpleType: Method", "DEL SimpleName: String"]}]}}, {"PostConstructLifecycleAnnotationProcessor_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle.processors(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.annotation.Annotation(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Method(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Arrays(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Collection(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Collections(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: javax.annotation.PostConstruct(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.slf4j.Logger(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.slf4j.LoggerFactory(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.inject.Singleton(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleState(24)", "Delete ImportDeclaration(25)", "Delete SimpleName: Singleton(26)", "Delete MarkerAnnotation(27)", "Delete Modifier: public(28)", "Delete SimpleName: PostConstructLifecycleAnnotationProcessor(29)", "Delete SimpleName: LifecycleAnnotationProcessor(30)", "Delete SimpleType: LifecycleAnnotationProcessor(31)", "Delete Modifier: private(32)", "Delete Modifier: static(33)", "Delete Modifier: final(34)", "Delete SimpleName: Logger(35)", "Delete SimpleType: Logger(36)", "Delete SimpleName: log(37)", "Delete SimpleName: LoggerFactory(38)", "Delete SimpleName: getLogger(39)", "Delete SimpleName: PostConstructLifecycleAnnotationProcessor(40)", "Delete SimpleType: PostConstructLifecycleAnnotationProcessor(41)", "Delete TypeLiteral(42)", "Delete MethodInvocation(43)", "Delete VariableDeclarationFragment(44)", "Delete FieldDeclaration(45)", "Delete SimpleName: Override(46)", "Delete MarkerAnnotation(47)", "Delete Modifier: public(48)", "Delete PrimitiveType: void(49)", "Delete SimpleName: process(50)", "Delete SimpleName: Object(51)", "Delete SimpleType: Object(52)", "Delete SimpleName: obj(53)", "Delete SingleVariableDeclaration(54)", "Delete SimpleName: LifecycleMethods(55)", "Delete SimpleType: LifecycleMethods(56)", "Delete SimpleName: methods(57)", "Delete SingleVariableDeclaration(58)", "Delete SimpleName: Exception(59)", "Delete SimpleType: Exception(60)", "Delete SimpleName: Method(61)", "Delete SimpleType: Method(62)", "Delete SimpleName: method(63)", "Delete SingleVariableDeclaration(64)", "Delete SimpleName: methods(65)", "Delete SimpleName: methodsFor(66)", "Delete SimpleName: PostConstruct(67)", "Delete SimpleType: PostConstruct(68)", "Delete TypeLiteral(69)", "Delete MethodInvocation(70)", "Delete SimpleName: log(71)", "Delete SimpleName: debug(72)", "Delete SimpleName: String(73)", "Delete SimpleName: format(74)", "Delete StringLiteral: \"\\t%s()\"(75)", "Delete SimpleName: method(76)", "Delete SimpleName: getName(77)", "Delete MethodInvocation(78)", "Delete MethodInvocation(79)", "Delete MethodInvocation(80)", "Delete ExpressionStatement(81)", "Delete SimpleName: method(82)", "Delete SimpleName: invoke(83)", "Delete SimpleName: obj(84)", "Delete MethodInvocation(85)", "Delete ExpressionStatement(86)", "Delete Block(87)", "Delete EnhancedForStatement(88)", "Delete Block(89)", "Delete MethodDeclaration(90)", "Delete SimpleName: Override(91)", "Delete MarkerAnnotation(92)", "Delete Modifier: public(93)", "Delete SimpleName: Collection(94)", "Delete SimpleType: Collection(95)", "Delete SimpleName: Class(96)", "Delete SimpleType: Class(97)", "Delete SimpleName: Annotation(98)", "Delete SimpleType: Annotation(99)", "Delete WildcardType: ? extends Annotation(100)", "Delete ParameterizedType: Class<? extends Annotation>(101)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(102)", "Delete SimpleName: getFieldAnnotations(103)", "Delete SimpleName: Collections(104)", "Delete SimpleName: emptyList(105)", "Delete MethodInvocation(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete SimpleName: Override(110)", "Delete MarkerAnnotation(111)", "Delete Modifier: public(112)", "Delete SimpleName: Collection(113)", "Delete SimpleType: Collection(114)", "Delete SimpleName: Class(115)", "Delete SimpleType: Class(116)", "Delete SimpleName: Annotation(117)", "Delete SimpleType: Annotation(118)", "Delete WildcardType: ? extends Annotation(119)", "Delete ParameterizedType: Class<? extends Annotation>(120)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(121)", "Delete SimpleName: getMethodAnnotations(122)", "Delete SimpleName: Collections(123)", "Delete SimpleName: unmodifiableList(124)", "Delete SimpleName: Arrays(125)", "Delete SimpleName: Class(126)", "Delete SimpleType: Class(127)", "Delete SimpleName: Annotation(128)", "Delete SimpleType: Annotation(129)", "Delete WildcardType: ? extends Annotation(130)", "Delete ParameterizedType: Class<? extends Annotation>(131)", "Delete SimpleName: asList(132)", "Delete SimpleName: PostConstruct(133)", "Delete SimpleType: PostConstruct(134)", "Delete TypeLiteral(135)", "Delete MethodInvocation(136)", "Delete MethodInvocation(137)", "Delete ReturnStatement(138)", "Delete Block(139)", "Delete MethodDeclaration(140)", "Delete SimpleName: Override(141)", "Delete MarkerAnnotation(142)", "Delete Modifier: public(143)", "Delete SimpleName: Collection(144)", "Delete SimpleType: Collection(145)", "Delete SimpleName: Class(146)", "Delete SimpleType: Class(147)", "Delete SimpleName: Annotation(148)", "Delete SimpleType: Annotation(149)", "Delete WildcardType: ? extends Annotation(150)", "Delete ParameterizedType: Class<? extends Annotation>(151)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(152)", "Delete SimpleName: getClassAnnotations(153)", "Delete SimpleName: Collections(154)", "Delete SimpleName: emptyList(155)", "Delete MethodInvocation(156)", "Delete ReturnStatement(157)", "Delete Block(158)", "Delete MethodDeclaration(159)", "Delete SimpleName: Override(160)", "Delete MarkerAnnotation(161)", "Delete Modifier: public(162)", "Delete SimpleName: LifecycleState(163)", "Delete SimpleType: LifecycleState(164)", "Delete SimpleName: getState(165)", "Delete QualifiedName: LifecycleState.POST_CONSTRUCTING(166)", "Delete ReturnStatement(167)", "Delete Block(168)", "Delete MethodDeclaration(169)", "Delete TypeDeclaration: class(170)"]}}, {"PreConfigureLifecycleAnnotationProcessor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.processors", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.Annotation", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Arrays", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collection", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.inject.Singleton", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.slf4j.Logger"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.LoggerFactory", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.annotations.PreConfiguration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleState", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: getClassAnnotations", "DEL SimpleName: Override", "DEL SimpleName: Collection", "DEL SimpleName: Collections", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: obj", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleType: Method", "DEL MarkerAnnotation", "DEL MarkerAnnotation", "DEL SimpleType: Collection", "DEL SimpleType: Annotation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: emptyList", "DEL SimpleName: methodsFor", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: Class", "DEL ReturnStatement", "DEL SimpleType: Annotation", "DEL SimpleName: unmodifiableList", "DEL SimpleName: getState", "DEL SimpleName: Annotation", "DEL SimpleName: getFieldAnnotations", "DEL SimpleName: getMethodAnnotations", "DEL SimpleType: LifecycleMethods", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: LoggerFactory", "DEL SimpleType: PreConfigureLifecycleAnnotationProcessor", "DEL Block", "DEL SimpleName: String", "DEL SimpleName: Override", "DEL SimpleName: Collection", "DEL Modifier: public", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Modifier: static", "DEL MarkerAnnotation", "DEL SimpleName: Logger", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL SimpleName: Override", "DEL SimpleType: PreConfiguration", "DEL WildcardType: ? extends Annotation", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL SimpleName: LifecycleMethods", "DEL SimpleType: Class", "DEL SimpleName: emptyList", "DEL SimpleName: Exception", "DEL SimpleType: Annotation", "DEL SimpleName: Annotation", "DEL SimpleName: Class", "DEL SimpleName: method", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL SimpleName: getName", "DEL Modifier: public", "DEL SimpleName: Class", "DEL SimpleName: Annotation", "DEL PrimitiveType: void", "DEL StringLiteral: \"\\t%s()\"", "DEL MarkerAnnotation", "DEL SimpleName: obj", "DEL SimpleName: Collection", "DEL TypeLiteral", "DEL ParameterizedType: Class<? extends Annotation>", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleType: Annotation", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: log", "DEL SimpleName: methods", "DEL SimpleName: Class", "DEL Block", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: getLogger", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: Object", "DEL SimpleName: log", "DEL SimpleName: LifecycleState", "DEL MethodDeclaration", "DEL SimpleType: Collection", "DEL MethodInvocation", "DEL SimpleName: Annotation", "DEL SimpleName: PreConfigureLifecycleAnnotationProcessor", "DEL SimpleType: PreConfiguration", "DEL SimpleName: Collections", "DEL Block", "DEL Modifier: public", "DEL SimpleName: methods", "DEL ReturnStatement", "DEL SimpleType: Class", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL SimpleName: Collections", "DEL MethodInvocation", "DEL TypeLiteral", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: PreConfigureLifecycleAnnotationProcessor", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Block", "DEL Block", "DEL SimpleName: Singleton", "DEL SimpleName: Arrays", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleType: Class", "DEL MarkerAnnotation", "DEL SimpleName: format", "DEL QualifiedName: LifecycleState.PRE_CONFIGURATION", "DEL SimpleName: process", "DEL SimpleName: asList", "DEL MarkerAnnotation", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL MethodDeclaration", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL WildcardType: ? extends Annotation", "DEL WildcardType: ? extends Annotation", "DEL TypeDeclaration: class", "DEL SimpleType: Exception", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL SimpleName: PreConfiguration", "DEL SimpleType: Logger", "DEL Block", "DEL SimpleName: invoke", "DEL SimpleName: method", "DEL ReturnStatement", "DEL SimpleName: method", "DEL MethodDeclaration", "DEL SimpleType: Object", "DEL EnhancedForStatement", "DEL SimpleType: Collection", "DEL ReturnStatement", "DEL SimpleName: PreConfiguration", "DEL TypeLiteral", "DEL SimpleType: LifecycleState", "DEL SimpleName: Method", "DEL SimpleName: debug"]}]}}, {"PreConfigureLifecycleAnnotationProcessor_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle.processors(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.annotation.Annotation(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Method(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Arrays(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Collection(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Collections(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: javax.inject.Singleton(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: org.slf4j.Logger(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.slf4j.LoggerFactory(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.netflix.governator.annotations.PreConfiguration(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleState(24)", "Delete ImportDeclaration(25)", "Delete SimpleName: Singleton(26)", "Delete MarkerAnnotation(27)", "Delete Modifier: public(28)", "Delete SimpleName: PreConfigureLifecycleAnnotationProcessor(29)", "Delete SimpleName: LifecycleAnnotationProcessor(30)", "Delete SimpleType: LifecycleAnnotationProcessor(31)", "Delete Modifier: private(32)", "Delete Modifier: static(33)", "Delete Modifier: final(34)", "Delete SimpleName: Logger(35)", "Delete SimpleType: Logger(36)", "Delete SimpleName: log(37)", "Delete SimpleName: LoggerFactory(38)", "Delete SimpleName: getLogger(39)", "Delete SimpleName: PreConfigureLifecycleAnnotationProcessor(40)", "Delete SimpleType: PreConfigureLifecycleAnnotationProcessor(41)", "Delete TypeLiteral(42)", "Delete MethodInvocation(43)", "Delete VariableDeclarationFragment(44)", "Delete FieldDeclaration(45)", "Delete SimpleName: Override(46)", "Delete MarkerAnnotation(47)", "Delete Modifier: public(48)", "Delete PrimitiveType: void(49)", "Delete SimpleName: process(50)", "Delete SimpleName: Object(51)", "Delete SimpleType: Object(52)", "Delete SimpleName: obj(53)", "Delete SingleVariableDeclaration(54)", "Delete SimpleName: LifecycleMethods(55)", "Delete SimpleType: LifecycleMethods(56)", "Delete SimpleName: methods(57)", "Delete SingleVariableDeclaration(58)", "Delete SimpleName: Exception(59)", "Delete SimpleType: Exception(60)", "Delete SimpleName: Method(61)", "Delete SimpleType: Method(62)", "Delete SimpleName: method(63)", "Delete SingleVariableDeclaration(64)", "Delete SimpleName: methods(65)", "Delete SimpleName: methodsFor(66)", "Delete SimpleName: PreConfiguration(67)", "Delete SimpleType: PreConfiguration(68)", "Delete TypeLiteral(69)", "Delete MethodInvocation(70)", "Delete SimpleName: log(71)", "Delete SimpleName: debug(72)", "Delete SimpleName: String(73)", "Delete SimpleName: format(74)", "Delete StringLiteral: \"\\t%s()\"(75)", "Delete SimpleName: method(76)", "Delete SimpleName: getName(77)", "Delete MethodInvocation(78)", "Delete MethodInvocation(79)", "Delete MethodInvocation(80)", "Delete ExpressionStatement(81)", "Delete SimpleName: method(82)", "Delete SimpleName: invoke(83)", "Delete SimpleName: obj(84)", "Delete MethodInvocation(85)", "Delete ExpressionStatement(86)", "Delete Block(87)", "Delete EnhancedForStatement(88)", "Delete Block(89)", "Delete MethodDeclaration(90)", "Delete SimpleName: Override(91)", "Delete MarkerAnnotation(92)", "Delete Modifier: public(93)", "Delete SimpleName: Collection(94)", "Delete SimpleType: Collection(95)", "Delete SimpleName: Class(96)", "Delete SimpleType: Class(97)", "Delete SimpleName: Annotation(98)", "Delete SimpleType: Annotation(99)", "Delete WildcardType: ? extends Annotation(100)", "Delete ParameterizedType: Class<? extends Annotation>(101)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(102)", "Delete SimpleName: getFieldAnnotations(103)", "Delete SimpleName: Collections(104)", "Delete SimpleName: emptyList(105)", "Delete MethodInvocation(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete SimpleName: Override(110)", "Delete MarkerAnnotation(111)", "Delete Modifier: public(112)", "Delete SimpleName: Collection(113)", "Delete SimpleType: Collection(114)", "Delete SimpleName: Class(115)", "Delete SimpleType: Class(116)", "Delete SimpleName: Annotation(117)", "Delete SimpleType: Annotation(118)", "Delete WildcardType: ? extends Annotation(119)", "Delete ParameterizedType: Class<? extends Annotation>(120)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(121)", "Delete SimpleName: getMethodAnnotations(122)", "Delete SimpleName: Collections(123)", "Delete SimpleName: unmodifiableList(124)", "Delete SimpleName: Arrays(125)", "Delete SimpleName: Class(126)", "Delete SimpleType: Class(127)", "Delete SimpleName: Annotation(128)", "Delete SimpleType: Annotation(129)", "Delete WildcardType: ? extends Annotation(130)", "Delete ParameterizedType: Class<? extends Annotation>(131)", "Delete SimpleName: asList(132)", "Delete SimpleName: PreConfiguration(133)", "Delete SimpleType: PreConfiguration(134)", "Delete TypeLiteral(135)", "Delete MethodInvocation(136)", "Delete MethodInvocation(137)", "Delete ReturnStatement(138)", "Delete Block(139)", "Delete MethodDeclaration(140)", "Delete SimpleName: Override(141)", "Delete MarkerAnnotation(142)", "Delete Modifier: public(143)", "Delete SimpleName: Collection(144)", "Delete SimpleType: Collection(145)", "Delete SimpleName: Class(146)", "Delete SimpleType: Class(147)", "Delete SimpleName: Annotation(148)", "Delete SimpleType: Annotation(149)", "Delete WildcardType: ? extends Annotation(150)", "Delete ParameterizedType: Class<? extends Annotation>(151)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(152)", "Delete SimpleName: getClassAnnotations(153)", "Delete SimpleName: Collections(154)", "Delete SimpleName: emptyList(155)", "Delete MethodInvocation(156)", "Delete ReturnStatement(157)", "Delete Block(158)", "Delete MethodDeclaration(159)", "Delete SimpleName: Override(160)", "Delete MarkerAnnotation(161)", "Delete Modifier: public(162)", "Delete SimpleName: LifecycleState(163)", "Delete SimpleType: LifecycleState(164)", "Delete SimpleName: getState(165)", "Delete QualifiedName: LifecycleState.PRE_CONFIGURATION(166)", "Delete ReturnStatement(167)", "Delete Block(168)", "Delete MethodDeclaration(169)", "Delete TypeDeclaration: class(170)"]}}, {"PreDestroyLifecycleAnnotationProcessor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.processors"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.annotation.Annotation"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Method", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Arrays"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Collections", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.annotation.PreDestroy", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.inject.Singleton", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.slf4j.Logger", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.slf4j.LoggerFactory"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleState"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL FieldDeclaration", "DEL SimpleName: Logger", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: method", "DEL StringLiteral: \"Couldn't stop lifecycle managed instance\"", "DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL SimpleName: getState", "DEL SimpleName: log", "DEL ExpressionStatement", "DEL SimpleName: invoke", "DEL SimpleName: Exception", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleName: asList", "DEL WildcardType: ? extends Annotation", "DEL SimpleType: Class", "DEL SimpleName: Arrays", "DEL SimpleName: debug", "DEL Block", "DEL SimpleName: log", "DEL MethodInvocation", "DEL SimpleName: PostConstructLifecycleAnnotationProcessor", "DEL SimpleName: methods", "DEL MarkerAnnotation", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleType: Throwable", "DEL VariableDeclarationFragment", "DEL SimpleName: method", "DEL ExpressionStatement", "DEL SimpleName: Collection", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleType: Collection", "DEL SimpleType: PreDestroy", "DEL Modifier: public", "DEL SimpleName: unmodifiableList", "DEL SimpleName: Collections", "DEL SimpleName: emptyList", "DEL SimpleName: Class", "DEL SimpleName: PreDestroy", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: obj", "DEL MarkerAnnotation", "DEL SimpleType: Annotation", "DEL Modifier: static", "DEL SimpleName: Collections", "DEL Modifier: private", "DEL SimpleName: Annotation", "DEL StringLiteral: \"\\t%s()\"", "DEL SimpleType: PostConstructLifecycleAnnotationProcessor", "DEL SimpleName: LifecycleState", "DEL SimpleName: methods", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: e", "DEL SimpleType: LifecycleMethods", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Annotation", "DEL WildcardType: ? extends Annotation", "DEL SimpleType: Annotation", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: Annotation", "DEL SimpleName: PreDestroy", "DEL ParameterizedType: Class<? extends Annotation>", "DEL TypeLiteral", "DEL SimpleName: Class", "DEL Block", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: method", "DEL SimpleName: Method", "DEL SimpleName: Class", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: getName", "DEL Block", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL MethodInvocation", "DEL SimpleType: Exception", "DEL MethodInvocation", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL ReturnStatement", "DEL SimpleName: LoggerFactory", "DEL QualifiedName: LifecycleState.PRE_DESTROYING", "DEL MethodDeclaration", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL TypeDeclaration: class", "DEL SimpleName: LifecycleMethods", "DEL SimpleName: Collection", "DEL SimpleName: Singleton", "DEL SimpleName: getLogger", "DEL SimpleName: e", "DEL SimpleType: Collection", "DEL SimpleName: Override", "DEL SimpleName: obj", "DEL MethodDeclaration", "DEL SimpleName: Collection", "DEL SimpleName: Throwable", "DEL SimpleName: error", "DEL SimpleType: Annotation", "DEL SingleVariableDeclaration", "DEL SimpleName: getFieldAnnotations", "DEL SimpleType: LifecycleState", "DEL SimpleType: Class", "DEL ParameterizedType: Class<? extends Annotation>", "DEL WildcardType: ? extends Annotation", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL TypeLiteral", "DEL SimpleName: process", "DEL MethodDeclaration", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: getMethodAnnotations", "DEL CatchClause", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL SimpleName: methodsFor", "DEL SimpleName: Collections", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL Modifier: final", "DEL SimpleType: PreDestroy", "DEL SimpleName: getClassAnnotations", "DEL SimpleType: Object", "DEL SimpleType: Collection", "DEL SimpleType: Class", "DEL Modifier: public", "DEL SimpleType: Annotation", "DEL MarkerAnnotation", "DEL SimpleName: String", "DEL EnhancedForStatement", "DEL Modifier: public", "DEL SimpleType: Method", "DEL SimpleName: Annotation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL TryStatement", "DEL SimpleName: log", "DEL SingleVariableDeclaration", "DEL SimpleType: Class", "DEL SimpleName: format", "DEL PrimitiveType: void", "DEL TypeLiteral", "DEL Modifier: public", "DEL Block", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: emptyList", "DEL SimpleName: PreDestroyLifecycleAnnotationProcessor", "DEL SimpleType: Logger", "DEL Modifier: public", "DEL SimpleName: Override", "DEL ParameterizedType: Class<? extends Annotation>"]}]}}, {"PreDestroyLifecycleAnnotationProcessor_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle.processors(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.lang.annotation.Annotation(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Method(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Arrays(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.Collection(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Collections(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: javax.annotation.PreDestroy(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: javax.inject.Singleton(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.slf4j.Logger(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: org.slf4j.LoggerFactory(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleState(24)", "Delete ImportDeclaration(25)", "Delete SimpleName: Singleton(26)", "Delete MarkerAnnotation(27)", "Delete Modifier: public(28)", "Delete SimpleName: PreDestroyLifecycleAnnotationProcessor(29)", "Delete SimpleName: LifecycleAnnotationProcessor(30)", "Delete SimpleType: LifecycleAnnotationProcessor(31)", "Delete Modifier: private(32)", "Delete Modifier: static(33)", "Delete Modifier: final(34)", "Delete SimpleName: Logger(35)", "Delete SimpleType: Logger(36)", "Delete SimpleName: log(37)", "Delete SimpleName: LoggerFactory(38)", "Delete SimpleName: getLogger(39)", "Delete SimpleName: PostConstructLifecycleAnnotationProcessor(40)", "Delete SimpleType: PostConstructLifecycleAnnotationProcessor(41)", "Delete TypeLiteral(42)", "Delete MethodInvocation(43)", "Delete VariableDeclarationFragment(44)", "Delete FieldDeclaration(45)", "Delete SimpleName: Override(46)", "Delete MarkerAnnotation(47)", "Delete Modifier: public(48)", "Delete PrimitiveType: void(49)", "Delete SimpleName: process(50)", "Delete SimpleName: Object(51)", "Delete SimpleType: Object(52)", "Delete SimpleName: obj(53)", "Delete SingleVariableDeclaration(54)", "Delete SimpleName: LifecycleMethods(55)", "Delete SimpleType: LifecycleMethods(56)", "Delete SimpleName: methods(57)", "Delete SingleVariableDeclaration(58)", "Delete SimpleName: Exception(59)", "Delete SimpleType: Exception(60)", "Delete SimpleName: Method(61)", "Delete SimpleType: Method(62)", "Delete SimpleName: method(63)", "Delete SingleVariableDeclaration(64)", "Delete SimpleName: methods(65)", "Delete SimpleName: methodsFor(66)", "Delete SimpleName: PreDestroy(67)", "Delete SimpleType: PreDestroy(68)", "Delete TypeLiteral(69)", "Delete MethodInvocation(70)", "Delete SimpleName: log(71)", "Delete SimpleName: debug(72)", "Delete SimpleName: String(73)", "Delete SimpleName: format(74)", "Delete StringLiteral: \"\\t%s()\"(75)", "Delete SimpleName: method(76)", "Delete SimpleName: getName(77)", "Delete MethodInvocation(78)", "Delete MethodInvocation(79)", "Delete MethodInvocation(80)", "Delete ExpressionStatement(81)", "Delete SimpleName: method(82)", "Delete SimpleName: invoke(83)", "Delete SimpleName: obj(84)", "Delete MethodInvocation(85)", "Delete ExpressionStatement(86)", "Delete Block(87)", "Delete SimpleName: Throwable(88)", "Delete SimpleType: Throwable(89)", "Delete SimpleName: e(90)", "Delete SingleVariableDeclaration(91)", "Delete SimpleName: log(92)", "Delete SimpleName: error(93)", "Delete StringLiteral: \"Couldn't stop lifecycle managed instance\"(94)", "Delete SimpleName: e(95)", "Delete MethodInvocation(96)", "Delete ExpressionStatement(97)", "Delete Block(98)", "Delete CatchClause(99)", "Delete TryStatement(100)", "Delete Block(101)", "Delete EnhancedForStatement(102)", "Delete Block(103)", "Delete MethodDeclaration(104)", "Delete SimpleName: Override(105)", "Delete MarkerAnnotation(106)", "Delete Modifier: public(107)", "Delete SimpleName: Collection(108)", "Delete SimpleType: Collection(109)", "Delete SimpleName: Class(110)", "Delete SimpleType: Class(111)", "Delete SimpleName: Annotation(112)", "Delete SimpleType: Annotation(113)", "Delete WildcardType: ? extends Annotation(114)", "Delete ParameterizedType: Class<? extends Annotation>(115)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(116)", "Delete SimpleName: getFieldAnnotations(117)", "Delete SimpleName: Collections(118)", "Delete SimpleName: emptyList(119)", "Delete MethodInvocation(120)", "Delete ReturnStatement(121)", "Delete Block(122)", "Delete MethodDeclaration(123)", "Delete SimpleName: Override(124)", "Delete MarkerAnnotation(125)", "Delete Modifier: public(126)", "Delete SimpleName: Collection(127)", "Delete SimpleType: Collection(128)", "Delete SimpleName: Class(129)", "Delete SimpleType: Class(130)", "Delete SimpleName: Annotation(131)", "Delete SimpleType: Annotation(132)", "Delete WildcardType: ? extends Annotation(133)", "Delete ParameterizedType: Class<? extends Annotation>(134)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(135)", "Delete SimpleName: getMethodAnnotations(136)", "Delete SimpleName: Collections(137)", "Delete SimpleName: unmodifiableList(138)", "Delete SimpleName: Arrays(139)", "Delete SimpleName: Class(140)", "Delete SimpleType: Class(141)", "Delete SimpleName: Annotation(142)", "Delete SimpleType: Annotation(143)", "Delete WildcardType: ? extends Annotation(144)", "Delete ParameterizedType: Class<? extends Annotation>(145)", "Delete SimpleName: asList(146)", "Delete SimpleName: PreDestroy(147)", "Delete SimpleType: PreDestroy(148)", "Delete TypeLiteral(149)", "Delete MethodInvocation(150)", "Delete MethodInvocation(151)", "Delete ReturnStatement(152)", "Delete Block(153)", "Delete MethodDeclaration(154)", "Delete SimpleName: Override(155)", "Delete MarkerAnnotation(156)", "Delete Modifier: public(157)", "Delete SimpleName: Collection(158)", "Delete SimpleType: Collection(159)", "Delete SimpleName: Class(160)", "Delete SimpleType: Class(161)", "Delete SimpleName: Annotation(162)", "Delete SimpleType: Annotation(163)", "Delete WildcardType: ? extends Annotation(164)", "Delete ParameterizedType: Class<? extends Annotation>(165)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(166)", "Delete SimpleName: getClassAnnotations(167)", "Delete SimpleName: Collections(168)", "Delete SimpleName: emptyList(169)", "Delete MethodInvocation(170)", "Delete ReturnStatement(171)", "Delete Block(172)", "Delete MethodDeclaration(173)", "Delete SimpleName: Override(174)", "Delete MarkerAnnotation(175)", "Delete Modifier: public(176)", "Delete SimpleName: LifecycleState(177)", "Delete SimpleType: LifecycleState(178)", "Delete SimpleName: getState(179)", "Delete QualifiedName: LifecycleState.PRE_DESTROYING(180)", "Delete ReturnStatement(181)", "Delete Block(182)", "Delete MethodDeclaration(183)", "Delete TypeDeclaration: class(184)"]}}, {"ResourcesLifecycleAnnotationProcessor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.processors", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.beans.Introspector", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.annotation.Annotation", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Field", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Arrays", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collection"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Collections"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Iterator", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.Set", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.annotation.Resource", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.annotation.Resources", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: javax.inject.Singleton", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.naming.NamingException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.ImmutableSet"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Inject"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.inject.Injector"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.LifecycleState", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.lifecycle.ResourceLocator", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: Field", "DEL InfixExpression: +", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: methods", "DEL SimpleName: String", "DEL ThrowStatement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: Resources", "DEL SimpleName: ResourceLocator", "DEL SimpleName: findResource", "DEL SimpleName: resourceObj", "DEL SimpleName: methods", "DEL Block", "DEL SimpleName: setMethodResource", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleName: Inject", "DEL SimpleName: ResourceLocator", "DEL MethodInvocation", "DEL BooleanLiteral: true", "DEL SimpleName: Object", "DEL SimpleName: method", "DEL SimpleName: getParameterTypes", "DEL SimpleName: Collection", "DEL TypeLiteral", "DEL MethodDeclaration", "DEL TypeLiteral", "DEL Modifier: public", "DEL SimpleName: length", "DEL SimpleName: resource", "DEL SimpleName: obj", "DEL Modifier: public", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: method", "DEL VariableDeclarationFragment", "DEL SimpleName: resource", "DEL SimpleType: String", "DEL SimpleType: Injector", "DEL SimpleName: methods", "DEL ConditionalExpression", "DEL FieldDeclaration", "DEL SimpleName: resource", "DEL InfixExpression: ==", "DEL SimpleName: resource", "DEL SimpleType: String", "DEL ReturnStatement", "DEL SimpleName: String", "DEL SimpleType: Collection", "DEL SimpleName: Resources", "DEL SimpleName: name", "DEL VariableDeclarationFragment", "DEL SimpleName: resourceLocators", "DEL SimpleName: Override", "DEL SimpleName: obj", "DEL Block", "DEL SimpleName: locate", "DEL SimpleName: resourceObj", "DEL TypeLiteral", "DEL VariableDeclarationStatement", "DEL SimpleType: Iterator", "DEL SimpleType: Method", "DEL SimpleName: Resource", "DEL SimpleName: getReturnType", "DEL SimpleName: Override", "DEL SimpleName: resource", "DEL SimpleName: method", "DEL Block", "DEL MethodDeclaration", "DEL SimpleType: ResourceLocator", "DEL SimpleName: field", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL SimpleType: NamingException", "DEL SimpleType: Resources", "DEL SimpleName: Resource", "DEL StringLiteral: \"unchecked\"", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL SimpleName: hasNext", "DEL SimpleName: Exception", "DEL SimpleName: obj", "DEL Block", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SingleVariableDeclaration", "DEL SimpleName: method", "DEL SimpleName: loadClassResource", "DEL ExpressionStatement", "DEL SimpleName: resource", "DEL SimpleName: Object", "DEL MarkerAnnotation", "DEL SimpleName: name", "DEL SimpleName: type", "DEL MethodInvocation", "DEL SimpleName: NamingException", "DEL SimpleName: length", "DEL SimpleType: Class", "DEL SimpleType: Object", "DEL ParameterizedType: Iterator<ResourceLocator>", "DEL TypeLiteral", "DEL Block", "DEL SimpleName: authenticationType", "DEL SimpleType: String", "DEL SimpleName: resource", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: Object", "DEL SimpleName: resource", "DEL InfixExpression: +", "DEL VariableDeclarationFragment", "DEL SimpleName: Resource", "DEL Modifier: public", "DEL SimpleName: next", "DEL MethodInvocation", "DEL WildcardType: ? extends Annotation", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL MethodInvocation", "DEL SimpleName: Annotation", "DEL Block", "DEL SimpleType: Class", "DEL ReturnStatement", "DEL SimpleName: getFieldAnnotations", "DEL SimpleName: Override", "DEL SimpleName: unmodifiableList", "DEL SimpleName: getAnnotation", "DEL SimpleName: resource", "DEL WildcardType: ? extends Annotation", "DEL Block", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL TypeLiteral", "DEL SimpleType: ResourceLocator", "DEL SimpleName: SuppressWarnings", "DEL SimpleName: Override", "DEL BooleanLiteral: true", "DEL Modifier: public", "DEL SimpleName: obj", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: resource", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleType: Class", "DEL MethodInvocation", "DEL SimpleType: Exception", "DEL MethodInvocation", "DEL SimpleName: method", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: locator", "DEL SimpleName: Object", "DEL ClassInstanceCreation", "DEL SimpleName: name", "DEL SimpleName: obj", "DEL SimpleName: resource", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL SingleVariableDeclaration", "DEL SimpleType: Resources", "DEL MethodInvocation", "DEL SimpleName: Arrays", "DEL TypeLiteral", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL AnonymousClassDeclaration", "DEL IfStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: defaultFindResource", "DEL SimpleType: Exception", "DEL SimpleName: iterator", "DEL Block", "DEL SimpleName: value", "DEL SimpleName: obj", "DEL MethodDeclaration", "DEL SimpleName: siteName", "DEL ParameterizedType: Class<? extends Annotation>", "DEL FieldAccess", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: process", "DEL MethodInvocation", "DEL SimpleName: Set", "DEL MarkerAnnotation", "DEL SimpleType: Resource", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: defaultFindResource", "DEL SimpleName: Collections", "DEL SimpleName: Class", "DEL SimpleName: findResource", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: resource", "DEL SimpleName: type", "DEL MethodInvocation", "DEL SimpleName: method", "DEL MethodInvocation", "DEL SimpleType: String", "DEL EnhancedForStatement", "DEL SimpleName: next", "DEL Block", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: nextInChain", "DEL SimpleName: siteName", "DEL SimpleName: getInstance", "DEL SimpleName: resource", "DEL Modifier: final", "DEL SimpleName: Singleton", "DEL SimpleName: unmodifiableList", "DEL MethodInvocation", "DEL SimpleName: method", "DEL StringLiteral: \"%s.%s() is not a proper JavaBean setter.\"", "DEL SimpleName: obj", "DEL MethodDeclaration", "DEL SimpleName: Exception", "DEL SingleVariableDeclaration", "DEL SimpleName: Object", "DEL SingleVariableDeclaration", "DEL SimpleName: iterator", "DEL SimpleName: Resources", "DEL SimpleName: Iterator", "DEL SimpleName: obj", "DEL EnhancedForStatement", "DEL SimpleName: asList", "DEL SimpleName: mappedName", "DEL ReturnStatement", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: ResourceLocator", "DEL MarkerAnnotation", "DEL SimpleName: resource", "DEL Modifier: private", "DEL SimpleType: Class", "DEL ParameterizedType: Class<? extends Annotation>", "DEL Block", "DEL SimpleName: injector", "DEL Block", "DEL SimpleName: Object", "DEL SimpleName: defaultFindResource", "DEL SimpleName: Resource", "DEL SingleVariableDeclaration", "DEL SimpleName: classAnnotationsFor", "DEL SimpleType: Collection", "DEL SimpleType: Resource", "DEL MethodInvocation", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL SimpleName: Resource", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: beanName", "DEL SimpleName: Override", "DEL SimpleName: Arrays", "DEL Modifier: public", "DEL SimpleName: nextInChain", "DEL SimpleName: shareable", "DEL SimpleType: Resource", "DEL PrimitiveType: void", "DEL SimpleName: methodsFor", "DEL SimpleType: Resource", "DEL InfixExpression: ==", "DEL SimpleName: Injector", "DEL SimpleName: Resource", "DEL EnhancedForStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: Resource", "DEL VariableDeclarationStatement", "DEL SimpleName: resources", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: injector", "DEL SimpleName: method", "DEL SimpleName: resource", "DEL MethodInvocation", "DEL SimpleName: obj", "DEL QualifiedName: LifecycleState.SETTING_RESOURCES", "DEL SimpleName: field", "DEL SimpleName: optional", "DEL EnhancedForStatement", "DEL SimpleName: Introspector", "DEL TypeLiteral", "DEL SimpleName: lookup", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL SimpleName: Field", "DEL SimpleName: Resource", "DEL TagElement", "DEL Modifier: final", "DEL SimpleName: Override", "DEL SimpleName: resource", "DEL MethodDeclaration", "DEL SimpleName: Exception", "DEL Block", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: setMethodResource", "DEL SimpleType: String", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: getParameterTypes", "DEL StringLiteral: \"Could not find resource: \"", "DEL SimpleName: getMethodAnnotations", "DEL SimpleName: setAccessible", "DEL MethodInvocation", "DEL SimpleName: Collection", "DEL InfixExpression: ==", "DEL TypeLiteral", "DEL SimpleName: resource", "DEL MethodInvocation", "DEL SimpleName: getAnnotation", "DEL ParameterizedType: Set<ResourceLocator>", "DEL SimpleName: setFieldResource", "DEL IfStatement", "DEL SimpleType: Resource", "DEL SimpleName: field", "DEL SimpleType: Resource", "DEL Block", "DEL SimpleName: LifecycleMethods", "DEL InfixExpression: +", "DEL SimpleName: set", "DEL Block", "DEL SimpleType: Resource", "DEL SimpleType: Object", "DEL IfStatement", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL SimpleName: Field", "DEL SimpleName: loadClassResource", "DEL ExpressionStatement", "DEL SimpleName: Resource", "DEL SimpleType: Resource", "DEL SimpleName: String", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: Override", "DEL Modifier: private", "DEL SimpleName: resources", "DEL Modifier: private", "DEL SimpleType: Resource", "DEL SimpleName: annotationType", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: method", "DEL Block", "DEL SimpleType: Resource", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: fieldsFor", "DEL SimpleName: Arrays", "DEL SimpleName: setFieldResource", "DEL SimpleName: resourceLocators", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleType: Field", "DEL VariableDeclarationFragment", "DEL TypeLiteral", "DEL TypeLiteral", "DEL MarkerAnnotation", "DEL PrimitiveType: void", "DEL ReturnStatement", "DEL SimpleName: resource", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: resource", "DEL MethodInvocation", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL SimpleType: ResourceLocator", "DEL SimpleType: Class", "DEL TypeLiteral", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: Resources", "DEL SimpleType: Resource", "DEL Block", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleType: Resources", "DEL SimpleName: resource", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: resource", "DEL SimpleName: Inject", "DEL SimpleName: field", "DEL Block", "DEL SimpleType: LifecycleState", "DEL SimpleName: getName", "DEL SimpleName: type", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: setFieldResource", "DEL SimpleName: field", "DEL SingleVariableDeclaration", "DEL SimpleName: setMethodResource", "DEL SimpleType: Resource", "DEL MemberValuePair", "DEL Modifier: public", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL SimpleName: type", "DEL SimpleType: String", "DEL Block", "DEL SimpleName: annotationType", "DEL MethodInvocation", "DEL SimpleName: beanName", "DEL SimpleName: siteType", "DEL MethodInvocation", "DEL SimpleType: Exception", "DEL SimpleName: obj", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: Object", "DEL SimpleName: getName", "DEL SimpleType: Resources", "DEL EnhancedForStatement", "DEL SimpleName: resource", "DEL SimpleName: Resource", "DEL SimpleName: asList", "DEL SimpleName: resource", "DEL SimpleName: LifecycleAnnotationProcessor", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: authenticationType", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: Resources", "DEL SimpleName: Class", "DEL SimpleName: resourceObj", "DEL SimpleType: Resources", "DEL NumberLiteral: 0", "DEL MarkerAnnotation", "DEL Modifier: public", "DEL SimpleType: Exception", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL SimpleName: resource", "DEL VariableDeclarationStatement", "DEL SimpleType: Annotation", "DEL InfixExpression: >", "DEL SimpleType: Method", "DEL SimpleName: resources", "DEL SimpleName: ResourceLocator", "DEL SimpleName: beanName", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: Annotation", "DEL SimpleName: resource", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL SimpleName: resource", "DEL MethodInvocation", "DEL SimpleName: substring", "DEL SimpleName: fieldsFor", "DEL SimpleType: Exception", "DEL SimpleName: Resource", "DEL SimpleName: asList", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: decapitalize", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleName: beanName", "DEL SimpleName: Object", "DEL MethodInvocation", "DEL SimpleName: field", "DEL SimpleName: Resource", "DEL SimpleName: Method", "DEL SimpleName: locate", "DEL MethodInvocation", "DEL SimpleName: field", "DEL SimpleType: Resources", "DEL SimpleName: injector", "DEL IfStatement", "DEL SimpleName: methods", "DEL SimpleName: type", "DEL SimpleName: Resources", "DEL SimpleName: Annotation", "DEL SimpleName: Resources", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: adjustResource", "DEL InfixExpression: !=", "DEL QualifiedName: Void.TYPE", "DEL WildcardType: ? extends Annotation", "DEL ClassInstanceCreation", "DEL SimpleType: Resource", "DEL ParenthesizedExpression", "DEL SimpleName: resource", "DEL SimpleName: Exception", "DEL SimpleName: String", "DEL SimpleName: Class", "DEL SimpleName: beanName", "DEL SimpleName: name", "DEL SimpleType: ResourceLocator", "DEL SimpleName: getState", "DEL SimpleName: getAnnotation", "DEL SingleVariableDeclaration", "DEL SimpleName: resource", "DEL SimpleName: injector", "DEL ExpressionStatement", "DEL SimpleName: Resource", "DEL SimpleName: getName", "DEL SimpleType: Resource", "DEL SimpleName: Class", "DEL SimpleName: obj", "DEL SimpleName: resource", "DEL SimpleName: length", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL SimpleName: Object", "DEL SimpleName: methods", "DEL SimpleName: Object", "DEL SimpleType: Class", "DEL SimpleName: Annotation", "DEL SimpleName: field", "DEL SimpleType: Resources", "DEL EnhancedForStatement", "DEL MethodDeclaration", "DEL SimpleName: Collections", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SimpleName: field", "DEL SimpleName: Resource", "DEL ReturnStatement", "DEL SimpleType: Object", "DEL SimpleType: LifecycleMethods", "DEL SimpleName: AuthenticationType", "DEL MethodInvocation", "DEL SimpleName: ResourceLocator", "DEL SimpleName: resource", "DEL MethodInvocation", "DEL SimpleName: Resources", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: getClass", "DEL MarkerAnnotation", "DEL VariableDeclarationStatement", "DEL SimpleName: resourceObj", "DEL SimpleType: Resource", "DEL SimpleName: invoke", "DEL SimpleName: resources", "DEL StringLiteral: \"set\"", "DEL SimpleName: siteName", "DEL MethodDeclaration", "DEL MarkerAnnotation", "DEL ExpressionStatement", "DEL SimpleName: Collections", "DEL Modifier: private", "DEL InfixExpression: !=", "DEL SimpleName: String", "DEL VariableDeclarationFragment", "DEL SimpleName: field", "DEL SimpleType: Resource", "DEL MethodDeclaration", "DEL SimpleName: methods", "DEL SimpleType: Object", "DEL ParenthesizedExpression", "DEL Modifier: public", "DEL ReturnStatement", "DEL SimpleType: Collection", "DEL SimpleName: method", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: obj", "DEL SimpleName: siteType", "DEL SimpleName: Resource", "DEL EnhancedForStatement", "DEL Block", "DEL SimpleName: getAnnotation", "DEL Block", "DEL ParameterizedType: Collection<Class<? extends Annotation>>", "DEL TypeLiteral", "DEL TypeLiteral", "DEL SimpleName: Annotation", "DEL MethodDeclaration", "DEL SimpleType: Field", "DEL SimpleType: String", "DEL SimpleName: iterator", "DEL SimpleName: getClass", "DEL SimpleType: Annotation", "DEL SimpleName: String", "DEL SimpleName: getClassAnnotations", "DEL SingleVariableDeclaration", "DEL SimpleName: String", "DEL BooleanLiteral: true", "DEL SimpleName: adjustResource", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: unmodifiableList", "DEL SimpleType: Resources", "DEL Modifier: public", "DEL ParameterizedType: Class<? extends Annotation>", "DEL MethodInvocation", "DEL SimpleName: Exception", "DEL MethodInvocation", "DEL SimpleType: Annotation", "DEL SimpleType: LifecycleAnnotationProcessor", "DEL SimpleType: Resource", "DEL Modifier: public", "DEL SimpleName: Resource", "DEL SimpleType: Resource", "DEL TextElement: Method needed for eventual java7 compatibility", "DEL SimpleName: ResourcesLifecycleAnnotationProcessor", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleName: field", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: getName", "DEL SimpleType: Class", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: resource", "DEL SimpleName: nextInChain", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: resource", "DEL SimpleName: loadClassResource", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: ResourceLocator", "DEL Block", "DEL SimpleName: method", "DEL SimpleName: resourceLocators", "DEL SimpleName: iterator", "DEL SimpleName: adjustResource", "DEL ThrowStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: Method", "DEL SimpleName: siteName", "DEL SimpleName: beanName", "DEL MethodDeclaration", "DEL SimpleName: siteName", "DEL Block", "DEL SimpleType: AuthenticationType", "DEL SimpleName: Class", "DEL WildcardType: ? extends Annotation", "DEL SimpleName: resource", "DEL InfixExpression: ||", "DEL Block", "DEL SimpleName: format", "DEL Modifier: final", "DEL SimpleName: ResourceLocator", "DEL ParenthesizedExpression", "DEL NormalAnnotation", "DEL SimpleName: startsWith", "DEL VariableDeclarationFragment", "DEL SimpleName: methods", "DEL IfStatement", "DEL WildcardType: ? extends Annotation", "DEL Block", "DEL SimpleName: Resource", "DEL SimpleName: resources", "DEL FieldAccess", "DEL StringLiteral: \"set\"", "DEL SimpleName: Override", "DEL EnhancedForStatement", "DEL MarkerAnnotation", "DEL SimpleName: Override", "DEL ClassInstanceCreation", "DEL SimpleName: resource", "DEL SimpleType: ResourceLocator", "DEL Assignment: =", "DEL SimpleName: shareable", "DEL SimpleName: of", "DEL TypeLiteral", "DEL MethodDeclaration", "DEL SimpleName: resource", "DEL SimpleName: getClass", "DEL ExpressionStatement", "DEL SimpleName: methodsFor", "DEL StringLiteral: \"/\"", "DEL SimpleName: Exception", "DEL ExpressionStatement", "DEL SimpleType: Exception", "DEL SimpleName: resource", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: Annotation", "DEL MethodInvocation", "DEL ParameterizedType: Class<? extends Annotation>", "DEL ConditionalExpression", "DEL SimpleName: LifecycleState", "DEL SimpleName: method", "DEL SimpleName: Resource", "DEL WildcardType: ? extends Annotation", "DEL SingleMemberAnnotation", "DEL MarkerAnnotation", "DEL Modifier: final", "DEL SimpleType: Set", "DEL ExpressionStatement", "DEL SimpleName: locator", "DEL SimpleName: length", "DEL SimpleType: Field", "DEL SimpleName: Method", "DEL SimpleName: Class", "DEL Block", "DEL SimpleName: Resource", "DEL ThisExpression", "DEL EnhancedForStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: siteName", "DEL ParenthesizedExpression", "DEL IfStatement", "DEL ParameterizedType: Class<? extends Annotation>", "DEL WildcardType: ? extends Annotation", "DEL SimpleType: Resources", "DEL SimpleName: Resource", "DEL SimpleName: resource", "DEL ParenthesizedExpression", "DEL Modifier: private", "DEL SimpleName: resources", "DEL SimpleType: Exception", "DEL NumberLiteral: 0", "DEL SimpleName: resource", "DEL SimpleType: Object", "DEL VariableDeclarationStatement", "DEL SimpleName: resource", "DEL ExpressionStatement", "DEL SimpleName: description", "DEL SimpleName: resource", "DEL SimpleName: size", "DEL StringLiteral: \"Class resources must have both name() and type(): \"", "DEL Block", "DEL SimpleName: injector", "DEL PrimitiveType: void", "DEL SimpleName: locate", "DEL SingleVariableDeclaration", "DEL NullLiteral", "DEL SimpleName: classAnnotationsFor", "DEL VariableDeclarationFragment", "DEL SimpleName: method", "DEL SimpleName: setAccessible", "DEL SimpleName: Resources", "DEL SimpleName: Collection", "DEL SimpleType: Annotation", "DEL Assignment: =", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: Resource", "DEL MethodInvocation", "DEL SimpleName: name", "DEL ArrayAccess", "DEL SimpleName: Class", "DEL SimpleName: Resource", "DEL ReturnStatement", "DEL SimpleName: beanName", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: description", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL SimpleType: Method", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleType: Injector", "DEL SimpleName: mappedName", "DEL SimpleType: Annotation", "DEL SimpleName: findResource", "DEL Modifier: public", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Resource", "DEL ReturnStatement", "DEL SimpleName: Injector", "DEL SimpleName: Annotation", "DEL SimpleName: resource", "DEL SimpleName: method", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL ThrowStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: resource", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleType: Resource", "DEL SimpleType: Resource", "DEL ParameterizedType: Class<? extends Annotation>", "DEL SimpleName: String", "DEL SimpleName: toLowerCase", "DEL SingleVariableDeclaration", "DEL SimpleType: Annotation", "DEL MarkerAnnotation", "DEL SimpleName: findResource", "DEL SimpleType: Exception", "DEL ReturnStatement", "DEL TypeLiteral", "DEL SimpleName: ImmutableSet", "DEL SimpleName: getType", "DEL SimpleName: Annotation", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL AnonymousClassDeclaration", "DEL SimpleName: value", "DEL SimpleName: Resource", "DEL SimpleName: ResourcesLifecycleAnnotationProcessor", "DEL SimpleName: Exception", "DEL SingleVariableDeclaration", "DEL SimpleType: Resource", "DEL SimpleName: iterator", "DEL Block", "DEL SimpleName: injector", "DEL TypeLiteral", "DEL SimpleName: Object", "DEL SimpleType: Exception", "DEL SimpleName: Override", "DEL StringLiteral: \"/\"", "DEL SimpleType: Object", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL VariableDeclarationStatement", "DEL Modifier: public", "DEL SimpleName: getName", "DEL MethodDeclaration", "DEL Modifier: private", "DEL SimpleType: Resource", "DEL Modifier: public"]}]}}, {"ResourcesLifecycleAnnotationProcessor_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.lifecycle.processors(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.beans.Introspector(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.annotation.Annotation(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Field(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.lang.reflect.Method(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.Arrays(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.util.Collection(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.util.Collections(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.util.Iterator(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.util.Set(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: javax.annotation.Resource(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: javax.annotation.Resources(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: javax.inject.Singleton(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: javax.naming.NamingException(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.google.common.collect.ImmutableSet(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: com.google.inject.Inject(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.google.inject.Injector(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: com.netflix.governator.guice.LifecycleAnnotationProcessor(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleMethods(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: com.netflix.governator.lifecycle.LifecycleState(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: com.netflix.governator.lifecycle.ResourceLocator(40)", "Delete ImportDeclaration(41)", "Delete SimpleName: Singleton(42)", "Delete MarkerAnnotation(43)", "Delete Modifier: public(44)", "Delete SimpleName: ResourcesLifecycleAnnotationProcessor(45)", "Delete SimpleName: LifecycleAnnotationProcessor(46)", "Delete SimpleType: LifecycleAnnotationProcessor(47)", "Delete Modifier: private(48)", "Delete Modifier: final(49)", "Delete SimpleName: Injector(50)", "Delete SimpleType: Injector(51)", "Delete SimpleName: injector(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete SimpleName: Inject(55)", "Delete SimpleName: optional(56)", "Delete BooleanLiteral: true(57)", "Delete MemberValuePair(58)", "Delete NormalAnnotation(59)", "Delete Modifier: private(60)", "Delete SimpleName: Set(61)", "Delete SimpleType: Set(62)", "Delete SimpleName: ResourceLocator(63)", "Delete SimpleType: ResourceLocator(64)", "Delete ParameterizedType: Set<ResourceLocator>(65)", "Delete SimpleName: resourceLocators(66)", "Delete SimpleName: ImmutableSet(67)", "Delete SimpleName: of(68)", "Delete MethodInvocation(69)", "Delete VariableDeclarationFragment(70)", "Delete FieldDeclaration(71)", "Delete SimpleName: Inject(72)", "Delete MarkerAnnotation(73)", "Delete Modifier: public(74)", "Delete SimpleName: ResourcesLifecycleAnnotationProcessor(75)", "Delete SimpleName: Injector(76)", "Delete SimpleType: Injector(77)", "Delete SimpleName: injector(78)", "Delete SingleVariableDeclaration(79)", "Delete ThisExpression(80)", "Delete SimpleName: injector(81)", "Delete FieldAccess(82)", "Delete SimpleName: injector(83)", "Delete Assignment: =(84)", "Delete ExpressionStatement(85)", "Delete Block(86)", "Delete MethodDeclaration(87)", "Delete SimpleName: Override(88)", "Delete MarkerAnnotation(89)", "Delete Modifier: public(90)", "Delete PrimitiveType: void(91)", "Delete SimpleName: process(92)", "Delete SimpleName: Object(93)", "Delete SimpleType: Object(94)", "Delete SimpleName: obj(95)", "Delete SingleVariableDeclaration(96)", "Delete SimpleName: LifecycleMethods(97)", "Delete SimpleType: LifecycleMethods(98)", "Delete SimpleName: methods(99)", "Delete SingleVariableDeclaration(100)", "Delete SimpleName: Exception(101)", "Delete SimpleType: Exception(102)", "Delete SimpleName: Field(103)", "Delete SimpleType: Field(104)", "Delete SimpleName: field(105)", "Delete SingleVariableDeclaration(106)", "Delete SimpleName: methods(107)", "Delete SimpleName: fieldsFor(108)", "Delete SimpleName: Resources(109)", "Delete SimpleType: Resources(110)", "Delete TypeLiteral(111)", "Delete MethodInvocation(112)", "Delete SimpleName: Resources(113)", "Delete SimpleType: Resources(114)", "Delete SimpleName: resources(115)", "Delete SimpleName: field(116)", "Delete SimpleName: getAnnotation(117)", "Delete SimpleName: Resources(118)", "Delete SimpleType: Resources(119)", "Delete TypeLiteral(120)", "Delete MethodInvocation(121)", "Delete VariableDeclarationFragment(122)", "Delete VariableDeclarationStatement(123)", "Delete SimpleName: Resource(124)", "Delete SimpleType: Resource(125)", "Delete SimpleName: resource(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: resources(128)", "Delete SimpleName: value(129)", "Delete MethodInvocation(130)", "Delete SimpleName: setFieldResource(131)", "Delete SimpleName: obj(132)", "Delete SimpleName: field(133)", "Delete SimpleName: resource(134)", "Delete MethodInvocation(135)", "Delete ExpressionStatement(136)", "Delete Block(137)", "Delete EnhancedForStatement(138)", "Delete Block(139)", "Delete EnhancedForStatement(140)", "Delete SimpleName: Field(141)", "Delete SimpleType: Field(142)", "Delete SimpleName: field(143)", "Delete SingleVariableDeclaration(144)", "Delete SimpleName: methods(145)", "Delete SimpleName: fieldsFor(146)", "Delete SimpleName: Resource(147)", "Delete SimpleType: Resource(148)", "Delete TypeLiteral(149)", "Delete MethodInvocation(150)", "Delete SimpleName: Resource(151)", "Delete SimpleType: Resource(152)", "Delete SimpleName: resource(153)", "Delete SimpleName: field(154)", "Delete SimpleName: getAnnotation(155)", "Delete SimpleName: Resource(156)", "Delete SimpleType: Resource(157)", "Delete TypeLiteral(158)", "Delete MethodInvocation(159)", "Delete VariableDeclarationFragment(160)", "Delete VariableDeclarationStatement(161)", "Delete SimpleName: setFieldResource(162)", "Delete SimpleName: obj(163)", "Delete SimpleName: field(164)", "Delete SimpleName: resource(165)", "Delete MethodInvocation(166)", "Delete ExpressionStatement(167)", "Delete Block(168)", "Delete EnhancedForStatement(169)", "Delete SimpleName: Method(170)", "Delete SimpleType: Method(171)", "Delete SimpleName: method(172)", "Delete SingleVariableDeclaration(173)", "Delete SimpleName: methods(174)", "Delete SimpleName: methodsFor(175)", "Delete SimpleName: Resources(176)", "Delete SimpleType: Resources(177)", "Delete TypeLiteral(178)", "Delete MethodInvocation(179)", "Delete SimpleName: Resources(180)", "Delete SimpleType: Resources(181)", "Delete SimpleName: resources(182)", "Delete SimpleName: method(183)", "Delete SimpleName: getAnnotation(184)", "Delete SimpleName: Resources(185)", "Delete SimpleType: Resources(186)", "Delete TypeLiteral(187)", "Delete MethodInvocation(188)", "Delete VariableDeclarationFragment(189)", "Delete VariableDeclarationStatement(190)", "Delete SimpleName: Resource(191)", "Delete SimpleType: Resource(192)", "Delete SimpleName: resource(193)", "Delete SingleVariableDeclaration(194)", "Delete SimpleName: resources(195)", "Delete SimpleName: value(196)", "Delete MethodInvocation(197)", "Delete SimpleName: setMethodResource(198)", "Delete SimpleName: obj(199)", "Delete SimpleName: method(200)", "Delete SimpleName: resource(201)", "Delete MethodInvocation(202)", "Delete ExpressionStatement(203)", "Delete Block(204)", "Delete EnhancedForStatement(205)", "Delete Block(206)", "Delete EnhancedForStatement(207)", "Delete SimpleName: Method(208)", "Delete SimpleType: Method(209)", "Delete SimpleName: method(210)", "Delete SingleVariableDeclaration(211)", "Delete SimpleName: methods(212)", "Delete SimpleName: methodsFor(213)", "Delete SimpleName: Resource(214)", "Delete SimpleType: Resource(215)", "Delete TypeLiteral(216)", "Delete MethodInvocation(217)", "Delete SimpleName: Resource(218)", "Delete SimpleType: Resource(219)", "Delete SimpleName: resource(220)", "Delete SimpleName: method(221)", "Delete SimpleName: getAnnotation(222)", "Delete SimpleName: Resource(223)", "Delete SimpleType: Resource(224)", "Delete TypeLiteral(225)", "Delete MethodInvocation(226)", "Delete VariableDeclarationFragment(227)", "Delete VariableDeclarationStatement(228)", "Delete SimpleName: setMethodResource(229)", "Delete SimpleName: obj(230)", "Delete SimpleName: method(231)", "Delete SimpleName: resource(232)", "Delete MethodInvocation(233)", "Delete ExpressionStatement(234)", "Delete Block(235)", "Delete EnhancedForStatement(236)", "Delete SimpleName: Resources(237)", "Delete SimpleType: Resources(238)", "Delete SimpleName: resources(239)", "Delete SingleVariableDeclaration(240)", "Delete SimpleName: methods(241)", "Delete SimpleName: classAnnotationsFor(242)", "Delete SimpleName: Resources(243)", "Delete SimpleType: Resources(244)", "Delete TypeLiteral(245)", "Delete MethodInvocation(246)", "Delete SimpleName: Resource(247)", "Delete SimpleType: Resource(248)", "Delete SimpleName: resource(249)", "Delete SingleVariableDeclaration(250)", "Delete SimpleName: resources(251)", "Delete SimpleName: value(252)", "Delete MethodInvocation(253)", "Delete SimpleName: loadClassResource(254)", "Delete SimpleName: resource(255)", "Delete MethodInvocation(256)", "Delete ExpressionStatement(257)", "Delete Block(258)", "Delete EnhancedForStatement(259)", "Delete Block(260)", "Delete EnhancedForStatement(261)", "Delete SimpleName: Resource(262)", "Delete SimpleType: Resource(263)", "Delete SimpleName: resource(264)", "Delete SingleVariableDeclaration(265)", "Delete SimpleName: methods(266)", "Delete SimpleName: classAnnotationsFor(267)", "Delete SimpleName: Resource(268)", "Delete SimpleType: Resource(269)", "Delete TypeLiteral(270)", "Delete MethodInvocation(271)", "Delete SimpleName: loadClassResource(272)", "Delete SimpleName: resource(273)", "Delete MethodInvocation(274)", "Delete ExpressionStatement(275)", "Delete Block(276)", "Delete EnhancedForStatement(277)", "Delete Block(278)", "Delete MethodDeclaration(279)", "Delete Modifier: private(280)", "Delete PrimitiveType: void(281)", "Delete SimpleName: loadClassResource(282)", "Delete SimpleName: Resource(283)", "Delete SimpleType: Resource(284)", "Delete SimpleName: resource(285)", "Delete SingleVariableDeclaration(286)", "Delete SimpleName: Exception(287)", "Delete SimpleType: Exception(288)", "Delete SimpleName: resource(289)", "Delete SimpleName: name(290)", "Delete MethodInvocation(291)", "Delete SimpleName: length(292)", "Delete MethodInvocation(293)", "Delete NumberLiteral: 0(294)", "Delete InfixExpression: ==(295)", "Delete ParenthesizedExpression(296)", "Delete SimpleName: resource(297)", "Delete SimpleName: type(298)", "Delete MethodInvocation(299)", "Delete SimpleName: Object(300)", "Delete SimpleType: Object(301)", "Delete TypeLiteral(302)", "Delete InfixExpression: ==(303)", "Delete ParenthesizedExpression(304)", "Delete InfixExpression: ||(305)", "Delete SimpleName: Exception(306)", "Delete SimpleType: Exception(307)", "Delete StringLiteral: \"Class resources must have both name() and type(): \"(308)", "Delete SimpleName: resource(309)", "Delete InfixExpression: +(310)", "Delete ClassInstanceCreation(311)", "Delete ThrowStatement(312)", "Delete Block(313)", "Delete IfStatement(314)", "Delete SimpleName: findResource(315)", "Delete SimpleName: resource(316)", "Delete MethodInvocation(317)", "Delete ExpressionStatement(318)", "Delete Block(319)", "Delete MethodDeclaration(320)", "Delete Modifier: private(321)", "Delete PrimitiveType: void(322)", "Delete SimpleName: setMethodResource(323)", "Delete SimpleName: Object(324)", "Delete SimpleType: Object(325)", "Delete SimpleName: obj(326)", "Delete SingleVariableDeclaration(327)", "Delete SimpleName: Method(328)", "Delete SimpleType: Method(329)", "Delete SimpleName: method(330)", "Delete SingleVariableDeclaration(331)", "Delete SimpleName: Resource(332)", "Delete SimpleType: Resource(333)", "Delete SimpleName: resource(334)", "Delete SingleVariableDeclaration(335)", "Delete SimpleName: Exception(336)", "Delete SimpleType: Exception(337)", "Delete SimpleName: method(338)", "Delete SimpleName: getParameterTypes(339)", "Delete MethodInvocation(340)", "Delete SimpleName: length(341)", "Delete FieldAccess(342)", "Delete NumberLiteral: 1(343)", "Delete InfixExpression: !=(344)", "Delete ParenthesizedExpression(345)", "Delete SimpleName: method(346)", "Delete SimpleName: getReturnType(347)", "Delete MethodInvocation(348)", "Delete QualifiedName: Void.TYPE(349)", "Delete InfixExpression: !=(350)", "Delete ParenthesizedExpression(351)", "Delete InfixExpression: ||(352)", "Delete SimpleName: Exception(353)", "Delete SimpleType: Exception(354)", "Delete SimpleName: String(355)", "Delete SimpleName: format(356)", "Delete StringLiteral: \"%s.%s() is not a proper JavaBean setter.\"(357)", "Delete SimpleName: obj(358)", "Delete SimpleName: getClass(359)", "Delete MethodInvocation(360)", "Delete SimpleName: getName(361)", "Delete MethodInvocation(362)", "Delete SimpleName: method(363)", "Delete SimpleName: getName(364)", "Delete MethodInvocation(365)", "Delete MethodInvocation(366)", "Delete ClassInstanceCreation(367)", "Delete ThrowStatement(368)", "Delete Block(369)", "Delete IfStatement(370)", "Delete SimpleName: String(371)", "Delete SimpleType: String(372)", "Delete SimpleName: beanName(373)", "Delete SimpleName: method(374)", "Delete SimpleName: getName(375)", "Delete MethodInvocation(376)", "Delete VariableDeclarationFragment(377)", "Delete VariableDeclarationStatement(378)", "Delete SimpleName: beanName(379)", "Delete SimpleName: toLowerCase(380)", "Delete MethodInvocation(381)", "Delete SimpleName: startsWith(382)", "Delete StringLiteral: \"set\"(383)", "Delete MethodInvocation(384)", "Delete SimpleName: beanName(385)", "Delete SimpleName: beanName(386)", "Delete SimpleName: substring(387)", "Delete StringLiteral: \"set\"(388)", "Delete SimpleName: length(389)", "Delete MethodInvocation(390)", "Delete MethodInvocation(391)", "Delete Assignment: =(392)", "Delete ExpressionStatement(393)", "Delete Block(394)", "Delete IfStatement(395)", "Delete SimpleName: beanName(396)", "Delete SimpleName: Introspector(397)", "Delete SimpleName: decapitalize(398)", "Delete SimpleName: beanName(399)", "Delete MethodInvocation(400)", "Delete Assignment: =(401)", "Delete ExpressionStatement(402)", "Delete SimpleName: String(403)", "Delete SimpleType: String(404)", "Delete SimpleName: siteName(405)", "Delete SimpleName: obj(406)", "Delete SimpleName: getClass(407)", "Delete MethodInvocation(408)", "Delete SimpleName: getName(409)", "Delete MethodInvocation(410)", "Delete StringLiteral: \"/\"(411)", "Delete SimpleName: beanName(412)", "Delete InfixExpression: +(413)", "Delete VariableDeclarationFragment(414)", "Delete VariableDeclarationStatement(415)", "Delete SimpleName: resource(416)", "Delete SimpleName: adjustResource(417)", "Delete SimpleName: resource(418)", "Delete SimpleName: method(419)", "Delete SimpleName: getParameterTypes(420)", "Delete MethodInvocation(421)", "Delete NumberLiteral: 0(422)", "Delete ArrayAccess(423)", "Delete SimpleName: siteName(424)", "Delete MethodInvocation(425)", "Delete Assignment: =(426)", "Delete ExpressionStatement(427)", "Delete SimpleName: Object(428)", "Delete SimpleType: Object(429)", "Delete SimpleName: resourceObj(430)", "Delete SimpleName: findResource(431)", "Delete SimpleName: resource(432)", "Delete MethodInvocation(433)", "Delete VariableDeclarationFragment(434)", "Delete VariableDeclarationStatement(435)", "Delete SimpleName: method(436)", "Delete SimpleName: setAccessible(437)", "Delete BooleanLiteral: true(438)", "Delete MethodInvocation(439)", "Delete ExpressionStatement(440)", "Delete SimpleName: method(441)", "Delete SimpleName: invoke(442)", "Delete SimpleName: obj(443)", "Delete SimpleName: resourceObj(444)", "Delete MethodInvocation(445)", "Delete ExpressionStatement(446)", "Delete Block(447)", "Delete MethodDeclaration(448)", "Delete Modifier: private(449)", "Delete PrimitiveType: void(450)", "Delete SimpleName: setFieldResource(451)", "Delete SimpleName: Object(452)", "Delete SimpleType: Object(453)", "Delete SimpleName: obj(454)", "Delete SingleVariableDeclaration(455)", "Delete SimpleName: Field(456)", "Delete SimpleType: Field(457)", "Delete SimpleName: field(458)", "Delete SingleVariableDeclaration(459)", "Delete SimpleName: Resource(460)", "Delete SimpleType: Resource(461)", "Delete SimpleName: resource(462)", "Delete SingleVariableDeclaration(463)", "Delete SimpleName: Exception(464)", "Delete SimpleType: Exception(465)", "Delete SimpleName: String(466)", "Delete SimpleType: String(467)", "Delete SimpleName: siteName(468)", "Delete SimpleName: obj(469)", "Delete SimpleName: getClass(470)", "Delete MethodInvocation(471)", "Delete SimpleName: getName(472)", "Delete MethodInvocation(473)", "Delete StringLiteral: \"/\"(474)", "Delete SimpleName: field(475)", "Delete SimpleName: getName(476)", "Delete MethodInvocation(477)", "Delete InfixExpression: +(478)", "Delete VariableDeclarationFragment(479)", "Delete VariableDeclarationStatement(480)", "Delete SimpleName: Object(481)", "Delete SimpleType: Object(482)", "Delete SimpleName: resourceObj(483)", "Delete SimpleName: findResource(484)", "Delete SimpleName: adjustResource(485)", "Delete SimpleName: resource(486)", "Delete SimpleName: field(487)", "Delete SimpleName: getType(488)", "Delete MethodInvocation(489)", "Delete SimpleName: siteName(490)", "Delete MethodInvocation(491)", "Delete MethodInvocation(492)", "Delete VariableDeclarationFragment(493)", "Delete VariableDeclarationStatement(494)", "Delete SimpleName: field(495)", "Delete SimpleName: setAccessible(496)", "Delete BooleanLiteral: true(497)", "Delete MethodInvocation(498)", "Delete ExpressionStatement(499)", "Delete SimpleName: field(500)", "Delete SimpleName: set(501)", "Delete SimpleName: obj(502)", "Delete SimpleName: resourceObj(503)", "Delete MethodInvocation(504)", "Delete ExpressionStatement(505)", "Delete Block(506)", "Delete MethodDeclaration(507)", "Delete Modifier: private(508)", "Delete SimpleName: Resource(509)", "Delete SimpleType: Resource(510)", "Delete SimpleName: adjustResource(511)", "Delete Modifier: final(512)", "Delete SimpleName: Resource(513)", "Delete SimpleType: Resource(514)", "Delete SimpleName: resource(515)", "Delete SingleVariableDeclaration(516)", "Delete Modifier: final(517)", "Delete SimpleName: Class(518)", "Delete SimpleType: Class(519)", "Delete SimpleName: siteType(520)", "Delete SingleVariableDeclaration(521)", "Delete Modifier: final(522)", "Delete SimpleName: String(523)", "Delete SimpleType: String(524)", "Delete SimpleName: siteName(525)", "Delete SingleVariableDeclaration(526)", "Delete SimpleName: Resource(527)", "Delete SimpleType: Resource(528)", "Delete SimpleName: Override(529)", "Delete MarkerAnnotation(530)", "Delete Modifier: public(531)", "Delete SimpleName: String(532)", "Delete SimpleType: String(533)", "Delete SimpleName: name(534)", "Delete SimpleName: resource(535)", "Delete SimpleName: name(536)", "Delete MethodInvocation(537)", "Delete SimpleName: length(538)", "Delete MethodInvocation(539)", "Delete NumberLiteral: 0(540)", "Delete InfixExpression: ==(541)", "Delete ParenthesizedExpression(542)", "Delete SimpleName: siteName(543)", "Delete SimpleName: resource(544)", "Delete SimpleName: name(545)", "Delete MethodInvocation(546)", "Delete ConditionalExpression(547)", "Delete ReturnStatement(548)", "Delete Block(549)", "Delete MethodDeclaration(550)", "Delete TextElement: Method needed for eventual java7 compatibility(551)", "Delete TagElement(552)", "Delete Javadoc(553)", "Delete Modifier: public(554)", "Delete SimpleName: String(555)", "Delete SimpleType: String(556)", "Delete SimpleName: lookup(557)", "Delete SimpleName: name(558)", "Delete MethodInvocation(559)", "Delete ReturnStatement(560)", "Delete Block(561)", "Delete MethodDeclaration(562)", "Delete SimpleName: Override(563)", "Delete MarkerAnnotation(564)", "Delete Modifier: public(565)", "Delete SimpleName: Class(566)", "Delete SimpleType: Class(567)", "Delete SimpleName: type(568)", "Delete SimpleName: resource(569)", "Delete SimpleName: type(570)", "Delete MethodInvocation(571)", "Delete SimpleName: Object(572)", "Delete SimpleType: Object(573)", "Delete TypeLiteral(574)", "Delete InfixExpression: ==(575)", "Delete ParenthesizedExpression(576)", "Delete SimpleName: siteType(577)", "Delete SimpleName: resource(578)", "Delete SimpleName: type(579)", "Delete MethodInvocation(580)", "Delete ConditionalExpression(581)", "Delete ReturnStatement(582)", "Delete Block(583)", "Delete MethodDeclaration(584)", "Delete SimpleName: Override(585)", "Delete MarkerAnnotation(586)", "Delete Modifier: public(587)", "Delete SimpleName: AuthenticationType(588)", "Delete SimpleType: AuthenticationType(589)", "Delete SimpleName: authenticationType(590)", "Delete SimpleName: resource(591)", "Delete SimpleName: authenticationType(592)", "Delete MethodInvocation(593)", "Delete ReturnStatement(594)", "Delete Block(595)", "Delete MethodDeclaration(596)", "Delete SimpleName: Override(597)", "Delete MarkerAnnotation(598)", "Delete Modifier: public(599)", "Delete PrimitiveType: boolean(600)", "Delete SimpleName: shareable(601)", "Delete SimpleName: resource(602)", "Delete SimpleName: shareable(603)", "Delete MethodInvocation(604)", "Delete ReturnStatement(605)", "Delete Block(606)", "Delete MethodDeclaration(607)", "Delete SimpleName: Override(608)", "Delete MarkerAnnotation(609)", "Delete Modifier: public(610)", "Delete SimpleName: String(611)", "Delete SimpleType: String(612)", "Delete SimpleName: mappedName(613)", "Delete SimpleName: resource(614)", "Delete SimpleName: mappedName(615)", "Delete MethodInvocation(616)", "Delete ReturnStatement(617)", "Delete Block(618)", "Delete MethodDeclaration(619)", "Delete SimpleName: Override(620)", "Delete MarkerAnnotation(621)", "Delete Modifier: public(622)", "Delete SimpleName: String(623)", "Delete SimpleType: String(624)", "Delete SimpleName: description(625)", "Delete SimpleName: resource(626)", "Delete SimpleName: description(627)", "Delete MethodInvocation(628)", "Delete ReturnStatement(629)", "Delete Block(630)", "Delete MethodDeclaration(631)", "Delete SimpleName: Override(632)", "Delete MarkerAnnotation(633)", "Delete Modifier: public(634)", "Delete SimpleName: Class(635)", "Delete SimpleType: Class(636)", "Delete SimpleName: Annotation(637)", "Delete SimpleType: Annotation(638)", "Delete WildcardType: ? extends Annotation(639)", "Delete ParameterizedType: Class<? extends Annotation>(640)", "Delete SimpleName: annotationType(641)", "Delete SimpleName: resource(642)", "Delete SimpleName: annotationType(643)", "Delete MethodInvocation(644)", "Delete ReturnStatement(645)", "Delete Block(646)", "Delete MethodDeclaration(647)", "Delete AnonymousClassDeclaration(648)", "Delete ClassInstanceCreation(649)", "Delete ReturnStatement(650)", "Delete Block(651)", "Delete MethodDeclaration(652)", "Delete Modifier: private(653)", "Delete SimpleName: Object(654)", "Delete SimpleType: Object(655)", "Delete SimpleName: findResource(656)", "Delete SimpleName: Resource(657)", "Delete SimpleType: Resource(658)", "Delete SimpleName: resource(659)", "Delete SingleVariableDeclaration(660)", "Delete SimpleName: Exception(661)", "Delete SimpleType: Exception(662)", "Delete SimpleName: resourceLocators(663)", "Delete SimpleName: size(664)", "Delete MethodInvocation(665)", "Delete NumberLiteral: 0(666)", "Delete InfixExpression: >(667)", "Delete Modifier: final(668)", "Delete SimpleName: Iterator(669)", "Delete SimpleType: Iterator(670)", "Delete SimpleName: ResourceLocator(671)", "Delete SimpleType: ResourceLocator(672)", "Delete ParameterizedType: Iterator<ResourceLocator>(673)", "Delete SimpleName: iterator(674)", "Delete SimpleName: resourceLocators(675)", "Delete SimpleName: iterator(676)", "Delete MethodInvocation(677)", "Delete VariableDeclarationFragment(678)", "Delete VariableDeclarationStatement(679)", "Delete SimpleName: ResourceLocator(680)", "Delete SimpleType: ResourceLocator(681)", "Delete SimpleName: locator(682)", "Delete SimpleName: iterator(683)", "Delete SimpleName: next(684)", "Delete MethodInvocation(685)", "Delete VariableDeclarationFragment(686)", "Delete VariableDeclarationStatement(687)", "Delete SimpleName: ResourceLocator(688)", "Delete SimpleType: ResourceLocator(689)", "Delete SimpleName: nextInChain(690)", "Delete SimpleName: ResourceLocator(691)", "Delete SimpleType: ResourceLocator(692)", "Delete SimpleName: Override(693)", "Delete MarkerAnnotation(694)", "Delete Modifier: public(695)", "Delete SimpleName: Object(696)", "Delete SimpleType: Object(697)", "Delete SimpleName: locate(698)", "Delete SimpleName: Resource(699)", "Delete SimpleType: Resource(700)", "Delete SimpleName: resource(701)", "Delete SingleVariableDeclaration(702)", "Delete SimpleName: ResourceLocator(703)", "Delete SimpleType: ResourceLocator(704)", "Delete SimpleName: nextInChain(705)", "Delete SingleVariableDeclaration(706)", "Delete SimpleName: Exception(707)", "Delete SimpleType: Exception(708)", "Delete SimpleName: iterator(709)", "Delete SimpleName: hasNext(710)", "Delete MethodInvocation(711)", "Delete SimpleName: iterator(712)", "Delete SimpleName: next(713)", "Delete MethodInvocation(714)", "Delete SimpleName: locate(715)", "Delete SimpleName: resource(716)", "Delete ThisExpression(717)", "Delete MethodInvocation(718)", "Delete ReturnStatement(719)", "Delete Block(720)", "Delete IfStatement(721)", "Delete SimpleName: defaultFindResource(722)", "Delete SimpleName: resource(723)", "Delete MethodInvocation(724)", "Delete ReturnStatement(725)", "Delete Block(726)", "Delete MethodDeclaration(727)", "Delete AnonymousClassDeclaration(728)", "Delete ClassInstanceCreation(729)", "Delete VariableDeclarationFragment(730)", "Delete VariableDeclarationStatement(731)", "Delete SimpleName: locator(732)", "Delete SimpleName: locate(733)", "Delete SimpleName: resource(734)", "Delete SimpleName: nextInChain(735)", "Delete MethodInvocation(736)", "Delete ReturnStatement(737)", "Delete Block(738)", "Delete IfStatement(739)", "Delete SimpleName: defaultFindResource(740)", "Delete SimpleName: resource(741)", "Delete MethodInvocation(742)", "Delete ReturnStatement(743)", "Delete Block(744)", "Delete MethodDeclaration(745)", "Delete SimpleName: SuppressWarnings(746)", "Delete StringLiteral: \"unchecked\"(747)", "Delete SingleMemberAnnotation(748)", "Delete Modifier: private(749)", "Delete SimpleName: Object(750)", "Delete SimpleType: Object(751)", "Delete SimpleName: defaultFindResource(752)", "Delete SimpleName: Resource(753)", "Delete SimpleType: Resource(754)", "Delete SimpleName: resource(755)", "Delete SingleVariableDeclaration(756)", "Delete SimpleName: Exception(757)", "Delete SimpleType: Exception(758)", "Delete SimpleName: injector(759)", "Delete NullLiteral(760)", "Delete InfixExpression: ==(761)", "Delete SimpleName: NamingException(762)", "Delete SimpleType: NamingException(763)", "Delete StringLiteral: \"Could not find resource: \"(764)", "Delete SimpleName: resource(765)", "Delete InfixExpression: +(766)", "Delete ClassInstanceCreation(767)", "Delete ThrowStatement(768)", "Delete Block(769)", "Delete IfStatement(770)", "Delete SimpleName: injector(771)", "Delete SimpleName: getInstance(772)", "Delete SimpleName: resource(773)", "Delete SimpleName: type(774)", "Delete MethodInvocation(775)", "Delete MethodInvocation(776)", "Delete ReturnStatement(777)", "Delete Block(778)", "Delete MethodDeclaration(779)", "Delete SimpleName: Override(780)", "Delete MarkerAnnotation(781)", "Delete Modifier: public(782)", "Delete SimpleName: Collection(783)", "Delete SimpleType: Collection(784)", "Delete SimpleName: Class(785)", "Delete SimpleType: Class(786)", "Delete SimpleName: Annotation(787)", "Delete SimpleType: Annotation(788)", "Delete WildcardType: ? extends Annotation(789)", "Delete ParameterizedType: Class<? extends Annotation>(790)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(791)", "Delete SimpleName: getFieldAnnotations(792)", "Delete SimpleName: Collections(793)", "Delete SimpleName: unmodifiableList(794)", "Delete SimpleName: Arrays(795)", "Delete SimpleName: Class(796)", "Delete SimpleType: Class(797)", "Delete SimpleName: Annotation(798)", "Delete SimpleType: Annotation(799)", "Delete WildcardType: ? extends Annotation(800)", "Delete ParameterizedType: Class<? extends Annotation>(801)", "Delete SimpleName: asList(802)", "Delete SimpleName: Resource(803)", "Delete SimpleType: Resource(804)", "Delete TypeLiteral(805)", "Delete MethodInvocation(806)", "Delete MethodInvocation(807)", "Delete ReturnStatement(808)", "Delete Block(809)", "Delete MethodDeclaration(810)", "Delete SimpleName: Override(811)", "Delete MarkerAnnotation(812)", "Delete Modifier: public(813)", "Delete SimpleName: Collection(814)", "Delete SimpleType: Collection(815)", "Delete SimpleName: Class(816)", "Delete SimpleType: Class(817)", "Delete SimpleName: Annotation(818)", "Delete SimpleType: Annotation(819)", "Delete WildcardType: ? extends Annotation(820)", "Delete ParameterizedType: Class<? extends Annotation>(821)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(822)", "Delete SimpleName: getMethodAnnotations(823)", "Delete SimpleName: Collections(824)", "Delete SimpleName: unmodifiableList(825)", "Delete SimpleName: Arrays(826)", "Delete SimpleName: Class(827)", "Delete SimpleType: Class(828)", "Delete SimpleName: Annotation(829)", "Delete SimpleType: Annotation(830)", "Delete WildcardType: ? extends Annotation(831)", "Delete ParameterizedType: Class<? extends Annotation>(832)", "Delete SimpleName: asList(833)", "Delete SimpleName: Resource(834)", "Delete SimpleType: Resource(835)", "Delete TypeLiteral(836)", "Delete MethodInvocation(837)", "Delete MethodInvocation(838)", "Delete ReturnStatement(839)", "Delete Block(840)", "Delete MethodDeclaration(841)", "Delete SimpleName: Override(842)", "Delete MarkerAnnotation(843)", "Delete Modifier: public(844)", "Delete SimpleName: Collection(845)", "Delete SimpleType: Collection(846)", "Delete SimpleName: Class(847)", "Delete SimpleType: Class(848)", "Delete SimpleName: Annotation(849)", "Delete SimpleType: Annotation(850)", "Delete WildcardType: ? extends Annotation(851)", "Delete ParameterizedType: Class<? extends Annotation>(852)", "Delete ParameterizedType: Collection<Class<? extends Annotation>>(853)", "Delete SimpleName: getClassAnnotations(854)", "Delete SimpleName: Collections(855)", "Delete SimpleName: unmodifiableList(856)", "Delete SimpleName: Arrays(857)", "Delete SimpleName: Class(858)", "Delete SimpleType: Class(859)", "Delete SimpleName: Annotation(860)", "Delete SimpleType: Annotation(861)", "Delete WildcardType: ? extends Annotation(862)", "Delete ParameterizedType: Class<? extends Annotation>(863)", "Delete SimpleName: asList(864)", "Delete SimpleName: Resource(865)", "Delete SimpleType: Resource(866)", "Delete TypeLiteral(867)", "Delete SimpleName: Resources(868)", "Delete SimpleType: Resources(869)", "Delete TypeLiteral(870)", "Delete MethodInvocation(871)", "Delete MethodInvocation(872)", "Delete ReturnStatement(873)", "Delete Block(874)", "Delete MethodDeclaration(875)", "Delete SimpleName: Override(876)", "Delete MarkerAnnotation(877)", "Delete Modifier: public(878)", "Delete SimpleName: LifecycleState(879)", "Delete SimpleType: LifecycleState(880)", "Delete SimpleName: getState(881)", "Delete QualifiedName: LifecycleState.SETTING_RESOURCES(882)", "Delete ReturnStatement(883)", "Delete Block(884)", "Delete MethodDeclaration(885)", "Delete TypeDeclaration: class(886)"]}}], "commit_stats": [{"total_files": 57, "deleted_files": 13, "testing": "True", "maintenance": "False", "build": "True"}]}