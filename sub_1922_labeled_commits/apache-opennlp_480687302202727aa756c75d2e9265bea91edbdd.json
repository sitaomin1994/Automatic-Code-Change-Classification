{"application": "apache-opennlp", "csha": "480687302202727aa756c75d2e9265bea91edbdd", "files": [{"TrainerFactory_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SingleVariableDeclaration to CatchClause at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: iterationsString to MethodInvocation at 2", "INS SimpleName: algorithmName to MethodInvocation at 1", "INS QualifiedName: AbstractTrainer.ITERATIONS_PARAM to MethodInvocation at 2", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS ReturnStatement to Block at 5", "INS SimpleName: trainParams to MethodInvocation at 0", "INS SimpleType: String to ParameterizedType: Map<String,String> at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: trainParams to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: algorithmName to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: algorithmName to InfixExpression: != at 0", "INS IfStatement to Block at 4", "INS SimpleName: parseInt to MethodInvocation at 1", "INS SimpleName: iterationsString to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS IfStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: trainParams to MethodInvocation at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS NullLiteral to InfixExpression: != at 1", "INS Block to TryStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: Map<String,String> to SingleVariableDeclaration at 0", "INS SimpleName: Integer to MethodInvocation at 0", "INS SimpleName: get to MethodInvocation at 1", "INS ExpressionStatement to IfStatement at 1", "INS SimpleName: equals to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS BooleanLiteral: true to ReturnStatement at 0", "INS TryStatement to Block at 2", "INS SimpleName: Map to SimpleType: Map at 0", "INS ReturnStatement to Block at 0", "INS SimpleType: Map to ParameterizedType: Map<String,String> at 0", "INS VariableDeclarationStatement to Block at 3", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: iterationsString to InfixExpression: != at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: isValid to MethodDeclaration at 3", "INS SimpleType: NumberFormatException to SingleVariableDeclaration at 0", "INS SimpleName: BUILTIN_TRAINERS to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS QualifiedName: AbstractTrainer.ALGORITHM_PARAM to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 2", "INS QualifiedName: AbstractTrainer.CUTOFF_PARAM to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: != to IfStatement at 0", "INS QualifiedName: AbstractEventTrainer.DATA_INDEXER_TWO_PASS_VALUE to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS QualifiedName: AbstractEventTrainer.DATA_INDEXER_ONE_PASS_VALUE to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS QualifiedName: AbstractEventTrainer.DATA_INDEXER_PARAM to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 0", "INS SimpleType: String to ParameterizedType: Map<String,String> at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: dataIndexer to InfixExpression: != at 0", "INS SimpleName: NumberFormatException to SimpleType: NumberFormatException at 0", "INS SimpleName: String to SimpleType: String at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: trainParams to MethodInvocation at 0", "INS SimpleName: trainParams to SingleVariableDeclaration at 1", "INS MethodInvocation to InfixExpression: || at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: Integer to MethodInvocation at 0", "INS SimpleName: canLoadTrainer to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: containsKey to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: || at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS SimpleName: cutoffString to VariableDeclarationFragment at 0", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS Block to CatchClause at 1", "INS SimpleName: parseInt to MethodInvocation at 1", "INS SimpleName: dataIndexer to MethodInvocation at 2", "INS Modifier: static to MethodDeclaration at 1", "INS ExpressionStatement to IfStatement at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: algorithmName to MethodInvocation at 2", "INS CatchClause to TryStatement at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: cutoffString to InfixExpression: != at 0", "INS SimpleName: dataIndexer to MethodInvocation at 2", "INS SimpleName: cutoffString to MethodInvocation at 2", "INS SimpleName: String to SimpleType: String at 0", "INS InfixExpression: && to IfStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS ReturnStatement to Block at 0", "INS SimpleName: dataIndexer to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 9", "operations": ["INS SimpleName: isAssignableFrom to MethodInvocation at 1", "INS SimpleType: ClassNotFoundException to SingleVariableDeclaration at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS ParenthesizedExpression to InfixExpression: && at 1", "INS MethodInvocation to InfixExpression: || at 0", "INS SimpleName: className to SingleVariableDeclaration at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS WildcardType: ? to ParameterizedType: Class<?> at 1", "INS SimpleName: forName to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to IfStatement at 1", "INS SimpleName: className to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SimpleName: Class to MethodInvocation at 0", "INS SimpleName: trainerClass to InfixExpression: != at 0", "INS SimpleName: trainerClass to VariableDeclarationFragment at 0", "INS TryStatement to Block at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS SimpleName: isAssignableFrom to MethodInvocation at 1", "INS SimpleType: EventTrainer to TypeLiteral at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Modifier: static to MethodDeclaration at 1", "INS ReturnStatement to Block at 1", "INS SimpleType: SequenceTrainer to TypeLiteral at 0", "INS Block to CatchClause at 1", "INS SimpleName: trainerClass to MethodInvocation at 2", "INS SimpleName: Class to SimpleType: Class at 0", "INS SimpleName: SequenceTrainer to SimpleType: SequenceTrainer at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS SimpleName: canLoadTrainer to MethodDeclaration at 3", "INS SimpleName: trainerClass to MethodInvocation at 2", "INS TypeLiteral to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0", "INS Modifier: private to MethodDeclaration at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: EventTrainer to SimpleType: EventTrainer at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS IfStatement to Block at 1", "INS ParameterizedType: Class<?> to VariableDeclarationStatement at 0", "INS TypeLiteral to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Class to ParameterizedType: Class<?> at 0", "INS MethodInvocation to InfixExpression: || at 1", "INS SimpleName: ClassNotFoundException to SimpleType: ClassNotFoundException at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.ArrayList", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}]}}, {"TrainerFactory_diff": {"operations": ["Insert MethodDeclaration(411) into TypeDeclaration: class(689) at 8", "Insert MethodDeclaration(464) into TypeDeclaration: class(689) at 9", "Insert Modifier: public(293) into MethodDeclaration(411) at 0", "Insert Modifier: static(294) into MethodDeclaration(411) at 1", "Insert PrimitiveType: boolean(295) into MethodDeclaration(411) at 2", "Insert SimpleName: isValid(296) into MethodDeclaration(411) at 3", "Insert SingleVariableDeclaration(305) into MethodDeclaration(411) at 4", "Insert Block(410) into MethodDeclaration(411) at 5", "Insert Modifier: private(412) into MethodDeclaration(464) at 0", "Insert Modifier: static(413) into MethodDeclaration(464) at 1", "Insert PrimitiveType: boolean(414) into MethodDeclaration(464) at 2", "Insert SimpleName: canLoadTrainer(415) into MethodDeclaration(464) at 3", "Insert SingleVariableDeclaration(419) into MethodDeclaration(464) at 4", "Insert Block(463) into MethodDeclaration(464) at 5", "Insert ParameterizedType: Map<String,String>(303) into SingleVariableDeclaration(305) at 0", "Insert SimpleName: trainParams(304) into SingleVariableDeclaration(305) at 1", "Insert VariableDeclarationStatement(314) into Block(410) at 0", "Insert IfStatement(332) into Block(410) at 1", "Insert TryStatement(378) into Block(410) at 2", "Insert VariableDeclarationStatement(387) into Block(410) at 3", "Insert IfStatement(407) into Block(410) at 4", "Insert ReturnStatement(409) into Block(410) at 5", "Insert SimpleType: String(417) into SingleVariableDeclaration(419) at 0", "Insert SimpleName: className(418) into SingleVariableDeclaration(419) at 1", "Insert TryStatement(460) into Block(463) at 0", "Insert ReturnStatement(462) into Block(463) at 1", "Insert SimpleType: Map(298) into ParameterizedType: Map<String,String>(303) at 0", "Insert SimpleType: String(300) into ParameterizedType: Map<String,String>(303) at 1", "Insert SimpleType: String(302) into ParameterizedType: Map<String,String>(303) at 2", "Insert SimpleType: String(307) into VariableDeclarationStatement(314) at 0", "Insert VariableDeclarationFragment(313) into VariableDeclarationStatement(314) at 1", "Insert InfixExpression: &&(328) into IfStatement(332) at 0", "Insert Block(331) into IfStatement(332) at 1", "Insert Block(369) into TryStatement(378) at 0", "Insert CatchClause(377) into TryStatement(378) at 1", "Insert SimpleType: String(380) into VariableDeclarationStatement(387) at 0", "Insert VariableDeclarationFragment(386) into VariableDeclarationStatement(387) at 1", "Insert InfixExpression: !=(390) into IfStatement(407) at 0", "Insert Block(406) into IfStatement(407) at 1", "Insert BooleanLiteral: true(408) into ReturnStatement(409) at 0", "Insert SimpleName: String(416) into SimpleType: String(417) at 0", "Insert Block(453) into TryStatement(460) at 0", "Insert CatchClause(459) into TryStatement(460) at 1", "Insert BooleanLiteral: false(461) into ReturnStatement(462) at 0", "Insert SimpleName: Map(297) into SimpleType: Map(298) at 0", "Insert SimpleName: String(299) into SimpleType: String(300) at 0", "Insert SimpleName: String(301) into SimpleType: String(302) at 0", "Insert SimpleName: String(306) into SimpleType: String(307) at 0", "Insert SimpleName: algorithmName(308) into VariableDeclarationFragment(313) at 0", "Insert MethodInvocation(312) into VariableDeclarationFragment(313) at 1", "Insert InfixExpression: !=(317) into InfixExpression: &&(328) at 0", "Insert PrefixExpression: !(327) into InfixExpression: &&(328) at 1", "Insert ReturnStatement(330) into Block(331) at 0", "Insert VariableDeclarationStatement(341) into Block(369) at 0", "Insert IfStatement(350) into Block(369) at 1", "Insert VariableDeclarationStatement(359) into Block(369) at 2", "Insert IfStatement(368) into Block(369) at 3", "Insert SingleVariableDeclaration(373) into CatchClause(377) at 0", "Insert Block(376) into CatchClause(377) at 1", "Insert SimpleName: String(379) into SimpleType: String(380) at 0", "Insert SimpleName: dataIndexer(381) into VariableDeclarationFragment(386) at 0", "Insert MethodInvocation(385) into VariableDeclarationFragment(386) at 1", "Insert SimpleName: dataIndexer(388) into InfixExpression: !=(390) at 0", "Insert NullLiteral(389) into InfixExpression: !=(390) at 1", "Insert IfStatement(405) into Block(406) at 0", "Insert VariableDeclarationStatement(430) into Block(453) at 0", "Insert IfStatement(452) into Block(453) at 1", "Insert SingleVariableDeclaration(457) into CatchClause(459) at 0", "Insert Block(458) into CatchClause(459) at 1", "Insert SimpleName: trainParams(309) into MethodInvocation(312) at 0", "Insert SimpleName: get(310) into MethodInvocation(312) at 1", "Insert QualifiedName: AbstractTrainer.ALGORITHM_PARAM(311) into MethodInvocation(312) at 2", "Insert SimpleName: algorithmName(315) into InfixExpression: !=(317) at 0", "Insert NullLiteral(316) into InfixExpression: !=(317) at 1", "Insert ParenthesizedExpression(326) into PrefixExpression: !(327) at 0", "Insert BooleanLiteral: false(329) into ReturnStatement(330) at 0", "Insert SimpleType: String(334) into VariableDeclarationStatement(341) at 0", "Insert VariableDeclarationFragment(340) into VariableDeclarationStatement(341) at 1", "Insert InfixExpression: !=(344) into IfStatement(350) at 0", "Insert ExpressionStatement(349) into IfStatement(350) at 1", "Insert SimpleType: String(352) into VariableDeclarationStatement(359) at 0", "Insert VariableDeclarationFragment(358) into VariableDeclarationStatement(359) at 1", "Insert InfixExpression: !=(362) into IfStatement(368) at 0", "Insert ExpressionStatement(367) into IfStatement(368) at 1", "Insert SimpleType: NumberFormatException(371) into SingleVariableDeclaration(373) at 0", "Insert SimpleName: e(372) into SingleVariableDeclaration(373) at 1", "Insert ReturnStatement(375) into Block(376) at 0", "Insert SimpleName: trainParams(382) into MethodInvocation(385) at 0", "Insert SimpleName: get(383) into MethodInvocation(385) at 1", "Insert QualifiedName: AbstractEventTrainer.DATA_INDEXER_PARAM(384) into MethodInvocation(385) at 2", "Insert PrefixExpression: !(401) into IfStatement(405) at 0", "Insert Block(404) into IfStatement(405) at 1", "Insert ParameterizedType: Class<?>(423) into VariableDeclarationStatement(430) at 0", "Insert VariableDeclarationFragment(429) into VariableDeclarationStatement(430) at 1", "Insert InfixExpression: &&(448) into IfStatement(452) at 0", "Insert Block(451) into IfStatement(452) at 1", "Insert SimpleType: ClassNotFoundException(455) into SingleVariableDeclaration(457) at 0", "Insert SimpleName: e(456) into SingleVariableDeclaration(457) at 1", "Insert InfixExpression: ||(325) into ParenthesizedExpression(326) at 0", "Insert SimpleName: String(333) into SimpleType: String(334) at 0", "Insert SimpleName: cutoffString(335) into VariableDeclarationFragment(340) at 0", "Insert MethodInvocation(339) into VariableDeclarationFragment(340) at 1", "Insert SimpleName: cutoffString(342) into InfixExpression: !=(344) at 0", "Insert NullLiteral(343) into InfixExpression: !=(344) at 1", "Insert MethodInvocation(348) into ExpressionStatement(349) at 0", "Insert SimpleName: String(351) into SimpleType: String(352) at 0", "Insert SimpleName: iterationsString(353) into VariableDeclarationFragment(358) at 0", "Insert MethodInvocation(357) into VariableDeclarationFragment(358) at 1", "Insert SimpleName: iterationsString(360) into InfixExpression: !=(362) at 0", "Insert NullLiteral(361) into InfixExpression: !=(362) at 1", "Insert MethodInvocation(366) into ExpressionStatement(367) at 0", "Insert SimpleName: NumberFormatException(370) into SimpleType: NumberFormatException(371) at 0", "Insert BooleanLiteral: false(374) into ReturnStatement(375) at 0", "Insert ParenthesizedExpression(400) into PrefixExpression: !(401) at 0", "Insert ReturnStatement(403) into Block(404) at 0", "Insert SimpleType: Class(421) into ParameterizedType: Class<?>(423) at 0", "Insert WildcardType: ?(422) into ParameterizedType: Class<?>(423) at 1", "Insert SimpleName: trainerClass(424) into VariableDeclarationFragment(429) at 0", "Insert MethodInvocation(428) into VariableDeclarationFragment(429) at 1", "Insert InfixExpression: !=(433) into InfixExpression: &&(448) at 0", "Insert ParenthesizedExpression(447) into InfixExpression: &&(448) at 1", "Insert ReturnStatement(450) into Block(451) at 0", "Insert SimpleName: ClassNotFoundException(454) into SimpleType: ClassNotFoundException(455) at 0", "Insert MethodInvocation(321) into InfixExpression: ||(325) at 0", "Insert MethodInvocation(324) into InfixExpression: ||(325) at 1", "Insert SimpleName: trainParams(336) into MethodInvocation(339) at 0", "Insert SimpleName: get(337) into MethodInvocation(339) at 1", "Insert QualifiedName: AbstractTrainer.CUTOFF_PARAM(338) into MethodInvocation(339) at 2", "Insert SimpleName: Integer(345) into MethodInvocation(348) at 0", "Insert SimpleName: parseInt(346) into MethodInvocation(348) at 1", "Insert SimpleName: cutoffString(347) into MethodInvocation(348) at 2", "Insert SimpleName: trainParams(354) into MethodInvocation(357) at 0", "Insert SimpleName: get(355) into MethodInvocation(357) at 1", "Insert QualifiedName: AbstractTrainer.ITERATIONS_PARAM(356) into MethodInvocation(357) at 2", "Insert SimpleName: Integer(363) into MethodInvocation(366) at 0", "Insert SimpleName: parseInt(364) into MethodInvocation(366) at 1", "Insert SimpleName: iterationsString(365) into MethodInvocation(366) at 2", "Insert InfixExpression: ||(399) into ParenthesizedExpression(400) at 0", "Insert BooleanLiteral: false(402) into ReturnStatement(403) at 0", "Insert SimpleName: Class(420) into SimpleType: Class(421) at 0", "Insert SimpleName: Class(425) into MethodInvocation(428) at 0", "Insert SimpleName: forName(426) into MethodInvocation(428) at 1", "Insert SimpleName: className(427) into MethodInvocation(428) at 2", "Insert SimpleName: trainerClass(431) into InfixExpression: !=(433) at 0", "Insert NullLiteral(432) into InfixExpression: !=(433) at 1", "Insert InfixExpression: ||(446) into ParenthesizedExpression(447) at 0", "Insert BooleanLiteral: true(449) into ReturnStatement(450) at 0", "Insert SimpleName: BUILTIN_TRAINERS(318) into MethodInvocation(321) at 0", "Insert SimpleName: containsKey(319) into MethodInvocation(321) at 1", "Insert SimpleName: algorithmName(320) into MethodInvocation(321) at 2", "Insert SimpleName: canLoadTrainer(322) into MethodInvocation(324) at 0", "Insert SimpleName: algorithmName(323) into MethodInvocation(324) at 1", "Insert MethodInvocation(394) into InfixExpression: ||(399) at 0", "Insert MethodInvocation(398) into InfixExpression: ||(399) at 1", "Insert MethodInvocation(439) into InfixExpression: ||(446) at 0", "Insert MethodInvocation(445) into InfixExpression: ||(446) at 1", "Insert QualifiedName: AbstractEventTrainer.DATA_INDEXER_ONE_PASS_VALUE(391) into MethodInvocation(394) at 0", "Insert SimpleName: equals(392) into MethodInvocation(394) at 1", "Insert SimpleName: dataIndexer(393) into MethodInvocation(394) at 2", "Insert QualifiedName: AbstractEventTrainer.DATA_INDEXER_TWO_PASS_VALUE(395) into MethodInvocation(398) at 0", "Insert SimpleName: equals(396) into MethodInvocation(398) at 1", "Insert SimpleName: dataIndexer(397) into MethodInvocation(398) at 2", "Insert TypeLiteral(436) into MethodInvocation(439) at 0", "Insert SimpleName: isAssignableFrom(437) into MethodInvocation(439) at 1", "Insert SimpleName: trainerClass(438) into MethodInvocation(439) at 2", "Insert TypeLiteral(442) into MethodInvocation(445) at 0", "Insert SimpleName: isAssignableFrom(443) into MethodInvocation(445) at 1", "Insert SimpleName: trainerClass(444) into MethodInvocation(445) at 2", "Insert SimpleType: EventTrainer(435) into TypeLiteral(436) at 0", "Insert SimpleType: SequenceTrainer(441) into TypeLiteral(442) at 0", "Insert SimpleName: EventTrainer(434) into SimpleType: EventTrainer(435) at 0", "Insert SimpleName: SequenceTrainer(440) into SimpleType: SequenceTrainer(441) at 0", "Delete QualifiedName: java.util.ArrayList(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.List(10)", "Delete ImportDeclaration(11)"]}}], "commit_stats": [{"total_files": 8, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}