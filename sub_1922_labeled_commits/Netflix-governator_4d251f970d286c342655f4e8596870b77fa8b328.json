{"application": "Netflix-governator", "csha": "4d251f970d286c342655f4e8596870b77fa8b328", "files": [{"LifecycleInjector_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Deprecated to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS TagElement: @deprecated to Javadoc at 1", "operations": ["INS TagElement: @deprecated to Javadoc at 1", "INS TextElement:  use LifecycleInjector.close() instead to TagElement: @deprecated at 0"]}]}}, {"LifecycleInjector_diff": {"operations": ["Insert MarkerAnnotation(187) into MethodDeclaration(196) at 1", "Insert TagElement: @deprecated(184) into Javadoc(185) at 1", "Insert SimpleName: Deprecated(186) into MarkerAnnotation(187) at 0", "Insert TextElement:  use LifecycleInjector.close() instead(183) into TagElement: @deprecated(184) at 0"]}}, {"LifecycleManager_cluster": {"actions": []}}, {"LifecycleManager_diff": {"operations": []}}, {"AbstractLifecycleFeature_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.internal", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.lang.reflect.Field", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.lang.reflect.Method"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.List", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.LifecycleAction", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.netflix.governator.LifecycleFeature", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: SUPERCLASS", "DEL MarkerAnnotation", "DEL SimpleName: ElementType", "DEL SimpleName: newTypeVisitor", "DEL SimpleName: METHOD", "DEL ParameterizedType: List<LifecycleAction>", "DEL VariableDeclarationFragment", "DEL Block", "DEL EnhancedForStatement", "DEL SimpleType: Method", "DEL SimpleName: actions", "DEL SimpleType: ElementType", "DEL SimpleName: visitFieldsAndMethods", "DEL MethodInvocation", "DEL SimpleType: TypeVisitor", "DEL ExpressionStatement", "DEL WildcardType: ?", "DEL MethodInvocation", "DEL SimpleName: type", "DEL SimpleName: TypeVisitor", "DEL SimpleType: Class", "DEL SimpleName: iface", "DEL Javadoc", "DEL SimpleName: iface", "DEL SimpleName: LifecycleAction", "DEL SimpleName: actions", "DEL NullLiteral", "DEL SimpleName: typeVisitor", "DEL SimpleName: getDeclaredMethods", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleName: getFieldActions", "DEL PrimitiveType: void", "DEL SimpleType: TypeVisitor", "DEL SimpleType: List", "DEL SingleVariableDeclaration", "DEL Block", "DEL ParameterizedType: List<LifecycleAction>", "DEL MethodDeclaration", "DEL SimpleType: Class", "DEL SimpleName: Class", "DEL SimpleName: ElementType", "DEL ParameterizedType: Class<?>", "DEL SimpleName: typeVisitor", "DEL SimpleName: accept", "DEL SimpleName: Method", "DEL SimpleName: typeVisitor", "DEL SimpleName: Field", "DEL SimpleType: Class", "DEL SimpleName: List", "DEL SimpleName: METHOD", "DEL MethodInvocation", "DEL SimpleName: Class", "DEL SimpleName: getActionsForType", "DEL WildcardType: ?", "DEL EnumConstantDeclaration", "DEL Block", "DEL Modifier: final", "DEL SimpleType: LifecycleAction", "DEL IfStatement", "DEL SimpleName: type", "DEL MethodInvocation", "DEL SimpleName: type", "DEL SimpleName: Field", "DEL SimpleType: Class", "DEL MethodDeclaration", "DEL SimpleName: type", "DEL SimpleName: getDeclaredFields", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: typeVisitor", "DEL Block", "DEL ExpressionStatement", "DEL EnumConstantDeclaration", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: INTERFACE", "DEL ParameterizedType: List<LifecycleAction>", "DEL SingleVariableDeclaration", "DEL SimpleType: Field", "DEL IfStatement", "DEL SimpleName: field", "DEL TypeDeclaration: interface", "DEL SimpleName: Class", "DEL SimpleName: INTERFACE", "DEL Modifier: protected", "DEL InfixExpression: ==", "DEL SimpleType: List", "DEL SimpleName: List", "DEL SimpleName: List", "DEL WildcardType: ?", "DEL SimpleName: actions", "DEL SimpleName: getFieldActions", "DEL MethodInvocation", "DEL SimpleName: visitFieldsAndMethods", "DEL SimpleName: type", "DEL ParameterizedType: List<LifecycleAction>", "DEL TextElement: deals with identifying all the fields and methods for the type and its", "DEL SimpleName: newTypeVisitor", "DEL SimpleName: getMethodActions", "DEL SimpleName: Override", "DEL TextElement: Base utility class for field and method based lifecycle features. This class", "DEL SimpleName: getMethodActions", "DEL TagElement: @author", "DEL IfStatement", "DEL SimpleName: method", "DEL SimpleName: type", "DEL SimpleName: elementType", "DEL SimpleName: Method", "DEL SimpleType: LifecycleAction", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: LifecycleAction", "DEL SimpleName: type", "DEL ParameterizedType: Class<?>", "DEL SimpleName: type", "DEL SimpleName: accept", "DEL WildcardType: ?", "DEL SimpleType: LifecycleAction", "DEL ParameterizedType: Class<?>", "DEL WildcardType: ?", "DEL SimpleName: AbstractLifecycleFeature", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: SUPERCLASS", "DEL TagElement", "DEL SimpleName: field", "DEL EnhancedForStatement", "DEL SimpleType: List", "DEL SimpleType: Field", "DEL Modifier: abstract", "DEL EnumConstantDeclaration", "DEL SimpleType: Method", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodDeclaration", "DEL SimpleName: LifecycleAction", "DEL SimpleName: visitFieldsAndMethods", "DEL TextElement: template methods getFieldAction and getMethodAction.", "DEL Modifier: private", "DEL MethodDeclaration", "DEL SimpleName: method", "DEL SimpleName: LifecycleAction", "DEL SingleVariableDeclaration", "DEL SimpleName: field", "DEL TextElement:  elandau", "DEL PrimitiveType: boolean", "DEL SimpleName: accept", "DEL SimpleName: FIELD", "DEL SimpleName: type", "DEL SimpleName: accept", "DEL SimpleName: actions", "DEL ExpressionStatement", "DEL Modifier: abstract", "DEL SingleVariableDeclaration", "DEL SimpleName: typeVisitor", "DEL SimpleName: visitFieldsAndMethods", "DEL ParameterizedType: Class<?>", "DEL SimpleName: typeVisitor", "DEL SimpleName: typeVisitor", "DEL SingleVariableDeclaration", "DEL EnumConstantDeclaration", "DEL SimpleName: typeVisitor", "DEL SingleVariableDeclaration", "DEL SimpleName: TypeVisitor", "DEL SimpleName: ArrayList", "DEL SimpleType: ArrayList", "DEL SimpleName: List", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: LifecycleFeature", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: typeVisitor", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Modifier: final", "DEL SimpleName: LifecycleAction", "DEL SimpleName: type", "DEL SimpleType: Class", "DEL SimpleName: actions", "DEL Block", "DEL EnumDeclaration", "DEL SimpleName: actions", "DEL SimpleName: getInterfaces", "DEL SimpleType: LifecycleAction", "DEL SimpleName: addAll", "DEL EnhancedForStatement", "DEL ExpressionStatement", "DEL SimpleType: List", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL SimpleType: LifecycleAction", "DEL ParameterizedType: ArrayList<>", "DEL SimpleName: TypeVisitor", "DEL ReturnStatement", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: Class", "DEL SimpleName: actions", "DEL SimpleName: accept", "DEL SimpleName: actions", "DEL ParameterizedType: Class<?>", "DEL SimpleName: getSuperclass", "DEL IfStatement", "DEL SimpleName: method", "DEL SimpleName: LifecycleFeature", "DEL SimpleType: List", "DEL SimpleName: FIELD", "DEL ParameterizedType: List<LifecycleAction>", "DEL SimpleName: type", "DEL SimpleName: type", "DEL MethodInvocation", "DEL MethodInvocation", "DEL TextElement: superclasses and interfaces and delegating the actual processing using the", "DEL SimpleName: List", "DEL SimpleName: addAll", "DEL TypeDeclaration: class"]}]}}, {"AbstractLifecycleFeature_diff": {"operations": ["Delete QualifiedName: com.netflix.governator.internal(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: java.lang.reflect.Field(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.lang.reflect.Method(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.ArrayList(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.List(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.netflix.governator.LifecycleAction(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.netflix.governator.LifecycleFeature(14)", "Delete ImportDeclaration(15)", "Delete TextElement: Base utility class for field and method based lifecycle features. This class(16)", "Delete TextElement: deals with identifying all the fields and methods for the type and its(17)", "Delete TextElement: superclasses and interfaces and delegating the actual processing using the(18)", "Delete TextElement: template methods getFieldAction and getMethodAction.(19)", "Delete TagElement(20)", "Delete TextElement:  elandau(21)", "Delete TagElement: @author(22)", "Delete Javadoc(23)", "Delete Modifier: abstract(24)", "Delete SimpleName: AbstractLifecycleFeature(25)", "Delete SimpleName: LifecycleFeature(26)", "Delete SimpleType: LifecycleFeature(27)", "Delete SimpleName: TypeVisitor(28)", "Delete SimpleName: ElementType(29)", "Delete SimpleName: FIELD(30)", "Delete EnumConstantDeclaration(31)", "Delete SimpleName: METHOD(32)", "Delete EnumConstantDeclaration(33)", "Delete SimpleName: INTERFACE(34)", "Delete EnumConstantDeclaration(35)", "Delete SimpleName: SUPERCLASS(36)", "Delete EnumConstantDeclaration(37)", "Delete EnumDeclaration(38)", "Delete PrimitiveType: boolean(39)", "Delete SimpleName: accept(40)", "Delete SimpleName: ElementType(41)", "Delete SimpleType: ElementType(42)", "Delete SimpleName: elementType(43)", "Delete SingleVariableDeclaration(44)", "Delete MethodDeclaration(45)", "Delete SimpleName: List(46)", "Delete SimpleType: List(47)", "Delete SimpleName: LifecycleAction(48)", "Delete SimpleType: LifecycleAction(49)", "Delete ParameterizedType: List<LifecycleAction>(50)", "Delete SimpleName: getFieldActions(51)", "Delete SimpleName: Class(52)", "Delete SimpleType: Class(53)", "Delete WildcardType: ?(54)", "Delete ParameterizedType: Class<?>(55)", "Delete SimpleName: type(56)", "Delete SingleVariableDeclaration(57)", "Delete SimpleName: Field(58)", "Delete SimpleType: Field(59)", "Delete SimpleName: field(60)", "Delete SingleVariableDeclaration(61)", "Delete MethodDeclaration(62)", "Delete SimpleName: List(63)", "Delete SimpleType: List(64)", "Delete SimpleName: LifecycleAction(65)", "Delete SimpleType: LifecycleAction(66)", "Delete ParameterizedType: List<LifecycleAction>(67)", "Delete SimpleName: getMethodActions(68)", "Delete SimpleName: Class(69)", "Delete SimpleType: Class(70)", "Delete WildcardType: ?(71)", "Delete ParameterizedType: Class<?>(72)", "Delete SimpleName: type(73)", "Delete SingleVariableDeclaration(74)", "Delete SimpleName: Method(75)", "Delete SimpleType: Method(76)", "Delete SimpleName: method(77)", "Delete SingleVariableDeclaration(78)", "Delete MethodDeclaration(79)", "Delete TypeDeclaration: interface(80)", "Delete Modifier: private(81)", "Delete PrimitiveType: void(82)", "Delete SimpleName: visitFieldsAndMethods(83)", "Delete SimpleName: TypeVisitor(84)", "Delete SimpleType: TypeVisitor(85)", "Delete SimpleName: typeVisitor(86)", "Delete SingleVariableDeclaration(87)", "Delete SimpleName: Class(88)", "Delete SimpleType: Class(89)", "Delete WildcardType: ?(90)", "Delete ParameterizedType: Class<?>(91)", "Delete SimpleName: type(92)", "Delete SingleVariableDeclaration(93)", "Delete SimpleName: List(94)", "Delete SimpleType: List(95)", "Delete SimpleName: LifecycleAction(96)", "Delete SimpleType: LifecycleAction(97)", "Delete ParameterizedType: List<LifecycleAction>(98)", "Delete SimpleName: actions(99)", "Delete SingleVariableDeclaration(100)", "Delete SimpleName: type(101)", "Delete NullLiteral(102)", "Delete InfixExpression: ==(103)", "Delete ReturnStatement(104)", "Delete Block(105)", "Delete IfStatement(106)", "Delete SimpleName: typeVisitor(107)", "Delete SimpleName: accept(108)", "Delete SimpleName: FIELD(109)", "Delete MethodInvocation(110)", "Delete Modifier: final(111)", "Delete SimpleName: Field(112)", "Delete SimpleType: Field(113)", "Delete SimpleName: field(114)", "Delete SingleVariableDeclaration(115)", "Delete SimpleName: type(116)", "Delete SimpleName: getDeclaredFields(117)", "Delete MethodInvocation(118)", "Delete SimpleName: actions(119)", "Delete SimpleName: addAll(120)", "Delete SimpleName: typeVisitor(121)", "Delete SimpleName: getFieldActions(122)", "Delete SimpleName: type(123)", "Delete SimpleName: field(124)", "Delete MethodInvocation(125)", "Delete MethodInvocation(126)", "Delete ExpressionStatement(127)", "Delete Block(128)", "Delete EnhancedForStatement(129)", "Delete Block(130)", "Delete IfStatement(131)", "Delete SimpleName: typeVisitor(132)", "Delete SimpleName: accept(133)", "Delete SimpleName: METHOD(134)", "Delete MethodInvocation(135)", "Delete Modifier: final(136)", "Delete SimpleName: Method(137)", "Delete SimpleType: Method(138)", "Delete SimpleName: method(139)", "Delete SingleVariableDeclaration(140)", "Delete SimpleName: type(141)", "Delete SimpleName: getDeclaredMethods(142)", "Delete MethodInvocation(143)", "Delete SimpleName: actions(144)", "Delete SimpleName: addAll(145)", "Delete SimpleName: typeVisitor(146)", "Delete SimpleName: getMethodActions(147)", "Delete SimpleName: type(148)", "Delete SimpleName: method(149)", "Delete MethodInvocation(150)", "Delete MethodInvocation(151)", "Delete ExpressionStatement(152)", "Delete Block(153)", "Delete EnhancedForStatement(154)", "Delete Block(155)", "Delete IfStatement(156)", "Delete SimpleName: typeVisitor(157)", "Delete SimpleName: accept(158)", "Delete SimpleName: SUPERCLASS(159)", "Delete MethodInvocation(160)", "Delete SimpleName: visitFieldsAndMethods(161)", "Delete SimpleName: typeVisitor(162)", "Delete SimpleName: type(163)", "Delete SimpleName: getSuperclass(164)", "Delete MethodInvocation(165)", "Delete SimpleName: actions(166)", "Delete MethodInvocation(167)", "Delete ExpressionStatement(168)", "Delete Block(169)", "Delete IfStatement(170)", "Delete SimpleName: typeVisitor(171)", "Delete SimpleName: accept(172)", "Delete SimpleName: INTERFACE(173)", "Delete MethodInvocation(174)", "Delete SimpleName: Class(175)", "Delete SimpleType: Class(176)", "Delete WildcardType: ?(177)", "Delete ParameterizedType: Class<?>(178)", "Delete SimpleName: iface(179)", "Delete SingleVariableDeclaration(180)", "Delete SimpleName: type(181)", "Delete SimpleName: getInterfaces(182)", "Delete MethodInvocation(183)", "Delete SimpleName: visitFieldsAndMethods(184)", "Delete SimpleName: typeVisitor(185)", "Delete SimpleName: iface(186)", "Delete SimpleName: actions(187)", "Delete MethodInvocation(188)", "Delete ExpressionStatement(189)", "Delete Block(190)", "Delete EnhancedForStatement(191)", "Delete Block(192)", "Delete IfStatement(193)", "Delete Block(194)", "Delete MethodDeclaration(195)", "Delete Modifier: protected(196)", "Delete Modifier: abstract(197)", "Delete SimpleName: TypeVisitor(198)", "Delete SimpleType: TypeVisitor(199)", "Delete SimpleName: newTypeVisitor(200)", "Delete MethodDeclaration(201)", "Delete SimpleName: Override(202)", "Delete MarkerAnnotation(203)", "Delete Modifier: public(204)", "Delete SimpleName: List(205)", "Delete SimpleType: List(206)", "Delete SimpleName: LifecycleAction(207)", "Delete SimpleType: LifecycleAction(208)", "Delete ParameterizedType: List<LifecycleAction>(209)", "Delete SimpleName: getActionsForType(210)", "Delete SimpleName: Class(211)", "Delete SimpleType: Class(212)", "Delete WildcardType: ?(213)", "Delete ParameterizedType: Class<?>(214)", "Delete SimpleName: type(215)", "Delete SingleVariableDeclaration(216)", "Delete SimpleName: List(217)", "Delete SimpleType: List(218)", "Delete SimpleName: LifecycleAction(219)", "Delete SimpleType: LifecycleAction(220)", "Delete ParameterizedType: List<LifecycleAction>(221)", "Delete SimpleName: actions(222)", "Delete SimpleName: ArrayList(223)", "Delete SimpleType: ArrayList(224)", "Delete ParameterizedType: ArrayList<>(225)", "Delete ClassInstanceCreation(226)", "Delete VariableDeclarationFragment(227)", "Delete VariableDeclarationStatement(228)", "Delete SimpleName: visitFieldsAndMethods(229)", "Delete SimpleName: newTypeVisitor(230)", "Delete MethodInvocation(231)", "Delete SimpleName: type(232)", "Delete SimpleName: actions(233)", "Delete MethodInvocation(234)", "Delete ExpressionStatement(235)", "Delete SimpleName: actions(236)", "Delete ReturnStatement(237)", "Delete Block(238)", "Delete MethodDeclaration(239)", "Delete TypeDeclaration: class(240)"]}}, {"PostConstructLifecycleActions_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 13", "MOV ImportDeclaration to CompilationUnit at 13"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS ImportDeclaration to CompilationUnit at 7", "INS QualifiedName: java.util.LinkedList to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: org.slf4j.Logger to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: org.slf4j.LoggerFactory to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS QualifiedName: com.google.common.base.Supplier to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 13"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV TypeDeclaration: class to TypeDeclaration: class at 10"]}, {"root": "UPDATE from com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType.METHOD to com.netflix.governator.LifecycleFeature", "operations": ["UPD QualifiedName: com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType.METHOD from com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType.METHOD to com.netflix.governator.LifecycleFeature"]}, {"root": "UPDATE from com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType.SUPERCLASS to com.netflix.governator.internal.TypeInspector.TypeVisitor", "operations": ["UPD QualifiedName: com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType.SUPERCLASS from com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType.SUPERCLASS to com.netflix.governator.internal.TypeInspector.TypeVisitor"]}, {"root": "UPDATE from AbstractLifecycleFeature to LifecycleFeature", "operations": ["UPD SimpleName: AbstractLifecycleFeature from AbstractLifecycleFeature to LifecycleFeature", "UPD SimpleType: AbstractLifecycleFeature from AbstractLifecycleFeature to LifecycleFeature"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS SimpleName: Logger to SimpleType: Logger at 0", "INS SimpleName: LOG to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: Logger to FieldDeclaration at 3", "INS SimpleType: PostConstructLifecycleActions to TypeLiteral at 0", "INS SimpleName: LoggerFactory to MethodInvocation at 0", "INS SimpleName: PostConstructLifecycleActions to SimpleType: PostConstructLifecycleActions at 0", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getLogger to MethodInvocation at 1", "INS Modifier: static to FieldDeclaration at 1", "INS Modifier: final to FieldDeclaration at 2", "INS TypeLiteral to MethodInvocation at 2"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS Block to MethodDeclaration at 2", "INS Modifier: private to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: PostConstructLifecycleActions to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: type to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: TypeInspector to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: getActionsForType to MethodDeclaration at 3", "INS Block to MethodDeclaration at 5", "INS SimpleName: accept to MethodInvocation at 1", "INS ReturnStatement to Block at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 13", "operations": ["INS TypeDeclaration: class to TypeDeclaration: class at 13", "INS SimpleName: PostConstructAction to TypeDeclaration: class at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleType: Method to FieldDeclaration at 2", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: description to ReturnStatement at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: String to MethodDeclaration at 2", "INS Modifier: private to TypeDeclaration: class at 0", "INS Modifier: final to FieldDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS SimpleName: method to VariableDeclarationFragment at 0", "INS SimpleName: toString to MethodDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: static to TypeDeclaration: class at 1", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleName: description to VariableDeclarationFragment at 0", "INS ReturnStatement to Block at 0", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS Modifier: final to TypeDeclaration: class at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV ParameterizedType: List<LifecycleAction> to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleName: getMethodActions to MethodDeclaration at 3", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "INS Modifier: private to TypeDeclaration: class at 0", "operations": ["INS Modifier: private to TypeDeclaration: class at 0"]}, {"root": "INS ParameterizedType: Supplier<List<LifecycleAction>> to TypeDeclaration: class at 4", "operations": ["INS SimpleName: Supplier to SimpleType: Supplier at 0", "INS SimpleType: Supplier to ParameterizedType: Supplier<List<LifecycleAction>> at 0", "INS ParameterizedType: Supplier<List<LifecycleAction>> to TypeDeclaration: class at 4"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 6", "operations": ["INS SimpleType: LinkedList to ParameterizedType: LinkedList<LifecycleAction> at 0", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS ParameterizedType: LinkedList<> to ClassInstanceCreation at 0", "INS Modifier: private to FieldDeclaration at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: LinkedList to SimpleType: LinkedList at 0", "INS ParameterizedType: LinkedList<LifecycleAction> to FieldDeclaration at 1", "INS SimpleType: LinkedList to ParameterizedType: LinkedList<> at 0", "INS SimpleName: typeActions to VariableDeclarationFragment at 0", "INS SimpleName: LinkedList to SimpleType: LinkedList at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS ReturnStatement to Block at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS PrefixExpression: ! to ReturnStatement at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS Block to MethodDeclaration at 5"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 1", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS Block to MethodDeclaration at 5", "INS SimpleName: isAnnotationPresent to MethodInvocation at 1", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: visit to MethodDeclaration at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV SimpleType: LifecycleAction to TypeDeclaration: class at 4", "MOV SimpleName: Collections to MethodInvocation at 0", "MOV SimpleName: singletonList to MethodInvocation at 1"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "UPDATE from Special AbstractLifecycleFeature to support @PostConstruct annotation to Special LifecycleFeature to support @PostConstruct annotation processing.", "operations": ["UPD TextElement: Special AbstractLifecycleFeature to support @PostConstruct annotation from Special AbstractLifecycleFeature to support @PostConstruct annotation to Special LifecycleFeature to support @PostConstruct annotation processing."]}, {"root": "UPDATE from processing. Note that this feature is implicit in LifecycleModule and to Note that this feature is implicit in LifecycleModule and therefore does not", "operations": ["UPD TextElement: processing. Note that this feature is implicit in LifecycleModule and from processing. Note that this feature is implicit in LifecycleModule and to Note that this feature is implicit in LifecycleModule and therefore does not"]}, {"root": "UPDATE from therefore does not need to be added using the LifecycleFeature multibinding. to need to be added using the LifecycleFeature multibinding.", "operations": ["UPD TextElement: therefore does not need to be added using the LifecycleFeature multibinding. from therefore does not need to be added using the LifecycleFeature multibinding. to need to be added using the LifecycleFeature multibinding."]}, {"root": "MOVE from ParameterizedType: Supplier<List<LifecycleAction>>", "operations": ["MOV ParameterizedType: List<LifecycleAction> to ParameterizedType: Supplier<List<LifecycleAction>> at 1", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 2", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from getMethodActions to visit", "operations": ["UPD SimpleName: getMethodActions from getMethodActions to visit", "UPD SimpleName: getFieldActions from getFieldActions to visit"]}, {"root": "INS PrimitiveType: boolean to MethodDeclaration at 2", "operations": ["INS PrimitiveType: boolean to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV ParameterizedType: List<LifecycleAction> to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from accept to get", "operations": ["UPD SimpleName: accept from accept to get"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "UPDATE from getActionsForType to PostConstructAction", "operations": ["UPD SimpleName: getActionsForType from getActionsForType to PostConstructAction"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from ParameterizedType: LinkedList<LifecycleAction>", "operations": ["MOV SimpleType: LifecycleAction to ParameterizedType: LinkedList<LifecycleAction> at 1"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from type to clazz", "operations": ["UPD SimpleName: type from type to clazz", "UPD SimpleName: Modifier from Modifier to clazz"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2", "MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from Class to Method", "operations": ["UPD SimpleName: Class from Class to Method", "UPD SimpleName: TypeVisitor from TypeVisitor to Method"]}, {"root": "MOVE from SimpleType: Method", "operations": ["MOV SimpleName: TypeVisitor to SimpleType: Method at 0"]}, {"root": "INS SimpleType: Method to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: Method to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from type to method", "operations": ["UPD SimpleName: type from type to method", "UPD SimpleName: equals from equals to method", "UPD SimpleName: visitContext from visitContext to method", "UPD SimpleName: append from append to method"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: method to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: method to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleName: toString to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: description to FieldAccess at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ThisExpression to FieldAccess at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"]\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS FieldAccess to Assignment: = at 0", "INS StringLiteral: \"#\" to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: LOG to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: info to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"invoking lifecycle action {}\" to MethodInvocation at 2", "INS SimpleName: description to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS BooleanLiteral: true to ReturnStatement at 0", "operations": ["INS BooleanLiteral: true to ReturnStatement at 0"]}, {"root": "INS BooleanLiteral: true to ReturnStatement at 0", "operations": ["INS BooleanLiteral: true to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: unmodifiableList to MethodInvocation at 1", "INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: typeActions to MethodInvocation at 2", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from SimpleType: Method", "operations": ["MOV SimpleName: Class to SimpleType: Method at 0"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV MethodInvocation to InfixExpression: != at 1", "MOV SimpleName: equals to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getAnnotation to MethodInvocation at 1", "MOV TypeLiteral to MethodInvocation at 2", "MOV SimpleName: method to MethodInvocation at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: methodName to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from isAbstract to isInterface", "operations": ["UPD SimpleName: isAbstract from isAbstract to isInterface"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: methodName to MethodInvocation at 4", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"invalid static @PostConstruct method {}.{}()\" to MethodInvocation at 2"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS SimpleName: postConstructAction to MethodInvocation at 2", "INS FieldAccess to MethodInvocation at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS QualifiedName: Void.TYPE to InfixExpression: != at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 5", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: methodName to MethodInvocation at 2", "INS SimpleName: LOG to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS SimpleName: contains to MethodInvocation at 1", "INS StringLiteral: \"invalid @PostConstruct method {}.{}() with return type {}\" to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: PostConstructAction to ClassInstanceCreation at 0", "INS ThisExpression to FieldAccess at 0", "INS IfStatement to Block at 0", "INS IfStatement to IfStatement at 2", "INS ExpressionStatement to Block at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: PostConstructAction to SimpleType: PostConstructAction at 0", "INS SimpleName: method to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS Block to IfStatement at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 3", "INS StringLiteral: \"invalid @PostConstruct method {}.{}() with {} parameters\" to MethodInvocation at 2", "INS SimpleName: PostConstructAction to SimpleType: PostConstructAction at 0", "INS QualifiedName: postConstructAction.description to MethodInvocation at 3", "INS PrefixExpression: ! to IfStatement at 0", "INS Block to IfStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: visitContext to MethodInvocation at 0", "INS SimpleName: methodName to MethodInvocation at 4", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: postConstructAction to VariableDeclarationFragment at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: methodName to MethodInvocation at 4", "INS SimpleName: method to ClassInstanceCreation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: typeActions to FieldAccess at 1", "INS IfStatement to IfStatement at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: PostConstructAction to VariableDeclarationStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: visitContext to MethodInvocation at 0", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1", "MOV SimpleName: add to MethodInvocation at 1", "MOV SimpleName: visitContext to MethodInvocation at 0"]}, {"root": "UPDATE from == to >", "operations": ["UPD InfixExpression: == from == to >"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "UPDATE from Collections to append", "operations": ["UPD SimpleName: Collections from Collections to append", "UPD SimpleName: reverse from reverse to append", "UPD SimpleName: typeActions from typeActions to append"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: typeActions to MethodInvocation at 1", "MOV SimpleName: reverse to MethodInvocation at 1", "MOV SimpleName: Collections to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from Collections to LOG", "operations": ["UPD SimpleName: Collections from Collections to LOG", "UPD SimpleName: visitContext from visitContext to LOG"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: visitContext to MethodInvocation at 0", "MOV MethodInvocation to MethodInvocation at 3", "MOV SimpleName: contains to MethodInvocation at 1"]}, {"root": "UPDATE from singletonList to info", "operations": ["UPD SimpleName: singletonList from singletonList to info", "UPD SimpleName: contains from contains to info"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: append to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: method to MethodInvocation at 0"]}, {"root": "UPDATE from getAnnotation to getName", "operations": ["UPD SimpleName: getAnnotation from getAnnotation to getName"]}, {"root": "UPDATE from add to getParameterCount", "operations": ["UPD SimpleName: add from add to getParameterCount"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 5", "MOV StringLiteral: \"#\" to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getName to MethodInvocation at 1", "MOV SimpleName: type to MethodInvocation at 1"]}, {"root": "UPDATE from type to getReturnType", "operations": ["UPD SimpleName: type from type to getReturnType"]}, {"root": "UPDATE from \"#\" to \"adding lifecycle action for {}\"", "operations": ["UPD StringLiteral: \"#\" from \"#\" to \"adding lifecycle action for {}\""]}, {"root": "UPDATE from append to addFirst", "operations": ["UPD SimpleName: append from append to addFirst"]}, {"root": "UPDATE from append to add", "operations": ["UPD SimpleName: append from append to add"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "UPDATE from toString to methodName", "operations": ["UPD SimpleName: toString from toString to methodName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toString to MethodInvocation at 2"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ReturnStatement", "DEL MethodDeclaration", "DEL SimpleName: newTypeVisitor", "DEL Modifier: protected", "DEL SimpleType: TypeVisitor", "DEL Block"]}, {"root": "DEL SimpleName: modifiers", "operations": ["DEL SimpleName: modifiers"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL MethodDeclaration", "DEL ReturnStatement", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL AnonymousClassDeclaration", "DEL Block", "DEL Modifier: public", "DEL IfStatement", "DEL InfixExpression: !=", "DEL SimpleName: toString", "DEL Block", "DEL MethodInvocation", "DEL StringLiteral: \"]\"", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Collections", "DEL MethodInvocation", "DEL SimpleName: emptyList"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL InfixExpression: &&", "DEL PrefixExpression: !", "DEL PrefixExpression: !", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL QualifiedName: Void.TYPE", "DEL IfStatement", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: Collections", "DEL MethodInvocation", "DEL SimpleName: emptyList"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleType: ElementType", "DEL SimpleName: ElementType", "DEL SimpleName: elementType"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL SimpleName: METHOD", "DEL SimpleName: elementType", "DEL InfixExpression: ||", "DEL SimpleName: elementType", "DEL InfixExpression: ==", "DEL SimpleName: SUPERCLASS", "DEL InfixExpression: =="]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL ParameterizedType: Class<?>", "operations": ["DEL ParameterizedType: Class<?>", "DEL WildcardType: ?", "DEL SimpleType: Class"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL ParameterizedType: List<LifecycleAction>", "DEL SimpleType: LifecycleAction", "DEL SimpleType: List", "DEL SimpleName: typeActions", "DEL SimpleName: getActionsForType", "DEL SuperMethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: type", "DEL SimpleName: List", "DEL SimpleName: LifecycleAction"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: typeActions"]}]}}, {"PostConstructLifecycleActions_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(447) at 13", "Move ImportDeclaration(5) into CompilationUnit(447) at 13", "Insert ImportDeclaration(15) into CompilationUnit(447) at 7", "Insert ImportDeclaration(23) into CompilationUnit(447) at 11", "Insert ImportDeclaration(25) into CompilationUnit(447) at 12", "Insert ImportDeclaration(27) into CompilationUnit(447) at 13", "Move TypeDeclaration: class(270) into TypeDeclaration: class(446) at 10", "Insert QualifiedName: java.util.LinkedList(14) into ImportDeclaration(15) at 0", "Insert QualifiedName: org.slf4j.Logger(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: org.slf4j.LoggerFactory(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: com.google.common.base.Supplier(26) into ImportDeclaration(27) at 0", "Update QualifiedName: com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType.METHOD(2) to com.netflix.governator.LifecycleFeature", "Update QualifiedName: com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType.SUPERCLASS(4) to com.netflix.governator.internal.TypeInspector.TypeVisitor", "Update SimpleType: AbstractLifecycleFeature(37) to LifecycleFeature", "Insert FieldDeclaration(59) into TypeDeclaration: class(446) at 5", "Insert MethodDeclaration(73) into TypeDeclaration: class(446) at 7", "Insert MethodDeclaration(99) into TypeDeclaration: class(446) at 8", "Insert TypeDeclaration: class(445) into TypeDeclaration: class(446) at 11", "Update SimpleName: AbstractLifecycleFeature(36) to LifecycleFeature", "Insert Modifier: private(46) into FieldDeclaration(59) at 0", "Insert Modifier: static(47) into FieldDeclaration(59) at 1", "Insert Modifier: final(48) into FieldDeclaration(59) at 2", "Insert SimpleType: Logger(50) into FieldDeclaration(59) at 3", "Insert VariableDeclarationFragment(58) into FieldDeclaration(59) at 4", "Insert Modifier: private(70) into MethodDeclaration(73) at 0", "Insert SimpleName: PostConstructLifecycleActions(71) into MethodDeclaration(73) at 1", "Insert Block(72) into MethodDeclaration(73) at 2", "Move MarkerAnnotation(272) into MethodDeclaration(99) at 0", "Insert Modifier: public(76) into MethodDeclaration(99) at 1", "Move ParameterizedType: List<LifecycleAction>(72) into MethodDeclaration(99) at 2", "Insert SimpleName: getActionsForType(82) into MethodDeclaration(99) at 3", "Move SingleVariableDeclaration(80) into MethodDeclaration(99) at 4", "Insert Block(98) into MethodDeclaration(99) at 5", "Insert Modifier: private(110) into TypeDeclaration: class(341) at 0", "Insert ParameterizedType: Supplier<List<LifecycleAction>>(122) into TypeDeclaration: class(341) at 4", "Insert FieldDeclaration(148) into TypeDeclaration: class(341) at 6", "Insert MethodDeclaration(167) into TypeDeclaration: class(341) at 7", "Insert MethodDeclaration(311) into TypeDeclaration: class(341) at 8", "Insert Modifier: private(342) into TypeDeclaration: class(445) at 0", "Insert Modifier: static(343) into TypeDeclaration: class(445) at 1", "Insert Modifier: final(344) into TypeDeclaration: class(445) at 2", "Insert SimpleName: PostConstructAction(345) into TypeDeclaration: class(445) at 3", "Move SimpleType: LifecycleAction(151) into TypeDeclaration: class(445) at 4", "Insert FieldDeclaration(354) into TypeDeclaration: class(445) at 5", "Insert FieldDeclaration(361) into TypeDeclaration: class(445) at 6", "Move MethodDeclaration(318) into TypeDeclaration: class(445) at 7", "Move MethodDeclaration(176) into TypeDeclaration: class(445) at 8", "Insert MethodDeclaration(444) into TypeDeclaration: class(445) at 9", "Update TextElement: Special AbstractLifecycleFeature to support @PostConstruct annotation(26) to Special LifecycleFeature to support @PostConstruct annotation processing.", "Update TextElement: processing. Note that this feature is implicit in LifecycleModule and(27) to Note that this feature is implicit in LifecycleModule and therefore does not", "Update TextElement: therefore does not need to be added using the LifecycleFeature multibinding.(28) to need to be added using the LifecycleFeature multibinding.", "Insert SimpleName: Logger(49) into SimpleType: Logger(50) at 0", "Insert SimpleName: LOG(51) into VariableDeclarationFragment(58) at 0", "Insert MethodInvocation(57) into VariableDeclarationFragment(58) at 1", "Insert ReturnStatement(97) into Block(98) at 0", "Insert SimpleType: Supplier(116) into ParameterizedType: Supplier<List<LifecycleAction>>(122) at 0", "Move ParameterizedType: List<LifecycleAction>(233) into ParameterizedType: Supplier<List<LifecycleAction>>(122) at 1", "Insert Modifier: private(136) into FieldDeclaration(148) at 0", "Insert ParameterizedType: LinkedList<LifecycleAction>(141) into FieldDeclaration(148) at 1", "Insert VariableDeclarationFragment(147) into FieldDeclaration(148) at 2", "Move MarkerAnnotation(178) into MethodDeclaration(167) at 0", "Move Modifier: public(67) into MethodDeclaration(167) at 1", "Insert PrimitiveType: boolean(152) into MethodDeclaration(167) at 2", "Update SimpleName: getMethodActions(73) to visit", "Move SimpleName: getMethodActions(73) into MethodDeclaration(167) at 3", "Move SingleVariableDeclaration(240) into MethodDeclaration(167) at 4", "Insert Block(166) into MethodDeclaration(167) at 5", "Move MarkerAnnotation(66) into MethodDeclaration(311) at 0", "Insert Modifier: public(170) into MethodDeclaration(311) at 1", "Insert PrimitiveType: boolean(171) into MethodDeclaration(311) at 2", "Insert SimpleName: visit(172) into MethodDeclaration(311) at 3", "Move SingleVariableDeclaration(85) into MethodDeclaration(311) at 4", "Insert Block(310) into MethodDeclaration(311) at 5", "Insert PrimitiveType: boolean(315) into MethodDeclaration(324) at 2", "Update SimpleName: getFieldActions(234) to visit", "Move MarkerAnnotation(284) into MethodDeclaration(340) at 0", "Move ParameterizedType: List<LifecycleAction>(290) into MethodDeclaration(340) at 3", "Update SimpleName: accept(255) to get", "Insert Modifier: private(348) into FieldDeclaration(354) at 0", "Insert Modifier: final(349) into FieldDeclaration(354) at 1", "Insert SimpleType: Method(351) into FieldDeclaration(354) at 2", "Insert VariableDeclarationFragment(353) into FieldDeclaration(354) at 3", "Insert Modifier: private(355) into FieldDeclaration(361) at 0", "Insert Modifier: final(356) into FieldDeclaration(361) at 1", "Move SimpleType: String(181) into FieldDeclaration(361) at 2", "Insert VariableDeclarationFragment(360) into FieldDeclaration(361) at 3", "Update Modifier: public(285) to private", "Update SimpleName: getActionsForType(291) to PostConstructAction", "Move MarkerAnnotation(252) into MethodDeclaration(444) at 0", "Insert Modifier: public(437) into MethodDeclaration(444) at 1", "Insert SimpleType: String(439) into MethodDeclaration(444) at 2", "Insert SimpleName: toString(440) into MethodDeclaration(444) at 3", "Insert Block(443) into MethodDeclaration(444) at 4", "Insert SimpleName: LoggerFactory(52) into MethodInvocation(57) at 0", "Insert SimpleName: getLogger(53) into MethodInvocation(57) at 1", "Insert TypeLiteral(56) into MethodInvocation(57) at 2", "Insert MethodInvocation(96) into ReturnStatement(97) at 0", "Insert SimpleName: Supplier(115) into SimpleType: Supplier(116) at 0", "Insert SimpleType: LinkedList(138) into ParameterizedType: LinkedList<LifecycleAction>(141) at 0", "Move SimpleType: LifecycleAction(154) into ParameterizedType: LinkedList<LifecycleAction>(141) at 1", "Insert SimpleName: typeActions(142) into VariableDeclarationFragment(147) at 0", "Insert ClassInstanceCreation(146) into VariableDeclarationFragment(147) at 1", "Insert Modifier: final(154) into SingleVariableDeclaration(160) at 0", "Update SimpleName: type(239) to clazz", "Insert ReturnStatement(165) into Block(166) at 0", "Move VariableDeclarationStatement(92) into Block(310) at 0", "Insert IfStatement(307) into Block(310) at 1", "Move ReturnStatement(223) into Block(310) at 2", "Update SimpleName: TypeVisitor(274) to Method", "Move SimpleName: TypeVisitor(274) into SimpleType: Method(351) at 0", "Insert SimpleName: method(352) into VariableDeclarationFragment(353) at 0", "Insert SimpleName: description(359) into VariableDeclarationFragment(360) at 0", "Insert SimpleType: Method(365) into SingleVariableDeclaration(367) at 0", "Update SimpleName: type(297) to method", "Insert ExpressionStatement(373) into Block(405) at 0", "Insert ExpressionStatement(404) into Block(405) at 1", "Insert ExpressionStatement(427) into Block(433) at 0", "Insert SimpleName: String(438) into SimpleType: String(439) at 0", "Insert ReturnStatement(442) into Block(443) at 0", "Insert SimpleType: PostConstructLifecycleActions(55) into TypeLiteral(56) at 0", "Insert SimpleName: TypeInspector(90) into MethodInvocation(96) at 0", "Insert SimpleName: accept(91) into MethodInvocation(96) at 1", "Insert SimpleName: type(92) into MethodInvocation(96) at 2", "Move ClassInstanceCreation(279) into MethodInvocation(96) at 3", "Insert SimpleName: LinkedList(137) into SimpleType: LinkedList(138) at 0", "Insert ParameterizedType: LinkedList<>(145) into ClassInstanceCreation(146) at 0", "Insert PrefixExpression: !(164) into ReturnStatement(165) at 0", "Insert MethodInvocation(190) into IfStatement(307) at 0", "Move Block(218) into IfStatement(307) at 1", "Insert BooleanLiteral: true(308) into ReturnStatement(309) at 0", "Insert BooleanLiteral: true(321) into ReturnStatement(322) at 0", "Insert MethodInvocation(337) into ReturnStatement(338) at 0", "Update SimpleName: Class(293) to Method", "Move SimpleName: Class(293) into SimpleType: Method(365) at 0", "Insert Assignment: =(372) into ExpressionStatement(373) at 0", "Insert Assignment: =(403) into ExpressionStatement(404) at 0", "Insert MethodInvocation(426) into ExpressionStatement(427) at 0", "Insert SimpleName: description(441) into ReturnStatement(442) at 0", "Insert SimpleName: PostConstructLifecycleActions(54) into SimpleType: PostConstructLifecycleActions(55) at 0", "Insert SimpleType: LinkedList(144) into ParameterizedType: LinkedList<>(145) at 0", "Move MethodInvocation(101) into PrefixExpression: !(164) at 0", "Update SimpleName: equals(110) to method", "Move SimpleName: equals(110) into MethodInvocation(190) at 0", "Insert SimpleName: isAnnotationPresent(186) into MethodInvocation(190) at 1", "Move TypeLiteral(128) into MethodInvocation(190) at 2", "Insert VariableDeclarationStatement(198) into Block(306) at 0", "Insert SimpleName: Collections(334) into MethodInvocation(337) at 0", "Insert SimpleName: unmodifiableList(335) into MethodInvocation(337) at 1", "Insert SimpleName: typeActions(336) into MethodInvocation(337) at 2", "Insert FieldAccess(370) into Assignment: =(372) at 0", "Insert SimpleName: method(371) into Assignment: =(372) at 1", "Insert FieldAccess(376) into Assignment: =(403) at 0", "Insert MethodInvocation(402) into Assignment: =(403) at 1", "Insert SimpleName: LOG(422) into MethodInvocation(426) at 0", "Insert SimpleName: info(423) into MethodInvocation(426) at 1", "Insert StringLiteral: \"invoking lifecycle action {}\"(424) into MethodInvocation(426) at 2", "Insert SimpleName: description(425) into MethodInvocation(426) at 3", "Insert SimpleName: LinkedList(143) into SimpleType: LinkedList(144) at 0", "Update SimpleName: Modifier(98) to clazz", "Update SimpleName: isAbstract(99) to isInterface", "Insert SimpleType: String(192) into VariableDeclarationStatement(198) at 0", "Insert VariableDeclarationFragment(197) into VariableDeclarationStatement(198) at 1", "Move MethodInvocation(96) into IfStatement(305) at 0", "Insert Block(214) into IfStatement(305) at 1", "Insert IfStatement(304) into IfStatement(305) at 2", "Insert ThisExpression(368) into FieldAccess(370) at 0", "Insert SimpleName: method(369) into FieldAccess(370) at 1", "Insert ThisExpression(374) into FieldAccess(376) at 0", "Insert SimpleName: description(375) into FieldAccess(376) at 1", "Insert MethodInvocation(400) into MethodInvocation(402) at 0", "Insert SimpleName: toString(401) into MethodInvocation(402) at 1", "Insert SimpleName: String(191) into SimpleType: String(192) at 0", "Insert SimpleName: methodName(193) into VariableDeclarationFragment(197) at 0", "Move MethodInvocation(146) into VariableDeclarationFragment(197) at 1", "Insert ExpressionStatement(213) into Block(214) at 0", "Update InfixExpression: ==(107) to >", "Move InfixExpression: ==(107) into IfStatement(304) at 0", "Insert Block(234) into IfStatement(304) at 1", "Insert IfStatement(303) into IfStatement(304) at 2", "Insert MethodInvocation(397) into MethodInvocation(400) at 0", "Update SimpleName: typeActions(312) to append", "Move SimpleName: typeActions(312) into MethodInvocation(400) at 1", "Insert StringLiteral: \"]\"(399) into MethodInvocation(400) at 2", "Insert MethodInvocation(212) into ExpressionStatement(213) at 0", "Insert ExpressionStatement(233) into Block(234) at 0", "Insert InfixExpression: !=(239) into IfStatement(303) at 0", "Insert Block(256) into IfStatement(303) at 1", "Insert Block(302) into IfStatement(303) at 2", "Insert MethodInvocation(392) into MethodInvocation(397) at 0", "Update SimpleName: reverse(311) to append", "Move SimpleName: reverse(311) into MethodInvocation(397) at 1", "Move MethodInvocation(200) into MethodInvocation(397) at 2", "Update SimpleName: visitContext(116) to LOG", "Move SimpleName: visitContext(116) into MethodInvocation(212) at 0", "Update SimpleName: contains(117) to info", "Move SimpleName: contains(117) into MethodInvocation(212) at 1", "Insert StringLiteral: \"invalid static @PostConstruct method {}.{}()\"(205) into MethodInvocation(212) at 2", "Move MethodInvocation(120) into MethodInvocation(212) at 3", "Insert SimpleName: methodName(211) into MethodInvocation(212) at 4", "Insert MethodInvocation(232) into ExpressionStatement(233) at 0", "Insert QualifiedName: Void.TYPE(235) into InfixExpression: !=(239) at 0", "Move MethodInvocation(113) into InfixExpression: !=(239) at 1", "Insert ExpressionStatement(255) into Block(256) at 0", "Insert IfStatement(301) into Block(302) at 0", "Insert MethodInvocation(389) into MethodInvocation(392) at 0", "Update SimpleName: Collections(310) to append", "Move SimpleName: Collections(310) into MethodInvocation(392) at 1", "Insert StringLiteral: \"#\"(391) into MethodInvocation(392) at 2", "Insert MethodInvocation(208) into MethodInvocation(210) at 0", "Insert SimpleName: LOG(220) into MethodInvocation(232) at 0", "Insert SimpleName: info(221) into MethodInvocation(232) at 1", "Insert StringLiteral: \"invalid @PostConstruct method {}.{}() with {} parameters\"(222) into MethodInvocation(232) at 2", "Insert MethodInvocation(227) into MethodInvocation(232) at 3", "Insert SimpleName: methodName(228) into MethodInvocation(232) at 4", "Insert MethodInvocation(231) into MethodInvocation(232) at 5", "Insert MethodInvocation(254) into ExpressionStatement(255) at 0", "Insert PrefixExpression: !(261) into IfStatement(301) at 0", "Insert Block(300) into IfStatement(301) at 1", "Move MethodInvocation(188) into MethodInvocation(389) at 0", "Insert SimpleName: append(383) into MethodInvocation(389) at 1", "Insert MethodInvocation(388) into MethodInvocation(389) at 2", "Move SimpleName: method(118) into MethodInvocation(208) at 0", "Insert SimpleName: getDeclaringClass(207) into MethodInvocation(208) at 1", "Insert MethodInvocation(225) into MethodInvocation(227) at 0", "Update SimpleName: getAnnotation(125) to getName", "Move SimpleName: getAnnotation(125) into MethodInvocation(227) at 1", "Update SimpleName: visitContext(142) to method", "Move SimpleName: visitContext(142) into MethodInvocation(231) at 0", "Update SimpleName: add(143) to getParameterCount", "Move SimpleName: add(143) into MethodInvocation(231) at 1", "Update SimpleName: Collections(149) to LOG", "Move SimpleName: Collections(149) into MethodInvocation(254) at 0", "Update SimpleName: singletonList(152) to info", "Move SimpleName: singletonList(152) into MethodInvocation(254) at 1", "Insert StringLiteral: \"invalid @PostConstruct method {}.{}() with return type {}\"(242) into MethodInvocation(254) at 2", "Insert MethodInvocation(247) into MethodInvocation(254) at 3", "Insert SimpleName: methodName(248) into MethodInvocation(254) at 4", "Move MethodInvocation(193) into MethodInvocation(254) at 5", "Insert MethodInvocation(260) into PrefixExpression: !(261) at 0", "Move IfStatement(141) into Block(300) at 0", "Insert VariableDeclarationStatement(281) into Block(300) at 1", "Insert ExpressionStatement(287) into Block(300) at 2", "Insert ExpressionStatement(294) into Block(300) at 3", "Insert ExpressionStatement(299) into Block(300) at 4", "Insert MethodInvocation(386) into MethodInvocation(388) at 0", "Insert SimpleName: getName(387) into MethodInvocation(388) at 1", "Move SimpleName: method(124) into MethodInvocation(225) at 0", "Insert SimpleName: getDeclaringClass(224) into MethodInvocation(225) at 1", "Insert MethodInvocation(245) into MethodInvocation(247) at 0", "Insert SimpleName: getName(246) into MethodInvocation(247) at 1", "Insert MethodInvocation(251) into MethodInvocation(253) at 0", "Move SimpleName: getName(191) into MethodInvocation(253) at 1", "Insert SimpleName: visitContext(257) into MethodInvocation(260) at 0", "Insert SimpleName: contains(258) into MethodInvocation(260) at 1", "Insert SimpleName: methodName(259) into MethodInvocation(260) at 2", "Insert SimpleType: PostConstructAction(274) into VariableDeclarationStatement(281) at 0", "Insert VariableDeclarationFragment(280) into VariableDeclarationStatement(281) at 1", "Insert MethodInvocation(286) into ExpressionStatement(287) at 0", "Insert MethodInvocation(293) into ExpressionStatement(294) at 0", "Insert MethodInvocation(298) into ExpressionStatement(299) at 0", "Insert SimpleName: method(384) into MethodInvocation(386) at 0", "Insert SimpleName: getDeclaringClass(385) into MethodInvocation(386) at 1", "Insert SimpleName: method(243) into MethodInvocation(245) at 0", "Insert SimpleName: getDeclaringClass(244) into MethodInvocation(245) at 1", "Update SimpleName: append(189) to method", "Move SimpleName: append(189) into MethodInvocation(251) at 0", "Update SimpleName: type(190) to getReturnType", "Move SimpleName: type(190) into MethodInvocation(251) at 1", "Insert SimpleName: PostConstructAction(273) into SimpleType: PostConstructAction(274) at 0", "Insert SimpleName: postConstructAction(275) into VariableDeclarationFragment(280) at 0", "Insert ClassInstanceCreation(279) into VariableDeclarationFragment(280) at 1", "Insert SimpleName: LOG(282) into MethodInvocation(286) at 0", "Insert SimpleName: debug(283) into MethodInvocation(286) at 1", "Update StringLiteral: \"#\"(195) to \"adding lifecycle action for {}\"", "Move StringLiteral: \"#\"(195) into MethodInvocation(286) at 2", "Insert QualifiedName: postConstructAction.description(285) into MethodInvocation(286) at 3", "Insert FieldAccess(290) into MethodInvocation(293) at 0", "Update SimpleName: append(197) to addFirst", "Move SimpleName: append(197) into MethodInvocation(293) at 1", "Insert SimpleName: postConstructAction(292) into MethodInvocation(293) at 2", "Insert SimpleName: visitContext(295) into MethodInvocation(298) at 0", "Update SimpleName: append(202) to add", "Move SimpleName: append(202) into MethodInvocation(298) at 1", "Update SimpleName: toString(205) to methodName", "Move SimpleName: toString(205) into MethodInvocation(298) at 2", "Insert SimpleType: PostConstructAction(277) into ClassInstanceCreation(279) at 0", "Insert SimpleName: method(278) into ClassInstanceCreation(279) at 1", "Insert ThisExpression(288) into FieldAccess(290) at 0", "Insert SimpleName: typeActions(289) into FieldAccess(290) at 1", "Insert SimpleName: PostConstructAction(276) into SimpleType: PostConstructAction(277) at 0", "Delete Modifier: protected(273)", "Delete SimpleType: TypeVisitor(275)", "Delete SimpleName: newTypeVisitor(276)", "Delete ReturnStatement(280)", "Delete Block(281)", "Delete MethodDeclaration(282)", "Delete SimpleName: modifiers(100)", "Delete MethodInvocation(192)", "Delete MethodInvocation(121)", "Delete PrefixExpression: !(122)", "Delete NullLiteral(123)", "Delete MethodInvocation(129)", "Delete InfixExpression: !=(130)", "Delete MethodInvocation(147)", "Delete ExpressionStatement(148)", "Delete Modifier: public(179)", "Delete SimpleName: toString(182)", "Delete SimpleName: append(194)", "Delete MethodInvocation(196)", "Delete MethodInvocation(201)", "Delete StringLiteral: \"]\"(203)", "Delete MethodInvocation(204)", "Delete MethodInvocation(206)", "Delete ReturnStatement(207)", "Delete Block(208)", "Delete MethodDeclaration(209)", "Delete AnonymousClassDeclaration(210)", "Delete ClassInstanceCreation(211)", "Delete MethodInvocation(212)", "Delete ReturnStatement(213)", "Delete Block(214)", "Delete IfStatement(215)", "Delete Block(216)", "Delete SimpleName: Collections(220)", "Delete SimpleName: emptyList(221)", "Delete MethodInvocation(222)", "Delete PrefixExpression: !(97)", "Delete PrefixExpression: !(102)", "Delete InfixExpression: &&(108)", "Delete QualifiedName: Void.TYPE(109)", "Delete MethodInvocation(114)", "Delete InfixExpression: &&(115)", "Delete IfStatement(219)", "Delete Block(224)", "Delete MethodDeclaration(225)", "Delete SimpleName: Collections(245)", "Delete SimpleName: emptyList(246)", "Delete MethodInvocation(247)", "Delete PrimitiveType: boolean(254)", "Delete SimpleName: ElementType(256)", "Delete SimpleType: ElementType(257)", "Delete SimpleName: elementType(258)", "Delete SingleVariableDeclaration(259)", "Delete SimpleName: elementType(260)", "Delete SimpleName: METHOD(261)", "Delete InfixExpression: ==(262)", "Delete SimpleName: elementType(263)", "Delete SimpleName: SUPERCLASS(264)", "Delete InfixExpression: ==(265)", "Delete InfixExpression: ||(266)", "Delete Modifier: final(292)", "Delete SimpleType: Class(294)", "Delete WildcardType: ?(295)", "Delete ParameterizedType: Class<?>(296)", "Delete SimpleName: List(299)", "Delete SimpleType: List(300)", "Delete SimpleName: LifecycleAction(301)", "Delete SimpleType: LifecycleAction(302)", "Delete ParameterizedType: List<LifecycleAction>(303)", "Delete SimpleName: typeActions(304)", "Delete SimpleName: getActionsForType(305)", "Delete SimpleName: type(306)", "Delete SuperMethodInvocation(307)", "Delete VariableDeclarationFragment(308)", "Delete VariableDeclarationStatement(309)", "Delete MethodInvocation(313)", "Delete ExpressionStatement(314)", "Delete SimpleName: typeActions(315)", "Delete ReturnStatement(316)"]}}, {"PreDestroyLifecycleActions_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 12"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: org.slf4j.Logger to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 12", "operations": ["INS ImportDeclaration to CompilationUnit at 12", "INS QualifiedName: org.slf4j.LoggerFactory to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS ImportDeclaration to CompilationUnit at 13", "INS QualifiedName: com.google.common.base.Supplier to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: com.netflix.governator.LifecycleFeature to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "UPDATE from com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType to com.netflix.governator.internal.TypeInspector.TypeVisitor", "operations": ["UPD QualifiedName: com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType from com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType to com.netflix.governator.internal.TypeInspector.TypeVisitor"]}, {"root": "UPDATE from AbstractLifecycleFeature to LifecycleFeature", "operations": ["UPD SimpleType: AbstractLifecycleFeature from AbstractLifecycleFeature to LifecycleFeature", "UPD SimpleName: AbstractLifecycleFeature from AbstractLifecycleFeature to LifecycleFeature"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 5", "operations": ["INS VariableDeclarationFragment to FieldDeclaration at 4", "INS TypeLiteral to MethodInvocation at 2", "INS Modifier: final to FieldDeclaration at 2", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS SimpleType: Logger to FieldDeclaration at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Logger to SimpleType: Logger at 0", "INS SimpleName: getLogger to MethodInvocation at 1", "INS SimpleName: LOG to VariableDeclarationFragment at 0", "INS SimpleType: PreDestroyLifecycleActions to TypeLiteral at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 7", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 7", "INS Block to MethodDeclaration at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: PreDestroyLifecycleActions to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 12", "operations": ["INS SimpleName: method to MethodInvocation at 0", "INS SimpleName: closeableAction to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS SimpleName: AutoCloseableLifecycleAction to SimpleType: AutoCloseableLifecycleAction at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 12", "INS ReturnStatement to Block at 1", "INS PrefixExpression: ! to VariableDeclarationFragment at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS IfStatement to Block at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: continueVisit to Assignment: = at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: get to MethodDeclaration at 3", "INS ExpressionStatement to Block at 3", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 2", "INS SimpleType: Supplier to ParameterizedType: Supplier<List<LifecycleAction>> at 0", "INS MethodInvocation to ReturnStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS StringLiteral: \"invalid @PreDestroy method {}.{}() with return type {}\" to MethodInvocation at 2", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS SimpleName: methodName to VariableDeclarationFragment at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: Void.TYPE to InfixExpression: != at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: typeActions to MethodInvocation at 2", "INS IfStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"adding lifecycle action for {}\" to MethodInvocation at 2", "INS ReturnStatement to Block at 2", "INS MethodInvocation to ClassInstanceCreation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: destroyAction to MethodInvocation at 2", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: PreDestroyVisitor to TypeDeclaration: class at 2", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: methodName to MethodInvocation at 4", "INS SimpleName: LOG to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS Modifier: private to TypeDeclaration: class at 0", "INS SimpleName: continueVisit to ReturnStatement at 0", "INS SimpleName: method to ClassInstanceCreation at 1", "INS SimpleName: AutoCloseableLifecycleAction to SimpleType: AutoCloseableLifecycleAction at 0", "INS SimpleName: typeActions to MethodInvocation at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleName: method to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS BooleanLiteral: true to ReturnStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS SimpleType: AutoCloseableLifecycleAction to ClassInstanceCreation at 0", "INS SimpleName: methodName to MethodInvocation at 4", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"invalid @PreDestroy method {}.{}() with {} parameters\" to MethodInvocation at 2", "INS IfStatement to IfStatement at 2", "INS SimpleName: debug to MethodInvocation at 1", "INS SimpleType: DestroyLifecycleAction to ClassInstanceCreation at 0", "INS Modifier: private to FieldDeclaration at 0", "INS StringLiteral: \"adding lifecycle action for {}\" to MethodInvocation at 2", "INS InfixExpression: && to IfStatement at 0", "INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS IfStatement to IfStatement at 2", "INS IfStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 3", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 3", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: destroyAction to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 1", "INS Modifier: static to TypeDeclaration: class at 1", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleName: visit to MethodDeclaration at 3", "INS SimpleName: typeActions to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: false to Assignment: = at 1", "INS Block to IfStatement at 1", "INS StringLiteral: \"invalid static @PreDestroy method {}.{}()\" to MethodInvocation at 2", "INS SimpleName: continueVisit to VariableDeclarationFragment at 0", "INS SimpleName: method to MethodInvocation at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: DestroyLifecycleAction to SimpleType: DestroyLifecycleAction at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: method to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: destroyAction.description to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS BooleanLiteral: true to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getParameterCount to MethodInvocation at 1", "INS SimpleName: Supplier to SimpleType: Supplier at 0", "INS SimpleName: DestroyLifecycleAction to SimpleType: DestroyLifecycleAction at 0", "INS QualifiedName: closeableAction.description to MethodInvocation at 3", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS SimpleName: methodName to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 5", "INS SimpleType: AutoCloseable to TypeLiteral at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS TypeLiteral to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS ParameterizedType: Supplier<List<LifecycleAction>> to TypeDeclaration: class at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: info to MethodInvocation at 1", "INS SimpleType: DestroyLifecycleAction to VariableDeclarationStatement at 0", "INS Block to IfStatement at 1", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: AutoCloseableLifecycleAction to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleName: AutoCloseable to SimpleType: AutoCloseable at 0", "INS Block to MethodDeclaration at 5", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS Block to IfStatement at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: getReturnType to MethodInvocation at 1", "INS IfStatement to Block at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: continueVisit to InfixExpression: && at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 13", "operations": ["INS TypeDeclaration: class to TypeDeclaration: class at 13", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS Modifier: final to FieldDeclaration at 1", "INS ReturnStatement to Block at 0", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS Modifier: final to TypeDeclaration: class at 2", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: Method to SimpleType: Method at 0", "INS SimpleName: method to VariableDeclarationFragment at 0", "INS SimpleName: description to ReturnStatement at 0", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleName: description to VariableDeclarationFragment at 0", "INS Modifier: final to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS SimpleName: method to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS Modifier: private to TypeDeclaration: class at 0", "INS SimpleName: DestroyLifecycleAction to TypeDeclaration: class at 3", "INS FieldDeclaration to TypeDeclaration: class at 6", "INS Modifier: private to FieldDeclaration at 0", "INS SimpleType: Method to FieldDeclaration at 2", "INS SimpleName: toString to MethodDeclaration at 3", "INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Modifier: static to TypeDeclaration: class at 1", "INS SimpleType: Method to SingleVariableDeclaration at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 14", "operations": ["INS Modifier: final to TypeDeclaration: class at 2", "INS SimpleType: String to FieldDeclaration at 2", "INS Modifier: private to TypeDeclaration: class at 0", "INS Modifier: static to TypeDeclaration: class at 1", "INS SimpleName: description to VariableDeclarationFragment at 0", "INS SimpleName: AutoCloseableLifecycleAction to TypeDeclaration: class at 3", "INS VariableDeclarationFragment to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 5", "INS Modifier: final to FieldDeclaration at 1", "INS Modifier: private to FieldDeclaration at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 14"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: call to MethodDeclaration at 3", "MOV SimpleType: Exception to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Block to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 1", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV ParameterizedType: List<LifecycleAction> to MethodDeclaration at 2", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from call to getActionsForType", "operations": ["UPD SimpleName: call from call to getActionsForType"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV SimpleType: TypeVisitor to TypeDeclaration: class at 3", "MOV MethodDeclaration to TypeDeclaration: class at 6"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV SimpleType: LifecycleAction to TypeDeclaration: class at 4", "MOV SimpleName: singletonList to MethodInvocation at 1", "MOV SimpleName: Collections to MethodInvocation at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV SimpleType: LifecycleAction to TypeDeclaration: class at 4"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "UPDATE from Special AbstractLifecycleFeature to support @PreDestroy annotation processing to Special LifecycleFeature to support @PreDestroy annotation processing and", "operations": ["UPD TextElement: Special AbstractLifecycleFeature to support @PreDestroy annotation processing from Special AbstractLifecycleFeature to support @PreDestroy annotation processing to Special LifecycleFeature to support @PreDestroy annotation processing and"]}, {"root": "UPDATE from and java.io.AutoCloseable detection. Note that this feature is implicit in to java.lang.AutoCloseable detection. Note that this feature is implicit in", "operations": ["UPD TextElement: and java.io.AutoCloseable detection. Note that this feature is implicit in from and java.io.AutoCloseable detection. Note that this feature is implicit in to java.lang.AutoCloseable detection. Note that this feature is implicit in"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS SimpleName: accept to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: TypeInspector to MethodInvocation at 0"]}, {"root": "MOVE from ParameterizedType: Supplier<List<LifecycleAction>>", "operations": ["MOV ParameterizedType: List<LifecycleAction> to ParameterizedType: Supplier<List<LifecycleAction>> at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleName: getMethodActions to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1", "MOV ParameterizedType: List<LifecycleAction> to FieldDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1", "MOV SimpleType: String to MethodDeclaration at 2", "MOV SimpleName: toString to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from getMethodActions to visit", "operations": ["UPD SimpleName: getMethodActions from getMethodActions to visit", "UPD SimpleName: toString from toString to visit"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV ParameterizedType: List<LifecycleAction> to MethodDeclaration at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: String to FieldDeclaration at 2", "MOV SimpleName: toString to MethodDeclaration at 1", "MOV Block to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV Modifier: public to MethodDeclaration at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private", "UPD Modifier: public from public to private"]}, {"root": "UPDATE from toString to DestroyLifecycleAction", "operations": ["UPD SimpleName: toString from toString to DestroyLifecycleAction"]}, {"root": "UPDATE from getFieldActions to AutoCloseableLifecycleAction", "operations": ["UPD SimpleName: getFieldActions from getFieldActions to AutoCloseableLifecycleAction"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 2", "operations": ["INS SimpleName: clazz to SingleVariableDeclaration at 1", "INS SimpleType: Class to ParameterizedType: Class<? extends AutoCloseable> at 0", "INS WildcardType: ? extends AutoCloseable to ParameterizedType: Class<? extends AutoCloseable> at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS ParameterizedType: Class<? extends AutoCloseable> to SingleVariableDeclaration at 0", "INS SimpleName: Class to SimpleType: Class at 0"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void"]}, {"root": "UPDATE from accept to call", "operations": ["UPD SimpleName: accept from accept to call"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: obj to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: close to MethodInvocation at 1", "INS StringLiteral: \"invoking lifecycle action {}\" to MethodInvocation at 2", "INS SimpleType: AutoCloseable to TypeLiteral at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: info to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: cast to MethodInvocation at 1", "INS SimpleName: description to MethodInvocation at 3", "INS SimpleName: AutoCloseable to SimpleType: AutoCloseable at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 6", "INS TypeLiteral to MethodInvocation at 0"]}, {"root": "UPDATE from protected to public", "operations": ["UPD Modifier: protected from protected to public"]}, {"root": "UPDATE from TypeVisitor to String", "operations": ["UPD SimpleType: TypeVisitor from TypeVisitor to String", "UPD SimpleName: Class from Class to String", "UPD SimpleName: TypeVisitor from TypeVisitor to String", "UPD SimpleName: LifecycleAction from LifecycleAction to String"]}, {"root": "UPDATE from newTypeVisitor to toString", "operations": ["UPD SimpleName: newTypeVisitor from newTypeVisitor to toString"]}, {"root": "UPDATE from type to LoggerFactory", "operations": ["UPD SimpleName: type from type to LoggerFactory"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV TypeLiteral to MethodInvocation at 0", "MOV SimpleName: type to MethodInvocation at 0"]}, {"root": "INS Modifier: final to SingleVariableDeclaration at 0", "operations": ["INS Modifier: final to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from Collections to clazz", "operations": ["UPD SimpleName: Collections from Collections to clazz", "UPD SimpleName: type from type to clazz", "UPD SimpleName: append from append to clazz", "UPD SimpleName: Collections from Collections to clazz", "UPD SimpleName: type from type to clazz"]}, {"root": "UPDATE from LifecycleAction to Method", "operations": ["UPD SimpleName: LifecycleAction from LifecycleAction to Method"]}, {"root": "MOVE from SimpleType: Method", "operations": ["MOV SimpleName: LifecycleAction to SimpleType: Method at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: method to Assignment: = at 1", "INS SimpleName: method to FieldAccess at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: description to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS ThisExpression to FieldAccess at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: description to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: info to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"invoking lifecycle action {}\" to MethodInvocation at 2"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: LifecycleAction to SimpleType: String at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS StringLiteral: \"]\" to MethodInvocation at 2", "INS SimpleName: toString to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: description to FieldAccess at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: append to MethodInvocation at 1", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 0", "INS StringLiteral: \"close\" to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS StringLiteral: \"#\" to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from close to type", "operations": ["UPD SimpleName: close from close to type"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: close to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "INS SimpleName: description to ReturnStatement at 0", "operations": ["INS SimpleName: description to ReturnStatement at 0"]}, {"root": "UPDATE from LifecycleAction to PreDestroyLifecycleActions", "operations": ["UPD SimpleName: LifecycleAction from LifecycleAction to PreDestroyLifecycleActions"]}, {"root": "MOVE from SimpleType: PreDestroyLifecycleActions", "operations": ["MOV SimpleName: LifecycleAction to SimpleType: PreDestroyLifecycleActions at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from singletonList to unmodifiableList", "operations": ["UPD SimpleName: singletonList from singletonList to unmodifiableList"]}, {"root": "MOVE from WildcardType: ? extends AutoCloseable", "operations": ["MOV SimpleType: AutoCloseable to WildcardType: ? extends AutoCloseable at 0"]}, {"root": "UPDATE from append to isAssignableFrom", "operations": ["UPD SimpleName: append from append to isAssignableFrom"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: append to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: closeableAction to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: typeActions to MethodInvocation at 0"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0", "MOV SimpleName: toString to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getName to MethodInvocation at 1", "MOV SimpleName: type to MethodInvocation at 0"]}, {"root": "UPDATE from getName to isInterface", "operations": ["UPD SimpleName: getName from getName to isInterface"]}, {"root": "MOVE from SimpleType: String", "operations": ["MOV SimpleName: Class to SimpleType: String at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from == to >", "operations": ["UPD InfixExpression: == from == to >"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Collections to MethodInvocation at 0", "MOV SimpleName: singletonList to MethodInvocation at 1"]}, {"root": "UPDATE from singletonList to asSubclass", "operations": ["UPD SimpleName: singletonList from singletonList to asSubclass"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 1", "MOV MethodInvocation to InfixExpression: != at 1"]}, {"root": "UPDATE from Modifier to LOG", "operations": ["UPD SimpleName: Modifier from Modifier to LOG"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: modifiers to MethodInvocation at 0", "MOV SimpleName: isAbstract to MethodInvocation at 1", "MOV SimpleName: Modifier to MethodInvocation at 0"]}, {"root": "UPDATE from isAbstract to info", "operations": ["UPD SimpleName: isAbstract from isAbstract to info"]}, {"root": "MOVE from IfStatement", "operations": ["MOV PrefixExpression: ! to IfStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 0", "MOV ExpressionStatement to Block at 4"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getDeclaringClass to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: Collections to MethodInvocation at 0", "MOV SimpleName: emptyList to MethodInvocation at 1"]}, {"root": "UPDATE from emptyList to getName", "operations": ["UPD SimpleName: emptyList from emptyList to getName"]}, {"root": "UPDATE from type to method", "operations": ["UPD SimpleName: type from type to method", "UPD SimpleName: modifiers from modifiers to method"]}, {"root": "INS SimpleName: methodName to MethodInvocation at 2", "operations": ["INS SimpleName: methodName to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: type to MethodInvocation at 0"]}, {"root": "UPDATE from equals to getDeclaringClass", "operations": ["UPD SimpleName: equals from equals to getDeclaringClass"]}, {"root": "UPDATE from method to methodName", "operations": ["UPD SimpleName: method from method to methodName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: method to MethodInvocation at 2"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL CastExpression", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL SimpleName: obj", "DEL MethodInvocation"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: toString", "DEL Modifier: final", "DEL SimpleName: getActionsForType", "DEL SimpleType: LifecycleAction", "DEL ReturnStatement", "DEL StringLiteral: \"]\"", "DEL Block", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: isAssignableFrom", "DEL SimpleName: closeableAction", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: closeableAction", "DEL MethodInvocation", "DEL SimpleName: typeActions", "DEL StringLiteral: \"close\"", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL AnonymousClassDeclaration", "DEL MethodInvocation", "DEL Block", "DEL StringLiteral: \"#\"", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ReturnStatement", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: typeActions", "DEL IfStatement", "DEL SimpleName: typeActions"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL NullLiteral", "DEL MethodDeclaration", "DEL PrefixExpression: !", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: LifecycleAction", "DEL SimpleType: Class", "DEL Block", "DEL ExpressionStatement", "DEL InfixExpression: &&", "DEL AnonymousClassDeclaration", "DEL QualifiedName: Void.TYPE", "DEL ReturnStatement", "DEL SimpleType: LifecycleAction", "DEL NullLiteral", "DEL ParameterizedType: Class<?>", "DEL SimpleName: PreDestroyVisitor", "DEL ConditionalExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: List", "DEL WildcardType: ?", "DEL SimpleName: Collections", "DEL SimpleType: LifecycleAction", "DEL Modifier: static", "DEL MethodDeclaration", "DEL SimpleType: List", "DEL IfStatement", "DEL Block", "DEL Block", "DEL SimpleName: LifecycleAction", "DEL ParameterizedType: List<LifecycleAction>", "DEL IfStatement", "DEL SimpleName: typeActions", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL PrefixExpression: !", "DEL SimpleName: type", "DEL SimpleName: typeActions", "DEL SimpleName: typeActions", "DEL TypeDeclaration: class", "DEL SimpleName: emptyList", "DEL InfixExpression: !=", "DEL Modifier: final", "DEL InfixExpression: &&", "DEL ClassInstanceCreation", "DEL SingleVariableDeclaration", "DEL SimpleName: typeActions"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: type", "DEL SuperMethodInvocation", "DEL Assignment: =", "DEL SimpleName: typeActions", "DEL SimpleName: getActionsForType"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getName", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleType: ElementType", "DEL SimpleName: elementType", "DEL SimpleName: ElementType", "DEL SingleVariableDeclaration"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: SUPERCLASS", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL SimpleName: elementType", "DEL InfixExpression: ==", "DEL SimpleName: elementType", "DEL ReturnStatement", "DEL SimpleName: METHOD", "DEL Block"]}]}}, {"PreDestroyLifecycleActions_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(582) at 12", "Insert ImportDeclaration(11) into CompilationUnit(582) at 5", "Insert ImportDeclaration(23) into CompilationUnit(582) at 11", "Insert ImportDeclaration(25) into CompilationUnit(582) at 12", "Insert ImportDeclaration(27) into CompilationUnit(582) at 13", "Insert ImportDeclaration(31) into CompilationUnit(582) at 15", "Insert QualifiedName: java.util.ArrayList(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: org.slf4j.Logger(22) into ImportDeclaration(23) at 0", "Insert QualifiedName: org.slf4j.LoggerFactory(24) into ImportDeclaration(25) at 0", "Insert QualifiedName: com.google.common.base.Supplier(26) into ImportDeclaration(27) at 0", "Insert QualifiedName: com.netflix.governator.LifecycleFeature(30) into ImportDeclaration(31) at 0", "Update QualifiedName: com.netflix.governator.internal.AbstractLifecycleFeature.TypeVisitor.ElementType(2) to com.netflix.governator.internal.TypeInspector.TypeVisitor", "Update SimpleType: AbstractLifecycleFeature(36) to LifecycleFeature", "Insert FieldDeclaration(60) into TypeDeclaration: class(581) at 5", "Insert MethodDeclaration(74) into TypeDeclaration: class(581) at 7", "Insert MethodDeclaration(100) into TypeDeclaration: class(581) at 8", "Insert TypeDeclaration: class(385) into TypeDeclaration: class(581) at 10", "Insert TypeDeclaration: class(489) into TypeDeclaration: class(581) at 11", "Insert TypeDeclaration: class(580) into TypeDeclaration: class(581) at 12", "Update SimpleName: AbstractLifecycleFeature(35) to LifecycleFeature", "Insert Modifier: private(47) into FieldDeclaration(60) at 0", "Insert Modifier: static(48) into FieldDeclaration(60) at 1", "Insert Modifier: final(49) into FieldDeclaration(60) at 2", "Insert SimpleType: Logger(51) into FieldDeclaration(60) at 3", "Insert VariableDeclarationFragment(59) into FieldDeclaration(60) at 4", "Insert Modifier: private(71) into MethodDeclaration(74) at 0", "Insert SimpleName: PreDestroyLifecycleActions(72) into MethodDeclaration(74) at 1", "Insert Block(73) into MethodDeclaration(74) at 2", "Move MarkerAnnotation(409) into MethodDeclaration(100) at 0", "Move Modifier: public(85) into MethodDeclaration(100) at 1", "Move ParameterizedType: List<LifecycleAction>(54) into MethodDeclaration(100) at 2", "Update SimpleName: call(87) to getActionsForType", "Move SimpleName: call(87) into MethodDeclaration(100) at 3", "Move SingleVariableDeclaration(62) into MethodDeclaration(100) at 4", "Move Block(102) into MethodDeclaration(100) at 5", "Insert Modifier: private(111) into TypeDeclaration: class(385) at 0", "Insert Modifier: static(112) into TypeDeclaration: class(385) at 1", "Insert SimpleName: PreDestroyVisitor(113) into TypeDeclaration: class(385) at 2", "Move SimpleType: TypeVisitor(162) into TypeDeclaration: class(385) at 3", "Insert ParameterizedType: Supplier<List<LifecycleAction>>(123) into TypeDeclaration: class(385) at 4", "Move FieldDeclaration(175) into TypeDeclaration: class(385) at 5", "Insert FieldDeclaration(149) into TypeDeclaration: class(385) at 6", "Insert MethodDeclaration(212) into TypeDeclaration: class(385) at 7", "Insert MethodDeclaration(355) into TypeDeclaration: class(385) at 8", "Insert MethodDeclaration(368) into TypeDeclaration: class(385) at 9", "Insert MethodDeclaration(384) into TypeDeclaration: class(385) at 10", "Insert Modifier: private(386) into TypeDeclaration: class(489) at 0", "Insert Modifier: static(387) into TypeDeclaration: class(489) at 1", "Insert Modifier: final(388) into TypeDeclaration: class(489) at 2", "Insert SimpleName: DestroyLifecycleAction(389) into TypeDeclaration: class(489) at 3", "Move SimpleType: LifecycleAction(270) into TypeDeclaration: class(489) at 4", "Insert FieldDeclaration(398) into TypeDeclaration: class(489) at 5", "Insert FieldDeclaration(405) into TypeDeclaration: class(489) at 6", "Insert MethodDeclaration(450) into TypeDeclaration: class(489) at 7", "Move MethodDeclaration(295) into TypeDeclaration: class(489) at 8", "Insert MethodDeclaration(488) into TypeDeclaration: class(489) at 9", "Insert Modifier: private(490) into TypeDeclaration: class(580) at 0", "Insert Modifier: static(491) into TypeDeclaration: class(580) at 1", "Insert Modifier: final(492) into TypeDeclaration: class(580) at 2", "Insert SimpleName: AutoCloseableLifecycleAction(493) into TypeDeclaration: class(580) at 3", "Move SimpleType: LifecycleAction(82) into TypeDeclaration: class(580) at 4", "Insert FieldDeclaration(502) into TypeDeclaration: class(580) at 5", "Move MethodDeclaration(377) into TypeDeclaration: class(580) at 6", "Move MethodDeclaration(396) into TypeDeclaration: class(580) at 7", "Move MethodDeclaration(419) into TypeDeclaration: class(580) at 8", "Update TextElement: Special AbstractLifecycleFeature to support @PreDestroy annotation processing(24) to Special LifecycleFeature to support @PreDestroy annotation processing and", "Update TextElement: and java.io.AutoCloseable detection. Note that this feature is implicit in(25) to java.lang.AutoCloseable detection. Note that this feature is implicit in", "Insert SimpleName: Logger(50) into SimpleType: Logger(51) at 0", "Insert SimpleName: LOG(52) into VariableDeclarationFragment(59) at 0", "Insert MethodInvocation(58) into VariableDeclarationFragment(59) at 1", "Insert ReturnStatement(98) into Block(99) at 0", "Insert SimpleType: Supplier(117) into ParameterizedType: Supplier<List<LifecycleAction>>(123) at 0", "Move ParameterizedType: List<LifecycleAction>(68) into ParameterizedType: Supplier<List<LifecycleAction>>(123) at 1", "Insert Modifier: private(137) into FieldDeclaration(149) at 0", "Move ParameterizedType: List<LifecycleAction>(183) into FieldDeclaration(149) at 1", "Insert VariableDeclarationFragment(148) into FieldDeclaration(149) at 2", "Move MarkerAnnotation(105) into MethodDeclaration(212) at 0", "Move Modifier: public(106) into MethodDeclaration(212) at 1", "Insert PrimitiveType: boolean(153) into MethodDeclaration(212) at 2", "Update SimpleName: toString(109) to visit", "Move SimpleName: toString(109) into MethodDeclaration(212) at 3", "Move SingleVariableDeclaration(367) into MethodDeclaration(212) at 4", "Insert Block(211) into MethodDeclaration(212) at 5", "Move MarkerAnnotation(177) into MethodDeclaration(355) at 0", "Move Modifier: public(178) into MethodDeclaration(355) at 1", "Insert PrimitiveType: boolean(216) into MethodDeclaration(355) at 2", "Update SimpleName: getMethodActions(184) to visit", "Move SimpleName: getMethodActions(184) into MethodDeclaration(355) at 3", "Move SingleVariableDeclaration(196) into MethodDeclaration(355) at 4", "Insert Block(354) into MethodDeclaration(355) at 5", "Move MarkerAnnotation(354) into MethodDeclaration(368) at 0", "Insert Modifier: public(358) into MethodDeclaration(368) at 1", "Insert PrimitiveType: boolean(359) into MethodDeclaration(368) at 2", "Insert SimpleName: visit(360) into MethodDeclaration(368) at 3", "Move SingleVariableDeclaration(371) into MethodDeclaration(368) at 4", "Insert Block(367) into MethodDeclaration(368) at 5", "Move MarkerAnnotation(379) into MethodDeclaration(384) at 0", "Insert Modifier: public(371) into MethodDeclaration(384) at 1", "Move ParameterizedType: List<LifecycleAction>(360) into MethodDeclaration(384) at 2", "Insert SimpleName: get(377) into MethodDeclaration(384) at 3", "Insert Block(383) into MethodDeclaration(384) at 4", "Insert Modifier: private(392) into FieldDeclaration(398) at 0", "Insert Modifier: final(393) into FieldDeclaration(398) at 1", "Insert SimpleType: Method(395) into FieldDeclaration(398) at 2", "Insert VariableDeclarationFragment(397) into FieldDeclaration(398) at 3", "Insert Modifier: private(399) into FieldDeclaration(405) at 0", "Insert Modifier: final(400) into FieldDeclaration(405) at 1", "Move SimpleType: String(300) into FieldDeclaration(405) at 2", "Insert VariableDeclarationFragment(404) into FieldDeclaration(405) at 3", "Update Modifier: public(298) to private", "Move Modifier: public(298) into MethodDeclaration(450) at 0", "Update SimpleName: toString(301) to DestroyLifecycleAction", "Move SimpleName: toString(301) into MethodDeclaration(450) at 1", "Insert SingleVariableDeclaration(411) into MethodDeclaration(450) at 2", "Move Block(327) into MethodDeclaration(450) at 3", "Move MarkerAnnotation(297) into MethodDeclaration(488) at 0", "Insert Modifier: public(481) into MethodDeclaration(488) at 1", "Move SimpleType: String(108) into MethodDeclaration(488) at 2", "Insert SimpleName: toString(484) into MethodDeclaration(488) at 3", "Insert Block(487) into MethodDeclaration(488) at 4", "Insert Modifier: private(496) into FieldDeclaration(502) at 0", "Insert Modifier: final(497) into FieldDeclaration(502) at 1", "Insert SimpleType: String(499) into FieldDeclaration(502) at 2", "Insert VariableDeclarationFragment(501) into FieldDeclaration(502) at 3", "Update Modifier: public(355) to private", "Update SimpleName: getFieldActions(361) to AutoCloseableLifecycleAction", "Insert SingleVariableDeclaration(512) into MethodDeclaration(541) at 2", "Move MarkerAnnotation(84) into MethodDeclaration(569) at 0", "Update PrimitiveType: boolean(381) to void", "Update SimpleName: accept(382) to call", "Move SingleVariableDeclaration(91) into MethodDeclaration(569) at 4", "Move SimpleType: Exception(93) into MethodDeclaration(569) at 5", "Insert Block(568) into MethodDeclaration(569) at 6", "Move MarkerAnnotation(48) into MethodDeclaration(579) at 0", "Update Modifier: protected(410) to public", "Update SimpleType: TypeVisitor(412) to String", "Update SimpleName: newTypeVisitor(413) to toString", "Update SimpleName: type(76) to LoggerFactory", "Move SimpleName: type(76) into MethodInvocation(58) at 0", "Insert SimpleName: getLogger(54) into MethodInvocation(58) at 1", "Insert TypeLiteral(57) into MethodInvocation(58) at 2", "Insert MethodInvocation(97) into ReturnStatement(98) at 0", "Insert SimpleName: Supplier(116) into SimpleType: Supplier(117) at 0", "Insert SimpleName: typeActions(143) into VariableDeclarationFragment(148) at 0", "Insert ClassInstanceCreation(147) into VariableDeclarationFragment(148) at 1", "Insert Modifier: final(155) into SingleVariableDeclaration(161) at 0", "Update SimpleName: type(366) to clazz", "Insert VariableDeclarationStatement(169) into Block(211) at 0", "Insert IfStatement(208) into Block(211) at 1", "Insert ReturnStatement(210) into Block(211) at 2", "Insert IfStatement(351) into Block(354) at 0", "Insert ReturnStatement(353) into Block(354) at 1", "Insert ReturnStatement(366) into Block(367) at 0", "Insert ReturnStatement(382) into Block(383) at 0", "Update SimpleName: LifecycleAction(272) to Method", "Move SimpleName: LifecycleAction(272) into SimpleType: Method(395) at 0", "Insert SimpleName: method(396) into VariableDeclarationFragment(397) at 0", "Insert SimpleName: description(403) into VariableDeclarationFragment(404) at 0", "Insert SimpleType: Method(409) into SingleVariableDeclaration(411) at 0", "Insert SimpleName: method(410) into SingleVariableDeclaration(411) at 1", "Insert ExpressionStatement(417) into Block(449) at 0", "Insert ExpressionStatement(448) into Block(449) at 1", "Insert ExpressionStatement(471) into Block(477) at 0", "Insert ReturnStatement(486) into Block(487) at 0", "Update SimpleName: LifecycleAction(345) to String", "Move SimpleName: LifecycleAction(345) into SimpleType: String(499) at 0", "Insert SimpleName: description(500) into VariableDeclarationFragment(501) at 0", "Insert ParameterizedType: Class<? extends AutoCloseable>(510) into SingleVariableDeclaration(512) at 0", "Insert SimpleName: clazz(511) into SingleVariableDeclaration(512) at 1", "Insert ExpressionStatement(539) into Block(540) at 0", "Insert ExpressionStatement(558) into Block(568) at 0", "Insert ExpressionStatement(567) into Block(568) at 1", "Update SimpleName: TypeVisitor(411) to String", "Insert SimpleType: PreDestroyLifecycleActions(56) into TypeLiteral(57) at 0", "Insert SimpleName: TypeInspector(91) into MethodInvocation(97) at 0", "Insert SimpleName: accept(92) into MethodInvocation(97) at 1", "Update SimpleName: close(99) to type", "Move SimpleName: close(99) into MethodInvocation(97) at 2", "Move ClassInstanceCreation(416) into MethodInvocation(97) at 3", "Insert ParameterizedType: ArrayList<>(146) into ClassInstanceCreation(147) at 0", "Insert PrimitiveType: boolean(162) into VariableDeclarationStatement(169) at 0", "Insert VariableDeclarationFragment(168) into VariableDeclarationStatement(169) at 1", "Insert InfixExpression: &&(177) into IfStatement(208) at 0", "Insert Block(207) into IfStatement(208) at 1", "Insert SimpleName: continueVisit(209) into ReturnStatement(210) at 0", "Move MethodInvocation(248) into IfStatement(351) at 0", "Insert Block(350) into IfStatement(351) at 1", "Insert BooleanLiteral: true(352) into ReturnStatement(353) at 0", "Insert BooleanLiteral: true(365) into ReturnStatement(366) at 0", "Insert MethodInvocation(381) into ReturnStatement(382) at 0", "Insert SimpleName: Method(408) into SimpleType: Method(409) at 0", "Insert Assignment: =(416) into ExpressionStatement(417) at 0", "Insert Assignment: =(447) into ExpressionStatement(448) at 0", "Insert MethodInvocation(470) into ExpressionStatement(471) at 0", "Insert SimpleName: description(485) into ReturnStatement(486) at 0", "Insert SimpleType: Class(506) into ParameterizedType: Class<? extends AutoCloseable>(510) at 0", "Insert WildcardType: ? extends AutoCloseable(509) into ParameterizedType: Class<? extends AutoCloseable>(510) at 1", "Insert Assignment: =(538) into ExpressionStatement(539) at 0", "Insert MethodInvocation(557) into ExpressionStatement(558) at 0", "Insert MethodInvocation(566) into ExpressionStatement(567) at 0", "Insert SimpleName: description(576) into ReturnStatement(577) at 0", "Update SimpleName: LifecycleAction(78) to PreDestroyLifecycleActions", "Move SimpleName: LifecycleAction(78) into SimpleType: PreDestroyLifecycleActions(56) at 0", "Insert SimpleType: ArrayList(145) into ParameterizedType: ArrayList<>(146) at 0", "Insert SimpleName: continueVisit(163) into VariableDeclarationFragment(168) at 0", "Insert PrefixExpression: !(167) into VariableDeclarationFragment(168) at 1", "Insert SimpleName: continueVisit(170) into InfixExpression: &&(177) at 0", "Insert MethodInvocation(176) into InfixExpression: &&(177) at 1", "Insert VariableDeclarationStatement(191) into Block(207) at 0", "Insert ExpressionStatement(197) into Block(207) at 1", "Move ExpressionStatement(152) into Block(207) at 2", "Insert ExpressionStatement(206) into Block(207) at 3", "Move VariableDeclarationStatement(212) into Block(350) at 0", "Insert VariableDeclarationStatement(244) into Block(350) at 1", "Insert IfStatement(349) into Block(350) at 2", "Move SimpleName: Collections(268) into MethodInvocation(381) at 0", "Update SimpleName: singletonList(271) to unmodifiableList", "Move SimpleName: singletonList(271) into MethodInvocation(381) at 1", "Insert SimpleName: typeActions(380) into MethodInvocation(381) at 2", "Insert FieldAccess(414) into Assignment: =(416) at 0", "Insert SimpleName: method(415) into Assignment: =(416) at 1", "Insert FieldAccess(420) into Assignment: =(447) at 0", "Insert MethodInvocation(446) into Assignment: =(447) at 1", "Insert SimpleName: LOG(466) into MethodInvocation(470) at 0", "Insert SimpleName: info(467) into MethodInvocation(470) at 1", "Insert StringLiteral: \"invoking lifecycle action {}\"(468) into MethodInvocation(470) at 2", "Insert SimpleName: description(469) into MethodInvocation(470) at 3", "Insert SimpleName: Class(505) into SimpleType: Class(506) at 0", "Move SimpleType: AutoCloseable(95) into WildcardType: ? extends AutoCloseable(509) at 0", "Insert FieldAccess(515) into Assignment: =(538) at 0", "Insert MethodInvocation(537) into Assignment: =(538) at 1", "Insert SimpleName: LOG(553) into MethodInvocation(557) at 0", "Insert SimpleName: info(554) into MethodInvocation(557) at 1", "Insert StringLiteral: \"invoking lifecycle action {}\"(555) into MethodInvocation(557) at 2", "Insert SimpleName: description(556) into MethodInvocation(557) at 3", "Insert MethodInvocation(564) into MethodInvocation(566) at 0", "Insert SimpleName: close(565) into MethodInvocation(566) at 1", "Insert SimpleName: ArrayList(144) into SimpleType: ArrayList(145) at 0", "Insert MethodInvocation(166) into PrefixExpression: !(167) at 0", "Move TypeLiteral(74) into MethodInvocation(176) at 0", "Update SimpleName: append(124) to isAssignableFrom", "Move SimpleName: append(124) into MethodInvocation(176) at 1", "Update SimpleName: append(127) to clazz", "Move SimpleName: append(127) into MethodInvocation(176) at 2", "Insert SimpleType: AutoCloseableLifecycleAction(179) into VariableDeclarationStatement(191) at 0", "Insert VariableDeclarationFragment(190) into VariableDeclarationStatement(191) at 1", "Insert MethodInvocation(196) into ExpressionStatement(197) at 0", "Insert MethodInvocation(201) into ExpressionStatement(202) at 0", "Insert Assignment: =(205) into ExpressionStatement(206) at 0", "Insert Modifier: final(229) into VariableDeclarationStatement(236) at 0", "Insert SimpleType: String(238) into VariableDeclarationStatement(244) at 0", "Insert VariableDeclarationFragment(243) into VariableDeclarationStatement(244) at 1", "Move MethodInvocation(216) into IfStatement(349) at 0", "Insert Block(260) into IfStatement(349) at 1", "Insert IfStatement(348) into IfStatement(349) at 2", "Insert ThisExpression(412) into FieldAccess(414) at 0", "Insert SimpleName: method(413) into FieldAccess(414) at 1", "Insert ThisExpression(418) into FieldAccess(420) at 0", "Insert SimpleName: description(419) into FieldAccess(420) at 1", "Move MethodInvocation(323) into MethodInvocation(446) at 0", "Move SimpleName: toString(324) into MethodInvocation(446) at 1", "Insert ThisExpression(513) into FieldAccess(515) at 0", "Insert SimpleName: description(514) into FieldAccess(515) at 1", "Insert MethodInvocation(535) into MethodInvocation(537) at 0", "Insert SimpleName: toString(536) into MethodInvocation(537) at 1", "Insert TypeLiteral(561) into MethodInvocation(564) at 0", "Insert SimpleName: cast(562) into MethodInvocation(564) at 1", "Insert SimpleName: obj(563) into MethodInvocation(564) at 2", "Update SimpleName: type(117) to clazz", "Move SimpleName: type(117) into MethodInvocation(166) at 0", "Update SimpleName: getName(118) to isInterface", "Move SimpleName: getName(118) into MethodInvocation(166) at 1", "Insert SimpleName: AutoCloseableLifecycleAction(178) into SimpleType: AutoCloseableLifecycleAction(179) at 0", "Insert SimpleName: closeableAction(180) into VariableDeclarationFragment(190) at 0", "Insert ClassInstanceCreation(189) into VariableDeclarationFragment(190) at 1", "Insert SimpleName: LOG(192) into MethodInvocation(196) at 0", "Insert SimpleName: debug(193) into MethodInvocation(196) at 1", "Insert StringLiteral: \"adding lifecycle action for {}\"(194) into MethodInvocation(196) at 2", "Insert QualifiedName: closeableAction.description(195) into MethodInvocation(196) at 3", "Insert SimpleName: typeActions(198) into MethodInvocation(201) at 0", "Insert SimpleName: add(199) into MethodInvocation(201) at 1", "Insert SimpleName: closeableAction(200) into MethodInvocation(201) at 2", "Insert SimpleName: continueVisit(203) into Assignment: =(205) at 0", "Insert BooleanLiteral: false(204) into Assignment: =(205) at 1", "Update SimpleName: Class(186) to String", "Move SimpleName: Class(186) into SimpleType: String(238) at 0", "Insert SimpleName: methodName(239) into VariableDeclarationFragment(243) at 0", "Move MethodInvocation(240) into VariableDeclarationFragment(243) at 1", "Insert ExpressionStatement(259) into Block(260) at 0", "Update InfixExpression: ==(227) to >", "Move InfixExpression: ==(227) into IfStatement(348) at 0", "Insert Block(280) into IfStatement(348) at 1", "Insert IfStatement(347) into IfStatement(348) at 2", "Insert MethodInvocation(532) into MethodInvocation(535) at 0", "Insert SimpleName: append(533) into MethodInvocation(535) at 1", "Insert StringLiteral: \"]\"(534) into MethodInvocation(535) at 2", "Insert SimpleType: AutoCloseable(560) into TypeLiteral(561) at 0", "Insert SimpleType: AutoCloseableLifecycleAction(182) into ClassInstanceCreation(189) at 0", "Insert MethodInvocation(188) into ClassInstanceCreation(189) at 1", "Insert MethodInvocation(258) into ExpressionStatement(259) at 0", "Insert ExpressionStatement(279) into Block(280) at 0", "Insert InfixExpression: !=(285) into IfStatement(347) at 0", "Insert Block(302) into IfStatement(347) at 1", "Insert Block(346) into IfStatement(347) at 2", "Insert MethodInvocation(529) into MethodInvocation(532) at 0", "Insert SimpleName: append(530) into MethodInvocation(532) at 1", "Insert StringLiteral: \"close\"(531) into MethodInvocation(532) at 2", "Insert SimpleName: AutoCloseable(559) into SimpleType: AutoCloseable(560) at 0", "Insert SimpleName: AutoCloseableLifecycleAction(181) into SimpleType: AutoCloseableLifecycleAction(182) at 0", "Update SimpleName: Collections(140) to clazz", "Move SimpleName: Collections(140) into MethodInvocation(188) at 0", "Update SimpleName: singletonList(141) to asSubclass", "Move SimpleName: singletonList(141) into MethodInvocation(188) at 1", "Insert TypeLiteral(187) into MethodInvocation(188) at 2", "Insert SimpleName: LOG(249) into MethodInvocation(258) at 0", "Insert SimpleName: info(250) into MethodInvocation(258) at 1", "Insert StringLiteral: \"invalid static @PreDestroy method {}.{}()\"(251) into MethodInvocation(258) at 2", "Insert MethodInvocation(256) into MethodInvocation(258) at 3", "Insert SimpleName: methodName(257) into MethodInvocation(258) at 4", "Insert MethodInvocation(278) into ExpressionStatement(279) at 0", "Insert QualifiedName: Void.TYPE(281) into InfixExpression: !=(285) at 0", "Move MethodInvocation(233) into InfixExpression: !=(285) at 1", "Insert ExpressionStatement(301) into Block(302) at 0", "Insert IfStatement(345) into Block(346) at 0", "Insert MethodInvocation(526) into MethodInvocation(529) at 0", "Insert SimpleName: append(527) into MethodInvocation(529) at 1", "Insert StringLiteral: \"#\"(528) into MethodInvocation(529) at 2", "Insert SimpleType: AutoCloseable(186) into TypeLiteral(187) at 0", "Insert MethodInvocation(254) into MethodInvocation(256) at 0", "Insert SimpleName: getName(255) into MethodInvocation(256) at 1", "Update SimpleName: Modifier(218) to LOG", "Move SimpleName: Modifier(218) into MethodInvocation(278) at 0", "Update SimpleName: isAbstract(219) to info", "Move SimpleName: isAbstract(219) into MethodInvocation(278) at 1", "Insert StringLiteral: \"invalid @PreDestroy method {}.{}() with {} parameters\"(268) into MethodInvocation(278) at 2", "Insert MethodInvocation(273) into MethodInvocation(278) at 3", "Insert SimpleName: methodName(274) into MethodInvocation(278) at 4", "Insert MethodInvocation(277) into MethodInvocation(278) at 5", "Insert MethodInvocation(300) into ExpressionStatement(301) at 0", "Move PrefixExpression: !(242) into IfStatement(345) at 0", "Insert Block(344) into IfStatement(345) at 1", "Move MethodInvocation(115) into MethodInvocation(526) at 0", "Insert SimpleName: append(522) into MethodInvocation(526) at 1", "Insert MethodInvocation(525) into MethodInvocation(526) at 2", "Insert SimpleName: AutoCloseable(185) into SimpleType: AutoCloseable(186) at 0", "Insert SimpleName: method(252) into MethodInvocation(254) at 0", "Insert SimpleName: getDeclaringClass(253) into MethodInvocation(254) at 1", "Insert MethodInvocation(271) into MethodInvocation(273) at 0", "Insert SimpleName: getName(272) into MethodInvocation(273) at 1", "Insert SimpleName: method(275) into MethodInvocation(277) at 0", "Insert SimpleName: getParameterCount(276) into MethodInvocation(277) at 1", "Insert SimpleName: LOG(286) into MethodInvocation(300) at 0", "Insert SimpleName: info(287) into MethodInvocation(300) at 1", "Insert StringLiteral: \"invalid @PreDestroy method {}.{}() with return type {}\"(288) into MethodInvocation(300) at 2", "Insert MethodInvocation(293) into MethodInvocation(300) at 3", "Insert SimpleName: methodName(294) into MethodInvocation(300) at 4", "Insert MethodInvocation(299) into MethodInvocation(300) at 5", "Move IfStatement(259) into Block(344) at 0", "Insert VariableDeclarationStatement(327) into Block(344) at 1", "Insert ExpressionStatement(333) into Block(344) at 2", "Insert ExpressionStatement(338) into Block(344) at 3", "Move ExpressionStatement(266) into Block(344) at 4", "Insert MethodInvocation(430) into MethodInvocation(432) at 0", "Update SimpleName: Collections(372) to clazz", "Move SimpleName: Collections(372) into MethodInvocation(525) at 0", "Update SimpleName: emptyList(373) to getName", "Move SimpleName: emptyList(373) into MethodInvocation(525) at 1", "Update SimpleName: modifiers(220) to method", "Move SimpleName: modifiers(220) into MethodInvocation(271) at 0", "Insert SimpleName: getDeclaringClass(270) into MethodInvocation(271) at 1", "Insert MethodInvocation(291) into MethodInvocation(293) at 0", "Insert SimpleName: getName(292) into MethodInvocation(293) at 1", "Insert MethodInvocation(297) into MethodInvocation(299) at 0", "Insert SimpleName: getName(298) into MethodInvocation(299) at 1", "Insert SimpleName: methodName(305) into MethodInvocation(306) at 2", "Insert SimpleType: DestroyLifecycleAction(320) into VariableDeclarationStatement(327) at 0", "Insert VariableDeclarationFragment(326) into VariableDeclarationStatement(327) at 1", "Insert MethodInvocation(332) into ExpressionStatement(333) at 0", "Insert MethodInvocation(337) into ExpressionStatement(338) at 0", "Update SimpleName: type(309) to method", "Move SimpleName: type(309) into MethodInvocation(430) at 0", "Insert SimpleName: getDeclaringClass(429) into MethodInvocation(430) at 1", "Insert SimpleName: method(289) into MethodInvocation(291) at 0", "Update SimpleName: equals(230) to getDeclaringClass", "Move SimpleName: equals(230) into MethodInvocation(291) at 1", "Insert SimpleName: method(295) into MethodInvocation(297) at 0", "Insert SimpleName: getReturnType(296) into MethodInvocation(297) at 1", "Insert SimpleName: DestroyLifecycleAction(319) into SimpleType: DestroyLifecycleAction(320) at 0", "Insert SimpleName: destroyAction(321) into VariableDeclarationFragment(326) at 0", "Insert ClassInstanceCreation(325) into VariableDeclarationFragment(326) at 1", "Insert SimpleName: LOG(328) into MethodInvocation(332) at 0", "Insert SimpleName: debug(329) into MethodInvocation(332) at 1", "Insert StringLiteral: \"adding lifecycle action for {}\"(330) into MethodInvocation(332) at 2", "Insert QualifiedName: destroyAction.description(331) into MethodInvocation(332) at 3", "Insert SimpleName: typeActions(334) into MethodInvocation(337) at 0", "Insert SimpleName: add(335) into MethodInvocation(337) at 1", "Insert SimpleName: destroyAction(336) into MethodInvocation(337) at 2", "Update SimpleName: method(262) to methodName", "Move SimpleName: method(262) into MethodInvocation(342) at 2", "Insert SimpleType: DestroyLifecycleAction(323) into ClassInstanceCreation(325) at 0", "Insert SimpleName: method(324) into ClassInstanceCreation(325) at 1", "Insert SimpleName: DestroyLifecycleAction(322) into SimpleType: DestroyLifecycleAction(323) at 0", "Delete SimpleName: obj(96)", "Delete CastExpression(97)", "Delete ParenthesizedExpression(98)", "Delete MethodInvocation(100)", "Delete ExpressionStatement(101)", "Delete Modifier: public(49)", "Delete SimpleName: getActionsForType(55)", "Delete Modifier: final(63)", "Delete SimpleName: typeActions(69)", "Delete VariableDeclarationFragment(70)", "Delete VariableDeclarationStatement(71)", "Delete SimpleName: isAssignableFrom(75)", "Delete MethodInvocation(77)", "Delete SimpleType: LifecycleAction(79)", "Delete SimpleName: closeableAction(80)", "Delete PrimitiveType: void(86)", "Delete MethodDeclaration(103)", "Delete SimpleName: append(116)", "Delete MethodInvocation(119)", "Delete MethodInvocation(120)", "Delete SimpleName: append(121)", "Delete StringLiteral: \"#\"(122)", "Delete MethodInvocation(123)", "Delete StringLiteral: \"close\"(125)", "Delete MethodInvocation(126)", "Delete StringLiteral: \"]\"(128)", "Delete MethodInvocation(129)", "Delete SimpleName: toString(130)", "Delete MethodInvocation(131)", "Delete ReturnStatement(132)", "Delete Block(133)", "Delete MethodDeclaration(134)", "Delete AnonymousClassDeclaration(135)", "Delete ClassInstanceCreation(136)", "Delete VariableDeclarationFragment(137)", "Delete VariableDeclarationStatement(138)", "Delete SimpleName: typeActions(139)", "Delete SimpleName: closeableAction(142)", "Delete MethodInvocation(143)", "Delete Assignment: =(144)", "Delete ExpressionStatement(145)", "Delete Block(146)", "Delete Block(153)", "Delete IfStatement(154)", "Delete SimpleName: typeActions(155)", "Delete ReturnStatement(156)", "Delete Block(157)", "Delete MethodDeclaration(158)", "Delete Modifier: static(159)", "Delete SimpleName: PreDestroyVisitor(160)", "Delete Modifier: final(185)", "Delete SimpleType: Class(187)", "Delete WildcardType: ?(188)", "Delete ParameterizedType: Class<?>(189)", "Delete SimpleName: type(190)", "Delete SingleVariableDeclaration(191)", "Delete SimpleName: List(197)", "Delete SimpleType: List(198)", "Delete SimpleName: LifecycleAction(199)", "Delete SimpleType: LifecycleAction(200)", "Delete ParameterizedType: List<LifecycleAction>(201)", "Delete SimpleName: typeActions(202)", "Delete NullLiteral(203)", "Delete VariableDeclarationFragment(204)", "Delete VariableDeclarationStatement(205)", "Delete PrefixExpression: !(217)", "Delete MethodInvocation(221)", "Delete PrefixExpression: !(222)", "Delete InfixExpression: &&(228)", "Delete QualifiedName: Void.TYPE(229)", "Delete MethodInvocation(234)", "Delete InfixExpression: &&(235)", "Delete SimpleName: typeActions(267)", "Delete SimpleType: LifecycleAction(273)", "Delete MethodDeclaration(328)", "Delete AnonymousClassDeclaration(329)", "Delete ClassInstanceCreation(330)", "Delete MethodInvocation(331)", "Delete Assignment: =(332)", "Delete ExpressionStatement(333)", "Delete Block(334)", "Delete IfStatement(335)", "Delete Block(336)", "Delete IfStatement(337)", "Delete Block(338)", "Delete IfStatement(339)", "Delete SimpleName: typeActions(340)", "Delete NullLiteral(341)", "Delete InfixExpression: !=(342)", "Delete SimpleName: typeActions(343)", "Delete SimpleName: Collections(344)", "Delete SimpleType: LifecycleAction(346)", "Delete SimpleName: emptyList(347)", "Delete MethodInvocation(348)", "Delete ConditionalExpression(349)", "Delete ReturnStatement(350)", "Delete Block(351)", "Delete MethodDeclaration(352)", "Delete TypeDeclaration: class(397)", "Delete SimpleName: typeActions(147)", "Delete SimpleName: getActionsForType(148)", "Delete SimpleName: type(149)", "Delete SuperMethodInvocation(150)", "Delete Assignment: =(151)", "Delete SimpleName: getName(263)", "Delete MethodInvocation(264)", "Delete MethodInvocation(325)", "Delete ReturnStatement(326)", "Delete MethodInvocation(374)", "Delete ReturnStatement(375)", "Delete SimpleName: ElementType(383)", "Delete SimpleType: ElementType(384)", "Delete SimpleName: elementType(385)", "Delete SingleVariableDeclaration(386)", "Delete SimpleName: elementType(387)", "Delete SimpleName: METHOD(388)", "Delete InfixExpression: ==(389)", "Delete SimpleName: elementType(390)", "Delete SimpleName: SUPERCLASS(391)", "Delete InfixExpression: ==(392)", "Delete InfixExpression: ||(393)", "Delete ReturnStatement(394)", "Delete Block(395)"]}}], "commit_stats": [{"total_files": 10, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}