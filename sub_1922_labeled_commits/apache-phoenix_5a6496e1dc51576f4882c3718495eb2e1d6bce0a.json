{"application": "apache-phoenix", "csha": "5a6496e1dc51576f4882c3718495eb2e1d6bce0a", "files": [{"MetaDataEndpointImpl_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 76", "operations": ["INS VariableDeclarationStatement to Block at 76", "INS SimpleName: parentTableName to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 77", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 77", "INS SimpleName: parentSchemaName to VariableDeclarationFragment at 0", "INS SimpleType: PName to VariableDeclarationStatement at 0", "INS SimpleName: PName to SimpleType: PName at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: PName to VariableDeclarationStatement at 0"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: parentTableName to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: && to IfStatement at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS InfixExpression: && to InfixExpression: && at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS SimpleName: Lists to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: newArrayList to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: newArrayList to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ConditionalExpression to VariableDeclarationFragment at 1", "MOV ConditionalExpression to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: parentSchemaName to MethodInvocation at 12", "operations": ["INS SimpleName: parentSchemaName to MethodInvocation at 12"]}, {"root": "INS SimpleName: parentTableName to MethodInvocation at 13", "operations": ["INS SimpleName: parentTableName to MethodInvocation at 13"]}, {"root": "UPDATE from == to !=", "operations": ["UPD InfixExpression: == from == to !="]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3", "MOV InfixExpression: == to InfixExpression: && at 1"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 1", "INS IfStatement to IfStatement at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0", "MOV IfStatement to IfStatement at 2", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS InfixExpression: == to IfStatement at 0", "operations": ["INS SimpleName: linkType to InfixExpression: == at 0", "INS QualifiedName: LinkType.PARENT_TABLE to InfixExpression: == at 1", "INS InfixExpression: == to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS SimpleName: PNameFactory to MethodInvocation at 0", "INS SimpleName: newName to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS SimpleName: parentTableName to Assignment: = at 0", "INS SimpleName: famName to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: PNameFactory to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS SimpleName: parentSchemaName to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: newName to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: famName to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getSchemaNameFromFullName to MethodInvocation at 1", "INS SimpleName: getTableNameFromFullName to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: ArrayList", "DEL ParameterizedType: ArrayList<PTable>", "DEL SimpleType: PTable", "DEL SimpleName: PTable", "DEL ClassInstanceCreation", "DEL SimpleType: ArrayList"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ParameterizedType: ArrayList<PName>", "DEL ClassInstanceCreation", "DEL SimpleType: ArrayList", "DEL SimpleName: ArrayList"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL ConditionalExpression", "operations": ["DEL NullLiteral", "DEL ConditionalExpression"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !"]}]}}, {"MetaDataEndpointImpl_diff": {"operations": ["Insert VariableDeclarationStatement(4938) into Block(5158) at 76", "Insert VariableDeclarationStatement(4949) into Block(5158) at 77", "Move SimpleType: PName(4929) into VariableDeclarationStatement(4938) at 0", "Insert VariableDeclarationFragment(4937) into VariableDeclarationStatement(4938) at 1", "Insert SimpleType: PName(4940) into VariableDeclarationStatement(4949) at 0", "Insert VariableDeclarationFragment(4948) into VariableDeclarationStatement(4949) at 1", "Insert InfixExpression: &&(9382) into IfStatement(9393) at 0", "Insert MethodInvocation(4914) into VariableDeclarationFragment(4915) at 1", "Insert MethodInvocation(4925) into VariableDeclarationFragment(4926) at 1", "Insert SimpleName: parentTableName(4930) into VariableDeclarationFragment(4937) at 0", "Move ConditionalExpression(5101) into VariableDeclarationFragment(4937) at 1", "Insert SimpleName: PName(4939) into SimpleType: PName(4940) at 0", "Insert SimpleName: parentSchemaName(4941) into VariableDeclarationFragment(4948) at 0", "Move ConditionalExpression(5095) into VariableDeclarationFragment(4948) at 1", "Insert SimpleName: parentSchemaName(5135) into MethodInvocation(5156) at 12", "Insert SimpleName: parentTableName(5136) into MethodInvocation(5156) at 13", "Insert InfixExpression: &&(9371) into InfixExpression: &&(9382) at 0", "Insert PrefixExpression: !(9381) into InfixExpression: &&(9382) at 1", "Insert SimpleName: Lists(4912) into MethodInvocation(4914) at 0", "Insert SimpleName: newArrayList(4913) into MethodInvocation(4914) at 1", "Insert SimpleName: Lists(4923) into MethodInvocation(4925) at 0", "Insert SimpleName: newArrayList(4924) into MethodInvocation(4925) at 1", "Insert InfixExpression: !=(9365) into InfixExpression: &&(9371) at 0", "Update InfixExpression: ==(9335) to !=", "Move InfixExpression: ==(9335) into InfixExpression: &&(9371) at 1", "Move MethodInvocation(9343) into PrefixExpression: !(9381) at 0", "Insert IfStatement(5106) into Block(5107) at 1", "Insert SimpleName: parentTableName(9363) into InfixExpression: !=(9365) at 0", "Insert NullLiteral(9364) into InfixExpression: !=(9365) at 1", "Move MethodInvocation(9341) into MethodInvocation(9380) at 3", "Move InfixExpression: ==(5040) into IfStatement(5106) at 0", "Move Block(5050) into IfStatement(5106) at 1", "Insert IfStatement(5105) into IfStatement(5106) at 2", "Move InfixExpression: ==(5053) into IfStatement(5105) at 0", "Move Block(5059) into IfStatement(5105) at 1", "Move IfStatement(5060) into IfStatement(5105) at 2", "Insert InfixExpression: ==(5078) into IfStatement(5104) at 0", "Insert Block(5103) into IfStatement(5104) at 1", "Insert SimpleName: linkType(5076) into InfixExpression: ==(5078) at 0", "Insert QualifiedName: LinkType.PARENT_TABLE(5077) into InfixExpression: ==(5078) at 1", "Insert ExpressionStatement(5090) into Block(5103) at 0", "Insert ExpressionStatement(5102) into Block(5103) at 1", "Insert Assignment: =(5089) into ExpressionStatement(5090) at 0", "Insert Assignment: =(5101) into ExpressionStatement(5102) at 0", "Insert SimpleName: parentTableName(5079) into Assignment: =(5089) at 0", "Insert MethodInvocation(5088) into Assignment: =(5089) at 1", "Insert SimpleName: parentSchemaName(5091) into Assignment: =(5101) at 0", "Insert MethodInvocation(5100) into Assignment: =(5101) at 1", "Insert SimpleName: PNameFactory(5080) into MethodInvocation(5088) at 0", "Insert SimpleName: newName(5081) into MethodInvocation(5088) at 1", "Insert MethodInvocation(5087) into MethodInvocation(5088) at 2", "Insert SimpleName: PNameFactory(5092) into MethodInvocation(5100) at 0", "Insert SimpleName: newName(5093) into MethodInvocation(5100) at 1", "Insert MethodInvocation(5099) into MethodInvocation(5100) at 2", "Insert SimpleName: SchemaUtil(5082) into MethodInvocation(5087) at 0", "Insert SimpleName: getTableNameFromFullName(5083) into MethodInvocation(5087) at 1", "Insert MethodInvocation(5086) into MethodInvocation(5087) at 2", "Insert SimpleName: SchemaUtil(5094) into MethodInvocation(5099) at 0", "Insert SimpleName: getSchemaNameFromFullName(5095) into MethodInvocation(5099) at 1", "Insert MethodInvocation(5098) into MethodInvocation(5099) at 2", "Insert SimpleName: famName(5084) into MethodInvocation(5086) at 0", "Insert SimpleName: getBytes(5085) into MethodInvocation(5086) at 1", "Insert SimpleName: famName(5096) into MethodInvocation(5098) at 0", "Insert SimpleName: getBytes(5097) into MethodInvocation(5098) at 1", "Delete SimpleName: ArrayList(4912)", "Delete SimpleType: ArrayList(4913)", "Delete SimpleName: PTable(4914)", "Delete SimpleType: PTable(4915)", "Delete ParameterizedType: ArrayList<PTable>(4916)", "Delete ClassInstanceCreation(4917)", "Delete SimpleName: ArrayList(4926)", "Delete SimpleType: ArrayList(4927)", "Delete ParameterizedType: ArrayList<PName>(4930)", "Delete ClassInstanceCreation(4931)", "Delete IfStatement(5061)", "Delete NullLiteral(9336)", "Delete ConditionalExpression(9342)", "Delete PrefixExpression: !(9344)"]}}, {"IndexMaintainer_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 72"]}, {"root": "INS ImportDeclaration to CompilationUnit at 33", "operations": ["INS ImportDeclaration to CompilationUnit at 33", "INS QualifiedName: org.apache.phoenix.expression.CoerceExpression to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 69", "operations": ["INS ImportDeclaration to CompilationUnit at 69", "INS QualifiedName: org.apache.phoenix.util.ExpressionUtil to ImportDeclaration at 0"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS ThrowStatement to Block at 0", "INS SimpleName: e to ClassInstanceCreation at 1", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS TryStatement to Block at 1", "INS SimpleName: ExpressionUtil to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS CatchClause to TryStatement at 1", "INS SimpleName: isConstant to MethodInvocation at 1", "INS SimpleName: expression to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS SimpleType: SQLException to SingleVariableDeclaration at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: column to MethodInvocation at 0", "INS SimpleName: RuntimeException to SimpleType: RuntimeException at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS InfixExpression: && to IfStatement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Block to TryStatement at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS Block to CatchClause at 1", "INS SimpleName: isNullable to MethodInvocation at 1", "INS SimpleType: RuntimeException to ClassInstanceCreation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1", "MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: expression to Assignment: = at 0", "INS MethodInvocation to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: create to MethodInvocation at 1", "INS SimpleName: getDataType to MethodInvocation at 1", "INS SimpleName: expression to MethodInvocation at 2", "INS SimpleName: indexColumn to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: CoerceExpression to MethodInvocation at 0"]}]}}, {"IndexMaintainer_diff": {"operations": ["Move ImportDeclaration(155) into CompilationUnit(7564) at 72", "Insert ImportDeclaration(67) into CompilationUnit(7564) at 33", "Insert ImportDeclaration(139) into CompilationUnit(7564) at 69", "Insert QualifiedName: org.apache.phoenix.expression.CoerceExpression(66) into ImportDeclaration(67) at 0", "Insert QualifiedName: org.apache.phoenix.util.ExpressionUtil(138) into ImportDeclaration(139) at 0", "Insert Block(2121) into IfStatement(2122) at 2", "Move ExpressionStatement(2076) into Block(2121) at 0", "Insert TryStatement(2120) into Block(2121) at 1", "Insert Block(2108) into TryStatement(2120) at 0", "Insert CatchClause(2119) into TryStatement(2120) at 1", "Insert IfStatement(2100) into Block(2108) at 0", "Move ExpressionStatement(2083) into Block(2108) at 1", "Insert SingleVariableDeclaration(2112) into CatchClause(2119) at 0", "Insert Block(2118) into CatchClause(2119) at 1", "Insert InfixExpression: &&(2088) into IfStatement(2100) at 0", "Move Block(2084) into IfStatement(2100) at 1", "Insert SimpleType: SQLException(2110) into SingleVariableDeclaration(2112) at 0", "Insert SimpleName: e(2111) into SingleVariableDeclaration(2112) at 1", "Insert ThrowStatement(2117) into Block(2118) at 0", "Insert MethodInvocation(2083) into InfixExpression: &&(2088) at 0", "Insert MethodInvocation(2087) into InfixExpression: &&(2088) at 1", "Insert ExpressionStatement(2098) into Block(2099) at 0", "Insert SimpleName: SQLException(2109) into SimpleType: SQLException(2110) at 0", "Insert ClassInstanceCreation(2116) into ThrowStatement(2117) at 0", "Insert SimpleName: column(2081) into MethodInvocation(2083) at 0", "Insert SimpleName: isNullable(2082) into MethodInvocation(2083) at 1", "Insert SimpleName: ExpressionUtil(2084) into MethodInvocation(2087) at 0", "Insert SimpleName: isConstant(2085) into MethodInvocation(2087) at 1", "Insert SimpleName: expression(2086) into MethodInvocation(2087) at 2", "Insert Assignment: =(2097) into ExpressionStatement(2098) at 0", "Insert SimpleType: RuntimeException(2114) into ClassInstanceCreation(2116) at 0", "Insert SimpleName: e(2115) into ClassInstanceCreation(2116) at 1", "Insert SimpleName: expression(2089) into Assignment: =(2097) at 0", "Insert MethodInvocation(2096) into Assignment: =(2097) at 1", "Insert SimpleName: RuntimeException(2113) into SimpleType: RuntimeException(2114) at 0", "Insert SimpleName: CoerceExpression(2090) into MethodInvocation(2096) at 0", "Insert SimpleName: create(2091) into MethodInvocation(2096) at 1", "Insert SimpleName: expression(2092) into MethodInvocation(2096) at 2", "Insert MethodInvocation(2095) into MethodInvocation(2096) at 3", "Insert SimpleName: indexColumn(2093) into MethodInvocation(2095) at 0", "Insert SimpleName: getDataType(2094) into MethodInvocation(2095) at 1"]}}, {"QueryConstants_cluster": {"actions": [{"root": "INS FieldDeclaration to TypeDeclaration: interface at 5", "operations": ["INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS SimpleType: String to FieldDeclaration at 3", "INS SimpleName: String to SimpleType: String at 0", "INS Modifier: final to FieldDeclaration at 2", "INS SimpleName: CHILD_VIEW_INDEX_NAME_SEPARATOR to VariableDeclarationFragment at 0", "INS StringLiteral: \"#\" to VariableDeclarationFragment at 1", "INS Modifier: public to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: interface at 5"]}]}}, {"QueryConstants_diff": {"operations": ["Insert FieldDeclaration(233) into TypeDeclaration: interface(1266) at 5", "Insert Modifier: public(225) into FieldDeclaration(233) at 0", "Insert Modifier: static(226) into FieldDeclaration(233) at 1", "Insert Modifier: final(227) into FieldDeclaration(233) at 2", "Insert SimpleType: String(229) into FieldDeclaration(233) at 3", "Insert VariableDeclarationFragment(232) into FieldDeclaration(233) at 4", "Insert SimpleName: String(228) into SimpleType: String(229) at 0", "Insert SimpleName: CHILD_VIEW_INDEX_NAME_SEPARATOR(230) into VariableDeclarationFragment(232) at 0", "Insert StringLiteral: \"#\"(231) into VariableDeclarationFragment(232) at 1"]}}, {"MetaDataClient_cluster": {"actions": [{"root": "UPDATE from addIndexesFromPhysicalTable to addIndexesFromParentTable", "operations": ["UPD SimpleName: addIndexesFromPhysicalTable from addIndexesFromPhysicalTable to addIndexesFromParentTable", "UPD SimpleName: addIndexesFromPhysicalTable from addIndexesFromPhysicalTable to addIndexesFromParentTable", "UPD SimpleName: addIndexesFromPhysicalTable from addIndexesFromPhysicalTable to addIndexesFromParentTable"]}, {"root": "UPDATE from Fault in the physical table to the cache and add any indexes it has to the indexes to Fault in the parent table to the cache and add any indexes it has to the indexes", "operations": ["UPD TextElement: Fault in the physical table to the cache and add any indexes it has to the indexes from Fault in the physical table to the cache and add any indexes it has to the indexes to Fault in the parent table to the cache and add any indexes it has to the indexes"]}, {"root": "UPDATE from physicalTableIndexes to parentTableIndexes", "operations": ["UPD SimpleName: physicalTableIndexes from physicalTableIndexes to parentTableIndexes", "UPD SimpleName: physicalTableIndexes from physicalTableIndexes to parentTableIndexes", "UPD SimpleName: physicalTableIndexes from physicalTableIndexes to parentTableIndexes", "UPD SimpleName: physicalTableIndexes from physicalTableIndexes to parentTableIndexes"]}, {"root": "UPDATE from physicalName to parentName", "operations": ["UPD SimpleName: physicalName from physicalName to parentName", "UPD SimpleName: physicalName from physicalName to parentName", "UPD SimpleName: physicalName from physicalName to parentName"]}, {"root": "UPDATE from physicalTable to parentTable", "operations": ["UPD SimpleName: physicalTable from physicalTable to parentTable", "UPD SimpleName: physicalTable from physicalTable to parentTable", "UPD SimpleName: physicalTable from physicalTable to parentTable", "UPD SimpleName: physicalTable from physicalTable to parentTable", "UPD SimpleName: physicalTable from physicalTable to parentTable"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS SimpleName: connection to MethodInvocation at 0", "INS SimpleName: getTenantId to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1"]}, {"root": "UPDATE from getPhysicalName to getParentName", "operations": ["UPD SimpleName: getPhysicalName from getPhysicalName to getParentName"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: PName to SimpleType: PName at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: getSchemaName to MethodInvocation at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 2", "INS SimpleName: modifiedIndexName to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to InfixExpression: + at 4", "INS MethodInvocation to MethodInvocation at 0", "INS QualifiedName: QueryConstants.CHILD_VIEW_INDEX_NAME_SEPARATOR to InfixExpression: + at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleType: PName to VariableDeclarationStatement at 0", "INS SimpleName: index to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS QualifiedName: QueryConstants.CHILD_VIEW_INDEX_NAME_SEPARATOR to InfixExpression: + at 3"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getViewConstant to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS InfixExpression: != to InfixExpression: || at 1", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: containsAllReqdCols to Assignment: = at 0", "INS BreakStatement to Block at 1", "INS SimpleName: Bytes to MethodInvocation at 0", "INS SimpleName: compareTo to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: getViewConstant to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to InfixExpression: == at 0", "INS ExpressionStatement to Block at 0", "INS Block to CatchClause at 1", "INS SimpleName: PColumn to SimpleType: PColumn at 0", "INS MethodInvocation to MethodInvocation at 2", "INS NumberLiteral: 0 to InfixExpression: != at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS CatchClause to TryStatement at 1", "INS BooleanLiteral: false to Assignment: = at 1", "INS SimpleName: indexCol to MethodInvocation at 0", "INS SimpleType: PColumn to VariableDeclarationStatement at 0", "INS SimpleName: indexCol to MethodInvocation at 0", "INS SimpleName: col to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: indexCol to VariableDeclarationFragment at 0", "INS SimpleName: getViewConstant to MethodInvocation at 1", "INS NullLiteral to VariableDeclarationFragment at 1", "INS TryStatement to Block at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS Block to IfStatement at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: modifiedIndexName to MethodInvocation at 3", "INS SimpleName: getTenantId to MethodInvocation at 1", "INS QualifiedName: Long.MAX_VALUE to MethodInvocation at 5", "INS SimpleName: viewStatement to MethodInvocation at 4", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: makePTable to MethodInvocation at 1", "INS SimpleName: view to MethodInvocation at 0", "INS SimpleName: PTableImpl to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 6"]}, {"root": "MOVE from TryStatement", "operations": ["MOV Block to TryStatement at 0"]}, {"root": "UPDATE from PTableImpl to PNameFactory", "operations": ["UPD SimpleName: PTableImpl from PTableImpl to PNameFactory"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: makePTable to MethodInvocation at 1", "MOV SimpleName: index to MethodInvocation at 0", "MOV SimpleName: PTableImpl to MethodInvocation at 0", "MOV SimpleName: viewStatement to MethodInvocation at 0"]}, {"root": "UPDATE from makePTable to newName", "operations": ["UPD SimpleName: makePTable from makePTable to newName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: index to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: parent to MethodInvocation at 0", "INS SimpleName: getSchemaName to MethodInvocation at 1"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "UPDATE from dataTableName to parent", "operations": ["UPD SimpleName: dataTableName from dataTableName to parent", "UPD SimpleName: dataTableName from dataTableName to parent", "UPD SimpleName: PNameFactory from PNameFactory to parent"]}, {"root": "UPDATE from dataTableName to getTableName", "operations": ["UPD SimpleName: dataTableName from dataTableName to getTableName"]}, {"root": "UPDATE from e to e1", "operations": ["UPD SimpleName: e from e to e1"]}, {"root": "MOVE from Block", "operations": ["MOV TryStatement to Block at 1"]}, {"root": "INS Block to TryStatement at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: cq to VariableDeclarationFragment at 0", "INS Assignment: = to ExpressionStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: cf to MethodInvocation at 2", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS IfStatement to Block at 2", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS NullLiteral to ConditionalExpression at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: cf to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: indexCol to Assignment: = at 0", "INS Block to IfStatement at 2", "INS SimpleName: col to MethodInvocation at 0", "INS SimpleName: getColumnFamily to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: getFamilyName to MethodInvocation at 1", "INS SimpleName: getColumn to MethodInvocation at 1", "INS SimpleName: parentTable to MethodInvocation at 0", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: indexCol to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: cq to MethodInvocation at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: col to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: cq to MethodInvocation at 2", "INS SimpleName: col to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getFamilyName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 1", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getColumn to MethodInvocation at 1", "INS SimpleName: parentTable to MethodInvocation at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: cf to InfixExpression: != at 0", "INS Block to TryStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "UPDATE from viewStatement to view", "operations": ["UPD SimpleName: viewStatement from viewStatement to view"]}, {"root": "INS SingleVariableDeclaration to CatchClause at 0", "operations": ["INS SimpleName: e2 to SingleVariableDeclaration at 1", "INS SimpleName: ColumnNotFoundException to SimpleType: ColumnNotFoundException at 0", "INS SimpleType: ColumnNotFoundException to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to CatchClause at 0"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: index"]}, {"root": "DEL SimpleName: newSchemaName", "operations": ["DEL SimpleName: newSchemaName"]}, {"root": "DEL SimpleName: newName", "operations": ["DEL SimpleName: newName"]}]}}, {"MetaDataClient_diff": {"operations": ["Update SimpleName: addIndexesFromPhysicalTable(2134) to addIndexesFromParentTable", "Update TextElement: Fault in the physical table to the cache and add any indexes it has to the indexes(2116) to Fault in the parent table to the cache and add any indexes it has to the indexes", "Update SimpleName: physicalTableIndexes(2316) to parentTableIndexes", "Update SimpleName: physicalName(2170) to parentName", "Update SimpleName: physicalTable(2210) to parentTable", "Update SimpleName: physicalTable(2216) to parentTable", "Update SimpleName: physicalTableIndexes(2245) to parentTableIndexes", "Update SimpleName: physicalTableIndexes(2251) to parentTableIndexes", "Update SimpleName: addIndexesFromPhysicalTable(17768) to addIndexesFromParentTable", "Update SimpleName: physicalName(2183) to parentName", "Update SimpleName: physicalName(2192) to parentName", "Insert MethodInvocation(2202) into MethodInvocation(2207) at 1", "Update SimpleName: physicalTable(2246) to parentTable", "Update SimpleName: getPhysicalName(2172) to getParentName", "Insert SimpleName: connection(2200) into MethodInvocation(2202) at 0", "Insert SimpleName: getTenantId(2201) into MethodInvocation(2202) at 1", "Insert VariableDeclarationStatement(2576) into Block(2591) at 1", "Update SimpleName: physicalTableIndexes(2266) to parentTableIndexes", "Update SimpleName: physicalTable(2327) to parentTable", "Insert Block(2532) into IfStatement(2533) at 1", "Insert SimpleType: PName(2552) into VariableDeclarationStatement(2576) at 0", "Insert VariableDeclarationFragment(2575) into VariableDeclarationStatement(2576) at 1", "Insert TryStatement(2531) into Block(2532) at 0", "Insert SimpleName: PName(2551) into SimpleType: PName(2552) at 0", "Insert SimpleName: modifiedIndexName(2553) into VariableDeclarationFragment(2575) at 0", "Insert MethodInvocation(2574) into VariableDeclarationFragment(2575) at 1", "Insert MethodInvocation(2588) into MethodInvocation(2589) at 2", "Move Block(2429) into TryStatement(2531) at 0", "Insert CatchClause(2530) into TryStatement(2531) at 1", "Update SimpleName: physicalTable(2454) to parentTable", "Update SimpleName: PTableImpl(2462) to PNameFactory", "Move SimpleName: PTableImpl(2462) into MethodInvocation(2574) at 0", "Update SimpleName: makePTable(2463) to newName", "Move SimpleName: makePTable(2463) into MethodInvocation(2574) at 1", "Insert InfixExpression: +(2573) into MethodInvocation(2574) at 2", "Insert SimpleName: PTableImpl(2579) into MethodInvocation(2588) at 0", "Insert SimpleName: makePTable(2580) into MethodInvocation(2588) at 1", "Move SimpleName: index(2471) into MethodInvocation(2588) at 2", "Insert SimpleName: modifiedIndexName(2582) into MethodInvocation(2588) at 3", "Insert SimpleName: viewStatement(2583) into MethodInvocation(2588) at 4", "Insert QualifiedName: Long.MAX_VALUE(2584) into MethodInvocation(2588) at 5", "Insert MethodInvocation(2587) into MethodInvocation(2588) at 6", "Insert MethodInvocation(11331) into ConditionalExpression(11332) at 2", "Move SingleVariableDeclaration(2433) into CatchClause(2530) at 0", "Insert Block(2529) into CatchClause(2530) at 1", "Insert MethodInvocation(2560) into InfixExpression: +(2573) at 0", "Insert QualifiedName: QueryConstants.CHILD_VIEW_INDEX_NAME_SEPARATOR(2561) into InfixExpression: +(2573) at 1", "Insert MethodInvocation(2566) into InfixExpression: +(2573) at 2", "Insert QualifiedName: QueryConstants.CHILD_VIEW_INDEX_NAME_SEPARATOR(2567) into InfixExpression: +(2573) at 3", "Insert MethodInvocation(2572) into InfixExpression: +(2573) at 4", "Insert SimpleName: view(2585) into MethodInvocation(2587) at 0", "Insert SimpleName: getTenantId(2586) into MethodInvocation(2587) at 1", "Update SimpleName: dataTableName(11208) to parent", "Insert SimpleName: parent(11329) into MethodInvocation(11331) at 0", "Insert SimpleName: getSchemaName(11330) into MethodInvocation(11331) at 1", "Update SimpleName: dataTableName(11214) to parent", "Update SimpleName: PNameFactory(11218) to parent", "Update SimpleName: dataTableName(11220) to getTableName", "Update SimpleName: e(2432) to e1", "Insert VariableDeclarationStatement(2441) into Block(2529) at 0", "Move TryStatement(2441) into Block(2529) at 1", "Insert IfStatement(2528) into Block(2529) at 2", "Insert MethodInvocation(2558) into MethodInvocation(2560) at 0", "Insert SimpleName: getString(2559) into MethodInvocation(2560) at 1", "Insert MethodInvocation(2564) into MethodInvocation(2566) at 0", "Insert SimpleName: getString(2565) into MethodInvocation(2566) at 1", "Insert MethodInvocation(2570) into MethodInvocation(2572) at 0", "Insert SimpleName: getString(2571) into MethodInvocation(2572) at 1", "Update SimpleName: addIndexesFromPhysicalTable(1550) to addIndexesFromParentTable", "Insert SimpleType: PColumn(2437) into VariableDeclarationStatement(2441) at 0", "Insert VariableDeclarationFragment(2440) into VariableDeclarationStatement(2441) at 1", "Insert Block(2492) into TryStatement(2504) at 0", "Insert InfixExpression: ||(2521) into IfStatement(2528) at 0", "Insert Block(2527) into IfStatement(2528) at 1", "Move SimpleName: index(2464) into MethodInvocation(2558) at 0", "Insert SimpleName: getSchemaName(2557) into MethodInvocation(2558) at 1", "Insert SimpleName: index(2562) into MethodInvocation(2564) at 0", "Insert SimpleName: getName(2563) into MethodInvocation(2564) at 1", "Update SimpleName: viewStatement(2465) to view", "Move SimpleName: viewStatement(2465) into MethodInvocation(2570) at 0", "Insert SimpleName: getName(2569) into MethodInvocation(2570) at 1", "Insert SimpleName: PColumn(2436) into SimpleType: PColumn(2437) at 0", "Insert SimpleName: indexCol(2438) into VariableDeclarationFragment(2440) at 0", "Insert NullLiteral(2439) into VariableDeclarationFragment(2440) at 1", "Insert VariableDeclarationStatement(2458) into Block(2492) at 0", "Insert VariableDeclarationStatement(2468) into Block(2492) at 1", "Insert IfStatement(2491) into Block(2492) at 2", "Insert SingleVariableDeclaration(2496) into CatchClause(2503) at 0", "Insert InfixExpression: ==(2509) into InfixExpression: ||(2521) at 0", "Insert InfixExpression: !=(2520) into InfixExpression: ||(2521) at 1", "Insert ExpressionStatement(2525) into Block(2527) at 0", "Insert BreakStatement(2526) into Block(2527) at 1", "Insert SimpleType: String(2443) into VariableDeclarationStatement(2458) at 0", "Insert VariableDeclarationFragment(2457) into VariableDeclarationStatement(2458) at 1", "Insert SimpleType: String(2460) into VariableDeclarationStatement(2468) at 0", "Insert VariableDeclarationFragment(2467) into VariableDeclarationStatement(2468) at 1", "Insert InfixExpression: !=(2471) into IfStatement(2491) at 0", "Insert Block(2482) into IfStatement(2491) at 1", "Insert Block(2490) into IfStatement(2491) at 2", "Insert SimpleType: ColumnNotFoundException(2494) into SingleVariableDeclaration(2496) at 0", "Insert SimpleName: e2(2495) into SingleVariableDeclaration(2496) at 1", "Insert MethodInvocation(2507) into InfixExpression: ==(2509) at 0", "Insert NullLiteral(2508) into InfixExpression: ==(2509) at 1", "Insert MethodInvocation(2518) into InfixExpression: !=(2520) at 0", "Insert NumberLiteral: 0(2519) into InfixExpression: !=(2520) at 1", "Insert Assignment: =(2524) into ExpressionStatement(2525) at 0", "Insert SimpleName: String(2442) into SimpleType: String(2443) at 0", "Insert SimpleName: cf(2444) into VariableDeclarationFragment(2457) at 0", "Insert ConditionalExpression(2456) into VariableDeclarationFragment(2457) at 1", "Insert SimpleName: String(2459) into SimpleType: String(2460) at 0", "Insert SimpleName: cq(2461) into VariableDeclarationFragment(2467) at 0", "Insert MethodInvocation(2466) into VariableDeclarationFragment(2467) at 1", "Insert SimpleName: cf(2469) into InfixExpression: !=(2471) at 0", "Insert NullLiteral(2470) into InfixExpression: !=(2471) at 1", "Insert ExpressionStatement(2481) into Block(2482) at 0", "Insert ExpressionStatement(2489) into Block(2490) at 0", "Insert SimpleName: ColumnNotFoundException(2493) into SimpleType: ColumnNotFoundException(2494) at 0", "Insert SimpleName: indexCol(2505) into MethodInvocation(2507) at 0", "Insert SimpleName: getViewConstant(2506) into MethodInvocation(2507) at 1", "Insert SimpleName: Bytes(2510) into MethodInvocation(2518) at 0", "Insert SimpleName: compareTo(2511) into MethodInvocation(2518) at 1", "Insert MethodInvocation(2514) into MethodInvocation(2518) at 2", "Insert MethodInvocation(2517) into MethodInvocation(2518) at 3", "Insert SimpleName: containsAllReqdCols(2522) into Assignment: =(2524) at 0", "Insert BooleanLiteral: false(2523) into Assignment: =(2524) at 1", "Insert InfixExpression: !=(2449) into ConditionalExpression(2456) at 0", "Insert MethodInvocation(2454) into ConditionalExpression(2456) at 1", "Insert NullLiteral(2455) into ConditionalExpression(2456) at 2", "Insert MethodInvocation(2464) into MethodInvocation(2466) at 0", "Insert SimpleName: getString(2465) into MethodInvocation(2466) at 1", "Insert Assignment: =(2480) into ExpressionStatement(2481) at 0", "Insert Assignment: =(2488) into ExpressionStatement(2489) at 0", "Insert SimpleName: indexCol(2512) into MethodInvocation(2514) at 0", "Insert SimpleName: getViewConstant(2513) into MethodInvocation(2514) at 1", "Insert SimpleName: col(2515) into MethodInvocation(2517) at 0", "Insert SimpleName: getViewConstant(2516) into MethodInvocation(2517) at 1", "Insert MethodInvocation(2447) into InfixExpression: !=(2449) at 0", "Insert NullLiteral(2448) into InfixExpression: !=(2449) at 1", "Insert MethodInvocation(2452) into MethodInvocation(2454) at 0", "Insert SimpleName: getString(2453) into MethodInvocation(2454) at 1", "Insert SimpleName: col(2462) into MethodInvocation(2464) at 0", "Insert SimpleName: getName(2463) into MethodInvocation(2464) at 1", "Insert SimpleName: indexCol(2472) into Assignment: =(2480) at 0", "Insert MethodInvocation(2479) into Assignment: =(2480) at 1", "Insert SimpleName: indexCol(2483) into Assignment: =(2488) at 0", "Insert MethodInvocation(2487) into Assignment: =(2488) at 1", "Insert SimpleName: col(2445) into MethodInvocation(2447) at 0", "Insert SimpleName: getFamilyName(2446) into MethodInvocation(2447) at 1", "Insert SimpleName: col(2450) into MethodInvocation(2452) at 0", "Insert SimpleName: getFamilyName(2451) into MethodInvocation(2452) at 1", "Insert MethodInvocation(2476) into MethodInvocation(2479) at 0", "Insert SimpleName: getColumn(2477) into MethodInvocation(2479) at 1", "Insert SimpleName: cq(2478) into MethodInvocation(2479) at 2", "Insert SimpleName: parentTable(2484) into MethodInvocation(2487) at 0", "Insert SimpleName: getColumn(2485) into MethodInvocation(2487) at 1", "Insert SimpleName: cq(2486) into MethodInvocation(2487) at 2", "Insert SimpleName: parentTable(2473) into MethodInvocation(2476) at 0", "Insert SimpleName: getColumnFamily(2474) into MethodInvocation(2476) at 1", "Insert SimpleName: cf(2475) into MethodInvocation(2476) at 2", "Delete NullLiteral(2200)", "Delete Block(2442)", "Delete SimpleName: index(2461)", "Delete MethodInvocation(2466)", "Delete Assignment: =(2467)", "Delete ExpressionStatement(2468)", "Delete SimpleName: newSchemaName(11212)", "Delete SimpleName: newName(11219)"]}}, {"PMetaDataImpl_cluster": {"actions": [{"root": "UPDATE from != to ==", "operations": ["UPD InfixExpression: != from != to =="]}, {"root": "INS QualifiedName: PTableType.INDEX to InfixExpression: != at 1", "operations": ["INS QualifiedName: PTableType.INDEX to InfixExpression: != at 1"]}, {"root": "UPDATE from getParentName to getType", "operations": ["UPD SimpleName: getParentName from getParentName to getType"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}]}}, {"PMetaDataImpl_diff": {"operations": ["Update InfixExpression: !=(363) to ==", "Insert QualifiedName: PTableType.INDEX(362) into InfixExpression: ==(363) at 1", "Update SimpleName: getParentName(360) to getType", "Delete NullLiteral(362)"]}}, {"PTable_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: PName to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: PName to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: PName to MethodDeclaration at 1"]}, {"root": "UPDATE from  the name of the data table that this index is on to  the full name of the parent view for a view or data table for an index table ", "operations": ["UPD TextElement:  the name of the data table that this index is on from  the name of the data table that this index is on to  the full name of the parent view for a view or data table for an index table "]}, {"root": "UPDATE from or null if not an index. to or null if this is not a view or index table. Also returns null for a view of a data table ", "operations": ["UPD TextElement: or null if not an index. from or null if not an index. to or null if this is not a view or index table. Also returns null for a view of a data table ", "UPD TextElement: on or null if not an index. from on or null if not an index. to or null if this is not a view or index table. Also returns null for a view of a data table "]}, {"root": "INS TextElement: (use @getPhysicalName for this case)  to TagElement: @return at 2", "operations": ["INS TextElement: (use @getPhysicalName for this case)  to TagElement: @return at 2"]}, {"root": "UPDATE from  the table name of the data table that this index is to  the table name of the parent view for a view or data table for an index table ", "operations": ["UPD TextElement:  the table name of the data table that this index is from  the table name of the data table that this index is to  the table name of the parent view for a view or data table for an index table "]}, {"root": "INS TextElement: (use @getPhysicalTableName for this case)  to TagElement: @return at 2", "operations": ["INS TextElement: (use @getPhysicalTableName for this case)  to TagElement: @return at 2"]}, {"root": "UPDATE from  the schema name of the data table that this index is to  the schema name of the parent view for a view or data table for an index table ", "operations": ["UPD TextElement:  the schema name of the data table that this index is from  the schema name of the data table that this index is to  the schema name of the parent view for a view or data table for an index table "]}, {"root": "UPDATE from on or null if not an index. to or null if this is not a view or index table. Also returns null for view of a data table ", "operations": ["UPD TextElement: on or null if not an index. from on or null if not an index. to or null if this is not a view or index table. Also returns null for view of a data table "]}, {"root": "INS TextElement: (use @getPhysicalSchemaName for this case)  to TagElement: @return at 2", "operations": ["INS TextElement: (use @getPhysicalSchemaName for this case)  to TagElement: @return at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.phoenix.query.ConnectionQueryServices"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.phoenix.schema.stats.PTableStats", "DEL ImportDeclaration"]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement: Gets the full name of the data table for an index table."]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement: Gets the table name of the data table for an index table."]}, {"root": "DEL TagElement", "operations": ["DEL TagElement", "DEL TextElement: Gets the schema name of the data table for an index table."]}]}}, {"PTable_diff": {"operations": ["Move SimpleType: PName(809) into MethodDeclaration(786) at 1", "Move SimpleType: PName(789) into MethodDeclaration(795) at 1", "Move SimpleType: PName(799) into MethodDeclaration(804) at 1", "Update TextElement:  the name of the data table that this index is on(784) to  the full name of the parent view for a view or data table for an index table ", "Update TextElement: or null if not an index.(785) to or null if this is not a view or index table. Also returns null for a view of a data table ", "Insert TextElement: (use @getPhysicalName for this case) (780) into TagElement: @return(781) at 2", "Update TextElement:  the table name of the data table that this index is(794) to  the table name of the parent view for a view or data table for an index table ", "Update TextElement: on or null if not an index.(795) to or null if this is not a view or index table. Also returns null for a view of a data table ", "Insert TextElement: (use @getPhysicalTableName for this case) (789) into TagElement: @return(790) at 2", "Update TextElement:  the schema name of the data table that this index is(804) to  the schema name of the parent view for a view or data table for an index table ", "Update TextElement: on or null if not an index.(805) to or null if this is not a view or index table. Also returns null for view of a data table ", "Insert TextElement: (use @getPhysicalSchemaName for this case) (798) into TagElement: @return(799) at 2", "Delete QualifiedName: org.apache.phoenix.query.ConnectionQueryServices(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: org.apache.phoenix.schema.stats.PTableStats(16)", "Delete ImportDeclaration(17)", "Delete TextElement: Gets the full name of the data table for an index table.(782)", "Delete TagElement(783)", "Delete TextElement: Gets the table name of the data table for an index table.(792)", "Delete TagElement(793)", "Delete TextElement: Gets the schema name of the data table for an index table.(802)", "Delete TagElement(803)"]}}, {"PTableImpl_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 58", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 10", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: getViewIndexId to MethodInvocation at 1", "INS SimpleType: PName to SingleVariableDeclaration at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS Modifier: static to MethodDeclaration at 1", "INS ParameterizedType: List<PName> to SingleVariableDeclaration at 0", "INS SimpleType: List to ParameterizedType: List<PTable> at 0", "INS SimpleType: PTableImpl to ClassInstanceCreation at 0", "INS SimpleName: viewStatement to SingleVariableDeclaration at 1", "INS SimpleName: timeStamp to ClassInstanceCreation at 6", "INS SingleVariableDeclaration to MethodDeclaration at 8", "INS SimpleName: PTableImpl to SimpleType: PTableImpl at 0", "INS SimpleName: physicalNames to SingleVariableDeclaration at 1", "INS MethodInvocation to ClassInstanceCreation at 31", "INS SimpleName: getBucketNum to MethodInvocation at 1", "INS SimpleName: isTransactional to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: table to MethodInvocation at 1", "INS SimpleName: getSequenceNumber to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS SimpleName: makePTable to MethodDeclaration at 3", "INS SimpleType: PTableImpl to MethodDeclaration at 2", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: updateCacheFrequency to SingleVariableDeclaration at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: getViewType to MethodInvocation at 1", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: tenantId to ClassInstanceCreation at 1", "INS SimpleName: viewStatement to ClassInstanceCreation at 17", "INS SimpleType: PName to SingleVariableDeclaration at 0", "INS MethodInvocation to ClassInstanceCreation at 26", "INS MethodInvocation to ClassInstanceCreation at 20", "INS MethodInvocation to ClassInstanceCreation at 10", "INS SimpleName: isWALDisabled to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 7", "INS SimpleName: PTableImpl to SimpleType: PTableImpl at 0", "INS MethodInvocation to ClassInstanceCreation at 22", "INS SimpleName: table to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 21", "INS SimpleName: getColumnsToClone to MethodInvocation at 0", "INS SimpleName: SQLException to SimpleType: SQLException at 0", "INS SimpleName: rowKeyOrderOptimizable to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 4", "INS SimpleName: timeStamp to SingleVariableDeclaration at 1", "INS MethodInvocation to ClassInstanceCreation at 29", "INS MethodInvocation to ClassInstanceCreation at 30", "INS MethodDeclaration to TypeDeclaration: class at 58", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS MethodInvocation to ClassInstanceCreation at 23", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 11", "INS MethodInvocation to ClassInstanceCreation at 18", "INS SimpleName: PName to SimpleType: PName at 0", "INS MethodInvocation to ClassInstanceCreation at 28", "INS MethodInvocation to ClassInstanceCreation at 19", "INS SimpleName: isNamespaceMapped to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleType: SQLException to MethodDeclaration at 12", "INS SimpleName: PName to SimpleType: PName at 0", "INS SimpleName: getIndexDisableTimestamp to MethodInvocation at 1", "INS SimpleName: getParentSchemaName to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: tableName to SingleVariableDeclaration at 1", "INS SimpleName: table to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 11", "INS SimpleName: indexes to ClassInstanceCreation at 13", "INS SimpleName: tableName to ClassInstanceCreation at 3", "INS SimpleName: updateCacheFrequency to ClassInstanceCreation at 27", "INS MethodInvocation to ClassInstanceCreation at 25", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: table to MethodInvocation at 0", "INS Modifier: public to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS MethodInvocation to ClassInstanceCreation at 24", "INS ReturnStatement to Block at 0", "INS SimpleName: getBaseColumnCount to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleType: List to ParameterizedType: List<PName> at 0", "INS MethodInvocation to ClassInstanceCreation at 14", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: isAppendOnlySchema to MethodInvocation at 1", "INS SimpleName: isImmutableRows to MethodInvocation at 1", "INS SimpleName: tenantId to SingleVariableDeclaration at 1", "INS MethodInvocation to ClassInstanceCreation at 5", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS SimpleName: getIndexType to MethodInvocation at 1", "INS SimpleName: getDefaultFamilyName to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 9", "INS MethodInvocation to ClassInstanceCreation at 16", "INS ParameterizedType: List<PTable> to SingleVariableDeclaration at 0", "INS SimpleName: indexes to SingleVariableDeclaration at 1", "INS SimpleName: getPKName to MethodInvocation at 1", "INS Block to MethodDeclaration at 13", "INS SimpleName: isMultiTenant to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS MethodInvocation to ClassInstanceCreation at 9", "INS SimpleType: PTable to ParameterizedType: List<PTable> at 1", "INS MethodInvocation to ClassInstanceCreation at 8", "INS SimpleName: physicalNames to ClassInstanceCreation at 15", "INS SimpleName: PName to SimpleType: PName at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: getStoreNulls to MethodInvocation at 1", "INS SimpleType: PName to ParameterizedType: List<PName> at 1", "INS SimpleName: getIndexState to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: getAutoPartitionSeqName to MethodInvocation at 1", "INS SimpleName: List to SimpleType: List at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: index to SingleVariableDeclaration at 1", "INS SimpleName: PTable to SimpleType: PTable at 0", "INS SimpleType: PTable to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: PName to SimpleType: PName at 0", "INS SimpleType: PName to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: indexName to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 8", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 8", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: updateCacheFrequency to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 9", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 9", "INS SimpleType: PName to SingleVariableDeclaration at 0", "INS SimpleName: PName to SimpleType: PName at 0", "INS SimpleName: tenantId to SingleVariableDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: PName to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: PName to MethodDeclaration at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 22", "operations": ["INS NullLiteral to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 22", "INS SimpleName: parentSchemaName to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS SimpleName: getTableNameFromFullName to MethodInvocation at 1", "INS MethodInvocation to ConditionalExpression at 2", "INS InfixExpression: != to InfixExpression: || at 1", "INS SimpleName: getBytes to MethodInvocation at 1", "INS SimpleName: newName to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: != to InfixExpression: || at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: parentName to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: parentTableName to ConditionalExpression at 1", "INS SimpleName: getPhysicalName to MethodInvocation at 0", "INS SimpleName: type to InfixExpression: != at 0", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: PNameFactory to MethodInvocation at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS QualifiedName: PTableType.VIEW to InfixExpression: != at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS SimpleName: parentName to ConditionalExpression at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS SimpleName: type to InfixExpression: != at 0", "INS QualifiedName: PTableType.VIEW to InfixExpression: != at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ConditionalExpression to ReturnStatement at 0", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: getPhysicalName to MethodInvocation at 0", "INS InfixExpression: != to InfixExpression: || at 0", "INS InfixExpression: != to InfixExpression: || at 1", "INS SimpleName: parentName to InfixExpression: != at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: PName to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: PName to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: PName to VariableDeclarationStatement at 0", "INS SimpleName: PName to SimpleType: PName at 0"]}, {"root": "INS ConditionalExpression to ReturnStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: != to InfixExpression: || at 0", "INS InfixExpression: != to InfixExpression: || at 1", "INS SimpleName: type to InfixExpression: != at 0", "INS SimpleName: getSchemaNameFromFullName to MethodInvocation at 1", "INS SimpleName: getPhysicalName to MethodInvocation at 0", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS SimpleName: parentSchemaName to ConditionalExpression at 1", "INS SimpleName: newName to MethodInvocation at 1", "INS QualifiedName: PTableType.VIEW to InfixExpression: != at 1", "INS ParenthesizedExpression to ConditionalExpression at 0", "INS ConditionalExpression to ReturnStatement at 0", "INS SimpleName: PNameFactory to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: parentName to InfixExpression: != at 0", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getBytes to MethodInvocation at 1", "INS InfixExpression: || to ParenthesizedExpression at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "UPDATE from table to index", "operations": ["UPD SimpleName: table from table to index", "UPD SimpleName: table from table to index", "UPD SimpleName: table from table to index", "UPD SimpleName: table from table to index"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 12"]}, {"root": "UPDATE from schemaName to parentSchemaName", "operations": ["UPD SimpleName: schemaName from schemaName to parentSchemaName", "UPD SimpleName: schemaName from schemaName to parentSchemaName"]}, {"root": "UPDATE from dataTableName to parentTableName", "operations": ["UPD SimpleName: dataTableName from dataTableName to parentTableName", "UPD SimpleName: dataTableName from dataTableName to parentTableName", "UPD SimpleName: dataTableName from dataTableName to parentTableName"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: toByteArray to MethodInvocation at 1", "INS SimpleName: parentSchemaName to Assignment: = at 0", "INS MethodInvocation to ParenthesizedExpression at 0", "INS SimpleName: table to MethodInvocation at 0", "INS SimpleName: SchemaUtil to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getDataTableNameBytes to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS ParenthesizedExpression to MethodInvocation at 2", "INS SimpleName: newName to MethodInvocation at 1", "INS SimpleName: getSchemaNameFromFullName to MethodInvocation at 1", "INS SimpleName: PNameFactory to MethodInvocation at 0"]}, {"root": "UPDATE from getSchemaName to getParentSchemaName", "operations": ["UPD SimpleName: getSchemaName from getSchemaName to getParentSchemaName"]}, {"root": "INS SimpleName: index to MethodInvocation at 1", "operations": ["INS SimpleName: index to MethodInvocation at 1"]}, {"root": "UPDATE from table to indexName", "operations": ["UPD SimpleName: table from table to indexName"]}, {"root": "INS MethodInvocation to MethodInvocation at 4", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleName: Lists to MethodInvocation at 0", "INS SimpleName: getPhysicalName to MethodInvocation at 1", "INS SimpleName: index to MethodInvocation at 0", "INS SimpleName: newArrayList to MethodInvocation at 1"]}, {"root": "INS SimpleName: updateCacheFrequency to MethodInvocation at 7", "operations": ["INS SimpleName: updateCacheFrequency to MethodInvocation at 7"]}, {"root": "INS SimpleName: tenantId to MethodInvocation at 8", "operations": ["INS SimpleName: tenantId to MethodInvocation at 8"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: newName to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: PNameFactory to MethodInvocation at 0"]}, {"root": "INS ConditionalExpression to MethodInvocation at 2", "operations": ["INS SimpleName: parentSchemaName to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to ConditionalExpression at 0", "INS ConditionalExpression to MethodInvocation at 2", "INS NullLiteral to ConditionalExpression at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "UPDATE from PNameFactory to SchemaUtil", "operations": ["UPD SimpleName: PNameFactory from PNameFactory to SchemaUtil"]}, {"root": "UPDATE from newName to getTableNameFromFullName", "operations": ["UPD SimpleName: newName from newName to getTableNameFromFullName"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getParentName to MethodInvocation at 1", "INS SimpleName: table to MethodInvocation at 0"]}, {"root": "DEL SimpleName: parentTableName", "operations": ["DEL SimpleName: parentTableName"]}, {"root": "DEL SimpleName: parentName", "operations": ["DEL SimpleName: parentName"]}, {"root": "DEL SimpleName: parentSchemaName", "operations": ["DEL SimpleName: parentSchemaName"]}]}}, {"PTableImpl_diff": {"operations": ["Insert MethodDeclaration(1176) into TypeDeclaration: class(7138) at 58", "Insert SingleVariableDeclaration(1000) into MethodDeclaration(1048) at 4", "Insert SingleVariableDeclaration(1004) into MethodDeclaration(1048) at 5", "Insert SingleVariableDeclaration(1011) into MethodDeclaration(1048) at 7", "Insert SingleVariableDeclaration(1015) into MethodDeclaration(1048) at 8", "Insert Modifier: public(1049) into MethodDeclaration(1176) at 0", "Insert Modifier: static(1050) into MethodDeclaration(1176) at 1", "Insert SimpleType: PTableImpl(1052) into MethodDeclaration(1176) at 2", "Insert SimpleName: makePTable(1053) into MethodDeclaration(1176) at 3", "Move SingleVariableDeclaration(1000) into MethodDeclaration(1176) at 4", "Insert SingleVariableDeclaration(1061) into MethodDeclaration(1176) at 5", "Insert SingleVariableDeclaration(1064) into MethodDeclaration(1176) at 6", "Insert SingleVariableDeclaration(1071) into MethodDeclaration(1176) at 7", "Insert SingleVariableDeclaration(1078) into MethodDeclaration(1176) at 8", "Insert SingleVariableDeclaration(1082) into MethodDeclaration(1176) at 9", "Insert SingleVariableDeclaration(1085) into MethodDeclaration(1176) at 10", "Insert SingleVariableDeclaration(1089) into MethodDeclaration(1176) at 11", "Insert SimpleType: SQLException(1091) into MethodDeclaration(1176) at 12", "Insert Block(1175) into MethodDeclaration(1176) at 13", "Move MarkerAnnotation(5425) into MethodDeclaration(5592) at 0", "Move SimpleType: PName(5428) into MethodDeclaration(5592) at 3", "Move MarkerAnnotation(5415) into MethodDeclaration(5613) at 0", "Move SimpleType: PName(5418) into MethodDeclaration(5613) at 2", "Insert SimpleType: PTable(998) into SingleVariableDeclaration(1000) at 0", "Insert SimpleName: index(999) into SingleVariableDeclaration(1000) at 1", "Insert SimpleType: PName(1002) into SingleVariableDeclaration(1004) at 0", "Insert SimpleName: indexName(1003) into SingleVariableDeclaration(1004) at 1", "Insert PrimitiveType: long(1009) into SingleVariableDeclaration(1011) at 0", "Insert SimpleName: updateCacheFrequency(1010) into SingleVariableDeclaration(1011) at 1", "Insert SimpleType: PName(1013) into SingleVariableDeclaration(1015) at 0", "Insert SimpleName: tenantId(1014) into SingleVariableDeclaration(1015) at 1", "Insert SimpleName: PTableImpl(1051) into SimpleType: PTableImpl(1052) at 0", "Insert SimpleType: PName(1059) into SingleVariableDeclaration(1061) at 0", "Insert SimpleName: tableName(1060) into SingleVariableDeclaration(1061) at 1", "Insert PrimitiveType: long(1062) into SingleVariableDeclaration(1064) at 0", "Insert SimpleName: timeStamp(1063) into SingleVariableDeclaration(1064) at 1", "Insert ParameterizedType: List<PName>(1069) into SingleVariableDeclaration(1071) at 0", "Insert SimpleName: physicalNames(1070) into SingleVariableDeclaration(1071) at 1", "Insert ParameterizedType: List<PTable>(1076) into SingleVariableDeclaration(1078) at 0", "Insert SimpleName: indexes(1077) into SingleVariableDeclaration(1078) at 1", "Insert SimpleType: String(1080) into SingleVariableDeclaration(1082) at 0", "Insert SimpleName: viewStatement(1081) into SingleVariableDeclaration(1082) at 1", "Insert PrimitiveType: long(1083) into SingleVariableDeclaration(1085) at 0", "Insert SimpleName: updateCacheFrequency(1084) into SingleVariableDeclaration(1085) at 1", "Insert SimpleType: PName(1087) into SingleVariableDeclaration(1089) at 0", "Insert SimpleName: tenantId(1088) into SingleVariableDeclaration(1089) at 1", "Insert SimpleName: SQLException(1090) into SimpleType: SQLException(1091) at 0", "Insert ReturnStatement(1174) into Block(1175) at 0", "Insert VariableDeclarationStatement(6077) into Block(6435) at 22", "Insert SimpleName: PTable(997) into SimpleType: PTable(998) at 0", "Insert SimpleName: PName(1001) into SimpleType: PName(1002) at 0", "Insert SimpleName: PName(1012) into SimpleType: PName(1013) at 0", "Insert SimpleName: PName(1058) into SimpleType: PName(1059) at 0", "Insert SimpleType: List(1066) into ParameterizedType: List<PName>(1069) at 0", "Insert SimpleType: PName(1068) into ParameterizedType: List<PName>(1069) at 1", "Insert SimpleType: List(1073) into ParameterizedType: List<PTable>(1076) at 0", "Insert SimpleType: PTable(1075) into ParameterizedType: List<PTable>(1076) at 1", "Insert SimpleName: String(1079) into SimpleType: String(1080) at 0", "Insert SimpleName: PName(1086) into SimpleType: PName(1087) at 0", "Insert ClassInstanceCreation(1173) into ReturnStatement(1174) at 0", "Insert ConditionalExpression(5589) into ReturnStatement(5590) at 0", "Insert ConditionalExpression(5610) into ReturnStatement(5611) at 0", "Move SimpleType: PName(5893) into VariableDeclarationStatement(6077) at 0", "Insert VariableDeclarationFragment(6076) into VariableDeclarationStatement(6077) at 1", "Insert SimpleType: PName(6079) into VariableDeclarationStatement(6083) at 0", "Insert ConditionalExpression(6968) into ReturnStatement(6969) at 0", "Update SimpleName: table(1014) to index", "Insert SimpleName: List(1065) into SimpleType: List(1066) at 0", "Insert SimpleName: PName(1067) into SimpleType: PName(1068) at 0", "Insert SimpleName: List(1072) into SimpleType: List(1073) at 0", "Insert SimpleName: PTable(1074) into SimpleType: PTable(1075) at 0", "Insert SimpleType: PTableImpl(1093) into ClassInstanceCreation(1173) at 0", "Insert SimpleName: tenantId(1094) into ClassInstanceCreation(1173) at 1", "Move MethodInvocation(1025) into ClassInstanceCreation(1173) at 2", "Insert SimpleName: tableName(1098) into ClassInstanceCreation(1173) at 3", "Insert MethodInvocation(1101) into ClassInstanceCreation(1173) at 4", "Insert MethodInvocation(1104) into ClassInstanceCreation(1173) at 5", "Insert SimpleName: timeStamp(1105) into ClassInstanceCreation(1173) at 6", "Insert MethodInvocation(1108) into ClassInstanceCreation(1173) at 7", "Insert MethodInvocation(1111) into ClassInstanceCreation(1173) at 8", "Insert MethodInvocation(1114) into ClassInstanceCreation(1173) at 9", "Insert MethodInvocation(1117) into ClassInstanceCreation(1173) at 10", "Insert MethodInvocation(1120) into ClassInstanceCreation(1173) at 11", "Move MethodInvocation(6524) into ClassInstanceCreation(1173) at 12", "Insert SimpleName: indexes(1124) into ClassInstanceCreation(1173) at 13", "Insert MethodInvocation(1127) into ClassInstanceCreation(1173) at 14", "Insert SimpleName: physicalNames(1128) into ClassInstanceCreation(1173) at 15", "Insert MethodInvocation(1131) into ClassInstanceCreation(1173) at 16", "Insert SimpleName: viewStatement(1132) into ClassInstanceCreation(1173) at 17", "Insert MethodInvocation(1135) into ClassInstanceCreation(1173) at 18", "Insert MethodInvocation(1138) into ClassInstanceCreation(1173) at 19", "Insert MethodInvocation(1141) into ClassInstanceCreation(1173) at 20", "Insert MethodInvocation(1144) into ClassInstanceCreation(1173) at 21", "Insert MethodInvocation(1147) into ClassInstanceCreation(1173) at 22", "Insert MethodInvocation(1150) into ClassInstanceCreation(1173) at 23", "Insert MethodInvocation(1153) into ClassInstanceCreation(1173) at 24", "Insert MethodInvocation(1156) into ClassInstanceCreation(1173) at 25", "Insert MethodInvocation(1159) into ClassInstanceCreation(1173) at 26", "Insert SimpleName: updateCacheFrequency(1160) into ClassInstanceCreation(1173) at 27", "Insert MethodInvocation(1163) into ClassInstanceCreation(1173) at 28", "Insert MethodInvocation(1166) into ClassInstanceCreation(1173) at 29", "Insert MethodInvocation(1169) into ClassInstanceCreation(1173) at 30", "Insert MethodInvocation(1172) into ClassInstanceCreation(1173) at 31", "Update SimpleName: schemaName(2419) to parentSchemaName", "Insert ParenthesizedExpression(5577) into ConditionalExpression(5589) at 0", "Insert SimpleName: parentTableName(5578) into ConditionalExpression(5589) at 1", "Insert MethodInvocation(5588) into ConditionalExpression(5589) at 2", "Insert ParenthesizedExpression(5606) into ConditionalExpression(5610) at 0", "Insert SimpleName: parentName(5607) into ConditionalExpression(5610) at 1", "Insert MethodInvocation(5609) into ConditionalExpression(5610) at 2", "Insert SimpleName: parentSchemaName(6074) into VariableDeclarationFragment(6076) at 0", "Insert NullLiteral(6075) into VariableDeclarationFragment(6076) at 1", "Insert SimpleName: PName(6078) into SimpleType: PName(6079) at 0", "Update SimpleName: dataTableName(5894) to parentTableName", "Insert ExpressionStatement(6101) into Block(6116) at 0", "Insert ParenthesizedExpression(6956) into ConditionalExpression(6968) at 0", "Insert SimpleName: parentSchemaName(6957) into ConditionalExpression(6968) at 1", "Insert MethodInvocation(6967) into ConditionalExpression(6968) at 2", "Update SimpleName: getSchemaName(983) to getParentSchemaName", "Insert SimpleName: index(1027) into MethodInvocation(1044) at 1", "Update SimpleName: table(1016) to indexName", "Insert MethodInvocation(1037) into MethodInvocation(1044) at 4", "Insert SimpleName: updateCacheFrequency(1042) into MethodInvocation(1044) at 7", "Insert SimpleName: tenantId(1043) into MethodInvocation(1044) at 8", "Insert SimpleName: PTableImpl(1092) into SimpleType: PTableImpl(1093) at 0", "Insert SimpleName: table(1099) into MethodInvocation(1101) at 0", "Insert SimpleName: getType(1100) into MethodInvocation(1101) at 1", "Insert SimpleName: table(1102) into MethodInvocation(1104) at 0", "Insert SimpleName: getIndexState(1103) into MethodInvocation(1104) at 1", "Insert SimpleName: table(1106) into MethodInvocation(1108) at 0", "Insert SimpleName: getSequenceNumber(1107) into MethodInvocation(1108) at 1", "Insert SimpleName: table(1109) into MethodInvocation(1111) at 0", "Insert SimpleName: getPKName(1110) into MethodInvocation(1111) at 1", "Insert SimpleName: table(1112) into MethodInvocation(1114) at 0", "Insert SimpleName: getBucketNum(1113) into MethodInvocation(1114) at 1", "Insert SimpleName: getColumnsToClone(1115) into MethodInvocation(1117) at 0", "Insert SimpleName: table(1116) into MethodInvocation(1117) at 1", "Insert SimpleName: table(1118) into MethodInvocation(1120) at 0", "Insert SimpleName: getParentSchemaName(1119) into MethodInvocation(1120) at 1", "Insert SimpleName: table(1125) into MethodInvocation(1127) at 0", "Insert SimpleName: isImmutableRows(1126) into MethodInvocation(1127) at 1", "Insert SimpleName: table(1129) into MethodInvocation(1131) at 0", "Insert SimpleName: getDefaultFamilyName(1130) into MethodInvocation(1131) at 1", "Insert SimpleName: table(1133) into MethodInvocation(1135) at 0", "Insert SimpleName: isWALDisabled(1134) into MethodInvocation(1135) at 1", "Insert SimpleName: table(1136) into MethodInvocation(1138) at 0", "Insert SimpleName: isMultiTenant(1137) into MethodInvocation(1138) at 1", "Insert SimpleName: table(1139) into MethodInvocation(1141) at 0", "Insert SimpleName: getStoreNulls(1140) into MethodInvocation(1141) at 1", "Insert SimpleName: table(1142) into MethodInvocation(1144) at 0", "Insert SimpleName: getViewType(1143) into MethodInvocation(1144) at 1", "Insert SimpleName: table(1145) into MethodInvocation(1147) at 0", "Insert SimpleName: getViewIndexId(1146) into MethodInvocation(1147) at 1", "Insert SimpleName: table(1148) into MethodInvocation(1150) at 0", "Insert SimpleName: getIndexType(1149) into MethodInvocation(1150) at 1", "Insert SimpleName: table(1151) into MethodInvocation(1153) at 0", "Insert SimpleName: getBaseColumnCount(1152) into MethodInvocation(1153) at 1", "Insert SimpleName: table(1154) into MethodInvocation(1156) at 0", "Insert SimpleName: rowKeyOrderOptimizable(1155) into MethodInvocation(1156) at 1", "Insert SimpleName: table(1157) into MethodInvocation(1159) at 0", "Insert SimpleName: isTransactional(1158) into MethodInvocation(1159) at 1", "Insert SimpleName: table(1161) into MethodInvocation(1163) at 0", "Insert SimpleName: getIndexDisableTimestamp(1162) into MethodInvocation(1163) at 1", "Insert SimpleName: table(1164) into MethodInvocation(1166) at 0", "Insert SimpleName: isNamespaceMapped(1165) into MethodInvocation(1166) at 1", "Insert SimpleName: table(1167) into MethodInvocation(1169) at 0", "Insert SimpleName: getAutoPartitionSeqName(1168) into MethodInvocation(1169) at 1", "Insert SimpleName: table(1170) into MethodInvocation(1172) at 0", "Insert SimpleName: isAppendOnlySchema(1171) into MethodInvocation(1172) at 1", "Insert InfixExpression: ||(5576) into ParenthesizedExpression(5577) at 0", "Insert SimpleName: PNameFactory(5579) into MethodInvocation(5588) at 0", "Insert SimpleName: newName(5580) into MethodInvocation(5588) at 1", "Insert MethodInvocation(5587) into MethodInvocation(5588) at 2", "Insert InfixExpression: ||(5605) into ParenthesizedExpression(5606) at 0", "Insert SimpleName: getPhysicalName(5608) into MethodInvocation(5609) at 0", "Insert Assignment: =(6100) into ExpressionStatement(6101) at 0", "Insert InfixExpression: ||(6955) into ParenthesizedExpression(6956) at 0", "Insert SimpleName: PNameFactory(6958) into MethodInvocation(6967) at 0", "Insert SimpleName: newName(6959) into MethodInvocation(6967) at 1", "Insert MethodInvocation(6966) into MethodInvocation(6967) at 2", "Update SimpleName: table(1010) to index", "Update SimpleName: table(1017) to index", "Insert SimpleName: Lists(1032) into MethodInvocation(1037) at 0", "Insert SimpleName: newArrayList(1033) into MethodInvocation(1037) at 1", "Insert MethodInvocation(1036) into MethodInvocation(1037) at 2", "Update SimpleName: table(1020) to index", "Insert InfixExpression: !=(5572) into InfixExpression: ||(5576) at 0", "Insert InfixExpression: !=(5575) into InfixExpression: ||(5576) at 1", "Insert SimpleName: SchemaUtil(5581) into MethodInvocation(5587) at 0", "Insert SimpleName: getTableNameFromFullName(5582) into MethodInvocation(5587) at 1", "Insert MethodInvocation(5586) into MethodInvocation(5587) at 2", "Insert InfixExpression: !=(5601) into InfixExpression: ||(5605) at 0", "Insert InfixExpression: !=(5604) into InfixExpression: ||(5605) at 1", "Insert SimpleName: parentSchemaName(6087) into Assignment: =(6100) at 0", "Insert MethodInvocation(6099) into Assignment: =(6100) at 1", "Update SimpleName: dataTableName(5901) to parentTableName", "Insert MethodInvocation(6113) into Assignment: =(6114) at 1", "Update SimpleName: schemaName(6193) to parentSchemaName", "Update SimpleName: dataTableName(6194) to parentTableName", "Insert InfixExpression: !=(6951) into InfixExpression: ||(6955) at 0", "Insert InfixExpression: !=(6954) into InfixExpression: ||(6955) at 1", "Insert SimpleName: SchemaUtil(6960) into MethodInvocation(6966) at 0", "Insert SimpleName: getSchemaNameFromFullName(6961) into MethodInvocation(6966) at 1", "Insert MethodInvocation(6965) into MethodInvocation(6966) at 2", "Insert SimpleName: index(1034) into MethodInvocation(1036) at 0", "Insert SimpleName: getPhysicalName(1035) into MethodInvocation(1036) at 1", "Insert ConditionalExpression(3716) into MethodInvocation(3720) at 2", "Insert SimpleName: type(5570) into InfixExpression: !=(5572) at 0", "Insert QualifiedName: PTableType.VIEW(5571) into InfixExpression: !=(5572) at 1", "Insert SimpleName: parentName(5573) into InfixExpression: !=(5575) at 0", "Insert NullLiteral(5574) into InfixExpression: !=(5575) at 1", "Insert MethodInvocation(5584) into MethodInvocation(5586) at 0", "Insert SimpleName: getBytes(5585) into MethodInvocation(5586) at 1", "Insert SimpleName: type(5599) into InfixExpression: !=(5601) at 0", "Insert QualifiedName: PTableType.VIEW(5600) into InfixExpression: !=(5601) at 1", "Insert SimpleName: parentName(5602) into InfixExpression: !=(5604) at 0", "Insert NullLiteral(5603) into InfixExpression: !=(5604) at 1", "Insert SimpleName: PNameFactory(6088) into MethodInvocation(6099) at 0", "Insert SimpleName: newName(6089) into MethodInvocation(6099) at 1", "Insert MethodInvocation(6098) into MethodInvocation(6099) at 2", "Insert SimpleName: PNameFactory(6103) into MethodInvocation(6113) at 0", "Insert SimpleName: newName(6104) into MethodInvocation(6113) at 1", "Move MethodInvocation(5909) into MethodInvocation(6113) at 2", "Insert SimpleName: type(6949) into InfixExpression: !=(6951) at 0", "Insert QualifiedName: PTableType.VIEW(6950) into InfixExpression: !=(6951) at 1", "Insert SimpleName: parentName(6952) into InfixExpression: !=(6954) at 0", "Insert NullLiteral(6953) into InfixExpression: !=(6954) at 1", "Insert MethodInvocation(6963) into MethodInvocation(6965) at 0", "Insert SimpleName: getBytes(6964) into MethodInvocation(6965) at 1", "Insert InfixExpression: !=(3711) into ConditionalExpression(3716) at 0", "Move MethodInvocation(3566) into ConditionalExpression(3716) at 1", "Insert NullLiteral(3715) into ConditionalExpression(3716) at 2", "Insert SimpleName: getPhysicalName(5583) into MethodInvocation(5584) at 0", "Insert SimpleName: SchemaUtil(6090) into MethodInvocation(6098) at 0", "Insert SimpleName: getSchemaNameFromFullName(6091) into MethodInvocation(6098) at 1", "Insert ParenthesizedExpression(6097) into MethodInvocation(6098) at 2", "Update SimpleName: PNameFactory(5902) to SchemaUtil", "Update SimpleName: newName(5903) to getTableNameFromFullName", "Insert MethodInvocation(6728) into MethodInvocation(6730) at 0", "Insert SimpleName: getPhysicalName(6962) into MethodInvocation(6963) at 0", "Insert SimpleName: parentSchemaName(3709) into InfixExpression: !=(3711) at 0", "Insert NullLiteral(3710) into InfixExpression: !=(3711) at 1", "Insert MethodInvocation(6096) into ParenthesizedExpression(6097) at 0", "Insert SimpleName: table(6726) into MethodInvocation(6728) at 0", "Insert SimpleName: getParentName(6727) into MethodInvocation(6728) at 1", "Insert MethodInvocation(6094) into MethodInvocation(6096) at 0", "Insert SimpleName: toByteArray(6095) into MethodInvocation(6096) at 1", "Insert SimpleName: table(6092) into MethodInvocation(6094) at 0", "Insert SimpleName: getDataTableNameBytes(6093) into MethodInvocation(6094) at 1", "Delete SimpleName: parentTableName(5420)", "Delete SimpleName: parentName(5430)", "Delete SimpleName: parentSchemaName(6745)"]}}], "commit_stats": [{"total_files": 9, "deleted_files": 0, "testing": "False", "maintenance": "True", "build": "False"}]}