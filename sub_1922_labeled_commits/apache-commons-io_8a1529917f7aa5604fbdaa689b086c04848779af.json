{"application": "apache-commons-io", "csha": "8a1529917f7aa5604fbdaa689b086c04848779af", "files": [{"XmlStreamReader_cluster": {"actions": [{"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6"]}, {"root": "INS Block to MethodDeclaration at 8", "operations": ["INS Block to MethodDeclaration at 8"]}, {"root": "INS SimpleType: String to MethodDeclaration at 2", "operations": ["INS SimpleType: String to MethodDeclaration at 2", "INS SimpleName: String to SimpleType: String at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "INS TagElement: @return to Javadoc at 4", "operations": ["INS TagElement: @return to Javadoc at 4", "INS TextElement:  the encoding to TagElement: @return at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 1", "MOV IfStatement to Block at 2", "MOV IfStatement to Block at 3"]}, {"root": "INS ReturnStatement to Block at 4", "operations": ["INS SimpleName: encoding to ReturnStatement at 0", "INS ReturnStatement to Block at 4"]}, {"root": "INS TryStatement to Block at 5", "operations": ["INS Block to TryStatement at 0", "INS TryStatement to Block at 5"]}, {"root": "INS TryStatement to Block at 5", "operations": ["INS TryStatement to Block at 5", "INS Block to TryStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1"]}, {"root": "INS Block to IfStatement at 2", "operations": ["INS Block to IfStatement at 2"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS Block to CatchClause at 1", "operations": ["INS IfStatement to Block at 0", "INS SimpleName: lenient to IfStatement at 0", "INS Block to CatchClause at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 3"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getInputStream to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "INS SimpleName: lenient to IfStatement at 0", "operations": ["INS SimpleName: lenient to IfStatement at 0"]}, {"root": "UPDATE from is to conn", "operations": ["UPD SimpleName: is from is to conn"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: is to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: getXmlEncoding to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: ex to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: getBomEncoding to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 4", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: ex to MethodInvocation at 0", "INS SimpleName: getXmlGuessEncoding to MethodInvocation at 1", "INS SimpleName: ex to MethodInvocation at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS ThisExpression to FieldAccess at 0", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: encoding to FieldAccess at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV FieldAccess to Assignment: = at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from doHttpStream to calculateHttpEncoding", "operations": ["UPD SimpleName: doHttpStream from doHttpStream to calculateHttpEncoding"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV BooleanLiteral: true to MethodInvocation at 5", "MOV SimpleName: httpContentType to MethodInvocation at 1", "MOV SimpleName: doHttpStream to MethodInvocation at 0"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: ex", "DEL SimpleName: ex", "DEL NullLiteral", "DEL CatchClause", "DEL Block", "DEL SimpleType: XmlStreamReaderException", "DEL SimpleName: XmlStreamReaderException", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: doLenientDetection", "DEL TryStatement", "DEL Block", "DEL SimpleName: is", "DEL Block", "DEL IfStatement", "DEL PrefixExpression: !", "DEL SimpleName: lenient"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: is", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: InputStream", "DEL SimpleType: InputStream"]}, {"root": "DEL SimpleName: is", "operations": ["DEL SimpleName: is"]}, {"root": "DEL Block", "operations": ["DEL SimpleType: XmlStreamReaderException", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: is", "DEL SimpleName: doLenientDetection", "DEL Block", "DEL CatchClause", "DEL TryStatement", "DEL SimpleName: contentType", "DEL ExpressionStatement", "DEL SimpleName: ex", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: ex", "DEL SimpleName: XmlStreamReaderException"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL Block", "DEL TryStatement"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL Block", "DEL TryStatement"]}, {"root": "DEL PrimitiveType: void", "operations": ["DEL PrimitiveType: void"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: is"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL NullLiteral", "DEL SimpleName: ex", "DEL ExpressionStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: reader", "DEL SimpleName: ex", "DEL NullLiteral", "DEL SimpleName: InputStreamReader", "DEL SimpleName: encoding", "DEL ThisExpression", "DEL SimpleType: InputStreamReader", "DEL SimpleName: is", "DEL Block", "DEL IfStatement", "DEL FieldAccess", "DEL ClassInstanceCreation", "DEL SimpleName: encoding", "DEL Assignment: =", "DEL Assignment: =", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL ExpressionStatement"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL PrefixExpression: !", "DEL SimpleName: lenient"]}]}}, {"XmlStreamReader_diff": {"operations": ["Move Block(379) into MethodDeclaration(380) at 6", "Insert Block(611) into MethodDeclaration(612) at 8", "Insert SimpleType: String(697) into MethodDeclaration(802) at 2", "Move ExpressionStatement(373) into Block(379) at 0", "Move ExpressionStatement(657) into Block(611) at 0", "Move ExpressionStatement(663) into Block(611) at 1", "Insert TagElement: @return(690) into Javadoc(694) at 4", "Insert SimpleName: String(696) into SimpleType: String(697) at 0", "Move VariableDeclarationStatement(842) into Block(801) at 1", "Move IfStatement(853) into Block(801) at 2", "Move IfStatement(868) into Block(801) at 3", "Insert ReturnStatement(800) into Block(801) at 4", "Insert TryStatement(988) into Block(999) at 5", "Insert TryStatement(1119) into Block(1130) at 5", "Insert Block(477) into IfStatement(486) at 1", "Insert Block(485) into IfStatement(486) at 2", "Insert TextElement:  the encoding(689) into TagElement: @return(690) at 0", "Insert SimpleName: encoding(799) into ReturnStatement(800) at 0", "Insert Block(965) into TryStatement(988) at 0", "Move CatchClause(536) into TryStatement(988) at 1", "Insert Block(1096) into TryStatement(1119) at 0", "Move CatchClause(683) into TryStatement(1119) at 1", "Move ExpressionStatement(503) into Block(477) at 0", "Move ExpressionStatement(523) into Block(485) at 0", "Move ExpressionStatement(1050) into Block(965) at 0", "Insert Block(986) into CatchClause(987) at 1", "Move ExpressionStatement(1157) into Block(1096) at 0", "Insert IfStatement(985) into Block(986) at 0", "Move Block(673) into IfStatement(1116) at 3", "Insert MethodInvocation(472) into MethodInvocation(475) at 1", "Move MethodInvocation(479) into MethodInvocation(483) at 1", "Insert SimpleName: lenient(970) into IfStatement(985) at 0", "Move Block(535) into IfStatement(985) at 1", "Move Block(388) into IfStatement(985) at 2", "Insert SimpleName: lenient(1101) into IfStatement(1116) at 0", "Update SimpleName: is(499) to conn", "Move SimpleName: is(499) into MethodInvocation(472) at 0", "Insert SimpleName: getInputStream(471) into MethodInvocation(472) at 1", "Insert ReturnStatement(748) into Block(749) at 0", "Insert Assignment: =(979) into ExpressionStatement(980) at 0", "Insert Assignment: =(1110) into ExpressionStatement(1111) at 0", "Insert MethodInvocation(747) into ReturnStatement(748) at 0", "Move FieldAccess(871) into Assignment: =(979) at 0", "Move MethodInvocation(533) into Assignment: =(979) at 1", "Insert FieldAccess(1104) into Assignment: =(1110) at 0", "Move MethodInvocation(678) into Assignment: =(1110) at 1", "Update SimpleName: doHttpStream(806) to calculateHttpEncoding", "Move SimpleName: doHttpStream(806) into MethodInvocation(747) at 0", "Move SimpleName: httpContentType(808) into MethodInvocation(747) at 1", "Insert MethodInvocation(739) into MethodInvocation(747) at 2", "Insert MethodInvocation(742) into MethodInvocation(747) at 3", "Insert MethodInvocation(745) into MethodInvocation(747) at 4", "Move BooleanLiteral: true(809) into MethodInvocation(747) at 5", "Insert ThisExpression(1102) into FieldAccess(1104) at 0", "Insert SimpleName: encoding(1103) into FieldAccess(1104) at 1", "Insert SimpleName: ex(737) into MethodInvocation(739) at 0", "Insert SimpleName: getBomEncoding(738) into MethodInvocation(739) at 1", "Insert SimpleName: ex(740) into MethodInvocation(742) at 0", "Insert SimpleName: getXmlGuessEncoding(741) into MethodInvocation(742) at 1", "Insert SimpleName: ex(743) into MethodInvocation(745) at 0", "Insert SimpleName: getXmlEncoding(744) into MethodInvocation(745) at 1", "Delete SimpleName: XmlStreamReaderException(380)", "Delete SimpleType: XmlStreamReaderException(381)", "Delete SimpleName: ex(382)", "Delete SingleVariableDeclaration(383)", "Delete SimpleName: lenient(384)", "Delete PrefixExpression: !(385)", "Delete SimpleName: doLenientDetection(389)", "Delete NullLiteral(390)", "Delete SimpleName: is(391)", "Delete SimpleName: ex(392)", "Delete MethodInvocation(393)", "Delete ExpressionStatement(394)", "Delete Block(395)", "Delete IfStatement(396)", "Delete Block(397)", "Delete CatchClause(398)", "Delete TryStatement(399)", "Delete Block(400)", "Delete SimpleName: InputStream(474)", "Delete SimpleType: InputStream(475)", "Delete SimpleName: is(476)", "Delete VariableDeclarationFragment(480)", "Delete VariableDeclarationStatement(481)", "Delete SimpleName: is(520)", "Delete Block(504)", "Delete SimpleName: XmlStreamReaderException(505)", "Delete SimpleType: XmlStreamReaderException(506)", "Delete SimpleName: ex(507)", "Delete SingleVariableDeclaration(508)", "Delete SimpleName: doLenientDetection(509)", "Delete SimpleName: contentType(510)", "Delete SimpleName: is(511)", "Delete SimpleName: ex(512)", "Delete MethodInvocation(513)", "Delete ExpressionStatement(514)", "Delete Block(515)", "Delete CatchClause(516)", "Delete TryStatement(517)", "Delete Block(518)", "Delete Block(524)", "Delete TryStatement(537)", "Delete Block(538)", "Delete Block(664)", "Delete TryStatement(684)", "Delete Block(685)", "Delete PrimitiveType: void(768)", "Delete SimpleName: is(807)", "Delete MethodInvocation(810)", "Delete ExpressionStatement(811)", "Delete SimpleName: ex(812)", "Delete NullLiteral(813)", "Delete Assignment: =(814)", "Delete ExpressionStatement(815)", "Delete SimpleName: ex(832)", "Delete NullLiteral(833)", "Delete InfixExpression: !=(834)", "Delete SimpleName: encoding(872)", "Delete Assignment: =(873)", "Delete ExpressionStatement(874)", "Delete ThisExpression(875)", "Delete SimpleName: reader(876)", "Delete FieldAccess(877)", "Delete SimpleName: InputStreamReader(878)", "Delete SimpleType: InputStreamReader(879)", "Delete SimpleName: is(880)", "Delete SimpleName: encoding(881)", "Delete ClassInstanceCreation(882)", "Delete Assignment: =(883)", "Delete ExpressionStatement(884)", "Delete Block(885)", "Delete IfStatement(886)", "Delete SimpleName: lenient(669)", "Delete PrefixExpression: !(670)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}