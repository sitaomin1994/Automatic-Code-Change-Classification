{"application": "google-closure-templates", "csha": "7c0ee50bb8987354f29e4b94ead40ceb89234e43", "files": [{"SoyFileSet_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 6"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV QualifiedName: SyntaxVersion.V2_0 to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: passManagerBuilder", "DEL SimpleName: enhableHtmlRewriting", "DEL MethodInvocation", "DEL MethodInvocation"]}]}}, {"SoyFileSet_diff": {"operations": ["Move VariableDeclarationStatement(3473) into Block(3498) at 6", "Move QualifiedName: SyntaxVersion.V2_0(3459) into MethodInvocation(3459) at 1", "Delete SimpleName: passManagerBuilder(3458)", "Delete MethodInvocation(3460)", "Delete SimpleName: enhableHtmlRewriting(3461)", "Delete MethodInvocation(3462)"]}}, {"GenIncrementalDomCodeVisitor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 26", "MOV ImportDeclaration to CompilationUnit at 28", "MOV ImportDeclaration to CompilationUnit at 29", "MOV ImportDeclaration to CompilationUnit at 27"]}, {"root": "UPDATE from com.google.template.soy.soytree.HtmlAttributeNode to com.google.template.soy.html.HtmlDefinitions", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.HtmlAttributeNode from com.google.template.soy.soytree.HtmlAttributeNode to com.google.template.soy.html.HtmlDefinitions"]}, {"root": "UPDATE from com.google.template.soy.soytree.HtmlAttributeValueNode to com.google.template.soy.html.IncrementalHtmlAttributeNode", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.HtmlAttributeValueNode from com.google.template.soy.soytree.HtmlAttributeValueNode to com.google.template.soy.html.IncrementalHtmlAttributeNode"]}, {"root": "UPDATE from com.google.template.soy.soytree.HtmlCloseTagNode to com.google.template.soy.html.IncrementalHtmlCloseTagNode", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.HtmlCloseTagNode from com.google.template.soy.soytree.HtmlCloseTagNode to com.google.template.soy.html.IncrementalHtmlCloseTagNode"]}, {"root": "UPDATE from com.google.template.soy.soytree.HtmlOpenTagNode to com.google.template.soy.html.IncrementalHtmlOpenTagNode", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.HtmlOpenTagNode from com.google.template.soy.soytree.HtmlOpenTagNode to com.google.template.soy.html.IncrementalHtmlOpenTagNode"]}, {"root": "UPDATE from visitHtmlAttributeNode to visitIncrementalHtmlAttributeNode", "operations": ["UPD SimpleName: visitHtmlAttributeNode from visitHtmlAttributeNode to visitIncrementalHtmlAttributeNode"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TagElement to Javadoc at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: Returns a list of attribute values.  to TagElement at 0"]}, {"root": "UPDATE from visitHtmlOpenTagNode to visitIncrementalHtmlOpenTagNode", "operations": ["UPD SimpleName: visitHtmlOpenTagNode from visitHtmlOpenTagNode to visitIncrementalHtmlOpenTagNode"]}, {"root": "UPDATE from visitHtmlCloseTagNode to visitIncrementalHtmlCloseTagNode", "operations": ["UPD SimpleName: visitHtmlCloseTagNode from visitHtmlCloseTagNode to visitIncrementalHtmlCloseTagNode"]}, {"root": "UPDATE from HtmlAttributeNode to IncrementalHtmlAttributeNode", "operations": ["UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleType: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleType: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleType: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleType: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleType: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "operations": ["UPD SimpleName: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "UPD SimpleName: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "UPD SimpleName: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "UPD SimpleType: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "UPD SimpleType: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "UPD SimpleName: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "UPD SimpleName: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "UPD SimpleType: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 7"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS IfStatement to Block at 3", "INS SimpleName: getChildren to MethodInvocation at 1", "INS SimpleName: add to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: keyValue to MethodInvocation at 2", "INS SimpleName: node to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: keyValue to VariableDeclarationFragment at 0", "INS SimpleType: CodeChunk.WithValue to VariableDeclarationStatement at 0", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: keyValue to InfixExpression: != at 0", "INS InfixExpression: != to IfStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS QualifiedName: CodeChunk.WithValue to SimpleType: CodeChunk.WithValue at 0", "INS SimpleName: args to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: args to MethodInvocation at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS SimpleName: add to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 2", "INS NullLiteral to InfixExpression: != at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from HtmlCloseTagNode to IncrementalHtmlCloseTagNode", "operations": ["UPD SimpleName: HtmlCloseTagNode from HtmlCloseTagNode to IncrementalHtmlCloseTagNode", "UPD SimpleName: HtmlCloseTagNode from HtmlCloseTagNode to IncrementalHtmlCloseTagNode", "UPD SimpleType: HtmlCloseTagNode from HtmlCloseTagNode to IncrementalHtmlCloseTagNode"]}, {"root": "UPDATE from . The attribute nodes will typically be children of the to . The attribute nodes will typically be children", "operations": ["UPD TextElement: . The attribute nodes will typically be children of the from . The attribute nodes will typically be children of the to . The attribute nodes will typically be children"]}, {"root": "UPDATE from corresponding  to of the corresponding ", "operations": ["UPD TextElement: corresponding  from corresponding  to of the corresponding "]}, {"root": "UPDATE from  or in a let/param of kind attributes, e.g. to  or in a let/param of kind attributes,", "operations": ["UPD TextElement:  or in a let/param of kind attributes, e.g. from  or in a let/param of kind attributes, e.g. to  or in a let/param of kind attributes,"]}, {"root": "INS TextElement: e.g. to TagElement at 6", "operations": ["INS TextElement: e.g. to TagElement at 6"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleName: isEmpty to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "UPDATE from , which occurs when an HTML tag is opened with no conditional to , which occurs when an HTML tag is opened with no", "operations": ["UPD TextElement: , which occurs when an HTML tag is opened with no conditional from , which occurs when an HTML tag is opened with no conditional to , which occurs when an HTML tag is opened with no"]}, {"root": "UPDATE from attributes. For example: to conditional attributes. For example:", "operations": ["UPD TextElement: attributes. For example: from attributes. For example: to conditional attributes. For example:"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to IfStatement at 0", "INS QualifiedName: HtmlDefinitions.HTML5_VOID_ELEMENTS to MethodInvocation at 0", "INS SimpleName: contains to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "UPDATE from , which occurs when an HTML tag is closed. For example: to , which occurs when an HTML tag is closed. For", "operations": ["UPD TextElement: , which occurs when an HTML tag is closed. For example: from , which occurs when an HTML tag is closed. For example: to , which occurs when an HTML tag is closed. For"]}, {"root": "INS TextElement: example: to TagElement at 3", "operations": ["INS TextElement: example: to TagElement at 3"]}, {"root": "UPDATE from value to node", "operations": ["UPD SimpleName: value from value to node", "UPD SimpleName: attrName from attrName to node", "UPD SimpleName: numChildren from numChildren to node", "UPD SimpleName: emitClose from emitClose to node", "UPD SimpleName: value from value to node"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 4"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 0", "MOV SimpleName: hasValue to MethodInvocation at 1"]}, {"root": "UPDATE from hasValue to getChildren", "operations": ["UPD SimpleName: hasValue from hasValue to getChildren"]}, {"root": "INS ParameterizedType: List<CodeChunk.WithValue> to VariableDeclarationStatement at 0", "operations": ["INS ParameterizedType: List<CodeChunk.WithValue> to VariableDeclarationStatement at 0", "INS QualifiedName: CodeChunk.WithValue to SimpleType: CodeChunk.WithValue at 0", "INS SimpleType: List to ParameterizedType: List<CodeChunk.WithValue> at 0", "INS SimpleType: CodeChunk.WithValue to ParameterizedType: List<CodeChunk.WithValue> at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: emitClose to MethodInvocation at 0", "MOV SimpleName: tagName to MethodInvocation at 1"]}, {"root": "UPDATE from tagName to getTagName", "operations": ["UPD SimpleName: tagName from tagName to getTagName", "UPD SimpleName: tagName from tagName to getTagName"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to IfStatement at 0", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: equals to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS QualifiedName: HtmlDefinitions.HTML5_VOID_ELEMENTS to MethodInvocation at 0", "operations": ["INS QualifiedName: HtmlDefinitions.HTML5_VOID_ELEMENTS to MethodInvocation at 0"]}, {"root": "UPDATE from getStaticTagName to contains", "operations": ["UPD SimpleName: getStaticTagName from getStaticTagName to contains"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from tagName to args", "operations": ["UPD SimpleName: tagName from tagName to args", "UPD SimpleName: ImmutableList from ImmutableList to args"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ParameterizedType: ArrayList<> to ClassInstanceCreation at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<> at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: node to MethodInvocation at 0"]}, {"root": "UPDATE from getStaticTagName to emitClose", "operations": ["UPD SimpleName: getStaticTagName from getStaticTagName to emitClose", "UPD SimpleName: isDefinitelyVoid from isDefinitelyVoid to emitClose"]}, {"root": "UPDATE from ImmutableList to KEY_ATTRIBUTE_NAME", "operations": ["UPD SimpleName: ImmutableList from ImmutableList to KEY_ATTRIBUTE_NAME"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ImmutableList to MethodInvocation at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS VariableDeclarationStatement to Block at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: chunks to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "UPDATE from definitelyMatchesAttributeName to getName", "operations": ["UPD SimpleName: definitelyMatchesAttributeName from definitelyMatchesAttributeName to getName", "UPD SimpleName: getRawText from getRawText to getName"]}, {"root": "UPDATE from String to List", "operations": ["UPD SimpleName: String from String to List"]}, {"root": "MOVE from SimpleType: List", "operations": ["MOV SimpleName: String to SimpleType: List at 0"]}, {"root": "UPDATE from isDefinitelyVoid to stringLiteral", "operations": ["UPD SimpleName: isDefinitelyVoid from isDefinitelyVoid to stringLiteral"]}, {"root": "UPDATE from node to maybeGetKeyNodeValue", "operations": ["UPD SimpleName: node from node to maybeGetKeyNodeValue"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 0", "MOV SimpleName: numChildren to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ImmutableList to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: tagName to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: htmlAttributeNode to MethodInvocation at 0", "MOV SimpleName: definitelyMatchesAttributeName to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV ParameterizedType: List<CodeChunk.WithValue> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from value to htmlAttributeNode", "operations": ["UPD SimpleName: value from value to htmlAttributeNode", "UPD SimpleName: value from value to htmlAttributeNode"]}, {"root": "UPDATE from \"Attribute values that cannot be evalutated to simple expressions is not yet\" to \"Attribute values that cannot be evalutated to simple expressions is not yet supported \"", "operations": ["UPD StringLiteral: \"Attribute values that cannot be evalutated to simple expressions is not yet\" from \"Attribute values that cannot be evalutated to simple expressions is not yet\" to \"Attribute values that cannot be evalutated to simple expressions is not yet supported \""]}, {"root": "UPDATE from \" supported  for Incremental DOM code generation\" to \"for Incremental DOM code generation\"", "operations": ["UPD StringLiteral: \" supported  for Incremental DOM code generation\" from \" supported  for Incremental DOM code generation\" to \"for Incremental DOM code generation\""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: value to MethodInvocation at 2", "MOV SimpleName: genJsExprsVisitor to MethodInvocation at 0", "MOV SimpleName: execOnChildren to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.SoyNode.Kind", "DEL ImportDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: SoyNode", "DEL Modifier: protected", "DEL MethodDeclaration", "DEL SimpleName: getKind", "DEL StringLiteral: \"error from : \"", "DEL TryStatement", "DEL SimpleName: e", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: visit", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleType: RuntimeException", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: node", "DEL CatchClause", "DEL InfixExpression: +", "DEL SimpleName: SoyNode", "DEL SimpleName: RuntimeException", "DEL PrimitiveType: void", "DEL SuperMethodInvocation", "DEL SimpleType: Error", "DEL ExpressionStatement", "DEL SimpleName: Error", "DEL StringLiteral: \" @ \"", "DEL SimpleName: Override", "DEL Block", "DEL SimpleName: e", "DEL MarkerAnnotation", "DEL SimpleName: visit", "DEL SimpleName: node", "DEL SingleVariableDeclaration"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleType: RawTextNode", "DEL SimpleName: getChild", "DEL CastExpression", "DEL SimpleName: visitChildren", "DEL SimpleName: node", "DEL SimpleName: getKind", "DEL SimpleName: attrName", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleName: getChild", "DEL NumberLiteral: 0", "DEL InfixExpression: ==", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: hasValue", "DEL SimpleName: node", "DEL InfixExpression: ||", "DEL QualifiedName: Kind.RAW_TEXT_NODE", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: RawTextNode", "DEL MethodInvocation", "DEL SimpleName: node", "DEL Block", "DEL SimpleName: RawTextNode", "DEL SimpleType: RawTextNode"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: protected", "DEL PrimitiveType: void", "DEL SimpleName: visitHtmlAttributeValueNode", "DEL MarkerAnnotation", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: node", "DEL SimpleType: HtmlAttributeValueNode", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: HtmlAttributeValueNode"]}, {"root": "DEL PrefixExpression: !", "operations": ["DEL MethodInvocation", "DEL PrefixExpression: !"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: HtmlAttributeValueNode", "DEL SimpleType: HtmlAttributeValueNode", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: HtmlAttributeValueNode", "DEL VariableDeclarationStatement", "DEL SimpleName: getChild", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: node", "DEL NumberLiteral: 1", "DEL SimpleType: HtmlAttributeValueNode"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: getSourceLocation"]}, {"root": "DEL ForStatement", "operations": ["DEL PostfixExpression: ++", "DEL SimpleName: node", "DEL InfixExpression: <", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ForStatement", "DEL SimpleName: node", "DEL NumberLiteral: 1", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: i", "DEL SimpleName: visit", "DEL SimpleName: numChildren", "DEL SimpleName: getChild", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: i"]}, {"root": "DEL SimpleType: String", "operations": ["DEL SimpleType: String"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: getRawText"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: of", "DEL SimpleName: stringLiteral", "DEL MethodInvocation", "DEL SimpleName: tagName"]}, {"root": "DEL IfStatement", "operations": ["DEL InfixExpression: ==", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL Block", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: HtmlAttributeValueNode", "DEL NumberLiteral: 1", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: value", "DEL SimpleName: htmlAttributeNode", "DEL SimpleName: HtmlAttributeValueNode", "DEL SimpleType: HtmlAttributeValueNode", "DEL SimpleName: getChild", "DEL VariableDeclarationFragment", "DEL SimpleType: HtmlAttributeValueNode"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: chunks", "DEL Assignment: ="]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: KEY_ATTRIBUTE_NAME", "DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL IfStatement", "DEL SimpleName: chunks", "DEL Block", "DEL SimpleName: hasValue", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: htmlAttributeNode", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: of"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: emitClose", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getRawText"]}]}}, {"GenIncrementalDomCodeVisitor_diff": {"operations": ["Move ImportDeclaration(89) into CompilationUnit(1986) at 26", "Move ImportDeclaration(91) into CompilationUnit(1986) at 27", "Move ImportDeclaration(93) into CompilationUnit(1986) at 28", "Move ImportDeclaration(97) into CompilationUnit(1986) at 29", "Update QualifiedName: com.google.template.soy.soytree.HtmlAttributeNode(88) to com.google.template.soy.html.HtmlDefinitions", "Update QualifiedName: com.google.template.soy.soytree.HtmlAttributeValueNode(90) to com.google.template.soy.html.IncrementalHtmlAttributeNode", "Update QualifiedName: com.google.template.soy.soytree.HtmlCloseTagNode(92) to com.google.template.soy.html.IncrementalHtmlCloseTagNode", "Update QualifiedName: com.google.template.soy.soytree.HtmlOpenTagNode(96) to com.google.template.soy.html.IncrementalHtmlOpenTagNode", "Update SimpleName: visitHtmlAttributeNode(975) to visitIncrementalHtmlAttributeNode", "Insert Block(967) into MethodDeclaration(968) at 6", "Insert Javadoc(971) into MethodDeclaration(1020) at 0", "Update SimpleName: visitHtmlOpenTagNode(1244) to visitIncrementalHtmlOpenTagNode", "Update SimpleName: visitHtmlCloseTagNode(1448) to visitIncrementalHtmlCloseTagNode", "Update SimpleType: HtmlAttributeNode(977) to IncrementalHtmlAttributeNode", "Move VariableDeclarationStatement(986) into Block(967) at 0", "Move ExpressionStatement(1028) into Block(967) at 1", "Insert TagElement(970) into Javadoc(971) at 0", "Update SimpleType: HtmlAttributeNode(1061) to IncrementalHtmlAttributeNode", "Update SimpleType: HtmlOpenTagNode(1126) to IncrementalHtmlOpenTagNode", "Move ExpressionStatement(1050) into Block(1112) at 7", "Update SimpleType: HtmlOpenTagNode(1246) to IncrementalHtmlOpenTagNode", "Insert IfStatement(1208) into Block(1227) at 1", "Update SimpleType: HtmlOpenTagNode(1340) to IncrementalHtmlOpenTagNode", "Update SimpleType: HtmlCloseTagNode(1450) to IncrementalHtmlCloseTagNode", "Update TextElement: . The attribute nodes will typically be children of the(946) to . The attribute nodes will typically be children", "Update TextElement: corresponding (947) to of the corresponding ", "Update TextElement:  or in a let/param of kind attributes, e.g.(950) to  or in a let/param of kind attributes,", "Insert TextElement: e.g.(912) into TagElement(931) at 6", "Update SimpleName: HtmlAttributeNode(976) to IncrementalHtmlAttributeNode", "Insert TextElement: Returns a list of attribute values. (969) into TagElement(970) at 0", "Update SimpleName: HtmlAttributeNode(1060) to IncrementalHtmlAttributeNode", "Insert MethodInvocation(987) into IfStatement(994) at 0", "Update SimpleName: HtmlOpenTagNode(1125) to IncrementalHtmlOpenTagNode", "Update TextElement: , which occurs when an HTML tag is opened with no conditional(1226) to , which occurs when an HTML tag is opened with no", "Update TextElement: attributes. For example:(1227) to conditional attributes. For example:", "Update SimpleName: HtmlOpenTagNode(1245) to IncrementalHtmlOpenTagNode", "Insert MethodInvocation(1151) into IfStatement(1208) at 0", "Insert Block(1199) into IfStatement(1208) at 1", "Move Block(1292) into IfStatement(1208) at 2", "Insert MethodInvocation(1218) into IfStatement(1226) at 0", "Insert Block(1225) into IfStatement(1226) at 1", "Update SimpleName: HtmlOpenTagNode(1339) to IncrementalHtmlOpenTagNode", "Update TextElement: , which occurs when an HTML tag is closed. For example:(1434) to , which occurs when an HTML tag is closed. For", "Insert TextElement: example:(1332) into TagElement(1340) at 3", "Update SimpleName: HtmlCloseTagNode(1449) to IncrementalHtmlCloseTagNode", "Update SimpleName: HtmlAttributeNode(944) to IncrementalHtmlAttributeNode", "Update SimpleName: HtmlOpenTagNode(948) to IncrementalHtmlOpenTagNode", "Insert MethodInvocation(985) into MethodInvocation(987) at 0", "Insert SimpleName: isEmpty(986) into MethodInvocation(987) at 1", "Update SimpleName: value(1108) to node", "Update SimpleName: HtmlOpenTagNode(1224) to IncrementalHtmlOpenTagNode", "Insert MethodInvocation(1149) into MethodInvocation(1151) at 0", "Insert SimpleName: isEmpty(1150) into MethodInvocation(1151) at 1", "Move VariableDeclarationStatement(1267) into Block(1199) at 0", "Insert ExpressionStatement(1172) into Block(1199) at 1", "Insert VariableDeclarationStatement(1180) into Block(1199) at 2", "Insert IfStatement(1190) into Block(1199) at 3", "Move ExpressionStatement(1285) into Block(1199) at 4", "Insert QualifiedName: HtmlDefinitions.HTML5_VOID_ELEMENTS(1213) into MethodInvocation(1218) at 0", "Insert SimpleName: contains(1214) into MethodInvocation(1218) at 1", "Insert MethodInvocation(1217) into MethodInvocation(1218) at 2", "Insert ExpressionStatement(1224) into Block(1225) at 0", "Update SimpleName: HtmlCloseTagNode(1432) to IncrementalHtmlCloseTagNode", "Move MethodInvocation(1464) into PrefixExpression: !(1357) at 0", "Move MethodInvocation(1462) into MethodInvocation(1356) at 2", "Move SimpleName: node(1064) into MethodInvocation(985) at 0", "Update SimpleName: hasValue(1065) to getChildren", "Move SimpleName: hasValue(1065) into MethodInvocation(985) at 1", "Update SimpleName: value(1089) to node", "Insert SimpleName: node(1147) into MethodInvocation(1149) at 0", "Insert SimpleName: getChildren(1148) into MethodInvocation(1149) at 1", "Insert ParameterizedType: List<CodeChunk.WithValue>(1156) into VariableDeclarationStatement(1163) at 0", "Insert MethodInvocation(1171) into ExpressionStatement(1172) at 0", "Insert SimpleType: CodeChunk.WithValue(1174) into VariableDeclarationStatement(1180) at 0", "Insert VariableDeclarationFragment(1179) into VariableDeclarationStatement(1180) at 1", "Insert InfixExpression: !=(1183) into IfStatement(1190) at 0", "Insert Block(1189) into IfStatement(1190) at 1", "Update SimpleName: emitClose(1303) to node", "Move SimpleName: emitClose(1303) into MethodInvocation(1217) at 0", "Update SimpleName: tagName(1304) to getTagName", "Move SimpleName: tagName(1304) into MethodInvocation(1217) at 1", "Move MethodInvocation(1263) into ExpressionStatement(1224) at 0", "Move MethodInvocation(1261) into MethodInvocation(1223) at 2", "Update SimpleType: HtmlAttributeNode(1360) to IncrementalHtmlAttributeNode", "Insert MethodInvocation(1291) into IfStatement(1321) at 0", "Move Block(1416) into IfStatement(1321) at 1", "Insert QualifiedName: HtmlDefinitions.HTML5_VOID_ELEMENTS(1351) into MethodInvocation(1356) at 0", "Update SimpleName: getStaticTagName(1463) to contains", "Move MethodInvocation(1302) into ExpressionStatement(1363) at 0", "Move MethodInvocation(1300) into MethodInvocation(1362) at 2", "Move MethodInvocation(323) into MethodInvocation(1006) at 2", "Insert SimpleType: List(1153) into ParameterizedType: List<CodeChunk.WithValue>(1156) at 0", "Insert SimpleType: CodeChunk.WithValue(1155) into ParameterizedType: List<CodeChunk.WithValue>(1156) at 1", "Update SimpleName: tagName(1258) to args", "Insert ClassInstanceCreation(1161) into VariableDeclarationFragment(1162) at 1", "Insert SimpleName: args(1164) into MethodInvocation(1171) at 0", "Insert SimpleName: add(1165) into MethodInvocation(1171) at 1", "Move MethodInvocation(1457) into MethodInvocation(1171) at 2", "Move MethodInvocation(1455) into MethodInvocation(1170) at 2", "Insert QualifiedName: CodeChunk.WithValue(1173) into SimpleType: CodeChunk.WithValue(1174) at 0", "Insert SimpleName: keyValue(1175) into VariableDeclarationFragment(1179) at 0", "Insert MethodInvocation(1178) into VariableDeclarationFragment(1179) at 1", "Insert SimpleName: keyValue(1181) into InfixExpression: !=(1183) at 0", "Insert NullLiteral(1182) into InfixExpression: !=(1183) at 1", "Insert ExpressionStatement(1188) into Block(1189) at 0", "Insert MethodInvocation(1204) into MethodInvocation(1205) at 2", "Update SimpleName: getStaticTagName(1262) to emitClose", "Update SimpleName: HtmlAttributeNode(1359) to IncrementalHtmlAttributeNode", "Insert MethodInvocation(1288) into MethodInvocation(1291) at 0", "Insert SimpleName: equals(1289) into MethodInvocation(1291) at 1", "Update SimpleName: ImmutableList(1378) to KEY_ATTRIBUTE_NAME", "Move SimpleName: ImmutableList(1378) into MethodInvocation(1291) at 2", "Insert VariableDeclarationStatement(1314) into Block(1320) at 1", "Move ReturnStatement(1422) into Block(1320) at 3", "Update SimpleName: isDefinitelyVoid(1301) to emitClose", "Update SimpleName: attrName(1016) to node", "Update SimpleName: getRawText(1017) to getName", "Update SimpleName: String(1256) to List", "Move SimpleName: String(1256) into SimpleType: List(1153) at 0", "Insert QualifiedName: CodeChunk.WithValue(1154) into SimpleType: CodeChunk.WithValue(1155) at 0", "Insert ParameterizedType: ArrayList<>(1160) into ClassInstanceCreation(1161) at 0", "Update SimpleName: isDefinitelyVoid(1456) to stringLiteral", "Update SimpleName: node(1268) to maybeGetKeyNodeValue", "Move SimpleName: node(1268) into MethodInvocation(1178) at 0", "Update SimpleName: numChildren(1269) to node", "Move SimpleName: numChildren(1269) into MethodInvocation(1178) at 1", "Insert MethodInvocation(1187) into ExpressionStatement(1188) at 0", "Update SimpleName: ImmutableList(1277) to args", "Move SimpleName: ImmutableList(1277) into MethodInvocation(1196) at 2", "Insert SimpleName: node(1202) into MethodInvocation(1204) at 0", "Update SimpleName: tagName(1289) to getTagName", "Move SimpleName: tagName(1289) into MethodInvocation(1204) at 1", "Update SimpleType: HtmlAttributeNode(1363) to IncrementalHtmlAttributeNode", "Move SimpleName: htmlAttributeNode(1368) into MethodInvocation(1288) at 0", "Move ParameterizedType: List<CodeChunk.WithValue>(1376) into VariableDeclarationStatement(1314) at 0", "Insert VariableDeclarationFragment(1313) into VariableDeclarationStatement(1314) at 1", "Insert SimpleType: ArrayList(1159) into ParameterizedType: ArrayList<>(1160) at 0", "Insert SimpleName: args(1184) into MethodInvocation(1187) at 0", "Insert SimpleName: add(1185) into MethodInvocation(1187) at 1", "Insert SimpleName: keyValue(1186) into MethodInvocation(1187) at 2", "Update SimpleType: HtmlAttributeNode(1352) to IncrementalHtmlAttributeNode", "Update SimpleName: HtmlAttributeNode(1362) to IncrementalHtmlAttributeNode", "Insert SimpleName: chunks(1308) into VariableDeclarationFragment(1313) at 0", "Insert MethodInvocation(1312) into VariableDeclarationFragment(1313) at 1", "Insert SimpleName: ArrayList(1158) into SimpleType: ArrayList(1159) at 0", "Update SimpleName: HtmlAttributeNode(1351) to IncrementalHtmlAttributeNode", "Update SimpleName: value(1402) to htmlAttributeNode", "Update StringLiteral: \"Attribute values that cannot be evalutated to simple expressions is not yet\"(1404) to \"Attribute values that cannot be evalutated to simple expressions is not yet supported \"", "Update StringLiteral: \" supported  for Incremental DOM code generation\"(1405) to \"for Incremental DOM code generation\"", "Move SimpleName: genJsExprsVisitor(1410) into MethodInvocation(1312) at 0", "Move SimpleName: execOnChildren(1411) into MethodInvocation(1312) at 1", "Update SimpleName: value(1412) to htmlAttributeNode", "Move SimpleName: value(1412) into MethodInvocation(1312) at 2", "Delete QualifiedName: com.google.template.soy.soytree.SoyNode.Kind(114)", "Delete ImportDeclaration(115)", "Delete SimpleName: Override(296)", "Delete MarkerAnnotation(297)", "Delete Modifier: protected(298)", "Delete PrimitiveType: void(299)", "Delete SimpleName: visit(300)", "Delete SimpleName: SoyNode(301)", "Delete SimpleType: SoyNode(302)", "Delete SimpleName: node(303)", "Delete SingleVariableDeclaration(304)", "Delete SimpleName: visit(305)", "Delete SimpleName: node(306)", "Delete SuperMethodInvocation(307)", "Delete ExpressionStatement(308)", "Delete Block(309)", "Delete SimpleName: RuntimeException(310)", "Delete SimpleType: RuntimeException(311)", "Delete SimpleName: e(312)", "Delete SingleVariableDeclaration(313)", "Delete SimpleName: Error(314)", "Delete SimpleType: Error(315)", "Delete StringLiteral: \"error from : \"(316)", "Delete SimpleName: node(317)", "Delete SimpleName: getKind(318)", "Delete MethodInvocation(319)", "Delete StringLiteral: \" @ \"(320)", "Delete InfixExpression: +(324)", "Delete SimpleName: e(325)", "Delete ClassInstanceCreation(326)", "Delete ThrowStatement(327)", "Delete Block(328)", "Delete CatchClause(329)", "Delete TryStatement(330)", "Delete Block(331)", "Delete MethodDeclaration(332)", "Delete SimpleName: node(987)", "Delete SimpleName: hasValue(988)", "Delete MethodInvocation(989)", "Delete SimpleName: node(990)", "Delete SimpleName: getChild(991)", "Delete NumberLiteral: 0(992)", "Delete MethodInvocation(993)", "Delete SimpleName: getKind(994)", "Delete MethodInvocation(995)", "Delete QualifiedName: Kind.RAW_TEXT_NODE(996)", "Delete InfixExpression: ==(997)", "Delete InfixExpression: ||(998)", "Delete SimpleName: RawTextNode(999)", "Delete SimpleType: RawTextNode(1000)", "Delete SimpleName: attrName(1001)", "Delete SimpleName: RawTextNode(1002)", "Delete SimpleType: RawTextNode(1003)", "Delete SimpleName: node(1004)", "Delete SimpleName: getChild(1005)", "Delete NumberLiteral: 0(1006)", "Delete MethodInvocation(1007)", "Delete CastExpression(1008)", "Delete VariableDeclarationFragment(1009)", "Delete VariableDeclarationStatement(1010)", "Delete Block(1029)", "Delete SimpleName: visitChildren(1030)", "Delete SimpleName: node(1031)", "Delete MethodInvocation(1032)", "Delete ExpressionStatement(1033)", "Delete Block(1034)", "Delete IfStatement(1035)", "Delete Block(1036)", "Delete SimpleName: Override(1038)", "Delete MarkerAnnotation(1039)", "Delete Modifier: protected(1040)", "Delete PrimitiveType: void(1041)", "Delete SimpleName: visitHtmlAttributeValueNode(1042)", "Delete SimpleName: HtmlAttributeValueNode(1043)", "Delete SimpleType: HtmlAttributeValueNode(1044)", "Delete SimpleName: node(1045)", "Delete SingleVariableDeclaration(1046)", "Delete Block(1051)", "Delete MethodDeclaration(1052)", "Delete MethodInvocation(1066)", "Delete PrefixExpression: !(1067)", "Delete SimpleName: HtmlAttributeValueNode(1075)", "Delete SimpleType: HtmlAttributeValueNode(1076)", "Delete SimpleName: value(1077)", "Delete SimpleName: HtmlAttributeValueNode(1078)", "Delete SimpleType: HtmlAttributeValueNode(1079)", "Delete SimpleName: node(1080)", "Delete SimpleName: getChild(1081)", "Delete NumberLiteral: 1(1082)", "Delete MethodInvocation(1083)", "Delete CastExpression(1084)", "Delete VariableDeclarationFragment(1085)", "Delete VariableDeclarationStatement(1086)", "Delete SimpleName: value(1094)", "Delete SimpleName: getSourceLocation(1095)", "Delete MethodInvocation(1096)", "Delete PrimitiveType: int(1189)", "Delete SimpleName: i(1190)", "Delete NumberLiteral: 1(1191)", "Delete VariableDeclarationFragment(1192)", "Delete VariableDeclarationExpression(1193)", "Delete SimpleName: i(1194)", "Delete SimpleName: node(1195)", "Delete SimpleName: numChildren(1196)", "Delete MethodInvocation(1197)", "Delete InfixExpression: <(1198)", "Delete SimpleName: i(1199)", "Delete PostfixExpression: ++(1200)", "Delete SimpleName: visit(1201)", "Delete SimpleName: node(1202)", "Delete SimpleName: getChild(1203)", "Delete SimpleName: i(1204)", "Delete MethodInvocation(1205)", "Delete MethodInvocation(1206)", "Delete ExpressionStatement(1207)", "Delete Block(1208)", "Delete ForStatement(1209)", "Delete SimpleType: String(1257)", "Delete SimpleName: getRawText(1264)", "Delete MethodInvocation(1265)", "Delete SimpleName: of(1278)", "Delete SimpleName: stringLiteral(1279)", "Delete SimpleName: tagName(1280)", "Delete MethodInvocation(1281)", "Delete MethodInvocation(1282)", "Delete MethodInvocation(1270)", "Delete NumberLiteral: 1(1271)", "Delete InfixExpression: ==(1272)", "Delete Block(1286)", "Delete IfStatement(1293)", "Delete MethodInvocation(1305)", "Delete ExpressionStatement(1306)", "Delete Block(1307)", "Delete SimpleName: HtmlAttributeValueNode(1386)", "Delete SimpleType: HtmlAttributeValueNode(1387)", "Delete SimpleName: value(1388)", "Delete SimpleName: HtmlAttributeValueNode(1389)", "Delete SimpleType: HtmlAttributeValueNode(1390)", "Delete SimpleName: htmlAttributeNode(1391)", "Delete SimpleName: getChild(1392)", "Delete NumberLiteral: 1(1393)", "Delete MethodInvocation(1394)", "Delete CastExpression(1395)", "Delete VariableDeclarationFragment(1396)", "Delete VariableDeclarationStatement(1397)", "Delete SimpleName: chunks(1409)", "Delete MethodInvocation(1413)", "Delete Assignment: =(1414)", "Delete ExpressionStatement(1415)", "Delete SimpleName: KEY_ATTRIBUTE_NAME(1370)", "Delete MethodInvocation(1371)", "Delete SimpleName: chunks(1377)", "Delete SimpleName: of(1379)", "Delete MethodInvocation(1380)", "Delete VariableDeclarationFragment(1381)", "Delete VariableDeclarationStatement(1382)", "Delete SimpleName: htmlAttributeNode(1383)", "Delete SimpleName: hasValue(1384)", "Delete MethodInvocation(1385)", "Delete IfStatement(1417)", "Delete Block(1423)", "Delete SimpleName: emitClose(1459)", "Delete SimpleName: getRawText(1465)", "Delete MethodInvocation(1466)", "Delete MethodInvocation(1467)"]}}, {"HtmlContextVisitor_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.template.soy.incrementaldomsrc"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkState", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.data.SanitizedContent.ContentKind"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.error.ErrorReporter", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.error.SoyErrorKind", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.AbstractSoyNodeVisitor", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.CallParamContentNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.CssNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.HtmlAttributeNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.HtmlAttributeValueNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.HtmlCloseTagNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.HtmlContext", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.HtmlOpenTagNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.LetContentNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.LogNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.MsgFallbackGroupNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.PrintNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.RawTextNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.SoyNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.SoyNode.Kind", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.SoyNode.ParentSoyNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.SoyNode.StandaloneNode", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.TemplateNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.template.soy.soytree.XidNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayDeque"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.IdentityHashMap"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: pushState", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL SimpleName: HtmlContext", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: htmlOpenTagNode", "DEL TextElement:  css", "DEL SimpleName: visit", "DEL MethodDeclaration", "DEL SimpleName: AbstractSoyNodeVisitor", "DEL SimpleName: SoyErrorKind", "DEL Modifier: final", "DEL SimpleName: node", "DEL SimpleName: report", "DEL SimpleName: contentKind", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Modifier: static", "DEL SimpleName: get", "DEL SimpleName: errorReporter", "DEL Block", "DEL SimpleName: DYNAMIC_TAG_NAME", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL SimpleName: LogNode", "DEL MarkerAnnotation", "DEL SimpleName: IdentityHashMap", "DEL SimpleName: Override", "DEL SimpleName: getContentKind", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: SoyErrorKind", "DEL TagElement: @link", "DEL SimpleName: errorReporter", "DEL TextElement:  xid", "DEL SimpleName: InferredElementNamespace", "DEL IfStatement", "DEL SimpleName: getState", "DEL SimpleName: stateStack", "DEL SimpleName: numChildren", "DEL ParameterizedType: ParentSoyNode<?>", "DEL Modifier: protected", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: HtmlAttributeNode", "DEL SimpleName: errorReporter", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL WildcardType: ?", "DEL ExpressionStatement", "DEL SimpleName: errorReporter", "DEL SimpleName: tagName", "DEL SimpleName: DYNAMIC_TAG_NAME", "DEL SimpleName: node", "DEL SimpleName: SOY_TAG_BEFORE_ATTR_VALUE", "DEL SimpleType: IdentityHashMap", "DEL SimpleType: HtmlOpenTagNode", "DEL TextElement: dom.", "DEL SimpleType: SoyErrorKind", "DEL Modifier: private", "DEL TextElement: <ul>", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: namespace", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL MethodInvocation", "DEL QualifiedName: HtmlContext.TEXT", "DEL SimpleName: getStaticTagNameAsLowerCase", "DEL SimpleName: pushState", "DEL SimpleName: contextForKind", "DEL SimpleName: pushState", "DEL SimpleName: INVALID_SELF_CLOSING_TAG", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: getChild", "DEL SimpleName: node", "DEL SingleVariableDeclaration", "DEL Modifier: protected", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL QualifiedName: HtmlContext.HTML_NORMAL_ATTR_VALUE", "DEL SimpleName: getTagName", "DEL TagElement", "DEL SimpleName: isEmpty", "DEL SimpleType: LogNode", "DEL SimpleName: HtmlContextVisitor", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: getTagName", "DEL SimpleType: HtmlCloseTagNode", "DEL MethodInvocation", "DEL SimpleName: getTagName", "DEL FieldDeclaration", "DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL Block", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: getTagLocation", "DEL NumberLiteral: 0", "DEL SimpleName: String", "DEL SimpleName: getState", "DEL TextElement: somewhat correctly.", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: openTagStack", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: popState", "DEL SimpleName: contentKind", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: equalsIgnoreCase", "DEL SimpleName: namespace", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: isSelfClosing", "DEL SimpleType: ParentSoyNode", "DEL PrefixExpression: !", "DEL SimpleName: peek", "DEL SimpleName: getChild", "DEL SimpleName: RawTextNode", "DEL Block", "DEL FieldDeclaration", "DEL SimpleName: tagName", "DEL SimpleName: popState", "DEL MethodInvocation", "DEL SimpleName: tagName", "DEL StringLiteral: \"foreignObject\"", "DEL ExpressionStatement", "DEL SimpleName: visitHtmlOpenTagNode", "DEL SimpleName: ErrorReporter", "DEL Modifier: private", "DEL SimpleName: of", "DEL SimpleName: tagName", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL SimpleType: InferredElementNamespace", "DEL MethodInvocation", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: visitCssNode", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: INVALID_SELF_CLOSING_TAG", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL PrimitiveType: boolean", "DEL SimpleName: INVALID_NODE_LOCATION_OUTSIDE_OF_ATTRIBUTE_VALUE", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL SimpleName: pushState", "DEL Modifier: private", "DEL SimpleName: openTagToInferredNamesapce", "DEL Block", "DEL SimpleName: node", "DEL MarkerAnnotation", "DEL SimpleName: of", "DEL SimpleName: HtmlOpenTagNode", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: INVALID_NODE_LOCATION_OUTSIDE_OF_ATTRIBUTE_VALUE", "DEL SimpleName: errorReporter", "DEL ForStatement", "DEL SimpleName: ArrayDeque", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: node", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL FieldAccess", "DEL Modifier: protected", "DEL SimpleType: SoyErrorKind", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: tagMatches", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL TextElement:  and ", "DEL FieldDeclaration", "DEL QualifiedName: HtmlContext.TEXT", "DEL Javadoc", "DEL SwitchCase", "DEL VariableDeclarationFragment", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL TagElement: @link", "DEL TagElement: @link", "DEL SimpleName: node", "DEL SimpleType: HtmlContext", "DEL Modifier: private", "DEL StringLiteral: \"outside of attribute values.\"", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL TextElement: <li>Attributes with values must have literal names", "DEL SimpleName: context", "DEL SimpleName: getTagName", "DEL Modifier: final", "DEL MethodInvocation", "DEL TextElement:  fields of ", "DEL SimpleName: contextForKind", "DEL SimpleName: node", "DEL SimpleName: getTagLocation", "DEL SimpleName: Override", "DEL SimpleName: getChild", "DEL MethodInvocation", "DEL Modifier: protected", "DEL SimpleName: report", "DEL SuperMethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: HtmlOpenTagNode", "DEL SimpleName: HtmlOpenTagNode", "DEL SimpleName: getTagName", "DEL SingleVariableDeclaration", "DEL SimpleName: PrintNode", "DEL QualifiedName: Kind.HTML_ATTRIBUTE_VALUE_NODE", "DEL Modifier: private", "DEL Block", "DEL QualifiedName: HtmlContext.TEXT", "DEL SimpleName: getTagName", "DEL ExpressionStatement", "DEL SimpleType: HtmlOpenTagNode", "DEL SimpleName: popState", "DEL Modifier: final", "DEL Modifier: protected", "DEL SimpleType: ArrayDeque", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL TextElement: <p>TODO(lukes): A lot of this logic should really be handled by the autoescaper, but", "DEL SimpleType: IdentityHashMap", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: HtmlContext", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: StandaloneNode", "DEL EnumDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: HtmlCloseTagNode", "DEL Modifier: protected", "DEL StringLiteral: \" SVG content (partially supported). For a list of void elements, see \"", "DEL SimpleName: node", "DEL FieldDeclaration", "DEL SimpleName: String", "DEL SimpleName: equalsIgnoreCase", "DEL MethodInvocation", "DEL SimpleType: InferredElementNamespace", "DEL SimpleName: Override", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL TextElement: A visitor that populates the ", "DEL SimpleName: getKind", "DEL SimpleName: visit", "DEL SimpleName: ContentKind", "DEL TagElement: @link", "DEL SimpleType: StandaloneNode", "DEL SimpleName: getState", "DEL SimpleName: tagMatches", "DEL SimpleType: ParentSoyNode", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: contentKind", "DEL StringLiteral: \"Invalid self-closing tag for \\\"{0}\\\". Self-closing tags are only valid for void tags and\"", "DEL VariableDeclarationFragment", "DEL SimpleName: stateStack", "DEL ReturnStatement", "DEL SimpleName: node", "DEL MarkerAnnotation", "DEL SimpleName: pushState", "DEL SimpleName: isStatic", "DEL Block", "DEL SimpleName: getState", "DEL SimpleName: visitCssNode", "DEL SimpleName: getSourceLocation", "DEL SimpleType: AbstractSoyNodeVisitor", "DEL SimpleName: ArrayDeque", "DEL SimpleType: HtmlAttributeValueNode", "DEL MethodInvocation", "DEL StringLiteral: \"https://www.w3.org/TR/html5/syntax.html#void-elements.\"", "DEL SimpleName: openTagStack", "DEL MethodInvocation", "DEL SimpleType: XidNode", "DEL VariableDeclarationFragment", "DEL SimpleName: peek", "DEL SimpleName: visitMsgFallbackGroupNode", "DEL SimpleName: DYNAMIC_TAG_NAME", "DEL SimpleName: pop", "DEL MarkerAnnotation", "DEL TextElement: <p>The additional restrictions are:", "DEL SimpleName: i", "DEL ReturnStatement", "DEL TextElement:  commands can only appear in attribute value context.", "DEL SimpleType: HtmlContext", "DEL SuperMethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: HtmlOpenTagNode", "DEL SimpleName: node", "DEL SimpleType: HtmlOpenTagNode", "DEL SimpleName: tagName", "DEL SimpleName: node", "DEL PrimitiveType: void", "DEL StringLiteral: \"xid\"", "DEL SingleVariableDeclaration", "DEL QualifiedName: HtmlContext.HTML_PCDATA", "DEL SimpleType: ContentKind", "DEL SimpleType: LetContentNode", "DEL SimpleType: SoyNode", "DEL PrimitiveType: void", "DEL SimpleName: node", "DEL SimpleName: ParentSoyNode", "DEL SimpleName: visitPrintNode", "DEL NumberLiteral: 1", "DEL Modifier: protected", "DEL MethodInvocation", "DEL SimpleName: node", "DEL EnumConstantDeclaration", "DEL SimpleName: get", "DEL SuperMethodInvocation", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: openTagToInferredNamesapce", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: HtmlAttributeValueNode", "DEL SimpleName: numChildren", "DEL SimpleName: contentKind", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: DYNAMIC_ATTRIBUTE_NAME", "DEL SimpleName: popState", "DEL MethodDeclaration", "DEL Modifier: static", "DEL MethodInvocation", "DEL SimpleName: MsgFallbackGroupNode", "DEL QualifiedName: HtmlContext.HTML_NORMAL_ATTR_VALUE", "DEL SimpleName: node", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: getChild", "DEL SimpleType: HtmlContext", "DEL ExpressionStatement", "DEL SimpleName: attributeValue", "DEL SimpleName: setHtmlContext", "DEL SimpleName: visitSoyNode", "DEL MethodInvocation", "DEL ParameterizedType: ArrayDeque<HtmlOpenTagNode>", "DEL NumberLiteral: 0", "DEL SimpleName: node", "DEL PrimitiveType: void", "DEL IfStatement", "DEL SimpleName: HTML", "DEL SimpleName: pushState", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: errorReporter", "DEL Block", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: SoyErrorKind", "DEL TagElement: @link", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL WhileStatement", "DEL SimpleName: visitChildren", "DEL SimpleName: SoyErrorKind", "DEL TypeDeclaration: class", "DEL SimpleName: isEmpty", "DEL CastExpression", "DEL SimpleName: node", "DEL SimpleName: SoyErrorKind", "DEL TextElement: The namespaces that Elements can be in, excluding MathML. Used by ", "DEL SimpleName: node", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL SwitchCase", "DEL InfixExpression: ==", "DEL TextElement: , ", "DEL SimpleName: stateStack", "DEL SimpleName: node", "DEL PrimitiveType: void", "DEL SimpleName: node", "DEL PrimitiveType: void", "DEL SimpleType: MsgFallbackGroupNode", "DEL ParameterizedType: IdentityHashMap<>", "DEL SimpleName: push", "DEL EnumConstantDeclaration", "DEL MethodInvocation", "DEL SimpleType: ErrorReporter", "DEL QualifiedName: InferredElementNamespace.XHTML", "DEL TextElement: to keep track of the current element namespace. This allows it to handle self-closing tags", "DEL SimpleName: getStaticTagNameAsLowerCase", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ParameterizedType: AbstractSoyNodeVisitor<Void>", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL QualifiedName: HtmlContext.HTML_TAG_NAME", "DEL MethodInvocation", "DEL SimpleName: visitChildren", "DEL SimpleName: node", "DEL SimpleName: node", "DEL SimpleName: visitHtmlCloseTagNode", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL StringLiteral: \"css\"", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: visitRawTextNode", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: isEmpty", "DEL Block", "DEL Block", "DEL InfixExpression: ||", "DEL MethodDeclaration", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: getState", "DEL SimpleName: getContentKind", "DEL SimpleType: CallParamContentNode", "DEL SimpleName: visit", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL InfixExpression: !=", "DEL QualifiedName: InferredElementNamespace.SVG", "DEL TextElement:  and also enforces some additional restrictions for incremental", "DEL ForStatement", "DEL MethodInvocation", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: node", "DEL Modifier: final", "DEL SimpleName: errorReporter", "DEL SimpleName: XidNode", "DEL SimpleName: getState", "DEL SimpleName: getKind", "DEL Modifier: final", "DEL MethodInvocation", "DEL SimpleName: HtmlContext", "DEL SimpleType: ArrayDeque", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL SimpleName: visitLetContentNode", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL SimpleName: node", "DEL SimpleName: node", "DEL VariableDeclarationFragment", "DEL SimpleName: node", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: ArrayDeque", "DEL SimpleName: node", "DEL StringLiteral: \"IncrementalDom does not support dynamic tag names.\"", "DEL TextElement:  The tag name to get the namespace for, given the current stack of open Elements.", "DEL PostfixExpression: ++", "DEL StringLiteral: \"Soy statements are not \"", "DEL SimpleName: i", "DEL SimpleName: ATTRIBUTES", "DEL SimpleName: getState", "DEL SimpleName: getChild", "DEL Modifier: final", "DEL MethodInvocation", "DEL TagElement: @code", "DEL SimpleName: InferredElementNamespace", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: HtmlContextVisitor", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: visitHtmlAttributeValueNode", "DEL PrimitiveType: void", "DEL Modifier: private", "DEL PostfixExpression: ++", "DEL SimpleName: Override", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: i", "DEL SimpleName: node", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL SimpleType: RawTextNode", "DEL InfixExpression: !=", "DEL TextElement: to get attribute escaping correct).", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: SoyErrorKind", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: isDefinitelyVoid", "DEL SimpleName: stateStack", "DEL TextElement: <li>Enforces the correct usage of self closing tags.", "DEL TextElement: </ul>", "DEL SimpleType: ErrorReporter", "DEL SimpleName: getNamespace", "DEL SimpleName: IdentityHashMap", "DEL SimpleName: errorReporter", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SwitchCase", "DEL MethodInvocation", "DEL SimpleType: CssNode", "DEL ReturnStatement", "DEL SimpleName: ContentKind", "DEL Block", "DEL SimpleName: SoyErrorKind", "DEL SimpleName: attributeValue", "DEL Modifier: private", "DEL SimpleName: getTagName", "DEL ReturnStatement", "DEL ParameterizedType: ArrayDeque<>", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL SimpleName: report", "DEL SimpleType: HtmlContext", "DEL PrefixExpression: !", "DEL SimpleName: visitHtmlAttributeNode", "DEL SimpleName: visitXidNode", "DEL Javadoc", "DEL Javadoc", "DEL ExpressionStatement", "DEL Block", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL SimpleName: setHtmlContext", "DEL PrimitiveType: void", "DEL SimpleName: openTagStack", "DEL Modifier: static", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL SwitchStatement", "DEL PrimitiveType: int", "DEL SimpleType: String", "DEL TagElement", "DEL MethodInvocation", "DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: TemplateNode", "DEL IfStatement", "DEL Modifier: private", "DEL InfixExpression: &&", "DEL IfStatement", "DEL SimpleName: visitChildren", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleName: equals", "DEL SimpleName: Override", "DEL IfStatement", "DEL StringLiteral: \"IncrementalDom does not support dynamic attribute names.\"", "DEL TextElement: <li>Tags must have literal names", "DEL SimpleName: InferredElementNamespace", "DEL SimpleName: HtmlContext", "DEL MethodInvocation", "DEL SimpleName: getSourceLocation", "DEL SimpleName: getChild", "DEL IfStatement", "DEL NumberLiteral: 0", "DEL SimpleName: getTagName", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: node", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL SimpleName: Override", "DEL SimpleName: errorReporter", "DEL Modifier: protected", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL StringLiteral: \"allowed before an attribute value. They should be moved inside a quotation mark.\"", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL PrimitiveType: void", "DEL SimpleName: Override", "DEL SimpleName: get", "DEL SimpleName: node", "DEL SimpleName: pop", "DEL SingleVariableDeclaration", "DEL SimpleName: isStatic", "DEL SimpleName: openTagStack", "DEL SimpleName: node", "DEL SimpleType: InferredElementNamespace", "DEL SimpleName: node", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL TextElement: <li>", "DEL SingleVariableDeclaration", "DEL SimpleName: Override", "DEL SimpleName: tagName", "DEL ParameterizedType: IdentityHashMap<HtmlOpenTagNode,InferredElementNamespace>", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: Override", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL QualifiedName: HtmlContext.HTML_NORMAL_ATTR_VALUE", "DEL ReturnStatement", "DEL SimpleName: node", "DEL MethodInvocation", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: getTagName", "DEL MethodDeclaration", "DEL SimpleName: node", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: report", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL QualifiedName: HtmlContext.HTML_TAG_NAME", "DEL Block", "DEL Block", "DEL SimpleName: checkState", "DEL SimpleName: getState", "DEL SimpleName: visitChildren", "DEL MethodInvocation", "DEL SimpleName: popState", "DEL InfixExpression: !=", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: contextForKind", "DEL SimpleName: node", "DEL SimpleName: i", "DEL SimpleName: InferredElementNamespace", "DEL SimpleName: SoyNode", "DEL SimpleName: popState", "DEL SimpleName: setHtmlContext", "DEL SimpleName: SVG", "DEL SimpleType: ContentKind", "DEL IfStatement", "DEL SimpleName: SoyErrorKind", "DEL SimpleName: node", "DEL TagElement: @param", "DEL MethodInvocation", "DEL SimpleName: pushState", "DEL FieldDeclaration", "DEL QualifiedName: HtmlContext.HTML_TAG", "DEL SimpleType: ArrayDeque", "DEL MethodInvocation", "DEL SimpleName: node", "DEL SimpleName: tagMatches", "DEL SimpleName: visitTemplateNode", "DEL MethodInvocation", "DEL SimpleName: node", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ParentSoyNode", "DEL SimpleType: PrintNode", "DEL BooleanLiteral: false", "DEL SimpleName: CssNode", "DEL VariableDeclarationFragment", "DEL SimpleName: pushState", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL MarkerAnnotation", "DEL Modifier: private", "DEL SimpleName: TemplateNode", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: report", "DEL ParameterizedType: ArrayDeque<>", "DEL SimpleName: errorReporter", "DEL SimpleName: getSourceLocation", "DEL VariableDeclarationFragment", "DEL SimpleName: getStaticTagNameAsLowerCase", "DEL MethodInvocation", "DEL SimpleName: popState", "DEL Block", "DEL QualifiedName: InferredElementNamespace.XHTML", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL VariableDeclarationExpression", "DEL SimpleName: visitCallParamContentNode", "DEL MethodInvocation", "DEL SimpleName: namespace", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL SimpleName: openTagStack", "DEL SimpleName: tagName", "DEL SimpleType: SoyErrorKind", "DEL Modifier: protected", "DEL SimpleName: SoyErrorKind", "DEL SingleVariableDeclaration", "DEL SimpleName: pushState", "DEL SimpleName: checkState", "DEL SimpleName: visitXidNode", "DEL SimpleName: getContentKind", "DEL MarkerAnnotation", "DEL SimpleName: stateStack", "DEL MethodInvocation", "DEL SimpleName: SoyErrorKind", "DEL SimpleName: MsgFallbackGroupNode", "DEL SimpleName: report", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"svg\"", "DEL SimpleType: SoyErrorKind", "DEL SimpleName: context", "DEL Modifier: final", "DEL Modifier: protected", "DEL MethodInvocation", "DEL SimpleName: stateStack", "DEL SimpleName: LetContentNode", "DEL PrimitiveType: void", "DEL SimpleName: of", "DEL Modifier: final", "DEL Block", "DEL SimpleName: HtmlTransformVisitor", "DEL Modifier: private", "DEL Block", "DEL Modifier: private", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: openTagStack", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: openTagToInferredNamesapce", "DEL SimpleName: XHTML", "DEL ExpressionStatement", "DEL InfixExpression: +", "DEL MethodInvocation", "DEL SimpleName: Override", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: node", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: hasValue", "DEL SimpleName: HtmlAttributeNode", "DEL SimpleName: PrintNode", "DEL SimpleType: Void", "DEL SimpleName: Override", "DEL QualifiedName: HtmlContext.HTML_TAG", "DEL SimpleName: contextForKind", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: visitChildren", "DEL PrimitiveType: void", "DEL SimpleName: attributeValue", "DEL SimpleName: getTagLocation", "DEL SimpleName: popState", "DEL Modifier: static", "DEL SimpleName: Override", "DEL MarkerAnnotation", "DEL InfixExpression: <", "DEL MethodDeclaration", "DEL SimpleName: DYNAMIC_ATTRIBUTE_NAME", "DEL SimpleName: ArrayDeque", "DEL TextElement:  and ", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: RawTextNode", "DEL SimpleName: INVALID_NODE_LOCATION_OUTSIDE_OF_ATTRIBUTE_VALUE", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: get", "DEL SimpleType: ArrayDeque", "DEL Modifier: final", "DEL SimpleName: HtmlOpenTagNode", "DEL QualifiedName: HtmlContext.TEXT", "DEL MethodInvocation", "DEL SimpleName: htmlOpenTagNode", "DEL Modifier: public", "DEL QualifiedName: Kind.RAW_TEXT_NODE", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: ErrorReporter", "DEL TextElement: incrementaldom doesn't currently run the autoescaper (which is weird, it probably should at least", "DEL SimpleName: visitHtmlAttributeValueNode", "DEL StringLiteral: \"The incremental HTML Soy backend does not allow '{'{0}'}' nodes to appear in HTML \"", "DEL ParameterizedType: ArrayDeque<HtmlContext>", "DEL Assignment: =", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: of", "DEL SimpleName: i", "DEL SimpleName: Void", "DEL SimpleName: visitChildren", "DEL SimpleName: CallParamContentNode", "DEL SimpleName: node", "DEL VariableDeclarationStatement", "DEL SimpleName: push", "DEL TagElement: @code", "DEL Modifier: static", "DEL PrimitiveType: void", "DEL SimpleName: isEmpty", "DEL ExpressionStatement", "DEL SimpleName: visitLogNode", "DEL SimpleName: of", "DEL SimpleName: HtmlContext", "DEL NumberLiteral: 0", "DEL SimpleName: popState", "DEL ClassInstanceCreation", "DEL SimpleName: report", "DEL MarkerAnnotation", "DEL SimpleName: node", "DEL ClassInstanceCreation", "DEL SimpleName: getSourceLocation", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: visitChildren", "DEL SimpleName: getChild", "DEL MethodInvocation", "DEL VariableDeclarationExpression", "DEL SimpleName: SoyErrorKind", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: errorReporter", "DEL MethodDeclaration", "DEL SimpleName: put", "DEL ExpressionStatement", "DEL SimpleName: SOY_TAG_BEFORE_ATTR_VALUE", "DEL SimpleName: getNamespace", "DEL MethodInvocation"]}]}}, {"HtmlContextVisitor_diff": {"operations": ["Delete QualifiedName: com.google.template.soy.incrementaldomsrc(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.common.base.Preconditions.checkState(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.template.soy.data.SanitizedContent.ContentKind(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.template.soy.error.ErrorReporter(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.template.soy.error.SoyErrorKind(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.template.soy.soytree.AbstractSoyNodeVisitor(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.template.soy.soytree.CallParamContentNode(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.template.soy.soytree.CssNode(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.template.soy.soytree.HtmlAttributeNode(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.template.soy.soytree.HtmlAttributeValueNode(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.template.soy.soytree.HtmlCloseTagNode(20)", "Delete ImportDeclaration(21)", "Delete QualifiedName: com.google.template.soy.soytree.HtmlContext(22)", "Delete ImportDeclaration(23)", "Delete QualifiedName: com.google.template.soy.soytree.HtmlOpenTagNode(24)", "Delete ImportDeclaration(25)", "Delete QualifiedName: com.google.template.soy.soytree.LetContentNode(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: com.google.template.soy.soytree.LogNode(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: com.google.template.soy.soytree.MsgFallbackGroupNode(30)", "Delete ImportDeclaration(31)", "Delete QualifiedName: com.google.template.soy.soytree.PrintNode(32)", "Delete ImportDeclaration(33)", "Delete QualifiedName: com.google.template.soy.soytree.RawTextNode(34)", "Delete ImportDeclaration(35)", "Delete QualifiedName: com.google.template.soy.soytree.SoyNode(36)", "Delete ImportDeclaration(37)", "Delete QualifiedName: com.google.template.soy.soytree.SoyNode.Kind(38)", "Delete ImportDeclaration(39)", "Delete QualifiedName: com.google.template.soy.soytree.SoyNode.ParentSoyNode(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: com.google.template.soy.soytree.SoyNode.StandaloneNode(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: com.google.template.soy.soytree.TemplateNode(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.google.template.soy.soytree.XidNode(46)", "Delete ImportDeclaration(47)", "Delete QualifiedName: java.util.ArrayDeque(48)", "Delete ImportDeclaration(49)", "Delete QualifiedName: java.util.IdentityHashMap(50)", "Delete ImportDeclaration(51)", "Delete TextElement: A visitor that populates the (52)", "Delete SimpleName: HtmlContext(53)", "Delete TagElement: @link(54)", "Delete TextElement:  fields of (55)", "Delete SimpleName: MsgFallbackGroupNode(56)", "Delete TagElement: @link(57)", "Delete TextElement: , (58)", "Delete SimpleName: RawTextNode(59)", "Delete TagElement: @link(60)", "Delete TextElement:  and (61)", "Delete SimpleName: PrintNode(62)", "Delete TagElement: @link(63)", "Delete TextElement:  and also enforces some additional restrictions for incremental(64)", "Delete TextElement: dom.(65)", "Delete TextElement: <p>The additional restrictions are:(66)", "Delete TextElement: <ul>(67)", "Delete TextElement: <li>Tags must have literal names(68)", "Delete TextElement: <li>Attributes with values must have literal names(69)", "Delete TextElement: <li>(70)", "Delete TextElement:  xid(71)", "Delete TagElement: @code(72)", "Delete TextElement:  and (73)", "Delete TextElement:  css(74)", "Delete TagElement: @code(75)", "Delete TextElement:  commands can only appear in attribute value context.(76)", "Delete TextElement: <li>Enforces the correct usage of self closing tags.(77)", "Delete TextElement: </ul>(78)", "Delete TextElement: <p>TODO(lukes): A lot of this logic should really be handled by the autoescaper, but(79)", "Delete TextElement: incrementaldom doesn't currently run the autoescaper (which is weird, it probably should at least(80)", "Delete TextElement: to get attribute escaping correct).(81)", "Delete TagElement(82)", "Delete Javadoc(83)", "Delete Modifier: final(84)", "Delete SimpleName: HtmlContextVisitor(85)", "Delete SimpleName: AbstractSoyNodeVisitor(86)", "Delete SimpleType: AbstractSoyNodeVisitor(87)", "Delete SimpleName: Void(88)", "Delete SimpleType: Void(89)", "Delete ParameterizedType: AbstractSoyNodeVisitor<Void>(90)", "Delete Modifier: private(91)", "Delete Modifier: static(92)", "Delete Modifier: final(93)", "Delete SimpleName: SoyErrorKind(94)", "Delete SimpleType: SoyErrorKind(95)", "Delete SimpleName: INVALID_NODE_LOCATION_OUTSIDE_OF_ATTRIBUTE_VALUE(96)", "Delete SimpleName: SoyErrorKind(97)", "Delete SimpleName: of(98)", "Delete StringLiteral: \"The incremental HTML Soy backend does not allow '{'{0}'}' nodes to appear in HTML \"(99)", "Delete StringLiteral: \"outside of attribute values.\"(100)", "Delete InfixExpression: +(101)", "Delete MethodInvocation(102)", "Delete VariableDeclarationFragment(103)", "Delete FieldDeclaration(104)", "Delete Modifier: private(105)", "Delete Modifier: static(106)", "Delete Modifier: final(107)", "Delete SimpleName: SoyErrorKind(108)", "Delete SimpleType: SoyErrorKind(109)", "Delete SimpleName: DYNAMIC_TAG_NAME(110)", "Delete SimpleName: SoyErrorKind(111)", "Delete SimpleName: of(112)", "Delete StringLiteral: \"IncrementalDom does not support dynamic tag names.\"(113)", "Delete MethodInvocation(114)", "Delete VariableDeclarationFragment(115)", "Delete FieldDeclaration(116)", "Delete Modifier: private(117)", "Delete Modifier: static(118)", "Delete Modifier: final(119)", "Delete SimpleName: SoyErrorKind(120)", "Delete SimpleType: SoyErrorKind(121)", "Delete SimpleName: DYNAMIC_ATTRIBUTE_NAME(122)", "Delete SimpleName: SoyErrorKind(123)", "Delete SimpleName: of(124)", "Delete StringLiteral: \"IncrementalDom does not support dynamic attribute names.\"(125)", "Delete MethodInvocation(126)", "Delete VariableDeclarationFragment(127)", "Delete FieldDeclaration(128)", "Delete Modifier: private(129)", "Delete Modifier: static(130)", "Delete Modifier: final(131)", "Delete SimpleName: SoyErrorKind(132)", "Delete SimpleType: SoyErrorKind(133)", "Delete SimpleName: SOY_TAG_BEFORE_ATTR_VALUE(134)", "Delete SimpleName: SoyErrorKind(135)", "Delete SimpleName: of(136)", "Delete StringLiteral: \"Soy statements are not \"(137)", "Delete StringLiteral: \"allowed before an attribute value. They should be moved inside a quotation mark.\"(138)", "Delete InfixExpression: +(139)", "Delete MethodInvocation(140)", "Delete VariableDeclarationFragment(141)", "Delete FieldDeclaration(142)", "Delete Modifier: private(143)", "Delete Modifier: static(144)", "Delete Modifier: final(145)", "Delete SimpleName: SoyErrorKind(146)", "Delete SimpleType: SoyErrorKind(147)", "Delete SimpleName: INVALID_SELF_CLOSING_TAG(148)", "Delete SimpleName: SoyErrorKind(149)", "Delete SimpleName: of(150)", "Delete StringLiteral: \"Invalid self-closing tag for \\\"{0}\\\". Self-closing tags are only valid for void tags and\"(151)", "Delete StringLiteral: \" SVG content (partially supported). For a list of void elements, see \"(152)", "Delete StringLiteral: \"https://www.w3.org/TR/html5/syntax.html#void-elements.\"(153)", "Delete InfixExpression: +(154)", "Delete MethodInvocation(155)", "Delete VariableDeclarationFragment(156)", "Delete FieldDeclaration(157)", "Delete TextElement: The namespaces that Elements can be in, excluding MathML. Used by (158)", "Delete SimpleName: HtmlTransformVisitor(159)", "Delete TagElement: @link(160)", "Delete TextElement: to keep track of the current element namespace. This allows it to handle self-closing tags(161)", "Delete TextElement: somewhat correctly.(162)", "Delete TagElement(163)", "Delete Javadoc(164)", "Delete Modifier: private(165)", "Delete SimpleName: InferredElementNamespace(166)", "Delete SimpleName: SVG(167)", "Delete EnumConstantDeclaration(168)", "Delete SimpleName: XHTML(169)", "Delete EnumConstantDeclaration(170)", "Delete EnumDeclaration(171)", "Delete Modifier: private(172)", "Delete Modifier: final(173)", "Delete SimpleName: ErrorReporter(174)", "Delete SimpleType: ErrorReporter(175)", "Delete SimpleName: errorReporter(176)", "Delete VariableDeclarationFragment(177)", "Delete FieldDeclaration(178)", "Delete Modifier: private(179)", "Delete Modifier: final(180)", "Delete SimpleName: ArrayDeque(181)", "Delete SimpleType: ArrayDeque(182)", "Delete SimpleName: HtmlContext(183)", "Delete SimpleType: HtmlContext(184)", "Delete ParameterizedType: ArrayDeque<HtmlContext>(185)", "Delete SimpleName: stateStack(186)", "Delete SimpleName: ArrayDeque(187)", "Delete SimpleType: ArrayDeque(188)", "Delete ParameterizedType: ArrayDeque<>(189)", "Delete ClassInstanceCreation(190)", "Delete VariableDeclarationFragment(191)", "Delete FieldDeclaration(192)", "Delete Modifier: private(193)", "Delete Modifier: final(194)", "Delete SimpleName: ArrayDeque(195)", "Delete SimpleType: ArrayDeque(196)", "Delete SimpleName: HtmlOpenTagNode(197)", "Delete SimpleType: HtmlOpenTagNode(198)", "Delete ParameterizedType: ArrayDeque<HtmlOpenTagNode>(199)", "Delete SimpleName: openTagStack(200)", "Delete SimpleName: ArrayDeque(201)", "Delete SimpleType: ArrayDeque(202)", "Delete ParameterizedType: ArrayDeque<>(203)", "Delete ClassInstanceCreation(204)", "Delete VariableDeclarationFragment(205)", "Delete FieldDeclaration(206)", "Delete Modifier: private(207)", "Delete Modifier: final(208)", "Delete SimpleName: IdentityHashMap(209)", "Delete SimpleType: IdentityHashMap(210)", "Delete SimpleName: HtmlOpenTagNode(211)", "Delete SimpleType: HtmlOpenTagNode(212)", "Delete SimpleName: InferredElementNamespace(213)", "Delete SimpleType: InferredElementNamespace(214)", "Delete ParameterizedType: IdentityHashMap<HtmlOpenTagNode,InferredElementNamespace>(215)", "Delete SimpleName: openTagToInferredNamesapce(216)", "Delete SimpleName: IdentityHashMap(217)", "Delete SimpleType: IdentityHashMap(218)", "Delete ParameterizedType: IdentityHashMap<>(219)", "Delete ClassInstanceCreation(220)", "Delete VariableDeclarationFragment(221)", "Delete FieldDeclaration(222)", "Delete Modifier: public(223)", "Delete SimpleName: HtmlContextVisitor(224)", "Delete SimpleName: ErrorReporter(225)", "Delete SimpleType: ErrorReporter(226)", "Delete SimpleName: errorReporter(227)", "Delete SingleVariableDeclaration(228)", "Delete ThisExpression(229)", "Delete SimpleName: errorReporter(230)", "Delete FieldAccess(231)", "Delete SimpleName: errorReporter(232)", "Delete Assignment: =(233)", "Delete ExpressionStatement(234)", "Delete Block(235)", "Delete MethodDeclaration(236)", "Delete SimpleName: Override(237)", "Delete MarkerAnnotation(238)", "Delete Modifier: protected(239)", "Delete PrimitiveType: void(240)", "Delete SimpleName: visitTemplateNode(241)", "Delete SimpleName: TemplateNode(242)", "Delete SimpleType: TemplateNode(243)", "Delete SimpleName: node(244)", "Delete SingleVariableDeclaration(245)", "Delete SimpleName: checkState(246)", "Delete SimpleName: stateStack(247)", "Delete SimpleName: isEmpty(248)", "Delete MethodInvocation(249)", "Delete MethodInvocation(250)", "Delete ExpressionStatement(251)", "Delete SimpleName: ContentKind(252)", "Delete SimpleType: ContentKind(253)", "Delete SimpleName: contentKind(254)", "Delete SimpleName: node(255)", "Delete SimpleName: getContentKind(256)", "Delete MethodInvocation(257)", "Delete VariableDeclarationFragment(258)", "Delete VariableDeclarationStatement(259)", "Delete SimpleName: pushState(260)", "Delete SimpleName: contextForKind(261)", "Delete SimpleName: contentKind(262)", "Delete MethodInvocation(263)", "Delete MethodInvocation(264)", "Delete ExpressionStatement(265)", "Delete SimpleName: visitChildren(266)", "Delete SimpleName: node(267)", "Delete MethodInvocation(268)", "Delete ExpressionStatement(269)", "Delete SimpleName: popState(270)", "Delete MethodInvocation(271)", "Delete ExpressionStatement(272)", "Delete SimpleName: checkState(273)", "Delete SimpleName: stateStack(274)", "Delete SimpleName: isEmpty(275)", "Delete MethodInvocation(276)", "Delete MethodInvocation(277)", "Delete ExpressionStatement(278)", "Delete Block(279)", "Delete MethodDeclaration(280)", "Delete SimpleName: Override(281)", "Delete MarkerAnnotation(282)", "Delete Modifier: protected(283)", "Delete PrimitiveType: void(284)", "Delete SimpleName: visitCallParamContentNode(285)", "Delete SimpleName: CallParamContentNode(286)", "Delete SimpleType: CallParamContentNode(287)", "Delete SimpleName: node(288)", "Delete SingleVariableDeclaration(289)", "Delete SimpleName: pushState(290)", "Delete SimpleName: contextForKind(291)", "Delete SimpleName: node(292)", "Delete SimpleName: getContentKind(293)", "Delete MethodInvocation(294)", "Delete MethodInvocation(295)", "Delete MethodInvocation(296)", "Delete ExpressionStatement(297)", "Delete SimpleName: visitChildren(298)", "Delete SimpleName: node(299)", "Delete MethodInvocation(300)", "Delete ExpressionStatement(301)", "Delete SimpleName: popState(302)", "Delete MethodInvocation(303)", "Delete ExpressionStatement(304)", "Delete Block(305)", "Delete MethodDeclaration(306)", "Delete SimpleName: Override(307)", "Delete MarkerAnnotation(308)", "Delete Modifier: protected(309)", "Delete PrimitiveType: void(310)", "Delete SimpleName: visitLetContentNode(311)", "Delete SimpleName: LetContentNode(312)", "Delete SimpleType: LetContentNode(313)", "Delete SimpleName: node(314)", "Delete SingleVariableDeclaration(315)", "Delete SimpleName: pushState(316)", "Delete SimpleName: contextForKind(317)", "Delete SimpleName: node(318)", "Delete SimpleName: getContentKind(319)", "Delete MethodInvocation(320)", "Delete MethodInvocation(321)", "Delete MethodInvocation(322)", "Delete ExpressionStatement(323)", "Delete SimpleName: visitChildren(324)", "Delete SimpleName: node(325)", "Delete MethodInvocation(326)", "Delete ExpressionStatement(327)", "Delete SimpleName: popState(328)", "Delete MethodInvocation(329)", "Delete ExpressionStatement(330)", "Delete Block(331)", "Delete MethodDeclaration(332)", "Delete SimpleName: Override(333)", "Delete MarkerAnnotation(334)", "Delete Modifier: protected(335)", "Delete PrimitiveType: void(336)", "Delete SimpleName: visitHtmlCloseTagNode(337)", "Delete SimpleName: HtmlCloseTagNode(338)", "Delete SimpleType: HtmlCloseTagNode(339)", "Delete SimpleName: node(340)", "Delete SingleVariableDeclaration(341)", "Delete SimpleName: node(342)", "Delete SimpleName: getTagName(343)", "Delete MethodInvocation(344)", "Delete SimpleName: isStatic(345)", "Delete MethodInvocation(346)", "Delete PrefixExpression: !(347)", "Delete SimpleName: errorReporter(348)", "Delete SimpleName: report(349)", "Delete SimpleName: node(350)", "Delete SimpleName: getTagName(351)", "Delete MethodInvocation(352)", "Delete SimpleName: getTagLocation(353)", "Delete MethodInvocation(354)", "Delete SimpleName: DYNAMIC_TAG_NAME(355)", "Delete MethodInvocation(356)", "Delete ExpressionStatement(357)", "Delete ReturnStatement(358)", "Delete Block(359)", "Delete IfStatement(360)", "Delete SimpleName: pushState(361)", "Delete QualifiedName: HtmlContext.HTML_TAG_NAME(362)", "Delete MethodInvocation(363)", "Delete ExpressionStatement(364)", "Delete SimpleName: visitChildren(365)", "Delete SimpleName: node(366)", "Delete MethodInvocation(367)", "Delete ExpressionStatement(368)", "Delete SimpleName: popState(369)", "Delete MethodInvocation(370)", "Delete ExpressionStatement(371)", "Delete PrimitiveType: boolean(372)", "Delete BooleanLiteral: false(374)", "Delete VariableDeclarationFragment(375)", "Delete VariableDeclarationStatement(376)", "Delete SimpleName: openTagStack(377)", "Delete SimpleName: isEmpty(378)", "Delete MethodInvocation(379)", "Delete PrefixExpression: !(380)", "Delete PrefixExpression: !(382)", "Delete InfixExpression: &&(383)", "Delete SimpleName: HtmlOpenTagNode(384)", "Delete SimpleType: HtmlOpenTagNode(385)", "Delete SimpleName: htmlOpenTagNode(386)", "Delete SimpleName: openTagStack(387)", "Delete SimpleName: pop(388)", "Delete MethodInvocation(389)", "Delete VariableDeclarationFragment(390)", "Delete VariableDeclarationStatement(391)", "Delete SimpleName: htmlOpenTagNode(393)", "Delete SimpleName: getTagName(394)", "Delete MethodInvocation(395)", "Delete SimpleName: getStaticTagNameAsLowerCase(396)", "Delete MethodInvocation(397)", "Delete SimpleName: get(398)", "Delete MethodInvocation(399)", "Delete SimpleName: equals(400)", "Delete SimpleName: node(401)", "Delete SimpleName: getTagName(402)", "Delete MethodInvocation(403)", "Delete SimpleName: getStaticTagNameAsLowerCase(404)", "Delete MethodInvocation(405)", "Delete SimpleName: get(406)", "Delete MethodInvocation(407)", "Delete MethodInvocation(408)", "Delete Assignment: =(409)", "Delete ExpressionStatement(410)", "Delete Block(411)", "Delete WhileStatement(412)", "Delete Block(413)", "Delete MethodDeclaration(414)", "Delete SimpleName: Override(415)", "Delete MarkerAnnotation(416)", "Delete Modifier: protected(417)", "Delete PrimitiveType: void(418)", "Delete SimpleName: visitHtmlOpenTagNode(419)", "Delete SimpleName: HtmlOpenTagNode(420)", "Delete SimpleType: HtmlOpenTagNode(421)", "Delete SimpleName: node(422)", "Delete SingleVariableDeclaration(423)", "Delete SimpleName: node(424)", "Delete SimpleName: getTagName(425)", "Delete MethodInvocation(426)", "Delete SimpleName: isStatic(427)", "Delete MethodInvocation(428)", "Delete PrefixExpression: !(429)", "Delete SimpleName: errorReporter(430)", "Delete SimpleName: report(431)", "Delete SimpleName: node(432)", "Delete SimpleName: getTagName(433)", "Delete MethodInvocation(434)", "Delete SimpleName: getTagLocation(435)", "Delete MethodInvocation(436)", "Delete SimpleName: DYNAMIC_TAG_NAME(437)", "Delete MethodInvocation(438)", "Delete ExpressionStatement(439)", "Delete ReturnStatement(440)", "Delete Block(441)", "Delete IfStatement(442)", "Delete SimpleName: String(443)", "Delete SimpleType: String(444)", "Delete SimpleName: tagName(445)", "Delete SimpleName: node(446)", "Delete SimpleName: getTagName(447)", "Delete MethodInvocation(448)", "Delete SimpleName: getStaticTagNameAsLowerCase(449)", "Delete MethodInvocation(450)", "Delete SimpleName: get(451)", "Delete MethodInvocation(452)", "Delete VariableDeclarationFragment(453)", "Delete VariableDeclarationStatement(454)", "Delete SimpleName: InferredElementNamespace(455)", "Delete SimpleType: InferredElementNamespace(456)", "Delete SimpleName: namespace(457)", "Delete SimpleName: getNamespace(458)", "Delete SimpleName: tagName(459)", "Delete MethodInvocation(460)", "Delete VariableDeclarationFragment(461)", "Delete VariableDeclarationStatement(462)", "Delete SimpleName: node(463)", "Delete SimpleName: isSelfClosing(464)", "Delete MethodInvocation(465)", "Delete SimpleName: namespace(466)", "Delete QualifiedName: InferredElementNamespace.XHTML(467)", "Delete InfixExpression: ==(468)", "Delete InfixExpression: &&(469)", "Delete SimpleName: node(470)", "Delete SimpleName: getTagName(471)", "Delete MethodInvocation(472)", "Delete SimpleName: isDefinitelyVoid(473)", "Delete MethodInvocation(474)", "Delete PrefixExpression: !(475)", "Delete InfixExpression: &&(476)", "Delete SimpleName: errorReporter(477)", "Delete SimpleName: report(478)", "Delete SimpleName: node(479)", "Delete SimpleName: getTagName(480)", "Delete MethodInvocation(481)", "Delete SimpleName: getTagLocation(482)", "Delete MethodInvocation(483)", "Delete SimpleName: INVALID_SELF_CLOSING_TAG(484)", "Delete SimpleName: tagName(485)", "Delete MethodInvocation(486)", "Delete ExpressionStatement(487)", "Delete Block(488)", "Delete IfStatement(489)", "Delete SimpleName: openTagStack(490)", "Delete SimpleName: push(491)", "Delete SimpleName: node(492)", "Delete MethodInvocation(493)", "Delete ExpressionStatement(494)", "Delete SimpleName: openTagToInferredNamesapce(495)", "Delete SimpleName: put(496)", "Delete SimpleName: node(497)", "Delete SimpleName: namespace(498)", "Delete MethodInvocation(499)", "Delete ExpressionStatement(500)", "Delete SimpleName: pushState(501)", "Delete QualifiedName: HtmlContext.HTML_TAG_NAME(502)", "Delete MethodInvocation(503)", "Delete ExpressionStatement(504)", "Delete SimpleName: visit(505)", "Delete SimpleName: node(506)", "Delete SimpleName: getChild(507)", "Delete NumberLiteral: 0(508)", "Delete MethodInvocation(509)", "Delete MethodInvocation(510)", "Delete ExpressionStatement(511)", "Delete SimpleName: popState(512)", "Delete MethodInvocation(513)", "Delete ExpressionStatement(514)", "Delete SimpleName: pushState(515)", "Delete QualifiedName: HtmlContext.HTML_TAG(516)", "Delete MethodInvocation(517)", "Delete ExpressionStatement(518)", "Delete PrimitiveType: int(519)", "Delete SimpleName: i(520)", "Delete NumberLiteral: 1(521)", "Delete VariableDeclarationFragment(522)", "Delete VariableDeclarationExpression(523)", "Delete SimpleName: i(524)", "Delete SimpleName: node(525)", "Delete SimpleName: numChildren(526)", "Delete MethodInvocation(527)", "Delete InfixExpression: <(528)", "Delete SimpleName: i(529)", "Delete PostfixExpression: ++(530)", "Delete SimpleName: visit(531)", "Delete SimpleName: node(532)", "Delete SimpleName: getChild(533)", "Delete SimpleName: i(534)", "Delete MethodInvocation(535)", "Delete MethodInvocation(536)", "Delete ExpressionStatement(537)", "Delete Block(538)", "Delete ForStatement(539)", "Delete SimpleName: popState(540)", "Delete MethodInvocation(541)", "Delete ExpressionStatement(542)", "Delete Block(543)", "Delete MethodDeclaration(544)", "Delete SimpleName: Override(545)", "Delete MarkerAnnotation(546)", "Delete Modifier: protected(547)", "Delete PrimitiveType: void(548)", "Delete SimpleName: visitHtmlAttributeNode(549)", "Delete SimpleName: HtmlAttributeNode(550)", "Delete SimpleType: HtmlAttributeNode(551)", "Delete SimpleName: node(552)", "Delete SingleVariableDeclaration(553)", "Delete SimpleName: visit(554)", "Delete SimpleName: node(555)", "Delete SimpleName: getChild(556)", "Delete NumberLiteral: 0(557)", "Delete MethodInvocation(558)", "Delete MethodInvocation(559)", "Delete ExpressionStatement(560)", "Delete SimpleName: node(561)", "Delete SimpleName: hasValue(562)", "Delete MethodInvocation(563)", "Delete SimpleName: node(564)", "Delete SimpleName: getChild(565)", "Delete NumberLiteral: 0(566)", "Delete MethodInvocation(567)", "Delete SimpleName: getKind(568)", "Delete MethodInvocation(569)", "Delete QualifiedName: Kind.RAW_TEXT_NODE(570)", "Delete InfixExpression: !=(571)", "Delete SimpleName: errorReporter(572)", "Delete SimpleName: report(573)", "Delete SimpleName: node(574)", "Delete SimpleName: getChild(575)", "Delete NumberLiteral: 0(576)", "Delete MethodInvocation(577)", "Delete SimpleName: getSourceLocation(578)", "Delete MethodInvocation(579)", "Delete SimpleName: DYNAMIC_ATTRIBUTE_NAME(580)", "Delete MethodInvocation(581)", "Delete ExpressionStatement(582)", "Delete Block(583)", "Delete IfStatement(584)", "Delete SimpleName: StandaloneNode(585)", "Delete SimpleType: StandaloneNode(586)", "Delete SimpleName: attributeValue(587)", "Delete SimpleName: node(588)", "Delete SimpleName: getChild(589)", "Delete NumberLiteral: 1(590)", "Delete MethodInvocation(591)", "Delete VariableDeclarationFragment(592)", "Delete VariableDeclarationStatement(593)", "Delete SimpleName: attributeValue(594)", "Delete SimpleName: getKind(595)", "Delete MethodInvocation(596)", "Delete QualifiedName: Kind.HTML_ATTRIBUTE_VALUE_NODE(597)", "Delete InfixExpression: !=(598)", "Delete SimpleName: errorReporter(599)", "Delete SimpleName: report(600)", "Delete SimpleName: attributeValue(601)", "Delete SimpleName: getSourceLocation(602)", "Delete MethodInvocation(603)", "Delete SimpleName: SOY_TAG_BEFORE_ATTR_VALUE(604)", "Delete MethodInvocation(605)", "Delete ExpressionStatement(606)", "Delete Block(607)", "Delete IfStatement(608)", "Delete PrimitiveType: int(609)", "Delete SimpleName: i(610)", "Delete NumberLiteral: 1(611)", "Delete VariableDeclarationFragment(612)", "Delete VariableDeclarationExpression(613)", "Delete SimpleName: i(614)", "Delete SimpleName: node(615)", "Delete SimpleName: numChildren(616)", "Delete MethodInvocation(617)", "Delete InfixExpression: <(618)", "Delete SimpleName: i(619)", "Delete PostfixExpression: ++(620)", "Delete SimpleName: visit(621)", "Delete SimpleName: node(622)", "Delete SimpleName: getChild(623)", "Delete SimpleName: i(624)", "Delete MethodInvocation(625)", "Delete MethodInvocation(626)", "Delete ExpressionStatement(627)", "Delete Block(628)", "Delete ForStatement(629)", "Delete Block(630)", "Delete IfStatement(631)", "Delete Block(632)", "Delete MethodDeclaration(633)", "Delete SimpleName: Override(634)", "Delete MarkerAnnotation(635)", "Delete Modifier: protected(636)", "Delete PrimitiveType: void(637)", "Delete SimpleName: visitHtmlAttributeValueNode(638)", "Delete SimpleName: HtmlAttributeValueNode(639)", "Delete SimpleType: HtmlAttributeValueNode(640)", "Delete SimpleName: node(641)", "Delete SingleVariableDeclaration(642)", "Delete SimpleName: pushState(643)", "Delete QualifiedName: HtmlContext.HTML_NORMAL_ATTR_VALUE(644)", "Delete MethodInvocation(645)", "Delete ExpressionStatement(646)", "Delete SimpleName: visitHtmlAttributeValueNode(647)", "Delete SimpleName: node(648)", "Delete SuperMethodInvocation(649)", "Delete ExpressionStatement(650)", "Delete SimpleName: popState(651)", "Delete MethodInvocation(652)", "Delete ExpressionStatement(653)", "Delete Block(654)", "Delete MethodDeclaration(655)", "Delete SimpleName: Override(656)", "Delete MarkerAnnotation(657)", "Delete Modifier: protected(658)", "Delete PrimitiveType: void(659)", "Delete SimpleName: visitLogNode(660)", "Delete SimpleName: LogNode(661)", "Delete SimpleType: LogNode(662)", "Delete SimpleName: node(663)", "Delete SingleVariableDeclaration(664)", "Delete SimpleName: pushState(665)", "Delete QualifiedName: HtmlContext.TEXT(666)", "Delete MethodInvocation(667)", "Delete ExpressionStatement(668)", "Delete SimpleName: visitChildren(669)", "Delete SimpleName: node(670)", "Delete MethodInvocation(671)", "Delete ExpressionStatement(672)", "Delete SimpleName: popState(673)", "Delete MethodInvocation(674)", "Delete ExpressionStatement(675)", "Delete Block(676)", "Delete MethodDeclaration(677)", "Delete SimpleName: Override(678)", "Delete MarkerAnnotation(679)", "Delete Modifier: protected(680)", "Delete PrimitiveType: void(681)", "Delete SimpleName: visitMsgFallbackGroupNode(682)", "Delete SimpleName: MsgFallbackGroupNode(683)", "Delete SimpleType: MsgFallbackGroupNode(684)", "Delete SimpleName: node(685)", "Delete SingleVariableDeclaration(686)", "Delete SimpleName: node(687)", "Delete SimpleName: setHtmlContext(688)", "Delete SimpleName: getState(689)", "Delete MethodInvocation(690)", "Delete MethodInvocation(691)", "Delete ExpressionStatement(692)", "Delete SimpleName: visitChildren(693)", "Delete SimpleName: node(694)", "Delete MethodInvocation(695)", "Delete ExpressionStatement(696)", "Delete Block(697)", "Delete MethodDeclaration(698)", "Delete SimpleName: Override(699)", "Delete MarkerAnnotation(700)", "Delete Modifier: protected(701)", "Delete PrimitiveType: void(702)", "Delete SimpleName: visitPrintNode(703)", "Delete SimpleName: PrintNode(704)", "Delete SimpleType: PrintNode(705)", "Delete SimpleName: node(706)", "Delete SingleVariableDeclaration(707)", "Delete SimpleName: node(708)", "Delete SimpleName: setHtmlContext(709)", "Delete SimpleName: getState(710)", "Delete MethodInvocation(711)", "Delete MethodInvocation(712)", "Delete ExpressionStatement(713)", "Delete Block(714)", "Delete MethodDeclaration(715)", "Delete SimpleName: Override(716)", "Delete MarkerAnnotation(717)", "Delete Modifier: protected(718)", "Delete PrimitiveType: void(719)", "Delete SimpleName: visitRawTextNode(720)", "Delete SimpleName: RawTextNode(721)", "Delete SimpleType: RawTextNode(722)", "Delete SimpleName: node(723)", "Delete SingleVariableDeclaration(724)", "Delete SimpleName: node(725)", "Delete SimpleName: setHtmlContext(726)", "Delete SimpleName: getState(727)", "Delete MethodInvocation(728)", "Delete MethodInvocation(729)", "Delete ExpressionStatement(730)", "Delete Block(731)", "Delete MethodDeclaration(732)", "Delete SimpleName: Override(733)", "Delete MarkerAnnotation(734)", "Delete Modifier: protected(735)", "Delete PrimitiveType: void(736)", "Delete SimpleName: visitCssNode(737)", "Delete SimpleName: CssNode(738)", "Delete SimpleType: CssNode(739)", "Delete SimpleName: node(740)", "Delete SingleVariableDeclaration(741)", "Delete SimpleName: getState(742)", "Delete MethodInvocation(743)", "Delete QualifiedName: HtmlContext.HTML_NORMAL_ATTR_VALUE(744)", "Delete InfixExpression: !=(745)", "Delete SimpleName: getState(746)", "Delete MethodInvocation(747)", "Delete QualifiedName: HtmlContext.TEXT(748)", "Delete InfixExpression: !=(749)", "Delete InfixExpression: &&(750)", "Delete SimpleName: errorReporter(751)", "Delete SimpleName: report(752)", "Delete SimpleName: node(753)", "Delete SimpleName: getSourceLocation(754)", "Delete MethodInvocation(755)", "Delete SimpleName: INVALID_NODE_LOCATION_OUTSIDE_OF_ATTRIBUTE_VALUE(756)", "Delete StringLiteral: \"css\"(757)", "Delete MethodInvocation(758)", "Delete ExpressionStatement(759)", "Delete Block(760)", "Delete IfStatement(761)", "Delete SimpleName: visitCssNode(762)", "Delete SimpleName: node(763)", "Delete SuperMethodInvocation(764)", "Delete ExpressionStatement(765)", "Delete Block(766)", "Delete MethodDeclaration(767)", "Delete SimpleName: Override(768)", "Delete MarkerAnnotation(769)", "Delete Modifier: protected(770)", "Delete PrimitiveType: void(771)", "Delete SimpleName: visitXidNode(772)", "Delete SimpleName: XidNode(773)", "Delete SimpleType: XidNode(774)", "Delete SimpleName: node(775)", "Delete SingleVariableDeclaration(776)", "Delete SimpleName: getState(777)", "Delete MethodInvocation(778)", "Delete QualifiedName: HtmlContext.HTML_NORMAL_ATTR_VALUE(779)", "Delete InfixExpression: !=(780)", "Delete SimpleName: getState(781)", "Delete MethodInvocation(782)", "Delete QualifiedName: HtmlContext.TEXT(783)", "Delete InfixExpression: !=(784)", "Delete InfixExpression: &&(785)", "Delete SimpleName: errorReporter(786)", "Delete SimpleName: report(787)", "Delete SimpleName: node(788)", "Delete SimpleName: getSourceLocation(789)", "Delete MethodInvocation(790)", "Delete SimpleName: INVALID_NODE_LOCATION_OUTSIDE_OF_ATTRIBUTE_VALUE(791)", "Delete StringLiteral: \"xid\"(792)", "Delete MethodInvocation(793)", "Delete ExpressionStatement(794)", "Delete Block(795)", "Delete IfStatement(796)", "Delete SimpleName: visitXidNode(797)", "Delete SimpleName: node(798)", "Delete SuperMethodInvocation(799)", "Delete ExpressionStatement(800)", "Delete Block(801)", "Delete MethodDeclaration(802)", "Delete SimpleName: Override(803)", "Delete MarkerAnnotation(804)", "Delete Modifier: protected(805)", "Delete PrimitiveType: void(806)", "Delete SimpleName: visitSoyNode(807)", "Delete SimpleName: SoyNode(808)", "Delete SimpleType: SoyNode(809)", "Delete SimpleName: node(810)", "Delete SingleVariableDeclaration(811)", "Delete SimpleName: node(812)", "Delete SimpleName: ParentSoyNode(813)", "Delete SimpleType: ParentSoyNode(814)", "Delete InstanceofExpression(815)", "Delete SimpleName: visitChildren(816)", "Delete SimpleName: ParentSoyNode(817)", "Delete SimpleType: ParentSoyNode(818)", "Delete WildcardType: ?(819)", "Delete ParameterizedType: ParentSoyNode<?>(820)", "Delete SimpleName: node(821)", "Delete CastExpression(822)", "Delete MethodInvocation(823)", "Delete ExpressionStatement(824)", "Delete Block(825)", "Delete IfStatement(826)", "Delete Block(827)", "Delete MethodDeclaration(828)", "Delete SimpleName: tagName(829)", "Delete TextElement:  The tag name to get the namespace for, given the current stack of open Elements.(830)", "Delete TagElement: @param(831)", "Delete Javadoc(832)", "Delete Modifier: private(833)", "Delete SimpleName: InferredElementNamespace(834)", "Delete SimpleType: InferredElementNamespace(835)", "Delete SimpleName: getNamespace(836)", "Delete SimpleName: String(837)", "Delete SimpleType: String(838)", "Delete SimpleName: tagName(839)", "Delete SingleVariableDeclaration(840)", "Delete SimpleName: tagName(841)", "Delete SimpleName: equalsIgnoreCase(842)", "Delete StringLiteral: \"svg\"(843)", "Delete MethodInvocation(844)", "Delete QualifiedName: InferredElementNamespace.SVG(845)", "Delete ReturnStatement(846)", "Delete Block(847)", "Delete IfStatement(848)", "Delete SimpleName: tagName(849)", "Delete SimpleName: equalsIgnoreCase(850)", "Delete StringLiteral: \"foreignObject\"(851)", "Delete MethodInvocation(852)", "Delete SimpleName: openTagStack(853)", "Delete SimpleName: isEmpty(854)", "Delete MethodInvocation(855)", "Delete InfixExpression: ||(856)", "Delete QualifiedName: InferredElementNamespace.XHTML(857)", "Delete ReturnStatement(858)", "Delete Block(859)", "Delete IfStatement(860)", "Delete SimpleName: openTagToInferredNamesapce(861)", "Delete SimpleName: get(862)", "Delete SimpleName: openTagStack(863)", "Delete SimpleName: peek(864)", "Delete MethodInvocation(865)", "Delete MethodInvocation(866)", "Delete ReturnStatement(867)", "Delete Block(868)", "Delete MethodDeclaration(869)", "Delete Modifier: private(870)", "Delete PrimitiveType: void(871)", "Delete SimpleName: pushState(872)", "Delete SimpleName: HtmlContext(873)", "Delete SimpleType: HtmlContext(874)", "Delete SimpleName: context(875)", "Delete SingleVariableDeclaration(876)", "Delete SimpleName: stateStack(877)", "Delete SimpleName: push(878)", "Delete SimpleName: context(879)", "Delete MethodInvocation(880)", "Delete ExpressionStatement(881)", "Delete Block(882)", "Delete MethodDeclaration(883)", "Delete Modifier: private(884)", "Delete PrimitiveType: void(885)", "Delete SimpleName: popState(886)", "Delete SimpleName: stateStack(887)", "Delete SimpleName: pop(888)", "Delete MethodInvocation(889)", "Delete ExpressionStatement(890)", "Delete Block(891)", "Delete MethodDeclaration(892)", "Delete Modifier: private(893)", "Delete SimpleName: HtmlContext(894)", "Delete SimpleType: HtmlContext(895)", "Delete SimpleName: getState(896)", "Delete SimpleName: stateStack(897)", "Delete SimpleName: peek(898)", "Delete MethodInvocation(899)", "Delete ReturnStatement(900)", "Delete Block(901)", "Delete MethodDeclaration(902)", "Delete Modifier: private(903)", "Delete SimpleName: HtmlContext(904)", "Delete SimpleType: HtmlContext(905)", "Delete SimpleName: contextForKind(906)", "Delete SimpleName: ContentKind(907)", "Delete SimpleType: ContentKind(908)", "Delete SimpleName: contentKind(909)", "Delete SingleVariableDeclaration(910)", "Delete SimpleName: contentKind(911)", "Delete SimpleName: HTML(912)", "Delete SwitchCase(913)", "Delete QualifiedName: HtmlContext.HTML_PCDATA(914)", "Delete ReturnStatement(915)", "Delete SimpleName: ATTRIBUTES(916)", "Delete SwitchCase(917)", "Delete QualifiedName: HtmlContext.HTML_TAG(918)", "Delete ReturnStatement(919)", "Delete SwitchCase(920)", "Delete QualifiedName: HtmlContext.TEXT(921)", "Delete ReturnStatement(922)", "Delete SwitchStatement(923)", "Delete Block(924)", "Delete MethodDeclaration(925)", "Delete TypeDeclaration: class(926)"]}}, {"IncrementalDomSrcMain_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 8"]}, {"root": "UPDATE from com.google.template.soy.passes.CombineConsecutiveRawTextNodesVisitor to com.google.template.soy.html.passes.HtmlTransformVisitor", "operations": ["UPD QualifiedName: com.google.template.soy.passes.CombineConsecutiveRawTextNodesVisitor from com.google.template.soy.passes.CombineConsecutiveRawTextNodesVisitor to com.google.template.soy.html.passes.HtmlTransformVisitor"]}, {"root": "UPDATE from HtmlContextVisitor to HtmlTransformVisitor", "operations": ["UPD SimpleName: HtmlContextVisitor from HtmlContextVisitor to HtmlTransformVisitor", "UPD SimpleType: HtmlContextVisitor from HtmlContextVisitor to HtmlTransformVisitor"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: soyTree", "DEL ExpressionStatement", "DEL SimpleName: exec", "DEL ClassInstanceCreation", "DEL SimpleType: CombineConsecutiveRawTextNodesVisitor", "DEL MethodInvocation", "DEL SimpleName: CombineConsecutiveRawTextNodesVisitor", "DEL MethodInvocation", "DEL SimpleName: getNodeIdGenerator", "DEL SimpleName: soyTree"]}]}}, {"IncrementalDomSrcMain_diff": {"operations": ["Move ImportDeclaration(25) into CompilationUnit(521) at 8", "Update QualifiedName: com.google.template.soy.passes.CombineConsecutiveRawTextNodesVisitor(24) to com.google.template.soy.html.passes.HtmlTransformVisitor", "Update SimpleType: HtmlContextVisitor(300) to HtmlTransformVisitor", "Update SimpleName: HtmlContextVisitor(299) to HtmlTransformVisitor", "Delete SimpleName: CombineConsecutiveRawTextNodesVisitor(273)", "Delete SimpleType: CombineConsecutiveRawTextNodesVisitor(274)", "Delete SimpleName: soyTree(275)", "Delete SimpleName: getNodeIdGenerator(276)", "Delete MethodInvocation(277)", "Delete ClassInstanceCreation(278)", "Delete SimpleName: exec(279)", "Delete SimpleName: soyTree(280)", "Delete MethodInvocation(281)", "Delete ExpressionStatement(282)"]}}, {"UnescapingVisitor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from com.google.template.soy.soytree.AbstractSoyNodeVisitor to com.google.template.soy.html.AbstractHtmlSoyNodeVisitor", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.AbstractSoyNodeVisitor from com.google.template.soy.soytree.AbstractSoyNodeVisitor to com.google.template.soy.html.AbstractHtmlSoyNodeVisitor"]}, {"root": "UPDATE from AbstractSoyNodeVisitor<Void> to AbstractHtmlSoyNodeVisitor<Void>", "operations": ["UPD ParameterizedType: AbstractSoyNodeVisitor<Void> from AbstractSoyNodeVisitor<Void> to AbstractHtmlSoyNodeVisitor<Void>"]}, {"root": "UPDATE from AbstractSoyNodeVisitor to AbstractHtmlSoyNodeVisitor", "operations": ["UPD SimpleType: AbstractSoyNodeVisitor from AbstractSoyNodeVisitor to AbstractHtmlSoyNodeVisitor", "UPD SimpleName: AbstractSoyNodeVisitor from AbstractSoyNodeVisitor to AbstractHtmlSoyNodeVisitor"]}]}}, {"UnescapingVisitor_diff": {"operations": ["Move ImportDeclaration(5) into CompilationUnit(244) at 4", "Update QualifiedName: com.google.template.soy.soytree.AbstractSoyNodeVisitor(6) to com.google.template.soy.html.AbstractHtmlSoyNodeVisitor", "Update ParameterizedType: AbstractSoyNodeVisitor<Void>(53) to AbstractHtmlSoyNodeVisitor<Void>", "Update SimpleType: AbstractSoyNodeVisitor(50) to AbstractHtmlSoyNodeVisitor", "Update SimpleName: AbstractSoyNodeVisitor(49) to AbstractHtmlSoyNodeVisitor"]}}, {"DesugarHtmlNodesPass_cluster": {"actions": [{"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ClassInstanceCreation to MethodInvocation at 0", "INS SimpleName: idGenerator to ClassInstanceCreation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleType: CombineConsecutiveRawTextNodesVisitor to ClassInstanceCreation at 0", "INS SimpleName: CombineConsecutiveRawTextNodesVisitor to SimpleType: CombineConsecutiveRawTextNodesVisitor at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: exec to MethodInvocation at 1"]}]}}, {"DesugarHtmlNodesPass_diff": {"operations": ["Insert ExpressionStatement(132) into Block(133) at 1", "Insert MethodInvocation(131) into ExpressionStatement(132) at 0", "Insert ClassInstanceCreation(128) into MethodInvocation(131) at 0", "Insert SimpleName: exec(129) into MethodInvocation(131) at 1", "Insert SimpleName: node(130) into MethodInvocation(131) at 2", "Insert SimpleType: CombineConsecutiveRawTextNodesVisitor(126) into ClassInstanceCreation(128) at 0", "Insert SimpleName: idGenerator(127) into ClassInstanceCreation(128) at 1", "Insert SimpleName: CombineConsecutiveRawTextNodesVisitor(125) into SimpleType: CombineConsecutiveRawTextNodesVisitor(126) at 0"]}}, {"HtmlRewritePass_cluster": {"actions": [{"root": "INS ParameterizedType: ImmutableList<String> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: ImmutableList to SimpleType: ImmutableList at 0", "INS SimpleType: ImmutableList to ParameterizedType: ImmutableList<String> at 0", "INS SimpleName: String to SimpleType: String at 0", "INS ParameterizedType: ImmutableList<String> to SingleVariableDeclaration at 0", "INS SimpleType: String to ParameterizedType: ImmutableList<String> at 1"]}, {"root": "INS SimpleName: experimentalFeatures to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: experimentalFeatures to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from enableRewriting to experimentalFeatures", "operations": ["UPD SimpleName: enableRewriting from enableRewriting to experimentalFeatures"]}, {"root": "UPDATE from  then this will rewrite the AST to contain the new nodes to  The experimental features that are enabled in the compiler", "operations": ["UPD TextElement:  then this will rewrite the AST to contain the new nodes from  then this will rewrite the AST to contain the new nodes to  The experimental features that are enabled in the compiler"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: experimentalFeatures to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: contains to MethodInvocation at 1", "INS StringLiteral: \"stricthtml\" to MethodInvocation at 2"]}, {"root": "UPDATE from  If the current tag is a close tag. to  is is a close tag", "operations": ["UPD TextElement:  If the current tag is a close tag. from  If the current tag is a close tag. to  is is a close tag"]}, {"root": "DEL TextElement:  If ", "operations": ["DEL TextElement:  If "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  true"]}, {"root": "DEL TextElement: otherwise we will run in 'checking only' mode.", "operations": ["DEL TextElement: otherwise we will run in 'checking only' mode."]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL SimpleName: enableRewriting", "operations": ["DEL SimpleName: enableRewriting"]}, {"root": "DEL SimpleName: enableRewriting", "operations": ["DEL SimpleName: enableRewriting"]}]}}, {"HtmlRewritePass_diff": {"operations": ["Insert ParameterizedType: ImmutableList<String>(870) into SingleVariableDeclaration(872) at 0", "Insert SimpleName: experimentalFeatures(871) into SingleVariableDeclaration(872) at 1", "Update SimpleName: enableRewriting(853) to experimentalFeatures", "Update TextElement:  then this will rewrite the AST to contain the new nodes(857) to  The experimental features that are enabled in the compiler", "Insert SimpleType: ImmutableList(867) into ParameterizedType: ImmutableList<String>(870) at 0", "Insert SimpleType: String(869) into ParameterizedType: ImmutableList<String>(870) at 1", "Insert SimpleName: ImmutableList(866) into SimpleType: ImmutableList(867) at 0", "Insert SimpleName: String(868) into SimpleType: String(869) at 0", "Insert MethodInvocation(887) into Assignment: =(888) at 1", "Update TextElement:  If the current tag is a close tag.(6261) to  is is a close tag", "Insert SimpleName: experimentalFeatures(884) into MethodInvocation(887) at 0", "Insert SimpleName: contains(885) into MethodInvocation(887) at 1", "Insert StringLiteral: \"stricthtml\"(886) into MethodInvocation(887) at 2", "Delete TextElement:  If (854)", "Delete TextElement:  true(855)", "Delete TagElement: @code(856)", "Delete TextElement: otherwise we will run in 'checking only' mode.(858)", "Delete PrimitiveType: boolean(870)", "Delete SimpleName: enableRewriting(871)", "Delete SimpleName: enableRewriting(884)"]}}, {"PassManager_cluster": {"actions": [{"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 22"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: HtmlRewritePass to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: HtmlRewritePass to ClassInstanceCreation at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS SimpleName: options to MethodInvocation at 0", "INS SimpleName: getExperimentalFeatures to MethodInvocation at 1", "INS MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SimpleName: enableHtmlRewriting", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: private"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: enableHtmlRewriting", "DEL ExpressionStatement", "DEL Assignment: =", "DEL ThisExpression", "DEL FieldAccess", "DEL QualifiedName: builder.enableHtmlRewriting"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL SimpleName: enabledStrictHtml", "DEL InfixExpression: ||", "DEL SimpleName: enableHtmlRewriting"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: enableHtmlRewriting", "DEL Block", "DEL IfStatement", "DEL PrefixExpression: !"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: add", "DEL SimpleName: fileSetPassBuilder", "DEL SimpleType: CombinedRawTextNodesPass", "DEL SimpleName: CombinedRawTextNodesPass", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ExpressionStatement"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: A builder for configuring the pass manager. ", "DEL TagElement", "DEL Javadoc"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleName: enableHtmlRewriting"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: SoyGeneralOptions", "DEL TextElement: .", "DEL ThisExpression", "DEL FieldAccess", "DEL SimpleName: DesugarHtmlNodesPass", "DEL TextElement: This option triggers the ", "DEL TextElement:  and disables the ", "DEL SimpleName: getExperimentalFeatures", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL SimpleName: HtmlRewritePass", "DEL ThisExpression", "DEL Block", "DEL TagElement", "DEL ExpressionStatement", "DEL Javadoc", "DEL BooleanLiteral: true", "DEL Modifier: public", "DEL TagElement: @link", "DEL SimpleName: enhableHtmlRewriting", "DEL SimpleType: Builder", "DEL Assignment: =", "DEL SimpleName: enableHtmlRewriting", "DEL TextElement:  experimental features", "DEL TagElement: @link", "DEL TextElement: .", "DEL ReturnStatement", "DEL SimpleName: Builder", "DEL TextElement: <p>Setting this will override the normal mechanism of enabling this via ", "DEL MethodRef"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL SimpleName: Override", "DEL ExpressionStatement", "DEL SimpleName: run", "DEL SimpleName: exec", "DEL SimpleName: TemplateRegistry", "DEL SimpleType: CompilerFileSetPass", "DEL SimpleName: CompilerFileSetPass", "DEL TypeDeclaration: class", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL PrimitiveType: void", "DEL SimpleType: SoyFileSetNode", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: registry", "DEL SimpleName: CombineConsecutiveRawTextNodesVisitor", "DEL SingleVariableDeclaration", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL SimpleName: getNodeIdGenerator", "DEL Block", "DEL Modifier: static", "DEL SimpleType: CombineConsecutiveRawTextNodesVisitor", "DEL SimpleName: SoyFileSetNode", "DEL Modifier: public", "DEL SimpleName: fileSet", "DEL SimpleName: fileSet", "DEL SimpleName: CombinedRawTextNodesPass", "DEL SimpleType: TemplateRegistry", "DEL SimpleName: fileSet", "DEL MarkerAnnotation"]}]}}, {"PassManager_diff": {"operations": ["Move ExpressionStatement(477) into Block(472) at 22", "Move SimpleType: HtmlRewritePass(238) into VariableDeclarationStatement(233) at 0", "Move SimpleType: HtmlRewritePass(235) into ClassInstanceCreation(231) at 0", "Insert MethodInvocation(229) into ClassInstanceCreation(231) at 1", "Insert SimpleName: options(227) into MethodInvocation(229) at 0", "Insert SimpleName: getExperimentalFeatures(228) into MethodInvocation(229) at 1", "Delete Modifier: private(154)", "Delete Modifier: final(155)", "Delete PrimitiveType: boolean(156)", "Delete SimpleName: enableHtmlRewriting(157)", "Delete VariableDeclarationFragment(158)", "Delete FieldDeclaration(159)", "Delete ThisExpression(218)", "Delete SimpleName: enableHtmlRewriting(219)", "Delete FieldAccess(220)", "Delete QualifiedName: builder.enableHtmlRewriting(221)", "Delete Assignment: =(222)", "Delete ExpressionStatement(223)", "Delete SimpleName: enabledStrictHtml(239)", "Delete SimpleName: enableHtmlRewriting(240)", "Delete InfixExpression: ||(241)", "Delete SimpleName: enableHtmlRewriting(469)", "Delete PrefixExpression: !(470)", "Delete Block(478)", "Delete IfStatement(479)", "Delete SimpleName: fileSetPassBuilder(480)", "Delete SimpleName: add(481)", "Delete SimpleName: CombinedRawTextNodesPass(482)", "Delete SimpleType: CombinedRawTextNodesPass(483)", "Delete ClassInstanceCreation(484)", "Delete MethodInvocation(485)", "Delete ExpressionStatement(486)", "Delete TextElement: A builder for configuring the pass manager. (557)", "Delete TagElement(558)", "Delete Javadoc(559)", "Delete Modifier: private(564)", "Delete PrimitiveType: boolean(565)", "Delete SimpleName: enableHtmlRewriting(566)", "Delete VariableDeclarationFragment(567)", "Delete FieldDeclaration(568)", "Delete TextElement: This option triggers the (774)", "Delete SimpleName: HtmlRewritePass(775)", "Delete TagElement: @link(776)", "Delete TextElement:  and disables the (777)", "Delete SimpleName: DesugarHtmlNodesPass(778)", "Delete TagElement: @link(779)", "Delete TextElement: .(780)", "Delete TextElement: <p>Setting this will override the normal mechanism of enabling this via (781)", "Delete SimpleName: SoyGeneralOptions(782)", "Delete SimpleName: getExperimentalFeatures(783)", "Delete MethodRef(784)", "Delete TextElement:  experimental features(785)", "Delete TagElement: @link(786)", "Delete TextElement: .(787)", "Delete TagElement(788)", "Delete Javadoc(789)", "Delete Modifier: public(790)", "Delete SimpleName: Builder(791)", "Delete SimpleType: Builder(792)", "Delete SimpleName: enhableHtmlRewriting(793)", "Delete ThisExpression(794)", "Delete SimpleName: enableHtmlRewriting(795)", "Delete FieldAccess(796)", "Delete BooleanLiteral: true(797)", "Delete Assignment: =(798)", "Delete ExpressionStatement(799)", "Delete ThisExpression(800)", "Delete ReturnStatement(801)", "Delete Block(802)", "Delete MethodDeclaration(803)", "Delete Modifier: private(1286)", "Delete Modifier: static(1287)", "Delete Modifier: final(1288)", "Delete SimpleName: CombinedRawTextNodesPass(1289)", "Delete SimpleName: CompilerFileSetPass(1290)", "Delete SimpleType: CompilerFileSetPass(1291)", "Delete SimpleName: Override(1292)", "Delete MarkerAnnotation(1293)", "Delete Modifier: public(1294)", "Delete PrimitiveType: void(1295)", "Delete SimpleName: run(1296)", "Delete SimpleName: SoyFileSetNode(1297)", "Delete SimpleType: SoyFileSetNode(1298)", "Delete SimpleName: fileSet(1299)", "Delete SingleVariableDeclaration(1300)", "Delete SimpleName: TemplateRegistry(1301)", "Delete SimpleType: TemplateRegistry(1302)", "Delete SimpleName: registry(1303)", "Delete SingleVariableDeclaration(1304)", "Delete SimpleName: CombineConsecutiveRawTextNodesVisitor(1305)", "Delete SimpleType: CombineConsecutiveRawTextNodesVisitor(1306)", "Delete SimpleName: fileSet(1307)", "Delete SimpleName: getNodeIdGenerator(1308)", "Delete MethodInvocation(1309)", "Delete ClassInstanceCreation(1310)", "Delete SimpleName: exec(1311)", "Delete SimpleName: fileSet(1312)", "Delete MethodInvocation(1313)", "Delete ExpressionStatement(1314)", "Delete Block(1315)", "Delete MethodDeclaration(1316)", "Delete TypeDeclaration: class(1317)"]}}, {"ExtractMsgVariablesVisitor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from com.google.template.soy.soytree.HtmlAttributeNode to com.google.template.soy.html.IncrementalHtmlAttributeNode", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.HtmlAttributeNode from com.google.template.soy.soytree.HtmlAttributeNode to com.google.template.soy.html.IncrementalHtmlAttributeNode"]}, {"root": "UPDATE from HtmlAttributeNode to IncrementalHtmlAttributeNode", "operations": ["UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleType: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleType: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode"]}, {"root": "INS CastExpression to MethodInvocation at 2", "operations": ["INS SimpleType: LocalVarInlineNode to CastExpression at 0", "INS CastExpression to MethodInvocation at 2", "INS SimpleName: LocalVarInlineNode to SimpleType: LocalVarInlineNode at 0", "INS SimpleName: nearestDependee to CastExpression at 1"]}, {"root": "DEL SimpleName: nearestDependee", "operations": ["DEL SimpleName: nearestDependee"]}]}}, {"ExtractMsgVariablesVisitor_diff": {"operations": ["Move ImportDeclaration(11) into CompilationUnit(425) at 3", "Update QualifiedName: com.google.template.soy.soytree.HtmlAttributeNode(10) to com.google.template.soy.html.IncrementalHtmlAttributeNode", "Update SimpleType: HtmlAttributeNode(262) to IncrementalHtmlAttributeNode", "Update SimpleName: HtmlAttributeNode(261) to IncrementalHtmlAttributeNode", "Update SimpleType: HtmlAttributeNode(267) to IncrementalHtmlAttributeNode", "Update SimpleName: HtmlAttributeNode(266) to IncrementalHtmlAttributeNode", "Insert CastExpression(386) into MethodInvocation(387) at 2", "Insert SimpleType: LocalVarInlineNode(384) into CastExpression(386) at 0", "Insert SimpleName: nearestDependee(385) into CastExpression(386) at 1", "Insert SimpleName: LocalVarInlineNode(383) into SimpleType: LocalVarInlineNode(384) at 0", "Delete SimpleName: nearestDependee(383)"]}}, {"GenJsCodeVisitor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 41"]}, {"root": "UPDATE from com.google.template.soy.soytree.AbstractSoyNodeVisitor to com.google.template.soy.html.AbstractHtmlSoyNodeVisitor", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.AbstractSoyNodeVisitor from com.google.template.soy.soytree.AbstractSoyNodeVisitor to com.google.template.soy.html.AbstractHtmlSoyNodeVisitor"]}, {"root": "UPDATE from AbstractSoyNodeVisitor<List<String>> to AbstractHtmlSoyNodeVisitor<List<String>>", "operations": ["UPD ParameterizedType: AbstractSoyNodeVisitor<List<String>> from AbstractSoyNodeVisitor<List<String>> to AbstractHtmlSoyNodeVisitor<List<String>>"]}, {"root": "UPDATE from AbstractSoyNodeVisitor to AbstractHtmlSoyNodeVisitor", "operations": ["UPD SimpleName: AbstractSoyNodeVisitor from AbstractSoyNodeVisitor to AbstractHtmlSoyNodeVisitor", "UPD SimpleType: AbstractSoyNodeVisitor from AbstractSoyNodeVisitor to AbstractHtmlSoyNodeVisitor"]}, {"root": "UPDATE from <p>Precondition: MsgNode should not exist in the tree. to <p> Precondition: MsgNode should not exist in the tree.", "operations": ["UPD TextElement: <p>Precondition: MsgNode should not exist in the tree. from <p>Precondition: MsgNode should not exist in the tree. to <p> Precondition: MsgNode should not exist in the tree."]}, {"root": "UPDATE from <p> to <p> ", "operations": ["UPD TextElement: <p> from <p> to <p> "]}, {"root": "UPDATE from  should be called on a full parse tree. JS source code will be generated for all to  should be called on a full parse tree. JS source code will be generated for", "operations": ["UPD TextElement:  should be called on a full parse tree. JS source code will be generated for all from  should be called on a full parse tree. JS source code will be generated for all to  should be called on a full parse tree. JS source code will be generated for"]}, {"root": "UPDATE from the Soy files. The return value is a list of strings, each string being the content of one to all the Soy files. The return value is a list of strings, each string being the content of one", "operations": ["UPD TextElement: the Soy files. The return value is a list of strings, each string being the content of one from the Soy files. The return value is a list of strings, each string being the content of one to all the Soy files. The return value is a list of strings, each string being the content of one"]}]}}, {"GenJsCodeVisitor_diff": {"operations": ["Move ImportDeclaration(107) into CompilationUnit(4728) at 41", "Update QualifiedName: com.google.template.soy.soytree.AbstractSoyNodeVisitor(106) to com.google.template.soy.html.AbstractHtmlSoyNodeVisitor", "Update ParameterizedType: AbstractSoyNodeVisitor<List<String>>(232) to AbstractHtmlSoyNodeVisitor<List<String>>", "Update SimpleType: AbstractSoyNodeVisitor(226) to AbstractHtmlSoyNodeVisitor", "Update TextElement: <p>Precondition: MsgNode should not exist in the tree.(213) to <p> Precondition: MsgNode should not exist in the tree.", "Update TextElement: <p>(214) to <p> ", "Update TextElement:  should be called on a full parse tree. JS source code will be generated for all(218) to  should be called on a full parse tree. JS source code will be generated for", "Update TextElement: the Soy files. The return value is a list of strings, each string being the content of one(219) to all the Soy files. The return value is a list of strings, each string being the content of one", "Update SimpleName: AbstractSoyNodeVisitor(225) to AbstractHtmlSoyNodeVisitor"]}}, {"IsComputableAsJsExprsVisitor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4", "MOV ImportDeclaration to CompilationUnit at 2", "MOV ImportDeclaration to CompilationUnit at 3", "MOV ImportDeclaration to CompilationUnit at 3"]}, {"root": "UPDATE from com.google.template.soy.soytree.AbstractReturningSoyNodeVisitor to com.google.template.soy.html.AbstractReturningHtmlSoyNodeVisitor", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.AbstractReturningSoyNodeVisitor from com.google.template.soy.soytree.AbstractReturningSoyNodeVisitor to com.google.template.soy.html.AbstractReturningHtmlSoyNodeVisitor"]}, {"root": "UPDATE from com.google.template.soy.soytree.HtmlAttributeNode to com.google.template.soy.html.IncrementalHtmlAttributeNode", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.HtmlAttributeNode from com.google.template.soy.soytree.HtmlAttributeNode to com.google.template.soy.html.IncrementalHtmlAttributeNode"]}, {"root": "UPDATE from com.google.template.soy.soytree.HtmlCloseTagNode to com.google.template.soy.html.IncrementalHtmlCloseTagNode", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.HtmlCloseTagNode from com.google.template.soy.soytree.HtmlCloseTagNode to com.google.template.soy.html.IncrementalHtmlCloseTagNode"]}, {"root": "UPDATE from com.google.template.soy.soytree.HtmlOpenTagNode to com.google.template.soy.html.IncrementalHtmlOpenTagNode", "operations": ["UPD QualifiedName: com.google.template.soy.soytree.HtmlOpenTagNode from com.google.template.soy.soytree.HtmlOpenTagNode to com.google.template.soy.html.IncrementalHtmlOpenTagNode"]}, {"root": "UPDATE from AbstractReturningSoyNodeVisitor<Boolean> to AbstractReturningHtmlSoyNodeVisitor<Boolean>", "operations": ["UPD ParameterizedType: AbstractReturningSoyNodeVisitor<Boolean> from AbstractReturningSoyNodeVisitor<Boolean> to AbstractReturningHtmlSoyNodeVisitor<Boolean>"]}, {"root": "UPDATE from AbstractReturningSoyNodeVisitor to AbstractReturningHtmlSoyNodeVisitor", "operations": ["UPD SimpleType: AbstractReturningSoyNodeVisitor from AbstractReturningSoyNodeVisitor to AbstractReturningHtmlSoyNodeVisitor", "UPD SimpleName: AbstractReturningSoyNodeVisitor from AbstractReturningSoyNodeVisitor to AbstractReturningHtmlSoyNodeVisitor"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: Boolean to MethodDeclaration at 3"]}, {"root": "UPDATE from visitHtmlAttributeNode to visitIncrementalHtmlAttributeNode", "operations": ["UPD SimpleName: visitHtmlAttributeNode from visitHtmlAttributeNode to visitIncrementalHtmlAttributeNode"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV Block to MethodDeclaration at 7", "MOV SimpleType: Boolean to MethodDeclaration at 3"]}, {"root": "UPDATE from visitHtmlOpenTagNode to visitIncrementalHtmlOpenTagNode", "operations": ["UPD SimpleName: visitHtmlOpenTagNode from visitHtmlOpenTagNode to visitIncrementalHtmlOpenTagNode"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 7", "MOV SimpleType: Boolean to MethodDeclaration at 3", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from visitHtmlCloseTagNode to visitIncrementalHtmlCloseTagNode", "operations": ["UPD SimpleName: visitHtmlCloseTagNode from visitHtmlCloseTagNode to visitIncrementalHtmlCloseTagNode"]}, {"root": "UPDATE from HtmlAttributeNode to IncrementalHtmlAttributeNode", "operations": ["UPD SimpleName: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode", "UPD SimpleType: HtmlAttributeNode from HtmlAttributeNode to IncrementalHtmlAttributeNode"]}, {"root": "UPDATE from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "operations": ["UPD SimpleName: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode", "UPD SimpleType: HtmlOpenTagNode from HtmlOpenTagNode to IncrementalHtmlOpenTagNode"]}, {"root": "UPDATE from HtmlCloseTagNode to IncrementalHtmlCloseTagNode", "operations": ["UPD SimpleType: HtmlCloseTagNode from HtmlCloseTagNode to IncrementalHtmlCloseTagNode", "UPD SimpleName: HtmlCloseTagNode from HtmlCloseTagNode to IncrementalHtmlCloseTagNode"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.template.soy.soytree.HtmlAttributeValueNode", "DEL ImportDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: node", "DEL SimpleName: HtmlAttributeValueNode", "DEL SimpleName: areChildrenComputableAsJsExprs", "DEL SimpleName: visitHtmlAttributeValueNode", "DEL SimpleType: HtmlAttributeValueNode", "DEL SimpleName: node", "DEL Modifier: protected", "DEL SingleVariableDeclaration", "DEL ReturnStatement"]}, {"root": "DEL MarkerAnnotation", "operations": ["DEL SimpleName: Override", "DEL MarkerAnnotation"]}, {"root": "DEL SimpleType: Boolean", "operations": ["DEL SimpleType: Boolean", "DEL SimpleName: Boolean"]}]}}, {"IsComputableAsJsExprsVisitor_diff": {"operations": ["Move ImportDeclaration(3) into CompilationUnit(582) at 3", "Move ImportDeclaration(21) into CompilationUnit(582) at 2", "Move ImportDeclaration(25) into CompilationUnit(582) at 3", "Move ImportDeclaration(27) into CompilationUnit(582) at 4", "Update QualifiedName: com.google.template.soy.soytree.AbstractReturningSoyNodeVisitor(4) to com.google.template.soy.html.AbstractReturningHtmlSoyNodeVisitor", "Update QualifiedName: com.google.template.soy.soytree.HtmlAttributeNode(20) to com.google.template.soy.html.IncrementalHtmlAttributeNode", "Update QualifiedName: com.google.template.soy.soytree.HtmlCloseTagNode(24) to com.google.template.soy.html.IncrementalHtmlCloseTagNode", "Update QualifiedName: com.google.template.soy.soytree.HtmlOpenTagNode(26) to com.google.template.soy.html.IncrementalHtmlOpenTagNode", "Update ParameterizedType: AbstractReturningSoyNodeVisitor<Boolean>(89) to AbstractReturningHtmlSoyNodeVisitor<Boolean>", "Update SimpleType: AbstractReturningSoyNodeVisitor(86) to AbstractReturningHtmlSoyNodeVisitor", "Move MarkerAnnotation(475) into MethodDeclaration(485) at 0", "Move SimpleType: Boolean(478) into MethodDeclaration(485) at 3", "Update SimpleName: visitHtmlAttributeNode(495) to visitIncrementalHtmlAttributeNode", "Move Block(530) into MethodDeclaration(485) at 7", "Move MarkerAnnotation(491) into MethodDeclaration(499) at 0", "Move SimpleType: Boolean(494) into MethodDeclaration(499) at 3", "Update SimpleName: visitHtmlOpenTagNode(509) to visitIncrementalHtmlOpenTagNode", "Move Block(502) into MethodDeclaration(499) at 7", "Move MarkerAnnotation(505) into MethodDeclaration(513) at 0", "Move SimpleType: Boolean(508) into MethodDeclaration(513) at 3", "Update SimpleName: visitHtmlCloseTagNode(523) to visitIncrementalHtmlCloseTagNode", "Move Block(516) into MethodDeclaration(513) at 7", "Update SimpleName: AbstractReturningSoyNodeVisitor(85) to AbstractReturningHtmlSoyNodeVisitor", "Update SimpleType: HtmlAttributeNode(497) to IncrementalHtmlAttributeNode", "Update SimpleType: HtmlOpenTagNode(511) to IncrementalHtmlOpenTagNode", "Update SimpleType: HtmlCloseTagNode(525) to IncrementalHtmlCloseTagNode", "Update SimpleName: HtmlAttributeNode(496) to IncrementalHtmlAttributeNode", "Update SimpleName: HtmlOpenTagNode(510) to IncrementalHtmlOpenTagNode", "Update SimpleName: HtmlCloseTagNode(524) to IncrementalHtmlCloseTagNode", "Delete QualifiedName: com.google.template.soy.soytree.HtmlAttributeValueNode(22)", "Delete ImportDeclaration(23)", "Delete Modifier: protected(476)", "Delete SimpleName: visitHtmlAttributeValueNode(479)", "Delete SimpleName: HtmlAttributeValueNode(480)", "Delete SimpleType: HtmlAttributeValueNode(481)", "Delete SimpleName: node(482)", "Delete SingleVariableDeclaration(483)", "Delete SimpleName: areChildrenComputableAsJsExprs(484)", "Delete SimpleName: node(485)", "Delete MethodInvocation(486)", "Delete ReturnStatement(487)", "Delete Block(488)", "Delete MethodDeclaration(489)", "Delete SimpleName: Override(518)", "Delete MarkerAnnotation(519)", "Delete SimpleName: Boolean(521)", "Delete SimpleType: Boolean(522)"]}}], "commit_stats": [{"total_files": 25, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}