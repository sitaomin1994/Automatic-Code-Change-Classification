{"application": "apache-cxf-fediz", "csha": "e75b76c22c38aa934133553d8941cce43b71c6d4", "files": [{"EHCacheTokenReplayCache_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.util.Loader to org.apache.wss4j.common.util.Loader", "operations": ["UPD QualifiedName: org.apache.ws.security.util.Loader from org.apache.ws.security.util.Loader to org.apache.wss4j.common.util.Loader"]}]}}, {"EHCacheTokenReplayCache_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.util.Loader(36) to org.apache.wss4j.common.util.Loader"]}}, {"FederationProcessorImpl_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.WSConstants to org.apache.wss4j.common.ext.WSPasswordCallback", "operations": ["UPD QualifiedName: org.apache.ws.security.WSConstants from org.apache.ws.security.WSConstants to org.apache.wss4j.common.ext.WSPasswordCallback"]}, {"root": "UPDATE from org.apache.ws.security.WSDataRef to org.apache.wss4j.common.ext.WSSecurityException", "operations": ["UPD QualifiedName: org.apache.ws.security.WSDataRef from org.apache.ws.security.WSDataRef to org.apache.wss4j.common.ext.WSSecurityException"]}, {"root": "UPDATE from org.apache.ws.security.WSDocInfo to org.apache.wss4j.dom.WSConstants", "operations": ["UPD QualifiedName: org.apache.ws.security.WSDocInfo from org.apache.ws.security.WSDocInfo to org.apache.wss4j.dom.WSConstants"]}, {"root": "UPDATE from org.apache.ws.security.WSPasswordCallback to org.apache.wss4j.dom.WSDataRef", "operations": ["UPD QualifiedName: org.apache.ws.security.WSPasswordCallback from org.apache.ws.security.WSPasswordCallback to org.apache.wss4j.dom.WSDataRef"]}, {"root": "UPDATE from org.apache.ws.security.WSSConfig to org.apache.wss4j.dom.WSDocInfo", "operations": ["UPD QualifiedName: org.apache.ws.security.WSSConfig from org.apache.ws.security.WSSConfig to org.apache.wss4j.dom.WSDocInfo"]}, {"root": "UPDATE from org.apache.ws.security.WSSecurityEngine to org.apache.wss4j.dom.WSSConfig", "operations": ["UPD QualifiedName: org.apache.ws.security.WSSecurityEngine from org.apache.ws.security.WSSecurityEngine to org.apache.wss4j.dom.WSSConfig"]}, {"root": "UPDATE from org.apache.ws.security.WSSecurityEngineResult to org.apache.wss4j.dom.WSSecurityEngine", "operations": ["UPD QualifiedName: org.apache.ws.security.WSSecurityEngineResult from org.apache.ws.security.WSSecurityEngineResult to org.apache.wss4j.dom.WSSecurityEngine"]}, {"root": "UPDATE from org.apache.ws.security.WSSecurityException to org.apache.wss4j.dom.WSSecurityEngineResult", "operations": ["UPD QualifiedName: org.apache.ws.security.WSSecurityException from org.apache.ws.security.WSSecurityException to org.apache.wss4j.dom.WSSecurityEngineResult"]}, {"root": "UPDATE from org.apache.ws.security.handler.RequestData to org.apache.wss4j.dom.handler.RequestData", "operations": ["UPD QualifiedName: org.apache.ws.security.handler.RequestData from org.apache.ws.security.handler.RequestData to org.apache.wss4j.dom.handler.RequestData"]}, {"root": "UPDATE from org.apache.ws.security.processor.EncryptedDataProcessor to org.apache.wss4j.dom.processor.EncryptedDataProcessor", "operations": ["UPD QualifiedName: org.apache.ws.security.processor.EncryptedDataProcessor from org.apache.ws.security.processor.EncryptedDataProcessor to org.apache.wss4j.dom.processor.EncryptedDataProcessor"]}, {"root": "UPDATE from org.apache.ws.security.processor.Processor to org.apache.wss4j.dom.processor.Processor", "operations": ["UPD QualifiedName: org.apache.ws.security.processor.Processor from org.apache.ws.security.processor.Processor to org.apache.wss4j.dom.processor.Processor"]}, {"root": "UPDATE from org.apache.ws.security.util.XmlSchemaDateFormat to org.apache.wss4j.dom.util.XmlSchemaDateFormat", "operations": ["UPD QualifiedName: org.apache.ws.security.util.XmlSchemaDateFormat from org.apache.ws.security.util.XmlSchemaDateFormat to org.apache.wss4j.dom.util.XmlSchemaDateFormat"]}]}}, {"FederationProcessorImpl_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.WSConstants(80) to org.apache.wss4j.common.ext.WSPasswordCallback", "Update QualifiedName: org.apache.ws.security.WSDataRef(82) to org.apache.wss4j.common.ext.WSSecurityException", "Update QualifiedName: org.apache.ws.security.WSDocInfo(84) to org.apache.wss4j.dom.WSConstants", "Update QualifiedName: org.apache.ws.security.WSPasswordCallback(86) to org.apache.wss4j.dom.WSDataRef", "Update QualifiedName: org.apache.ws.security.WSSConfig(88) to org.apache.wss4j.dom.WSDocInfo", "Update QualifiedName: org.apache.ws.security.WSSecurityEngine(90) to org.apache.wss4j.dom.WSSConfig", "Update QualifiedName: org.apache.ws.security.WSSecurityEngineResult(92) to org.apache.wss4j.dom.WSSecurityEngine", "Update QualifiedName: org.apache.ws.security.WSSecurityException(94) to org.apache.wss4j.dom.WSSecurityEngineResult", "Update QualifiedName: org.apache.ws.security.handler.RequestData(96) to org.apache.wss4j.dom.handler.RequestData", "Update QualifiedName: org.apache.ws.security.processor.EncryptedDataProcessor(98) to org.apache.wss4j.dom.processor.EncryptedDataProcessor", "Update QualifiedName: org.apache.ws.security.processor.Processor(100) to org.apache.wss4j.dom.processor.Processor", "Update QualifiedName: org.apache.ws.security.util.XmlSchemaDateFormat(102) to org.apache.wss4j.dom.util.XmlSchemaDateFormat"]}}, {"FederationAuthenticator_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.util.DOM2Writer to org.apache.wss4j.common.util.DOM2Writer", "operations": ["UPD QualifiedName: org.apache.ws.security.util.DOM2Writer from org.apache.ws.security.util.DOM2Writer to org.apache.wss4j.common.util.DOM2Writer"]}]}}, {"FederationAuthenticator_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.util.DOM2Writer(78) to org.apache.wss4j.common.util.DOM2Writer"]}}, {"FederationContext_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.WSSecurityException to org.apache.wss4j.common.crypto.CertificateStore", "operations": ["UPD QualifiedName: org.apache.ws.security.WSSecurityException from org.apache.ws.security.WSSecurityException to org.apache.wss4j.common.crypto.CertificateStore"]}, {"root": "UPDATE from org.apache.ws.security.components.crypto.CertificateStore to org.apache.wss4j.common.crypto.Crypto", "operations": ["UPD QualifiedName: org.apache.ws.security.components.crypto.CertificateStore from org.apache.ws.security.components.crypto.CertificateStore to org.apache.wss4j.common.crypto.Crypto"]}, {"root": "UPDATE from org.apache.ws.security.components.crypto.Crypto to org.apache.wss4j.common.crypto.CryptoFactory", "operations": ["UPD QualifiedName: org.apache.ws.security.components.crypto.Crypto from org.apache.ws.security.components.crypto.Crypto to org.apache.wss4j.common.crypto.CryptoFactory"]}, {"root": "UPDATE from org.apache.ws.security.components.crypto.CryptoFactory to org.apache.wss4j.common.crypto.Merlin", "operations": ["UPD QualifiedName: org.apache.ws.security.components.crypto.CryptoFactory from org.apache.ws.security.components.crypto.CryptoFactory to org.apache.wss4j.common.crypto.Merlin"]}, {"root": "UPDATE from org.apache.ws.security.components.crypto.Merlin to org.apache.wss4j.common.ext.WSSecurityException", "operations": ["UPD QualifiedName: org.apache.ws.security.components.crypto.Merlin from org.apache.ws.security.components.crypto.Merlin to org.apache.wss4j.common.ext.WSSecurityException"]}, {"root": "UPDATE from org.apache.ws.security.util.Loader to org.apache.wss4j.common.util.Loader", "operations": ["UPD QualifiedName: org.apache.ws.security.util.Loader from org.apache.ws.security.util.Loader to org.apache.wss4j.common.util.Loader"]}]}}, {"FederationContext_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.WSSecurityException(66) to org.apache.wss4j.common.crypto.CertificateStore", "Update QualifiedName: org.apache.ws.security.components.crypto.CertificateStore(68) to org.apache.wss4j.common.crypto.Crypto", "Update QualifiedName: org.apache.ws.security.components.crypto.Crypto(70) to org.apache.wss4j.common.crypto.CryptoFactory", "Update QualifiedName: org.apache.ws.security.components.crypto.CryptoFactory(72) to org.apache.wss4j.common.crypto.Merlin", "Update QualifiedName: org.apache.ws.security.components.crypto.Merlin(74) to org.apache.wss4j.common.ext.WSSecurityException", "Update QualifiedName: org.apache.ws.security.util.Loader(76) to org.apache.wss4j.common.util.Loader"]}}, {"KeyManager_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.components.crypto.Crypto to org.apache.wss4j.common.crypto.Crypto", "operations": ["UPD QualifiedName: org.apache.ws.security.components.crypto.Crypto from org.apache.ws.security.components.crypto.Crypto to org.apache.wss4j.common.crypto.Crypto"]}]}}, {"KeyManager_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.components.crypto.Crypto(20) to org.apache.wss4j.common.crypto.Crypto"]}}, {"TrustManager_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.components.crypto.Crypto to org.apache.wss4j.common.crypto.Crypto", "operations": ["UPD QualifiedName: org.apache.ws.security.components.crypto.Crypto from org.apache.ws.security.components.crypto.Crypto to org.apache.wss4j.common.crypto.Crypto"]}]}}, {"TrustManager_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.components.crypto.Crypto(20) to org.apache.wss4j.common.crypto.Crypto"]}}, {"MetadataWriter_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.util.UUIDGenerator to org.apache.xml.security.stax.impl.util.IDGenerator", "operations": ["UPD QualifiedName: org.apache.ws.security.util.UUIDGenerator from org.apache.ws.security.util.UUIDGenerator to org.apache.xml.security.stax.impl.util.IDGenerator"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"_\" to MethodInvocation at 2"]}, {"root": "UPDATE from UUIDGenerator to IDGenerator", "operations": ["UPD SimpleName: UUIDGenerator from UUIDGenerator to IDGenerator"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getUUID to MethodInvocation at 1", "MOV SimpleName: UUIDGenerator to MethodInvocation at 0"]}, {"root": "UPDATE from getUUID to generateID", "operations": ["UPD SimpleName: getUUID from getUUID to generateID"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL MethodInvocation", "DEL StringLiteral: \"_\"", "DEL InfixExpression: +"]}]}}, {"MetadataWriter_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.util.UUIDGenerator(54) to org.apache.xml.security.stax.impl.util.IDGenerator", "Insert MethodInvocation(170) into VariableDeclarationFragment(171) at 1", "Update SimpleName: UUIDGenerator(168) to IDGenerator", "Move SimpleName: UUIDGenerator(168) into MethodInvocation(170) at 0", "Update SimpleName: getUUID(169) to generateID", "Move SimpleName: getUUID(169) into MethodInvocation(170) at 1", "Insert StringLiteral: \"_\"(169) into MethodInvocation(170) at 2", "Delete StringLiteral: \"_\"(167)", "Delete MethodInvocation(170)", "Delete InfixExpression: +(171)"]}}, {"SAMLTokenValidator_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 24", "operations": ["INS QualifiedName: org.apache.wss4j.common.ext.WSSecurityException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 24"]}, {"root": "INS ImportDeclaration to CompilationUnit at 28", "operations": ["INS QualifiedName: org.apache.wss4j.common.saml.SamlAssertionWrapper to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 28"]}, {"root": "INS ImportDeclaration to CompilationUnit at 38", "operations": ["INS QualifiedName: org.opensaml.xml.signature.KeyInfo to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 38"]}, {"root": "INS ImportDeclaration to CompilationUnit at 39", "operations": ["INS QualifiedName: org.opensaml.xml.signature.Signature to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 39"]}, {"root": "UPDATE from org.apache.ws.security.SAMLTokenPrincipal to org.apache.wss4j.common.principal.SAMLTokenPrincipal", "operations": ["UPD QualifiedName: org.apache.ws.security.SAMLTokenPrincipal from org.apache.ws.security.SAMLTokenPrincipal to org.apache.wss4j.common.principal.SAMLTokenPrincipal"]}, {"root": "UPDATE from org.apache.ws.security.WSConstants to org.apache.wss4j.common.principal.SAMLTokenPrincipalImpl", "operations": ["UPD QualifiedName: org.apache.ws.security.WSConstants from org.apache.ws.security.WSConstants to org.apache.wss4j.common.principal.SAMLTokenPrincipalImpl"]}, {"root": "UPDATE from org.apache.ws.security.WSDocInfo to org.apache.wss4j.common.saml.SAMLKeyInfo", "operations": ["UPD QualifiedName: org.apache.ws.security.WSDocInfo from org.apache.ws.security.WSDocInfo to org.apache.wss4j.common.saml.SAMLKeyInfo"]}, {"root": "UPDATE from org.apache.ws.security.WSSConfig to org.apache.wss4j.dom.WSConstants", "operations": ["UPD QualifiedName: org.apache.ws.security.WSSConfig from org.apache.ws.security.WSSConfig to org.apache.wss4j.dom.WSConstants"]}, {"root": "UPDATE from org.apache.ws.security.WSSecurityException to org.apache.wss4j.dom.WSDocInfo", "operations": ["UPD QualifiedName: org.apache.ws.security.WSSecurityException from org.apache.ws.security.WSSecurityException to org.apache.wss4j.dom.WSDocInfo"]}, {"root": "UPDATE from org.apache.ws.security.handler.RequestData to org.apache.wss4j.dom.WSSConfig", "operations": ["UPD QualifiedName: org.apache.ws.security.handler.RequestData from org.apache.ws.security.handler.RequestData to org.apache.wss4j.dom.WSSConfig"]}, {"root": "UPDATE from org.apache.ws.security.saml.SAMLKeyInfo to org.apache.wss4j.dom.handler.RequestData", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.SAMLKeyInfo from org.apache.ws.security.saml.SAMLKeyInfo to org.apache.wss4j.dom.handler.RequestData"]}, {"root": "UPDATE from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.dom.saml.WSSSAMLKeyInfoProcessor", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.dom.saml.WSSSAMLKeyInfoProcessor"]}, {"root": "UPDATE from org.apache.ws.security.validate.Credential to org.apache.wss4j.dom.validate.Credential", "operations": ["UPD QualifiedName: org.apache.ws.security.validate.Credential from org.apache.ws.security.validate.Credential to org.apache.wss4j.dom.validate.Credential"]}, {"root": "UPDATE from AssertionWrapper to SamlAssertionWrapper", "operations": ["UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS SimpleType: Signature to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 6", "INS SimpleName: sig to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Signature to SimpleType: Signature at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 7", "operations": ["INS SimpleType: KeyInfo to VariableDeclarationStatement at 0", "INS SimpleName: getKeyInfo to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 7", "INS SimpleName: KeyInfo to SimpleType: KeyInfo at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: sig to MethodInvocation at 0", "INS SimpleName: keyInfo to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 8", "operations": ["INS SimpleName: requestData to ClassInstanceCreation at 1", "INS SimpleName: samlKeyInfo to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getCredentialFromKeyInfo to MethodInvocation at 1", "INS SimpleName: getSigVerCrypto to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleName: getDOM to MethodInvocation at 1", "INS QualifiedName: org.apache.wss4j.common.saml.SAMLUtil to MethodInvocation at 0", "INS SimpleName: requestData to MethodInvocation at 0", "INS SimpleName: WSSSAMLKeyInfoProcessor to SimpleType: WSSSAMLKeyInfoProcessor at 0", "INS SimpleName: docInfo to ClassInstanceCreation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: WSSSAMLKeyInfoProcessor to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 4", "INS VariableDeclarationStatement to Block at 8", "INS SimpleName: keyInfo to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS ExpressionStatement to Block at 9", "INS SimpleName: samlKeyInfo to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: verifySignature to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 10", "operations": ["INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: requestData to MethodInvocation at 0", "INS SimpleName: assertion to MethodInvocation at 0", "INS ExpressionStatement to Block at 10", "INS SimpleName: docInfo to ClassInstanceCreation at 2", "INS SimpleType: WSSSAMLKeyInfoProcessor to ClassInstanceCreation at 0", "INS SimpleName: requestData to ClassInstanceCreation at 1", "INS SimpleName: getSigVerCrypto to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 2", "INS SimpleName: WSSSAMLKeyInfoProcessor to SimpleType: WSSSAMLKeyInfoProcessor at 0", "INS MethodInvocation to MethodInvocation at 4", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SAMLKeyInfo to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: SAMLTokenPrincipal to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: parseHOKSubject to MethodInvocation at 1", "MOV SimpleName: assertion to MethodInvocation at 0"]}, {"root": "UPDATE from parseHOKSubject to parseSubject", "operations": ["UPD SimpleName: parseHOKSubject from parseHOKSubject to parseSubject"]}, {"root": "UPDATE from setAssertion to setSamlAssertion", "operations": ["UPD SimpleName: setAssertion from setAssertion to setSamlAssertion"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: assertion to MethodInvocation at 0", "MOV SimpleName: verifySignature to MethodInvocation at 1"]}, {"root": "UPDATE from verifySignature to getSignature", "operations": ["UPD SimpleName: verifySignature from verifySignature to getSignature"]}, {"root": "UPDATE from assertion to requestData", "operations": ["UPD SimpleName: assertion from assertion to requestData"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: assertion to MethodInvocation at 0", "MOV SimpleName: getSignatureKeyInfo to MethodInvocation at 1"]}, {"root": "UPDATE from getSignatureKeyInfo to getCallbackHandler", "operations": ["UPD SimpleName: getSignatureKeyInfo from getSignatureKeyInfo to getCallbackHandler"]}, {"root": "INS SimpleType: SAMLTokenPrincipalImpl to ClassInstanceCreation at 0", "operations": ["INS SimpleType: SAMLTokenPrincipalImpl to ClassInstanceCreation at 0", "INS SimpleName: SAMLTokenPrincipalImpl to SimpleType: SAMLTokenPrincipalImpl at 0"]}, {"root": "UPDATE from setSigCrypto to setSigVerCrypto", "operations": ["UPD SimpleName: setSigCrypto from setSigCrypto to setSigVerCrypto"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: requestData", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: docInfo"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: docInfo", "DEL SimpleName: requestData", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: samlKeyInfo", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleType: SAMLTokenPrincipal", "operations": ["DEL SimpleType: SAMLTokenPrincipal", "DEL SimpleName: SAMLTokenPrincipal"]}]}}, {"SAMLTokenValidator_diff": {"operations": ["Insert ImportDeclaration(65) into CompilationUnit(2086) at 24", "Insert ImportDeclaration(73) into CompilationUnit(2086) at 28", "Insert ImportDeclaration(93) into CompilationUnit(2086) at 38", "Insert ImportDeclaration(95) into CompilationUnit(2086) at 39", "Insert QualifiedName: org.apache.wss4j.common.ext.WSSecurityException(64) into ImportDeclaration(65) at 0", "Update QualifiedName: org.apache.ws.security.SAMLTokenPrincipal(64) to org.apache.wss4j.common.principal.SAMLTokenPrincipal", "Update QualifiedName: org.apache.ws.security.WSConstants(66) to org.apache.wss4j.common.principal.SAMLTokenPrincipalImpl", "Update QualifiedName: org.apache.ws.security.WSDocInfo(68) to org.apache.wss4j.common.saml.SAMLKeyInfo", "Insert QualifiedName: org.apache.wss4j.common.saml.SamlAssertionWrapper(72) into ImportDeclaration(73) at 0", "Update QualifiedName: org.apache.ws.security.WSSConfig(70) to org.apache.wss4j.dom.WSConstants", "Update QualifiedName: org.apache.ws.security.WSSecurityException(72) to org.apache.wss4j.dom.WSDocInfo", "Update QualifiedName: org.apache.ws.security.handler.RequestData(74) to org.apache.wss4j.dom.WSSConfig", "Update QualifiedName: org.apache.ws.security.saml.SAMLKeyInfo(76) to org.apache.wss4j.dom.handler.RequestData", "Update QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper(78) to org.apache.wss4j.dom.saml.WSSSAMLKeyInfoProcessor", "Update QualifiedName: org.apache.ws.security.validate.Credential(80) to org.apache.wss4j.dom.validate.Credential", "Insert QualifiedName: org.opensaml.xml.signature.KeyInfo(92) into ImportDeclaration(93) at 0", "Insert QualifiedName: org.opensaml.xml.signature.Signature(94) into ImportDeclaration(95) at 0", "Update SimpleType: AssertionWrapper(1839) to SamlAssertionWrapper", "Update SimpleType: AssertionWrapper(1897) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(1838) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(1896) to SamlAssertionWrapper", "Insert VariableDeclarationStatement(272) into Block(709) at 6", "Insert VariableDeclarationStatement(280) into Block(709) at 7", "Insert VariableDeclarationStatement(299) into Block(709) at 8", "Insert ExpressionStatement(304) into Block(709) at 9", "Insert ExpressionStatement(319) into Block(709) at 10", "Update SimpleType: AssertionWrapper(222) to SamlAssertionWrapper", "Insert SimpleType: Signature(266) into VariableDeclarationStatement(272) at 0", "Insert VariableDeclarationFragment(271) into VariableDeclarationStatement(272) at 1", "Insert SimpleType: KeyInfo(274) into VariableDeclarationStatement(280) at 0", "Insert VariableDeclarationFragment(279) into VariableDeclarationStatement(280) at 1", "Move SimpleType: SAMLKeyInfo(278) into VariableDeclarationStatement(299) at 0", "Insert VariableDeclarationFragment(298) into VariableDeclarationStatement(299) at 1", "Insert MethodInvocation(303) into ExpressionStatement(304) at 0", "Insert MethodInvocation(318) into ExpressionStatement(319) at 0", "Move SimpleType: SAMLTokenPrincipal(631) into VariableDeclarationStatement(678) at 0", "Update SimpleName: AssertionWrapper(221) to SamlAssertionWrapper", "Insert SimpleName: Signature(265) into SimpleType: Signature(266) at 0", "Insert SimpleName: sig(267) into VariableDeclarationFragment(271) at 0", "Insert MethodInvocation(270) into VariableDeclarationFragment(271) at 1", "Insert SimpleName: KeyInfo(273) into SimpleType: KeyInfo(274) at 0", "Insert SimpleName: keyInfo(275) into VariableDeclarationFragment(279) at 0", "Insert MethodInvocation(278) into VariableDeclarationFragment(279) at 1", "Insert SimpleName: samlKeyInfo(283) into VariableDeclarationFragment(298) at 0", "Insert MethodInvocation(297) into VariableDeclarationFragment(298) at 1", "Move SimpleName: assertion(263) into MethodInvocation(303) at 0", "Insert SimpleName: verifySignature(301) into MethodInvocation(303) at 1", "Insert SimpleName: samlKeyInfo(302) into MethodInvocation(303) at 2", "Insert SimpleName: assertion(305) into MethodInvocation(318) at 0", "Update SimpleName: parseHOKSubject(264) to parseSubject", "Move SimpleName: parseHOKSubject(264) into MethodInvocation(318) at 1", "Insert ClassInstanceCreation(311) into MethodInvocation(318) at 2", "Insert MethodInvocation(314) into MethodInvocation(318) at 3", "Insert MethodInvocation(317) into MethodInvocation(318) at 4", "Update SimpleName: setAssertion(300) to setSamlAssertion", "Update SimpleType: AssertionWrapper(225) to SamlAssertionWrapper", "Move SimpleName: assertion(257) into MethodInvocation(270) at 0", "Update SimpleName: verifySignature(258) to getSignature", "Move SimpleName: verifySignature(258) into MethodInvocation(270) at 1", "Insert SimpleName: sig(276) into MethodInvocation(278) at 0", "Insert SimpleName: getKeyInfo(277) into MethodInvocation(278) at 1", "Insert QualifiedName: org.apache.wss4j.common.saml.SAMLUtil(284) into MethodInvocation(297) at 0", "Insert SimpleName: getCredentialFromKeyInfo(285) into MethodInvocation(297) at 1", "Insert MethodInvocation(288) into MethodInvocation(297) at 2", "Insert ClassInstanceCreation(293) into MethodInvocation(297) at 3", "Insert MethodInvocation(296) into MethodInvocation(297) at 4", "Insert SimpleType: WSSSAMLKeyInfoProcessor(308) into ClassInstanceCreation(311) at 0", "Insert SimpleName: requestData(309) into ClassInstanceCreation(311) at 1", "Insert SimpleName: docInfo(310) into ClassInstanceCreation(311) at 2", "Insert SimpleName: requestData(312) into MethodInvocation(314) at 0", "Insert SimpleName: getSigVerCrypto(313) into MethodInvocation(314) at 1", "Update SimpleName: assertion(280) to requestData", "Move SimpleName: assertion(280) into MethodInvocation(317) at 0", "Update SimpleName: getSignatureKeyInfo(281) to getCallbackHandler", "Move SimpleName: getSignatureKeyInfo(281) into MethodInvocation(317) at 1", "Insert SimpleType: SAMLTokenPrincipalImpl(674) into ClassInstanceCreation(676) at 0", "Update SimpleName: AssertionWrapper(224) to SamlAssertionWrapper", "Insert SimpleName: keyInfo(286) into MethodInvocation(288) at 0", "Insert SimpleName: getDOM(287) into MethodInvocation(288) at 1", "Insert SimpleType: WSSSAMLKeyInfoProcessor(290) into ClassInstanceCreation(293) at 0", "Insert SimpleName: requestData(291) into ClassInstanceCreation(293) at 1", "Insert SimpleName: docInfo(292) into ClassInstanceCreation(293) at 2", "Insert SimpleName: requestData(294) into MethodInvocation(296) at 0", "Insert SimpleName: getSigVerCrypto(295) into MethodInvocation(296) at 1", "Insert SimpleName: WSSSAMLKeyInfoProcessor(307) into SimpleType: WSSSAMLKeyInfoProcessor(308) at 0", "Insert SimpleName: SAMLTokenPrincipalImpl(673) into SimpleType: SAMLTokenPrincipalImpl(674) at 0", "Insert SimpleName: WSSSAMLKeyInfoProcessor(289) into SimpleType: WSSSAMLKeyInfoProcessor(290) at 0", "Update SimpleName: setSigCrypto(413) to setSigVerCrypto", "Delete SimpleName: requestData(259)", "Delete SimpleName: docInfo(260)", "Delete MethodInvocation(261)", "Delete ExpressionStatement(262)", "Delete SimpleName: requestData(265)", "Delete SimpleName: docInfo(266)", "Delete MethodInvocation(267)", "Delete ExpressionStatement(268)", "Delete SimpleName: samlKeyInfo(279)", "Delete MethodInvocation(282)", "Delete VariableDeclarationFragment(283)", "Delete VariableDeclarationStatement(284)", "Delete SimpleName: SAMLTokenPrincipal(627)", "Delete SimpleType: SAMLTokenPrincipal(628)"]}}, {"SamlAssertionValidator_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.components.crypto.Crypto to org.apache.wss4j.common.crypto.Crypto", "operations": ["UPD QualifiedName: org.apache.ws.security.components.crypto.Crypto from org.apache.ws.security.components.crypto.Crypto to org.apache.wss4j.common.crypto.Crypto"]}, {"root": "UPDATE from org.apache.ws.security.components.crypto.CryptoType to org.apache.wss4j.common.ext.WSSecurityException", "operations": ["UPD QualifiedName: org.apache.ws.security.components.crypto.CryptoType from org.apache.ws.security.components.crypto.CryptoType to org.apache.wss4j.common.ext.WSSecurityException"]}, {"root": "UPDATE from org.apache.ws.security.handler.RequestData to org.apache.wss4j.common.saml.OpenSAMLUtil", "operations": ["UPD QualifiedName: org.apache.ws.security.handler.RequestData from org.apache.ws.security.handler.RequestData to org.apache.wss4j.common.saml.OpenSAMLUtil"]}, {"root": "UPDATE from org.apache.ws.security.saml.SAMLKeyInfo to org.apache.wss4j.common.saml.SAMLKeyInfo", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.SAMLKeyInfo from org.apache.ws.security.saml.SAMLKeyInfo to org.apache.wss4j.common.saml.SAMLKeyInfo"]}, {"root": "UPDATE from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.common.saml.SamlAssertionWrapper", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.common.saml.SamlAssertionWrapper"]}, {"root": "UPDATE from org.apache.ws.security.saml.ext.OpenSAMLUtil to org.apache.wss4j.dom.handler.RequestData", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.ext.OpenSAMLUtil from org.apache.ws.security.saml.ext.OpenSAMLUtil to org.apache.wss4j.dom.handler.RequestData"]}, {"root": "UPDATE from org.apache.ws.security.validate.Credential to org.apache.wss4j.dom.validate.Credential", "operations": ["UPD QualifiedName: org.apache.ws.security.validate.Credential from org.apache.ws.security.validate.Credential to org.apache.wss4j.dom.validate.Credential"]}, {"root": "UPDATE from org.apache.ws.security.validate.Validator to org.apache.wss4j.dom.validate.Validator", "operations": ["UPD QualifiedName: org.apache.ws.security.validate.Validator from org.apache.ws.security.validate.Validator to org.apache.wss4j.dom.validate.Validator"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SimpleType: WSSecurityException to MethodDeclaration at 9", "MOV Javadoc to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 8"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 5"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void", "UPD PrimitiveType: boolean from boolean to void"]}, {"root": "UPDATE from verifyTrustInCert to verifyTrustInCerts", "operations": ["UPD SimpleName: verifyTrustInCert from verifyTrustInCert to verifyTrustInCerts"]}, {"root": "INS Block to MethodDeclaration at 10", "operations": ["INS Block to MethodDeclaration at 10"]}, {"root": "UPDATE from AssertionWrapper to SamlAssertionWrapper", "operations": ["UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 9"]}, {"root": "MOVE from Block", "operations": ["MOV ThrowStatement to Block at 10"]}, {"root": "UPDATE from @return to @param", "operations": ["UPD TagElement: @return from @return to @param"]}, {"root": "UPDATE from X509Certificate to RequestData", "operations": ["UPD SimpleType: X509Certificate from X509Certificate to RequestData", "UPD SimpleName: X509Certificate from X509Certificate to RequestData"]}, {"root": "UPDATE from enableRevocation to data", "operations": ["UPD SimpleName: enableRevocation from enableRevocation to data", "UPD SimpleName: cert from cert to data"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 2"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "INS SimpleName: data to TagElement: @return at 0", "operations": ["INS SimpleName: data to TagElement: @return at 0"]}, {"root": "UPDATE from  true if the certificate chain is trusted, false if not to  A RequestData instance", "operations": ["UPD TextElement:  true if the certificate chain is trusted, false if not from  true if the certificate chain is trusted, false if not to  A RequestData instance"]}, {"root": "INS TextElement:  if the certificate chain is not trusted to TagElement: @throws at 1", "operations": ["INS TextElement:  if the certificate chain is not trusted to TagElement: @throws at 1"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 3"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0"]}, {"root": "UPDATE from WSSecurityException.FAILED_AUTHENTICATION to WSSecurityException.ErrorCode.FAILED_AUTHENTICATION", "operations": ["UPD QualifiedName: WSSecurityException.FAILED_AUTHENTICATION from WSSecurityException.FAILED_AUTHENTICATION to WSSecurityException.ErrorCode.FAILED_AUTHENTICATION"]}, {"root": "UPDATE from getSigCrypto to getSigVerCrypto", "operations": ["UPD SimpleName: getSigCrypto from getSigCrypto to getSigVerCrypto"]}, {"root": "UPDATE from getAssertion to getSamlAssertion", "operations": ["UPD SimpleName: getAssertion from getAssertion to getSamlAssertion", "UPD SimpleName: getAssertion from getAssertion to getSamlAssertion"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: certs to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE", "operations": ["UPD QualifiedName: WSSecurityException.FAILURE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE", "UPD QualifiedName: WSSecurityException.FAILURE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE", "UPD QualifiedName: WSSecurityException.FAILURE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE", "UPD QualifiedName: WSSecurityException.FAILURE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE", "UPD QualifiedName: WSSecurityException.FAILURE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE", "UPD QualifiedName: WSSecurityException.FAILURE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE", "UPD QualifiedName: WSSecurityException.FAILURE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE", "UPD QualifiedName: WSSecurityException.FAILURE from WSSecurityException.FAILURE to WSSecurityException.ErrorCode.FAILURE"]}, {"root": "UPDATE from verifyTrustInCert to validateCertificates", "operations": ["UPD SimpleName: verifyTrustInCert from verifyTrustInCert to validateCertificates"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: verifyTrustInCert to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: crypto to MethodInvocation at 2", "MOV SimpleName: certs to MethodInvocation at 1", "MOV SimpleName: verifyTrustInCerts to MethodInvocation at 0", "MOV SimpleName: enableRevocation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 4"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WSSecurityException to ClassInstanceCreation at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WSSecurityException to ClassInstanceCreation at 0"]}, {"root": "UPDATE from WSSecurityException.FAILED_CHECK to WSSecurityException.ErrorCode.FAILED_CHECK", "operations": ["UPD QualifiedName: WSSecurityException.FAILED_CHECK from WSSecurityException.FAILED_CHECK to WSSecurityException.ErrorCode.FAILED_CHECK", "UPD QualifiedName: WSSecurityException.FAILED_CHECK from WSSecurityException.FAILED_CHECK to WSSecurityException.ErrorCode.FAILED_CHECK"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WSSecurityException to ClassInstanceCreation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from CatchClause", "operations": ["MOV SingleVariableDeclaration to CatchClause at 0"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS ThrowStatement to Block at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS QualifiedName: WSSecurityException.ErrorCode.FAILED_AUTHENTICATION to ClassInstanceCreation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WSSecurityException to ClassInstanceCreation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WSSecurityException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WSSecurityException to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: WSSecurityException to ClassInstanceCreation at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.math.BigInteger", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.apache.ws.security.WSSecurityException", "DEL ImportDeclaration"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL ArrayAccess", "DEL NumberLiteral: 0", "DEL SimpleName: trust", "DEL SimpleName: crypto", "DEL SimpleName: enableRevocation", "DEL MethodInvocation", "DEL SimpleName: certs"]}, {"root": "DEL Assignment: =", "operations": ["DEL Assignment: =", "DEL SimpleName: trust", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: trust", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL BooleanLiteral: false"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: enableRevocation", "DEL PrimitiveType: boolean", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL NumberLiteral: 1", "DEL Block", "DEL QualifiedName: certs.length", "DEL InfixExpression: ==", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: trust", "DEL IfStatement", "DEL Block"]}, {"root": "DEL SimpleName: trust", "operations": ["DEL SimpleName: trust"]}, {"root": "DEL IfStatement", "operations": ["DEL VariableDeclarationStatement", "DEL PrimitiveType: boolean", "DEL SimpleName: trust", "DEL IfStatement", "DEL Block", "DEL VariableDeclarationFragment"]}, {"root": "DEL ThrowStatement", "operations": ["DEL ThrowStatement", "DEL ClassInstanceCreation", "DEL QualifiedName: WSSecurityException.FAILED_AUTHENTICATION"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL Javadoc", "operations": ["DEL TextElement: Policy used in this implementation:", "DEL TextElement: (that is, search for certificate(s) of the issuer of the transmitted certificate", "DEL TagElement: @param", "DEL TagElement: @param", "DEL TextElement: 1. Search the keystore for the transmitted certificate", "DEL TextElement:  A crypto instance to use for trust validation", "DEL TextElement:  true if the certificate is trusted, false if not", "DEL TextElement: 2. Search the keystore for a connection to the transmitted certificate", "DEL TagElement: @throws", "DEL TextElement: might be fooled by a phony DN (String!)", "DEL TextElement:  Whether revocation is enabled or not", "DEL SimpleName: cert", "DEL TagElement", "DEL TextElement: Evaluate whether a given certificate should be trusted.", "DEL SimpleName: crypto", "DEL TagElement: @return", "DEL SimpleName: enableRevocation", "DEL TextElement:  the certificate that should be validated against the keystore", "DEL SimpleName: WSSecurityException", "DEL TagElement: @param", "DEL Javadoc", "DEL TextElement: 3. Verify the trust path for those certificates found because the search for the issuer "]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: debug", "DEL SimpleName: subjectString", "DEL StringLiteral: \"Transmitted certificate has subject \"", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: LOG"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: Crypto", "DEL SimpleName: crypto", "DEL SimpleType: Crypto", "DEL SingleVariableDeclaration"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: enableRevocation", "DEL PrimitiveType: boolean"]}, {"root": "DEL SimpleType: WSSecurityException", "operations": ["DEL SimpleType: WSSecurityException", "DEL SimpleName: WSSecurityException"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL MethodInvocation", "DEL SimpleName: String", "DEL QualifiedName: CryptoType.TYPE.SUBJECT_DN", "DEL SimpleName: LOG", "DEL VariableDeclarationFragment", "DEL SimpleName: enableRevocation", "DEL IfStatement", "DEL SimpleName: LOG", "DEL SimpleName: setSubjectDN", "DEL InfixExpression: +", "DEL SimpleName: j", "DEL InfixExpression: +", "DEL SimpleName: getSubjectX500Principal", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleType: X509Certificate", "DEL SimpleName: debug", "DEL Block", "DEL SimpleName: subjectString", "DEL SimpleName: cert", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL SimpleName: cryptoType", "DEL IfStatement", "DEL SimpleName: LOG", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationExpression", "DEL ArrayCreation", "DEL Block", "DEL InfixExpression: <", "DEL SimpleName: isInKeystore", "DEL SimpleName: X509Certificate", "DEL NumberLiteral: 1", "DEL SimpleName: x509certs", "DEL SimpleName: cryptoType", "DEL SimpleName: LOG", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: crypto", "DEL SimpleName: x509certs", "DEL StringLiteral: \"No certs found in keystore for issuer \"", "DEL SimpleType: CryptoType", "DEL StringLiteral: \"Preparing to validate certificate path for issuer \"", "DEL NumberLiteral: 1", "DEL SimpleName: crypto", "DEL IfStatement", "DEL StringLiteral: \" found in keystore\"", "DEL Block", "DEL SimpleName: cryptoType", "DEL NumberLiteral: 0", "DEL ExpressionStatement", "DEL SimpleName: subjectString", "DEL SimpleName: foundCerts", "DEL IfStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: subjectString", "DEL SimpleType: X509Certificate", "DEL Block", "DEL SimpleName: LOG", "DEL SimpleType: String", "DEL SimpleName: issuerString", "DEL MethodInvocation", "DEL ArrayType: X509Certificate[]", "DEL SimpleType: String", "DEL QualifiedName: foundCerts.length", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: debug", "DEL SimpleName: foundCerts", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL MethodInvocation", "DEL SimpleName: isDebugEnabled", "DEL SimpleName: X509Certificate", "DEL BooleanLiteral: false", "DEL StringLiteral: \"Transmitted certificate has issuer \"", "DEL MethodInvocation", "DEL SimpleName: issuerString", "DEL InfixExpression: ||", "DEL SimpleName: isDebugEnabled", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL Block", "DEL BooleanLiteral: false", "DEL QualifiedName: TRUST_TYPE.PEER_TRUST", "DEL SimpleName: foundCerts", "DEL Block", "DEL SimpleName: j", "DEL InfixExpression: &&", "DEL SimpleName: subjectString", "DEL VariableDeclarationFragment", "DEL SimpleName: LOG", "DEL InfixExpression: ==", "DEL BooleanLiteral: true", "DEL SimpleName: X509Certificate", "DEL SimpleName: debug", "DEL StringLiteral: \" not found in keystore\"", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL SimpleName: LOG", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: issuerSerial", "DEL ClassInstanceCreation", "DEL InfixExpression: +", "DEL InfixExpression: <", "DEL ArrayType: X509Certificate[]", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ArrayAccess", "DEL SimpleName: j", "DEL SimpleName: BigInteger", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: CryptoType", "DEL SimpleName: cert", "DEL InfixExpression: +", "DEL StringLiteral: \"Certificate path could not be verified for certificate with subject \"", "DEL InfixExpression: +", "DEL SimpleName: isDebugEnabled", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: subjectString", "DEL SimpleName: enableRevocation", "DEL SimpleName: String", "DEL StringLiteral: \"Certificate \"", "DEL VariableDeclarationStatement", "DEL SimpleName: LOG", "DEL SimpleName: X509Certificate", "DEL SimpleType: BigInteger", "DEL SimpleName: issuerString", "DEL SimpleName: isDebugEnabled", "DEL Block", "DEL PrefixExpression: !", "DEL StringLiteral: \" (serial \"", "DEL SimpleName: getIssuerX500Principal", "DEL MethodInvocation", "DEL StringLiteral: \")\"", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: debug", "DEL QualifiedName: foundCerts.length", "DEL SimpleName: crypto", "DEL SimpleName: getX509Certificates", "DEL SimpleName: issuerString", "DEL Block", "DEL SimpleType: X509Certificate", "DEL CastExpression", "DEL ForStatement", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL Dimension", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: x509certs", "DEL SimpleName: j", "DEL SimpleName: cert", "DEL SimpleName: LOG", "DEL SimpleName: isInKeystore", "DEL QualifiedName: foundCerts.length", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: cert", "DEL SimpleType: X509Certificate", "DEL SimpleName: signatureTrustType", "DEL SimpleName: isInKeystore", "DEL BooleanLiteral: true", "DEL ReturnStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: issuerSerial", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL Dimension", "DEL SimpleName: getSerialNumber", "DEL Block", "DEL BooleanLiteral: false", "DEL SimpleType: CryptoType", "DEL MethodInvocation", "DEL SimpleName: debug", "DEL SimpleName: equals", "DEL IfStatement", "DEL PrefixExpression: !", "DEL ArrayAccess", "DEL SimpleName: debug", "DEL MethodInvocation", "DEL SimpleName: getName", "DEL StringLiteral: \"Certificate \"", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL ReturnStatement", "DEL PostfixExpression: ++", "DEL SimpleName: isCertificateInKeyStore", "DEL SimpleName: LOG", "DEL ArrayType: X509Certificate[]", "DEL VariableDeclarationStatement", "DEL SimpleName: isDebugEnabled", "DEL ReturnStatement", "DEL SimpleName: verifyTrust", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: j", "DEL NullLiteral", "DEL PrimitiveType: boolean", "DEL SimpleName: x509certs", "DEL SimpleName: CryptoType", "DEL StringLiteral: \" of certificate for \"", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: cert", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: getName", "DEL SimpleName: issuerString", "DEL SimpleName: isDebugEnabled", "DEL InfixExpression: +"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: debug", "DEL SimpleName: LOG", "DEL SimpleName: foundCerts", "DEL NumberLiteral: 0", "DEL Modifier: protected", "DEL SimpleName: X509Certificate", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL StringLiteral: \"No certificate found for subject from issuer with \"", "DEL VariableDeclarationStatement", "DEL TagElement: @param", "DEL TextElement:  true if cert is in the keystore", "DEL SimpleName: getSerialNumber", "DEL SimpleName: crypto", "DEL SimpleName: cert", "DEL SimpleName: debug", "DEL SimpleName: issuerString", "DEL InfixExpression: !=", "DEL VariableDeclarationStatement", "DEL SimpleName: equals", "DEL SimpleType: Crypto", "DEL SimpleName: cert", "DEL SimpleName: issuerSerial", "DEL IfStatement", "DEL SimpleName: getName", "DEL TagElement: @param", "DEL SimpleName: crypto", "DEL SimpleName: LOG", "DEL SimpleName: foundCerts", "DEL SimpleName: getIssuerX500Principal", "DEL SimpleName: issuerString", "DEL StringLiteral: \")\"", "DEL Dimension", "DEL SimpleName: WSSecurityException", "DEL SimpleName: cert", "DEL VariableDeclarationFragment", "DEL SimpleName: LOG", "DEL Block", "DEL Javadoc", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL InfixExpression: &&", "DEL SimpleName: getX509Certificates", "DEL SimpleType: String", "DEL ArrayType: X509Certificate[]", "DEL MethodInvocation", "DEL SimpleName: isDebugEnabled", "DEL MethodInvocation", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleType: X509Certificate", "DEL BooleanLiteral: true", "DEL SimpleName: foundCerts", "DEL ExpressionStatement", "DEL SimpleName: cryptoType", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: LOG", "DEL TextElement:  The certificate to check", "DEL SimpleName: issuerSerial", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: foundCerts", "DEL SimpleName: cert", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: crypto", "DEL SimpleName: issuerString", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: WSSecurityException", "DEL TagElement: @throws", "DEL SimpleName: cert", "DEL MethodInvocation", "DEL SimpleName: isDebugEnabled", "DEL IfStatement", "DEL ExpressionStatement", "DEL TextElement: Check to see if the certificate argument is in the keystore", "DEL NumberLiteral: 0", "DEL InfixExpression: +", "DEL SingleVariableDeclaration", "DEL PrimitiveType: boolean", "DEL StringLiteral: \"Direct trust for certificate with \"", "DEL TextElement:  A Crypto instance to use for trust validation", "DEL SimpleName: X509Certificate", "DEL MethodDeclaration", "DEL SimpleType: CryptoType", "DEL SimpleName: CryptoType", "DEL ArrayAccess", "DEL SimpleName: getName", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: issuerSerial", "DEL SimpleType: WSSecurityException", "DEL VariableDeclarationStatement", "DEL QualifiedName: CryptoType.TYPE.ISSUER_SERIAL", "DEL SimpleName: setIssuerSerial", "DEL BooleanLiteral: false", "DEL SimpleName: getSubjectX500Principal", "DEL SimpleType: BigInteger", "DEL MethodInvocation", "DEL SimpleName: String", "DEL SimpleName: Crypto", "DEL TagElement: @return", "DEL ArrayAccess", "DEL SimpleName: cert", "DEL SimpleName: CryptoType", "DEL Block", "DEL Block", "DEL NullLiteral", "DEL MethodInvocation", "DEL SimpleName: cryptoType", "DEL SimpleName: BigInteger", "DEL SimpleName: isCertificateInKeyStore", "DEL SimpleName: cryptoType", "DEL SimpleType: CryptoType", "DEL MethodInvocation", "DEL StringLiteral: \" (serial \"", "DEL InfixExpression: +", "DEL SimpleType: X509Certificate", "DEL Block", "DEL NullLiteral"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL BooleanLiteral: false", "DEL BooleanLiteral: false", "DEL IfStatement", "DEL SimpleName: LOG", "DEL MethodInvocation", "DEL StringLiteral: \"Certificate path has been verified for certificate with subject \"", "DEL IfStatement", "DEL SimpleName: isDebugEnabled", "DEL StringLiteral: \"Certificate path could not be verified for certificate with subject \"", "DEL MethodDeclaration", "DEL Block", "DEL InfixExpression: ||", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: LOG", "DEL NullLiteral", "DEL ReturnStatement", "DEL BooleanLiteral: true", "DEL SimpleName: subjectString", "DEL Modifier: protected", "DEL SimpleName: debug", "DEL PrimitiveType: boolean", "DEL InfixExpression: <", "DEL SimpleName: verifyTrustInCerts", "DEL SimpleName: isDebugEnabled", "DEL SimpleName: debug", "DEL SimpleName: LOG", "DEL Block", "DEL SimpleName: LOG", "DEL IfStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: certificates", "DEL MethodInvocation", "DEL SimpleName: subjectString", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL InfixExpression: +", "DEL NumberLiteral: 2", "DEL Block", "DEL ReturnStatement", "DEL QualifiedName: certificates.length", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InfixExpression: +"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement"]}]}}, {"SamlAssertionValidator_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.components.crypto.Crypto(42) to org.apache.wss4j.common.crypto.Crypto", "Update QualifiedName: org.apache.ws.security.components.crypto.CryptoType(44) to org.apache.wss4j.common.ext.WSSecurityException", "Update QualifiedName: org.apache.ws.security.handler.RequestData(46) to org.apache.wss4j.common.saml.OpenSAMLUtil", "Update QualifiedName: org.apache.ws.security.saml.SAMLKeyInfo(48) to org.apache.wss4j.common.saml.SAMLKeyInfo", "Update QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper(50) to org.apache.wss4j.common.saml.SamlAssertionWrapper", "Update QualifiedName: org.apache.ws.security.saml.ext.OpenSAMLUtil(52) to org.apache.wss4j.dom.handler.RequestData", "Update QualifiedName: org.apache.ws.security.validate.Credential(54) to org.apache.wss4j.dom.validate.Credential", "Update QualifiedName: org.apache.ws.security.validate.Validator(56) to org.apache.wss4j.dom.validate.Validator", "Move Javadoc(1085) into MethodDeclaration(692) at 0", "Move TagElement: @param(1080) into Javadoc(638) at 5", "Update PrimitiveType: boolean(682) to void", "Update SimpleName: verifyTrustInCert(683) to verifyTrustInCerts", "Move SingleVariableDeclaration(1094) into MethodDeclaration(692) at 5", "Move SingleVariableDeclaration(1098) into MethodDeclaration(692) at 6", "Move SingleVariableDeclaration(1101) into MethodDeclaration(692) at 8", "Move SimpleType: WSSecurityException(1103) into MethodDeclaration(692) at 9", "Insert Block(691) into MethodDeclaration(692) at 9", "Update PrimitiveType: boolean(1170) to void", "Update SimpleType: AssertionWrapper(402) to SamlAssertionWrapper", "Move IfStatement(569) into Block(541) at 9", "Move ThrowStatement(542) into Block(541) at 10", "Update TagElement: @return(1082) to @param", "Update SimpleType: X509Certificate(685) to RequestData", "Update SimpleName: cert(686) to data", "Move VariableDeclarationStatement(1126) into Block(691) at 0", "Move ExpressionStatement(734) into Block(691) at 1", "Move IfStatement(924) into Block(691) at 2", "Insert ExpressionStatement(715) into Block(716) at 0", "Update SimpleType: AssertionWrapper(1196) to SamlAssertionWrapper", "Update SimpleType: AssertionWrapper(1351) to SamlAssertionWrapper", "Update SimpleType: AssertionWrapper(278) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(401) to SamlAssertionWrapper", "Move InfixExpression: !=(556) into IfStatement(535) at 0", "Insert SimpleName: data(629) into TagElement: @param(631) at 0", "Update TextElement:  true if the certificate chain is trusted, false if not(1081) to  A RequestData instance", "Insert TextElement:  if the certificate chain is not trusted(636) into TagElement: @throws(637) at 1", "Update SimpleName: X509Certificate(684) to RequestData", "Move MethodInvocation(1131) into ExpressionStatement(678) at 0", "Move MethodInvocation(1185) into ExpressionStatement(715) at 0", "Update SimpleName: AssertionWrapper(1195) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(1350) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(277) to SamlAssertionWrapper", "Move ExpressionStatement(513) into Block(522) at 1", "Move ExpressionStatement(522) into Block(522) at 2", "Move IfStatement(549) into Block(522) at 3", "Insert ExpressionStatement(531) into Block(534) at 0", "Update QualifiedName: WSSecurityException.FAILED_AUTHENTICATION(540) to WSSecurityException.ErrorCode.FAILED_AUTHENTICATION", "Update SimpleName: getSigCrypto(588) to getSigVerCrypto", "Update SimpleName: getAssertion(281) to getSamlAssertion", "Insert MethodInvocation(487) into ExpressionStatement(488) at 0", "Insert MethodInvocation(496) into ExpressionStatement(497) at 0", "Move MethodInvocation(562) into ExpressionStatement(531) at 0", "Update SimpleName: getAssertion(264) to getSamlAssertion", "Update QualifiedName: WSSecurityException.FAILURE(271) to WSSecurityException.ErrorCode.FAILURE", "Update QualifiedName: WSSecurityException.FAILURE(472) to WSSecurityException.ErrorCode.FAILURE", "Update SimpleName: verifyTrustInCert(505) to validateCertificates", "Move SimpleName: verifyTrustInCert(505) into MethodInvocation(487) at 0", "Insert SimpleName: certs(486) into MethodInvocation(487) at 1", "Move SimpleName: verifyTrustInCerts(516) into MethodInvocation(496) at 0", "Move SimpleName: certs(517) into MethodInvocation(496) at 1", "Move SimpleName: crypto(518) into MethodInvocation(496) at 2", "Update SimpleName: enableRevocation(519) to data", "Move SimpleName: enableRevocation(519) into MethodInvocation(496) at 3", "Move MethodInvocation(498) into MethodInvocation(496) at 4", "Move SimpleType: WSSecurityException(1409) into ClassInstanceCreation(867) at 0", "Update QualifiedName: WSSecurityException.FAILURE(1336) to WSSecurityException.ErrorCode.FAILURE", "Move SingleVariableDeclaration(1461) into CatchClause(946) at 0", "Move SimpleType: WSSecurityException(573) into ClassInstanceCreation(601) at 0", "Update QualifiedName: WSSecurityException.FAILED_CHECK(634) to WSSecurityException.ErrorCode.FAILED_CHECK", "Move SimpleType: WSSecurityException(633) into ClassInstanceCreation(614) at 0", "Update QualifiedName: WSSecurityException.FAILED_CHECK(648) to WSSecurityException.ErrorCode.FAILED_CHECK", "Move ExpressionStatement(1471) into Block(945) at 0", "Move SingleVariableDeclaration(1397) into CatchClause(1010) at 0", "Update QualifiedName: WSSecurityException.FAILURE(336) to WSSecurityException.ErrorCode.FAILURE", "Update QualifiedName: WSSecurityException.FAILURE(353) to WSSecurityException.ErrorCode.FAILURE", "Insert ThrowStatement(514) into Block(515) at 0", "Move SimpleType: WSSecurityException(1473) into ClassInstanceCreation(845) at 0", "Update QualifiedName: WSSecurityException.FAILURE(1314) to WSSecurityException.ErrorCode.FAILURE", "Move ExpressionStatement(1407) into Block(1009) at 0", "Insert ClassInstanceCreation(513) into ThrowStatement(514) at 0", "Move SimpleType: WSSecurityException(1335) into ClassInstanceCreation(943) at 0", "Update QualifiedName: WSSecurityException.FAILURE(1410) to WSSecurityException.ErrorCode.FAILURE", "Move SimpleType: WSSecurityException(647) into ClassInstanceCreation(513) at 0", "Insert QualifiedName: WSSecurityException.ErrorCode.FAILED_AUTHENTICATION(512) into ClassInstanceCreation(513) at 1", "Move SimpleType: WSSecurityException(1313) into ClassInstanceCreation(1007) at 0", "Update QualifiedName: WSSecurityException.FAILURE(1474) to WSSecurityException.ErrorCode.FAILURE", "Delete QualifiedName: java.math.BigInteger(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: org.apache.ws.security.WSSecurityException(40)", "Delete ImportDeclaration(41)", "Delete SimpleName: trust(504)", "Delete SimpleName: certs(506)", "Delete NumberLiteral: 0(507)", "Delete ArrayAccess(508)", "Delete SimpleName: crypto(509)", "Delete SimpleName: enableRevocation(510)", "Delete MethodInvocation(511)", "Delete Assignment: =(512)", "Delete SimpleName: trust(515)", "Delete MethodInvocation(520)", "Delete Assignment: =(521)", "Delete PrimitiveType: boolean(489)", "Delete SimpleName: trust(490)", "Delete BooleanLiteral: false(491)", "Delete VariableDeclarationFragment(492)", "Delete VariableDeclarationStatement(493)", "Delete PrimitiveType: boolean(494)", "Delete SimpleName: enableRevocation(495)", "Delete VariableDeclarationFragment(499)", "Delete VariableDeclarationStatement(500)", "Delete QualifiedName: certs.length(501)", "Delete NumberLiteral: 1(502)", "Delete InfixExpression: ==(503)", "Delete Block(514)", "Delete Block(523)", "Delete IfStatement(524)", "Delete SimpleName: trust(525)", "Delete Block(550)", "Delete IfStatement(551)", "Delete SimpleName: trust(565)", "Delete PrimitiveType: boolean(557)", "Delete SimpleName: trust(558)", "Delete VariableDeclarationFragment(563)", "Delete VariableDeclarationStatement(564)", "Delete Block(570)", "Delete IfStatement(571)", "Delete QualifiedName: WSSecurityException.FAILED_AUTHENTICATION(574)", "Delete ClassInstanceCreation(575)", "Delete ThrowStatement(576)", "Delete NullLiteral(636)", "Delete NullLiteral(650)", "Delete TextElement: Evaluate whether a given certificate should be trusted.(659)", "Delete TextElement: Policy used in this implementation:(660)", "Delete TextElement: 1. Search the keystore for the transmitted certificate(661)", "Delete TextElement: 2. Search the keystore for a connection to the transmitted certificate(662)", "Delete TextElement: (that is, search for certificate(s) of the issuer of the transmitted certificate(663)", "Delete TextElement: 3. Verify the trust path for those certificates found because the search for the issuer (664)", "Delete TextElement: might be fooled by a phony DN (String!)(665)", "Delete TagElement(666)", "Delete SimpleName: cert(667)", "Delete TextElement:  the certificate that should be validated against the keystore(668)", "Delete TagElement: @param(669)", "Delete SimpleName: crypto(670)", "Delete TextElement:  A crypto instance to use for trust validation(671)", "Delete TagElement: @param(672)", "Delete SimpleName: enableRevocation(673)", "Delete TextElement:  Whether revocation is enabled or not(674)", "Delete TagElement: @param(675)", "Delete TextElement:  true if the certificate is trusted, false if not(676)", "Delete TagElement: @return(677)", "Delete SimpleName: WSSecurityException(678)", "Delete TagElement: @throws(679)", "Delete Javadoc(680)", "Delete SimpleName: LOG(728)", "Delete SimpleName: debug(729)", "Delete StringLiteral: \"Transmitted certificate has subject \"(730)", "Delete SimpleName: subjectString(731)", "Delete InfixExpression: +(732)", "Delete MethodInvocation(733)", "Delete SimpleName: Crypto(688)", "Delete SimpleType: Crypto(689)", "Delete SimpleName: crypto(690)", "Delete SingleVariableDeclaration(691)", "Delete PrimitiveType: boolean(692)", "Delete SimpleName: enableRevocation(693)", "Delete SingleVariableDeclaration(694)", "Delete SimpleName: WSSecurityException(695)", "Delete SimpleType: WSSecurityException(696)", "Delete SimpleName: String(697)", "Delete SimpleType: String(698)", "Delete SimpleName: subjectString(699)", "Delete SimpleName: cert(700)", "Delete SimpleName: getSubjectX500Principal(701)", "Delete MethodInvocation(702)", "Delete SimpleName: getName(703)", "Delete MethodInvocation(704)", "Delete VariableDeclarationFragment(705)", "Delete VariableDeclarationStatement(706)", "Delete SimpleName: String(707)", "Delete SimpleType: String(708)", "Delete SimpleName: issuerString(709)", "Delete SimpleName: cert(710)", "Delete SimpleName: getIssuerX500Principal(711)", "Delete MethodInvocation(712)", "Delete SimpleName: getName(713)", "Delete MethodInvocation(714)", "Delete VariableDeclarationFragment(715)", "Delete VariableDeclarationStatement(716)", "Delete SimpleName: BigInteger(717)", "Delete SimpleType: BigInteger(718)", "Delete SimpleName: issuerSerial(719)", "Delete SimpleName: cert(720)", "Delete SimpleName: getSerialNumber(721)", "Delete MethodInvocation(722)", "Delete VariableDeclarationFragment(723)", "Delete VariableDeclarationStatement(724)", "Delete SimpleName: LOG(725)", "Delete SimpleName: isDebugEnabled(726)", "Delete MethodInvocation(727)", "Delete SimpleName: LOG(735)", "Delete SimpleName: debug(736)", "Delete StringLiteral: \"Transmitted certificate has issuer \"(737)", "Delete SimpleName: issuerString(738)", "Delete StringLiteral: \" (serial \"(739)", "Delete SimpleName: issuerSerial(740)", "Delete StringLiteral: \")\"(741)", "Delete InfixExpression: +(742)", "Delete MethodInvocation(743)", "Delete ExpressionStatement(744)", "Delete Block(745)", "Delete IfStatement(746)", "Delete PrimitiveType: boolean(747)", "Delete SimpleName: isInKeystore(748)", "Delete SimpleName: isCertificateInKeyStore(749)", "Delete SimpleName: crypto(750)", "Delete SimpleName: cert(751)", "Delete MethodInvocation(752)", "Delete VariableDeclarationFragment(753)", "Delete VariableDeclarationStatement(754)", "Delete SimpleName: enableRevocation(755)", "Delete PrefixExpression: !(756)", "Delete SimpleName: isInKeystore(757)", "Delete InfixExpression: &&(758)", "Delete SimpleName: LOG(759)", "Delete SimpleName: isDebugEnabled(760)", "Delete MethodInvocation(761)", "Delete SimpleName: LOG(762)", "Delete SimpleName: debug(763)", "Delete StringLiteral: \"Certificate \"(764)", "Delete SimpleName: subjectString(765)", "Delete StringLiteral: \" found in keystore\"(766)", "Delete InfixExpression: +(767)", "Delete MethodInvocation(768)", "Delete ExpressionStatement(769)", "Delete Block(770)", "Delete IfStatement(771)", "Delete BooleanLiteral: true(772)", "Delete ReturnStatement(773)", "Delete Block(774)", "Delete IfStatement(775)", "Delete SimpleName: isInKeystore(776)", "Delete PrefixExpression: !(777)", "Delete SimpleName: signatureTrustType(778)", "Delete SimpleName: equals(779)", "Delete QualifiedName: TRUST_TYPE.PEER_TRUST(780)", "Delete MethodInvocation(781)", "Delete InfixExpression: &&(782)", "Delete SimpleName: LOG(783)", "Delete SimpleName: isDebugEnabled(784)", "Delete MethodInvocation(785)", "Delete SimpleName: LOG(786)", "Delete SimpleName: debug(787)", "Delete StringLiteral: \"Certificate \"(788)", "Delete SimpleName: subjectString(789)", "Delete StringLiteral: \" not found in keystore\"(790)", "Delete InfixExpression: +(791)", "Delete MethodInvocation(792)", "Delete ExpressionStatement(793)", "Delete Block(794)", "Delete IfStatement(795)", "Delete BooleanLiteral: false(796)", "Delete ReturnStatement(797)", "Delete Block(798)", "Delete IfStatement(799)", "Delete SimpleName: CryptoType(800)", "Delete SimpleType: CryptoType(801)", "Delete SimpleName: cryptoType(802)", "Delete SimpleName: CryptoType(803)", "Delete SimpleType: CryptoType(804)", "Delete QualifiedName: CryptoType.TYPE.SUBJECT_DN(805)", "Delete ClassInstanceCreation(806)", "Delete VariableDeclarationFragment(807)", "Delete VariableDeclarationStatement(808)", "Delete SimpleName: cryptoType(809)", "Delete SimpleName: setSubjectDN(810)", "Delete SimpleName: issuerString(811)", "Delete MethodInvocation(812)", "Delete ExpressionStatement(813)", "Delete SimpleName: X509Certificate(814)", "Delete SimpleType: X509Certificate(815)", "Delete Dimension(816)", "Delete ArrayType: X509Certificate[](817)", "Delete SimpleName: foundCerts(818)", "Delete SimpleName: crypto(819)", "Delete SimpleName: getX509Certificates(820)", "Delete SimpleName: cryptoType(821)", "Delete MethodInvocation(822)", "Delete VariableDeclarationFragment(823)", "Delete VariableDeclarationStatement(824)", "Delete SimpleName: foundCerts(825)", "Delete NullLiteral(826)", "Delete InfixExpression: ==(827)", "Delete QualifiedName: foundCerts.length(828)", "Delete NumberLiteral: 1(829)", "Delete InfixExpression: <(830)", "Delete InfixExpression: ||(831)", "Delete SimpleName: LOG(832)", "Delete SimpleName: isDebugEnabled(833)", "Delete MethodInvocation(834)", "Delete SimpleName: LOG(835)", "Delete SimpleName: debug(836)", "Delete StringLiteral: \"No certs found in keystore for issuer \"(837)", "Delete SimpleName: issuerString(838)", "Delete StringLiteral: \" of certificate for \"(839)", "Delete SimpleName: subjectString(840)", "Delete InfixExpression: +(841)", "Delete MethodInvocation(842)", "Delete ExpressionStatement(843)", "Delete Block(844)", "Delete IfStatement(845)", "Delete BooleanLiteral: false(846)", "Delete ReturnStatement(847)", "Delete Block(848)", "Delete IfStatement(849)", "Delete SimpleName: LOG(850)", "Delete SimpleName: isDebugEnabled(851)", "Delete MethodInvocation(852)", "Delete SimpleName: LOG(853)", "Delete SimpleName: debug(854)", "Delete StringLiteral: \"Preparing to validate certificate path for issuer \"(855)", "Delete SimpleName: issuerString(856)", "Delete InfixExpression: +(857)", "Delete MethodInvocation(858)", "Delete ExpressionStatement(859)", "Delete Block(860)", "Delete IfStatement(861)", "Delete SimpleName: X509Certificate(862)", "Delete SimpleType: X509Certificate(863)", "Delete Dimension(864)", "Delete ArrayType: X509Certificate[](865)", "Delete SimpleName: x509certs(866)", "Delete SimpleName: X509Certificate(867)", "Delete SimpleType: X509Certificate(868)", "Delete Dimension(869)", "Delete ArrayType: X509Certificate[](870)", "Delete QualifiedName: foundCerts.length(871)", "Delete NumberLiteral: 1(872)", "Delete InfixExpression: +(873)", "Delete ArrayCreation(874)", "Delete VariableDeclarationFragment(875)", "Delete VariableDeclarationStatement(876)", "Delete SimpleName: x509certs(877)", "Delete NumberLiteral: 0(878)", "Delete ArrayAccess(879)", "Delete SimpleName: cert(880)", "Delete Assignment: =(881)", "Delete ExpressionStatement(882)", "Delete PrimitiveType: int(883)", "Delete SimpleName: j(884)", "Delete NumberLiteral: 0(885)", "Delete VariableDeclarationFragment(886)", "Delete VariableDeclarationExpression(887)", "Delete SimpleName: j(888)", "Delete QualifiedName: foundCerts.length(889)", "Delete InfixExpression: <(890)", "Delete SimpleName: j(891)", "Delete PostfixExpression: ++(892)", "Delete SimpleName: x509certs(893)", "Delete SimpleName: j(894)", "Delete NumberLiteral: 1(895)", "Delete InfixExpression: +(896)", "Delete ArrayAccess(897)", "Delete SimpleName: X509Certificate(898)", "Delete SimpleType: X509Certificate(899)", "Delete SimpleName: foundCerts(900)", "Delete SimpleName: j(901)", "Delete ArrayAccess(902)", "Delete CastExpression(903)", "Delete Assignment: =(904)", "Delete ExpressionStatement(905)", "Delete Block(906)", "Delete ForStatement(907)", "Delete SimpleName: crypto(908)", "Delete SimpleName: verifyTrust(909)", "Delete SimpleName: x509certs(910)", "Delete SimpleName: enableRevocation(911)", "Delete MethodInvocation(912)", "Delete BooleanLiteral: true(925)", "Delete ReturnStatement(926)", "Delete Block(927)", "Delete IfStatement(928)", "Delete SimpleName: LOG(929)", "Delete SimpleName: isDebugEnabled(930)", "Delete MethodInvocation(931)", "Delete SimpleName: LOG(932)", "Delete SimpleName: debug(933)", "Delete StringLiteral: \"Certificate path could not be verified for certificate with subject \"(934)", "Delete SimpleName: subjectString(935)", "Delete InfixExpression: +(936)", "Delete MethodInvocation(937)", "Delete ExpressionStatement(938)", "Delete Block(939)", "Delete IfStatement(940)", "Delete BooleanLiteral: false(941)", "Delete ReturnStatement(942)", "Delete Block(943)", "Delete TextElement: Check to see if the certificate argument is in the keystore(945)", "Delete TagElement(946)", "Delete SimpleName: crypto(947)", "Delete TextElement:  A Crypto instance to use for trust validation(948)", "Delete TagElement: @param(949)", "Delete SimpleName: cert(950)", "Delete TextElement:  The certificate to check(951)", "Delete TagElement: @param(952)", "Delete TextElement:  true if cert is in the keystore(953)", "Delete TagElement: @return(954)", "Delete SimpleName: WSSecurityException(955)", "Delete TagElement: @throws(956)", "Delete Javadoc(957)", "Delete Modifier: protected(958)", "Delete PrimitiveType: boolean(959)", "Delete SimpleName: isCertificateInKeyStore(960)", "Delete SimpleName: Crypto(961)", "Delete SimpleType: Crypto(962)", "Delete SimpleName: crypto(963)", "Delete SingleVariableDeclaration(964)", "Delete SimpleName: X509Certificate(965)", "Delete SimpleType: X509Certificate(966)", "Delete SimpleName: cert(967)", "Delete SingleVariableDeclaration(968)", "Delete SimpleName: WSSecurityException(969)", "Delete SimpleType: WSSecurityException(970)", "Delete SimpleName: String(971)", "Delete SimpleType: String(972)", "Delete SimpleName: issuerString(973)", "Delete SimpleName: cert(974)", "Delete SimpleName: getIssuerX500Principal(975)", "Delete MethodInvocation(976)", "Delete SimpleName: getName(977)", "Delete MethodInvocation(978)", "Delete VariableDeclarationFragment(979)", "Delete VariableDeclarationStatement(980)", "Delete SimpleName: BigInteger(981)", "Delete SimpleType: BigInteger(982)", "Delete SimpleName: issuerSerial(983)", "Delete SimpleName: cert(984)", "Delete SimpleName: getSerialNumber(985)", "Delete MethodInvocation(986)", "Delete VariableDeclarationFragment(987)", "Delete VariableDeclarationStatement(988)", "Delete SimpleName: CryptoType(989)", "Delete SimpleType: CryptoType(990)", "Delete SimpleName: cryptoType(991)", "Delete SimpleName: CryptoType(992)", "Delete SimpleType: CryptoType(993)", "Delete QualifiedName: CryptoType.TYPE.ISSUER_SERIAL(994)", "Delete ClassInstanceCreation(995)", "Delete VariableDeclarationFragment(996)", "Delete VariableDeclarationStatement(997)", "Delete SimpleName: cryptoType(998)", "Delete SimpleName: setIssuerSerial(999)", "Delete SimpleName: issuerString(1000)", "Delete SimpleName: issuerSerial(1001)", "Delete MethodInvocation(1002)", "Delete ExpressionStatement(1003)", "Delete SimpleName: X509Certificate(1004)", "Delete SimpleType: X509Certificate(1005)", "Delete Dimension(1006)", "Delete ArrayType: X509Certificate[](1007)", "Delete SimpleName: foundCerts(1008)", "Delete SimpleName: crypto(1009)", "Delete SimpleName: getX509Certificates(1010)", "Delete SimpleName: cryptoType(1011)", "Delete MethodInvocation(1012)", "Delete VariableDeclarationFragment(1013)", "Delete VariableDeclarationStatement(1014)", "Delete SimpleName: foundCerts(1015)", "Delete NullLiteral(1016)", "Delete InfixExpression: !=(1017)", "Delete SimpleName: foundCerts(1018)", "Delete NumberLiteral: 0(1019)", "Delete ArrayAccess(1020)", "Delete NullLiteral(1021)", "Delete InfixExpression: !=(1022)", "Delete InfixExpression: &&(1023)", "Delete SimpleName: foundCerts(1024)", "Delete NumberLiteral: 0(1025)", "Delete ArrayAccess(1026)", "Delete SimpleName: equals(1027)", "Delete SimpleName: cert(1028)", "Delete MethodInvocation(1029)", "Delete InfixExpression: &&(1030)", "Delete SimpleName: LOG(1031)", "Delete SimpleName: isDebugEnabled(1032)", "Delete MethodInvocation(1033)", "Delete SimpleName: LOG(1034)", "Delete SimpleName: debug(1035)", "Delete StringLiteral: \"Direct trust for certificate with \"(1036)", "Delete SimpleName: cert(1037)", "Delete SimpleName: getSubjectX500Principal(1038)", "Delete MethodInvocation(1039)", "Delete SimpleName: getName(1040)", "Delete MethodInvocation(1041)", "Delete InfixExpression: +(1042)", "Delete MethodInvocation(1043)", "Delete ExpressionStatement(1044)", "Delete Block(1045)", "Delete IfStatement(1046)", "Delete BooleanLiteral: true(1047)", "Delete ReturnStatement(1048)", "Delete Block(1049)", "Delete IfStatement(1050)", "Delete SimpleName: LOG(1051)", "Delete SimpleName: isDebugEnabled(1052)", "Delete MethodInvocation(1053)", "Delete SimpleName: LOG(1054)", "Delete SimpleName: debug(1055)", "Delete StringLiteral: \"No certificate found for subject from issuer with \"(1056)", "Delete SimpleName: issuerString(1057)", "Delete StringLiteral: \" (serial \"(1058)", "Delete SimpleName: issuerSerial(1059)", "Delete StringLiteral: \")\"(1060)", "Delete InfixExpression: +(1061)", "Delete MethodInvocation(1062)", "Delete ExpressionStatement(1063)", "Delete Block(1064)", "Delete IfStatement(1065)", "Delete BooleanLiteral: false(1066)", "Delete ReturnStatement(1067)", "Delete Block(1068)", "Delete MethodDeclaration(1069)", "Delete Modifier: protected(1086)", "Delete PrimitiveType: boolean(1087)", "Delete SimpleName: verifyTrustInCerts(1088)", "Delete SimpleName: certificates(1104)", "Delete NullLiteral(1105)", "Delete InfixExpression: ==(1106)", "Delete QualifiedName: certificates.length(1107)", "Delete NumberLiteral: 2(1108)", "Delete InfixExpression: <(1109)", "Delete InfixExpression: ||(1110)", "Delete BooleanLiteral: false(1111)", "Delete ReturnStatement(1112)", "Delete Block(1113)", "Delete IfStatement(1114)", "Delete SimpleName: LOG(1132)", "Delete SimpleName: isDebugEnabled(1133)", "Delete MethodInvocation(1134)", "Delete SimpleName: LOG(1135)", "Delete SimpleName: debug(1136)", "Delete StringLiteral: \"Certificate path has been verified for certificate with subject \"(1137)", "Delete SimpleName: subjectString(1138)", "Delete InfixExpression: +(1139)", "Delete MethodInvocation(1140)", "Delete ExpressionStatement(1141)", "Delete Block(1142)", "Delete IfStatement(1143)", "Delete BooleanLiteral: true(1144)", "Delete ReturnStatement(1145)", "Delete Block(1146)", "Delete IfStatement(1147)", "Delete SimpleName: LOG(1148)", "Delete SimpleName: isDebugEnabled(1149)", "Delete MethodInvocation(1150)", "Delete SimpleName: LOG(1151)", "Delete SimpleName: debug(1152)", "Delete StringLiteral: \"Certificate path could not be verified for certificate with subject \"(1153)", "Delete SimpleName: subjectString(1154)", "Delete InfixExpression: +(1155)", "Delete MethodInvocation(1156)", "Delete ExpressionStatement(1157)", "Delete Block(1158)", "Delete IfStatement(1159)", "Delete BooleanLiteral: false(1160)", "Delete ReturnStatement(1161)", "Delete Block(1162)", "Delete MethodDeclaration(1163)", "Delete ReturnStatement(1186)"]}}, {"ThreadLocalCallbackHandler_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.util.DOM2Writer to org.apache.wss4j.common.util.DOM2Writer", "operations": ["UPD QualifiedName: org.apache.ws.security.util.DOM2Writer from org.apache.ws.security.util.DOM2Writer to org.apache.wss4j.common.util.DOM2Writer"]}]}}, {"ThreadLocalCallbackHandler_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.util.DOM2Writer(32) to org.apache.wss4j.common.util.DOM2Writer"]}}, {"MetadataServlet_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.util.DOM2Writer to org.apache.wss4j.common.util.DOM2Writer", "operations": ["UPD QualifiedName: org.apache.ws.security.util.DOM2Writer from org.apache.ws.security.util.DOM2Writer to org.apache.wss4j.common.util.DOM2Writer"]}]}}, {"MetadataServlet_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.util.DOM2Writer(40) to org.apache.wss4j.common.util.DOM2Writer"]}}, {"STSAuthenticationProvider_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.WSConstants to org.apache.wss4j.common.saml.SamlAssertionWrapper", "operations": ["UPD QualifiedName: org.apache.ws.security.WSConstants from org.apache.ws.security.WSConstants to org.apache.wss4j.common.saml.SamlAssertionWrapper"]}, {"root": "UPDATE from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.dom.WSConstants", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.dom.WSConstants"]}, {"root": "UPDATE from AssertionWrapper to SamlAssertionWrapper", "operations": ["UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper"]}]}}, {"STSAuthenticationProvider_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.WSConstants(46) to org.apache.wss4j.common.saml.SamlAssertionWrapper", "Update QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper(48) to org.apache.wss4j.dom.WSConstants", "Update SimpleType: AssertionWrapper(304) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(303) to SamlAssertionWrapper", "Update SimpleType: AssertionWrapper(307) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(306) to SamlAssertionWrapper"]}}, {"FedizSAMLDelegationHandler_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.common.saml.SamlAssertionWrapper", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.common.saml.SamlAssertionWrapper"]}, {"root": "UPDATE from AssertionWrapper to SamlAssertionWrapper", "operations": ["UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper"]}]}}, {"FedizSAMLDelegationHandler_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper(28) to org.apache.wss4j.common.saml.SamlAssertionWrapper", "Update SimpleType: AssertionWrapper(81) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(80) to SamlAssertionWrapper"]}}, {"PasswordCallbackHandler_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.WSPasswordCallback to org.apache.wss4j.common.ext.WSPasswordCallback", "operations": ["UPD QualifiedName: org.apache.ws.security.WSPasswordCallback from org.apache.ws.security.WSPasswordCallback to org.apache.wss4j.common.ext.WSPasswordCallback"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: WSPasswordCallback to VariableDeclarationStatement at 0"]}, {"root": "INS SimpleType: org.apache.wss4j.common.ext.WSPasswordCallback to CastExpression at 0", "operations": ["INS SimpleType: org.apache.wss4j.common.ext.WSPasswordCallback to CastExpression at 0", "INS QualifiedName: org.apache.wss4j.common.ext.WSPasswordCallback to SimpleType: org.apache.wss4j.common.ext.WSPasswordCallback at 0"]}, {"root": "DEL SimpleType: WSPasswordCallback", "operations": ["DEL SimpleType: WSPasswordCallback", "DEL SimpleName: WSPasswordCallback"]}]}}, {"PasswordCallbackHandler_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.WSPasswordCallback(26) to org.apache.wss4j.common.ext.WSPasswordCallback", "Move SimpleType: WSPasswordCallback(65) into VariableDeclarationStatement(71) at 0", "Insert SimpleType: org.apache.wss4j.common.ext.WSPasswordCallback(65) into CastExpression(69) at 0", "Insert QualifiedName: org.apache.wss4j.common.ext.WSPasswordCallback(64) into SimpleType: org.apache.wss4j.common.ext.WSPasswordCallback(65) at 0", "Delete SimpleName: WSPasswordCallback(61)", "Delete SimpleType: WSPasswordCallback(62)"]}}, {"UsernamePasswordCallbackHandler_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.WSPasswordCallback to org.apache.wss4j.common.ext.WSPasswordCallback", "operations": ["UPD QualifiedName: org.apache.ws.security.WSPasswordCallback from org.apache.ws.security.WSPasswordCallback to org.apache.wss4j.common.ext.WSPasswordCallback"]}]}}, {"UsernamePasswordCallbackHandler_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.WSPasswordCallback(28) to org.apache.wss4j.common.ext.WSPasswordCallback"]}}, {"STSClientAction_cluster": {"actions": [{"root": "UPDATE from org.apache.cxf.helpers.DOMUtils to org.apache.cxf.staxutils.StaxUtils", "operations": ["UPD QualifiedName: org.apache.cxf.helpers.DOMUtils from org.apache.cxf.helpers.DOMUtils to org.apache.cxf.staxutils.StaxUtils"]}, {"root": "UPDATE from org.apache.ws.security.WSConstants to org.apache.wss4j.common.saml.SamlAssertionWrapper", "operations": ["UPD QualifiedName: org.apache.ws.security.WSConstants from org.apache.ws.security.WSConstants to org.apache.wss4j.common.saml.SamlAssertionWrapper"]}, {"root": "UPDATE from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.dom.WSConstants", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.dom.WSConstants"]}, {"root": "UPDATE from AssertionWrapper to SamlAssertionWrapper", "operations": ["UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper"]}, {"root": "UPDATE from DOMUtils to StaxUtils", "operations": ["UPD SimpleName: DOMUtils from DOMUtils to StaxUtils"]}, {"root": "UPDATE from readXml to read", "operations": ["UPD SimpleName: readXml from readXml to read"]}]}}, {"STSClientAction_diff": {"operations": ["Update QualifiedName: org.apache.cxf.helpers.DOMUtils(66) to org.apache.cxf.staxutils.StaxUtils", "Update QualifiedName: org.apache.ws.security.WSConstants(76) to org.apache.wss4j.common.saml.SamlAssertionWrapper", "Update QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper(78) to org.apache.wss4j.dom.WSConstants", "Update SimpleType: AssertionWrapper(880) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(879) to SamlAssertionWrapper", "Update SimpleName: DOMUtils(838) to StaxUtils", "Update SimpleName: readXml(839) to read", "Update SimpleType: AssertionWrapper(883) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(882) to SamlAssertionWrapper"]}}, {"ValidateTokenAction_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.util.UUIDGenerator to org.apache.xml.security.stax.impl.util.IDGenerator", "operations": ["UPD QualifiedName: org.apache.ws.security.util.UUIDGenerator from org.apache.ws.security.util.UUIDGenerator to org.apache.xml.security.stax.impl.util.IDGenerator"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"_\" to MethodInvocation at 2"]}, {"root": "UPDATE from UUIDGenerator to IDGenerator", "operations": ["UPD SimpleName: UUIDGenerator from UUIDGenerator to IDGenerator"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: UUIDGenerator to MethodInvocation at 0", "MOV SimpleName: getUUID to MethodInvocation at 1"]}, {"root": "UPDATE from getUUID to generateID", "operations": ["UPD SimpleName: getUUID from getUUID to generateID"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"_\"", "DEL MethodInvocation", "DEL InfixExpression: +"]}]}}, {"ValidateTokenAction_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.util.UUIDGenerator(64) to org.apache.xml.security.stax.impl.util.IDGenerator", "Insert MethodInvocation(270) into VariableDeclarationFragment(271) at 1", "Update SimpleName: UUIDGenerator(268) to IDGenerator", "Move SimpleName: UUIDGenerator(268) into MethodInvocation(270) at 0", "Update SimpleName: getUUID(269) to generateID", "Move SimpleName: getUUID(269) into MethodInvocation(270) at 1", "Insert StringLiteral: \"_\"(269) into MethodInvocation(270) at 2", "Delete StringLiteral: \"_\"(267)", "Delete MethodInvocation(270)", "Delete InfixExpression: +(271)"]}}, {"ApplicationServiceImpl_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from javax.ws.rs.ValidationException to javax.ws.rs.BadRequestException", "operations": ["UPD QualifiedName: javax.ws.rs.ValidationException from javax.ws.rs.ValidationException to javax.ws.rs.BadRequestException"]}, {"root": "UPDATE from ValidationException to BadRequestException", "operations": ["UPD SimpleType: ValidationException from ValidationException to BadRequestException", "UPD SimpleName: ValidationException from ValidationException to BadRequestException"]}, {"root": "DEL QualifiedName: Status.BAD_REQUEST", "operations": ["DEL QualifiedName: Status.BAD_REQUEST"]}]}}, {"ApplicationServiceImpl_diff": {"operations": ["Move ImportDeclaration(23) into CompilationUnit(591) at 5", "Update QualifiedName: javax.ws.rs.ValidationException(24) to javax.ws.rs.BadRequestException", "Update SimpleType: ValidationException(332) to BadRequestException", "Update SimpleName: ValidationException(331) to BadRequestException", "Delete QualifiedName: Status.BAD_REQUEST(333)"]}}, {"ClaimServiceImpl_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from javax.ws.rs.ValidationException to javax.ws.rs.BadRequestException", "operations": ["UPD QualifiedName: javax.ws.rs.ValidationException from javax.ws.rs.ValidationException to javax.ws.rs.BadRequestException"]}, {"root": "UPDATE from ValidationException to BadRequestException", "operations": ["UPD SimpleName: ValidationException from ValidationException to BadRequestException", "UPD SimpleType: ValidationException from ValidationException to BadRequestException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.ws.rs.core.Response.Status"]}, {"root": "DEL QualifiedName: Status.BAD_REQUEST", "operations": ["DEL QualifiedName: Status.BAD_REQUEST"]}]}}, {"ClaimServiceImpl_diff": {"operations": ["Move ImportDeclaration(23) into CompilationUnit(325) at 5", "Update QualifiedName: javax.ws.rs.ValidationException(24) to javax.ws.rs.BadRequestException", "Update SimpleType: ValidationException(284) to BadRequestException", "Update SimpleName: ValidationException(283) to BadRequestException", "Delete QualifiedName: javax.ws.rs.core.Response.Status(28)", "Delete ImportDeclaration(29)", "Delete QualifiedName: Status.BAD_REQUEST(285)"]}}, {"IdpServiceImpl_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 6"]}, {"root": "UPDATE from javax.ws.rs.ValidationException to javax.ws.rs.BadRequestException", "operations": ["UPD QualifiedName: javax.ws.rs.ValidationException from javax.ws.rs.ValidationException to javax.ws.rs.BadRequestException"]}, {"root": "UPDATE from ValidationException to BadRequestException", "operations": ["UPD SimpleType: ValidationException from ValidationException to BadRequestException", "UPD SimpleName: ValidationException from ValidationException to BadRequestException"]}, {"root": "DEL QualifiedName: Status.BAD_REQUEST", "operations": ["DEL QualifiedName: Status.BAD_REQUEST"]}]}}, {"IdpServiceImpl_diff": {"operations": ["Move ImportDeclaration(25) into CompilationUnit(970) at 6", "Update QualifiedName: javax.ws.rs.ValidationException(26) to javax.ws.rs.BadRequestException", "Update SimpleType: ValidationException(354) to BadRequestException", "Update SimpleName: ValidationException(353) to BadRequestException", "Delete QualifiedName: Status.BAD_REQUEST(355)"]}}, {"RestServiceExceptionMapper_cluster": {"actions": [{"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.apache.cxf.jaxrs.client.ResponseExceptionMapper"]}, {"root": "DEL ParameterizedType: ResponseExceptionMapper<Exception>", "operations": ["DEL ParameterizedType: ResponseExceptionMapper<Exception>", "DEL SimpleType: ResponseExceptionMapper", "DEL SimpleName: ResponseExceptionMapper", "DEL SimpleName: Exception", "DEL SimpleType: Exception"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleType: Exception", "DEL SimpleName: Response", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleType: Response", "DEL SimpleName: UnsupportedOperationException", "DEL SimpleName: fromResponse", "DEL Modifier: final", "DEL StringLiteral: \"Call of fromResponse() method is not expected\"", "DEL ClassInstanceCreation", "DEL SimpleType: UnsupportedOperationException", "DEL SimpleName: Override", "DEL SimpleName: r", "DEL MarkerAnnotation", "DEL ThrowStatement", "DEL Block", "DEL SimpleName: Exception"]}]}}, {"RestServiceExceptionMapper_diff": {"operations": ["Delete QualifiedName: org.apache.cxf.jaxrs.client.ResponseExceptionMapper(26)", "Delete ImportDeclaration(27)", "Delete SimpleName: ResponseExceptionMapper(49)", "Delete SimpleType: ResponseExceptionMapper(50)", "Delete SimpleName: Exception(51)", "Delete SimpleType: Exception(52)", "Delete ParameterizedType: ResponseExceptionMapper<Exception>(53)", "Delete SimpleName: Override(163)", "Delete MarkerAnnotation(164)", "Delete Modifier: public(165)", "Delete SimpleName: Exception(166)", "Delete SimpleType: Exception(167)", "Delete SimpleName: fromResponse(168)", "Delete Modifier: final(169)", "Delete SimpleName: Response(170)", "Delete SimpleType: Response(171)", "Delete SimpleName: r(172)", "Delete SingleVariableDeclaration(173)", "Delete SimpleName: UnsupportedOperationException(174)", "Delete SimpleType: UnsupportedOperationException(175)", "Delete StringLiteral: \"Call of fromResponse() method is not expected\"(176)", "Delete ClassInstanceCreation(177)", "Delete ThrowStatement(178)", "Delete Block(179)", "Delete MethodDeclaration(180)"]}}, {"TrustedIdpServiceImpl_cluster": {"actions": [{"root": "UPDATE from javax.ws.rs.ValidationException to javax.ws.rs.BadRequestException", "operations": ["UPD QualifiedName: javax.ws.rs.ValidationException from javax.ws.rs.ValidationException to javax.ws.rs.BadRequestException"]}, {"root": "UPDATE from ValidationException to BadRequestException", "operations": ["UPD SimpleName: ValidationException from ValidationException to BadRequestException", "UPD SimpleType: ValidationException from ValidationException to BadRequestException"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: javax.ws.rs.core.Response.Status"]}, {"root": "DEL QualifiedName: Status.BAD_REQUEST", "operations": ["DEL QualifiedName: Status.BAD_REQUEST"]}]}}, {"TrustedIdpServiceImpl_diff": {"operations": ["Update QualifiedName: javax.ws.rs.ValidationException(22) to javax.ws.rs.BadRequestException", "Update SimpleType: ValidationException(100) to BadRequestException", "Update SimpleName: ValidationException(99) to BadRequestException", "Delete QualifiedName: javax.ws.rs.core.Response.Status(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: Status.BAD_REQUEST(101)"]}}, {"IdentityMapperImpl_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.CustomTokenPrincipal to org.apache.wss4j.common.principal.CustomTokenPrincipal", "operations": ["UPD QualifiedName: org.apache.ws.security.CustomTokenPrincipal from org.apache.ws.security.CustomTokenPrincipal to org.apache.wss4j.common.principal.CustomTokenPrincipal"]}]}}, {"IdentityMapperImpl_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.CustomTokenPrincipal(26) to org.apache.wss4j.common.principal.CustomTokenPrincipal"]}}, {"SamlRealmCodec_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.saml.SAMLKeyInfo to org.apache.wss4j.common.saml.SAMLKeyInfo", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.SAMLKeyInfo from org.apache.ws.security.saml.SAMLKeyInfo to org.apache.wss4j.common.saml.SAMLKeyInfo"]}, {"root": "UPDATE from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.common.saml.SamlAssertionWrapper", "operations": ["UPD QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper from org.apache.ws.security.saml.ext.AssertionWrapper to org.apache.wss4j.common.saml.SamlAssertionWrapper"]}, {"root": "UPDATE from AssertionWrapper to SamlAssertionWrapper", "operations": ["UPD SimpleName: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper", "UPD SimpleType: AssertionWrapper from AssertionWrapper to SamlAssertionWrapper"]}]}}, {"SamlRealmCodec_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.saml.SAMLKeyInfo(24) to org.apache.wss4j.common.saml.SAMLKeyInfo", "Update QualifiedName: org.apache.ws.security.saml.ext.AssertionWrapper(26) to org.apache.wss4j.common.saml.SamlAssertionWrapper", "Update SimpleType: AssertionWrapper(57) to SamlAssertionWrapper", "Update SimpleName: AssertionWrapper(56) to SamlAssertionWrapper"]}}, {"DBLoaderImpl_cluster": {"actions": [{"root": "UPDATE from org.apache.ws.security.WSConstants to org.apache.wss4j.dom.WSConstants", "operations": ["UPD QualifiedName: org.apache.ws.security.WSConstants from org.apache.ws.security.WSConstants to org.apache.wss4j.dom.WSConstants"]}]}}, {"DBLoaderImpl_diff": {"operations": ["Update QualifiedName: org.apache.ws.security.WSConstants(30) to org.apache.wss4j.dom.WSConstants"]}}], "commit_stats": [{"total_files": 47, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "True"}]}