{"application": "apache-opennlp", "csha": "8f1c1454d7ea792cb7174bdd079de06e3dc1ed8f", "files": [{"ChunkerEventStream_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: java.util.ArrayList to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: java.util.Collections to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: java.util.Iterator to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: java.util.List to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: opennlp.tools.util.AbstractEventStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "INS ParameterizedType: AbstractEventStream<ChunkSample> to TypeDeclaration: class at 3", "operations": ["INS ParameterizedType: AbstractEventStream<ChunkSample> to TypeDeclaration: class at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 11", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: createEvents to MethodDeclaration at 3", "INS Modifier: protected to MethodDeclaration at 1", "INS SimpleName: Iterator to SimpleType: Iterator at 0", "INS SimpleType: Iterator to ParameterizedType: Iterator<Event> at 0", "INS ParameterizedType: Iterator<Event> to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 11", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: sample to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from ObjectStream to AbstractEventStream", "operations": ["UPD SimpleName: ObjectStream from ObjectStream to AbstractEventStream", "UPD SimpleType: ObjectStream from ObjectStream to AbstractEventStream"]}, {"root": "MOVE from ParameterizedType: AbstractEventStream<ChunkSample>", "operations": ["MOV SimpleType: ChunkSample to ParameterizedType: AbstractEventStream<ChunkSample> at 1", "MOV SimpleType: ObjectStream to ParameterizedType: AbstractEventStream<ChunkSample> at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "INS SuperConstructorInvocation to Block at 0", "operations": ["INS SimpleName: d to SuperConstructorInvocation at 0", "INS SuperConstructorInvocation to Block at 0"]}, {"root": "MOVE from ParameterizedType: Iterator<Event>", "operations": ["MOV SimpleType: Event to ParameterizedType: Iterator<Event> at 1"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: ChunkSample to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: List to SimpleType: List at 0", "INS ParameterizedType: List<Event> to VariableDeclarationStatement at 0", "INS SimpleType: ArrayList to ParameterizedType: ArrayList<Event> at 0", "INS SimpleName: ArrayList to SimpleType: ArrayList at 0", "INS SimpleType: List to ParameterizedType: List<Event> at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: events to VariableDeclarationFragment at 0", "INS ParameterizedType: ArrayList<Event> to ClassInstanceCreation at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "INS ReturnStatement to Block at 6", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: iterator to MethodInvocation at 1", "INS ReturnStatement to Block at 6", "INS SimpleName: events to MethodInvocation at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: Collections to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: emptyListIterator to MethodInvocation at 1"]}, {"root": "MOVE from ParameterizedType: List<Event>", "operations": ["MOV SimpleType: Event to ParameterizedType: List<Event> at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV FieldAccess to VariableDeclarationFragment at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: events to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ParameterizedType: ArrayList<Event>", "operations": ["MOV SimpleType: Event to ParameterizedType: ArrayList<Event> at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.AbstractEventStream", "operations": ["DEL SimpleType: opennlp.tools.ml.model.AbstractEventStream", "DEL QualifiedName: opennlp.tools.ml.model.AbstractEventStream"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL VariableDeclarationFragment", "DEL Modifier: private", "DEL ParameterizedType: ObjectStream<ChunkSample>", "DEL SimpleName: data", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: private", "DEL SimpleName: events", "DEL VariableDeclarationFragment", "DEL Dimension", "DEL ArrayType: Event[]", "DEL FieldDeclaration"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL PrimitiveType: int", "DEL VariableDeclarationFragment", "DEL SimpleName: ei", "DEL FieldDeclaration", "DEL Modifier: private"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: d", "DEL Assignment: =", "DEL SimpleName: data", "DEL ExpressionStatement"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: ei", "DEL NumberLiteral: 0", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: addNewEvents"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: sample", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL TryStatement", "operations": ["DEL SimpleName: IOException", "DEL Assignment: =", "DEL SimpleName: e", "DEL SimpleType: IOException", "DEL SimpleName: read", "DEL SimpleType: RuntimeException", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: data", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: sample", "DEL SimpleName: RuntimeException", "DEL SimpleName: e", "DEL MethodInvocation", "DEL TryStatement", "DEL CatchClause", "DEL ThrowStatement", "DEL ClassInstanceCreation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL Assignment: =", "DEL SimpleName: events", "DEL ExpressionStatement", "DEL ArrayCreation", "DEL Dimension", "DEL ArrayType: Event[]"]}, {"root": "DEL QualifiedName: events.length", "operations": ["DEL QualifiedName: events.length"]}, {"root": "DEL Assignment: =", "operations": ["DEL SimpleName: events", "DEL ArrayAccess", "DEL Assignment: =", "DEL SimpleName: ei"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ArrayType: Event[]", "DEL Dimension", "DEL SimpleType: Event", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: Event", "DEL ArrayCreation", "DEL NumberLiteral: 0", "DEL SimpleName: events"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL ExpressionStatement", "DEL PostfixExpression: ++", "DEL SimpleName: hasNext", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: events", "DEL ArrayAccess", "DEL SimpleName: next", "DEL SimpleName: ei", "DEL Modifier: public"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: addNewEvents", "DEL IfStatement", "DEL Block", "DEL QualifiedName: events.length", "DEL MethodInvocation", "DEL QualifiedName: events.length", "DEL Assignment: =", "DEL SimpleName: hasNext", "DEL InfixExpression: <", "DEL Block", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL Modifier: public", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL SimpleName: ei", "DEL PrimitiveType: boolean", "DEL SimpleName: ei", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleName: ei"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL SimpleName: addNewEvents", "DEL PrimitiveType: void", "DEL Modifier: private"]}]}}, {"ChunkerEventStream_diff": {"operations": ["Insert ImportDeclaration(5) into CompilationUnit(210) at 2", "Insert ImportDeclaration(7) into CompilationUnit(210) at 3", "Insert ImportDeclaration(9) into CompilationUnit(210) at 4", "Insert ImportDeclaration(11) into CompilationUnit(210) at 5", "Insert ImportDeclaration(15) into CompilationUnit(210) at 7", "Insert QualifiedName: java.util.ArrayList(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.util.Collections(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: java.util.Iterator(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: java.util.List(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: opennlp.tools.util.AbstractEventStream(14) into ImportDeclaration(15) at 0", "Insert ParameterizedType: AbstractEventStream<ChunkSample>(27) into TypeDeclaration: class(209) at 3", "Insert MethodDeclaration(208) into TypeDeclaration: class(209) at 7", "Update SimpleType: ObjectStream(23) to AbstractEventStream", "Move SimpleType: ObjectStream(23) into ParameterizedType: AbstractEventStream<ChunkSample>(27) at 0", "Move SimpleType: ChunkSample(25) into ParameterizedType: AbstractEventStream<ChunkSample>(27) at 1", "Insert MarkerAnnotation(101) into MethodDeclaration(208) at 0", "Insert Modifier: protected(102) into MethodDeclaration(208) at 1", "Insert ParameterizedType: Iterator<Event>(107) into MethodDeclaration(208) at 2", "Insert SimpleName: createEvents(108) into MethodDeclaration(208) at 3", "Insert SingleVariableDeclaration(112) into MethodDeclaration(208) at 4", "Move Block(271) into MethodDeclaration(208) at 5", "Update SimpleName: ObjectStream(22) to AbstractEventStream", "Insert SuperConstructorInvocation(57) into Block(64) at 0", "Insert SimpleName: Override(100) into MarkerAnnotation(101) at 0", "Insert SimpleType: Iterator(104) into ParameterizedType: Iterator<Event>(107) at 0", "Move SimpleType: Event(32) into ParameterizedType: Iterator<Event>(107) at 1", "Move SimpleType: ChunkSample(157) into SingleVariableDeclaration(112) at 0", "Insert SimpleName: sample(111) into SingleVariableDeclaration(112) at 1", "Insert SimpleName: d(56) into SuperConstructorInvocation(57) at 0", "Insert SimpleName: Iterator(103) into SimpleType: Iterator(104) at 0", "Insert VariableDeclarationStatement(129) into Block(200) at 0", "Insert ReturnStatement(199) into Block(200) at 5", "Insert ReturnStatement(204) into Block(205) at 0", "Insert ParameterizedType: List<Event>(120) into VariableDeclarationStatement(129) at 0", "Insert VariableDeclarationFragment(128) into VariableDeclarationStatement(129) at 1", "Insert MethodInvocation(198) into ReturnStatement(199) at 0", "Insert MethodInvocation(203) into ReturnStatement(204) at 0", "Insert SimpleType: List(117) into ParameterizedType: List<Event>(120) at 0", "Move SimpleType: Event(120) into ParameterizedType: List<Event>(120) at 1", "Insert SimpleName: events(121) into VariableDeclarationFragment(128) at 0", "Insert ClassInstanceCreation(127) into VariableDeclarationFragment(128) at 1", "Insert SimpleName: events(196) into MethodInvocation(198) at 0", "Insert SimpleName: iterator(197) into MethodInvocation(198) at 1", "Insert SimpleName: Collections(201) into MethodInvocation(203) at 0", "Insert SimpleName: emptyListIterator(202) into MethodInvocation(203) at 1", "Insert SimpleName: List(116) into SimpleType: List(117) at 0", "Insert ParameterizedType: ArrayList<Event>(126) into ClassInstanceCreation(127) at 0", "Move FieldAccess(192) into VariableDeclarationFragment(170) at 1", "Insert MethodInvocation(192) into ExpressionStatement(193) at 0", "Insert SimpleType: ArrayList(123) into ParameterizedType: ArrayList<Event>(126) at 0", "Move SimpleType: Event(185) into ParameterizedType: ArrayList<Event>(126) at 1", "Insert SimpleName: events(177) into MethodInvocation(192) at 0", "Insert SimpleName: add(178) into MethodInvocation(192) at 1", "Move ClassInstanceCreation(254) into MethodInvocation(192) at 2", "Insert SimpleName: ArrayList(122) into SimpleType: ArrayList(123) at 0", "Delete QualifiedName: opennlp.tools.ml.model.AbstractEventStream(13)", "Delete SimpleType: opennlp.tools.ml.model.AbstractEventStream(14)", "Delete Modifier: private(21)", "Delete ParameterizedType: ObjectStream<ChunkSample>(26)", "Delete SimpleName: data(27)", "Delete VariableDeclarationFragment(28)", "Delete FieldDeclaration(29)", "Delete Modifier: private(30)", "Delete Dimension(33)", "Delete ArrayType: Event[](34)", "Delete SimpleName: events(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete Modifier: private(38)", "Delete PrimitiveType: int(39)", "Delete SimpleName: ei(40)", "Delete VariableDeclarationFragment(41)", "Delete FieldDeclaration(42)", "Delete SimpleName: data(71)", "Delete SimpleName: d(72)", "Delete Assignment: =(73)", "Delete ExpressionStatement(74)", "Delete SimpleName: ei(75)", "Delete NumberLiteral: 0(76)", "Delete Assignment: =(77)", "Delete ExpressionStatement(78)", "Delete SimpleName: addNewEvents(79)", "Delete MethodInvocation(80)", "Delete ExpressionStatement(81)", "Delete SimpleName: sample(158)", "Delete VariableDeclarationFragment(159)", "Delete VariableDeclarationStatement(160)", "Delete SimpleName: sample(161)", "Delete SimpleName: data(162)", "Delete SimpleName: read(163)", "Delete MethodInvocation(164)", "Delete Assignment: =(165)", "Delete ExpressionStatement(166)", "Delete Block(167)", "Delete SimpleName: IOException(168)", "Delete SimpleType: IOException(169)", "Delete SimpleName: e(170)", "Delete SingleVariableDeclaration(171)", "Delete SimpleName: RuntimeException(172)", "Delete SimpleType: RuntimeException(173)", "Delete SimpleName: e(174)", "Delete ClassInstanceCreation(175)", "Delete ThrowStatement(176)", "Delete Block(177)", "Delete CatchClause(178)", "Delete TryStatement(179)", "Delete SimpleName: events(183)", "Delete Dimension(186)", "Delete ArrayType: Event[](187)", "Delete ArrayCreation(193)", "Delete Assignment: =(194)", "Delete ExpressionStatement(195)", "Delete QualifiedName: events.length(231)", "Delete SimpleName: events(239)", "Delete SimpleName: ei(240)", "Delete ArrayAccess(241)", "Delete Assignment: =(255)", "Delete SimpleName: events(260)", "Delete SimpleName: Event(261)", "Delete SimpleType: Event(262)", "Delete Dimension(263)", "Delete ArrayType: Event[](264)", "Delete NumberLiteral: 0(265)", "Delete ArrayCreation(266)", "Delete Assignment: =(267)", "Delete ExpressionStatement(268)", "Delete Modifier: public(118)", "Delete SimpleName: next(121)", "Delete SimpleName: hasNext(122)", "Delete MethodInvocation(123)", "Delete ExpressionStatement(124)", "Delete SimpleName: events(125)", "Delete SimpleName: ei(126)", "Delete PostfixExpression: ++(127)", "Delete ArrayAccess(128)", "Delete ReturnStatement(129)", "Delete Block(130)", "Delete MethodDeclaration(131)", "Delete Modifier: public(132)", "Delete PrimitiveType: boolean(133)", "Delete SimpleName: hasNext(134)", "Delete SimpleName: ei(135)", "Delete QualifiedName: events.length(136)", "Delete InfixExpression: ==(137)", "Delete SimpleName: addNewEvents(138)", "Delete MethodInvocation(139)", "Delete ExpressionStatement(140)", "Delete SimpleName: ei(141)", "Delete NumberLiteral: 0(142)", "Delete Assignment: =(143)", "Delete ExpressionStatement(144)", "Delete Block(145)", "Delete IfStatement(146)", "Delete SimpleName: ei(147)", "Delete QualifiedName: events.length(148)", "Delete InfixExpression: <(149)", "Delete ReturnStatement(150)", "Delete Block(151)", "Delete MethodDeclaration(152)", "Delete Modifier: private(153)", "Delete PrimitiveType: void(154)", "Delete SimpleName: addNewEvents(155)", "Delete MethodDeclaration(272)"]}}, {"ChunkerME_cluster": {"actions": [{"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"ChunkerME_diff": {"operations": ["Update QualifiedName: opennlp.tools.ml.model.EventStream(10) to opennlp.tools.ml.model.Event", "Insert ParameterizedType: ObjectStream<Event>(668) into VariableDeclarationStatement(678) at 0", "Insert ParameterizedType: ObjectStream<Event>(772) into VariableDeclarationStatement(780) at 0", "Insert SimpleType: ObjectStream(665) into ParameterizedType: ObjectStream<Event>(668) at 0", "Insert SimpleType: Event(667) into ParameterizedType: ObjectStream<Event>(668) at 1", "Insert SimpleType: ObjectStream(769) into ParameterizedType: ObjectStream<Event>(772) at 0", "Insert SimpleType: Event(771) into ParameterizedType: ObjectStream<Event>(772) at 1", "Update SimpleName: EventStream(664) to ObjectStream", "Move SimpleName: EventStream(664) into SimpleType: ObjectStream(665) at 0", "Insert SimpleName: Event(666) into SimpleType: Event(667) at 0", "Update SimpleName: EventStream(765) to ObjectStream", "Move SimpleName: EventStream(765) into SimpleType: ObjectStream(769) at 0", "Insert SimpleName: Event(770) into SimpleType: Event(771) at 0", "Delete SimpleType: EventStream(665)", "Delete SimpleType: EventStream(766)"]}}, {"AbstractEventTrainer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 9", "operations": ["INS ImportDeclaration to CompilationUnit at 9", "INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0"]}, {"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"AbstractEventTrainer_diff": {"operations": ["Insert ImportDeclaration(19) into CompilationUnit(292) at 9", "Update QualifiedName: opennlp.tools.ml.model.EventStream(8) to opennlp.tools.ml.model.Event", "Insert QualifiedName: opennlp.tools.util.ObjectStream(18) into ImportDeclaration(19) at 0", "Insert ParameterizedType: ObjectStream<Event>(137) into SingleVariableDeclaration(139) at 0", "Insert ParameterizedType: ObjectStream<Event>(232) into SingleVariableDeclaration(234) at 0", "Insert SimpleType: ObjectStream(134) into ParameterizedType: ObjectStream<Event>(137) at 0", "Insert SimpleType: Event(136) into ParameterizedType: ObjectStream<Event>(137) at 1", "Insert SimpleType: ObjectStream(229) into ParameterizedType: ObjectStream<Event>(232) at 0", "Insert SimpleType: Event(231) into ParameterizedType: ObjectStream<Event>(232) at 1", "Update SimpleName: EventStream(131) to ObjectStream", "Move SimpleName: EventStream(131) into SimpleType: ObjectStream(134) at 0", "Insert SimpleName: Event(135) into SimpleType: Event(136) at 0", "Update SimpleName: EventStream(223) to ObjectStream", "Move SimpleName: EventStream(223) into SimpleType: ObjectStream(229) at 0", "Insert SimpleName: Event(230) into SimpleType: Event(231) at 0", "Delete SimpleType: EventStream(132)", "Delete SimpleType: EventStream(224)"]}}, {"EventTrainer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"EventTrainer_diff": {"operations": ["Insert ImportDeclaration(9) into CompilationUnit(36) at 4", "Update QualifiedName: opennlp.tools.ml.model.EventStream(4) to opennlp.tools.ml.model.Event", "Insert QualifiedName: opennlp.tools.util.ObjectStream(8) into ImportDeclaration(9) at 0", "Insert ParameterizedType: ObjectStream<Event>(29) into SingleVariableDeclaration(31) at 0", "Insert SimpleType: ObjectStream(26) into ParameterizedType: ObjectStream<Event>(29) at 0", "Insert SimpleType: Event(28) into ParameterizedType: ObjectStream<Event>(29) at 1", "Update SimpleName: EventStream(23) to ObjectStream", "Move SimpleName: EventStream(23) into SimpleType: ObjectStream(26) at 0", "Insert SimpleName: Event(27) into SimpleType: Event(28) at 0", "Delete SimpleType: EventStream(24)"]}}, {"NameFinderME_cluster": {"actions": [{"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"NameFinderME_diff": {"operations": ["Update QualifiedName: opennlp.tools.ml.model.EventStream(32) to opennlp.tools.ml.model.Event", "Insert ParameterizedType: ObjectStream<Event>(1064) into VariableDeclarationStatement(1076) at 0", "Insert SimpleType: ObjectStream(1061) into ParameterizedType: ObjectStream<Event>(1064) at 0", "Insert SimpleType: Event(1063) into ParameterizedType: ObjectStream<Event>(1064) at 1", "Update SimpleName: EventStream(1060) to ObjectStream", "Move SimpleName: EventStream(1060) into SimpleType: ObjectStream(1061) at 0", "Insert SimpleName: Event(1062) into SimpleType: Event(1063) at 0", "Delete SimpleType: EventStream(1061)"]}}, {"NameSampleSequenceStream_cluster": {"actions": [{"root": "INS TypeDeclaration: class to CompilationUnit at 12", "operations": ["INS SimpleName: close to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS TypeDeclaration: class to CompilationUnit at 12", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: Override to MarkerAnnotation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV FieldDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 10", "MOV SimpleName: NameSampleSequenceStream to TypeDeclaration: class at 1", "MOV MethodDeclaration to TypeDeclaration: class at 8", "MOV MethodDeclaration to TypeDeclaration: class at 13", "MOV MethodDeclaration to TypeDeclaration: class at 11", "MOV MethodDeclaration to TypeDeclaration: class at 6", "MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV FieldDeclaration to TypeDeclaration: class at 3", "MOV SimpleType: SequenceStream to TypeDeclaration: class at 2", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV Modifier: public to TypeDeclaration: class at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 12"]}, {"root": "UPDATE from List<NameSample> to ObjectStream<NameSample>", "operations": ["UPD ParameterizedType: List<NameSample> from List<NameSample> to ObjectStream<NameSample>"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Sequence to MethodDeclaration at 2"]}, {"root": "INS SimpleName: read to MethodDeclaration at 3", "operations": ["INS SimpleName: read to MethodDeclaration at 3"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 4", "operations": ["INS SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to IfStatement at 2", "INS ReturnStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: sample to InfixExpression: != at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: sample to VariableDeclarationFragment at 0", "INS InfixExpression: != to IfStatement at 0", "INS NullLiteral to ReturnStatement at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 3", "operations": ["INS PrimitiveType: void to MethodDeclaration at 3"]}, {"root": "INS SimpleName: reset to MethodDeclaration at 4", "operations": ["INS SimpleName: reset to MethodDeclaration at 4"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 5", "operations": ["INS SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: UnsupportedOperationException to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from List to ObjectStream", "operations": ["UPD SimpleName: List from List to ObjectStream", "UPD SimpleType: List from List to ObjectStream"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "UPDATE from DefaultNameContextGenerator to IOException", "operations": ["UPD SimpleName: DefaultNameContextGenerator from DefaultNameContextGenerator to IOException", "UPD SimpleName: Sequence from Sequence to IOException", "UPD SimpleName: Iterator from Iterator to IOException"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: Sequence to SimpleType: IOException at 0"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: Iterator to SimpleType: IOException at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: DefaultNameContextGenerator to SimpleType: IOException at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: NameSample to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from samples to psi", "operations": ["UPD SimpleName: samples from samples to psi"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: samples to MethodInvocation at 0", "MOV SimpleName: iterator to MethodInvocation at 1"]}, {"root": "UPDATE from iterator to reset", "operations": ["UPD SimpleName: iterator from iterator to reset"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: hasNext to MethodInvocation at 1", "MOV SimpleName: psi to MethodInvocation at 0"]}, {"root": "UPDATE from hasNext to close", "operations": ["UPD SimpleName: hasNext from hasNext to close"]}, {"root": "UPDATE from cg to pcg", "operations": ["UPD SimpleName: cg from cg to pcg", "UPD SimpleName: cg from cg to pcg"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: samples"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: samples", "DEL SimpleType: ArrayList", "DEL InfixExpression: +", "DEL StringLiteral: \"Got \"", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleType: NameSample", "DEL SimpleName: sample", "DEL WhileStatement", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL SimpleName: add", "DEL ExpressionStatement", "DEL QualifiedName: System.err", "DEL InfixExpression: !=", "DEL ClassInstanceCreation", "DEL Block", "DEL SimpleName: size", "DEL SimpleName: useOutcomes", "DEL Assignment: =", "DEL SimpleName: useOutcomes", "DEL SimpleName: samples", "DEL SimpleName: samples", "DEL Block", "DEL ThisExpression", "DEL StringLiteral: \" sequences\"", "DEL ExpressionStatement", "DEL SimpleName: sample", "DEL FieldAccess", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL MethodInvocation", "DEL Assignment: =", "DEL ParenthesizedExpression", "DEL ParameterizedType: ArrayList<NameSample>", "DEL SimpleName: sample", "DEL SimpleName: println", "DEL ExpressionStatement", "DEL SimpleName: NameSample", "DEL ExpressionStatement", "DEL VariableDeclarationFragment"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: sample", "DEL SimpleName: psi", "DEL SimpleName: NameSample", "DEL MethodInvocation", "DEL SimpleType: NameSample", "DEL VariableDeclarationStatement", "DEL SimpleName: next"]}, {"root": "DEL ParameterizedType: Sequence<NameSample>", "operations": ["DEL SimpleType: NameSample", "DEL SimpleType: Sequence", "DEL ParameterizedType: Sequence<NameSample>", "DEL SimpleName: NameSample"]}, {"root": "DEL SimpleName: next", "operations": ["DEL SimpleName: next"]}, {"root": "DEL SingleMemberAnnotation", "operations": ["DEL SimpleName: SuppressWarnings", "DEL StringLiteral: \"unchecked\"", "DEL SingleMemberAnnotation"]}, {"root": "DEL ParameterizedType: Iterator<Sequence>", "operations": ["DEL ParameterizedType: Iterator<Sequence>", "DEL SimpleType: Iterator"]}, {"root": "DEL SimpleName: iterator", "operations": ["DEL SimpleName: iterator"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleName: useOutcomes", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL SimpleName: NameSampleSequenceIterator", "DEL SimpleType: NameSampleSequenceIterator", "DEL MethodInvocation"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TypeDeclaration: class"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: Iterator", "DEL SimpleName: cg", "DEL FieldDeclaration", "DEL Modifier: private", "DEL SimpleName: psi", "DEL SimpleName: NameContextGenerator", "DEL ParameterizedType: Iterator<Sequence>", "DEL Modifier: private", "DEL Modifier: public", "DEL FieldDeclaration", "DEL ThrowStatement", "DEL Assignment: =", "DEL PrimitiveType: boolean", "DEL SimpleName: Sequence", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleName: NameSampleSequenceIterator", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: NameSample", "DEL SimpleType: Iterator", "DEL SimpleName: Iterator", "DEL Block", "DEL SimpleType: Sequence", "DEL SimpleType: NameSample", "DEL SimpleType: DefaultNameContextGenerator", "DEL VariableDeclarationFragment", "DEL SimpleName: useOutcomes", "DEL ParameterizedType: Iterator<NameSample>", "DEL ParameterizedType: Iterator<NameSample>", "DEL TypeDeclaration: class", "DEL PrimitiveType: boolean", "DEL SimpleType: Iterator", "DEL SimpleType: NameContextGenerator", "DEL PrimitiveType: boolean", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL SimpleName: Iterator", "DEL Block", "DEL SimpleName: cg", "DEL SimpleName: NameSample", "DEL ExpressionStatement", "DEL SimpleName: useOutcomes", "DEL MethodDeclaration", "DEL SimpleName: hasNext", "DEL SimpleName: NameSampleSequenceIterator", "DEL NullLiteral", "DEL FieldDeclaration", "DEL SimpleName: remove", "DEL SimpleName: Iterator", "DEL MethodDeclaration", "DEL SimpleName: NameSample", "DEL PrimitiveType: void"]}]}}, {"NameSampleSequenceStream_diff": {"operations": ["Insert TypeDeclaration: class(445) into CompilationUnit(446) at 11", "Move Modifier: public(24) into TypeDeclaration: class(445) at 0", "Move SimpleName: NameSampleSequenceStream(25) into TypeDeclaration: class(445) at 1", "Move SimpleType: SequenceStream(27) into TypeDeclaration: class(445) at 2", "Move FieldDeclaration(33) into TypeDeclaration: class(445) at 3", "Move FieldDeclaration(48) into TypeDeclaration: class(445) at 4", "Move FieldDeclaration(42) into TypeDeclaration: class(445) at 5", "Move MethodDeclaration(71) into TypeDeclaration: class(445) at 6", "Move MethodDeclaration(95) into TypeDeclaration: class(445) at 7", "Move MethodDeclaration(122) into TypeDeclaration: class(445) at 8", "Move MethodDeclaration(143) into TypeDeclaration: class(445) at 9", "Move MethodDeclaration(214) into TypeDeclaration: class(445) at 10", "Move MethodDeclaration(316) into TypeDeclaration: class(445) at 11", "Move MethodDeclaration(531) into TypeDeclaration: class(445) at 12", "Move MethodDeclaration(336) into TypeDeclaration: class(445) at 13", "Insert MethodDeclaration(444) into TypeDeclaration: class(445) at 14", "Update ParameterizedType: List<NameSample>(39) to ObjectStream<NameSample>", "Move VariableDeclarationFragment(351) into FieldDeclaration(46) at 2", "Insert Block(178) into MethodDeclaration(179) at 6", "Insert MarkerAnnotation(283) into MethodDeclaration(416) at 0", "Move SimpleType: Sequence(324) into MethodDeclaration(416) at 2", "Insert SimpleName: read(287) into MethodDeclaration(416) at 3", "Insert SimpleType: IOException(289) into MethodDeclaration(416) at 4", "Insert Block(415) into MethodDeclaration(416) at 5", "Insert MarkerAnnotation(418) into MethodDeclaration(431) at 0", "Insert PrimitiveType: void(420) into MethodDeclaration(431) at 2", "Insert SimpleName: reset(421) into MethodDeclaration(431) at 3", "Insert SimpleType: IOException(423) into MethodDeclaration(431) at 4", "Move SimpleType: UnsupportedOperationException(536) into MethodDeclaration(431) at 6", "Insert MarkerAnnotation(433) into MethodDeclaration(444) at 0", "Move Modifier: public(364) into MethodDeclaration(444) at 1", "Insert PrimitiveType: void(435) into MethodDeclaration(444) at 2", "Insert SimpleName: close(436) into MethodDeclaration(444) at 3", "Insert SimpleType: IOException(438) into MethodDeclaration(444) at 4", "Move Block(404) into MethodDeclaration(444) at 5", "Update SimpleType: List(36) to ObjectStream", "Move ExpressionStatement(381) into Block(178) at 0", "Move ExpressionStatement(387) into Block(178) at 1", "Move ExpressionStatement(212) into Block(178) at 2", "Insert SimpleName: Override(282) into MarkerAnnotation(283) at 0", "Update SimpleName: Sequence(407) to IOException", "Move SimpleName: Sequence(407) into SimpleType: IOException(289) at 0", "Insert VariableDeclarationStatement(297) into Block(415) at 0", "Insert IfStatement(414) into Block(415) at 1", "Insert SimpleName: Override(417) into MarkerAnnotation(418) at 0", "Update SimpleName: Iterator(321) to IOException", "Move SimpleName: Iterator(321) into SimpleType: IOException(423) at 0", "Insert ExpressionStatement(429) into Block(430) at 0", "Insert SimpleName: Override(432) into MarkerAnnotation(433) at 0", "Update SimpleName: DefaultNameContextGenerator(389) to IOException", "Move SimpleName: DefaultNameContextGenerator(389) into SimpleType: IOException(438) at 0", "Insert ExpressionStatement(442) into Block(443) at 0", "Update SimpleName: List(35) to ObjectStream", "Move SimpleType: NameSample(178) into VariableDeclarationStatement(297) at 0", "Insert VariableDeclarationFragment(296) into VariableDeclarationStatement(297) at 1", "Insert InfixExpression: !=(300) into IfStatement(414) at 0", "Move Block(530) into IfStatement(414) at 1", "Insert Block(413) into IfStatement(414) at 2", "Insert MethodInvocation(428) into ExpressionStatement(429) at 0", "Insert MethodInvocation(441) into ExpressionStatement(442) at 0", "Insert SimpleName: sample(292) into VariableDeclarationFragment(296) at 0", "Move MethodInvocation(185) into VariableDeclarationFragment(296) at 1", "Insert SimpleName: sample(298) into InfixExpression: !=(300) at 0", "Insert NullLiteral(299) into InfixExpression: !=(300) at 1", "Insert ReturnStatement(412) into Block(413) at 0", "Update SimpleName: samples(329) to psi", "Move SimpleName: samples(329) into MethodInvocation(428) at 0", "Update SimpleName: iterator(330) to reset", "Move SimpleName: iterator(330) into MethodInvocation(428) at 1", "Move SimpleName: psi(400) into MethodInvocation(441) at 0", "Update SimpleName: hasNext(401) to close", "Move SimpleName: hasNext(401) into MethodInvocation(441) at 1", "Insert NullLiteral(411) into ReturnStatement(412) at 0", "Update SimpleName: cg(476) to pcg", "Update SimpleName: cg(487) to pcg", "Delete QualifiedName: java.util.Iterator(8)", "Delete ImportDeclaration(9)", "Delete SimpleName: samples(40)", "Delete VariableDeclarationFragment(41)", "Delete ThisExpression(162)", "Delete SimpleName: useOutcomes(163)", "Delete FieldAccess(164)", "Delete SimpleName: useOutcomes(165)", "Delete Assignment: =(166)", "Delete ExpressionStatement(167)", "Delete SimpleName: samples(168)", "Delete SimpleName: ArrayList(169)", "Delete SimpleType: ArrayList(170)", "Delete SimpleName: NameSample(171)", "Delete SimpleType: NameSample(172)", "Delete ParameterizedType: ArrayList<NameSample>(173)", "Delete ClassInstanceCreation(174)", "Delete Assignment: =(175)", "Delete ExpressionStatement(176)", "Delete SimpleName: sample(179)", "Delete VariableDeclarationFragment(180)", "Delete VariableDeclarationStatement(181)", "Delete SimpleName: sample(182)", "Delete Assignment: =(186)", "Delete ParenthesizedExpression(187)", "Delete NullLiteral(188)", "Delete InfixExpression: !=(189)", "Delete SimpleName: samples(190)", "Delete SimpleName: add(191)", "Delete SimpleName: sample(192)", "Delete MethodInvocation(193)", "Delete ExpressionStatement(194)", "Delete Block(195)", "Delete WhileStatement(196)", "Delete QualifiedName: System.err(197)", "Delete SimpleName: println(198)", "Delete StringLiteral: \"Got \"(199)", "Delete SimpleName: samples(200)", "Delete SimpleName: size(201)", "Delete MethodInvocation(202)", "Delete StringLiteral: \" sequences\"(203)", "Delete InfixExpression: +(204)", "Delete MethodInvocation(205)", "Delete ExpressionStatement(206)", "Delete Block(213)", "Delete SimpleName: NameSample(413)", "Delete SimpleType: NameSample(414)", "Delete SimpleName: sample(415)", "Delete SimpleName: psi(416)", "Delete SimpleName: next(417)", "Delete MethodInvocation(418)", "Delete VariableDeclarationFragment(419)", "Delete VariableDeclarationStatement(420)", "Delete SimpleType: Sequence(408)", "Delete SimpleName: NameSample(409)", "Delete SimpleType: NameSample(410)", "Delete ParameterizedType: Sequence<NameSample>(411)", "Delete SimpleName: next(412)", "Delete SimpleName: SuppressWarnings(317)", "Delete StringLiteral: \"unchecked\"(318)", "Delete SingleMemberAnnotation(319)", "Delete SimpleType: Iterator(322)", "Delete ParameterizedType: Iterator<Sequence>(325)", "Delete SimpleName: iterator(326)", "Delete SimpleName: NameSampleSequenceIterator(327)", "Delete SimpleType: NameSampleSequenceIterator(328)", "Delete MethodInvocation(331)", "Delete SimpleName: useOutcomes(332)", "Delete ClassInstanceCreation(333)", "Delete ReturnStatement(334)", "Delete MethodInvocation(402)", "Delete ReturnStatement(403)", "Delete TypeDeclaration: class(337)", "Delete SimpleName: NameSampleSequenceIterator(338)", "Delete SimpleName: Iterator(339)", "Delete SimpleType: Iterator(340)", "Delete SimpleName: Sequence(341)", "Delete SimpleType: Sequence(342)", "Delete ParameterizedType: Iterator<Sequence>(343)", "Delete Modifier: private(344)", "Delete SimpleName: Iterator(345)", "Delete SimpleType: Iterator(346)", "Delete SimpleName: NameSample(347)", "Delete SimpleType: NameSample(348)", "Delete ParameterizedType: Iterator<NameSample>(349)", "Delete FieldDeclaration(352)", "Delete Modifier: private(353)", "Delete SimpleName: NameContextGenerator(354)", "Delete SimpleType: NameContextGenerator(355)", "Delete SimpleName: cg(356)", "Delete VariableDeclarationFragment(357)", "Delete FieldDeclaration(358)", "Delete Modifier: private(359)", "Delete PrimitiveType: boolean(360)", "Delete SimpleName: useOutcomes(361)", "Delete VariableDeclarationFragment(362)", "Delete FieldDeclaration(363)", "Delete SimpleName: NameSampleSequenceIterator(365)", "Delete SimpleName: Iterator(366)", "Delete SimpleType: Iterator(367)", "Delete SimpleName: NameSample(368)", "Delete SimpleType: NameSample(369)", "Delete ParameterizedType: Iterator<NameSample>(370)", "Delete SimpleName: psi(371)", "Delete SingleVariableDeclaration(372)", "Delete PrimitiveType: boolean(373)", "Delete SimpleName: useOutcomes(374)", "Delete SingleVariableDeclaration(375)", "Delete SimpleName: cg(388)", "Delete SimpleType: DefaultNameContextGenerator(390)", "Delete NullLiteral(391)", "Delete ClassInstanceCreation(392)", "Delete Assignment: =(393)", "Delete ExpressionStatement(394)", "Delete Block(395)", "Delete MethodDeclaration(396)", "Delete Modifier: public(397)", "Delete PrimitiveType: boolean(398)", "Delete SimpleName: hasNext(399)", "Delete MethodDeclaration(405)", "Delete Modifier: public(532)", "Delete PrimitiveType: void(533)", "Delete SimpleName: remove(534)", "Delete ClassInstanceCreation(537)", "Delete ThrowStatement(538)", "Delete Block(539)", "Delete MethodDeclaration(540)", "Delete TypeDeclaration: class(541)"]}}, {"POSSampleSequenceStream_cluster": {"actions": [{"root": "INS TypeDeclaration: class to CompilationUnit at 10", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 10", "INS TypeDeclaration: class to CompilationUnit at 10", "INS SimpleName: close to MethodDeclaration at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV FieldDeclaration to TypeDeclaration: class at 4", "MOV MethodDeclaration to TypeDeclaration: class at 9", "MOV MethodDeclaration to TypeDeclaration: class at 5", "MOV MethodDeclaration to TypeDeclaration: class at 6", "MOV SimpleType: SequenceStream to TypeDeclaration: class at 2", "MOV FieldDeclaration to TypeDeclaration: class at 3", "MOV Modifier: public to TypeDeclaration: class at 0", "MOV MethodDeclaration to TypeDeclaration: class at 7", "MOV SimpleName: POSSampleSequenceStream to TypeDeclaration: class at 1"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 8"]}, {"root": "UPDATE from List<POSSample> to ObjectStream<POSSample>", "operations": ["UPD ParameterizedType: List<POSSample> from List<POSSample> to ObjectStream<POSSample>"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV VariableDeclarationFragment to FieldDeclaration at 2"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to MethodDeclaration at 5"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Sequence to MethodDeclaration at 2"]}, {"root": "INS SimpleName: read to MethodDeclaration at 3", "operations": ["INS SimpleName: read to MethodDeclaration at 3"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 4", "operations": ["INS SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS InfixExpression: != to IfStatement at 0", "INS SimpleName: sample to InfixExpression: != at 0", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 1", "INS NullLiteral to InfixExpression: != at 1", "INS VariableDeclarationStatement to Block at 0", "INS NullLiteral to ReturnStatement at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: sample to VariableDeclarationFragment at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 3", "operations": ["INS PrimitiveType: void to MethodDeclaration at 3"]}, {"root": "INS SimpleName: reset to MethodDeclaration at 4", "operations": ["INS SimpleName: reset to MethodDeclaration at 4"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 5", "operations": ["INS SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: UnsupportedOperationException to MethodDeclaration at 6"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "UPDATE from List to ObjectStream", "operations": ["UPD SimpleType: List from List to ObjectStream", "UPD SimpleName: List from List to ObjectStream"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from DefaultPOSContextGenerator to IOException", "operations": ["UPD SimpleName: DefaultPOSContextGenerator from DefaultPOSContextGenerator to IOException", "UPD SimpleName: Iterator from Iterator to IOException", "UPD SimpleName: Sequence from Sequence to IOException"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: Sequence to SimpleType: IOException at 0"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: Iterator to SimpleType: IOException at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: DefaultPOSContextGenerator to SimpleType: IOException at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: POSSample to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from samples to psi", "operations": ["UPD SimpleName: samples from samples to psi"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: samples to MethodInvocation at 0", "MOV SimpleName: iterator to MethodInvocation at 1"]}, {"root": "UPDATE from iterator to reset", "operations": ["UPD SimpleName: iterator from iterator to reset"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: hasNext to MethodInvocation at 1", "MOV SimpleName: psi to MethodInvocation at 0"]}, {"root": "UPDATE from hasNext to close", "operations": ["UPD SimpleName: hasNext from hasNext to close"]}, {"root": "UPDATE from cg to pcg", "operations": ["UPD SimpleName: cg from cg to pcg"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.ArrayList"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Iterator"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.List"]}, {"root": "DEL VariableDeclarationFragment", "operations": ["DEL SimpleName: samples", "DEL VariableDeclarationFragment"]}, {"root": "DEL Block", "operations": ["DEL MethodInvocation", "DEL SimpleName: add", "DEL SimpleName: samples", "DEL SimpleType: ArrayList", "DEL SimpleName: POSSample", "DEL Block", "DEL SimpleName: POSSample", "DEL WhileStatement", "DEL SimpleName: sample", "DEL SimpleType: POSSample", "DEL MethodInvocation", "DEL SimpleName: samples", "DEL SimpleName: ArrayList", "DEL InfixExpression: +", "DEL StringLiteral: \" sequences\"", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleType: POSSample", "DEL VariableDeclarationStatement", "DEL ParenthesizedExpression", "DEL InfixExpression: !=", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL ParameterizedType: ArrayList<POSSample>", "DEL SimpleName: sample", "DEL MethodInvocation", "DEL SimpleName: size", "DEL StringLiteral: \"Got \"", "DEL Block", "DEL QualifiedName: System.err", "DEL SimpleName: samples", "DEL ExpressionStatement", "DEL SimpleName: sample", "DEL ExpressionStatement", "DEL NullLiteral", "DEL SimpleName: println", "DEL Assignment: ="]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: next", "DEL VariableDeclarationFragment", "DEL SimpleName: psi", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: sample"]}, {"root": "DEL ParameterizedType: Sequence<POSSample>", "operations": ["DEL ParameterizedType: Sequence<POSSample>", "DEL SimpleType: POSSample", "DEL SimpleType: Sequence", "DEL SimpleName: POSSample"]}, {"root": "DEL SimpleName: next", "operations": ["DEL SimpleName: next"]}, {"root": "DEL SingleMemberAnnotation", "operations": ["DEL SimpleName: SuppressWarnings", "DEL StringLiteral: \"unchecked\"", "DEL SingleMemberAnnotation"]}, {"root": "DEL ParameterizedType: Iterator<Sequence>", "operations": ["DEL ParameterizedType: Iterator<Sequence>", "DEL SimpleType: Iterator"]}, {"root": "DEL SimpleName: iterator", "operations": ["DEL SimpleName: iterator"]}, {"root": "DEL ReturnStatement", "operations": ["DEL SimpleType: POSSampleSequenceIterator", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: POSSampleSequenceIterator"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL MethodInvocation"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TypeDeclaration: class"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL SimpleName: POSSampleSequenceIterator", "DEL SimpleName: cg", "DEL Block", "DEL SimpleName: POSSampleSequenceIterator", "DEL TypeDeclaration: class", "DEL Assignment: =", "DEL SimpleName: POSSample", "DEL MethodDeclaration", "DEL SimpleType: Iterator", "DEL SimpleName: hasNext", "DEL Block", "DEL SimpleType: Sequence", "DEL Modifier: private", "DEL ParameterizedType: Iterator<POSSample>", "DEL SimpleName: Iterator", "DEL ParameterizedType: Iterator<POSSample>", "DEL ClassInstanceCreation", "DEL SimpleType: Iterator", "DEL SimpleType: POSContextGenerator", "DEL ExpressionStatement", "DEL SimpleType: Iterator", "DEL VariableDeclarationFragment", "DEL SimpleName: remove", "DEL SimpleName: Sequence", "DEL FieldDeclaration", "DEL SimpleType: DefaultPOSContextGenerator", "DEL SimpleName: Iterator", "DEL SimpleName: POSSample", "DEL NullLiteral", "DEL Modifier: private", "DEL ParameterizedType: Iterator<Sequence>", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleType: POSSample", "DEL SimpleName: POSContextGenerator", "DEL SimpleName: psi", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: POSSample", "DEL SimpleName: Iterator", "DEL SimpleName: cg", "DEL Modifier: public", "DEL ThrowStatement", "DEL MethodDeclaration", "DEL PrimitiveType: void"]}]}}, {"POSSampleSequenceStream_diff": {"operations": ["Insert TypeDeclaration: class(331) into CompilationUnit(332) at 7", "Move Modifier: public(20) into TypeDeclaration: class(331) at 0", "Move SimpleName: POSSampleSequenceStream(21) into TypeDeclaration: class(331) at 1", "Move SimpleType: SequenceStream(23) into TypeDeclaration: class(331) at 2", "Move FieldDeclaration(29) into TypeDeclaration: class(331) at 3", "Move FieldDeclaration(38) into TypeDeclaration: class(331) at 4", "Move MethodDeclaration(57) into TypeDeclaration: class(331) at 5", "Move MethodDeclaration(119) into TypeDeclaration: class(331) at 6", "Move MethodDeclaration(229) into TypeDeclaration: class(331) at 7", "Move MethodDeclaration(407) into TypeDeclaration: class(331) at 8", "Move MethodDeclaration(248) into TypeDeclaration: class(331) at 9", "Insert MethodDeclaration(330) into TypeDeclaration: class(331) at 10", "Update ParameterizedType: List<POSSample>(35) to ObjectStream<POSSample>", "Move VariableDeclarationFragment(263) into FieldDeclaration(32) at 2", "Insert Block(79) into MethodDeclaration(80) at 5", "Insert MarkerAnnotation(192) into MethodDeclaration(302) at 0", "Move SimpleType: Sequence(237) into MethodDeclaration(302) at 2", "Insert SimpleName: read(196) into MethodDeclaration(302) at 3", "Insert SimpleType: IOException(198) into MethodDeclaration(302) at 4", "Insert Block(301) into MethodDeclaration(302) at 5", "Insert MarkerAnnotation(304) into MethodDeclaration(317) at 0", "Insert PrimitiveType: void(306) into MethodDeclaration(317) at 2", "Insert SimpleName: reset(307) into MethodDeclaration(317) at 3", "Insert SimpleType: IOException(309) into MethodDeclaration(317) at 4", "Move SimpleType: UnsupportedOperationException(412) into MethodDeclaration(317) at 6", "Insert MarkerAnnotation(319) into MethodDeclaration(330) at 0", "Move Modifier: public(271) into MethodDeclaration(330) at 1", "Insert PrimitiveType: void(321) into MethodDeclaration(330) at 2", "Insert SimpleName: close(322) into MethodDeclaration(330) at 3", "Insert SimpleType: IOException(324) into MethodDeclaration(330) at 4", "Move Block(302) into MethodDeclaration(330) at 5", "Update SimpleType: List(32) to ObjectStream", "Move ExpressionStatement(285) into Block(79) at 0", "Move ExpressionStatement(117) into Block(79) at 1", "Insert SimpleName: Override(191) into MarkerAnnotation(192) at 0", "Update SimpleName: Sequence(305) to IOException", "Move SimpleName: Sequence(305) into SimpleType: IOException(198) at 0", "Insert VariableDeclarationStatement(206) into Block(301) at 0", "Insert IfStatement(298) into Block(301) at 1", "Insert ReturnStatement(300) into Block(301) at 2", "Insert SimpleName: Override(303) into MarkerAnnotation(304) at 0", "Update SimpleName: Iterator(234) to IOException", "Move SimpleName: Iterator(234) into SimpleType: IOException(309) at 0", "Insert ExpressionStatement(315) into Block(316) at 0", "Insert SimpleName: Override(318) into MarkerAnnotation(319) at 0", "Update SimpleName: DefaultPOSContextGenerator(287) to IOException", "Move SimpleName: DefaultPOSContextGenerator(287) into SimpleType: IOException(324) at 0", "Insert ExpressionStatement(328) into Block(329) at 0", "Update SimpleName: List(31) to ObjectStream", "Move SimpleType: POSSample(312) into VariableDeclarationStatement(206) at 0", "Insert VariableDeclarationFragment(205) into VariableDeclarationStatement(206) at 1", "Insert InfixExpression: !=(209) into IfStatement(298) at 0", "Move Block(406) into IfStatement(298) at 1", "Insert NullLiteral(299) into ReturnStatement(300) at 0", "Insert MethodInvocation(314) into ExpressionStatement(315) at 0", "Insert MethodInvocation(327) into ExpressionStatement(328) at 0", "Insert SimpleName: sample(201) into VariableDeclarationFragment(205) at 0", "Move MethodInvocation(90) into VariableDeclarationFragment(205) at 1", "Insert SimpleName: sample(207) into InfixExpression: !=(209) at 0", "Insert NullLiteral(208) into InfixExpression: !=(209) at 1", "Update SimpleName: samples(242) to psi", "Move SimpleName: samples(242) into MethodInvocation(314) at 0", "Update SimpleName: iterator(243) to reset", "Move SimpleName: iterator(243) into MethodInvocation(314) at 1", "Move SimpleName: psi(298) into MethodInvocation(327) at 0", "Update SimpleName: hasNext(299) to close", "Move SimpleName: hasNext(299) into MethodInvocation(327) at 1", "Update SimpleName: cg(365) to pcg", "Delete QualifiedName: java.util.ArrayList(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: java.util.Iterator(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: java.util.List(8)", "Delete ImportDeclaration(9)", "Delete SimpleName: samples(36)", "Delete VariableDeclarationFragment(37)", "Delete SimpleName: samples(73)", "Delete SimpleName: ArrayList(74)", "Delete SimpleType: ArrayList(75)", "Delete SimpleName: POSSample(76)", "Delete SimpleType: POSSample(77)", "Delete ParameterizedType: ArrayList<POSSample>(78)", "Delete ClassInstanceCreation(79)", "Delete Assignment: =(80)", "Delete ExpressionStatement(81)", "Delete SimpleName: POSSample(82)", "Delete SimpleType: POSSample(83)", "Delete SimpleName: sample(84)", "Delete VariableDeclarationFragment(85)", "Delete VariableDeclarationStatement(86)", "Delete SimpleName: sample(87)", "Delete Assignment: =(91)", "Delete ParenthesizedExpression(92)", "Delete NullLiteral(93)", "Delete InfixExpression: !=(94)", "Delete SimpleName: samples(95)", "Delete SimpleName: add(96)", "Delete SimpleName: sample(97)", "Delete MethodInvocation(98)", "Delete ExpressionStatement(99)", "Delete Block(100)", "Delete WhileStatement(101)", "Delete QualifiedName: System.err(102)", "Delete SimpleName: println(103)", "Delete StringLiteral: \"Got \"(104)", "Delete SimpleName: samples(105)", "Delete SimpleName: size(106)", "Delete MethodInvocation(107)", "Delete StringLiteral: \" sequences\"(108)", "Delete InfixExpression: +(109)", "Delete MethodInvocation(110)", "Delete ExpressionStatement(111)", "Delete Block(118)", "Delete SimpleName: sample(313)", "Delete SimpleName: psi(314)", "Delete SimpleName: next(315)", "Delete MethodInvocation(316)", "Delete VariableDeclarationFragment(317)", "Delete VariableDeclarationStatement(318)", "Delete SimpleType: Sequence(306)", "Delete SimpleName: POSSample(307)", "Delete SimpleType: POSSample(308)", "Delete ParameterizedType: Sequence<POSSample>(309)", "Delete SimpleName: next(310)", "Delete SimpleName: SuppressWarnings(230)", "Delete StringLiteral: \"unchecked\"(231)", "Delete SingleMemberAnnotation(232)", "Delete SimpleType: Iterator(235)", "Delete ParameterizedType: Iterator<Sequence>(238)", "Delete SimpleName: iterator(239)", "Delete SimpleName: POSSampleSequenceIterator(240)", "Delete SimpleType: POSSampleSequenceIterator(241)", "Delete MethodInvocation(244)", "Delete ClassInstanceCreation(245)", "Delete ReturnStatement(246)", "Delete MethodInvocation(300)", "Delete ReturnStatement(301)", "Delete TypeDeclaration: class(249)", "Delete SimpleName: POSSampleSequenceIterator(250)", "Delete SimpleName: Iterator(251)", "Delete SimpleType: Iterator(252)", "Delete SimpleName: Sequence(253)", "Delete SimpleType: Sequence(254)", "Delete ParameterizedType: Iterator<Sequence>(255)", "Delete Modifier: private(256)", "Delete SimpleName: Iterator(257)", "Delete SimpleType: Iterator(258)", "Delete SimpleName: POSSample(259)", "Delete SimpleType: POSSample(260)", "Delete ParameterizedType: Iterator<POSSample>(261)", "Delete FieldDeclaration(264)", "Delete Modifier: private(265)", "Delete SimpleName: POSContextGenerator(266)", "Delete SimpleType: POSContextGenerator(267)", "Delete SimpleName: cg(268)", "Delete VariableDeclarationFragment(269)", "Delete FieldDeclaration(270)", "Delete SimpleName: POSSampleSequenceIterator(272)", "Delete SimpleName: Iterator(273)", "Delete SimpleType: Iterator(274)", "Delete SimpleName: POSSample(275)", "Delete SimpleType: POSSample(276)", "Delete ParameterizedType: Iterator<POSSample>(277)", "Delete SimpleName: psi(278)", "Delete SingleVariableDeclaration(279)", "Delete SimpleName: cg(286)", "Delete SimpleType: DefaultPOSContextGenerator(288)", "Delete NullLiteral(289)", "Delete ClassInstanceCreation(290)", "Delete Assignment: =(291)", "Delete ExpressionStatement(292)", "Delete Block(293)", "Delete MethodDeclaration(294)", "Delete Modifier: public(295)", "Delete PrimitiveType: boolean(296)", "Delete SimpleName: hasNext(297)", "Delete MethodDeclaration(303)", "Delete Modifier: public(408)", "Delete PrimitiveType: void(409)", "Delete SimpleName: remove(410)", "Delete ClassInstanceCreation(413)", "Delete ThrowStatement(414)", "Delete Block(415)", "Delete MethodDeclaration(416)", "Delete TypeDeclaration: class(417)"]}}, {"POSTaggerME_cluster": {"actions": [{"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: opennlp.tools.ml.model.AbstractModel", "DEL ImportDeclaration"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"POSTaggerME_diff": {"operations": ["Update QualifiedName: opennlp.tools.ml.model.EventStream(24) to opennlp.tools.ml.model.Event", "Insert ParameterizedType: ObjectStream<Event>(1007) into VariableDeclarationStatement(1015) at 0", "Insert SimpleType: ObjectStream(1004) into ParameterizedType: ObjectStream<Event>(1007) at 0", "Insert SimpleType: Event(1006) into ParameterizedType: ObjectStream<Event>(1007) at 1", "Update SimpleName: EventStream(1005) to ObjectStream", "Move SimpleName: EventStream(1005) into SimpleType: ObjectStream(1004) at 0", "Insert SimpleName: Event(1005) into SimpleType: Event(1006) at 0", "Delete QualifiedName: opennlp.tools.ml.model.AbstractModel(22)", "Delete ImportDeclaration(23)", "Delete SimpleType: EventStream(1006)"]}}, {"SentenceDetectorME_cluster": {"actions": [{"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"SentenceDetectorME_diff": {"operations": ["Update QualifiedName: opennlp.tools.ml.model.EventStream(18) to opennlp.tools.ml.model.Event", "Insert ParameterizedType: ObjectStream<Event>(1133) into VariableDeclarationStatement(1146) at 0", "Insert SimpleType: ObjectStream(1130) into ParameterizedType: ObjectStream<Event>(1133) at 0", "Insert SimpleType: Event(1132) into ParameterizedType: ObjectStream<Event>(1133) at 1", "Update SimpleName: EventStream(1129) to ObjectStream", "Move SimpleName: EventStream(1129) into SimpleType: ObjectStream(1130) at 0", "Insert SimpleName: Event(1131) into SimpleType: Event(1132) at 0", "Delete SimpleType: EventStream(1130)"]}}, {"TokenizerME_cluster": {"actions": [{"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"TokenizerME_diff": {"operations": ["Update QualifiedName: opennlp.tools.ml.model.EventStream(22) to opennlp.tools.ml.model.Event", "Insert ParameterizedType: ObjectStream<Event>(786) into VariableDeclarationStatement(802) at 0", "Insert ParameterizedType: ObjectStream<Event>(1034) into VariableDeclarationStatement(1053) at 0", "Insert SimpleType: ObjectStream(783) into ParameterizedType: ObjectStream<Event>(786) at 0", "Insert SimpleType: Event(785) into ParameterizedType: ObjectStream<Event>(786) at 1", "Insert SimpleType: ObjectStream(1031) into ParameterizedType: ObjectStream<Event>(1034) at 0", "Insert SimpleType: Event(1033) into ParameterizedType: ObjectStream<Event>(1034) at 1", "Update SimpleName: EventStream(782) to ObjectStream", "Move SimpleName: EventStream(782) into SimpleType: ObjectStream(783) at 0", "Insert SimpleName: Event(784) into SimpleType: Event(785) at 0", "Update SimpleName: EventStream(1027) to ObjectStream", "Move SimpleName: EventStream(1027) into SimpleType: ObjectStream(1031) at 0", "Insert SimpleName: Event(1032) into SimpleType: Event(1033) at 0", "Delete SimpleType: EventStream(783)", "Delete SimpleType: EventStream(1028)"]}}, {"BuildModelUpdaterTool_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: opennlp.tools.ml.model.Event to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL QualifiedName: opennlp.tools.ml.model.EventStream", "DEL SimpleType: opennlp.tools.ml.model.EventStream"]}]}}, {"BuildModelUpdaterTool_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(120) at 3", "Insert QualifiedName: opennlp.tools.ml.model.Event(6) into ImportDeclaration(7) at 0", "Insert ParameterizedType: ObjectStream<Event>(84) into VariableDeclarationStatement(96) at 0", "Insert SimpleType: ObjectStream(81) into ParameterizedType: ObjectStream<Event>(84) at 0", "Insert SimpleType: Event(83) into ParameterizedType: ObjectStream<Event>(84) at 1", "Insert SimpleName: ObjectStream(80) into SimpleType: ObjectStream(81) at 0", "Insert SimpleName: Event(82) into SimpleType: Event(83) at 0", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(78)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(79)"]}}, {"CheckModelUpdaterTool_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS QualifiedName: opennlp.tools.ml.model.Event to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 3"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL QualifiedName: opennlp.tools.ml.model.EventStream", "DEL SimpleType: opennlp.tools.ml.model.EventStream"]}]}}, {"CheckModelUpdaterTool_diff": {"operations": ["Insert ImportDeclaration(7) into CompilationUnit(120) at 3", "Insert QualifiedName: opennlp.tools.ml.model.Event(6) into ImportDeclaration(7) at 0", "Insert ParameterizedType: ObjectStream<Event>(84) into VariableDeclarationStatement(96) at 0", "Insert SimpleType: ObjectStream(81) into ParameterizedType: ObjectStream<Event>(84) at 0", "Insert SimpleType: Event(83) into ParameterizedType: ObjectStream<Event>(84) at 1", "Insert SimpleName: ObjectStream(80) into SimpleType: ObjectStream(81) at 0", "Insert SimpleName: Event(82) into SimpleType: Event(83) at 0", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(78)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(79)"]}}, {"GIS_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 10", "operations": ["INS ImportDeclaration to CompilationUnit at 10", "INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0"]}, {"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"GIS_diff": {"operations": ["Insert ImportDeclaration(21) into CompilationUnit(746) at 10", "Update QualifiedName: opennlp.tools.ml.model.EventStream(14) to opennlp.tools.ml.model.Event", "Insert QualifiedName: opennlp.tools.util.ObjectStream(20) into ImportDeclaration(21) at 0", "Insert ParameterizedType: ObjectStream<Event>(214) into SingleVariableDeclaration(216) at 0", "Insert ParameterizedType: ObjectStream<Event>(253) into SingleVariableDeclaration(255) at 0", "Insert ParameterizedType: ObjectStream<Event>(297) into SingleVariableDeclaration(299) at 0", "Insert ParameterizedType: ObjectStream<Event>(351) into SingleVariableDeclaration(353) at 0", "Insert ParameterizedType: ObjectStream<Event>(425) into SingleVariableDeclaration(427) at 0", "Insert SimpleType: ObjectStream(211) into ParameterizedType: ObjectStream<Event>(214) at 0", "Insert SimpleType: Event(213) into ParameterizedType: ObjectStream<Event>(214) at 1", "Insert SimpleType: ObjectStream(250) into ParameterizedType: ObjectStream<Event>(253) at 0", "Insert SimpleType: Event(252) into ParameterizedType: ObjectStream<Event>(253) at 1", "Insert SimpleType: ObjectStream(294) into ParameterizedType: ObjectStream<Event>(297) at 0", "Insert SimpleType: Event(296) into ParameterizedType: ObjectStream<Event>(297) at 1", "Insert SimpleType: ObjectStream(348) into ParameterizedType: ObjectStream<Event>(351) at 0", "Insert SimpleType: Event(350) into ParameterizedType: ObjectStream<Event>(351) at 1", "Insert SimpleType: ObjectStream(422) into ParameterizedType: ObjectStream<Event>(425) at 0", "Insert SimpleType: Event(424) into ParameterizedType: ObjectStream<Event>(425) at 1", "Update SimpleName: EventStream(208) to ObjectStream", "Move SimpleName: EventStream(208) into SimpleType: ObjectStream(211) at 0", "Insert SimpleName: Event(212) into SimpleType: Event(213) at 0", "Update SimpleName: EventStream(244) to ObjectStream", "Move SimpleName: EventStream(244) into SimpleType: ObjectStream(250) at 0", "Insert SimpleName: Event(251) into SimpleType: Event(252) at 0", "Update SimpleName: EventStream(285) to ObjectStream", "Move SimpleName: EventStream(285) into SimpleType: ObjectStream(294) at 0", "Insert SimpleName: Event(295) into SimpleType: Event(296) at 0", "Update SimpleName: EventStream(336) to ObjectStream", "Move SimpleName: EventStream(336) into SimpleType: ObjectStream(348) at 0", "Insert SimpleName: Event(349) into SimpleType: Event(350) at 0", "Update SimpleName: EventStream(407) to ObjectStream", "Move SimpleName: EventStream(407) into SimpleType: ObjectStream(422) at 0", "Insert SimpleName: Event(423) into SimpleType: Event(424) at 0", "Delete SimpleType: EventStream(209)", "Delete SimpleType: EventStream(245)", "Delete SimpleType: EventStream(286)", "Delete SimpleType: EventStream(337)", "Delete SimpleType: EventStream(408)"]}}, {"GISTrainer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 16", "operations": ["INS ImportDeclaration to CompilationUnit at 16", "INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0"]}, {"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.ml.model.Event"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"GISTrainer_diff": {"operations": ["Insert ImportDeclaration(33) into CompilationUnit(2212) at 16", "Update QualifiedName: opennlp.tools.ml.model.EventStream(22) to opennlp.tools.ml.model.Event", "Insert QualifiedName: opennlp.tools.util.ObjectStream(32) into ImportDeclaration(33) at 0", "Insert ParameterizedType: ObjectStream<Event>(369) into SingleVariableDeclaration(371) at 0", "Insert SimpleType: ObjectStream(366) into ParameterizedType: ObjectStream<Event>(369) at 0", "Insert SimpleType: Event(368) into ParameterizedType: ObjectStream<Event>(369) at 1", "Update SimpleName: EventStream(363) to ObjectStream", "Move SimpleName: EventStream(363) into SimpleType: ObjectStream(366) at 0", "Insert SimpleName: Event(367) into SimpleType: Event(368) at 0", "Delete SimpleType: EventStream(364)"]}}, {"RealBasicEventStream_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 10"]}, {"root": "UPDATE from opennlp.tools.ml.model.AbstractEventStream to java.io.IOException", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.AbstractEventStream from opennlp.tools.ml.model.AbstractEventStream to java.io.IOException"]}, {"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.util.ObjectStream", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.util.ObjectStream"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to TypeDeclaration: class at 2", "operations": ["INS ParameterizedType: ObjectStream<Event> to TypeDeclaration: class at 2", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0"]}, {"root": "MOVE from ParameterizedType: ObjectStream<Event>", "operations": ["MOV SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1"]}, {"root": "INS ParameterizedType: ObjectStream<String> to FieldDeclaration at 0", "operations": ["INS ParameterizedType: ObjectStream<String> to FieldDeclaration at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<String> at 0"]}, {"root": "UPDATE from next to read", "operations": ["UPD SimpleName: next from next to read", "UPD SimpleName: nextToken from nextToken to read"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 3", "operations": ["INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: IOException to MethodDeclaration at 3"]}, {"root": "INS Block to MethodDeclaration at 4", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ds to MethodInvocation at 0", "INS Block to MethodDeclaration at 4", "INS SimpleName: eventString to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void"]}, {"root": "INS SimpleName: reset to MethodDeclaration at 3", "operations": ["INS SimpleName: reset to MethodDeclaration at 3"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 4", "operations": ["INS SimpleType: IOException to MethodDeclaration at 4", "INS SimpleName: IOException to SimpleType: IOException at 0"]}, {"root": "INS SimpleType: UnsupportedOperationException to MethodDeclaration at 5", "operations": ["INS SimpleType: UnsupportedOperationException to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "UPDATE from next to close", "operations": ["UPD SimpleName: next from next to close", "UPD SimpleName: main from main to close"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 5", "operations": ["INS SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS Block to MethodDeclaration at 6"]}, {"root": "UPDATE from AbstractEventStream to ObjectStream", "operations": ["UPD SimpleName: AbstractEventStream from AbstractEventStream to ObjectStream", "UPD SimpleName: DataStream from DataStream to ObjectStream", "UPD SimpleName: DataStream from DataStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: AbstractEventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from ParameterizedType: ObjectStream<String>", "operations": ["MOV SimpleType: String to ParameterizedType: ObjectStream<String> at 1"]}, {"root": "INS ParameterizedType: ObjectStream<String> to SingleVariableDeclaration at 0", "operations": ["INS ParameterizedType: ObjectStream<String> to SingleVariableDeclaration at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<String> at 0"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV ReturnStatement to Block at 2"]}, {"root": "UPDATE from String to UnsupportedOperationException", "operations": ["UPD SimpleName: String from String to UnsupportedOperationException"]}, {"root": "MOVE from SimpleType: UnsupportedOperationException", "operations": ["MOV SimpleName: String to SimpleType: UnsupportedOperationException at 0"]}, {"root": "UPDATE from String to IOException", "operations": ["UPD SimpleName: String from String to IOException"]}, {"root": "MOVE from SimpleType: IOException", "operations": ["MOV SimpleName: String to SimpleType: IOException at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: DataStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from ParameterizedType: ObjectStream<String>", "operations": ["MOV SimpleType: String to ParameterizedType: ObjectStream<String> at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS InfixExpression: != to IfStatement at 0", "operations": ["INS SimpleName: eventString to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "INS NullLiteral to ReturnStatement at 0", "operations": ["INS NullLiteral to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: DataStream to SimpleType: ObjectStream at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS SimpleName: eventString to MethodInvocation at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ReturnStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ds to MethodInvocation at 0", "MOV SimpleName: nextToken to MethodInvocation at 1"]}, {"root": "UPDATE from nextToken to reset", "operations": ["UPD SimpleName: nextToken from nextToken to reset"]}, {"root": "UPDATE from es to ds", "operations": ["UPD SimpleName: es from es to ds"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: next to MethodInvocation at 1", "MOV SimpleName: es to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: nextToken to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: createEvent to MethodInvocation at 0"]}, {"root": "DEL SimpleType: AbstractEventStream", "operations": ["DEL SimpleType: AbstractEventStream"]}, {"root": "DEL SimpleType: DataStream", "operations": ["DEL SimpleType: DataStream"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: next"]}, {"root": "DEL SimpleType: DataStream", "operations": ["DEL SimpleType: DataStream"]}, {"root": "DEL IfStatement", "operations": ["DEL FieldAccess", "DEL SimpleName: ds", "DEL IfStatement", "DEL SimpleName: hasNext", "DEL CastExpression", "DEL MethodInvocation", "DEL FieldAccess", "DEL SimpleName: nextToken", "DEL SimpleName: next", "DEL SimpleName: ds", "DEL ThisExpression", "DEL SimpleName: createEvent", "DEL MethodInvocation", "DEL ThisExpression", "DEL Assignment: =", "DEL ExpressionStatement", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL FieldAccess", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: ds", "DEL SimpleName: hasNext"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: ds", "DEL SimpleName: nextToken", "DEL SimpleName: next", "DEL FieldAccess", "DEL Assignment: =", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL CastExpression"]}, {"root": "DEL Block", "operations": ["DEL ExpressionStatement", "DEL NullLiteral", "DEL Block", "DEL SimpleName: next", "DEL Assignment: ="]}, {"root": "DEL SimpleName: current", "operations": ["DEL SimpleName: current"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: createEvent", "DEL Assignment: =", "DEL SimpleName: hasNext", "DEL VariableDeclarationFragment", "DEL SimpleName: current", "DEL WhileStatement", "DEL SimpleName: next", "DEL CastExpression", "DEL SimpleName: ds", "DEL ThisExpression", "DEL SimpleType: Event", "DEL InfixExpression: ==", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: next", "DEL FieldAccess", "DEL ThisExpression", "DEL SimpleName: Event", "DEL VariableDeclarationStatement", "DEL SimpleName: next", "DEL FieldAccess", "DEL NullLiteral", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: ds"]}, {"root": "DEL SimpleName: hasNext", "operations": ["DEL SimpleName: hasNext"]}, {"root": "DEL Block", "operations": ["DEL NullLiteral", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL NullLiteral", "DEL SimpleName: createEvent", "DEL InfixExpression: &&", "DEL InfixExpression: ==", "DEL SimpleName: next", "DEL MethodInvocation", "DEL SimpleName: next", "DEL SimpleName: hasNext", "DEL SimpleName: ds", "DEL Assignment: =", "DEL SimpleName: next", "DEL CastExpression", "DEL Block", "DEL MethodInvocation", "DEL WhileStatement", "DEL ExpressionStatement"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: println", "DEL QualifiedName: System.out", "DEL MethodInvocation", "DEL MethodInvocation"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL Dimension", "DEL SimpleName: args", "DEL ArrayType: String[]", "DEL SingleVariableDeclaration", "DEL SimpleType: String"]}, {"root": "DEL SimpleType: java.io.IOException", "operations": ["DEL SimpleType: java.io.IOException", "DEL QualifiedName: java.io.IOException"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL SimpleType: PlainTextByLineDataStream", "DEL SimpleName: PlainTextByLineDataStream", "DEL Block", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ArrayAccess", "DEL SimpleType: RealBasicEventStream", "DEL QualifiedName: java.io.FileReader", "DEL SimpleName: args", "DEL WhileStatement", "DEL SimpleName: es", "DEL NumberLiteral: 0", "DEL SimpleType: EventStream", "DEL VariableDeclarationFragment", "DEL SimpleName: es", "DEL SimpleType: java.io.FileReader", "DEL SimpleName: RealBasicEventStream", "DEL VariableDeclarationStatement", "DEL SimpleName: hasNext", "DEL ClassInstanceCreation", "DEL ClassInstanceCreation", "DEL SimpleName: EventStream"]}]}}, {"RealBasicEventStream_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(169) at 5", "Move MethodDeclaration(154) into TypeDeclaration: class(168) at 10", "Update QualifiedName: opennlp.tools.ml.model.AbstractEventStream(2) to java.io.IOException", "Update QualifiedName: opennlp.tools.ml.model.EventStream(6) to opennlp.tools.util.ObjectStream", "Insert ParameterizedType: ObjectStream<Event>(16) into TypeDeclaration: class(168) at 2", "Insert SimpleType: ObjectStream(13) into ParameterizedType: ObjectStream<Event>(16) at 0", "Move SimpleType: Event(28) into ParameterizedType: ObjectStream<Event>(16) at 1", "Insert ParameterizedType: ObjectStream<String>(29) into FieldDeclaration(32) at 0", "Update SimpleName: next(68) to read", "Insert SimpleType: IOException(55) into MethodDeclaration(76) at 3", "Insert Block(75) into MethodDeclaration(76) at 4", "Insert MarkerAnnotation(141) into MethodDeclaration(154) at 0", "Update PrimitiveType: boolean(128) to void", "Insert SimpleName: reset(144) into MethodDeclaration(154) at 3", "Insert SimpleType: IOException(146) into MethodDeclaration(154) at 4", "Insert SimpleType: UnsupportedOperationException(148) into MethodDeclaration(154) at 5", "Insert Block(153) into MethodDeclaration(154) at 6", "Insert MarkerAnnotation(156) into MethodDeclaration(167) at 0", "Update SimpleName: main(221) to close", "Insert SimpleType: IOException(161) into MethodDeclaration(167) at 4", "Insert Block(166) into MethodDeclaration(167) at 5", "Update SimpleName: AbstractEventStream(12) to ObjectStream", "Move SimpleName: AbstractEventStream(12) into SimpleType: ObjectStream(13) at 0", "Insert SimpleType: ObjectStream(26) into ParameterizedType: ObjectStream<String>(29) at 0", "Move SimpleType: String(106) into ParameterizedType: ObjectStream<String>(29) at 1", "Insert ParameterizedType: ObjectStream<String>(39) into SingleVariableDeclaration(41) at 0", "Insert SimpleName: IOException(54) into SimpleType: IOException(55) at 0", "Insert VariableDeclarationStatement(63) into Block(75) at 0", "Move IfStatement(122) into Block(75) at 1", "Move ReturnStatement(124) into Block(75) at 2", "Insert SimpleName: Override(140) into MarkerAnnotation(141) at 0", "Insert SimpleName: IOException(145) into SimpleType: IOException(146) at 0", "Update SimpleName: String(139) to UnsupportedOperationException", "Move SimpleName: String(139) into SimpleType: UnsupportedOperationException(148) at 0", "Insert ExpressionStatement(152) into Block(153) at 0", "Insert SimpleName: Override(155) into MarkerAnnotation(156) at 0", "Update SimpleName: String(222) to IOException", "Move SimpleName: String(222) into SimpleType: IOException(161) at 0", "Move ExpressionStatement(256) into Block(166) at 0", "Update SimpleName: DataStream(22) to ObjectStream", "Move SimpleName: DataStream(22) into SimpleType: ObjectStream(26) at 0", "Insert SimpleType: ObjectStream(36) into ParameterizedType: ObjectStream<String>(39) at 0", "Move SimpleType: String(81) into ParameterizedType: ObjectStream<String>(39) at 1", "Move SimpleType: String(52) into VariableDeclarationStatement(63) at 0", "Insert VariableDeclarationFragment(62) into VariableDeclarationStatement(63) at 1", "Insert InfixExpression: !=(66) into IfStatement(72) at 0", "Insert NullLiteral(73) into ReturnStatement(74) at 0", "Insert MethodInvocation(151) into ExpressionStatement(152) at 0", "Insert MethodInvocation(164) into ExpressionStatement(165) at 0", "Update SimpleName: DataStream(34) to ObjectStream", "Move SimpleName: DataStream(34) into SimpleType: ObjectStream(36) at 0", "Insert SimpleName: eventString(58) into VariableDeclarationFragment(62) at 0", "Insert MethodInvocation(61) into VariableDeclarationFragment(62) at 1", "Insert SimpleName: eventString(64) into InfixExpression: !=(66) at 0", "Insert NullLiteral(65) into InfixExpression: !=(66) at 1", "Insert ReturnStatement(70) into Block(71) at 0", "Move SimpleName: ds(141) into MethodInvocation(151) at 0", "Update SimpleName: nextToken(142) to reset", "Move SimpleName: nextToken(142) into MethodInvocation(151) at 1", "Update SimpleName: es(252) to ds", "Move SimpleName: es(252) into MethodInvocation(164) at 0", "Update SimpleName: next(253) to close", "Move SimpleName: next(253) into MethodInvocation(164) at 1", "Insert SimpleName: ds(59) into MethodInvocation(61) at 0", "Update SimpleName: nextToken(85) to read", "Move SimpleName: nextToken(85) into MethodInvocation(61) at 1", "Insert MethodInvocation(69) into ReturnStatement(70) at 0", "Move SimpleName: createEvent(104) into MethodInvocation(69) at 0", "Insert SimpleName: eventString(68) into MethodInvocation(69) at 1", "Delete SimpleType: AbstractEventStream(13)", "Delete SimpleType: DataStream(23)", "Delete SimpleName: next(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete SimpleType: DataStream(35)", "Delete ThisExpression(44)", "Delete SimpleName: ds(45)", "Delete FieldAccess(46)", "Delete SimpleName: hasNext(47)", "Delete MethodInvocation(48)", "Delete SimpleName: next(49)", "Delete SimpleName: createEvent(50)", "Delete ThisExpression(53)", "Delete SimpleName: ds(54)", "Delete FieldAccess(55)", "Delete SimpleName: nextToken(56)", "Delete MethodInvocation(57)", "Delete CastExpression(58)", "Delete MethodInvocation(59)", "Delete Assignment: =(60)", "Delete ExpressionStatement(61)", "Delete IfStatement(62)", "Delete ThisExpression(98)", "Delete SimpleName: ds(99)", "Delete FieldAccess(100)", "Delete SimpleName: hasNext(101)", "Delete MethodInvocation(102)", "Delete SimpleName: next(103)", "Delete ThisExpression(107)", "Delete SimpleName: ds(108)", "Delete FieldAccess(109)", "Delete SimpleName: nextToken(110)", "Delete MethodInvocation(111)", "Delete CastExpression(112)", "Delete MethodInvocation(113)", "Delete Assignment: =(114)", "Delete ExpressionStatement(115)", "Delete SimpleName: next(117)", "Delete NullLiteral(118)", "Delete Assignment: =(119)", "Delete ExpressionStatement(120)", "Delete Block(121)", "Delete SimpleName: current(123)", "Delete SimpleName: next(69)", "Delete NullLiteral(70)", "Delete InfixExpression: ==(71)", "Delete ThisExpression(72)", "Delete SimpleName: ds(73)", "Delete FieldAccess(74)", "Delete SimpleName: hasNext(75)", "Delete MethodInvocation(76)", "Delete InfixExpression: &&(77)", "Delete SimpleName: next(78)", "Delete SimpleName: createEvent(79)", "Delete ThisExpression(82)", "Delete SimpleName: ds(83)", "Delete FieldAccess(84)", "Delete MethodInvocation(86)", "Delete CastExpression(87)", "Delete MethodInvocation(88)", "Delete Assignment: =(89)", "Delete ExpressionStatement(90)", "Delete WhileStatement(91)", "Delete SimpleName: Event(92)", "Delete SimpleType: Event(93)", "Delete SimpleName: current(94)", "Delete SimpleName: next(95)", "Delete VariableDeclarationFragment(96)", "Delete VariableDeclarationStatement(97)", "Delete Block(125)", "Delete SimpleName: hasNext(129)", "Delete SimpleName: next(130)", "Delete NullLiteral(131)", "Delete InfixExpression: ==(132)", "Delete SimpleName: ds(133)", "Delete SimpleName: hasNext(134)", "Delete MethodInvocation(135)", "Delete InfixExpression: &&(136)", "Delete SimpleName: next(137)", "Delete SimpleName: createEvent(138)", "Delete SimpleType: String(140)", "Delete MethodInvocation(143)", "Delete CastExpression(144)", "Delete MethodInvocation(145)", "Delete Assignment: =(146)", "Delete ExpressionStatement(147)", "Delete WhileStatement(148)", "Delete SimpleName: next(149)", "Delete NullLiteral(150)", "Delete InfixExpression: !=(151)", "Delete ReturnStatement(152)", "Delete Block(153)", "Delete Modifier: static(219)", "Delete QualifiedName: System.out(250)", "Delete SimpleName: println(251)", "Delete MethodInvocation(254)", "Delete MethodInvocation(255)", "Delete SimpleType: String(223)", "Delete Dimension(224)", "Delete ArrayType: String[](225)", "Delete SimpleName: args(226)", "Delete SingleVariableDeclaration(227)", "Delete QualifiedName: java.io.IOException(228)", "Delete SimpleType: java.io.IOException(229)", "Delete SimpleName: EventStream(230)", "Delete SimpleType: EventStream(231)", "Delete SimpleName: es(232)", "Delete SimpleName: RealBasicEventStream(233)", "Delete SimpleType: RealBasicEventStream(234)", "Delete SimpleName: PlainTextByLineDataStream(235)", "Delete SimpleType: PlainTextByLineDataStream(236)", "Delete QualifiedName: java.io.FileReader(237)", "Delete SimpleType: java.io.FileReader(238)", "Delete SimpleName: args(239)", "Delete NumberLiteral: 0(240)", "Delete ArrayAccess(241)", "Delete ClassInstanceCreation(242)", "Delete ClassInstanceCreation(243)", "Delete ClassInstanceCreation(244)", "Delete VariableDeclarationFragment(245)", "Delete VariableDeclarationStatement(246)", "Delete SimpleName: es(247)", "Delete SimpleName: hasNext(248)", "Delete MethodInvocation(249)", "Delete Block(257)", "Delete WhileStatement(258)", "Delete Block(259)"]}}, {"FileEventStream_cluster": {"actions": [{"root": "UPDATE from opennlp.tools.ml.maxent.GIS to opennlp.tools.util.ObjectStream", "operations": ["UPD QualifiedName: opennlp.tools.ml.maxent.GIS from opennlp.tools.ml.maxent.GIS to opennlp.tools.util.ObjectStream"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to TypeDeclaration: class at 3", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to TypeDeclaration: class at 3", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1"]}, {"root": "INS Modifier: protected to FieldDeclaration at 0", "operations": ["INS Modifier: protected to FieldDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from next to read", "operations": ["UPD SimpleName: next from next to read"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS Block to IfStatement at 2", "INS Block to MethodDeclaration at 5", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 1", "INS ReturnStatement to Block at 0", "INS NullLiteral to ReturnStatement at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "UPDATE from main to reset", "operations": ["UPD SimpleName: main from main to reset"]}, {"root": "INS SimpleType: UnsupportedOperationException to MethodDeclaration at 8", "operations": ["INS SimpleType: UnsupportedOperationException to MethodDeclaration at 8"]}, {"root": "UPDATE from AbstractEventStream to ObjectStream", "operations": ["UPD SimpleName: AbstractEventStream from AbstractEventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: AbstractEventStream to SimpleType: ObjectStream at 0"]}, {"root": "UPDATE from Closeable to Event", "operations": ["UPD SimpleName: Closeable from Closeable to Event"]}, {"root": "MOVE from SimpleType: Event", "operations": ["MOV SimpleName: Closeable to SimpleType: Event at 0"]}, {"root": "UPDATE from FileEventStream to UnsupportedOperationException", "operations": ["UPD SimpleType: FileEventStream from FileEventStream to UnsupportedOperationException", "UPD SimpleName: FileEventStream from FileEventStream to UnsupportedOperationException", "UPD SimpleName: String from String to UnsupportedOperationException"]}, {"root": "MOVE from SimpleType: UnsupportedOperationException", "operations": ["MOV SimpleName: String to SimpleType: UnsupportedOperationException at 0"]}, {"root": "INS ThrowStatement to Block at 0", "operations": ["INS ClassInstanceCreation to ThrowStatement at 0", "INS ThrowStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1", "MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from InfixExpression: !=", "operations": ["MOV NullLiteral to InfixExpression: != at 2"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: FileEventStream to ClassInstanceCreation at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.Closeable", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: opennlp.tools.ml.maxent.io.SuffixSensitiveGISModelWriter"]}, {"root": "DEL SimpleType: AbstractEventStream", "operations": ["DEL SimpleType: AbstractEventStream"]}, {"root": "DEL SimpleType: Closeable", "operations": ["DEL SimpleType: Closeable"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL FieldDeclaration"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL CatchClause", "DEL SimpleName: println", "DEL QualifiedName: System.err", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: hasNext", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: e", "DEL ParenthesizedExpression", "DEL BooleanLiteral: false", "DEL SimpleName: e", "DEL ReturnStatement", "DEL TryStatement", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration", "DEL ParenthesizedExpression"]}, {"root": "DEL ParenthesizedExpression", "operations": ["DEL ParenthesizedExpression"]}, {"root": "DEL Javadoc", "operations": ["DEL Javadoc", "DEL SimpleName: IOException", "DEL TextElement: Trains and writes a model based on the events in the specified event file.", "DEL TagElement", "DEL TagElement: @throws", "DEL TagElement: @param", "DEL SimpleName: args", "DEL TextElement:  when the eventfile can not be read or the model file can not be written.", "DEL TextElement: the name of the model created is based on the event file name.", "DEL TextElement:  eventfile [iterations cuttoff]"]}, {"root": "DEL Modifier: static", "operations": ["DEL Modifier: static"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL ArrayType: String[]", "DEL Dimension", "DEL SimpleName: args", "DEL SimpleType: String", "DEL SingleVariableDeclaration"]}, {"root": "DEL IfStatement", "operations": ["DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL QualifiedName: System.err", "DEL Block", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: exit", "DEL InfixExpression: ==", "DEL StringLiteral: \"Usage: FileEventStream eventfile [iterations cutoff]\"", "DEL ExpressionStatement", "DEL SimpleName: System", "DEL QualifiedName: args.length", "DEL NumberLiteral: 1", "DEL SimpleName: println", "DEL IfStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: ai", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleType: String", "DEL SimpleName: ai", "DEL ArrayAccess", "DEL VariableDeclarationFragment", "DEL PostfixExpression: ++", "DEL SimpleName: eventFile", "DEL SimpleName: args", "DEL VariableDeclarationStatement", "DEL SimpleName: String"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: iterations", "DEL NumberLiteral: 100", "DEL PrimitiveType: int"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL NumberLiteral: 5", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL SimpleName: cutoff"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: ai", "DEL SimpleName: iterations", "DEL ExpressionStatement", "DEL SimpleName: args", "DEL Block", "DEL PostfixExpression: ++", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL PostfixExpression: ++", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: cutoff", "DEL SimpleName: args", "DEL QualifiedName: args.length", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: Integer", "DEL SimpleName: parseInt", "DEL ArrayAccess", "DEL SimpleName: ai", "DEL SimpleName: ai", "DEL IfStatement", "DEL ArrayAccess", "DEL SimpleName: Integer", "DEL SimpleName: parseInt"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: model", "DEL SimpleType: AbstractModel", "DEL SimpleName: AbstractModel", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: eventFile", "DEL VariableDeclarationStatement", "DEL SimpleName: FileEventStream", "DEL SimpleName: es", "DEL SimpleType: FileEventStream", "DEL VariableDeclarationFragment"]}, {"root": "DEL TryStatement", "operations": ["DEL SimpleName: close", "DEL SimpleName: model", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: GIS", "DEL MethodInvocation", "DEL SimpleName: es", "DEL TryStatement", "DEL Block", "DEL SimpleName: trainModel", "DEL SimpleName: iterations", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: cutoff", "DEL SimpleName: es", "DEL Assignment: ="]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: SuffixSensitiveGISModelWriter", "DEL SimpleType: File", "DEL StringLiteral: \".bin.gz\"", "DEL ClassInstanceCreation", "DEL SimpleName: eventFile", "DEL SimpleName: model", "DEL SimpleName: File", "DEL ExpressionStatement", "DEL SimpleType: SuffixSensitiveGISModelWriter", "DEL SimpleName: persist", "DEL InfixExpression: +", "DEL ClassInstanceCreation", "DEL MethodInvocation"]}]}}, {"FileEventStream_diff": {"operations": ["Update QualifiedName: opennlp.tools.ml.maxent.GIS(18) to opennlp.tools.util.ObjectStream", "Insert ParameterizedType: ObjectStream<Event>(28) into TypeDeclaration: class(332) at 3", "Insert SimpleType: ObjectStream(25) into ParameterizedType: ObjectStream<Event>(28) at 0", "Insert SimpleType: Event(27) into ParameterizedType: ObjectStream<Event>(28) at 1", "Insert Modifier: protected(29) into FieldDeclaration(34) at 0", "Insert MarkerAnnotation(135) into MethodDeclaration(224) at 0", "Update SimpleName: next(175) to read", "Move SimpleType: IOException(156) into MethodDeclaration(224) at 4", "Insert Block(223) into MethodDeclaration(224) at 5", "Insert MarkerAnnotation(318) into MethodDeclaration(331) at 0", "Update SimpleName: main(347) to reset", "Insert SimpleType: UnsupportedOperationException(325) into MethodDeclaration(331) at 5", "Update SimpleName: AbstractEventStream(28) to ObjectStream", "Move SimpleName: AbstractEventStream(28) into SimpleType: ObjectStream(25) at 0", "Update SimpleName: Closeable(30) to Event", "Move SimpleName: Closeable(30) into SimpleType: Event(27) at 0", "Insert SimpleName: Override(134) into MarkerAnnotation(135) at 0", "Insert VariableDeclarationStatement(146) into Block(223) at 0", "Insert IfStatement(222) into Block(223) at 1", "Insert SimpleName: Override(317) into MarkerAnnotation(318) at 0", "Update SimpleName: String(348) to UnsupportedOperationException", "Move SimpleName: String(348) into SimpleType: UnsupportedOperationException(325) at 0", "Insert ThrowStatement(329) into Block(330) at 0", "Move SimpleType: String(38) into VariableDeclarationStatement(146) at 0", "Move VariableDeclarationFragment(40) into VariableDeclarationStatement(146) at 1", "Move InfixExpression: !=(151) into IfStatement(222) at 0", "Move NullLiteral(144) into InfixExpression: !=(154) at 2", "Move Block(240) into IfStatement(222) at 1", "Insert Block(221) into IfStatement(222) at 2", "Insert ClassInstanceCreation(328) into ThrowStatement(329) at 0", "Insert ReturnStatement(220) into Block(221) at 0", "Update SimpleType: FileEventStream(429) to UnsupportedOperationException", "Move SimpleType: FileEventStream(429) into ClassInstanceCreation(328) at 0", "Move ClassInstanceCreation(237) into ReturnStatement(217) at 0", "Insert NullLiteral(219) into ReturnStatement(220) at 0", "Update SimpleName: FileEventStream(428) to UnsupportedOperationException", "Delete QualifiedName: java.io.Closeable(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: opennlp.tools.ml.maxent.io.SuffixSensitiveGISModelWriter(20)", "Delete ImportDeclaration(21)", "Delete SimpleType: AbstractEventStream(29)", "Delete SimpleType: Closeable(31)", "Delete FieldDeclaration(41)", "Delete Modifier: public(141)", "Delete PrimitiveType: boolean(142)", "Delete SimpleName: hasNext(143)", "Delete ParenthesizedExpression(152)", "Delete ReturnStatement(153)", "Delete Block(154)", "Delete SimpleName: e(157)", "Delete SingleVariableDeclaration(158)", "Delete QualifiedName: System.err(159)", "Delete SimpleName: println(160)", "Delete SimpleName: e(161)", "Delete MethodInvocation(162)", "Delete ExpressionStatement(163)", "Delete BooleanLiteral: false(164)", "Delete ParenthesizedExpression(165)", "Delete ReturnStatement(166)", "Delete Block(167)", "Delete CatchClause(168)", "Delete TryStatement(169)", "Delete Block(170)", "Delete MethodDeclaration(171)", "Delete ParenthesizedExpression(238)", "Delete TextElement: Trains and writes a model based on the events in the specified event file.(334)", "Delete TextElement: the name of the model created is based on the event file name.(335)", "Delete TagElement(336)", "Delete SimpleName: args(337)", "Delete TextElement:  eventfile [iterations cuttoff](338)", "Delete TagElement: @param(339)", "Delete SimpleName: IOException(340)", "Delete TextElement:  when the eventfile can not be read or the model file can not be written.(341)", "Delete TagElement: @throws(342)", "Delete Javadoc(343)", "Delete Modifier: static(345)", "Delete SimpleType: String(349)", "Delete Dimension(350)", "Delete ArrayType: String[](351)", "Delete SimpleName: args(352)", "Delete SingleVariableDeclaration(353)", "Delete QualifiedName: args.length(356)", "Delete NumberLiteral: 0(357)", "Delete InfixExpression: ==(358)", "Delete QualifiedName: System.err(359)", "Delete SimpleName: println(360)", "Delete StringLiteral: \"Usage: FileEventStream eventfile [iterations cutoff]\"(361)", "Delete MethodInvocation(362)", "Delete ExpressionStatement(363)", "Delete SimpleName: System(364)", "Delete SimpleName: exit(365)", "Delete NumberLiteral: 1(366)", "Delete MethodInvocation(367)", "Delete ExpressionStatement(368)", "Delete Block(369)", "Delete IfStatement(370)", "Delete PrimitiveType: int(371)", "Delete SimpleName: ai(372)", "Delete NumberLiteral: 0(373)", "Delete VariableDeclarationFragment(374)", "Delete VariableDeclarationStatement(375)", "Delete SimpleName: String(376)", "Delete SimpleType: String(377)", "Delete SimpleName: eventFile(378)", "Delete SimpleName: args(379)", "Delete SimpleName: ai(380)", "Delete PostfixExpression: ++(381)", "Delete ArrayAccess(382)", "Delete VariableDeclarationFragment(383)", "Delete VariableDeclarationStatement(384)", "Delete PrimitiveType: int(385)", "Delete SimpleName: iterations(386)", "Delete NumberLiteral: 100(387)", "Delete VariableDeclarationFragment(388)", "Delete VariableDeclarationStatement(389)", "Delete PrimitiveType: int(390)", "Delete SimpleName: cutoff(391)", "Delete NumberLiteral: 5(392)", "Delete VariableDeclarationFragment(393)", "Delete VariableDeclarationStatement(394)", "Delete SimpleName: ai(395)", "Delete QualifiedName: args.length(396)", "Delete InfixExpression: <(397)", "Delete SimpleName: iterations(398)", "Delete SimpleName: Integer(399)", "Delete SimpleName: parseInt(400)", "Delete SimpleName: args(401)", "Delete SimpleName: ai(402)", "Delete PostfixExpression: ++(403)", "Delete ArrayAccess(404)", "Delete MethodInvocation(405)", "Delete Assignment: =(406)", "Delete ExpressionStatement(407)", "Delete SimpleName: cutoff(408)", "Delete SimpleName: Integer(409)", "Delete SimpleName: parseInt(410)", "Delete SimpleName: args(411)", "Delete SimpleName: ai(412)", "Delete PostfixExpression: ++(413)", "Delete ArrayAccess(414)", "Delete MethodInvocation(415)", "Delete Assignment: =(416)", "Delete ExpressionStatement(417)", "Delete Block(418)", "Delete IfStatement(419)", "Delete SimpleName: AbstractModel(420)", "Delete SimpleType: AbstractModel(421)", "Delete SimpleName: model(422)", "Delete VariableDeclarationFragment(423)", "Delete VariableDeclarationStatement(424)", "Delete SimpleName: FileEventStream(425)", "Delete SimpleType: FileEventStream(426)", "Delete SimpleName: es(427)", "Delete SimpleName: eventFile(430)", "Delete ClassInstanceCreation(431)", "Delete VariableDeclarationFragment(432)", "Delete VariableDeclarationStatement(433)", "Delete SimpleName: model(434)", "Delete SimpleName: GIS(435)", "Delete SimpleName: trainModel(436)", "Delete SimpleName: es(437)", "Delete SimpleName: iterations(438)", "Delete SimpleName: cutoff(439)", "Delete MethodInvocation(440)", "Delete Assignment: =(441)", "Delete ExpressionStatement(442)", "Delete Block(443)", "Delete SimpleName: es(444)", "Delete SimpleName: close(445)", "Delete MethodInvocation(446)", "Delete ExpressionStatement(447)", "Delete Block(448)", "Delete TryStatement(449)", "Delete SimpleName: SuffixSensitiveGISModelWriter(450)", "Delete SimpleType: SuffixSensitiveGISModelWriter(451)", "Delete SimpleName: model(452)", "Delete SimpleName: File(453)", "Delete SimpleType: File(454)", "Delete SimpleName: eventFile(455)", "Delete StringLiteral: \".bin.gz\"(456)", "Delete InfixExpression: +(457)", "Delete ClassInstanceCreation(458)", "Delete ClassInstanceCreation(459)", "Delete SimpleName: persist(460)", "Delete MethodInvocation(461)", "Delete ExpressionStatement(462)"]}}, {"HashSumEventStream_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 7", "operations": ["INS QualifiedName: opennlp.tools.util.AbstractObjectStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 7"]}, {"root": "UPDATE from opennlp.tools.ml.model.EventStream to opennlp.tools.util.ObjectStream", "operations": ["UPD QualifiedName: opennlp.tools.ml.model.EventStream from opennlp.tools.ml.model.EventStream to opennlp.tools.util.ObjectStream"]}, {"root": "INS ParameterizedType: AbstractObjectStream<Event> to TypeDeclaration: class at 2", "operations": ["INS SimpleType: Event to ParameterizedType: AbstractObjectStream<Event> at 1", "INS SimpleType: AbstractObjectStream to ParameterizedType: AbstractObjectStream<Event> at 0", "INS ParameterizedType: AbstractObjectStream<Event> to TypeDeclaration: class at 2"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS SimpleName: read to MethodDeclaration at 3", "operations": ["INS SimpleName: read to MethodDeclaration at 3"]}, {"root": "INS Block to MethodDeclaration at 6", "operations": ["INS SimpleName: read to SuperMethodInvocation at 0", "INS SuperMethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 0", "INS Block to MethodDeclaration at 6", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: event to VariableDeclarationFragment at 0", "INS SimpleName: event to InfixExpression: != at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "UPDATE from EventStream to AbstractObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to AbstractObjectStream"]}, {"root": "MOVE from SimpleType: AbstractObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: AbstractObjectStream at 0"]}, {"root": "UPDATE from EventStream to Event", "operations": ["UPD SimpleName: EventStream from EventStream to Event"]}, {"root": "MOVE from SimpleType: Event", "operations": ["MOV SimpleName: EventStream to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1"]}, {"root": "INS SuperConstructorInvocation to Block at 0", "operations": ["INS SuperConstructorInvocation to Block at 0", "INS SimpleName: eventStream to SuperConstructorInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Event to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: eventStream", "DEL Modifier: final", "DEL Modifier: private", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL Assignment: =", "DEL FieldAccess", "DEL SimpleName: eventStream", "DEL ThisExpression", "DEL SimpleName: eventStream"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: public", "DEL SimpleName: eventStream", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: hasNext", "DEL SimpleName: IOException", "DEL Block", "DEL PrimitiveType: boolean", "DEL MethodDeclaration", "DEL SimpleName: hasNext"]}, {"root": "DEL SimpleName: next", "operations": ["DEL SimpleName: next"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: event", "DEL SimpleName: eventStream", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: next"]}]}}, {"HashSumEventStream_diff": {"operations": ["Insert ImportDeclaration(15) into CompilationUnit(142) at 7", "Insert QualifiedName: opennlp.tools.util.AbstractObjectStream(14) into ImportDeclaration(15) at 0", "Update QualifiedName: opennlp.tools.ml.model.EventStream(14) to opennlp.tools.util.ObjectStream", "Insert ParameterizedType: AbstractObjectStream<Event>(24) into TypeDeclaration: class(141) at 2", "Insert SimpleType: AbstractObjectStream(21) into ParameterizedType: AbstractObjectStream<Event>(24) at 0", "Insert SimpleType: Event(23) into ParameterizedType: AbstractObjectStream<Event>(24) at 1", "Insert MarkerAnnotation(65) into MethodDeclaration(111) at 0", "Insert SimpleName: read(69) into MethodDeclaration(111) at 3", "Insert Block(110) into MethodDeclaration(111) at 5", "Update SimpleName: EventStream(18) to AbstractObjectStream", "Move SimpleName: EventStream(18) into SimpleType: AbstractObjectStream(21) at 0", "Update SimpleName: EventStream(22) to Event", "Move SimpleName: EventStream(22) into SimpleType: Event(23) at 0", "Insert ParameterizedType: ObjectStream<Event>(37) into SingleVariableDeclaration(39) at 0", "Insert SuperConstructorInvocation(41) into Block(62) at 0", "Insert SimpleName: Override(64) into MarkerAnnotation(65) at 0", "Insert VariableDeclarationStatement(78) into Block(110) at 0", "Insert IfStatement(107) into Block(110) at 1", "Move ReturnStatement(117) into Block(110) at 2", "Insert SimpleType: ObjectStream(34) into ParameterizedType: ObjectStream<Event>(37) at 0", "Insert SimpleType: Event(36) into ParameterizedType: ObjectStream<Event>(37) at 1", "Insert SimpleName: eventStream(40) into SuperConstructorInvocation(41) at 0", "Move SimpleType: Event(85) into VariableDeclarationStatement(78) at 0", "Insert VariableDeclarationFragment(77) into VariableDeclarationStatement(78) at 1", "Insert InfixExpression: !=(81) into IfStatement(107) at 0", "Move Block(118) into IfStatement(107) at 1", "Update SimpleName: EventStream(35) to ObjectStream", "Move SimpleName: EventStream(35) into SimpleType: ObjectStream(34) at 0", "Insert SimpleName: Event(35) into SimpleType: Event(36) at 0", "Insert SimpleName: event(74) into VariableDeclarationFragment(77) at 0", "Insert SuperMethodInvocation(76) into VariableDeclarationFragment(77) at 1", "Insert SimpleName: event(79) into InfixExpression: !=(81) at 0", "Insert NullLiteral(80) into InfixExpression: !=(81) at 1", "Insert SimpleName: read(75) into SuperMethodInvocation(76) at 0", "Delete SimpleType: EventStream(19)", "Delete Modifier: private(20)", "Delete Modifier: final(21)", "Delete SimpleType: EventStream(23)", "Delete SimpleName: eventStream(24)", "Delete VariableDeclarationFragment(25)", "Delete FieldDeclaration(26)", "Delete SimpleType: EventStream(36)", "Delete ThisExpression(39)", "Delete SimpleName: eventStream(40)", "Delete FieldAccess(41)", "Delete SimpleName: eventStream(42)", "Delete Assignment: =(43)", "Delete ExpressionStatement(44)", "Delete Modifier: public(67)", "Delete PrimitiveType: boolean(68)", "Delete SimpleName: hasNext(69)", "Delete SimpleName: IOException(70)", "Delete SimpleType: IOException(71)", "Delete SimpleName: eventStream(72)", "Delete SimpleName: hasNext(73)", "Delete MethodInvocation(74)", "Delete ReturnStatement(75)", "Delete Block(76)", "Delete MethodDeclaration(77)", "Delete SimpleName: next(81)", "Delete SimpleName: event(86)", "Delete SimpleName: eventStream(87)", "Delete SimpleName: next(88)", "Delete MethodInvocation(89)", "Delete VariableDeclarationFragment(90)", "Delete VariableDeclarationStatement(91)"]}}, {"OnePassDataIndexer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 11"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ev to VariableDeclarationFragment at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Event to VariableDeclarationStatement at 0"]}, {"root": "INS InfixExpression: != to WhileStatement at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to WhileStatement at 0", "INS SimpleName: ev to Assignment: = at 0", "INS Assignment: = to ParenthesizedExpression at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: eventStream to MethodInvocation at 0", "MOV SimpleName: hasNext to MethodInvocation at 1"]}, {"root": "UPDATE from hasNext to read", "operations": ["UPD SimpleName: hasNext from hasNext to read"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: ev", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: next", "DEL MethodInvocation", "DEL SimpleName: eventStream"]}]}}, {"OnePassDataIndexer_diff": {"operations": ["Insert ImportDeclaration(23) into CompilationUnit(659) at 11", "Insert QualifiedName: opennlp.tools.util.ObjectStream(22) into ImportDeclaration(23) at 0", "Insert ParameterizedType: ObjectStream<Event>(47) into SingleVariableDeclaration(49) at 0", "Insert ParameterizedType: ObjectStream<Event>(63) into SingleVariableDeclaration(65) at 0", "Insert ParameterizedType: ObjectStream<Event>(94) into SingleVariableDeclaration(96) at 0", "Insert ParameterizedType: ObjectStream<Event>(240) into SingleVariableDeclaration(242) at 0", "Insert VariableDeclarationStatement(307) into Block(390) at 3", "Insert SimpleType: ObjectStream(44) into ParameterizedType: ObjectStream<Event>(47) at 0", "Insert SimpleType: Event(46) into ParameterizedType: ObjectStream<Event>(47) at 1", "Insert SimpleType: ObjectStream(60) into ParameterizedType: ObjectStream<Event>(63) at 0", "Insert SimpleType: Event(62) into ParameterizedType: ObjectStream<Event>(63) at 1", "Insert SimpleType: ObjectStream(91) into ParameterizedType: ObjectStream<Event>(94) at 0", "Insert SimpleType: Event(93) into ParameterizedType: ObjectStream<Event>(94) at 1", "Insert SimpleType: ObjectStream(237) into ParameterizedType: ObjectStream<Event>(240) at 0", "Insert SimpleType: Event(239) into ParameterizedType: ObjectStream<Event>(240) at 1", "Move SimpleType: Event(293) into VariableDeclarationStatement(307) at 0", "Insert VariableDeclarationFragment(306) into VariableDeclarationStatement(307) at 1", "Insert InfixExpression: !=(315) into WhileStatement(331) at 0", "Update SimpleName: EventStream(41) to ObjectStream", "Move SimpleName: EventStream(41) into SimpleType: ObjectStream(44) at 0", "Insert SimpleName: Event(45) into SimpleType: Event(46) at 0", "Update SimpleName: EventStream(54) to ObjectStream", "Move SimpleName: EventStream(54) into SimpleType: ObjectStream(60) at 0", "Insert SimpleName: Event(61) into SimpleType: Event(62) at 0", "Update SimpleName: EventStream(82) to ObjectStream", "Move SimpleName: EventStream(82) into SimpleType: ObjectStream(91) at 0", "Insert SimpleName: Event(92) into SimpleType: Event(93) at 0", "Update SimpleName: EventStream(225) to ObjectStream", "Move SimpleName: EventStream(225) into SimpleType: ObjectStream(237) at 0", "Insert SimpleName: Event(238) into SimpleType: Event(239) at 0", "Insert SimpleName: ev(305) into VariableDeclarationFragment(306) at 0", "Insert ParenthesizedExpression(313) into InfixExpression: !=(315) at 0", "Insert NullLiteral(314) into InfixExpression: !=(315) at 1", "Insert Assignment: =(312) into ParenthesizedExpression(313) at 0", "Insert SimpleName: ev(308) into Assignment: =(312) at 0", "Insert MethodInvocation(311) into Assignment: =(312) at 1", "Move SimpleName: eventStream(289) into MethodInvocation(311) at 0", "Update SimpleName: hasNext(290) to read", "Move SimpleName: hasNext(290) into MethodInvocation(311) at 1", "Delete SimpleType: EventStream(42)", "Delete SimpleType: EventStream(55)", "Delete SimpleType: EventStream(83)", "Delete SimpleType: EventStream(226)", "Delete MethodInvocation(291)", "Delete SimpleName: ev(294)", "Delete SimpleName: eventStream(295)", "Delete SimpleName: next(296)", "Delete MethodInvocation(297)", "Delete VariableDeclarationFragment(298)", "Delete VariableDeclarationStatement(299)"]}}, {"OnePassRealValueDataIndexer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 8", "operations": ["INS ImportDeclaration to CompilationUnit at 8", "INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}]}}, {"OnePassRealValueDataIndexer_diff": {"operations": ["Insert ImportDeclaration(17) into CompilationUnit(445) at 8", "Insert QualifiedName: opennlp.tools.util.ObjectStream(16) into ImportDeclaration(17) at 0", "Insert ParameterizedType: ObjectStream<Event>(40) into SingleVariableDeclaration(42) at 0", "Insert ParameterizedType: ObjectStream<Event>(74) into SingleVariableDeclaration(76) at 0", "Insert SimpleType: ObjectStream(37) into ParameterizedType: ObjectStream<Event>(40) at 0", "Insert SimpleType: Event(39) into ParameterizedType: ObjectStream<Event>(40) at 1", "Insert SimpleType: ObjectStream(71) into ParameterizedType: ObjectStream<Event>(74) at 0", "Insert SimpleType: Event(73) into ParameterizedType: ObjectStream<Event>(74) at 1", "Update SimpleName: EventStream(34) to ObjectStream", "Move SimpleName: EventStream(34) into SimpleType: ObjectStream(37) at 0", "Insert SimpleName: Event(38) into SimpleType: Event(39) at 0", "Update SimpleName: EventStream(65) to ObjectStream", "Move SimpleName: EventStream(65) into SimpleType: ObjectStream(71) at 0", "Insert SimpleName: Event(72) into SimpleType: Event(73) at 0", "Delete SimpleType: EventStream(35)", "Delete SimpleType: EventStream(66)"]}}, {"RealValueFileEventStream_cluster": {"actions": [{"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from next to read", "operations": ["UPD SimpleName: next from next to read"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 4", "operations": ["INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS IfStatement to Block at 1", "INS MethodInvocation to Assignment: = at 1", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS SimpleName: readLine to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS NullLiteral to InfixExpression: != at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to ReturnStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: line to VariableDeclarationFragment at 0", "INS Assignment: = to ParenthesizedExpression at 0", "INS ReturnStatement to Block at 2", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: line to Assignment: = at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: reader to MethodInvocation at 0", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}]}}, {"RealValueFileEventStream_diff": {"operations": ["Insert MarkerAnnotation(233) into MethodDeclaration(309) at 0", "Update SimpleName: next(235) to read", "Insert SimpleType: IOException(239) into MethodDeclaration(309) at 4", "Insert Block(308) into MethodDeclaration(309) at 5", "Insert SimpleName: Override(232) into MarkerAnnotation(233) at 0", "Insert SimpleName: IOException(238) into SimpleType: IOException(239) at 0", "Insert VariableDeclarationStatement(244) into Block(308) at 0", "Insert IfStatement(305) into Block(308) at 1", "Insert ReturnStatement(307) into Block(308) at 2", "Insert SimpleType: String(241) into VariableDeclarationStatement(244) at 0", "Insert VariableDeclarationFragment(243) into VariableDeclarationStatement(244) at 1", "Insert InfixExpression: !=(252) into IfStatement(305) at 0", "Move Block(287) into IfStatement(305) at 1", "Insert NullLiteral(306) into ReturnStatement(307) at 0", "Insert SimpleName: String(240) into SimpleType: String(241) at 0", "Insert SimpleName: line(242) into VariableDeclarationFragment(243) at 0", "Insert ParenthesizedExpression(250) into InfixExpression: !=(252) at 0", "Insert NullLiteral(251) into InfixExpression: !=(252) at 1", "Insert Assignment: =(249) into ParenthesizedExpression(250) at 0", "Insert SimpleName: line(245) into Assignment: =(249) at 0", "Insert MethodInvocation(248) into Assignment: =(249) at 1", "Insert SimpleName: reader(246) into MethodInvocation(248) at 0", "Insert SimpleName: readLine(247) into MethodInvocation(248) at 1"]}}, {"SequenceStream_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "UPDATE from Iterable<Sequence> to ObjectStream<Sequence>", "operations": ["UPD ParameterizedType: Iterable<Sequence> from Iterable<Sequence> to ObjectStream<Sequence>"]}, {"root": "UPDATE from Iterable to ObjectStream", "operations": ["UPD SimpleType: Iterable from Iterable to ObjectStream", "UPD SimpleName: Iterable from Iterable to ObjectStream"]}]}}, {"SequenceStream_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(39) at 1", "Insert QualifiedName: opennlp.tools.util.ObjectStream(2) into ImportDeclaration(3) at 0", "Update ParameterizedType: Iterable<Sequence>(11) to ObjectStream<Sequence>", "Update SimpleType: Iterable(8) to ObjectStream", "Update SimpleName: Iterable(7) to ObjectStream"]}}, {"SequenceStreamEventStream_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: java.io.IOException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: java.util.Arrays to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 3", "operations": ["INS ImportDeclaration to CompilationUnit at 3", "INS QualifiedName: java.util.Collections to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to TypeDeclaration: class at 3", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to TypeDeclaration: class at 3", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS Modifier: final to FieldDeclaration at 1", "operations": ["INS Modifier: final to FieldDeclaration at 1"]}, {"root": "INS SimpleType: SequenceStream to FieldDeclaration at 2", "operations": ["INS SimpleType: SequenceStream to FieldDeclaration at 2"]}, {"root": "INS Modifier: private to FieldDeclaration at 0", "operations": ["INS Modifier: private to FieldDeclaration at 0"]}, {"root": "INS ParameterizedType: Iterator<Event> to FieldDeclaration at 1", "operations": ["INS ParameterizedType: Iterator<Event> to FieldDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: Event to MethodDeclaration at 2"]}, {"root": "UPDATE from hasNext to read", "operations": ["UPD SimpleName: hasNext from hasNext to read", "UPD SimpleName: next from next to read"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 5", "operations": ["INS SimpleType: IOException to MethodDeclaration at 5", "INS SimpleName: IOException to SimpleType: IOException at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 2", "operations": ["INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "UPDATE from next to reset", "operations": ["UPD SimpleName: next from next to reset"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 5", "operations": ["INS SimpleType: IOException to MethodDeclaration at 5", "INS SimpleName: IOException to SimpleType: IOException at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: UnsupportedOperationException to MethodDeclaration at 6"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from remove to close", "operations": ["UPD SimpleName: remove from remove to close"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 4", "operations": ["INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "UPDATE from Sequence to SequenceStream", "operations": ["UPD SimpleName: Sequence from Sequence to SequenceStream"]}, {"root": "MOVE from SimpleType: SequenceStream", "operations": ["MOV SimpleName: Sequence to SimpleType: SequenceStream at 0"]}, {"root": "UPDATE from sequenceIterator to sequenceStream", "operations": ["UPD SimpleName: sequenceIterator from sequenceIterator to sequenceStream", "UPD SimpleName: sequenceIterator from sequenceIterator to sequenceStream", "UPD SimpleName: sequenceIterator from sequenceIterator to sequenceStream"]}, {"root": "MOVE from ParameterizedType: Iterator<Event>", "operations": ["MOV SimpleType: Iterator to ParameterizedType: Iterator<Event> at 0"]}, {"root": "MOVE from ParameterizedType: Iterator<Event>", "operations": ["MOV SimpleType: Event to ParameterizedType: Iterator<Event> at 1"]}, {"root": "UPDATE from events to eventIt", "operations": ["UPD SimpleName: events from events to eventIt", "UPD SimpleName: sequenceIterator from sequenceIterator to eventIt", "UPD SimpleName: events from events to eventIt"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Collections to MethodInvocation at 0", "INS SimpleName: emptyListIterator to MethodInvocation at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: hasNext to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: eventIt to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: sequenceStream to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: reset to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: close to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: sequenceStream to MethodInvocation at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "INS NullLiteral to ReturnStatement at 0", "operations": ["INS NullLiteral to ReturnStatement at 0"]}, {"root": "INS SimpleName: sequenceStream to Assignment: = at 1", "operations": ["INS SimpleName: sequenceStream to Assignment: = at 1"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: sequence to InfixExpression: != at 0"]}, {"root": "INS IfStatement to Block at 2", "operations": ["INS IfStatement to Block at 2", "INS Block to IfStatement at 1", "INS SimpleName: hasNext to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: eventIt to MethodInvocation at 0"]}, {"root": "INS ParameterizedType: Sequence<?> to VariableDeclarationStatement at 0", "operations": ["INS ParameterizedType: Sequence<?> to VariableDeclarationStatement at 0", "INS WildcardType: ? to ParameterizedType: Sequence<?> at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: hasNext to MethodInvocation at 1", "MOV SimpleName: sequenceIterator to MethodInvocation at 0"]}, {"root": "UPDATE from hasNext to next", "operations": ["UPD SimpleName: hasNext from hasNext to next"]}, {"root": "MOVE from ParameterizedType: Sequence<?>", "operations": ["MOV SimpleType: Sequence to ParameterizedType: Sequence<?> at 0"]}, {"root": "UPDATE from s to sequence", "operations": ["UPD SimpleName: s from s to sequence"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ReturnStatement to Block at 0"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS SimpleName: read to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0"]}, {"root": "INS MethodInvocation to Assignment: = at 1", "operations": ["INS SimpleName: asList to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: iterator to MethodInvocation at 1", "INS SimpleName: sequence to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from s to Arrays", "operations": ["UPD SimpleName: s from s to Arrays"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getEvents to MethodInvocation at 1", "MOV SimpleName: s to MethodInvocation at 0"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL ParameterizedType: Iterator<Sequence>", "operations": ["DEL SimpleType: Sequence", "DEL ParameterizedType: Iterator<Sequence>"]}, {"root": "DEL FieldDeclaration", "operations": ["DEL SimpleName: eventIndex", "DEL VariableDeclarationFragment", "DEL PrefixExpression: -", "DEL NumberLiteral: 1", "DEL FieldDeclaration", "DEL PrimitiveType: int"]}, {"root": "DEL ArrayType: Event[]", "operations": ["DEL ArrayType: Event[]", "DEL Dimension"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: sequenceStream", "DEL SimpleName: iterator", "DEL MethodInvocation"]}, {"root": "DEL PrimitiveType: boolean", "operations": ["DEL PrimitiveType: boolean"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL NumberLiteral: 0", "DEL Assignment: =", "DEL SimpleName: eventIndex", "DEL ExpressionStatement"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL IfStatement", "operations": ["DEL NullLiteral", "DEL SimpleName: events", "DEL IfStatement", "DEL InfixExpression: <", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL ReturnStatement", "DEL BooleanLiteral: true", "DEL Block", "DEL InfixExpression: !=", "DEL Block", "DEL InfixExpression: &&", "DEL QualifiedName: events.length", "DEL SimpleName: eventIndex"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: eventIndex", "DEL ArrayAccess", "DEL SimpleName: events", "DEL PostfixExpression: ++"]}, {"root": "DEL ThrowStatement", "operations": ["DEL ClassInstanceCreation", "DEL ThrowStatement"]}]}}, {"SequenceStreamEventStream_diff": {"operations": ["Insert ImportDeclaration(3) into CompilationUnit(140) at 1", "Insert ImportDeclaration(5) into CompilationUnit(140) at 2", "Insert ImportDeclaration(7) into CompilationUnit(140) at 3", "Insert ImportDeclaration(11) into CompilationUnit(140) at 5", "Insert QualifiedName: java.io.IOException(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: java.util.Arrays(4) into ImportDeclaration(5) at 0", "Insert QualifiedName: java.util.Collections(6) into ImportDeclaration(7) at 0", "Insert QualifiedName: opennlp.tools.util.ObjectStream(10) into ImportDeclaration(11) at 0", "Insert ParameterizedType: ObjectStream<Event>(21) into TypeDeclaration: class(139) at 3", "Insert SimpleType: ObjectStream(18) into ParameterizedType: ObjectStream<Event>(21) at 0", "Insert SimpleType: Event(20) into ParameterizedType: ObjectStream<Event>(21) at 1", "Insert Modifier: final(23) into FieldDeclaration(28) at 1", "Insert SimpleType: SequenceStream(25) into FieldDeclaration(28) at 2", "Insert Modifier: private(29) into FieldDeclaration(40) at 0", "Insert ParameterizedType: Iterator<Event>(34) into FieldDeclaration(40) at 1", "Insert MarkerAnnotation(56) into MethodDeclaration(110) at 0", "Move SimpleType: Event(27) into MethodDeclaration(110) at 2", "Update SimpleName: hasNext(51) to read", "Insert SimpleType: IOException(62) into MethodDeclaration(110) at 4", "Insert MarkerAnnotation(112) into MethodDeclaration(125) at 0", "Insert PrimitiveType: void(114) into MethodDeclaration(125) at 2", "Update SimpleName: next(97) to reset", "Insert SimpleType: IOException(117) into MethodDeclaration(125) at 4", "Move SimpleType: UnsupportedOperationException(109) into MethodDeclaration(125) at 6", "Insert MarkerAnnotation(127) into MethodDeclaration(138) at 0", "Update SimpleName: remove(107) to close", "Insert SimpleType: IOException(132) into MethodDeclaration(138) at 4", "Update SimpleName: EventStream(9) to ObjectStream", "Move SimpleName: EventStream(9) into SimpleType: ObjectStream(18) at 0", "Insert SimpleName: Event(19) into SimpleType: Event(20) at 0", "Update SimpleName: Sequence(14) to SequenceStream", "Move SimpleName: Sequence(14) into SimpleType: SequenceStream(25) at 0", "Update SimpleName: sequenceIterator(17) to sequenceStream", "Move SimpleType: Iterator(13) into ParameterizedType: Iterator<Event>(34) at 0", "Move SimpleType: Event(96) into ParameterizedType: Iterator<Event>(34) at 1", "Update SimpleName: events(30) to eventIt", "Insert MethodInvocation(38) into VariableDeclarationFragment(39) at 1", "Insert SimpleName: Override(55) into MarkerAnnotation(56) at 0", "Insert SimpleName: IOException(61) into SimpleType: IOException(62) at 0", "Insert IfStatement(106) into Block(109) at 0", "Move ReturnStatement(87) into Block(109) at 1", "Insert SimpleName: Override(111) into MarkerAnnotation(112) at 0", "Insert SimpleName: IOException(116) into SimpleType: IOException(117) at 0", "Insert ExpressionStatement(123) into Block(124) at 0", "Insert SimpleName: Override(126) into MarkerAnnotation(127) at 0", "Insert SimpleName: IOException(131) into SimpleType: IOException(132) at 0", "Insert ExpressionStatement(136) into Block(137) at 0", "Insert SimpleName: Collections(36) into MethodInvocation(38) at 0", "Insert SimpleName: emptyListIterator(37) into MethodInvocation(38) at 1", "Insert MethodInvocation(65) into IfStatement(106) at 0", "Insert Block(70) into IfStatement(106) at 1", "Move Block(85) into IfStatement(106) at 2", "Insert NullLiteral(107) into ReturnStatement(108) at 0", "Insert MethodInvocation(122) into ExpressionStatement(123) at 0", "Insert MethodInvocation(135) into ExpressionStatement(136) at 0", "Insert SimpleName: sequenceStream(50) into Assignment: =(51) at 1", "Insert SimpleName: eventIt(63) into MethodInvocation(65) at 0", "Insert SimpleName: hasNext(64) into MethodInvocation(65) at 1", "Insert ExpressionStatement(69) into Block(70) at 0", "Insert IfStatement(96) into Block(105) at 1", "Insert IfStatement(104) into Block(105) at 2", "Insert SimpleName: sequenceStream(120) into MethodInvocation(122) at 0", "Insert SimpleName: reset(121) into MethodInvocation(122) at 1", "Insert SimpleName: sequenceStream(133) into MethodInvocation(135) at 0", "Insert SimpleName: close(134) into MethodInvocation(135) at 1", "Update SimpleName: sequenceIterator(40) to sequenceStream", "Insert MethodInvocation(68) into ExpressionStatement(69) at 0", "Insert ParameterizedType: Sequence<?>(74) into VariableDeclarationStatement(80) at 0", "Insert InfixExpression: !=(83) into IfStatement(96) at 0", "Insert Block(95) into IfStatement(96) at 1", "Insert MethodInvocation(99) into IfStatement(104) at 0", "Insert Block(103) into IfStatement(104) at 1", "Update SimpleName: sequenceIterator(62) to eventIt", "Move SimpleName: sequenceIterator(62) into MethodInvocation(68) at 0", "Update SimpleName: hasNext(63) to next", "Move SimpleName: hasNext(63) into MethodInvocation(68) at 1", "Move SimpleType: Sequence(66) into ParameterizedType: Sequence<?>(74) at 0", "Insert WildcardType: ?(73) into ParameterizedType: Sequence<?>(74) at 1", "Update SimpleName: s(67) to sequence", "Insert SimpleName: sequence(81) into InfixExpression: !=(83) at 0", "Insert NullLiteral(82) into InfixExpression: !=(83) at 1", "Move ExpressionStatement(82) into Block(95) at 0", "Insert SimpleName: eventIt(97) into MethodInvocation(99) at 0", "Insert SimpleName: hasNext(98) into MethodInvocation(99) at 1", "Move ReturnStatement(84) into Block(103) at 0", "Update SimpleName: sequenceIterator(68) to sequenceStream", "Update SimpleName: next(69) to read", "Insert MethodInvocation(101) into ReturnStatement(102) at 0", "Update SimpleName: events(77) to eventIt", "Insert MethodInvocation(92) into Assignment: =(93) at 1", "Insert SimpleName: read(100) into MethodInvocation(101) at 0", "Insert MethodInvocation(90) into MethodInvocation(92) at 0", "Insert SimpleName: iterator(91) into MethodInvocation(92) at 1", "Update SimpleName: s(78) to Arrays", "Move SimpleName: s(78) into MethodInvocation(90) at 0", "Insert SimpleName: asList(86) into MethodInvocation(90) at 1", "Insert MethodInvocation(89) into MethodInvocation(90) at 2", "Insert SimpleName: sequence(87) into MethodInvocation(89) at 0", "Move SimpleName: getEvents(79) into MethodInvocation(89) at 1", "Delete SimpleType: EventStream(10)", "Delete SimpleType: Sequence(15)", "Delete ParameterizedType: Iterator<Sequence>(16)", "Delete PrimitiveType: int(20)", "Delete SimpleName: eventIndex(21)", "Delete NumberLiteral: 1(22)", "Delete PrefixExpression: -(23)", "Delete VariableDeclarationFragment(24)", "Delete FieldDeclaration(25)", "Delete Dimension(28)", "Delete ArrayType: Event[](29)", "Delete SimpleName: sequenceStream(42)", "Delete SimpleName: iterator(43)", "Delete MethodInvocation(44)", "Delete PrimitiveType: boolean(50)", "Delete MethodInvocation(80)", "Delete BooleanLiteral: true(83)", "Delete SimpleName: eventIndex(73)", "Delete NumberLiteral: 0(74)", "Delete Assignment: =(75)", "Delete ExpressionStatement(76)", "Delete BooleanLiteral: false(86)", "Delete SimpleName: events(52)", "Delete NullLiteral(53)", "Delete InfixExpression: !=(54)", "Delete SimpleName: eventIndex(55)", "Delete QualifiedName: events.length(56)", "Delete InfixExpression: <(57)", "Delete InfixExpression: &&(58)", "Delete BooleanLiteral: true(59)", "Delete ReturnStatement(60)", "Delete Block(61)", "Delete MethodInvocation(64)", "Delete Block(88)", "Delete IfStatement(89)", "Delete Block(90)", "Delete IfStatement(91)", "Delete SimpleName: events(98)", "Delete SimpleName: eventIndex(99)", "Delete PostfixExpression: ++(100)", "Delete ArrayAccess(101)", "Delete ReturnStatement(102)", "Delete ClassInstanceCreation(110)", "Delete ThrowStatement(111)"]}}, {"TwoPassDataIndexer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 15", "operations": ["INS QualifiedName: opennlp.tools.util.ObjectStream to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 15"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: ev to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 4", "operations": ["INS SimpleName: ev to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 4"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Event to VariableDeclarationStatement at 0"]}, {"root": "INS InfixExpression: != to WhileStatement at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: != to WhileStatement at 0", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS Assignment: = to ParenthesizedExpression at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: ev to Assignment: = at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Event to VariableDeclarationStatement at 0"]}, {"root": "INS InfixExpression: != to WhileStatement at 0", "operations": ["INS ParenthesizedExpression to InfixExpression: != at 0", "INS MethodInvocation to Assignment: = at 1", "INS InfixExpression: != to WhileStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Assignment: = to ParenthesizedExpression at 0", "INS SimpleName: ev to Assignment: = at 0"]}, {"root": "UPDATE from EventStream to ObjectStream", "operations": ["UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream", "UPD SimpleName: EventStream from EventStream to ObjectStream"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from SimpleType: ObjectStream", "operations": ["MOV SimpleName: EventStream to SimpleType: ObjectStream at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: eventStream to MethodInvocation at 0", "MOV SimpleName: hasNext to MethodInvocation at 1"]}, {"root": "UPDATE from hasNext to read", "operations": ["UPD SimpleName: hasNext from hasNext to read", "UPD SimpleName: hasNext from hasNext to read"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: es to MethodInvocation at 0", "MOV SimpleName: hasNext to MethodInvocation at 1"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: next", "DEL SimpleName: ev", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: eventStream", "DEL VariableDeclarationStatement"]}, {"root": "DEL SimpleType: EventStream", "operations": ["DEL SimpleType: EventStream"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: es", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: next", "DEL SimpleName: ev", "DEL MethodInvocation"]}]}}, {"TwoPassDataIndexer_diff": {"operations": ["Insert ImportDeclaration(31) into CompilationUnit(734) at 15", "Insert QualifiedName: opennlp.tools.util.ObjectStream(30) into ImportDeclaration(31) at 0", "Insert ParameterizedType: ObjectStream<Event>(58) into SingleVariableDeclaration(60) at 0", "Insert ParameterizedType: ObjectStream<Event>(74) into SingleVariableDeclaration(76) at 0", "Insert ParameterizedType: ObjectStream<Event>(105) into SingleVariableDeclaration(107) at 0", "Insert ParameterizedType: ObjectStream<Event>(309) into SingleVariableDeclaration(311) at 0", "Insert VariableDeclarationStatement(371) into Block(472) at 3", "Insert ParameterizedType: ObjectStream<Event>(488) into SingleVariableDeclaration(490) at 0", "Insert VariableDeclarationStatement(558) into Block(731) at 4", "Insert SimpleType: ObjectStream(55) into ParameterizedType: ObjectStream<Event>(58) at 0", "Insert SimpleType: Event(57) into ParameterizedType: ObjectStream<Event>(58) at 1", "Insert SimpleType: ObjectStream(71) into ParameterizedType: ObjectStream<Event>(74) at 0", "Insert SimpleType: Event(73) into ParameterizedType: ObjectStream<Event>(74) at 1", "Insert SimpleType: ObjectStream(102) into ParameterizedType: ObjectStream<Event>(105) at 0", "Insert SimpleType: Event(104) into ParameterizedType: ObjectStream<Event>(105) at 1", "Insert SimpleType: ObjectStream(306) into ParameterizedType: ObjectStream<Event>(309) at 0", "Insert SimpleType: Event(308) into ParameterizedType: ObjectStream<Event>(309) at 1", "Move SimpleType: Event(357) into VariableDeclarationStatement(371) at 0", "Insert VariableDeclarationFragment(370) into VariableDeclarationStatement(371) at 1", "Insert InfixExpression: !=(379) into WhileStatement(409) at 0", "Insert SimpleType: ObjectStream(485) into ParameterizedType: ObjectStream<Event>(488) at 0", "Insert SimpleType: Event(487) into ParameterizedType: ObjectStream<Event>(488) at 1", "Move SimpleType: Event(539) into VariableDeclarationStatement(558) at 0", "Insert VariableDeclarationFragment(557) into VariableDeclarationStatement(558) at 1", "Insert InfixExpression: !=(566) into WhileStatement(716) at 0", "Update SimpleName: EventStream(52) to ObjectStream", "Move SimpleName: EventStream(52) into SimpleType: ObjectStream(55) at 0", "Insert SimpleName: Event(56) into SimpleType: Event(57) at 0", "Update SimpleName: EventStream(65) to ObjectStream", "Move SimpleName: EventStream(65) into SimpleType: ObjectStream(71) at 0", "Insert SimpleName: Event(72) into SimpleType: Event(73) at 0", "Update SimpleName: EventStream(93) to ObjectStream", "Move SimpleName: EventStream(93) into SimpleType: ObjectStream(102) at 0", "Insert SimpleName: Event(103) into SimpleType: Event(104) at 0", "Update SimpleName: EventStream(294) to ObjectStream", "Move SimpleName: EventStream(294) into SimpleType: ObjectStream(306) at 0", "Insert SimpleName: Event(307) into SimpleType: Event(308) at 0", "Insert SimpleName: ev(369) into VariableDeclarationFragment(370) at 0", "Insert ParenthesizedExpression(377) into InfixExpression: !=(379) at 0", "Insert NullLiteral(378) into InfixExpression: !=(379) at 1", "Update SimpleName: EventStream(468) to ObjectStream", "Move SimpleName: EventStream(468) into SimpleType: ObjectStream(485) at 0", "Insert SimpleName: Event(486) into SimpleType: Event(487) at 0", "Insert SimpleName: ev(556) into VariableDeclarationFragment(557) at 0", "Insert ParenthesizedExpression(564) into InfixExpression: !=(566) at 0", "Insert NullLiteral(565) into InfixExpression: !=(566) at 1", "Insert Assignment: =(376) into ParenthesizedExpression(377) at 0", "Insert Assignment: =(563) into ParenthesizedExpression(564) at 0", "Insert SimpleName: ev(372) into Assignment: =(376) at 0", "Insert MethodInvocation(375) into Assignment: =(376) at 1", "Insert SimpleName: ev(559) into Assignment: =(563) at 0", "Insert MethodInvocation(562) into Assignment: =(563) at 1", "Move SimpleName: eventStream(353) into MethodInvocation(375) at 0", "Update SimpleName: hasNext(354) to read", "Move SimpleName: hasNext(354) into MethodInvocation(375) at 1", "Move SimpleName: es(535) into MethodInvocation(562) at 0", "Update SimpleName: hasNext(536) to read", "Move SimpleName: hasNext(536) into MethodInvocation(562) at 1", "Delete SimpleType: EventStream(53)", "Delete SimpleType: EventStream(66)", "Delete SimpleType: EventStream(94)", "Delete SimpleType: EventStream(295)", "Delete MethodInvocation(355)", "Delete SimpleName: ev(358)", "Delete SimpleName: eventStream(359)", "Delete SimpleName: next(360)", "Delete MethodInvocation(361)", "Delete VariableDeclarationFragment(362)", "Delete VariableDeclarationStatement(363)", "Delete SimpleType: EventStream(469)", "Delete MethodInvocation(537)", "Delete SimpleName: ev(540)", "Delete SimpleName: es(541)", "Delete SimpleName: next(542)", "Delete MethodInvocation(543)", "Delete VariableDeclarationFragment(544)", "Delete VariableDeclarationStatement(545)"]}}, {"SimplePerceptronSequenceTrainer_cluster": {"actions": [{"root": "INS SimpleType: IOException to MethodDeclaration at 4", "operations": ["INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: IOException to MethodDeclaration at 4"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 4", "operations": ["INS SimpleType: IOException to MethodDeclaration at 4", "INS SimpleName: IOException to SimpleType: IOException at 0"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 4", "operations": ["INS SimpleType: IOException to MethodDeclaration at 4", "INS SimpleName: IOException to SimpleType: IOException at 0"]}, {"root": "INS ExpressionStatement to Block at 4", "operations": ["INS SimpleName: sequenceStream to MethodInvocation at 0", "INS SimpleName: reset to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 4"]}, {"root": "INS WhileStatement to Block at 5", "operations": ["INS MethodInvocation to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to WhileStatement at 0", "INS WhileStatement to Block at 5", "INS SimpleName: read to MethodInvocation at 1", "INS SimpleName: sequenceStream to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS SimpleName: sequenceStream to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 7", "INS SimpleName: reset to MethodInvocation at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 8", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 8", "INS SimpleName: sequence to VariableDeclarationFragment at 0"]}, {"root": "INS WhileStatement to Block at 9", "operations": ["INS SimpleName: sequence to Assignment: = at 0", "INS SimpleName: read to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS SimpleName: sequenceStream to MethodInvocation at 0", "INS Assignment: = to ParenthesizedExpression at 0", "INS InfixExpression: != to WhileStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS WhileStatement to Block at 9", "INS MethodInvocation to Assignment: = at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: sequenceStream to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: reset to MethodInvocation at 1", "INS ExpressionStatement to Block at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: sequence to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3"]}, {"root": "INS WhileStatement to Block at 4", "operations": ["INS Assignment: = to ParenthesizedExpression at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: read to MethodInvocation at 1", "INS InfixExpression: != to WhileStatement at 0", "INS SimpleName: sequence to Assignment: = at 0", "INS SimpleName: sequenceStream to MethodInvocation at 0", "INS WhileStatement to Block at 4", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "MOVE from WhileStatement", "operations": ["MOV Block to WhileStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Sequence to VariableDeclarationStatement at 0"]}, {"root": "MOVE from WhileStatement", "operations": ["MOV Block to WhileStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Sequence to VariableDeclarationStatement at 0"]}, {"root": "MOVE from WhileStatement", "operations": ["MOV Block to WhileStatement at 1"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SingleVariableDeclaration", "DEL SimpleName: Sequence", "DEL SimpleType: Sequence", "DEL EnhancedForStatement", "DEL SimpleName: sequenceStream", "DEL SimpleName: s"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL EnhancedForStatement", "DEL SimpleName: sequence", "DEL SingleVariableDeclaration", "DEL SimpleName: sequenceStream"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL SimpleName: sequenceStream", "DEL SimpleName: sequence"]}]}}, {"SimplePerceptronSequenceTrainer_diff": {"operations": ["Insert SimpleType: IOException(700) into MethodDeclaration(765) at 4", "Insert SimpleType: IOException(789) into MethodDeclaration(1490) at 4", "Insert SimpleType: IOException(1501) into MethodDeclaration(1602) at 4", "Insert ExpressionStatement(380) into Block(691) at 4", "Insert WhileStatement(390) into Block(691) at 5", "Insert SimpleName: IOException(699) into SimpleType: IOException(700) at 0", "Insert SimpleName: IOException(788) into SimpleType: IOException(789) at 0", "Insert ExpressionStatement(866) into Block(1489) at 7", "Insert VariableDeclarationStatement(871) into Block(1489) at 8", "Insert WhileStatement(1351) into Block(1489) at 9", "Insert SimpleName: IOException(1500) into SimpleType: IOException(1501) at 0", "Insert ExpressionStatement(1515) into Block(1601) at 2", "Insert VariableDeclarationStatement(1520) into Block(1601) at 3", "Insert WhileStatement(1584) into Block(1601) at 4", "Insert MethodInvocation(379) into ExpressionStatement(380) at 0", "Insert InfixExpression: !=(385) into WhileStatement(390) at 0", "Move Block(385) into WhileStatement(390) at 1", "Insert MethodInvocation(865) into ExpressionStatement(866) at 0", "Move SimpleType: Sequence(856) into VariableDeclarationStatement(871) at 0", "Insert VariableDeclarationFragment(870) into VariableDeclarationStatement(871) at 1", "Insert InfixExpression: !=(879) into WhileStatement(1351) at 0", "Move Block(1330) into WhileStatement(1351) at 1", "Insert MethodInvocation(1514) into ExpressionStatement(1515) at 0", "Move SimpleType: Sequence(1491) into VariableDeclarationStatement(1520) at 0", "Insert VariableDeclarationFragment(1519) into VariableDeclarationStatement(1520) at 1", "Insert InfixExpression: !=(1528) into WhileStatement(1584) at 0", "Move Block(1549) into WhileStatement(1584) at 1", "Insert SimpleName: sequenceStream(377) into MethodInvocation(379) at 0", "Insert SimpleName: reset(378) into MethodInvocation(379) at 1", "Insert MethodInvocation(383) into InfixExpression: !=(385) at 0", "Insert NullLiteral(384) into InfixExpression: !=(385) at 1", "Insert SimpleName: sequenceStream(863) into MethodInvocation(865) at 0", "Insert SimpleName: reset(864) into MethodInvocation(865) at 1", "Insert SimpleName: sequence(869) into VariableDeclarationFragment(870) at 0", "Insert ParenthesizedExpression(877) into InfixExpression: !=(879) at 0", "Insert NullLiteral(878) into InfixExpression: !=(879) at 1", "Insert SimpleName: sequenceStream(1512) into MethodInvocation(1514) at 0", "Insert SimpleName: reset(1513) into MethodInvocation(1514) at 1", "Insert SimpleName: sequence(1518) into VariableDeclarationFragment(1519) at 0", "Insert ParenthesizedExpression(1526) into InfixExpression: !=(1528) at 0", "Insert NullLiteral(1527) into InfixExpression: !=(1528) at 1", "Insert SimpleName: sequenceStream(381) into MethodInvocation(383) at 0", "Insert SimpleName: read(382) into MethodInvocation(383) at 1", "Insert Assignment: =(876) into ParenthesizedExpression(877) at 0", "Insert Assignment: =(1525) into ParenthesizedExpression(1526) at 0", "Insert SimpleName: sequence(872) into Assignment: =(876) at 0", "Insert MethodInvocation(875) into Assignment: =(876) at 1", "Insert SimpleName: sequence(1521) into Assignment: =(1525) at 0", "Insert MethodInvocation(1524) into Assignment: =(1525) at 1", "Insert SimpleName: sequenceStream(873) into MethodInvocation(875) at 0", "Insert SimpleName: read(874) into MethodInvocation(875) at 1", "Insert SimpleName: sequenceStream(1522) into MethodInvocation(1524) at 0", "Insert SimpleName: read(1523) into MethodInvocation(1524) at 1", "Delete SimpleName: Sequence(377)", "Delete SimpleType: Sequence(378)", "Delete SimpleName: s(379)", "Delete SingleVariableDeclaration(380)", "Delete SimpleName: sequenceStream(381)", "Delete EnhancedForStatement(386)", "Delete SimpleName: sequence(857)", "Delete SingleVariableDeclaration(858)", "Delete SimpleName: sequenceStream(859)", "Delete EnhancedForStatement(1331)", "Delete SimpleName: sequence(1492)", "Delete SingleVariableDeclaration(1493)", "Delete SimpleName: sequenceStream(1494)", "Delete EnhancedForStatement(1550)"]}}, {"Parser_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: opennlp.tools.ml.model.Event to ImportDeclaration at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL QualifiedName: opennlp.tools.ml.model.EventStream", "DEL SimpleType: opennlp.tools.ml.model.EventStream"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL SimpleType: opennlp.tools.ml.model.EventStream", "DEL QualifiedName: opennlp.tools.ml.model.EventStream"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL SimpleType: opennlp.tools.ml.model.EventStream", "DEL QualifiedName: opennlp.tools.ml.model.EventStream"]}]}}, {"Parser_diff": {"operations": ["Insert ImportDeclaration(23) into CompilationUnit(1603) at 11", "Insert QualifiedName: opennlp.tools.ml.model.Event(22) into ImportDeclaration(23) at 0", "Insert ParameterizedType: ObjectStream<Event>(1122) into SingleVariableDeclaration(1124) at 0", "Insert SimpleType: ObjectStream(1119) into ParameterizedType: ObjectStream<Event>(1122) at 0", "Insert SimpleType: Event(1121) into ParameterizedType: ObjectStream<Event>(1122) at 1", "Insert ParameterizedType: ObjectStream<Event>(1272) into VariableDeclarationStatement(1282) at 0", "Insert ParameterizedType: ObjectStream<Event>(1381) into VariableDeclarationStatement(1390) at 0", "Insert SimpleName: ObjectStream(1118) into SimpleType: ObjectStream(1119) at 0", "Insert SimpleName: Event(1120) into SimpleType: Event(1121) at 0", "Insert SimpleType: ObjectStream(1269) into ParameterizedType: ObjectStream<Event>(1272) at 0", "Insert SimpleType: Event(1271) into ParameterizedType: ObjectStream<Event>(1272) at 1", "Insert SimpleType: ObjectStream(1378) into ParameterizedType: ObjectStream<Event>(1381) at 0", "Insert SimpleType: Event(1380) into ParameterizedType: ObjectStream<Event>(1381) at 1", "Insert SimpleName: ObjectStream(1268) into SimpleType: ObjectStream(1269) at 0", "Insert SimpleName: Event(1270) into SimpleType: Event(1271) at 0", "Insert SimpleName: ObjectStream(1377) into SimpleType: ObjectStream(1378) at 0", "Insert SimpleName: Event(1379) into SimpleType: Event(1380) at 0", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(1116)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(1117)", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(1263)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(1264)", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(1369)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(1370)"]}}, {"ParserEventStream_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 10", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Event to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 10", "INS SimpleName: event to VariableDeclarationFragment at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS InfixExpression: != to WhileStatement at 0", "operations": ["INS InfixExpression: != to WhileStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Assignment: = to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: event to Assignment: = at 0"]}, {"root": "UPDATE from es to event", "operations": ["UPD SimpleName: es from es to event"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: es to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: hasNext to MethodInvocation at 1", "MOV SimpleName: es to MethodInvocation at 0"]}, {"root": "UPDATE from hasNext to read", "operations": ["UPD SimpleName: hasNext from hasNext to read"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL SimpleType: opennlp.tools.ml.model.EventStream", "DEL QualifiedName: opennlp.tools.ml.model.EventStream"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: next", "DEL MethodInvocation"]}]}}, {"ParserEventStream_diff": {"operations": ["Insert VariableDeclarationStatement(811) into Block(827) at 10", "Insert ParameterizedType: ObjectStream<Event>(787) into VariableDeclarationStatement(806) at 0", "Insert SimpleType: Event(808) into VariableDeclarationStatement(811) at 0", "Insert VariableDeclarationFragment(810) into VariableDeclarationStatement(811) at 1", "Insert InfixExpression: !=(819) into WhileStatement(826) at 0", "Insert SimpleType: ObjectStream(784) into ParameterizedType: ObjectStream<Event>(787) at 0", "Insert SimpleType: Event(786) into ParameterizedType: ObjectStream<Event>(787) at 1", "Insert SimpleName: Event(807) into SimpleType: Event(808) at 0", "Insert SimpleName: event(809) into VariableDeclarationFragment(810) at 0", "Insert ParenthesizedExpression(817) into InfixExpression: !=(819) at 0", "Insert NullLiteral(818) into InfixExpression: !=(819) at 1", "Insert SimpleName: ObjectStream(783) into SimpleType: ObjectStream(784) at 0", "Insert SimpleName: Event(785) into SimpleType: Event(786) at 0", "Insert Assignment: =(816) into ParenthesizedExpression(817) at 0", "Insert SimpleName: event(812) into Assignment: =(816) at 0", "Insert MethodInvocation(815) into Assignment: =(816) at 1", "Update SimpleName: es(809) to event", "Move SimpleName: es(809) into MethodInvocation(823) at 2", "Move SimpleName: es(804) into MethodInvocation(815) at 0", "Update SimpleName: hasNext(805) to read", "Move SimpleName: hasNext(805) into MethodInvocation(815) at 1", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(783)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(784)", "Delete MethodInvocation(806)", "Delete SimpleName: next(810)", "Delete MethodInvocation(811)"]}}, {"Parser_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 11", "operations": ["INS ImportDeclaration to CompilationUnit at 11", "INS QualifiedName: opennlp.tools.ml.model.Event to ImportDeclaration at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to SingleVariableDeclaration at 0", "INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleName: Event to SimpleType: Event at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL QualifiedName: opennlp.tools.ml.model.EventStream", "DEL SimpleType: opennlp.tools.ml.model.EventStream"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL SimpleType: opennlp.tools.ml.model.EventStream", "DEL QualifiedName: opennlp.tools.ml.model.EventStream"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL SimpleType: opennlp.tools.ml.model.EventStream", "DEL QualifiedName: opennlp.tools.ml.model.EventStream"]}]}}, {"Parser_diff": {"operations": ["Insert ImportDeclaration(23) into CompilationUnit(1603) at 11", "Insert QualifiedName: opennlp.tools.ml.model.Event(22) into ImportDeclaration(23) at 0", "Insert ParameterizedType: ObjectStream<Event>(1122) into SingleVariableDeclaration(1124) at 0", "Insert SimpleType: ObjectStream(1119) into ParameterizedType: ObjectStream<Event>(1122) at 0", "Insert SimpleType: Event(1121) into ParameterizedType: ObjectStream<Event>(1122) at 1", "Insert ParameterizedType: ObjectStream<Event>(1272) into VariableDeclarationStatement(1282) at 0", "Insert ParameterizedType: ObjectStream<Event>(1381) into VariableDeclarationStatement(1390) at 0", "Insert SimpleName: ObjectStream(1118) into SimpleType: ObjectStream(1119) at 0", "Insert SimpleName: Event(1120) into SimpleType: Event(1121) at 0", "Insert SimpleType: ObjectStream(1269) into ParameterizedType: ObjectStream<Event>(1272) at 0", "Insert SimpleType: Event(1271) into ParameterizedType: ObjectStream<Event>(1272) at 1", "Insert SimpleType: ObjectStream(1378) into ParameterizedType: ObjectStream<Event>(1381) at 0", "Insert SimpleType: Event(1380) into ParameterizedType: ObjectStream<Event>(1381) at 1", "Insert SimpleName: ObjectStream(1268) into SimpleType: ObjectStream(1269) at 0", "Insert SimpleName: Event(1270) into SimpleType: Event(1271) at 0", "Insert SimpleName: ObjectStream(1377) into SimpleType: ObjectStream(1378) at 0", "Insert SimpleName: Event(1379) into SimpleType: Event(1380) at 0", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(1116)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(1117)", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(1263)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(1264)", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(1369)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(1370)"]}}, {"ParserEventStream_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 10", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Event to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 10", "INS SimpleName: event to VariableDeclarationFragment at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: ObjectStream to ParameterizedType: ObjectStream<Event> at 0", "INS SimpleType: Event to ParameterizedType: ObjectStream<Event> at 1", "INS ParameterizedType: ObjectStream<Event> to VariableDeclarationStatement at 0", "INS SimpleName: ObjectStream to SimpleType: ObjectStream at 0", "INS SimpleName: Event to SimpleType: Event at 0"]}, {"root": "INS InfixExpression: != to WhileStatement at 0", "operations": ["INS InfixExpression: != to WhileStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Assignment: = to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: != at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: event to Assignment: = at 0"]}, {"root": "UPDATE from es to event", "operations": ["UPD SimpleName: es from es to event"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: es to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: hasNext to MethodInvocation at 1", "MOV SimpleName: es to MethodInvocation at 0"]}, {"root": "UPDATE from hasNext to read", "operations": ["UPD SimpleName: hasNext from hasNext to read"]}, {"root": "DEL SimpleType: opennlp.tools.ml.model.EventStream", "operations": ["DEL SimpleType: opennlp.tools.ml.model.EventStream", "DEL QualifiedName: opennlp.tools.ml.model.EventStream"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: next", "DEL MethodInvocation"]}]}}, {"ParserEventStream_diff": {"operations": ["Insert VariableDeclarationStatement(811) into Block(827) at 10", "Insert ParameterizedType: ObjectStream<Event>(787) into VariableDeclarationStatement(806) at 0", "Insert SimpleType: Event(808) into VariableDeclarationStatement(811) at 0", "Insert VariableDeclarationFragment(810) into VariableDeclarationStatement(811) at 1", "Insert InfixExpression: !=(819) into WhileStatement(826) at 0", "Insert SimpleType: ObjectStream(784) into ParameterizedType: ObjectStream<Event>(787) at 0", "Insert SimpleType: Event(786) into ParameterizedType: ObjectStream<Event>(787) at 1", "Insert SimpleName: Event(807) into SimpleType: Event(808) at 0", "Insert SimpleName: event(809) into VariableDeclarationFragment(810) at 0", "Insert ParenthesizedExpression(817) into InfixExpression: !=(819) at 0", "Insert NullLiteral(818) into InfixExpression: !=(819) at 1", "Insert SimpleName: ObjectStream(783) into SimpleType: ObjectStream(784) at 0", "Insert SimpleName: Event(785) into SimpleType: Event(786) at 0", "Insert Assignment: =(816) into ParenthesizedExpression(817) at 0", "Insert SimpleName: event(812) into Assignment: =(816) at 0", "Insert MethodInvocation(815) into Assignment: =(816) at 1", "Update SimpleName: es(809) to event", "Move SimpleName: es(809) into MethodInvocation(823) at 2", "Move SimpleName: es(804) into MethodInvocation(815) at 0", "Update SimpleName: hasNext(805) to read", "Move SimpleName: hasNext(805) into MethodInvocation(815) at 1", "Delete QualifiedName: opennlp.tools.ml.model.EventStream(783)", "Delete SimpleType: opennlp.tools.ml.model.EventStream(784)", "Delete MethodInvocation(806)", "Delete SimpleName: next(810)", "Delete MethodInvocation(811)"]}}], "commit_stats": [{"total_files": 40, "deleted_files": 0, "testing": "True", "maintenance": "True", "build": "False"}]}