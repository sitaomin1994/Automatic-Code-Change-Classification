{"application": "google-guava", "csha": "566fc5d60f2b56232a6bd71e1f75c264f7f3b6b2", "files": [{"BaseEncoding_cluster": {"actions": [{"root": "UPDATE from final to abstract", "operations": ["UPD Modifier: final from final to abstract"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 16", "operations": ["INS ArrayAccess to InfixExpression: != at 0", "INS PrimitiveType: boolean to MethodDeclaration at 0", "INS NumberLiteral: 1 to PrefixExpression: - at 0", "INS InfixExpression: != to InfixExpression: && at 1", "INS PrefixExpression: - to InfixExpression: != at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: canDecode to MethodDeclaration at 1", "INS SimpleName: ch to InfixExpression: <= at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: ch to SingleVariableDeclaration at 1", "INS InfixExpression: <= to InfixExpression: && at 0", "INS MethodDeclaration to TypeDeclaration: class at 16", "INS PrimitiveType: char to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 3", "INS SimpleName: ch to ArrayAccess at 1", "INS InfixExpression: && to ReturnStatement at 0", "INS SimpleName: decodabet to ArrayAccess at 0", "INS QualifiedName: Ascii.MAX to InfixExpression: <= at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS SimpleName: i to VariableDeclarationFragment at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS MethodInvocation to MethodInvocation at 2", "INS BooleanLiteral: false to ReturnStatement at 0", "INS SimpleName: isValidPaddingStartPosition to MethodInvocation at 1", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS Block to ForStatement at 3", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: trimTrailingFrom to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: length to MethodInvocation at 1", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: canDecode to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS ForStatement to Block at 2", "INS SimpleName: padding to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: i to MethodInvocation at 2", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 2", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: length to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: chars to Assignment: = at 0", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: canDecode to MethodDeclaration at 3", "INS SimpleName: chars to MethodInvocation at 2", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleName: canDecode to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: separatorChars to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: delegate to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: removeFrom to MethodInvocation at 1", "INS SimpleName: canDecode to MethodDeclaration at 3", "INS Block to MethodDeclaration at 5", "INS SimpleName: chars to MethodInvocation at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 3"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: chars", "DEL Block", "DEL TryStatement", "DEL SimpleName: badInput", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: decodeChecked", "DEL SimpleType: DecodingException", "DEL SimpleName: DecodingException", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL CatchClause"]}]}}, {"BaseEncoding_diff": {"operations": ["Update Modifier: final(429) to abstract", "Insert MethodDeclaration(1376) into TypeDeclaration: class(1619) at 16", "Insert MethodDeclaration(2206) into TypeDeclaration: class(2839) at 13", "Insert MethodDeclaration(4073) into TypeDeclaration: class(4230) at 14", "Insert PrimitiveType: boolean(1359) into MethodDeclaration(1376) at 0", "Insert SimpleName: canDecode(1360) into MethodDeclaration(1376) at 1", "Insert SingleVariableDeclaration(1363) into MethodDeclaration(1376) at 2", "Insert Block(1375) into MethodDeclaration(1376) at 3", "Insert MarkerAnnotation(2150) into MethodDeclaration(2206) at 0", "Insert Modifier: public(2151) into MethodDeclaration(2206) at 1", "Insert PrimitiveType: boolean(2152) into MethodDeclaration(2206) at 2", "Insert SimpleName: canDecode(2153) into MethodDeclaration(2206) at 3", "Insert SingleVariableDeclaration(2157) into MethodDeclaration(2206) at 4", "Insert Block(2205) into MethodDeclaration(2206) at 5", "Insert MarkerAnnotation(4056) into MethodDeclaration(4073) at 0", "Insert Modifier: public(4057) into MethodDeclaration(4073) at 1", "Insert PrimitiveType: boolean(4058) into MethodDeclaration(4073) at 2", "Insert SimpleName: canDecode(4059) into MethodDeclaration(4073) at 3", "Insert SingleVariableDeclaration(4063) into MethodDeclaration(4073) at 4", "Insert Block(4072) into MethodDeclaration(4073) at 5", "Insert PrimitiveType: char(1361) into SingleVariableDeclaration(1363) at 0", "Insert SimpleName: ch(1362) into SingleVariableDeclaration(1363) at 1", "Insert ReturnStatement(1374) into Block(1375) at 0", "Insert SimpleName: Override(2149) into MarkerAnnotation(2150) at 0", "Insert SimpleType: CharSequence(2155) into SingleVariableDeclaration(2157) at 0", "Insert SimpleName: chars(2156) into SingleVariableDeclaration(2157) at 1", "Insert ExpressionStatement(2165) into Block(2205) at 0", "Insert IfStatement(2176) into Block(2205) at 1", "Insert ForStatement(2202) into Block(2205) at 2", "Move ReturnStatement(441) into Block(2205) at 3", "Insert SimpleName: Override(4055) into MarkerAnnotation(4056) at 0", "Insert SimpleType: CharSequence(4061) into SingleVariableDeclaration(4063) at 0", "Insert SimpleName: chars(4062) into SingleVariableDeclaration(4063) at 1", "Insert ReturnStatement(4071) into Block(4072) at 0", "Insert InfixExpression: &&(1373) into ReturnStatement(1374) at 0", "Insert SimpleName: CharSequence(2154) into SimpleType: CharSequence(2155) at 0", "Insert Assignment: =(2164) into ExpressionStatement(2165) at 0", "Insert PrefixExpression: !(2172) into IfStatement(2176) at 0", "Move Block(449) into IfStatement(2176) at 1", "Insert VariableDeclarationExpression(2181) into ForStatement(2202) at 0", "Insert InfixExpression: <(2186) into ForStatement(2202) at 1", "Insert PostfixExpression: ++(2188) into ForStatement(2202) at 2", "Insert Block(2201) into ForStatement(2202) at 3", "Insert SimpleName: CharSequence(4060) into SimpleType: CharSequence(4061) at 0", "Insert MethodInvocation(4070) into ReturnStatement(4071) at 0", "Insert InfixExpression: <=(1366) into InfixExpression: &&(1373) at 0", "Insert InfixExpression: !=(1372) into InfixExpression: &&(1373) at 1", "Insert SimpleName: chars(2158) into Assignment: =(2164) at 0", "Insert MethodInvocation(2163) into Assignment: =(2164) at 1", "Insert MethodInvocation(2171) into PrefixExpression: !(2172) at 0", "Insert PrimitiveType: int(2177) into VariableDeclarationExpression(2181) at 0", "Insert VariableDeclarationFragment(2180) into VariableDeclarationExpression(2181) at 1", "Insert SimpleName: i(2182) into InfixExpression: <(2186) at 0", "Insert MethodInvocation(2185) into InfixExpression: <(2186) at 1", "Insert SimpleName: i(2187) into PostfixExpression: ++(2188) at 0", "Insert IfStatement(2200) into Block(2201) at 0", "Insert SimpleName: delegate(4064) into MethodInvocation(4070) at 0", "Insert SimpleName: canDecode(4065) into MethodInvocation(4070) at 1", "Insert MethodInvocation(4069) into MethodInvocation(4070) at 2", "Insert SimpleName: ch(1364) into InfixExpression: <=(1366) at 0", "Insert QualifiedName: Ascii.MAX(1365) into InfixExpression: <=(1366) at 1", "Insert ArrayAccess(1369) into InfixExpression: !=(1372) at 0", "Insert PrefixExpression: -(1371) into InfixExpression: !=(1372) at 1", "Insert MethodInvocation(2160) into MethodInvocation(2163) at 0", "Insert SimpleName: trimTrailingFrom(2161) into MethodInvocation(2163) at 1", "Insert SimpleName: chars(2162) into MethodInvocation(2163) at 2", "Insert SimpleName: alphabet(2166) into MethodInvocation(2171) at 0", "Insert SimpleName: isValidPaddingStartPosition(2167) into MethodInvocation(2171) at 1", "Insert MethodInvocation(2170) into MethodInvocation(2171) at 2", "Insert SimpleName: i(2178) into VariableDeclarationFragment(2180) at 0", "Insert NumberLiteral: 0(2179) into VariableDeclarationFragment(2180) at 1", "Insert SimpleName: chars(2183) into MethodInvocation(2185) at 0", "Insert SimpleName: length(2184) into MethodInvocation(2185) at 1", "Insert PrefixExpression: !(2196) into IfStatement(2200) at 0", "Insert Block(2199) into IfStatement(2200) at 1", "Insert SimpleName: separatorChars(4066) into MethodInvocation(4069) at 0", "Insert SimpleName: removeFrom(4067) into MethodInvocation(4069) at 1", "Insert SimpleName: chars(4068) into MethodInvocation(4069) at 2", "Insert SimpleName: decodabet(1367) into ArrayAccess(1369) at 0", "Insert SimpleName: ch(1368) into ArrayAccess(1369) at 1", "Insert NumberLiteral: 1(1370) into PrefixExpression: -(1371) at 0", "Insert SimpleName: padding(2159) into MethodInvocation(2160) at 0", "Insert SimpleName: chars(2168) into MethodInvocation(2170) at 0", "Insert SimpleName: length(2169) into MethodInvocation(2170) at 1", "Insert MethodInvocation(2195) into PrefixExpression: !(2196) at 0", "Insert ReturnStatement(2198) into Block(2199) at 0", "Insert SimpleName: alphabet(2189) into MethodInvocation(2195) at 0", "Insert SimpleName: canDecode(2190) into MethodInvocation(2195) at 1", "Insert MethodInvocation(2194) into MethodInvocation(2195) at 2", "Insert BooleanLiteral: false(2197) into ReturnStatement(2198) at 0", "Insert SimpleName: chars(2191) into MethodInvocation(2194) at 0", "Insert SimpleName: charAt(2192) into MethodInvocation(2194) at 1", "Insert SimpleName: i(2193) into MethodInvocation(2194) at 2", "Delete SimpleName: decodeChecked(436)", "Delete SimpleName: chars(437)", "Delete MethodInvocation(438)", "Delete ExpressionStatement(439)", "Delete Block(442)", "Delete SimpleName: DecodingException(443)", "Delete SimpleType: DecodingException(444)", "Delete SimpleName: badInput(445)", "Delete SingleVariableDeclaration(446)", "Delete CatchClause(450)", "Delete TryStatement(451)", "Delete Block(452)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}