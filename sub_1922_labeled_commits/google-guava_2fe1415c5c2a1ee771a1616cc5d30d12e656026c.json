{"application": "google-guava", "csha": "2fe1415c5c2a1ee771a1616cc5d30d12e656026c", "files": [{"BaseEncoding_cluster": {"actions": [{"root": "INS TypeDeclaration: class to TypeDeclaration: class at 39", "operations": ["INS Dimension to ArrayType: char[] at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"Invalid input length \" to InfixExpression: + at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS Modifier: static to TypeDeclaration: class at 0", "INS SimpleName: alphabetChars to SingleVariableDeclaration at 1", "INS Modifier: final to FieldDeclaration at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrefixExpression: ++ to ForStatement at 2", "INS InfixExpression: | to VariableDeclarationFragment at 1", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: target to MethodInvocation at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: Base16Encoding to MethodDeclaration at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SimpleName: toCharArray to MethodInvocation at 1", "INS SimpleType: BaseEncoding to MethodDeclaration at 1", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Dimension to ArrayType: byte[] at 1", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: encode to MethodInvocation at 1", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: i to InfixExpression: & at 0", "INS InfixExpression: < to ForStatement at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS NullLiteral to SuperConstructorInvocation at 1", "INS SimpleName: newInstance to MethodDeclaration at 2", "INS ClassInstanceCreation to ConstructorInvocation at 0", "INS SimpleType: Alphabet to ClassInstanceCreation at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS InfixExpression: < to ForStatement at 1", "INS NumberLiteral: 16 to InfixExpression: == at 1", "INS SimpleType: DecodingException to MethodDeclaration at 5", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Base16Encoding to ClassInstanceCreation at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 39", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 0", "INS Assignment: += to ForStatement at 2", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: encoding to ArrayAccess at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: bytesWritten to VariableDeclarationFragment at 0", "INS PrimitiveType: byte to CastExpression at 0", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: encoding to ArrayAccess at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ExpressionStatement to Block at 1", "INS ArrayAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS IfStatement to Block at 2", "INS SimpleName: checkArgument to MethodInvocation at 0", "INS Block to MethodDeclaration at 6", "INS InfixExpression: << to InfixExpression: | at 0", "INS SimpleName: b to InfixExpression: | at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: encodeTo to MethodDeclaration at 2", "INS NumberLiteral: 256 to InfixExpression: < at 1", "INS Modifier: private to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS SimpleName: i to InfixExpression: >>> at 0", "INS NumberLiteral: 4 to InfixExpression: >>> at 1", "INS VariableDeclarationStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: Base16Encoding to MethodDeclaration at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: decoded to CastExpression at 1", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS SimpleName: decodeTo to MethodDeclaration at 2", "INS SimpleName: b to ArrayAccess at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: alphabetChars to MethodInvocation at 0", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: % at 0", "INS InfixExpression: < to ForStatement at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ArrayType: char[] to FieldDeclaration at 1", "INS CastExpression to Assignment: = at 1", "INS SimpleName: length to MethodInvocation at 1", "INS ArrayAccess to Assignment: = at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ForStatement to Block at 4", "INS SimpleName: i to Assignment: += at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS SimpleName: i to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS Block to IfStatement at 1", "INS Block to MethodDeclaration at 5", "INS ReturnStatement to Block at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleType: DecodingException to ClassInstanceCreation at 0", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS InfixExpression: | to ArrayAccess at 1", "INS ForStatement to Block at 2", "INS MethodInvocation to InfixExpression: | at 1", "INS NumberLiteral: 512 to ArrayCreation at 1", "INS SimpleName: bytesWritten to ReturnStatement at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SimpleName: i to InfixExpression: + at 0", "INS Block to MethodDeclaration at 3", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS ArrayAccess to InfixExpression: & at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS ThrowStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: IOException to MethodDeclaration at 7", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to ForStatement at 3", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS SimpleName: target to ArrayAccess at 0", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Dimension to ArrayType: char[] at 1", "INS SimpleName: Base16Encoding to SimpleType: Base16Encoding at 0", "INS SimpleName: decoded to VariableDeclarationFragment at 0", "INS SimpleName: encode to MethodInvocation at 1", "INS SimpleName: b to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS NumberLiteral: 4 to InfixExpression: << at 1", "INS NumberLiteral: 2 to InfixExpression: % at 1", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: paddingChar to SingleVariableDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS QualifiedName: bytes.length to MethodInvocation at 3", "INS PrefixExpression: ++ to ForStatement at 2", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Base16Encoding to TypeDeclaration: class at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS ArrayType: char[] to ArrayCreation at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Dimension to ArrayType: byte[] at 1", "INS ArrayAccess to MethodInvocation at 2", "INS SimpleName: BaseEncoding to SimpleType: BaseEncoding at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: | to ArrayAccess at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: name to ClassInstanceCreation at 1", "INS MethodInvocation to InfixExpression: << at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS NumberLiteral: 0x100 to InfixExpression: | at 1", "INS ForStatement to Block at 2", "INS VariableDeclarationExpression to ForStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: alphabet to ClassInstanceCreation at 1", "INS SimpleName: len to InfixExpression: < at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: charAt to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: off to InfixExpression: + at 0", "INS NumberLiteral: 0xF to InfixExpression: & at 1", "INS Block to ForStatement at 3", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleName: encoding to ArrayAccess at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS InfixExpression: + to ArrayAccess at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS InfixExpression: % to InfixExpression: == at 0", "INS ReturnStatement to Block at 5", "INS ArrayAccess to MethodInvocation at 2", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: checkPositionIndexes to MethodInvocation at 0", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS NumberLiteral: 0x100 to InfixExpression: | at 1", "INS SimpleName: i to InfixExpression: | at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: len to InfixExpression: + at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: off to MethodInvocation at 1", "INS SimpleName: encoding to ArrayAccess at 0", "INS QualifiedName: alphabet.chars.length to InfixExpression: == at 0", "INS NumberLiteral: 2 to Assignment: += at 1", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS ConstructorInvocation to Block at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS InfixExpression: & to VariableDeclarationFragment at 1", "INS SimpleName: chars to MethodInvocation at 1", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS Block to ForStatement at 3", "INS SimpleName: encoding to VariableDeclarationFragment at 0", "INS SimpleName: i to InfixExpression: + at 1", "INS SuperConstructorInvocation to Block at 0", "INS InfixExpression: >>> to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Modifier: final to TypeDeclaration: class at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: alphabet to SuperConstructorInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 40", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: << to InfixExpression: | at 1", "INS SimpleName: Base64Encoding to TypeDeclaration: class at 2", "INS SimpleName: paddingChar to SuperConstructorInvocation at 1", "INS Block to ForStatement at 3", "INS ThrowStatement to Block at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS Block to IfStatement at 1", "INS NumberLiteral: 8 to InfixExpression: << at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: decodeTo to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS ParenthesizedExpression to InfixExpression: << at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS SimpleName: remaining to InfixExpression: >= at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS InfixExpression: & to InfixExpression: | at 1", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS SimpleName: len to VariableDeclarationFragment at 1", "INS SimpleName: off to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: off to VariableDeclarationFragment at 1", "INS NumberLiteral: 64 to InfixExpression: == at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS NumberLiteral: 6 to InfixExpression: >>> at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: + to InfixExpression: < at 1", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: i to MethodInvocation at 3", "INS SimpleName: encode to MethodInvocation at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: remaining to Assignment: -= at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 4", "INS ConstructorInvocation to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS NumberLiteral: 3 to InfixExpression: >= at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS NumberLiteral: 3 to Assignment: -= at 1", "INS ArrayAccess to InfixExpression: & at 0", "INS Assignment: -= to ForStatement at 2", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleType: DecodingException to ClassInstanceCreation at 0", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleType: Base64Encoding to ClassInstanceCreation at 0", "INS QualifiedName: alphabet.chars.length to InfixExpression: == at 0", "INS SimpleName: BaseEncoding to SimpleType: BaseEncoding at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: i to InfixExpression: - at 1", "INS SimpleName: name to ClassInstanceCreation at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: Base64Encoding to MethodDeclaration at 0", "INS SimpleName: alphabet to SuperConstructorInvocation at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleType: BaseEncoding to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to InfixExpression: + at 1", "INS InfixExpression: | to InfixExpression: | at 0", "INS SimpleName: paddingChar to SingleVariableDeclaration at 2", "INS ArrayAccess to InfixExpression: & at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: encode to MethodInvocation at 1", "INS NumberLiteral: 0x3F to InfixExpression: & at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: bytes to ArrayAccess at 0", "INS IfStatement to Block at 3", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: + to InfixExpression: - at 0", "INS IfStatement to Block at 4", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: < to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS SimpleName: alphabetChars to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to ConstructorInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: chars to MethodInvocation at 2", "INS Modifier: final to TypeDeclaration: class at 1", "INS SimpleName: target to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: DecodingException to MethodDeclaration at 5", "INS SimpleName: checkArgument to MethodInvocation at 0", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SimpleName: length to MethodInvocation at 1", "INS NumberLiteral: 16 to InfixExpression: << at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ArrayAccess to InfixExpression: & at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: length to MethodInvocation at 1", "INS Modifier: static to TypeDeclaration: class at 0", "INS SimpleName: paddingChar to ClassInstanceCreation at 2", "INS SimpleName: toCharArray to MethodInvocation at 1", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: newInstance to MethodDeclaration at 2", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: encode to MethodInvocation at 1", "INS InfixExpression: >>> to MethodInvocation at 2", "INS SimpleName: off to InfixExpression: + at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS InfixExpression: >= to ForStatement at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: append to MethodInvocation at 1", "INS Block to MethodDeclaration at 8", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: len to InfixExpression: + at 1", "INS InfixExpression: - to MethodInvocation at 4", "INS SimpleName: encodeTo to MethodDeclaration at 2", "INS ExpressionStatement to Block at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: append to MethodInvocation at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: alphabetChars to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 6", "INS ReturnStatement to Block at 0", "INS SimpleName: chunk to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: Character to SimpleType: Character at 0", "INS StringLiteral: \"Invalid input length \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS NumberLiteral: 12 to InfixExpression: >>> at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS ExpressionStatement to Block at 4", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: chars to MethodInvocation at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS SimpleName: alphabet to ClassInstanceCreation at 1", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: len to InfixExpression: + at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS SimpleName: paddingChar to SingleVariableDeclaration at 2", "INS SimpleName: target to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: target to MethodInvocation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: Base64Encoding to SimpleType: Base64Encoding at 0", "INS SimpleName: chars to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: bytesWritten to ReturnStatement at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS Block to IfStatement at 1", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: isValidPaddingStartPosition to MethodInvocation at 1", "INS SimpleName: remaining to VariableDeclarationFragment at 0", "INS SimpleName: Base64Encoding to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: checkPositionIndexes to MethodInvocation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: paddingChar to ConstructorInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ForStatement to Block at 3", "INS SimpleName: Character to SimpleType: Character at 0", "INS InfixExpression: | to VariableDeclarationFragment at 1", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: chunk to InfixExpression: & at 0", "INS NumberLiteral: 18 to InfixExpression: >>> at 1", "INS ExpressionStatement to Block at 1", "INS SuperConstructorInvocation to Block at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS SimpleName: encode to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS SimpleName: target to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS InfixExpression: << to InfixExpression: | at 0", "INS MethodDeclaration to TypeDeclaration: class at 4", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: bytesWritten to VariableDeclarationFragment at 0", "INS NumberLiteral: 0x3F to InfixExpression: & at 1", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: encodeChunkTo to MethodInvocation at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS QualifiedName: bytes.length to MethodInvocation at 3", "INS SimpleName: alphabet to MethodInvocation at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 40", "INS ReturnStatement to Block at 6", "INS SimpleName: chars to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: len to InfixExpression: + at 1", "INS ParenthesizedExpression to InfixExpression: << at 0", "INS SimpleName: bytes to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS NumberLiteral: 0x3F to InfixExpression: & at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: trimTrailingFrom to MethodInvocation at 1", "INS SimpleName: padding to MethodInvocation at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS SimpleType: Appendable to SingleVariableDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 3", "INS ThrowStatement to Block at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodDeclaration at 3", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS ThrowStatement to Block at 0", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleType: Appendable to MethodDeclaration at 1", "INS ReturnStatement to Block at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: Appendable to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleType: Appendable to ClassInstanceCreation at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS Modifier: static to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: separatingAppendable to MethodDeclaration at 2", "INS SimpleName: delegate to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS ReturnStatement to Block at 3", "INS SimpleName: append to MethodDeclaration at 3", "INS Block to MethodDeclaration at 8", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleType: Appendable to MethodDeclaration at 2", "INS SimpleType: Appendable to MethodDeclaration at 2", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: delegate to SingleVariableDeclaration at 2", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS Block to MethodDeclaration at 6", "INS ThisExpression to ReturnStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS Block to MethodDeclaration at 6", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: separator to MethodInvocation at 2", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: IOException to MethodDeclaration at 7", "INS SimpleName: append to MethodDeclaration at 3", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS SimpleName: Writer to SimpleType: Writer at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: seperatingAppendable to VariableDeclarationFragment at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: write to MethodDeclaration at 3", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 8", "INS PrimitiveType: char to CastExpression at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleType: Writer to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Dimension to ArrayType: char[] at 1", "INS VariableDeclarationStatement to Block at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Writer to SimpleType: Writer at 0", "INS SimpleName: separatingWriter to MethodDeclaration at 3", "INS Block to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SimpleName: afterEveryChars to MethodInvocation at 3", "INS SimpleName: separator to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS ArrayType: char[] to SingleVariableDeclaration at 0", "INS SimpleType: Writer to ClassInstanceCreation at 0", "INS SimpleName: separatingAppendable to MethodInvocation at 0", "INS SimpleName: delegate to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS ThrowStatement to Block at 0", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS StringLiteral: \"Writer\" to SingleMemberAnnotation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: Writer to SimpleType: Writer at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleType: Writer to MethodDeclaration at 2", "INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: c to SingleVariableDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS CastExpression to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: seperatingAppendable to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: Appendable to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: String to SingleVariableDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: delegate to SingleVariableDeclaration at 2", "INS SimpleName: afterEveryChars to SingleVariableDeclaration at 2", "INS SimpleName: write to MethodDeclaration at 3", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleName: c to CastExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS ReturnStatement to Block at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: separator to SingleVariableDeclaration at 2", "INS PrimitiveType: char to ArrayType: char[] at 0"]}, {"root": "UPDATE from final to abstract", "operations": ["UPD Modifier: final from final to abstract", "UPD Modifier: final from final to abstract"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 1", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "UPDATE from encodingStream to encodeTo", "operations": ["UPD SimpleName: encodingStream from encodingStream to encodeTo", "UPD SimpleName: encodingStream from encodingStream to encodeTo"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: len to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 8", "operations": ["INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: IOException to MethodDeclaration at 8"]}, {"root": "INS PrimitiveType: int to MethodDeclaration at 1", "operations": ["INS PrimitiveType: int to MethodDeclaration at 1"]}, {"root": "INS SimpleName: decodeTo to MethodDeclaration at 2", "operations": ["INS SimpleName: decodeTo to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS Dimension to ArrayType: byte[] at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS SimpleType: DecodingException to MethodDeclaration at 7", "operations": ["INS SimpleType: DecodingException to MethodDeclaration at 7", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: BaseEncoding to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: BaseEncoding to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: BaseEncoding to FieldDeclaration at 3"]}, {"root": "INS SimpleName: StandardBaseEncoding to TypeDeclaration: class at 1", "operations": ["INS SimpleName: StandardBaseEncoding to TypeDeclaration: class at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SimpleName: encodeTo to MethodDeclaration at 2", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: len to InfixExpression: + at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to ForStatement at 3", "INS SimpleName: i to InfixExpression: - at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: i to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: off to MethodInvocation at 1", "INS QualifiedName: alphabet.bytesPerChunk to Assignment: += at 1", "INS ExpressionStatement to Block at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS QualifiedName: bytes.length to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: alphabet.bytesPerChunk to MethodInvocation at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: off to InfixExpression: + at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS Assignment: += to ForStatement at 2", "INS SimpleName: encodeChunkTo to MethodInvocation at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS Block to MethodDeclaration at 8", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS SimpleName: checkPositionIndexes to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS InfixExpression: + to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS SimpleName: min to MethodInvocation at 1", "INS SimpleName: len to InfixExpression: - at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: bytes to MethodInvocation at 2", "INS InfixExpression: - to MethodInvocation at 3", "INS ForStatement to Block at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: i to Assignment: += at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: bitOffset to InfixExpression: - at 0", "INS SimpleName: paddingChar to InfixExpression: != at 0", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS WhileStatement to Block at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: bitsProcessed to VariableDeclarationFragment at 0", "INS SimpleName: checkPositionIndexes to MethodInvocation at 0", "INS QualifiedName: alphabet.bitsPerChar to InfixExpression: - at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Assignment: <<= to ExpressionStatement at 0", "INS InfixExpression: & to Assignment: |= at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS InfixExpression: <= to MethodInvocation at 1", "INS SimpleName: bitBuffer to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: charIndex to MethodInvocation at 2", "INS QualifiedName: alphabet.bitsPerChar to Assignment: += at 1", "INS InfixExpression: * to InfixExpression: - at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: bitsProcessed to InfixExpression: - at 1", "INS ExpressionStatement to Block at 0", "INS QualifiedName: alphabet.bytesPerChunk to InfixExpression: <= at 1", "INS Block to WhileStatement at 1", "INS SimpleName: charIndex to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to InfixExpression: >>> at 1", "INS SimpleName: bitBuffer to Assignment: |= at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS InfixExpression: + to ParenthesizedExpression at 0", "INS SimpleName: bitsProcessed to Assignment: += at 0", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS SimpleName: bitOffset to VariableDeclarationFragment at 0", "INS SimpleName: encodeChunkTo to MethodDeclaration at 1", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: bitBuffer to InfixExpression: >>> at 0", "INS InfixExpression: < to WhileStatement at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS SimpleName: off to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS Assignment: += to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS SimpleName: target to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 1", "INS QualifiedName: bytes.length to MethodInvocation at 3", "INS SimpleName: bitsProcessed to InfixExpression: < at 0", "INS SimpleName: encode to MethodInvocation at 1", "INS SimpleName: len to InfixExpression: * at 0", "INS InfixExpression: * to InfixExpression: < at 1", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 3", "INS Block to ForStatement at 3", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS Assignment: += to ExpressionStatement at 0", "INS Block to MethodDeclaration at 7", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS QualifiedName: alphabet.bitsPerChar to Assignment: += at 1", "INS CastExpression to InfixExpression: & at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: charValue to MethodInvocation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS InfixExpression: * to InfixExpression: < at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: append to MethodInvocation at 1", "INS QualifiedName: alphabet.bytesPerChunk to InfixExpression: * at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: int to CastExpression at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS ParenthesizedExpression to CastExpression at 1", "INS VariableDeclarationStatement to Block at 6", "INS WhileStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: bitsProcessed to Assignment: += at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 1", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Block to WhileStatement at 1", "INS SimpleName: len to InfixExpression: + at 1", "INS SimpleName: target to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: alphabet.mask to InfixExpression: & at 1", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: < to WhileStatement at 0", "INS PrefixExpression: ++ to ForStatement at 2", "INS ParenthesizedExpression to InfixExpression: * at 0", "INS PrimitiveType: void to MethodDeclaration at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Assignment: |= to ExpressionStatement at 0", "INS SimpleName: bitBuffer to Assignment: <<= at 0", "INS SimpleName: len to InfixExpression: + at 0", "INS SimpleName: target to MethodInvocation at 1", "INS IfStatement to Block at 8", "INS SimpleName: bitsProcessed to InfixExpression: < at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: paddingChar to MethodInvocation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS NumberLiteral: 8 to Assignment: <<= at 1", "INS SimpleName: len to InfixExpression: < at 1", "INS InfixExpression: & to VariableDeclarationFragment at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS ForStatement to Block at 4", "INS SimpleName: len to InfixExpression: <= at 0", "INS SimpleName: checkArgument to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS NumberLiteral: 8 to Assignment: -= at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: chunk to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: bytesWritten to ReturnStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: length to MethodInvocation at 1", "INS QualifiedName: alphabet.bitsPerChar to InfixExpression: * at 1", "INS SimpleName: target to MethodInvocation at 1", "INS InfixExpression: < to IfStatement at 0", "INS ParenthesizedExpression to InfixExpression: * at 0", "INS SimpleName: charsProcessed to PostfixExpression: ++ at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to InfixExpression: + at 1", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Assignment: -= to ForStatement at 2", "INS MethodInvocation to MethodInvocation at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS SimpleName: chars to MethodInvocation at 2", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS QualifiedName: alphabet.charsPerChunk to Assignment: += at 1", "INS Dimension to ArrayType: byte[] at 1", "INS StringLiteral: \"Invalid input length \" to InfixExpression: + at 0", "INS SimpleName: offset to InfixExpression: >>> at 1", "INS SimpleName: minOffset to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: offset to InfixExpression: >= at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: padding to MethodInvocation at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: charIdx to VariableDeclarationFragment at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS ArrayAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS SimpleName: offset to VariableDeclarationFragment at 0", "INS QualifiedName: alphabet.bitsPerChar to Assignment: <<= at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to ForStatement at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: charIdx to InfixExpression: + at 0", "INS ForStatement to Block at 5", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS SimpleName: charIdx to InfixExpression: + at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS Assignment: |= to ExpressionStatement at 0", "INS Block to ForStatement at 3", "INS SimpleName: bytesWritten to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 4", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS InfixExpression: + to InfixExpression: < at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: chars to Assignment: = at 0", "INS SimpleName: chunk to Assignment: |= at 0", "INS SimpleName: length to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: offset to Assignment: -= at 0", "INS SimpleType: DecodingException to MethodDeclaration at 5", "INS Assignment: += to ForStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: decodeTo to MethodDeclaration at 2", "INS IfStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS PrimitiveType: byte to CastExpression at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: charsProcessed to InfixExpression: * at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS VariableDeclarationExpression to ForStatement at 0", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: chars to MethodInvocation at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS InfixExpression: * to InfixExpression: - at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: alphabet.bytesPerChunk to InfixExpression: * at 0", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS IfStatement to Block at 1", "INS SimpleName: target to ArrayAccess at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS PostfixExpression: ++ to InfixExpression: + at 1", "INS ExpressionStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: >= to ForStatement at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS ForStatement to Block at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Assignment: <<= to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS InfixExpression: * to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 6", "INS SimpleName: minOffset to InfixExpression: >= at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: chunk to Assignment: <<= at 0", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: alphabet.charsPerChunk to InfixExpression: < at 1", "INS InfixExpression: * to InfixExpression: - at 1", "INS QualifiedName: alphabet.bytesPerChunk to InfixExpression: - at 0", "INS SimpleName: isValidPaddingStartPosition to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: charIdx to Assignment: += at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: charIdx to InfixExpression: < at 0", "INS SimpleName: trimTrailingFrom to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: charsProcessed to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: decode to MethodInvocation at 1", "INS Block to ForStatement at 3", "INS VariableDeclarationExpression to ForStatement at 0", "INS ForStatement to Block at 2", "INS CastExpression to Assignment: = at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: |= at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS SimpleName: paddingChar to SingleVariableDeclaration at 2", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS SimpleType: BaseEncoding to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: alphabet to ClassInstanceCreation at 1", "INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: newInstance to MethodDeclaration at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS SimpleName: BaseEncoding to SimpleType: BaseEncoding at 0", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleName: paddingChar to ClassInstanceCreation at 2", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS SimpleType: Character to SingleVariableDeclaration at 1"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV SimpleType: StandardBaseEncoding to TypeDeclaration: class at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV SimpleType: StandardBaseEncoding to TypeDeclaration: class at 3"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"Reader\" to SingleMemberAnnotation at 1"]}, {"root": "UPDATE from CharInput to Reader", "operations": ["UPD SimpleName: CharInput from CharInput to Reader", "UPD SimpleName: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleName: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleName: CharInput from CharInput to Reader", "UPD SimpleName: CharInput from CharInput to Reader"]}, {"root": "UPDATE from ignoringInput to ignoringReader", "operations": ["UPD SimpleName: ignoringInput from ignoringInput to ignoringReader", "UPD SimpleName: ignoringInput from ignoringInput to ignoringReader"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleName: afterEveryChars to MethodInvocation at 3", "INS SimpleName: off to MethodInvocation at 4", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleName: separator to MethodInvocation at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: bytes to MethodInvocation at 3", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: delegate to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: encodeTo to MethodInvocation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS PrimitiveType: void to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: separatingAppendable to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: len to MethodInvocation at 5", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 8", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS SimpleName: encodeTo to MethodDeclaration at 2", "INS SimpleName: target to MethodInvocation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 12"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleName: decodeTo to MethodDeclaration at 2", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SimpleName: separatorChars to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: target to MethodInvocation at 2", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SimpleName: chars to MethodInvocation at 2", "INS Dimension to ArrayType: byte[] at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: removeFrom to MethodInvocation at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Block to MethodDeclaration at 6", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: decodeTo to MethodInvocation at 1", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: delegate to MethodInvocation at 0", "INS SimpleType: DecodingException to MethodDeclaration at 5"]}, {"root": "INS TryStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TryStatement to Block at 3", "INS Block to TryStatement at 0"]}, {"root": "UPDATE from CharOutput to Appendable", "operations": ["UPD SimpleName: CharOutput from CharOutput to Appendable", "UPD SimpleType: CharOutput from CharOutput to Appendable"]}, {"root": "UPDATE from charOutput to target", "operations": ["UPD SimpleName: charOutput from charOutput to target"]}, {"root": "UPDATE from CharInput to CharSequence", "operations": ["UPD SimpleName: CharInput from CharInput to CharSequence", "UPD SimpleType: CharInput from CharInput to CharSequence"]}, {"root": "UPDATE from charInput to chars", "operations": ["UPD SimpleName: charInput from charInput to chars", "UPD SimpleName: separator from separator to chars", "UPD SimpleName: separator from separator to chars"]}, {"root": "INS SimpleType: DecodingException to MethodDeclaration at 3", "operations": ["INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SimpleType: DecodingException to MethodDeclaration at 3"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"Writer,OutputStream\" to SingleMemberAnnotation at 1"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "UPDATE from ByteOutput to OutputStream", "operations": ["UPD SimpleName: ByteOutput from ByteOutput to OutputStream", "UPD SimpleName: ByteOutput from ByteOutput to OutputStream", "UPD SimpleName: ByteOutput from ByteOutput to OutputStream", "UPD SimpleType: ByteOutput from ByteOutput to OutputStream", "UPD SimpleType: ByteOutput from ByteOutput to OutputStream", "UPD SimpleType: ByteOutput from ByteOutput to OutputStream"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 6"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS StringLiteral: \"Reader,InputStream\" to SingleMemberAnnotation at 1"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "UPDATE from ByteInput to InputStream", "operations": ["UPD SimpleType: ByteInput from ByteInput to InputStream", "UPD SimpleName: ByteInput from ByteInput to InputStream", "UPD SimpleName: ByteInput from ByteInput to InputStream", "UPD SimpleType: ByteInput from ByteInput to InputStream", "UPD SimpleName: ByteInput from ByteInput to InputStream", "UPD SimpleType: ByteInput from ByteInput to InputStream"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: IOException to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 0", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS StringLiteral: \"Writer,OutputStream\" to SingleMemberAnnotation at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS StringLiteral: \"Reader,InputStream\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "UPDATE from CharOutput to StringBuilder", "operations": ["UPD SimpleName: CharOutput from CharOutput to StringBuilder", "UPD SimpleType: CharOutput from CharOutput to StringBuilder"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "INS PrimitiveType: int to VariableDeclarationStatement at 0", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from StandardBaseEncoding to Base64Encoding", "operations": ["UPD SimpleType: StandardBaseEncoding from StandardBaseEncoding to Base64Encoding", "UPD SimpleType: StandardBaseEncoding from StandardBaseEncoding to Base64Encoding", "UPD SimpleName: StandardBaseEncoding from StandardBaseEncoding to Base64Encoding", "UPD SimpleName: StandardBaseEncoding from StandardBaseEncoding to Base64Encoding"]}, {"root": "UPDATE from StandardBaseEncoding to Base16Encoding", "operations": ["UPD SimpleType: StandardBaseEncoding from StandardBaseEncoding to Base16Encoding", "UPD SimpleName: StandardBaseEncoding from StandardBaseEncoding to Base16Encoding"]}, {"root": "UPDATE from CharOutput to Writer", "operations": ["UPD SimpleType: CharOutput from CharOutput to Writer", "UPD SimpleType: CharOutput from CharOutput to Writer", "UPD SimpleName: CharOutput from CharOutput to Writer", "UPD SimpleName: CharOutput from CharOutput to Writer"]}, {"root": "UPDATE from CharOutput to Character", "operations": ["UPD SimpleName: CharOutput from CharOutput to Character", "UPD SimpleName: CharOutput from CharOutput to Character", "UPD SimpleType: CharOutput from CharOutput to Character"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: CharOutput to SingleVariableDeclaration at 1", "MOV SimpleName: delegate to SingleVariableDeclaration at 2"]}, {"root": "UPDATE from delegate to paddingChar", "operations": ["UPD SimpleName: delegate from delegate to paddingChar"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 5", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from input to reader", "operations": ["UPD SimpleName: input from input to reader", "UPD SimpleName: input from input to reader"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0"]}, {"root": "UPDATE from index to len", "operations": ["UPD SimpleName: index from index to len", "UPD SimpleName: decodedInput from decodedInput to len", "UPD SimpleName: byteOutput from byteOutput to len"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV PostfixExpression: ++ to MethodInvocation at 2", "MOV VariableDeclarationExpression to ForStatement at 0", "MOV InfixExpression: < to ForStatement at 1"]}, {"root": "MOVE from ForStatement", "operations": ["MOV PostfixExpression: ++ to ForStatement at 2", "MOV VariableDeclarationExpression to ForStatement at 0"]}, {"root": "MOVE from SimpleType: Character", "operations": ["MOV SimpleName: CharOutput to SimpleType: Character at 0"]}, {"root": "INS VariableDeclarationExpression to ForStatement at 0", "operations": ["INS SimpleName: i to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1"]}, {"root": "INS Block to ForStatement at 2", "operations": ["INS CastExpression to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS PostfixExpression: ++ to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: << at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: length to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS InfixExpression: << to VariableDeclarationFragment at 1", "INS PrimitiveType: byte to CastExpression at 0", "INS SimpleName: target to ArrayAccess at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: target to ArrayAccess at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS Block to ForStatement at 2", "INS SimpleName: chars to MethodInvocation at 0", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: chunk to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS InfixExpression: << to Assignment: |= at 1", "INS SimpleName: length to MethodInvocation at 1", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS NumberLiteral: 6 to InfixExpression: << at 1", "INS ExpressionStatement to Block at 1", "INS InfixExpression: << to Assignment: |= at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS CastExpression to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: chunk to InfixExpression: & at 0", "INS ArrayAccess to Assignment: = at 0", "INS NumberLiteral: 12 to InfixExpression: << at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS IfStatement to Block at 3", "INS PrimitiveType: byte to CastExpression at 0", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS ArrayAccess to Assignment: = at 0", "INS MethodInvocation to InfixExpression: << at 0", "INS NumberLiteral: 18 to InfixExpression: << at 1", "INS Block to IfStatement at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: charAt to MethodInvocation at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS Assignment: |= to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: << at 0", "INS CastExpression to Assignment: = at 1", "INS NumberLiteral: 16 to InfixExpression: >>> at 1", "INS SimpleName: target to ArrayAccess at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS PostfixExpression: ++ to MethodInvocation at 2", "INS PrimitiveType: byte to CastExpression at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS SimpleName: chunk to Assignment: |= at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS NumberLiteral: 8 to InfixExpression: >>> at 1", "INS Block to IfStatement at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS Assignment: |= to ExpressionStatement at 0", "INS SimpleName: chunk to Assignment: |= at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS SimpleName: chunk to InfixExpression: >>> at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "UPDATE from decodingStream to decodeTo", "operations": ["UPD SimpleName: decodingStream from decodingStream to decodeTo"]}, {"root": "UPDATE from asCharInput to tmp", "operations": ["UPD SimpleName: asCharInput from asCharInput to tmp"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: asCharInput to MethodInvocation at 1", "MOV SimpleName: chars to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: alphabet to MethodInvocation at 1", "INS SimpleName: newInstance to MethodInvocation at 0", "INS NullLiteral to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: StandardBaseEncoding to ClassInstanceCreation at 0"]}, {"root": "UPDATE from CharOutput to Alphabet", "operations": ["UPD SimpleName: CharOutput from CharOutput to Alphabet", "UPD SimpleType: CharOutput from CharOutput to Alphabet"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: CharOutput to ClassInstanceCreation at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 1", "operations": ["INS ThrowStatement to Block at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleType: IOException to MethodDeclaration at 7", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Dimension to ArrayType: char[] at 1", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: cbuf to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SimpleName: read to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS Block to MethodDeclaration at 8", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS ArrayType: char[] to SingleVariableDeclaration at 0"]}, {"root": "MOVE from AnonymousClassDeclaration", "operations": ["MOV MethodDeclaration to AnonymousClassDeclaration at 2", "MOV MethodDeclaration to AnonymousClassDeclaration at 3", "MOV FieldDeclaration to AnonymousClassDeclaration at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: encodingStream to MethodInvocation at 0", "MOV SimpleName: result to MethodInvocation at 1"]}, {"root": "UPDATE from byteOutput to bytes", "operations": ["UPD SimpleName: byteOutput from byteOutput to bytes"]}, {"root": "MOVE from InfixExpression: &", "operations": ["MOV ArrayAccess to InfixExpression: & at 0", "MOV SimpleName: write to MethodInvocation at 3", "MOV SimpleName: byteOutput to MethodInvocation at 2"]}, {"root": "UPDATE from write to off", "operations": ["UPD SimpleName: write from write to off"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: byteOutput to MethodInvocation at 4"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: alphabet to MethodInvocation at 1", "INS SimpleName: newInstance to MethodInvocation at 0", "INS SimpleName: padChar to MethodInvocation at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "UPDATE from separatingOutput to separatingWriter", "operations": ["UPD SimpleName: separatingOutput from separatingOutput to separatingWriter"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: DecodingException to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: i to PostfixExpression: ++ at 0", "operations": ["INS SimpleName: i to PostfixExpression: ++ at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from byte to int", "operations": ["UPD PrimitiveType: byte from byte to int"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS SimpleName: paddingChar to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: upper to MethodInvocation at 1", "INS SimpleName: newInstance to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS SimpleName: lower to MethodInvocation at 1", "INS SimpleName: newInstance to MethodInvocation at 0", "INS SimpleName: paddingChar to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from write to append", "operations": ["UPD SimpleName: write from write to append"]}, {"root": "INS Assignment: |= to ExpressionStatement at 0", "operations": ["INS SimpleName: chunk to Assignment: |= at 0", "INS Assignment: |= to ExpressionStatement at 0", "INS MethodInvocation to Assignment: |= at 1"]}, {"root": "MOVE from PostfixExpression: ++", "operations": ["MOV SimpleName: i to PostfixExpression: ++ at 0"]}, {"root": "UPDATE from delegate to alphabet", "operations": ["UPD SimpleName: delegate from delegate to alphabet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: delegate to MethodInvocation at 0", "MOV SimpleName: write to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from write to decode", "operations": ["UPD SimpleName: write from write to decode"]}, {"root": "INS PostfixExpression: ++ to MethodInvocation at 2", "operations": ["INS SimpleName: i to PostfixExpression: ++ at 0", "INS PostfixExpression: ++ to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.io.GwtWorkarounds.asCharInput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.io.GwtWorkarounds.asCharOutput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.asInputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.asOutputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.io.GwtWorkarounds.stringBuilderOutput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.ByteInput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.ByteOutput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.CharInput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.CharOutput", "DEL ImportDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: stringBuilderOutput"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: ByteOutput", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: byteOutput", "DEL SimpleType: ByteOutput"]}, {"root": "DEL TryStatement", "operations": ["DEL CatchClause", "DEL ClassInstanceCreation", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: impossible", "DEL ThrowStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: AssertionError", "DEL SimpleName: close", "DEL TryStatement", "DEL Block", "DEL StringLiteral: \"impossible\"", "DEL ForStatement", "DEL ExpressionStatement", "DEL SimpleType: AssertionError", "DEL ExpressionStatement", "DEL Block"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: asCharOutput", "DEL MethodInvocation", "DEL SimpleName: asOutputStream", "DEL SimpleName: encodingStream", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: writer", "DEL MethodInvocation", "DEL Block"]}, {"root": "DEL SimpleType: ByteInput", "operations": ["DEL SimpleName: ByteInput", "DEL SimpleType: ByteInput"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL SimpleName: index", "DEL VariableDeclarationFragment"]}, {"root": "DEL TryStatement", "operations": ["DEL Block", "DEL SimpleName: decodedInput", "DEL SingleVariableDeclaration", "DEL VariableDeclarationExpression", "DEL Assignment: =", "DEL PostfixExpression: ++", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: read", "DEL SimpleName: i", "DEL ForStatement", "DEL SimpleName: tmp", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL SimpleName: badInput", "DEL TryStatement", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: i", "DEL InfixExpression: !=", "DEL NumberLiteral: 1", "DEL SimpleName: read", "DEL CatchClause", "DEL SimpleName: badInput", "DEL ArrayAccess", "DEL ThrowStatement", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL PrimitiveType: byte", "DEL SimpleName: index", "DEL SimpleName: decodedInput", "DEL ExpressionStatement", "DEL Block", "DEL Assignment: ="]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: asInputStream", "DEL MethodInvocation", "DEL SimpleName: asCharInput", "DEL MethodInvocation", "DEL SimpleName: reader", "DEL Block", "DEL SimpleName: decodingStream"]}, {"root": "DEL SimpleType: ByteOutput", "operations": ["DEL SimpleName: ByteOutput", "DEL SimpleType: ByteOutput"]}, {"root": "DEL SimpleType: ByteInput", "operations": ["DEL SimpleType: ByteInput", "DEL SimpleName: ByteInput"]}, {"root": "DEL SimpleName: decodingStream", "operations": ["DEL SimpleName: decodingStream"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: StandardBaseEncoding", "operations": ["DEL SimpleName: StandardBaseEncoding"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleType: StandardBaseEncoding", "DEL NullLiteral", "DEL SimpleName: alphabet", "DEL SimpleName: StandardBaseEncoding"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: padChar", "DEL ClassInstanceCreation", "DEL SimpleName: alphabet"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: upper", "DEL SimpleName: paddingChar"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: paddingChar", "DEL SimpleName: lower"]}, {"root": "DEL SimpleName: i", "operations": ["DEL SimpleName: i"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: static", "DEL SimpleType: CharOutput", "DEL AnonymousClassDeclaration", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL Block", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: separatingOutput", "DEL Block", "DEL SimpleName: write", "DEL Block", "DEL ReturnStatement", "DEL SingleVariableDeclaration"]}]}}, {"BaseEncoding_diff": {"operations": ["Insert TypeDeclaration: class(3022) into TypeDeclaration: class(4120) at 39", "Insert TypeDeclaration: class(3421) into TypeDeclaration: class(4120) at 40", "Insert MethodDeclaration(3647) into TypeDeclaration: class(4120) at 42", "Insert MethodDeclaration(3755) into TypeDeclaration: class(4120) at 43", "Update Modifier: final(359) to abstract", "Move VariableDeclarationStatement(567) into Block(534) at 3", "Update Modifier: final(660) to abstract", "Insert PrimitiveType: void(619) into MethodDeclaration(638) at 1", "Update SimpleName: encodingStream(737) to encodeTo", "Insert SingleVariableDeclaration(629) into MethodDeclaration(638) at 4", "Insert SingleVariableDeclaration(632) into MethodDeclaration(638) at 5", "Insert SingleVariableDeclaration(635) into MethodDeclaration(638) at 6", "Insert SimpleType: IOException(637) into MethodDeclaration(638) at 7", "Insert PrimitiveType: int(647) into MethodDeclaration(660) at 1", "Insert SimpleName: decodeTo(648) into MethodDeclaration(660) at 2", "Insert SingleVariableDeclaration(653) into MethodDeclaration(660) at 3", "Insert SimpleType: DecodingException(659) into MethodDeclaration(660) at 5", "Move SimpleType: BaseEncoding(1092) into FieldDeclaration(775) at 3", "Move SimpleType: BaseEncoding(864) into FieldDeclaration(832) at 3", "Move SimpleType: BaseEncoding(921) into FieldDeclaration(1002) at 3", "Insert SimpleName: StandardBaseEncoding(1572) into TypeDeclaration: class(2739) at 1", "Insert MethodDeclaration(1931) into TypeDeclaration: class(2739) at 10", "Insert MethodDeclaration(2076) into TypeDeclaration: class(2739) at 11", "Insert MethodDeclaration(2265) into TypeDeclaration: class(2739) at 13", "Insert MethodDeclaration(2681) into TypeDeclaration: class(2739) at 22", "Insert Modifier: static(2740) into TypeDeclaration: class(3022) at 0", "Insert Modifier: final(2741) into TypeDeclaration: class(3022) at 1", "Insert SimpleName: Base16Encoding(2742) into TypeDeclaration: class(3022) at 2", "Move SimpleType: StandardBaseEncoding(2326) into TypeDeclaration: class(3022) at 3", "Insert FieldDeclaration(2756) into TypeDeclaration: class(3022) at 4", "Insert MethodDeclaration(2775) into TypeDeclaration: class(3022) at 5", "Insert MethodDeclaration(2828) into TypeDeclaration: class(3022) at 6", "Insert MethodDeclaration(2902) into TypeDeclaration: class(3022) at 7", "Insert MethodDeclaration(2999) into TypeDeclaration: class(3022) at 8", "Insert MethodDeclaration(3021) into TypeDeclaration: class(3022) at 9", "Insert Modifier: static(3023) into TypeDeclaration: class(3421) at 0", "Insert Modifier: final(3024) into TypeDeclaration: class(3421) at 1", "Insert SimpleName: Base64Encoding(3025) into TypeDeclaration: class(3421) at 2", "Move SimpleType: StandardBaseEncoding(2234) into TypeDeclaration: class(3421) at 3", "Insert MethodDeclaration(3053) into TypeDeclaration: class(3421) at 4", "Insert MethodDeclaration(3076) into TypeDeclaration: class(3421) at 5", "Insert MethodDeclaration(3223) into TypeDeclaration: class(3421) at 6", "Insert MethodDeclaration(3397) into TypeDeclaration: class(3421) at 7", "Insert MethodDeclaration(3420) into TypeDeclaration: class(3421) at 8", "Insert SingleMemberAnnotation(3424) into MethodDeclaration(3524) at 0", "Update SimpleType: CharInput(2445) to Reader", "Update SimpleName: ignoringInput(2446) to ignoringReader", "Insert Modifier: static(3525) into MethodDeclaration(3647) at 0", "Insert SimpleType: Appendable(3527) into MethodDeclaration(3647) at 1", "Insert SimpleName: separatingAppendable(3528) into MethodDeclaration(3647) at 2", "Insert SingleVariableDeclaration(3533) into MethodDeclaration(3647) at 3", "Move SingleVariableDeclaration(2532) into MethodDeclaration(3647) at 4", "Move SingleVariableDeclaration(2536) into MethodDeclaration(3647) at 5", "Insert Block(3646) into MethodDeclaration(3647) at 6", "Insert SingleMemberAnnotation(3650) into MethodDeclaration(3755) at 0", "Insert Modifier: static(3651) into MethodDeclaration(3755) at 1", "Insert SimpleType: Writer(3653) into MethodDeclaration(3755) at 2", "Insert SimpleName: separatingWriter(3654) into MethodDeclaration(3755) at 3", "Insert SingleVariableDeclaration(3659) into MethodDeclaration(3755) at 4", "Insert SingleVariableDeclaration(3664) into MethodDeclaration(3755) at 5", "Insert SingleVariableDeclaration(3668) into MethodDeclaration(3755) at 6", "Insert Block(3754) into MethodDeclaration(3755) at 7", "Insert MethodDeclaration(3948) into TypeDeclaration: class(4119) at 12", "Insert MethodDeclaration(3988) into TypeDeclaration: class(4119) at 14", "Insert TryStatement(290) into Block(295) at 3", "Update SimpleType: CharOutput(739) to Appendable", "Update SimpleName: charOutput(740) to target", "Insert ArrayType: byte[](627) into SingleVariableDeclaration(629) at 0", "Insert SimpleName: bytes(628) into SingleVariableDeclaration(629) at 1", "Insert PrimitiveType: int(630) into SingleVariableDeclaration(632) at 0", "Insert SimpleName: off(631) into SingleVariableDeclaration(632) at 1", "Insert PrimitiveType: int(633) into SingleVariableDeclaration(635) at 0", "Insert SimpleName: len(634) into SingleVariableDeclaration(635) at 1", "Insert SimpleName: IOException(636) into SimpleType: IOException(637) at 0", "Insert ArrayType: byte[](651) into SingleVariableDeclaration(653) at 0", "Insert SimpleName: target(652) into SingleVariableDeclaration(653) at 1", "Update SimpleType: CharInput(755) to CharSequence", "Update SimpleName: charInput(756) to chars", "Insert SimpleName: DecodingException(658) into SimpleType: DecodingException(659) at 0", "Insert SimpleType: DecodingException(1334) into MethodDeclaration(1371) at 3", "Insert SingleMemberAnnotation(1695) into MethodDeclaration(1868) at 0", "Insert Modifier: public(1698) into MethodDeclaration(1868) at 2", "Update SimpleType: ByteOutput(1798) to OutputStream", "Insert MarkerAnnotation(1870) into MethodDeclaration(1931) at 0", "Insert PrimitiveType: void(1871) into MethodDeclaration(1931) at 1", "Insert SimpleName: encodeTo(1872) into MethodDeclaration(1931) at 2", "Insert SingleVariableDeclaration(1876) into MethodDeclaration(1931) at 3", "Insert SingleVariableDeclaration(1881) into MethodDeclaration(1931) at 4", "Insert SingleVariableDeclaration(1884) into MethodDeclaration(1931) at 5", "Insert SingleVariableDeclaration(1887) into MethodDeclaration(1931) at 6", "Insert SimpleType: IOException(1889) into MethodDeclaration(1931) at 7", "Insert Block(1930) into MethodDeclaration(1931) at 8", "Insert PrimitiveType: void(1932) into MethodDeclaration(2076) at 0", "Insert SimpleName: encodeChunkTo(1933) into MethodDeclaration(2076) at 1", "Insert SingleVariableDeclaration(1937) into MethodDeclaration(2076) at 2", "Insert SingleVariableDeclaration(1942) into MethodDeclaration(2076) at 3", "Insert SingleVariableDeclaration(1945) into MethodDeclaration(2076) at 4", "Insert SingleVariableDeclaration(1948) into MethodDeclaration(2076) at 5", "Move SimpleType: IOException(323) into MethodDeclaration(2076) at 6", "Insert Block(2075) into MethodDeclaration(2076) at 7", "Insert MarkerAnnotation(2101) into MethodDeclaration(2265) at 0", "Insert PrimitiveType: int(2102) into MethodDeclaration(2265) at 1", "Insert SimpleName: decodeTo(2103) into MethodDeclaration(2265) at 2", "Insert SingleVariableDeclaration(2108) into MethodDeclaration(2265) at 3", "Insert SingleVariableDeclaration(2112) into MethodDeclaration(2265) at 4", "Insert SimpleType: DecodingException(2114) into MethodDeclaration(2265) at 5", "Insert Block(2264) into MethodDeclaration(2265) at 6", "Insert SingleMemberAnnotation(2268) into MethodDeclaration(2464) at 0", "Insert Modifier: public(2271) into MethodDeclaration(2464) at 2", "Update SimpleType: ByteInput(1993) to InputStream", "Insert SimpleType: BaseEncoding(2662) into MethodDeclaration(2681) at 0", "Insert SimpleName: newInstance(2663) into MethodDeclaration(2681) at 1", "Insert SingleVariableDeclaration(2667) into MethodDeclaration(2681) at 2", "Insert SingleVariableDeclaration(2673) into MethodDeclaration(2681) at 3", "Insert Block(2680) into MethodDeclaration(2681) at 4", "Insert Modifier: final(2745) into FieldDeclaration(2756) at 0", "Insert ArrayType: char[](2748) into FieldDeclaration(2756) at 1", "Insert VariableDeclarationFragment(2755) into FieldDeclaration(2756) at 2", "Insert SimpleName: Base16Encoding(2757) into MethodDeclaration(2775) at 0", "Insert SingleVariableDeclaration(2761) into MethodDeclaration(2775) at 1", "Insert SingleVariableDeclaration(2765) into MethodDeclaration(2775) at 2", "Insert Block(2774) into MethodDeclaration(2775) at 3", "Insert Modifier: private(2776) into MethodDeclaration(2828) at 0", "Insert SimpleName: Base16Encoding(2777) into MethodDeclaration(2828) at 1", "Insert SingleVariableDeclaration(2781) into MethodDeclaration(2828) at 2", "Insert Block(2827) into MethodDeclaration(2828) at 3", "Move MarkerAnnotation(2809) into MethodDeclaration(2902) at 0", "Insert PrimitiveType: void(2831) into MethodDeclaration(2902) at 1", "Insert SimpleName: encodeTo(2832) into MethodDeclaration(2902) at 2", "Insert SingleVariableDeclaration(2836) into MethodDeclaration(2902) at 3", "Insert SingleVariableDeclaration(2841) into MethodDeclaration(2902) at 4", "Insert SingleVariableDeclaration(2844) into MethodDeclaration(2902) at 5", "Insert SingleVariableDeclaration(2847) into MethodDeclaration(2902) at 6", "Insert SimpleType: IOException(2849) into MethodDeclaration(2902) at 7", "Insert Block(2901) into MethodDeclaration(2902) at 8", "Move MarkerAnnotation(2774) into MethodDeclaration(2999) at 0", "Insert PrimitiveType: int(2905) into MethodDeclaration(2999) at 1", "Insert SimpleName: decodeTo(2906) into MethodDeclaration(2999) at 2", "Insert SingleVariableDeclaration(2911) into MethodDeclaration(2999) at 3", "Insert SingleVariableDeclaration(2915) into MethodDeclaration(2999) at 4", "Insert SimpleType: DecodingException(2917) into MethodDeclaration(2999) at 5", "Insert Block(2998) into MethodDeclaration(2999) at 6", "Insert MarkerAnnotation(3001) into MethodDeclaration(3021) at 0", "Insert SimpleType: BaseEncoding(3003) into MethodDeclaration(3021) at 1", "Insert SimpleName: newInstance(3004) into MethodDeclaration(3021) at 2", "Insert SingleVariableDeclaration(3008) into MethodDeclaration(3021) at 3", "Insert SingleVariableDeclaration(3014) into MethodDeclaration(3021) at 4", "Insert Block(3020) into MethodDeclaration(3021) at 5", "Insert SimpleName: Base64Encoding(3028) into MethodDeclaration(3053) at 0", "Insert SingleVariableDeclaration(3032) into MethodDeclaration(3053) at 1", "Insert SingleVariableDeclaration(3036) into MethodDeclaration(3053) at 2", "Insert SingleVariableDeclaration(3042) into MethodDeclaration(3053) at 3", "Insert Block(3052) into MethodDeclaration(3053) at 4", "Update Modifier: public(2560) to private", "Move Modifier: public(2560) into MethodDeclaration(3076) at 0", "Insert SimpleName: Base64Encoding(3055) into MethodDeclaration(3076) at 1", "Insert SingleVariableDeclaration(3059) into MethodDeclaration(3076) at 2", "Insert SingleVariableDeclaration(3065) into MethodDeclaration(3076) at 3", "Insert Block(3075) into MethodDeclaration(3076) at 4", "Insert MarkerAnnotation(3078) into MethodDeclaration(3223) at 0", "Move PrimitiveType: void(2561) into MethodDeclaration(3223) at 1", "Insert SimpleName: encodeTo(3080) into MethodDeclaration(3223) at 2", "Insert SingleVariableDeclaration(3084) into MethodDeclaration(3223) at 3", "Insert SingleVariableDeclaration(3089) into MethodDeclaration(3223) at 4", "Insert SingleVariableDeclaration(3092) into MethodDeclaration(3223) at 5", "Insert SingleVariableDeclaration(3095) into MethodDeclaration(3223) at 6", "Insert SimpleType: IOException(3097) into MethodDeclaration(3223) at 7", "Insert Block(3222) into MethodDeclaration(3223) at 8", "Insert MarkerAnnotation(3225) into MethodDeclaration(3397) at 0", "Insert PrimitiveType: int(3226) into MethodDeclaration(3397) at 1", "Insert SimpleName: decodeTo(3227) into MethodDeclaration(3397) at 2", "Insert SingleVariableDeclaration(3232) into MethodDeclaration(3397) at 3", "Insert SingleVariableDeclaration(3236) into MethodDeclaration(3397) at 4", "Insert SimpleType: DecodingException(3238) into MethodDeclaration(3397) at 5", "Insert Block(3396) into MethodDeclaration(3397) at 6", "Insert MarkerAnnotation(3399) into MethodDeclaration(3420) at 0", "Insert SimpleType: BaseEncoding(3401) into MethodDeclaration(3420) at 1", "Insert SimpleName: newInstance(3402) into MethodDeclaration(3420) at 2", "Insert SingleVariableDeclaration(3406) into MethodDeclaration(3420) at 3", "Insert SingleVariableDeclaration(3412) into MethodDeclaration(3420) at 4", "Insert Block(3419) into MethodDeclaration(3420) at 5", "Insert SimpleName: GwtIncompatible(3422) into SingleMemberAnnotation(3424) at 0", "Insert StringLiteral: \"Reader\"(3423) into SingleMemberAnnotation(3424) at 1", "Update SimpleName: CharInput(2444) to Reader", "Update SimpleType: CharInput(2449) to Reader", "Insert SimpleName: Appendable(3526) into SimpleType: Appendable(3527) at 0", "Insert Modifier: final(3529) into SingleVariableDeclaration(3533) at 0", "Insert SimpleType: Appendable(3531) into SingleVariableDeclaration(3533) at 1", "Insert SimpleName: delegate(3532) into SingleVariableDeclaration(3533) at 2", "Move ExpressionStatement(2540) into Block(3646) at 0", "Move ExpressionStatement(2544) into Block(3646) at 1", "Move ExpressionStatement(2550) into Block(3646) at 2", "Insert ReturnStatement(3645) into Block(3646) at 3", "Insert SimpleName: GwtIncompatible(3648) into SingleMemberAnnotation(3650) at 0", "Insert StringLiteral: \"Writer\"(3649) into SingleMemberAnnotation(3650) at 1", "Insert SimpleName: Writer(3652) into SimpleType: Writer(3653) at 0", "Insert Modifier: final(3655) into SingleVariableDeclaration(3659) at 0", "Insert SimpleType: Writer(3657) into SingleVariableDeclaration(3659) at 1", "Insert SimpleName: delegate(3658) into SingleVariableDeclaration(3659) at 2", "Insert Modifier: final(3660) into SingleVariableDeclaration(3664) at 0", "Insert SimpleType: String(3662) into SingleVariableDeclaration(3664) at 1", "Insert SimpleName: separator(3663) into SingleVariableDeclaration(3664) at 2", "Insert Modifier: final(3665) into SingleVariableDeclaration(3668) at 0", "Insert PrimitiveType: int(3666) into SingleVariableDeclaration(3668) at 1", "Insert SimpleName: afterEveryChars(3667) into SingleVariableDeclaration(3668) at 2", "Insert VariableDeclarationStatement(3679) into Block(3754) at 0", "Insert ReturnStatement(3753) into Block(3754) at 1", "Insert SingleMemberAnnotation(3891) into MethodDeclaration(3913) at 0", "Insert MarkerAnnotation(3893) into MethodDeclaration(3913) at 1", "Insert Modifier: public(3894) into MethodDeclaration(3913) at 2", "Update SimpleType: ByteOutput(2776) to OutputStream", "Insert MarkerAnnotation(3915) into MethodDeclaration(3948) at 0", "Insert PrimitiveType: void(3916) into MethodDeclaration(3948) at 1", "Insert SimpleName: encodeTo(3917) into MethodDeclaration(3948) at 2", "Insert SingleVariableDeclaration(3921) into MethodDeclaration(3948) at 3", "Insert SingleVariableDeclaration(3926) into MethodDeclaration(3948) at 4", "Insert SingleVariableDeclaration(3929) into MethodDeclaration(3948) at 5", "Insert SingleVariableDeclaration(3932) into MethodDeclaration(3948) at 6", "Insert SimpleType: IOException(3934) into MethodDeclaration(3948) at 7", "Insert Block(3947) into MethodDeclaration(3948) at 8", "Insert MarkerAnnotation(3964) into MethodDeclaration(3988) at 0", "Insert PrimitiveType: int(3965) into MethodDeclaration(3988) at 1", "Insert SimpleName: decodeTo(3966) into MethodDeclaration(3988) at 2", "Insert SingleVariableDeclaration(3971) into MethodDeclaration(3988) at 3", "Insert SingleVariableDeclaration(3975) into MethodDeclaration(3988) at 4", "Insert SimpleType: DecodingException(3977) into MethodDeclaration(3988) at 5", "Insert Block(3987) into MethodDeclaration(3988) at 6", "Insert SingleMemberAnnotation(3991) into MethodDeclaration(4012) at 0", "Insert MarkerAnnotation(3993) into MethodDeclaration(4012) at 1", "Insert Modifier: public(3994) into MethodDeclaration(4012) at 2", "Update SimpleType: ByteInput(2811) to InputStream", "Update SimpleType: CharOutput(279) to StringBuilder", "Insert Block(278) into TryStatement(290) at 0", "Move CatchClause(634) into TryStatement(290) at 1", "Insert PrimitiveType: int(521) into VariableDeclarationStatement(528) at 0", "Update SimpleName: CharOutput(738) to Appendable", "Insert PrimitiveType: byte(625) into ArrayType: byte[](627) at 0", "Insert Dimension(626) into ArrayType: byte[](627) at 1", "Insert PrimitiveType: byte(649) into ArrayType: byte[](651) at 0", "Insert Dimension(650) into ArrayType: byte[](651) at 1", "Update SimpleName: CharInput(754) to CharSequence", "Update SimpleType: StandardBaseEncoding(867) to Base64Encoding", "Update SimpleType: StandardBaseEncoding(924) to Base64Encoding", "Update SimpleType: StandardBaseEncoding(1095) to Base16Encoding", "Insert SimpleName: DecodingException(1333) into SimpleType: DecodingException(1334) at 0", "Insert SimpleName: GwtIncompatible(1693) into SingleMemberAnnotation(1695) at 0", "Insert StringLiteral: \"Writer,OutputStream\"(1694) into SingleMemberAnnotation(1695) at 1", "Update SimpleName: ByteOutput(1797) to OutputStream", "Update SimpleType: CharOutput(1802) to Writer", "Insert SimpleName: Override(1869) into MarkerAnnotation(1870) at 0", "Insert SimpleType: Appendable(1874) into SingleVariableDeclaration(1876) at 0", "Insert SimpleName: target(1875) into SingleVariableDeclaration(1876) at 1", "Insert ArrayType: byte[](1879) into SingleVariableDeclaration(1881) at 0", "Insert SimpleName: bytes(1880) into SingleVariableDeclaration(1881) at 1", "Insert PrimitiveType: int(1882) into SingleVariableDeclaration(1884) at 0", "Insert SimpleName: off(1883) into SingleVariableDeclaration(1884) at 1", "Insert PrimitiveType: int(1885) into SingleVariableDeclaration(1887) at 0", "Insert SimpleName: len(1886) into SingleVariableDeclaration(1887) at 1", "Insert SimpleName: IOException(1888) into SimpleType: IOException(1889) at 0", "Insert ExpressionStatement(1893) into Block(1930) at 0", "Insert ExpressionStatement(1901) into Block(1930) at 1", "Insert ForStatement(1929) into Block(1930) at 2", "Insert SimpleType: Appendable(1935) into SingleVariableDeclaration(1937) at 0", "Insert SimpleName: target(1936) into SingleVariableDeclaration(1937) at 1", "Insert ArrayType: byte[](1940) into SingleVariableDeclaration(1942) at 0", "Insert SimpleName: bytes(1941) into SingleVariableDeclaration(1942) at 1", "Insert PrimitiveType: int(1943) into SingleVariableDeclaration(1945) at 0", "Insert SimpleName: off(1944) into SingleVariableDeclaration(1945) at 1", "Insert PrimitiveType: int(1946) into SingleVariableDeclaration(1948) at 0", "Insert SimpleName: len(1947) into SingleVariableDeclaration(1948) at 1", "Insert ExpressionStatement(1954) into Block(2075) at 0", "Insert ExpressionStatement(1962) into Block(2075) at 1", "Insert ExpressionStatement(1968) into Block(2075) at 2", "Insert VariableDeclarationStatement(1973) into Block(2075) at 3", "Insert ForStatement(1999) into Block(2075) at 4", "Insert VariableDeclarationStatement(2012) into Block(2075) at 5", "Insert VariableDeclarationStatement(2017) into Block(2075) at 6", "Insert WhileStatement(2051) into Block(2075) at 7", "Insert IfStatement(2074) into Block(2075) at 8", "Insert SimpleName: Override(2100) into MarkerAnnotation(2101) at 0", "Insert ArrayType: byte[](2106) into SingleVariableDeclaration(2108) at 0", "Insert SimpleName: target(2107) into SingleVariableDeclaration(2108) at 1", "Insert SimpleType: CharSequence(2110) into SingleVariableDeclaration(2112) at 0", "Insert SimpleName: chars(2111) into SingleVariableDeclaration(2112) at 1", "Insert SimpleName: DecodingException(2113) into SimpleType: DecodingException(2114) at 0", "Insert ExpressionStatement(2118) into Block(2264) at 0", "Insert ExpressionStatement(2122) into Block(2264) at 1", "Insert ExpressionStatement(2130) into Block(2264) at 2", "Insert IfStatement(2148) into Block(2264) at 3", "Insert VariableDeclarationStatement(2153) into Block(2264) at 4", "Insert ForStatement(2261) into Block(2264) at 5", "Insert ReturnStatement(2263) into Block(2264) at 6", "Insert SimpleName: GwtIncompatible(2266) into SingleMemberAnnotation(2268) at 0", "Insert StringLiteral: \"Reader,InputStream\"(2267) into SingleMemberAnnotation(2268) at 1", "Update SimpleName: ByteInput(1992) to InputStream", "Update SimpleType: CharInput(1997) to Reader", "Insert SimpleName: BaseEncoding(2661) into SimpleType: BaseEncoding(2662) at 0", "Insert SimpleType: Alphabet(2665) into SingleVariableDeclaration(2667) at 0", "Insert SimpleName: alphabet(2666) into SingleVariableDeclaration(2667) at 1", "Insert MarkerAnnotation(2669) into SingleVariableDeclaration(2673) at 0", "Insert SimpleType: Character(2671) into SingleVariableDeclaration(2673) at 1", "Insert SimpleName: paddingChar(2672) into SingleVariableDeclaration(2673) at 2", "Insert ReturnStatement(2679) into Block(2680) at 0", "Insert PrimitiveType: char(2746) into ArrayType: char[](2748) at 0", "Insert Dimension(2747) into ArrayType: char[](2748) at 1", "Insert SimpleName: encoding(2749) into VariableDeclarationFragment(2755) at 0", "Insert ArrayCreation(2754) into VariableDeclarationFragment(2755) at 1", "Insert SimpleType: String(2759) into SingleVariableDeclaration(2761) at 0", "Insert SimpleName: name(2760) into SingleVariableDeclaration(2761) at 1", "Insert SimpleType: String(2763) into SingleVariableDeclaration(2765) at 0", "Insert SimpleName: alphabetChars(2764) into SingleVariableDeclaration(2765) at 1", "Insert ConstructorInvocation(2773) into Block(2774) at 0", "Insert SimpleType: Alphabet(2779) into SingleVariableDeclaration(2781) at 0", "Insert SimpleName: alphabet(2780) into SingleVariableDeclaration(2781) at 1", "Insert SuperConstructorInvocation(2784) into Block(2827) at 0", "Insert ExpressionStatement(2790) into Block(2827) at 1", "Insert ForStatement(2826) into Block(2827) at 2", "Insert SimpleType: Appendable(2834) into SingleVariableDeclaration(2836) at 0", "Insert SimpleName: target(2835) into SingleVariableDeclaration(2836) at 1", "Insert ArrayType: byte[](2839) into SingleVariableDeclaration(2841) at 0", "Insert SimpleName: bytes(2840) into SingleVariableDeclaration(2841) at 1", "Insert PrimitiveType: int(2842) into SingleVariableDeclaration(2844) at 0", "Insert SimpleName: off(2843) into SingleVariableDeclaration(2844) at 1", "Insert PrimitiveType: int(2845) into SingleVariableDeclaration(2847) at 0", "Insert SimpleName: len(2846) into SingleVariableDeclaration(2847) at 1", "Insert SimpleName: IOException(2848) into SimpleType: IOException(2849) at 0", "Insert ExpressionStatement(2853) into Block(2901) at 0", "Insert ExpressionStatement(2861) into Block(2901) at 1", "Insert ForStatement(2900) into Block(2901) at 2", "Insert ArrayType: byte[](2909) into SingleVariableDeclaration(2911) at 0", "Insert SimpleName: target(2910) into SingleVariableDeclaration(2911) at 1", "Insert SimpleType: CharSequence(2913) into SingleVariableDeclaration(2915) at 0", "Insert SimpleName: chars(2914) into SingleVariableDeclaration(2915) at 1", "Insert SimpleName: DecodingException(2916) into SimpleType: DecodingException(2917) at 0", "Insert ExpressionStatement(2921) into Block(2998) at 0", "Insert ExpressionStatement(2925) into Block(2998) at 1", "Insert IfStatement(2943) into Block(2998) at 2", "Insert VariableDeclarationStatement(2948) into Block(2998) at 3", "Insert ForStatement(2995) into Block(2998) at 4", "Insert ReturnStatement(2997) into Block(2998) at 5", "Insert SimpleName: Override(3000) into MarkerAnnotation(3001) at 0", "Insert SimpleName: BaseEncoding(3002) into SimpleType: BaseEncoding(3003) at 0", "Insert SimpleType: Alphabet(3006) into SingleVariableDeclaration(3008) at 0", "Insert SimpleName: alphabet(3007) into SingleVariableDeclaration(3008) at 1", "Insert MarkerAnnotation(3010) into SingleVariableDeclaration(3014) at 0", "Insert SimpleType: Character(3012) into SingleVariableDeclaration(3014) at 1", "Insert SimpleName: paddingChar(3013) into SingleVariableDeclaration(3014) at 2", "Insert ReturnStatement(3019) into Block(3020) at 0", "Insert SimpleType: String(3030) into SingleVariableDeclaration(3032) at 0", "Insert SimpleName: name(3031) into SingleVariableDeclaration(3032) at 1", "Insert SimpleType: String(3034) into SingleVariableDeclaration(3036) at 0", "Insert SimpleName: alphabetChars(3035) into SingleVariableDeclaration(3036) at 1", "Insert MarkerAnnotation(3038) into SingleVariableDeclaration(3042) at 0", "Update SimpleType: CharOutput(2525) to Character", "Move SimpleType: CharOutput(2525) into SingleVariableDeclaration(3042) at 1", "Update SimpleName: delegate(2526) to paddingChar", "Move SimpleName: delegate(2526) into SingleVariableDeclaration(3042) at 2", "Insert ConstructorInvocation(3051) into Block(3052) at 0", "Insert SimpleType: Alphabet(3057) into SingleVariableDeclaration(3059) at 0", "Insert SimpleName: alphabet(3058) into SingleVariableDeclaration(3059) at 1", "Insert MarkerAnnotation(3061) into SingleVariableDeclaration(3065) at 0", "Insert SimpleType: Character(3063) into SingleVariableDeclaration(3065) at 1", "Insert SimpleName: paddingChar(3064) into SingleVariableDeclaration(3065) at 2", "Insert SuperConstructorInvocation(3068) into Block(3075) at 0", "Insert ExpressionStatement(3074) into Block(3075) at 1", "Insert SimpleName: Override(3077) into MarkerAnnotation(3078) at 0", "Insert SimpleType: Appendable(3082) into SingleVariableDeclaration(3084) at 0", "Insert SimpleName: target(3083) into SingleVariableDeclaration(3084) at 1", "Insert ArrayType: byte[](3087) into SingleVariableDeclaration(3089) at 0", "Insert SimpleName: bytes(3088) into SingleVariableDeclaration(3089) at 1", "Insert PrimitiveType: int(3090) into SingleVariableDeclaration(3092) at 0", "Insert SimpleName: off(3091) into SingleVariableDeclaration(3092) at 1", "Insert PrimitiveType: int(3093) into SingleVariableDeclaration(3095) at 0", "Insert SimpleName: len(3094) into SingleVariableDeclaration(3095) at 1", "Insert SimpleName: IOException(3096) into SimpleType: IOException(3097) at 0", "Insert ExpressionStatement(3101) into Block(3222) at 0", "Insert ExpressionStatement(3109) into Block(3222) at 1", "Insert VariableDeclarationStatement(3114) into Block(3222) at 2", "Insert ForStatement(3203) into Block(3222) at 3", "Insert IfStatement(3221) into Block(3222) at 4", "Insert SimpleName: Override(3224) into MarkerAnnotation(3225) at 0", "Insert ArrayType: byte[](3230) into SingleVariableDeclaration(3232) at 0", "Insert SimpleName: target(3231) into SingleVariableDeclaration(3232) at 1", "Insert SimpleType: CharSequence(3234) into SingleVariableDeclaration(3236) at 0", "Insert SimpleName: chars(3235) into SingleVariableDeclaration(3236) at 1", "Insert SimpleName: DecodingException(3237) into SimpleType: DecodingException(3238) at 0", "Insert ExpressionStatement(3242) into Block(3396) at 0", "Insert ExpressionStatement(3246) into Block(3396) at 1", "Insert ExpressionStatement(3254) into Block(3396) at 2", "Insert IfStatement(3272) into Block(3396) at 3", "Insert VariableDeclarationStatement(3277) into Block(3396) at 4", "Move ForStatement(2592) into Block(3396) at 5", "Insert ReturnStatement(3395) into Block(3396) at 6", "Insert SimpleName: Override(3398) into MarkerAnnotation(3399) at 0", "Insert SimpleName: BaseEncoding(3400) into SimpleType: BaseEncoding(3401) at 0", "Insert SimpleType: Alphabet(3404) into SingleVariableDeclaration(3406) at 0", "Insert SimpleName: alphabet(3405) into SingleVariableDeclaration(3406) at 1", "Insert MarkerAnnotation(3408) into SingleVariableDeclaration(3412) at 0", "Insert SimpleType: Character(3410) into SingleVariableDeclaration(3412) at 1", "Insert SimpleName: paddingChar(3411) into SingleVariableDeclaration(3412) at 2", "Insert ReturnStatement(3418) into Block(3419) at 0", "Update SimpleName: CharInput(2448) to Reader", "Insert SimpleName: Appendable(3530) into SimpleType: Appendable(3531) at 0", "Insert ClassInstanceCreation(3644) into ReturnStatement(3645) at 0", "Insert SimpleName: Writer(3656) into SimpleType: Writer(3657) at 0", "Insert SimpleName: String(3661) into SimpleType: String(3662) at 0", "Insert Modifier: final(3669) into VariableDeclarationStatement(3679) at 0", "Insert SimpleType: Appendable(3671) into VariableDeclarationStatement(3679) at 1", "Insert VariableDeclarationFragment(3678) into VariableDeclarationStatement(3679) at 2", "Insert ClassInstanceCreation(3752) into ReturnStatement(3753) at 0", "Insert SimpleName: GwtIncompatible(3889) into SingleMemberAnnotation(3891) at 0", "Insert StringLiteral: \"Writer,OutputStream\"(3890) into SingleMemberAnnotation(3891) at 1", "Insert SimpleName: Override(3892) into MarkerAnnotation(3893) at 0", "Update SimpleName: ByteOutput(2775) to OutputStream", "Update SimpleType: CharOutput(2780) to Writer", "Insert SimpleName: Override(3914) into MarkerAnnotation(3915) at 0", "Insert SimpleType: Appendable(3919) into SingleVariableDeclaration(3921) at 0", "Insert SimpleName: target(3920) into SingleVariableDeclaration(3921) at 1", "Insert ArrayType: byte[](3924) into SingleVariableDeclaration(3926) at 0", "Insert SimpleName: bytes(3925) into SingleVariableDeclaration(3926) at 1", "Insert PrimitiveType: int(3927) into SingleVariableDeclaration(3929) at 0", "Insert SimpleName: off(3928) into SingleVariableDeclaration(3929) at 1", "Insert PrimitiveType: int(3930) into SingleVariableDeclaration(3932) at 0", "Insert SimpleName: len(3931) into SingleVariableDeclaration(3932) at 1", "Insert SimpleName: IOException(3933) into SimpleType: IOException(3934) at 0", "Insert ExpressionStatement(3946) into Block(3947) at 0", "Insert SimpleName: Override(3963) into MarkerAnnotation(3964) at 0", "Insert ArrayType: byte[](3969) into SingleVariableDeclaration(3971) at 0", "Insert SimpleName: target(3970) into SingleVariableDeclaration(3971) at 1", "Insert SimpleType: CharSequence(3973) into SingleVariableDeclaration(3975) at 0", "Insert SimpleName: chars(3974) into SingleVariableDeclaration(3975) at 1", "Insert SimpleName: DecodingException(3976) into SimpleType: DecodingException(3977) at 0", "Insert ReturnStatement(3986) into Block(3987) at 0", "Insert SimpleName: GwtIncompatible(3989) into SingleMemberAnnotation(3991) at 0", "Insert StringLiteral: \"Reader,InputStream\"(3990) into SingleMemberAnnotation(3991) at 1", "Insert SimpleName: Override(3992) into MarkerAnnotation(3993) at 0", "Update SimpleName: ByteInput(2810) to InputStream", "Update SimpleType: CharInput(2815) to Reader", "Update SimpleName: input(2816) to reader", "Update SimpleName: CharOutput(278) to StringBuilder", "Insert ClassInstanceCreation(268) into VariableDeclarationFragment(269) at 1", "Insert ExpressionStatement(277) into Block(278) at 0", "Update SimpleName: decodedInput(560) to len", "Update SimpleName: index(638) to len", "Update SimpleName: StandardBaseEncoding(866) to Base64Encoding", "Update SimpleName: StandardBaseEncoding(923) to Base64Encoding", "Update SimpleName: StandardBaseEncoding(1094) to Base16Encoding", "Update SimpleName: CharOutput(1801) to Writer", "Insert SimpleName: Appendable(1873) into SimpleType: Appendable(1874) at 0", "Insert PrimitiveType: byte(1877) into ArrayType: byte[](1879) at 0", "Insert Dimension(1878) into ArrayType: byte[](1879) at 1", "Insert MethodInvocation(1892) into ExpressionStatement(1893) at 0", "Insert MethodInvocation(1900) into ExpressionStatement(1901) at 0", "Move VariableDeclarationExpression(300) into ForStatement(1929) at 0", "Move InfixExpression: <(303) into ForStatement(1929) at 1", "Insert Assignment: +=(1912) into ForStatement(1929) at 2", "Insert Block(1928) into ForStatement(1929) at 3", "Insert SimpleName: Appendable(1934) into SimpleType: Appendable(1935) at 0", "Insert PrimitiveType: byte(1938) into ArrayType: byte[](1940) at 0", "Insert Dimension(1939) into ArrayType: byte[](1940) at 1", "Insert MethodInvocation(1953) into ExpressionStatement(1954) at 0", "Insert MethodInvocation(1961) into ExpressionStatement(1962) at 0", "Insert MethodInvocation(1967) into ExpressionStatement(1968) at 0", "Insert PrimitiveType: long(1969) into VariableDeclarationStatement(1973) at 0", "Insert VariableDeclarationFragment(1972) into VariableDeclarationStatement(1973) at 1", "Insert VariableDeclarationExpression(1978) into ForStatement(1999) at 0", "Insert InfixExpression: <(1981) into ForStatement(1999) at 1", "Insert PrefixExpression: ++(1983) into ForStatement(1999) at 2", "Insert Block(1998) into ForStatement(1999) at 3", "Insert Modifier: final(2000) into VariableDeclarationStatement(2012) at 0", "Insert PrimitiveType: int(2001) into VariableDeclarationStatement(2012) at 1", "Insert VariableDeclarationFragment(2011) into VariableDeclarationStatement(2012) at 2", "Insert PrimitiveType: int(2013) into VariableDeclarationStatement(2017) at 0", "Insert VariableDeclarationFragment(2016) into VariableDeclarationStatement(2017) at 1", "Insert InfixExpression: <(2022) into WhileStatement(2051) at 0", "Insert Block(2050) into WhileStatement(2051) at 1", "Insert InfixExpression: !=(2054) into IfStatement(2074) at 0", "Insert Block(2073) into IfStatement(2074) at 1", "Insert PrimitiveType: byte(2104) into ArrayType: byte[](2106) at 0", "Insert Dimension(2105) into ArrayType: byte[](2106) at 1", "Insert SimpleName: CharSequence(2109) into SimpleType: CharSequence(2110) at 0", "Insert MethodInvocation(2117) into ExpressionStatement(2118) at 0", "Insert MethodInvocation(2121) into ExpressionStatement(2122) at 0", "Insert Assignment: =(2129) into ExpressionStatement(2130) at 0", "Insert PrefixExpression: !(2137) into IfStatement(2148) at 0", "Insert Block(2147) into IfStatement(2148) at 1", "Insert PrimitiveType: int(2149) into VariableDeclarationStatement(2153) at 0", "Insert VariableDeclarationFragment(2152) into VariableDeclarationStatement(2153) at 1", "Insert VariableDeclarationExpression(2158) into ForStatement(2261) at 0", "Insert InfixExpression: <(2163) into ForStatement(2261) at 1", "Insert Assignment: +=(2166) into ForStatement(2261) at 2", "Insert Block(2260) into ForStatement(2261) at 3", "Insert SimpleName: bytesWritten(2262) into ReturnStatement(2263) at 0", "Update SimpleName: CharInput(1996) to Reader", "Insert SimpleName: Alphabet(2664) into SimpleType: Alphabet(2665) at 0", "Insert SimpleName: Nullable(2668) into MarkerAnnotation(2669) at 0", "Insert SimpleName: Character(2670) into SimpleType: Character(2671) at 0", "Insert ClassInstanceCreation(2678) into ReturnStatement(2679) at 0", "Insert ArrayType: char[](2752) into ArrayCreation(2754) at 0", "Insert NumberLiteral: 512(2753) into ArrayCreation(2754) at 1", "Insert SimpleName: String(2758) into SimpleType: String(2759) at 0", "Insert SimpleName: String(2762) into SimpleType: String(2763) at 0", "Insert ClassInstanceCreation(2772) into ConstructorInvocation(2773) at 0", "Insert SimpleName: Alphabet(2778) into SimpleType: Alphabet(2779) at 0", "Insert SimpleName: alphabet(2782) into SuperConstructorInvocation(2784) at 0", "Insert NullLiteral(2783) into SuperConstructorInvocation(2784) at 1", "Insert MethodInvocation(2789) into ExpressionStatement(2790) at 0", "Move VariableDeclarationExpression(2575) into ForStatement(2826) at 0", "Insert InfixExpression: <(2798) into ForStatement(2826) at 1", "Insert PrefixExpression: ++(2800) into ForStatement(2826) at 2", "Insert Block(2825) into ForStatement(2826) at 3", "Insert SimpleName: Appendable(2833) into SimpleType: Appendable(2834) at 0", "Insert PrimitiveType: byte(2837) into ArrayType: byte[](2839) at 0", "Insert Dimension(2838) into ArrayType: byte[](2839) at 1", "Insert MethodInvocation(2852) into ExpressionStatement(2853) at 0", "Insert MethodInvocation(2860) into ExpressionStatement(2861) at 0", "Insert VariableDeclarationExpression(2866) into ForStatement(2900) at 0", "Insert InfixExpression: <(2869) into ForStatement(2900) at 1", "Insert PrefixExpression: ++(2871) into ForStatement(2900) at 2", "Insert Block(2899) into ForStatement(2900) at 3", "Insert PrimitiveType: byte(2907) into ArrayType: byte[](2909) at 0", "Insert Dimension(2908) into ArrayType: byte[](2909) at 1", "Insert SimpleName: CharSequence(2912) into SimpleType: CharSequence(2913) at 0", "Insert MethodInvocation(2920) into ExpressionStatement(2921) at 0", "Insert MethodInvocation(2924) into ExpressionStatement(2925) at 0", "Insert InfixExpression: ==(2932) into IfStatement(2943) at 0", "Insert Block(2942) into IfStatement(2943) at 1", "Insert PrimitiveType: int(2944) into VariableDeclarationStatement(2948) at 0", "Insert VariableDeclarationFragment(2947) into VariableDeclarationStatement(2948) at 1", "Insert VariableDeclarationExpression(2953) into ForStatement(2995) at 0", "Insert InfixExpression: <(2958) into ForStatement(2995) at 1", "Insert Assignment: +=(2961) into ForStatement(2995) at 2", "Insert Block(2994) into ForStatement(2995) at 3", "Insert SimpleName: bytesWritten(2996) into ReturnStatement(2997) at 0", "Insert SimpleName: Alphabet(3005) into SimpleType: Alphabet(3006) at 0", "Insert SimpleName: Nullable(3009) into MarkerAnnotation(3010) at 0", "Update SimpleName: CharOutput(2520) to Character", "Move SimpleName: CharOutput(2520) into SimpleType: Character(3012) at 0", "Insert ClassInstanceCreation(3018) into ReturnStatement(3019) at 0", "Insert SimpleName: String(3029) into SimpleType: String(3030) at 0", "Insert SimpleName: String(3033) into SimpleType: String(3034) at 0", "Insert SimpleName: Nullable(3037) into MarkerAnnotation(3038) at 0", "Update SimpleName: CharOutput(2524) to Character", "Insert ClassInstanceCreation(3049) into ConstructorInvocation(3051) at 0", "Insert SimpleName: paddingChar(3050) into ConstructorInvocation(3051) at 1", "Insert SimpleName: Alphabet(3056) into SimpleType: Alphabet(3057) at 0", "Insert SimpleName: Nullable(3060) into MarkerAnnotation(3061) at 0", "Insert SimpleName: Character(3062) into SimpleType: Character(3063) at 0", "Insert SimpleName: alphabet(3066) into SuperConstructorInvocation(3068) at 0", "Insert SimpleName: paddingChar(3067) into SuperConstructorInvocation(3068) at 1", "Insert MethodInvocation(3073) into ExpressionStatement(3074) at 0", "Insert SimpleName: Appendable(3081) into SimpleType: Appendable(3082) at 0", "Insert PrimitiveType: byte(3085) into ArrayType: byte[](3087) at 0", "Insert Dimension(3086) into ArrayType: byte[](3087) at 1", "Insert MethodInvocation(3100) into ExpressionStatement(3101) at 0", "Insert MethodInvocation(3108) into ExpressionStatement(3109) at 0", "Insert PrimitiveType: int(3110) into VariableDeclarationStatement(3114) at 0", "Insert VariableDeclarationFragment(3113) into VariableDeclarationStatement(3114) at 1", "Insert VariableDeclarationExpression(3119) into ForStatement(3203) at 0", "Insert InfixExpression: >=(3122) into ForStatement(3203) at 1", "Insert Assignment: -=(3125) into ForStatement(3203) at 2", "Insert Block(3202) into ForStatement(3203) at 3", "Insert InfixExpression: <(3208) into IfStatement(3221) at 0", "Insert Block(3220) into IfStatement(3221) at 1", "Insert PrimitiveType: byte(3228) into ArrayType: byte[](3230) at 0", "Insert Dimension(3229) into ArrayType: byte[](3230) at 1", "Insert SimpleName: CharSequence(3233) into SimpleType: CharSequence(3234) at 0", "Insert MethodInvocation(3241) into ExpressionStatement(3242) at 0", "Insert MethodInvocation(3245) into ExpressionStatement(3246) at 0", "Insert Assignment: =(3253) into ExpressionStatement(3254) at 0", "Insert PrefixExpression: !(3261) into IfStatement(3272) at 0", "Insert Block(3271) into IfStatement(3272) at 1", "Insert PrimitiveType: int(3273) into VariableDeclarationStatement(3277) at 0", "Insert VariableDeclarationFragment(3276) into VariableDeclarationStatement(3277) at 1", "Insert VariableDeclarationExpression(3282) into ForStatement(3393) at 0", "Insert Block(3392) into ForStatement(3393) at 2", "Insert SimpleName: bytesWritten(3394) into ReturnStatement(3395) at 0", "Insert SimpleName: Alphabet(3403) into SimpleType: Alphabet(3404) at 0", "Insert SimpleName: Nullable(3407) into MarkerAnnotation(3408) at 0", "Insert SimpleName: Character(3409) into SimpleType: Character(3410) at 0", "Insert ClassInstanceCreation(3417) into ReturnStatement(3418) at 0", "Update SimpleType: CharInput(2466) to Reader", "Insert SimpleType: Appendable(3558) into ClassInstanceCreation(3644) at 0", "Insert AnonymousClassDeclaration(3643) into ClassInstanceCreation(3644) at 1", "Insert SimpleName: Appendable(3670) into SimpleType: Appendable(3671) at 0", "Insert SimpleName: seperatingAppendable(3672) into VariableDeclarationFragment(3678) at 0", "Insert MethodInvocation(3677) into VariableDeclarationFragment(3678) at 1", "Insert SimpleType: Writer(3681) into ClassInstanceCreation(3752) at 0", "Insert AnonymousClassDeclaration(3751) into ClassInstanceCreation(3752) at 1", "Update SimpleName: CharOutput(2779) to Writer", "Insert SimpleName: Appendable(3918) into SimpleType: Appendable(3919) at 0", "Insert PrimitiveType: byte(3922) into ArrayType: byte[](3924) at 0", "Insert Dimension(3923) into ArrayType: byte[](3924) at 1", "Insert MethodInvocation(3945) into ExpressionStatement(3946) at 0", "Insert PrimitiveType: byte(3967) into ArrayType: byte[](3969) at 0", "Insert Dimension(3968) into ArrayType: byte[](3969) at 1", "Insert SimpleName: CharSequence(3972) into SimpleType: CharSequence(3973) at 0", "Insert MethodInvocation(3985) into ReturnStatement(3986) at 0", "Update SimpleName: CharInput(2814) to Reader", "Insert SimpleType: StringBuilder(264) into ClassInstanceCreation(268) at 0", "Move MethodInvocation(284) into ClassInstanceCreation(268) at 1", "Insert MethodInvocation(276) into ExpressionStatement(277) at 0", "Update SimpleName: decodingStream(561) to decodeTo", "Update SimpleName: asCharInput(562) to tmp", "Move SimpleName: asCharInput(562) into MethodInvocation(526) at 1", "Move SimpleName: chars(563) into MethodInvocation(526) at 2", "Update SimpleType: ByteOutput(1810) to OutputStream", "Insert SimpleName: checkNotNull(1890) into MethodInvocation(1892) at 0", "Insert SimpleName: target(1891) into MethodInvocation(1892) at 1", "Insert SimpleName: checkPositionIndexes(1894) into MethodInvocation(1900) at 0", "Insert SimpleName: off(1895) into MethodInvocation(1900) at 1", "Insert InfixExpression: +(1898) into MethodInvocation(1900) at 2", "Insert QualifiedName: bytes.length(1899) into MethodInvocation(1900) at 3", "Insert SimpleName: i(1910) into Assignment: +=(1912) at 0", "Insert QualifiedName: alphabet.bytesPerChunk(1911) into Assignment: +=(1912) at 1", "Insert ExpressionStatement(1927) into Block(1928) at 0", "Insert SimpleName: checkNotNull(1951) into MethodInvocation(1953) at 0", "Insert SimpleName: target(1952) into MethodInvocation(1953) at 1", "Insert SimpleName: checkPositionIndexes(1955) into MethodInvocation(1961) at 0", "Insert SimpleName: off(1956) into MethodInvocation(1961) at 1", "Insert InfixExpression: +(1959) into MethodInvocation(1961) at 2", "Insert QualifiedName: bytes.length(1960) into MethodInvocation(1961) at 3", "Insert SimpleName: checkArgument(1963) into MethodInvocation(1967) at 0", "Insert InfixExpression: <=(1966) into MethodInvocation(1967) at 1", "Insert SimpleName: bitBuffer(1970) into VariableDeclarationFragment(1972) at 0", "Insert NumberLiteral: 0(1971) into VariableDeclarationFragment(1972) at 1", "Insert PrimitiveType: int(1974) into VariableDeclarationExpression(1978) at 0", "Insert VariableDeclarationFragment(1977) into VariableDeclarationExpression(1978) at 1", "Insert SimpleName: i(1979) into InfixExpression: <(1981) at 0", "Insert SimpleName: len(1980) into InfixExpression: <(1981) at 1", "Insert SimpleName: i(1982) into PrefixExpression: ++(1983) at 0", "Insert ExpressionStatement(1993) into Block(1998) at 0", "Insert ExpressionStatement(1997) into Block(1998) at 1", "Insert SimpleName: bitOffset(2002) into VariableDeclarationFragment(2011) at 0", "Insert InfixExpression: -(2010) into VariableDeclarationFragment(2011) at 1", "Insert SimpleName: bitsProcessed(2014) into VariableDeclarationFragment(2016) at 0", "Insert NumberLiteral: 0(2015) into VariableDeclarationFragment(2016) at 1", "Insert SimpleName: bitsProcessed(2018) into InfixExpression: <(2022) at 0", "Insert InfixExpression: *(2021) into InfixExpression: <(2022) at 1", "Insert VariableDeclarationStatement(2037) into Block(2050) at 0", "Insert ExpressionStatement(2045) into Block(2050) at 1", "Insert ExpressionStatement(2049) into Block(2050) at 2", "Insert SimpleName: paddingChar(2052) into InfixExpression: !=(2054) at 0", "Insert NullLiteral(2053) into InfixExpression: !=(2054) at 1", "Insert WhileStatement(2072) into Block(2073) at 0", "Insert SimpleName: checkNotNull(2115) into MethodInvocation(2117) at 0", "Insert SimpleName: target(2116) into MethodInvocation(2117) at 1", "Insert SimpleName: checkNotNull(2119) into MethodInvocation(2121) at 0", "Insert SimpleName: chars(2120) into MethodInvocation(2121) at 1", "Insert SimpleName: chars(2123) into Assignment: =(2129) at 0", "Insert MethodInvocation(2128) into Assignment: =(2129) at 1", "Insert MethodInvocation(2136) into PrefixExpression: !(2137) at 0", "Insert ThrowStatement(2146) into Block(2147) at 0", "Insert SimpleName: bytesWritten(2150) into VariableDeclarationFragment(2152) at 0", "Insert NumberLiteral: 0(2151) into VariableDeclarationFragment(2152) at 1", "Insert PrimitiveType: int(2154) into VariableDeclarationExpression(2158) at 0", "Insert VariableDeclarationFragment(2157) into VariableDeclarationExpression(2158) at 1", "Insert SimpleName: charIdx(2159) into InfixExpression: <(2163) at 0", "Insert MethodInvocation(2162) into InfixExpression: <(2163) at 1", "Insert SimpleName: charIdx(2164) into Assignment: +=(2166) at 0", "Insert QualifiedName: alphabet.charsPerChunk(2165) into Assignment: +=(2166) at 1", "Insert VariableDeclarationStatement(2171) into Block(2260) at 0", "Insert VariableDeclarationStatement(2176) into Block(2260) at 1", "Insert ForStatement(2214) into Block(2260) at 2", "Insert VariableDeclarationStatement(2226) into Block(2260) at 3", "Insert ForStatement(2259) into Block(2260) at 4", "Update SimpleType: ByteInput(2005) to InputStream", "Insert MethodInvocation(2479) into ConditionalExpression(2480) at 2", "Move SimpleType: StandardBaseEncoding(2371) into ClassInstanceCreation(2678) at 0", "Insert SimpleName: alphabet(2676) into ClassInstanceCreation(2678) at 1", "Insert SimpleName: paddingChar(2677) into ClassInstanceCreation(2678) at 2", "Insert PrimitiveType: char(2750) into ArrayType: char[](2752) at 0", "Insert Dimension(2751) into ArrayType: char[](2752) at 1", "Insert SimpleType: Alphabet(2767) into ClassInstanceCreation(2772) at 0", "Insert SimpleName: name(2768) into ClassInstanceCreation(2772) at 1", "Insert MethodInvocation(2771) into ClassInstanceCreation(2772) at 2", "Insert SimpleName: checkArgument(2785) into MethodInvocation(2789) at 0", "Insert InfixExpression: ==(2788) into MethodInvocation(2789) at 1", "Insert SimpleName: i(2796) into InfixExpression: <(2798) at 0", "Insert NumberLiteral: 256(2797) into InfixExpression: <(2798) at 1", "Insert SimpleName: i(2799) into PrefixExpression: ++(2800) at 0", "Insert ExpressionStatement(2811) into Block(2825) at 0", "Insert ExpressionStatement(2824) into Block(2825) at 1", "Insert SimpleName: checkNotNull(2850) into MethodInvocation(2852) at 0", "Insert SimpleName: target(2851) into MethodInvocation(2852) at 1", "Insert SimpleName: checkPositionIndexes(2854) into MethodInvocation(2860) at 0", "Insert SimpleName: off(2855) into MethodInvocation(2860) at 1", "Insert InfixExpression: +(2858) into MethodInvocation(2860) at 2", "Insert QualifiedName: bytes.length(2859) into MethodInvocation(2860) at 3", "Insert PrimitiveType: int(2862) into VariableDeclarationExpression(2866) at 0", "Insert VariableDeclarationFragment(2865) into VariableDeclarationExpression(2866) at 1", "Insert SimpleName: i(2867) into InfixExpression: <(2869) at 0", "Insert SimpleName: len(2868) into InfixExpression: <(2869) at 1", "Insert SimpleName: i(2870) into PrefixExpression: ++(2871) at 0", "Insert VariableDeclarationStatement(2882) into Block(2899) at 0", "Insert ExpressionStatement(2889) into Block(2899) at 1", "Insert ExpressionStatement(2898) into Block(2899) at 2", "Insert SimpleName: checkNotNull(2918) into MethodInvocation(2920) at 0", "Insert SimpleName: target(2919) into MethodInvocation(2920) at 1", "Insert SimpleName: checkNotNull(2922) into MethodInvocation(2924) at 0", "Insert SimpleName: chars(2923) into MethodInvocation(2924) at 1", "Insert InfixExpression: %(2930) into InfixExpression: ==(2932) at 0", "Insert NumberLiteral: 1(2931) into InfixExpression: ==(2932) at 1", "Insert ThrowStatement(2941) into Block(2942) at 0", "Insert SimpleName: bytesWritten(2945) into VariableDeclarationFragment(2947) at 0", "Insert NumberLiteral: 0(2946) into VariableDeclarationFragment(2947) at 1", "Insert PrimitiveType: int(2949) into VariableDeclarationExpression(2953) at 0", "Insert VariableDeclarationFragment(2952) into VariableDeclarationExpression(2953) at 1", "Insert SimpleName: i(2954) into InfixExpression: <(2958) at 0", "Insert MethodInvocation(2957) into InfixExpression: <(2958) at 1", "Insert SimpleName: i(2959) into Assignment: +=(2961) at 0", "Insert NumberLiteral: 2(2960) into Assignment: +=(2961) at 1", "Insert VariableDeclarationStatement(2984) into Block(2994) at 0", "Insert ExpressionStatement(2993) into Block(2994) at 1", "Insert SimpleType: Base16Encoding(3016) into ClassInstanceCreation(3018) at 0", "Insert SimpleName: alphabet(3017) into ClassInstanceCreation(3018) at 1", "Update SimpleType: CharOutput(2552) to Alphabet", "Move SimpleType: CharOutput(2552) into ClassInstanceCreation(3049) at 0", "Insert SimpleName: name(3045) into ClassInstanceCreation(3049) at 1", "Insert MethodInvocation(3048) into ClassInstanceCreation(3049) at 2", "Insert SimpleName: checkArgument(3069) into MethodInvocation(3073) at 0", "Insert InfixExpression: ==(3072) into MethodInvocation(3073) at 1", "Insert SimpleName: checkNotNull(3098) into MethodInvocation(3100) at 0", "Insert SimpleName: target(3099) into MethodInvocation(3100) at 1", "Insert SimpleName: checkPositionIndexes(3102) into MethodInvocation(3108) at 0", "Insert SimpleName: off(3103) into MethodInvocation(3108) at 1", "Insert InfixExpression: +(3106) into MethodInvocation(3108) at 2", "Insert QualifiedName: bytes.length(3107) into MethodInvocation(3108) at 3", "Insert SimpleName: i(3111) into VariableDeclarationFragment(3113) at 0", "Insert SimpleName: off(3112) into VariableDeclarationFragment(3113) at 1", "Insert PrimitiveType: int(3115) into VariableDeclarationExpression(3119) at 0", "Insert VariableDeclarationFragment(3118) into VariableDeclarationExpression(3119) at 1", "Insert SimpleName: remaining(3120) into InfixExpression: >=(3122) at 0", "Insert NumberLiteral: 3(3121) into InfixExpression: >=(3122) at 1", "Insert SimpleName: remaining(3123) into Assignment: -=(3125) at 0", "Insert NumberLiteral: 3(3124) into Assignment: -=(3125) at 1", "Insert VariableDeclarationStatement(3155) into Block(3202) at 0", "Insert ExpressionStatement(3165) into Block(3202) at 1", "Insert ExpressionStatement(3178) into Block(3202) at 2", "Insert ExpressionStatement(3191) into Block(3202) at 3", "Insert ExpressionStatement(3201) into Block(3202) at 4", "Insert SimpleName: i(3204) into InfixExpression: <(3208) at 0", "Insert InfixExpression: +(3207) into InfixExpression: <(3208) at 1", "Insert ExpressionStatement(3219) into Block(3220) at 0", "Insert SimpleName: checkNotNull(3239) into MethodInvocation(3241) at 0", "Insert SimpleName: target(3240) into MethodInvocation(3241) at 1", "Insert SimpleName: checkNotNull(3243) into MethodInvocation(3245) at 0", "Insert SimpleName: chars(3244) into MethodInvocation(3245) at 1", "Insert SimpleName: chars(3247) into Assignment: =(3253) at 0", "Insert MethodInvocation(3252) into Assignment: =(3253) at 1", "Insert MethodInvocation(3260) into PrefixExpression: !(3261) at 0", "Insert ThrowStatement(3270) into Block(3271) at 0", "Insert SimpleName: bytesWritten(3274) into VariableDeclarationFragment(3276) at 0", "Insert NumberLiteral: 0(3275) into VariableDeclarationFragment(3276) at 1", "Insert PrimitiveType: int(3278) into VariableDeclarationExpression(3282) at 0", "Insert VariableDeclarationFragment(3281) into VariableDeclarationExpression(3282) at 1", "Insert VariableDeclarationStatement(3301) into Block(3392) at 0", "Insert ExpressionStatement(3314) into Block(3392) at 1", "Insert ExpressionStatement(3326) into Block(3392) at 2", "Insert IfStatement(3391) into Block(3392) at 3", "Insert SimpleType: Base64Encoding(3414) into ClassInstanceCreation(3417) at 0", "Insert SimpleName: alphabet(3415) into ClassInstanceCreation(3417) at 1", "Insert SimpleName: paddingChar(3416) into ClassInstanceCreation(3417) at 2", "Update SimpleName: CharInput(2465) to Reader", "Insert MethodDeclaration(3506) into AnonymousClassDeclaration(3520) at 1", "Insert SimpleName: Appendable(3557) into SimpleType: Appendable(3558) at 0", "Move FieldDeclaration(2557) into AnonymousClassDeclaration(3643) at 0", "Insert MethodDeclaration(3600) into AnonymousClassDeclaration(3643) at 1", "Insert MethodDeclaration(3624) into AnonymousClassDeclaration(3643) at 2", "Insert MethodDeclaration(3642) into AnonymousClassDeclaration(3643) at 3", "Insert SimpleName: separatingAppendable(3673) into MethodInvocation(3677) at 0", "Insert SimpleName: delegate(3674) into MethodInvocation(3677) at 1", "Insert SimpleName: separator(3675) into MethodInvocation(3677) at 2", "Insert SimpleName: afterEveryChars(3676) into MethodInvocation(3677) at 3", "Insert SimpleName: Writer(3680) into SimpleType: Writer(3681) at 0", "Insert MethodDeclaration(3700) into AnonymousClassDeclaration(3751) at 0", "Insert MethodDeclaration(3724) into AnonymousClassDeclaration(3751) at 1", "Move MethodDeclaration(2621) into AnonymousClassDeclaration(3751) at 2", "Move MethodDeclaration(2634) into AnonymousClassDeclaration(3751) at 3", "Insert SimpleName: delegate(3935) into MethodInvocation(3945) at 0", "Insert SimpleName: encodeTo(3936) into MethodInvocation(3945) at 1", "Insert MethodInvocation(3941) into MethodInvocation(3945) at 2", "Insert SimpleName: bytes(3942) into MethodInvocation(3945) at 3", "Insert SimpleName: off(3943) into MethodInvocation(3945) at 4", "Insert SimpleName: len(3944) into MethodInvocation(3945) at 5", "Insert SimpleName: delegate(3978) into MethodInvocation(3985) at 0", "Insert SimpleName: decodeTo(3979) into MethodInvocation(3985) at 1", "Insert SimpleName: target(3980) into MethodInvocation(3985) at 2", "Insert MethodInvocation(3984) into MethodInvocation(3985) at 3", "Insert SimpleName: StringBuilder(263) into SimpleType: StringBuilder(264) at 0", "Update SimpleName: encodingStream(291) to encodeTo", "Move SimpleName: encodingStream(291) into MethodInvocation(276) at 0", "Move SimpleName: result(292) into MethodInvocation(276) at 1", "Update SimpleName: byteOutput(306) to bytes", "Move SimpleName: byteOutput(306) into MethodInvocation(276) at 2", "Update SimpleName: write(307) to off", "Move SimpleName: write(307) into MethodInvocation(276) at 3", "Update SimpleName: byteOutput(317) to len", "Move SimpleName: byteOutput(317) into MethodInvocation(276) at 4", "Update SimpleName: ByteOutput(1809) to OutputStream", "Insert SimpleName: off(1896) into InfixExpression: +(1898) at 0", "Insert SimpleName: len(1897) into InfixExpression: +(1898) at 1", "Insert MethodInvocation(1926) into ExpressionStatement(1927) at 0", "Insert SimpleName: off(1957) into InfixExpression: +(1959) at 0", "Insert SimpleName: len(1958) into InfixExpression: +(1959) at 1", "Insert SimpleName: len(1964) into InfixExpression: <=(1966) at 0", "Insert QualifiedName: alphabet.bytesPerChunk(1965) into InfixExpression: <=(1966) at 1", "Insert SimpleName: i(1975) into VariableDeclarationFragment(1977) at 0", "Insert NumberLiteral: 0(1976) into VariableDeclarationFragment(1977) at 1", "Insert Assignment: |=(1992) into ExpressionStatement(1993) at 0", "Insert Assignment: <<=(1996) into ExpressionStatement(1997) at 0", "Insert InfixExpression: *(2008) into InfixExpression: -(2010) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2009) into InfixExpression: -(2010) at 1", "Insert SimpleName: len(2019) into InfixExpression: *(2021) at 0", "Insert NumberLiteral: 8(2020) into InfixExpression: *(2021) at 1", "Insert PrimitiveType: int(2023) into VariableDeclarationStatement(2037) at 0", "Insert VariableDeclarationFragment(2036) into VariableDeclarationStatement(2037) at 1", "Insert MethodInvocation(2044) into ExpressionStatement(2045) at 0", "Insert Assignment: +=(2048) into ExpressionStatement(2049) at 0", "Insert InfixExpression: <(2059) into WhileStatement(2072) at 0", "Insert Block(2071) into WhileStatement(2072) at 1", "Insert MethodInvocation(2125) into MethodInvocation(2128) at 0", "Insert SimpleName: trimTrailingFrom(2126) into MethodInvocation(2128) at 1", "Insert SimpleName: chars(2127) into MethodInvocation(2128) at 2", "Insert SimpleName: alphabet(2131) into MethodInvocation(2136) at 0", "Insert SimpleName: isValidPaddingStartPosition(2132) into MethodInvocation(2136) at 1", "Insert MethodInvocation(2135) into MethodInvocation(2136) at 2", "Insert ClassInstanceCreation(2145) into ThrowStatement(2146) at 0", "Insert SimpleName: charIdx(2155) into VariableDeclarationFragment(2157) at 0", "Insert NumberLiteral: 0(2156) into VariableDeclarationFragment(2157) at 1", "Insert SimpleName: chars(2160) into MethodInvocation(2162) at 0", "Insert SimpleName: length(2161) into MethodInvocation(2162) at 1", "Insert PrimitiveType: long(2167) into VariableDeclarationStatement(2171) at 0", "Insert VariableDeclarationFragment(2170) into VariableDeclarationStatement(2171) at 1", "Insert PrimitiveType: int(2172) into VariableDeclarationStatement(2176) at 0", "Insert VariableDeclarationFragment(2175) into VariableDeclarationStatement(2176) at 1", "Insert VariableDeclarationExpression(2181) into ForStatement(2214) at 0", "Insert InfixExpression: <(2184) into ForStatement(2214) at 1", "Move PostfixExpression: ++(2582) into ForStatement(2214) at 2", "Insert Block(2213) into ForStatement(2214) at 3", "Insert Modifier: final(2215) into VariableDeclarationStatement(2226) at 0", "Insert PrimitiveType: int(2216) into VariableDeclarationStatement(2226) at 1", "Insert VariableDeclarationFragment(2225) into VariableDeclarationStatement(2226) at 2", "Insert VariableDeclarationExpression(2236) into ForStatement(2259) at 0", "Insert InfixExpression: >=(2239) into ForStatement(2259) at 1", "Insert Assignment: -=(2242) into ForStatement(2259) at 2", "Insert Block(2258) into ForStatement(2259) at 3", "Update SimpleName: ByteInput(2004) to InputStream", "Insert SimpleName: newInstance(2476) into MethodInvocation(2479) at 0", "Insert SimpleName: alphabet(2477) into MethodInvocation(2479) at 1", "Insert NullLiteral(2478) into MethodInvocation(2479) at 2", "Insert MethodInvocation(2515) into ReturnStatement(2516) at 0", "Insert SimpleName: Alphabet(2766) into SimpleType: Alphabet(2767) at 0", "Insert SimpleName: alphabetChars(2769) into MethodInvocation(2771) at 0", "Insert SimpleName: toCharArray(2770) into MethodInvocation(2771) at 1", "Insert QualifiedName: alphabet.chars.length(2786) into InfixExpression: ==(2788) at 0", "Insert NumberLiteral: 16(2787) into InfixExpression: ==(2788) at 1", "Insert Assignment: =(2810) into ExpressionStatement(2811) at 0", "Insert Assignment: =(2823) into ExpressionStatement(2824) at 0", "Insert SimpleName: off(2856) into InfixExpression: +(2858) at 0", "Insert SimpleName: len(2857) into InfixExpression: +(2858) at 1", "Insert SimpleName: i(2863) into VariableDeclarationFragment(2865) at 0", "Insert NumberLiteral: 0(2864) into VariableDeclarationFragment(2865) at 1", "Insert PrimitiveType: int(2872) into VariableDeclarationStatement(2882) at 0", "Insert VariableDeclarationFragment(2881) into VariableDeclarationStatement(2882) at 1", "Insert MethodInvocation(2888) into ExpressionStatement(2889) at 0", "Insert MethodInvocation(2897) into ExpressionStatement(2898) at 0", "Insert MethodInvocation(2928) into InfixExpression: %(2930) at 0", "Insert NumberLiteral: 2(2929) into InfixExpression: %(2930) at 1", "Insert ClassInstanceCreation(2940) into ThrowStatement(2941) at 0", "Insert SimpleName: i(2950) into VariableDeclarationFragment(2952) at 0", "Insert NumberLiteral: 0(2951) into VariableDeclarationFragment(2952) at 1", "Insert SimpleName: chars(2955) into MethodInvocation(2957) at 0", "Insert SimpleName: length(2956) into MethodInvocation(2957) at 1", "Insert PrimitiveType: int(2962) into VariableDeclarationStatement(2984) at 0", "Insert VariableDeclarationFragment(2983) into VariableDeclarationStatement(2984) at 1", "Insert Assignment: =(2992) into ExpressionStatement(2993) at 0", "Insert SimpleName: Base16Encoding(3015) into SimpleType: Base16Encoding(3016) at 0", "Update SimpleName: CharOutput(2551) to Alphabet", "Insert SimpleName: alphabetChars(3046) into MethodInvocation(3048) at 0", "Insert SimpleName: toCharArray(3047) into MethodInvocation(3048) at 1", "Insert QualifiedName: alphabet.chars.length(3070) into InfixExpression: ==(3072) at 0", "Insert NumberLiteral: 64(3071) into InfixExpression: ==(3072) at 1", "Insert SimpleName: off(3104) into InfixExpression: +(3106) at 0", "Insert SimpleName: len(3105) into InfixExpression: +(3106) at 1", "Insert SimpleName: remaining(3116) into VariableDeclarationFragment(3118) at 0", "Insert SimpleName: len(3117) into VariableDeclarationFragment(3118) at 1", "Insert PrimitiveType: int(3126) into VariableDeclarationStatement(3155) at 0", "Insert VariableDeclarationFragment(3154) into VariableDeclarationStatement(3155) at 1", "Insert MethodInvocation(3164) into ExpressionStatement(3165) at 0", "Insert MethodInvocation(3177) into ExpressionStatement(3178) at 0", "Insert MethodInvocation(3190) into ExpressionStatement(3191) at 0", "Insert MethodInvocation(3200) into ExpressionStatement(3201) at 0", "Insert SimpleName: off(3205) into InfixExpression: +(3207) at 0", "Insert SimpleName: len(3206) into InfixExpression: +(3207) at 1", "Insert MethodInvocation(3218) into ExpressionStatement(3219) at 0", "Insert MethodInvocation(3249) into MethodInvocation(3252) at 0", "Insert SimpleName: trimTrailingFrom(3250) into MethodInvocation(3252) at 1", "Insert SimpleName: chars(3251) into MethodInvocation(3252) at 2", "Insert SimpleName: alphabet(3255) into MethodInvocation(3260) at 0", "Insert SimpleName: isValidPaddingStartPosition(3256) into MethodInvocation(3260) at 1", "Insert MethodInvocation(3259) into MethodInvocation(3260) at 2", "Insert ClassInstanceCreation(3269) into ThrowStatement(3270) at 0", "Insert SimpleName: i(3279) into VariableDeclarationFragment(3281) at 0", "Insert NumberLiteral: 0(3280) into VariableDeclarationFragment(3281) at 1", "Update SimpleName: separator(2577) to chars", "Insert PrimitiveType: int(3288) into VariableDeclarationStatement(3301) at 0", "Insert VariableDeclarationFragment(3300) into VariableDeclarationStatement(3301) at 1", "Insert Assignment: |=(3313) into ExpressionStatement(3314) at 0", "Insert Assignment: =(3325) into ExpressionStatement(3326) at 0", "Insert InfixExpression: <(3331) into IfStatement(3391) at 0", "Insert Block(3390) into IfStatement(3391) at 1", "Insert SimpleName: Base64Encoding(3413) into SimpleType: Base64Encoding(3414) at 0", "Insert MarkerAnnotation(3484) into MethodDeclaration(3506) at 0", "Insert Modifier: public(3485) into MethodDeclaration(3506) at 1", "Insert PrimitiveType: int(3486) into MethodDeclaration(3506) at 2", "Insert SimpleName: read(3487) into MethodDeclaration(3506) at 3", "Insert SingleVariableDeclaration(3492) into MethodDeclaration(3506) at 4", "Insert SingleVariableDeclaration(3495) into MethodDeclaration(3506) at 5", "Insert SingleVariableDeclaration(3498) into MethodDeclaration(3506) at 6", "Insert SimpleType: IOException(3500) into MethodDeclaration(3506) at 7", "Insert Block(3505) into MethodDeclaration(3506) at 8", "Move MarkerAnnotation(2559) into MethodDeclaration(3600) at 0", "Insert Modifier: public(3566) into MethodDeclaration(3600) at 1", "Insert SimpleType: Appendable(3568) into MethodDeclaration(3600) at 2", "Insert SimpleName: append(3569) into MethodDeclaration(3600) at 3", "Move SingleVariableDeclaration(2565) into MethodDeclaration(3600) at 4", "Move SimpleType: IOException(2567) into MethodDeclaration(3600) at 5", "Insert Block(3599) into MethodDeclaration(3600) at 6", "Insert MarkerAnnotation(3602) into MethodDeclaration(3624) at 0", "Insert Modifier: public(3603) into MethodDeclaration(3624) at 1", "Insert SimpleType: Appendable(3605) into MethodDeclaration(3624) at 2", "Insert SimpleName: append(3606) into MethodDeclaration(3624) at 3", "Insert SingleVariableDeclaration(3610) into MethodDeclaration(3624) at 4", "Insert SingleVariableDeclaration(3613) into MethodDeclaration(3624) at 5", "Insert SingleVariableDeclaration(3616) into MethodDeclaration(3624) at 6", "Insert SimpleType: IOException(3618) into MethodDeclaration(3624) at 7", "Insert Block(3623) into MethodDeclaration(3624) at 8", "Insert MarkerAnnotation(3626) into MethodDeclaration(3642) at 0", "Insert Modifier: public(3627) into MethodDeclaration(3642) at 1", "Insert SimpleType: Appendable(3629) into MethodDeclaration(3642) at 2", "Insert SimpleName: append(3630) into MethodDeclaration(3642) at 3", "Insert SingleVariableDeclaration(3634) into MethodDeclaration(3642) at 4", "Move SimpleType: IOException(1433) into MethodDeclaration(3642) at 5", "Insert Block(3641) into MethodDeclaration(3642) at 6", "Insert MarkerAnnotation(3683) into MethodDeclaration(3700) at 0", "Insert Modifier: public(3684) into MethodDeclaration(3700) at 1", "Insert PrimitiveType: void(3685) into MethodDeclaration(3700) at 2", "Insert SimpleName: write(3686) into MethodDeclaration(3700) at 3", "Insert SingleVariableDeclaration(3689) into MethodDeclaration(3700) at 4", "Insert SimpleType: IOException(3691) into MethodDeclaration(3700) at 5", "Insert Block(3699) into MethodDeclaration(3700) at 6", "Insert MarkerAnnotation(3702) into MethodDeclaration(3724) at 0", "Insert Modifier: public(3703) into MethodDeclaration(3724) at 1", "Insert PrimitiveType: void(3704) into MethodDeclaration(3724) at 2", "Insert SimpleName: write(3705) into MethodDeclaration(3724) at 3", "Insert SingleVariableDeclaration(3710) into MethodDeclaration(3724) at 4", "Insert SingleVariableDeclaration(3713) into MethodDeclaration(3724) at 5", "Insert SingleVariableDeclaration(3716) into MethodDeclaration(3724) at 6", "Insert SimpleType: IOException(3718) into MethodDeclaration(3724) at 7", "Insert Block(3723) into MethodDeclaration(3724) at 8", "Update SimpleName: separatingOutput(2785) to separatingWriter", "Insert SimpleName: separatingAppendable(3937) into MethodInvocation(3941) at 0", "Insert SimpleName: target(3938) into MethodInvocation(3941) at 1", "Insert SimpleName: separator(3939) into MethodInvocation(3941) at 2", "Insert SimpleName: afterEveryChars(3940) into MethodInvocation(3941) at 3", "Insert SimpleName: separatorChars(3981) into MethodInvocation(3984) at 0", "Insert SimpleName: removeFrom(3982) into MethodInvocation(3984) at 1", "Insert SimpleName: chars(3983) into MethodInvocation(3984) at 2", "Update SimpleName: ignoringInput(2820) to ignoringReader", "Update SimpleName: input(2821) to reader", "Insert SimpleName: encodeChunkTo(1913) into MethodInvocation(1926) at 0", "Insert SimpleName: target(1914) into MethodInvocation(1926) at 1", "Insert SimpleName: bytes(1915) into MethodInvocation(1926) at 2", "Insert InfixExpression: +(1918) into MethodInvocation(1926) at 3", "Insert MethodInvocation(1925) into MethodInvocation(1926) at 4", "Insert SimpleName: bitBuffer(1984) into Assignment: |=(1992) at 0", "Insert InfixExpression: &(1991) into Assignment: |=(1992) at 1", "Insert SimpleName: bitBuffer(1994) into Assignment: <<=(1996) at 0", "Insert NumberLiteral: 8(1995) into Assignment: <<=(1996) at 1", "Insert ParenthesizedExpression(2006) into InfixExpression: *(2008) at 0", "Insert NumberLiteral: 8(2007) into InfixExpression: *(2008) at 1", "Insert SimpleName: charIndex(2024) into VariableDeclarationFragment(2036) at 0", "Insert InfixExpression: &(2035) into VariableDeclarationFragment(2036) at 1", "Insert SimpleName: target(2038) into MethodInvocation(2044) at 0", "Insert SimpleName: append(2039) into MethodInvocation(2044) at 1", "Insert MethodInvocation(2043) into MethodInvocation(2044) at 2", "Insert SimpleName: bitsProcessed(2046) into Assignment: +=(2048) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2047) into Assignment: +=(2048) at 1", "Insert SimpleName: bitsProcessed(2055) into InfixExpression: <(2059) at 0", "Insert InfixExpression: *(2058) into InfixExpression: <(2059) at 1", "Insert ExpressionStatement(2066) into Block(2071) at 0", "Insert ExpressionStatement(2070) into Block(2071) at 1", "Insert SimpleName: padding(2124) into MethodInvocation(2125) at 0", "Insert SimpleName: chars(2133) into MethodInvocation(2135) at 0", "Insert SimpleName: length(2134) into MethodInvocation(2135) at 1", "Move SimpleType: DecodingException(617) into ClassInstanceCreation(2145) at 0", "Insert InfixExpression: +(2144) into ClassInstanceCreation(2145) at 1", "Insert SimpleName: chunk(2168) into VariableDeclarationFragment(2170) at 0", "Insert NumberLiteral: 0(2169) into VariableDeclarationFragment(2170) at 1", "Insert SimpleName: charsProcessed(2173) into VariableDeclarationFragment(2175) at 0", "Insert NumberLiteral: 0(2174) into VariableDeclarationFragment(2175) at 1", "Insert PrimitiveType: int(2177) into VariableDeclarationExpression(2181) at 0", "Insert VariableDeclarationFragment(2180) into VariableDeclarationExpression(2181) at 1", "Insert SimpleName: i(2182) into InfixExpression: <(2184) at 0", "Insert QualifiedName: alphabet.charsPerChunk(2183) into InfixExpression: <(2184) at 1", "Insert SimpleName: i(2185) into PostfixExpression: ++(2186) at 0", "Insert ExpressionStatement(2190) into Block(2213) at 0", "Insert IfStatement(2212) into Block(2213) at 1", "Insert SimpleName: minOffset(2217) into VariableDeclarationFragment(2225) at 0", "Insert InfixExpression: -(2224) into VariableDeclarationFragment(2225) at 1", "Insert PrimitiveType: int(2227) into VariableDeclarationExpression(2236) at 0", "Insert VariableDeclarationFragment(2235) into VariableDeclarationExpression(2236) at 1", "Insert SimpleName: offset(2237) into InfixExpression: >=(2239) at 0", "Insert SimpleName: minOffset(2238) into InfixExpression: >=(2239) at 1", "Insert SimpleName: offset(2240) into Assignment: -=(2242) at 0", "Insert NumberLiteral: 8(2241) into Assignment: -=(2242) at 1", "Insert ExpressionStatement(2257) into Block(2258) at 0", "Insert SimpleName: newInstance(2512) into MethodInvocation(2515) at 0", "Insert SimpleName: alphabet(2513) into MethodInvocation(2515) at 1", "Insert SimpleName: padChar(2514) into MethodInvocation(2515) at 2", "Insert ArrayAccess(2803) into Assignment: =(2810) at 0", "Insert MethodInvocation(2809) into Assignment: =(2810) at 1", "Insert ArrayAccess(2816) into Assignment: =(2823) at 0", "Insert MethodInvocation(2822) into Assignment: =(2823) at 1", "Insert SimpleName: b(2873) into VariableDeclarationFragment(2881) at 0", "Insert InfixExpression: &(2880) into VariableDeclarationFragment(2881) at 1", "Insert SimpleName: target(2883) into MethodInvocation(2888) at 0", "Insert SimpleName: append(2884) into MethodInvocation(2888) at 1", "Insert ArrayAccess(2887) into MethodInvocation(2888) at 2", "Insert SimpleName: target(2890) into MethodInvocation(2897) at 0", "Insert SimpleName: append(2891) into MethodInvocation(2897) at 1", "Insert ArrayAccess(2896) into MethodInvocation(2897) at 2", "Insert SimpleName: chars(2926) into MethodInvocation(2928) at 0", "Insert SimpleName: length(2927) into MethodInvocation(2928) at 1", "Insert SimpleType: DecodingException(2934) into ClassInstanceCreation(2940) at 0", "Insert InfixExpression: +(2939) into ClassInstanceCreation(2940) at 1", "Insert SimpleName: decoded(2963) into VariableDeclarationFragment(2983) at 0", "Insert InfixExpression: |(2982) into VariableDeclarationFragment(2983) at 1", "Insert ArrayAccess(2988) into Assignment: =(2992) at 0", "Insert CastExpression(2991) into Assignment: =(2992) at 1", "Insert SimpleName: chunk(3127) into VariableDeclarationFragment(3154) at 0", "Insert InfixExpression: |(3153) into VariableDeclarationFragment(3154) at 1", "Insert SimpleName: target(3156) into MethodInvocation(3164) at 0", "Insert SimpleName: append(3157) into MethodInvocation(3164) at 1", "Insert MethodInvocation(3163) into MethodInvocation(3164) at 2", "Insert SimpleName: target(3166) into MethodInvocation(3177) at 0", "Insert SimpleName: append(3167) into MethodInvocation(3177) at 1", "Insert MethodInvocation(3176) into MethodInvocation(3177) at 2", "Insert SimpleName: target(3179) into MethodInvocation(3190) at 0", "Insert SimpleName: append(3180) into MethodInvocation(3190) at 1", "Insert MethodInvocation(3189) into MethodInvocation(3190) at 2", "Insert SimpleName: target(3192) into MethodInvocation(3200) at 0", "Insert SimpleName: append(3193) into MethodInvocation(3200) at 1", "Insert MethodInvocation(3199) into MethodInvocation(3200) at 2", "Insert SimpleName: encodeChunkTo(3209) into MethodInvocation(3218) at 0", "Insert SimpleName: target(3210) into MethodInvocation(3218) at 1", "Insert SimpleName: bytes(3211) into MethodInvocation(3218) at 2", "Insert SimpleName: i(3212) into MethodInvocation(3218) at 3", "Insert InfixExpression: -(3217) into MethodInvocation(3218) at 4", "Insert SimpleName: padding(3248) into MethodInvocation(3249) at 0", "Insert SimpleName: chars(3257) into MethodInvocation(3259) at 0", "Insert SimpleName: length(3258) into MethodInvocation(3259) at 1", "Insert SimpleType: DecodingException(3263) into ClassInstanceCreation(3269) at 0", "Insert InfixExpression: +(3268) into ClassInstanceCreation(3269) at 1", "Insert SimpleName: chunk(3289) into VariableDeclarationFragment(3300) at 0", "Insert InfixExpression: <<(3299) into VariableDeclarationFragment(3300) at 1", "Insert SimpleName: chunk(3302) into Assignment: |=(3313) at 0", "Insert InfixExpression: <<(3312) into Assignment: |=(3313) at 1", "Insert ArrayAccess(3318) into Assignment: =(3325) at 0", "Insert CastExpression(3324) into Assignment: =(3325) at 1", "Insert SimpleName: i(3327) into InfixExpression: <(3331) at 0", "Insert MethodInvocation(3330) into InfixExpression: <(3331) at 1", "Insert ExpressionStatement(3344) into Block(3390) at 0", "Insert ExpressionStatement(3359) into Block(3390) at 1", "Insert IfStatement(3389) into Block(3390) at 2", "Insert SimpleName: Override(3483) into MarkerAnnotation(3484) at 0", "Insert ArrayType: char[](3490) into SingleVariableDeclaration(3492) at 0", "Insert SimpleName: cbuf(3491) into SingleVariableDeclaration(3492) at 1", "Insert PrimitiveType: int(3493) into SingleVariableDeclaration(3495) at 0", "Insert SimpleName: off(3494) into SingleVariableDeclaration(3495) at 1", "Insert PrimitiveType: int(3496) into SingleVariableDeclaration(3498) at 0", "Insert SimpleName: len(3497) into SingleVariableDeclaration(3498) at 1", "Insert SimpleName: IOException(3499) into SimpleType: IOException(3500) at 0", "Insert ThrowStatement(3504) into Block(3505) at 0", "Insert SimpleName: Appendable(3567) into SimpleType: Appendable(3568) at 0", "Insert IfStatement(3588) into Block(3599) at 0", "Move ExpressionStatement(2603) into Block(3599) at 1", "Move ExpressionStatement(2606) into Block(3599) at 2", "Insert ReturnStatement(3598) into Block(3599) at 3", "Insert SimpleName: Override(3601) into MarkerAnnotation(3602) at 0", "Insert SimpleName: Appendable(3604) into SimpleType: Appendable(3605) at 0", "Insert SimpleType: CharSequence(3608) into SingleVariableDeclaration(3610) at 0", "Insert SimpleName: chars(3609) into SingleVariableDeclaration(3610) at 1", "Insert PrimitiveType: int(3611) into SingleVariableDeclaration(3613) at 0", "Insert SimpleName: off(3612) into SingleVariableDeclaration(3613) at 1", "Insert PrimitiveType: int(3614) into SingleVariableDeclaration(3616) at 0", "Insert SimpleName: len(3615) into SingleVariableDeclaration(3616) at 1", "Insert SimpleName: IOException(3617) into SimpleType: IOException(3618) at 0", "Insert ThrowStatement(3622) into Block(3623) at 0", "Insert SimpleName: Override(3625) into MarkerAnnotation(3626) at 0", "Insert SimpleName: Appendable(3628) into SimpleType: Appendable(3629) at 0", "Insert SimpleType: CharSequence(3632) into SingleVariableDeclaration(3634) at 0", "Insert SimpleName: chars(3633) into SingleVariableDeclaration(3634) at 1", "Insert ThrowStatement(3640) into Block(3641) at 0", "Insert SimpleName: Override(3682) into MarkerAnnotation(3683) at 0", "Insert PrimitiveType: int(3687) into SingleVariableDeclaration(3689) at 0", "Insert SimpleName: c(3688) into SingleVariableDeclaration(3689) at 1", "Insert SimpleName: IOException(3690) into SimpleType: IOException(3691) at 0", "Insert ExpressionStatement(3698) into Block(3699) at 0", "Insert SimpleName: Override(3701) into MarkerAnnotation(3702) at 0", "Insert ArrayType: char[](3708) into SingleVariableDeclaration(3710) at 0", "Insert SimpleName: chars(3709) into SingleVariableDeclaration(3710) at 1", "Insert PrimitiveType: int(3711) into SingleVariableDeclaration(3713) at 0", "Insert SimpleName: off(3712) into SingleVariableDeclaration(3713) at 1", "Insert PrimitiveType: int(3714) into SingleVariableDeclaration(3716) at 0", "Insert SimpleName: len(3715) into SingleVariableDeclaration(3716) at 1", "Insert SimpleName: IOException(3717) into SimpleType: IOException(3718) at 0", "Insert ThrowStatement(3722) into Block(3723) at 0", "Update PrimitiveType: byte(1831) to int", "Insert SimpleName: off(1916) into InfixExpression: +(1918) at 0", "Insert SimpleName: i(1917) into InfixExpression: +(1918) at 1", "Insert SimpleName: Math(1919) into MethodInvocation(1925) at 0", "Insert SimpleName: min(1920) into MethodInvocation(1925) at 1", "Insert QualifiedName: alphabet.bytesPerChunk(1921) into MethodInvocation(1925) at 2", "Insert InfixExpression: -(1924) into MethodInvocation(1925) at 3", "Move ArrayAccess(312) into InfixExpression: &(1991) at 0", "Insert NumberLiteral: 0xFF(1990) into InfixExpression: &(1991) at 1", "Insert InfixExpression: +(2005) into ParenthesizedExpression(2006) at 0", "Insert CastExpression(2033) into InfixExpression: &(2035) at 0", "Insert QualifiedName: alphabet.mask(2034) into InfixExpression: &(2035) at 1", "Insert SimpleName: alphabet(2040) into MethodInvocation(2043) at 0", "Insert SimpleName: encode(2041) into MethodInvocation(2043) at 1", "Insert SimpleName: charIndex(2042) into MethodInvocation(2043) at 2", "Insert QualifiedName: alphabet.bytesPerChunk(2056) into InfixExpression: *(2058) at 0", "Insert NumberLiteral: 8(2057) into InfixExpression: *(2058) at 1", "Insert MethodInvocation(2065) into ExpressionStatement(2066) at 0", "Insert Assignment: +=(2069) into ExpressionStatement(2070) at 0", "Insert StringLiteral: \"Invalid input length \"(2140) into InfixExpression: +(2144) at 0", "Insert MethodInvocation(2143) into InfixExpression: +(2144) at 1", "Insert SimpleName: i(2178) into VariableDeclarationFragment(2180) at 0", "Insert NumberLiteral: 0(2179) into VariableDeclarationFragment(2180) at 1", "Insert Assignment: <<=(2189) into ExpressionStatement(2190) at 0", "Insert InfixExpression: <(2197) into IfStatement(2212) at 0", "Insert Block(2211) into IfStatement(2212) at 1", "Insert InfixExpression: *(2220) into InfixExpression: -(2224) at 0", "Insert InfixExpression: *(2223) into InfixExpression: -(2224) at 1", "Insert SimpleName: offset(2228) into VariableDeclarationFragment(2235) at 0", "Insert InfixExpression: *(2234) into VariableDeclarationFragment(2235) at 1", "Insert Assignment: =(2256) into ExpressionStatement(2257) at 0", "Insert SimpleName: encoding(2801) into ArrayAccess(2803) at 0", "Insert SimpleName: i(2802) into ArrayAccess(2803) at 1", "Insert SimpleName: alphabet(2804) into MethodInvocation(2809) at 0", "Insert SimpleName: encode(2805) into MethodInvocation(2809) at 1", "Insert InfixExpression: >>>(2808) into MethodInvocation(2809) at 2", "Insert SimpleName: encoding(2812) into ArrayAccess(2816) at 0", "Insert InfixExpression: |(2815) into ArrayAccess(2816) at 1", "Insert SimpleName: alphabet(2817) into MethodInvocation(2822) at 0", "Insert SimpleName: encode(2818) into MethodInvocation(2822) at 1", "Insert InfixExpression: &(2821) into MethodInvocation(2822) at 2", "Insert ArrayAccess(2878) into InfixExpression: &(2880) at 0", "Insert NumberLiteral: 0xFF(2879) into InfixExpression: &(2880) at 1", "Insert SimpleName: encoding(2885) into ArrayAccess(2887) at 0", "Insert SimpleName: b(2886) into ArrayAccess(2887) at 1", "Insert SimpleName: encoding(2892) into ArrayAccess(2896) at 0", "Insert InfixExpression: |(2895) into ArrayAccess(2896) at 1", "Insert SimpleName: DecodingException(2933) into SimpleType: DecodingException(2934) at 0", "Insert StringLiteral: \"Invalid input length \"(2935) into InfixExpression: +(2939) at 0", "Insert MethodInvocation(2938) into InfixExpression: +(2939) at 1", "Insert InfixExpression: <<(2972) into InfixExpression: |(2982) at 0", "Insert MethodInvocation(2981) into InfixExpression: |(2982) at 1", "Insert SimpleName: target(2985) into ArrayAccess(2988) at 0", "Insert PostfixExpression: ++(2987) into ArrayAccess(2988) at 1", "Insert PrimitiveType: byte(2989) into CastExpression(2991) at 0", "Insert SimpleName: decoded(2990) into CastExpression(2991) at 1", "Insert InfixExpression: |(3146) into InfixExpression: |(3153) at 0", "Insert InfixExpression: &(3152) into InfixExpression: |(3153) at 1", "Insert SimpleName: alphabet(3158) into MethodInvocation(3163) at 0", "Insert SimpleName: encode(3159) into MethodInvocation(3163) at 1", "Insert InfixExpression: >>>(3162) into MethodInvocation(3163) at 2", "Insert SimpleName: alphabet(3168) into MethodInvocation(3176) at 0", "Insert SimpleName: encode(3169) into MethodInvocation(3176) at 1", "Insert InfixExpression: &(3175) into MethodInvocation(3176) at 2", "Insert SimpleName: alphabet(3181) into MethodInvocation(3189) at 0", "Insert SimpleName: encode(3182) into MethodInvocation(3189) at 1", "Insert InfixExpression: &(3188) into MethodInvocation(3189) at 2", "Insert SimpleName: alphabet(3194) into MethodInvocation(3199) at 0", "Insert SimpleName: encode(3195) into MethodInvocation(3199) at 1", "Insert InfixExpression: &(3198) into MethodInvocation(3199) at 2", "Insert InfixExpression: +(3215) into InfixExpression: -(3217) at 0", "Insert SimpleName: i(3216) into InfixExpression: -(3217) at 1", "Insert SimpleName: DecodingException(3262) into SimpleType: DecodingException(3263) at 0", "Insert StringLiteral: \"Invalid input length \"(3264) into InfixExpression: +(3268) at 0", "Insert MethodInvocation(3267) into InfixExpression: +(3268) at 1", "Insert MethodInvocation(3297) into InfixExpression: <<(3299) at 0", "Insert NumberLiteral: 18(3298) into InfixExpression: <<(3299) at 1", "Insert MethodInvocation(3310) into InfixExpression: <<(3312) at 0", "Insert NumberLiteral: 12(3311) into InfixExpression: <<(3312) at 1", "Insert SimpleName: target(3315) into ArrayAccess(3318) at 0", "Insert PostfixExpression: ++(3317) into ArrayAccess(3318) at 1", "Insert PrimitiveType: byte(3319) into CastExpression(3324) at 0", "Insert ParenthesizedExpression(3323) into CastExpression(3324) at 1", "Insert SimpleName: chars(3328) into MethodInvocation(3330) at 0", "Insert SimpleName: length(3329) into MethodInvocation(3330) at 1", "Insert Assignment: |=(3343) into ExpressionStatement(3344) at 0", "Insert Assignment: =(3358) into ExpressionStatement(3359) at 0", "Insert InfixExpression: <(3364) into IfStatement(3389) at 0", "Insert Block(3388) into IfStatement(3389) at 1", "Insert PrimitiveType: char(3488) into ArrayType: char[](3490) at 0", "Insert Dimension(3489) into ArrayType: char[](3490) at 1", "Insert ClassInstanceCreation(3503) into ThrowStatement(3504) at 0", "Move InfixExpression: ==(2570) into IfStatement(3588) at 0", "Insert Block(3587) into IfStatement(3588) at 1", "Insert ThisExpression(3597) into ReturnStatement(3598) at 0", "Insert SimpleName: CharSequence(3607) into SimpleType: CharSequence(3608) at 0", "Insert ClassInstanceCreation(3621) into ThrowStatement(3622) at 0", "Insert SimpleName: CharSequence(3631) into SimpleType: CharSequence(3632) at 0", "Insert ClassInstanceCreation(3639) into ThrowStatement(3640) at 0", "Insert MethodInvocation(3697) into ExpressionStatement(3698) at 0", "Insert PrimitiveType: char(3706) into ArrayType: char[](3708) at 0", "Insert Dimension(3707) into ArrayType: char[](3708) at 1", "Insert ClassInstanceCreation(3721) into ThrowStatement(3722) at 0", "Insert SimpleName: len(1922) into InfixExpression: -(1924) at 0", "Insert SimpleName: i(1923) into InfixExpression: -(1924) at 1", "Insert SimpleName: len(2003) into InfixExpression: +(2005) at 0", "Insert NumberLiteral: 1(2004) into InfixExpression: +(2005) at 1", "Insert PrimitiveType: int(2025) into CastExpression(2033) at 0", "Insert ParenthesizedExpression(2032) into CastExpression(2033) at 1", "Insert SimpleName: target(2060) into MethodInvocation(2065) at 0", "Insert SimpleName: append(2061) into MethodInvocation(2065) at 1", "Insert MethodInvocation(2064) into MethodInvocation(2065) at 2", "Insert SimpleName: bitsProcessed(2067) into Assignment: +=(2069) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2068) into Assignment: +=(2069) at 1", "Insert SimpleName: chars(2141) into MethodInvocation(2143) at 0", "Insert SimpleName: length(2142) into MethodInvocation(2143) at 1", "Insert SimpleName: chunk(2187) into Assignment: <<=(2189) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2188) into Assignment: <<=(2189) at 1", "Insert InfixExpression: +(2193) into InfixExpression: <(2197) at 0", "Insert MethodInvocation(2196) into InfixExpression: <(2197) at 1", "Insert ExpressionStatement(2210) into Block(2211) at 0", "Insert QualifiedName: alphabet.bytesPerChunk(2218) into InfixExpression: *(2220) at 0", "Insert NumberLiteral: 8(2219) into InfixExpression: *(2220) at 1", "Insert SimpleName: charsProcessed(2221) into InfixExpression: *(2223) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2222) into InfixExpression: *(2223) at 1", "Insert ParenthesizedExpression(2232) into InfixExpression: *(2234) at 0", "Insert NumberLiteral: 8(2233) into InfixExpression: *(2234) at 1", "Insert ArrayAccess(2246) into Assignment: =(2256) at 0", "Insert CastExpression(2255) into Assignment: =(2256) at 1", "Insert MethodInvocation(2606) into ConditionalExpression(2607) at 2", "Insert MethodInvocation(2650) into ConditionalExpression(2651) at 2", "Insert SimpleName: i(2806) into InfixExpression: >>>(2808) at 0", "Insert NumberLiteral: 4(2807) into InfixExpression: >>>(2808) at 1", "Insert SimpleName: i(2813) into InfixExpression: |(2815) at 0", "Insert NumberLiteral: 0x100(2814) into InfixExpression: |(2815) at 1", "Insert SimpleName: i(2819) into InfixExpression: &(2821) at 0", "Insert NumberLiteral: 0xF(2820) into InfixExpression: &(2821) at 1", "Insert SimpleName: bytes(2874) into ArrayAccess(2878) at 0", "Insert InfixExpression: +(2877) into ArrayAccess(2878) at 1", "Insert SimpleName: b(2893) into InfixExpression: |(2895) at 0", "Insert NumberLiteral: 0x100(2894) into InfixExpression: |(2895) at 1", "Insert SimpleName: chars(2936) into MethodInvocation(2938) at 0", "Insert SimpleName: length(2937) into MethodInvocation(2938) at 1", "Insert MethodInvocation(2970) into InfixExpression: <<(2972) at 0", "Insert NumberLiteral: 4(2971) into InfixExpression: <<(2972) at 1", "Insert SimpleName: alphabet(2973) into MethodInvocation(2981) at 0", "Insert SimpleName: decode(2974) into MethodInvocation(2981) at 1", "Insert MethodInvocation(2980) into MethodInvocation(2981) at 2", "Insert SimpleName: bytesWritten(2986) into PostfixExpression: ++(2987) at 0", "Insert InfixExpression: <<(3136) into InfixExpression: |(3146) at 0", "Insert InfixExpression: <<(3145) into InfixExpression: |(3146) at 1", "Insert ArrayAccess(3150) into InfixExpression: &(3152) at 0", "Insert NumberLiteral: 0xFF(3151) into InfixExpression: &(3152) at 1", "Insert SimpleName: chunk(3160) into InfixExpression: >>>(3162) at 0", "Insert NumberLiteral: 18(3161) into InfixExpression: >>>(3162) at 1", "Insert ParenthesizedExpression(3173) into InfixExpression: &(3175) at 0", "Insert NumberLiteral: 0x3F(3174) into InfixExpression: &(3175) at 1", "Insert ParenthesizedExpression(3186) into InfixExpression: &(3188) at 0", "Insert NumberLiteral: 0x3F(3187) into InfixExpression: &(3188) at 1", "Insert SimpleName: chunk(3196) into InfixExpression: &(3198) at 0", "Insert NumberLiteral: 0x3F(3197) into InfixExpression: &(3198) at 1", "Insert SimpleName: off(3213) into InfixExpression: +(3215) at 0", "Insert SimpleName: len(3214) into InfixExpression: +(3215) at 1", "Insert SimpleName: chars(3265) into MethodInvocation(3267) at 0", "Insert SimpleName: length(3266) into MethodInvocation(3267) at 1", "Insert SimpleName: alphabet(3290) into MethodInvocation(3297) at 0", "Insert SimpleName: decode(3291) into MethodInvocation(3297) at 1", "Insert MethodInvocation(3296) into MethodInvocation(3297) at 2", "Insert SimpleName: alphabet(3303) into MethodInvocation(3310) at 0", "Insert SimpleName: decode(3304) into MethodInvocation(3310) at 1", "Insert MethodInvocation(3309) into MethodInvocation(3310) at 2", "Insert SimpleName: bytesWritten(3316) into PostfixExpression: ++(3317) at 0", "Insert InfixExpression: >>>(3322) into ParenthesizedExpression(3323) at 0", "Insert SimpleName: chunk(3332) into Assignment: |=(3343) at 0", "Insert InfixExpression: <<(3342) into Assignment: |=(3343) at 1", "Insert ArrayAccess(3348) into Assignment: =(3358) at 0", "Insert CastExpression(3357) into Assignment: =(3358) at 1", "Insert SimpleName: i(3360) into InfixExpression: <(3364) at 0", "Insert MethodInvocation(3363) into InfixExpression: <(3364) at 1", "Move ExpressionStatement(2590) into Block(3388) at 0", "Insert ExpressionStatement(3387) into Block(3388) at 1", "Insert SimpleType: UnsupportedOperationException(3502) into ClassInstanceCreation(3503) at 0", "Insert ExpressionStatement(3582) into Block(3587) at 0", "Move ExpressionStatement(2596) into Block(3587) at 1", "Update SimpleName: write(2600) to append", "Insert SimpleType: UnsupportedOperationException(3620) into ClassInstanceCreation(3621) at 0", "Insert SimpleType: UnsupportedOperationException(3638) into ClassInstanceCreation(3639) at 0", "Insert SimpleName: seperatingAppendable(3692) into MethodInvocation(3697) at 0", "Insert SimpleName: append(3693) into MethodInvocation(3697) at 1", "Insert CastExpression(3696) into MethodInvocation(3697) at 2", "Insert SimpleType: UnsupportedOperationException(3720) into ClassInstanceCreation(3721) at 0", "Insert InfixExpression: >>>(2031) into ParenthesizedExpression(2032) at 0", "Insert SimpleName: paddingChar(2062) into MethodInvocation(2064) at 0", "Insert SimpleName: charValue(2063) into MethodInvocation(2064) at 1", "Insert SimpleName: charIdx(2191) into InfixExpression: +(2193) at 0", "Insert SimpleName: i(2192) into InfixExpression: +(2193) at 1", "Insert SimpleName: chars(2194) into MethodInvocation(2196) at 0", "Insert SimpleName: length(2195) into MethodInvocation(2196) at 1", "Insert Assignment: |=(2209) into ExpressionStatement(2210) at 0", "Insert InfixExpression: -(2231) into ParenthesizedExpression(2232) at 0", "Insert SimpleName: target(2243) into ArrayAccess(2246) at 0", "Insert PostfixExpression: ++(2245) into ArrayAccess(2246) at 1", "Insert PrimitiveType: byte(2247) into CastExpression(2255) at 0", "Insert ParenthesizedExpression(2254) into CastExpression(2255) at 1", "Insert SimpleName: newInstance(2603) into MethodInvocation(2606) at 0", "Insert SimpleName: upper(2604) into MethodInvocation(2606) at 1", "Insert SimpleName: paddingChar(2605) into MethodInvocation(2606) at 2", "Insert SimpleName: newInstance(2647) into MethodInvocation(2650) at 0", "Insert SimpleName: lower(2648) into MethodInvocation(2650) at 1", "Insert SimpleName: paddingChar(2649) into MethodInvocation(2650) at 2", "Insert SimpleName: off(2875) into InfixExpression: +(2877) at 0", "Insert SimpleName: i(2876) into InfixExpression: +(2877) at 1", "Insert SimpleName: alphabet(2964) into MethodInvocation(2970) at 0", "Insert SimpleName: decode(2965) into MethodInvocation(2970) at 1", "Insert MethodInvocation(2969) into MethodInvocation(2970) at 2", "Insert SimpleName: chars(2975) into MethodInvocation(2980) at 0", "Insert SimpleName: charAt(2976) into MethodInvocation(2980) at 1", "Insert InfixExpression: +(2979) into MethodInvocation(2980) at 2", "Insert ParenthesizedExpression(3134) into InfixExpression: <<(3136) at 0", "Insert NumberLiteral: 16(3135) into InfixExpression: <<(3136) at 1", "Insert ParenthesizedExpression(3143) into InfixExpression: <<(3145) at 0", "Insert NumberLiteral: 8(3144) into InfixExpression: <<(3145) at 1", "Insert SimpleName: bytes(3147) into ArrayAccess(3150) at 0", "Insert PostfixExpression: ++(3149) into ArrayAccess(3150) at 1", "Insert InfixExpression: >>>(3172) into ParenthesizedExpression(3173) at 0", "Insert InfixExpression: >>>(3185) into ParenthesizedExpression(3186) at 0", "Insert SimpleName: chars(3292) into MethodInvocation(3296) at 0", "Insert SimpleName: charAt(3293) into MethodInvocation(3296) at 1", "Move PostfixExpression: ++(305) into MethodInvocation(3296) at 2", "Insert SimpleName: chars(3305) into MethodInvocation(3309) at 0", "Insert SimpleName: charAt(3306) into MethodInvocation(3309) at 1", "Insert PostfixExpression: ++(3308) into MethodInvocation(3309) at 2", "Insert SimpleName: chunk(3320) into InfixExpression: >>>(3322) at 0", "Insert NumberLiteral: 16(3321) into InfixExpression: >>>(3322) at 1", "Insert MethodInvocation(3340) into InfixExpression: <<(3342) at 0", "Insert NumberLiteral: 6(3341) into InfixExpression: <<(3342) at 1", "Insert SimpleName: target(3345) into ArrayAccess(3348) at 0", "Insert PostfixExpression: ++(3347) into ArrayAccess(3348) at 1", "Insert PrimitiveType: byte(3349) into CastExpression(3357) at 0", "Insert ParenthesizedExpression(3356) into CastExpression(3357) at 1", "Insert SimpleName: chars(3361) into MethodInvocation(3363) at 0", "Insert SimpleName: length(3362) into MethodInvocation(3363) at 1", "Insert Assignment: |=(3374) into ExpressionStatement(3375) at 0", "Insert Assignment: =(3386) into ExpressionStatement(3387) at 0", "Insert SimpleName: UnsupportedOperationException(3501) into SimpleType: UnsupportedOperationException(3502) at 0", "Insert MethodInvocation(3581) into ExpressionStatement(3582) at 0", "Insert SimpleName: UnsupportedOperationException(3619) into SimpleType: UnsupportedOperationException(3620) at 0", "Insert SimpleName: UnsupportedOperationException(3637) into SimpleType: UnsupportedOperationException(3638) at 0", "Insert PrimitiveType: char(3694) into CastExpression(3696) at 0", "Insert SimpleName: c(3695) into CastExpression(3696) at 1", "Insert SimpleName: UnsupportedOperationException(3719) into SimpleType: UnsupportedOperationException(3720) at 0", "Insert SimpleName: bitBuffer(2026) into InfixExpression: >>>(2031) at 0", "Insert ParenthesizedExpression(2030) into InfixExpression: >>>(2031) at 1", "Insert SimpleName: chunk(2198) into Assignment: |=(2209) at 0", "Insert MethodInvocation(2208) into Assignment: |=(2209) at 1", "Insert QualifiedName: alphabet.bytesPerChunk(2229) into InfixExpression: -(2231) at 0", "Insert NumberLiteral: 1(2230) into InfixExpression: -(2231) at 1", "Insert SimpleName: bytesWritten(2244) into PostfixExpression: ++(2245) at 0", "Insert InfixExpression: &(2253) into ParenthesizedExpression(2254) at 0", "Insert SimpleName: chars(2966) into MethodInvocation(2969) at 0", "Insert SimpleName: charAt(2967) into MethodInvocation(2969) at 1", "Insert SimpleName: i(2968) into MethodInvocation(2969) at 2", "Insert SimpleName: i(2977) into InfixExpression: +(2979) at 0", "Insert NumberLiteral: 1(2978) into InfixExpression: +(2979) at 1", "Insert InfixExpression: &(3133) into ParenthesizedExpression(3134) at 0", "Insert InfixExpression: &(3142) into ParenthesizedExpression(3143) at 0", "Insert SimpleName: i(3148) into PostfixExpression: ++(3149) at 0", "Insert SimpleName: chunk(3170) into InfixExpression: >>>(3172) at 0", "Insert NumberLiteral: 12(3171) into InfixExpression: >>>(3172) at 1", "Insert SimpleName: chunk(3183) into InfixExpression: >>>(3185) at 0", "Insert NumberLiteral: 6(3184) into InfixExpression: >>>(3185) at 1", "Move SimpleName: i(2581) into PostfixExpression: ++(3308) at 0", "Insert SimpleName: alphabet(3333) into MethodInvocation(3340) at 0", "Insert SimpleName: decode(3334) into MethodInvocation(3340) at 1", "Insert MethodInvocation(3339) into MethodInvocation(3340) at 2", "Insert SimpleName: bytesWritten(3346) into PostfixExpression: ++(3347) at 0", "Insert InfixExpression: &(3355) into ParenthesizedExpression(3356) at 0", "Insert SimpleName: chunk(3365) into Assignment: |=(3374) at 0", "Insert MethodInvocation(3373) into Assignment: |=(3374) at 1", "Insert ArrayAccess(3379) into Assignment: =(3386) at 0", "Insert CastExpression(3385) into Assignment: =(3386) at 1", "Insert SimpleName: delegate(3578) into MethodInvocation(3581) at 0", "Insert SimpleName: append(3579) into MethodInvocation(3581) at 1", "Insert SimpleName: separator(3580) into MethodInvocation(3581) at 2", "Insert InfixExpression: -(2029) into ParenthesizedExpression(2030) at 0", "Insert SimpleName: alphabet(2199) into MethodInvocation(2208) at 0", "Insert SimpleName: decode(2200) into MethodInvocation(2208) at 1", "Insert MethodInvocation(2207) into MethodInvocation(2208) at 2", "Insert ParenthesizedExpression(2251) into InfixExpression: &(2253) at 0", "Insert NumberLiteral: 0xFF(2252) into InfixExpression: &(2253) at 1", "Insert ArrayAccess(3131) into InfixExpression: &(3133) at 0", "Insert NumberLiteral: 0xFF(3132) into InfixExpression: &(3133) at 1", "Insert ArrayAccess(3140) into InfixExpression: &(3142) at 0", "Insert NumberLiteral: 0xFF(3141) into InfixExpression: &(3142) at 1", "Insert SimpleName: chars(3335) into MethodInvocation(3339) at 0", "Insert SimpleName: charAt(3336) into MethodInvocation(3339) at 1", "Insert PostfixExpression: ++(3338) into MethodInvocation(3339) at 2", "Insert ParenthesizedExpression(3353) into InfixExpression: &(3355) at 0", "Insert NumberLiteral: 0xFF(3354) into InfixExpression: &(3355) at 1", "Update SimpleName: delegate(2583) to alphabet", "Move SimpleName: delegate(2583) into MethodInvocation(3373) at 0", "Update SimpleName: write(2584) to decode", "Move SimpleName: write(2584) into MethodInvocation(3373) at 1", "Move MethodInvocation(2588) into MethodInvocation(3373) at 2", "Insert SimpleName: target(3376) into ArrayAccess(3379) at 0", "Insert PostfixExpression: ++(3378) into ArrayAccess(3379) at 1", "Insert PrimitiveType: byte(3380) into CastExpression(3385) at 0", "Insert ParenthesizedExpression(3384) into CastExpression(3385) at 1", "Insert SimpleName: bitOffset(2027) into InfixExpression: -(2029) at 0", "Insert SimpleName: bitsProcessed(2028) into InfixExpression: -(2029) at 1", "Insert SimpleName: chars(2201) into MethodInvocation(2207) at 0", "Insert SimpleName: charAt(2202) into MethodInvocation(2207) at 1", "Insert InfixExpression: +(2206) into MethodInvocation(2207) at 2", "Insert InfixExpression: >>>(2250) into ParenthesizedExpression(2251) at 0", "Insert SimpleName: bytes(3128) into ArrayAccess(3131) at 0", "Insert PostfixExpression: ++(3130) into ArrayAccess(3131) at 1", "Insert SimpleName: bytes(3137) into ArrayAccess(3140) at 0", "Insert PostfixExpression: ++(3139) into ArrayAccess(3140) at 1", "Insert SimpleName: i(3337) into PostfixExpression: ++(3338) at 0", "Insert InfixExpression: >>>(3352) into ParenthesizedExpression(3353) at 0", "Update SimpleName: separator(2585) to chars", "Insert PostfixExpression: ++(3371) into MethodInvocation(3372) at 2", "Insert SimpleName: bytesWritten(3377) into PostfixExpression: ++(3378) at 0", "Insert InfixExpression: &(3383) into ParenthesizedExpression(3384) at 0", "Insert SimpleName: charIdx(2203) into InfixExpression: +(2206) at 0", "Insert PostfixExpression: ++(2205) into InfixExpression: +(2206) at 1", "Insert SimpleName: chunk(2248) into InfixExpression: >>>(2250) at 0", "Insert SimpleName: offset(2249) into InfixExpression: >>>(2250) at 1", "Insert SimpleName: i(3129) into PostfixExpression: ++(3130) at 0", "Insert SimpleName: i(3138) into PostfixExpression: ++(3139) at 0", "Insert SimpleName: chunk(3350) into InfixExpression: >>>(3352) at 0", "Insert NumberLiteral: 8(3351) into InfixExpression: >>>(3352) at 1", "Insert SimpleName: i(3370) into PostfixExpression: ++(3371) at 0", "Insert SimpleName: chunk(3381) into InfixExpression: &(3383) at 0", "Insert NumberLiteral: 0xFF(3382) into InfixExpression: &(3383) at 1", "Insert SimpleName: charsProcessed(2204) into PostfixExpression: ++(2205) at 0", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.asCharInput(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.asCharOutput(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.asInputStream(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.asOutputStream(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.stringBuilderOutput(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.ByteInput(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.ByteOutput(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.CharInput(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.CharOutput(46)", "Delete ImportDeclaration(47)", "Delete SimpleName: stringBuilderOutput(281)", "Delete MethodInvocation(285)", "Delete SimpleName: ByteOutput(288)", "Delete SimpleType: ByteOutput(289)", "Delete SimpleName: byteOutput(290)", "Delete MethodInvocation(293)", "Delete VariableDeclarationFragment(294)", "Delete VariableDeclarationStatement(295)", "Delete MethodInvocation(313)", "Delete ExpressionStatement(314)", "Delete Block(315)", "Delete ForStatement(316)", "Delete SimpleName: close(318)", "Delete MethodInvocation(319)", "Delete ExpressionStatement(320)", "Delete Block(321)", "Delete SimpleName: impossible(324)", "Delete SingleVariableDeclaration(325)", "Delete SimpleName: AssertionError(326)", "Delete SimpleType: AssertionError(327)", "Delete StringLiteral: \"impossible\"(328)", "Delete ClassInstanceCreation(329)", "Delete ThrowStatement(330)", "Delete Block(331)", "Delete CatchClause(332)", "Delete TryStatement(333)", "Delete SimpleName: asOutputStream(367)", "Delete SimpleName: encodingStream(368)", "Delete SimpleName: asCharOutput(369)", "Delete SimpleName: writer(370)", "Delete MethodInvocation(371)", "Delete MethodInvocation(372)", "Delete MethodInvocation(373)", "Delete ReturnStatement(374)", "Delete Block(375)", "Delete SimpleName: ByteInput(558)", "Delete SimpleType: ByteInput(559)", "Delete MethodInvocation(564)", "Delete PrimitiveType: int(583)", "Delete SimpleName: index(584)", "Delete NumberLiteral: 0(585)", "Delete VariableDeclarationFragment(586)", "Delete VariableDeclarationStatement(587)", "Delete PrimitiveType: int(588)", "Delete SimpleName: i(589)", "Delete SimpleName: decodedInput(590)", "Delete SimpleName: read(591)", "Delete MethodInvocation(592)", "Delete VariableDeclarationFragment(593)", "Delete VariableDeclarationExpression(594)", "Delete SimpleName: i(595)", "Delete NumberLiteral: 1(596)", "Delete PrefixExpression: -(597)", "Delete InfixExpression: !=(598)", "Delete SimpleName: i(599)", "Delete SimpleName: decodedInput(600)", "Delete SimpleName: read(601)", "Delete MethodInvocation(602)", "Delete Assignment: =(603)", "Delete SimpleName: tmp(604)", "Delete SimpleName: index(605)", "Delete PostfixExpression: ++(606)", "Delete ArrayAccess(607)", "Delete PrimitiveType: byte(608)", "Delete SimpleName: i(609)", "Delete CastExpression(610)", "Delete Assignment: =(611)", "Delete ExpressionStatement(612)", "Delete Block(613)", "Delete ForStatement(614)", "Delete Block(615)", "Delete SimpleName: badInput(618)", "Delete SingleVariableDeclaration(619)", "Delete SimpleName: badInput(620)", "Delete ThrowStatement(621)", "Delete Block(622)", "Delete CatchClause(623)", "Delete TryStatement(635)", "Delete SimpleName: asInputStream(668)", "Delete SimpleName: decodingStream(669)", "Delete SimpleName: asCharInput(670)", "Delete SimpleName: reader(671)", "Delete MethodInvocation(672)", "Delete MethodInvocation(673)", "Delete MethodInvocation(674)", "Delete ReturnStatement(675)", "Delete Block(676)", "Delete SimpleName: ByteOutput(735)", "Delete SimpleType: ByteOutput(736)", "Delete SimpleName: ByteInput(751)", "Delete SimpleType: ByteInput(752)", "Delete SimpleName: decodingStream(753)", "Delete NullLiteral(1098)", "Delete Modifier: final(1671)", "Delete SimpleName: StandardBaseEncoding(1672)", "Delete Modifier: private(1675)", "Delete Modifier: private(1684)", "Delete SimpleName: StandardBaseEncoding(2196)", "Delete SimpleType: StandardBaseEncoding(2197)", "Delete SimpleName: alphabet(2198)", "Delete NullLiteral(2199)", "Delete ClassInstanceCreation(2200)", "Delete SimpleName: alphabet(2235)", "Delete SimpleName: padChar(2236)", "Delete ClassInstanceCreation(2237)", "Delete SimpleName: upper(2327)", "Delete SimpleName: paddingChar(2328)", "Delete ClassInstanceCreation(2329)", "Delete SimpleName: lower(2372)", "Delete SimpleName: paddingChar(2373)", "Delete ClassInstanceCreation(2374)", "Delete SimpleName: i(2587)", "Delete MethodInvocation(2589)", "Delete Block(2591)", "Delete Modifier: static(2519)", "Delete SimpleType: CharOutput(2521)", "Delete SimpleName: separatingOutput(2522)", "Delete Modifier: final(2523)", "Delete SingleVariableDeclaration(2527)", "Delete SimpleName: write(2562)", "Delete Block(2597)", "Delete IfStatement(2598)", "Delete Block(2607)", "Delete MethodDeclaration(2608)", "Delete AnonymousClassDeclaration(2635)", "Delete ClassInstanceCreation(2636)", "Delete ReturnStatement(2637)", "Delete Block(2638)", "Delete MethodDeclaration(2639)"]}}, {"GwtWorkarounds_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.common.io"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkNotNull", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions.checkPositionIndexes"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.annotations.GwtCompatible"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.annotations.GwtIncompatible"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.InputStream"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.OutputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Reader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.Writer", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationStatement", "DEL AnonymousClassDeclaration", "DEL SimpleName: close", "DEL CastExpression", "DEL TextElement:  Louis Wasserman", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: IOException", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL Javadoc", "DEL NumberLiteral: 1", "DEL SimpleName: IOException", "DEL AnonymousClassDeclaration", "DEL TextElement:  Reader", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement:  can use streaming implementations", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL ClassInstanceCreation", "DEL TextElement: Views a ", "DEL SimpleName: chars", "DEL TextElement:  Reader", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: IOException", "DEL TextElement: .", "DEL PrimitiveType: int", "DEL SimpleName: write", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: len", "DEL TextElement: Views a ", "DEL SimpleName: chars", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL SimpleName: initialSize", "DEL SimpleName: CharInput", "DEL ExpressionStatement", "DEL SimpleType: IOException", "DEL MethodDeclaration", "DEL SimpleName: ByteInput", "DEL VariableDeclarationStatement", "DEL TagElement: @code", "DEL PrimitiveType: void", "DEL SimpleName: len", "DEL TextElement:  CharInput", "DEL TextElement:  InputStream", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: read", "DEL SimpleType: IOException", "DEL SimpleName: output", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Block", "DEL TagElement", "DEL IfStatement", "DEL TagElement: @code", "DEL SimpleName: read", "DEL MethodDeclaration", "DEL Block", "DEL SingleMemberAnnotation", "DEL MethodDeclaration", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: charAt", "DEL SimpleType: IOException", "DEL MethodDeclaration", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleName: ByteOutput", "DEL SimpleName: GwtIncompatible", "DEL TypeDeclaration: interface", "DEL SimpleName: read", "DEL TagElement: @code", "DEL Modifier: private", "DEL SimpleType: IOException", "DEL ExpressionStatement", "DEL SimpleType: CharInput", "DEL PostfixExpression: ++", "DEL MethodDeclaration", "DEL Modifier: static", "DEL SimpleName: builder", "DEL Block", "DEL SimpleName: read", "DEL SimpleName: checkNotNull", "DEL MarkerAnnotation", "DEL TextElement:  toString()", "DEL SimpleName: write", "DEL PrimitiveType: void", "DEL SimpleName: close", "DEL SimpleType: IOException", "DEL Modifier: static", "DEL SimpleType: CharOutput", "DEL SimpleName: dst", "DEL SimpleName: Override", "DEL SimpleName: off", "DEL TextElement: Views a ", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: asInputStream", "DEL MethodInvocation", "DEL SimpleName: reader", "DEL TagElement: @code", "DEL SimpleName: Override", "DEL Javadoc", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL Block", "DEL Modifier: static", "DEL SimpleName: InputStream", "DEL SimpleName: b", "DEL Block", "DEL SimpleName: close", "DEL Block", "DEL ReturnStatement", "DEL Block", "DEL Dimension", "DEL TextElement: ,", "DEL SimpleName: b", "DEL PostfixExpression: ++", "DEL Javadoc", "DEL MethodInvocation", "DEL TextElement: .", "DEL Block", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL TypeDeclaration: interface", "DEL SimpleName: close", "DEL SimpleName: reader", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL SimpleName: writer", "DEL NormalAnnotation", "DEL Javadoc", "DEL TagElement: @code", "DEL VariableDeclarationStatement", "DEL SimpleName: close", "DEL SimpleName: IOException", "DEL ExpressionStatement", "DEL SimpleType: IOException", "DEL SimpleName: off", "DEL SimpleName: OutputStream", "DEL SimpleName: off", "DEL SimpleType: IOException", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Modifier: public", "DEL QualifiedName: b.length", "DEL TagElement: @code", "DEL TagElement", "DEL SimpleName: c", "DEL SimpleName: checkNotNull", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Reader", "DEL TextElement:  OutputStream", "DEL SimpleName: write", "DEL NumberLiteral: 1", "DEL TextElement:  so that ", "DEL PrimitiveType: void", "DEL SimpleName: dst", "DEL TagElement: @code", "DEL Assignment: =", "DEL SimpleType: IOException", "DEL SimpleName: Override", "DEL Modifier: public", "DEL ReturnStatement", "DEL Block", "DEL MarkerAnnotation", "DEL AnonymousClassDeclaration", "DEL SimpleName: IOException", "DEL ReturnStatement", "DEL PrimitiveType: void", "DEL SimpleName: firstByte", "DEL SimpleName: read", "DEL TextElement:  OutputStream", "DEL SimpleType: IOException", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL AnonymousClassDeclaration", "DEL SimpleName: readByte", "DEL SimpleName: asCharInput", "DEL SimpleName: ByteOutput", "DEL SimpleName: input", "DEL SimpleType: IOException", "DEL TagElement", "DEL TagElement", "DEL SingleMemberAnnotation", "DEL SimpleName: writer", "DEL SimpleType: IOException", "DEL Modifier: public", "DEL SimpleName: b", "DEL TextElement: , ", "DEL SimpleType: OutputStream", "DEL SimpleName: builder", "DEL Block", "DEL SimpleName: index", "DEL SimpleName: output", "DEL TagElement", "DEL TextElement:  OutputStream", "DEL SimpleName: Override", "DEL VariableDeclarationExpression", "DEL SimpleType: CharOutput", "DEL PrimitiveType: void", "DEL SimpleName: CharInput", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL TypeDeclaration: interface", "DEL Modifier: public", "DEL SimpleName: writer", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SimpleName: b", "DEL SimpleName: off", "DEL SimpleName: IOException", "DEL SimpleName: read", "DEL Modifier: public", "DEL SimpleName: OutputStream", "DEL SimpleType: CharOutput", "DEL PrimitiveType: void", "DEL SimpleName: IOException", "DEL ReturnStatement", "DEL PrimitiveType: byte", "DEL SimpleName: asCharOutput", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: checkNotNull", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: output", "DEL IfStatement", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: b", "DEL Modifier: public", "DEL Modifier: static", "DEL SimpleName: GwtIncompatible", "DEL PrimitiveType: char", "DEL MarkerAnnotation", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: StringBuilder", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleType: Writer", "DEL TextElement:  Writer", "DEL SimpleName: firstByte", "DEL SimpleName: readByte", "DEL SimpleName: read", "DEL SimpleName: flush", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: IOException", "DEL SimpleName: len", "DEL SingleMemberAnnotation", "DEL PrimitiveType: void", "DEL SimpleName: Override", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: flush", "DEL SimpleName: write", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL SimpleName: close", "DEL SimpleName: asOutputStream", "DEL SimpleName: dst", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL TextElement:  CharOutput", "DEL SimpleName: InputStream", "DEL TextElement: Views a ", "DEL SimpleType: IOException", "DEL SimpleName: reader", "DEL SimpleName: GwtIncompatible", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: CharOutput", "DEL SimpleName: index", "DEL Javadoc", "DEL Modifier: static", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL TextElement:  CharInput", "DEL SimpleName: append", "DEL TextElement: .", "DEL MethodDeclaration", "DEL SimpleName: dst", "DEL TextElement:  as an ", "DEL Block", "DEL SimpleName: flush", "DEL StringLiteral: \"Writer\"", "DEL SimpleName: initialSize", "DEL SimpleName: index", "DEL TagElement: @code", "DEL SimpleType: CharInput", "DEL MethodInvocation", "DEL SimpleName: chars", "DEL ForStatement", "DEL Modifier: public", "DEL MemberValuePair", "DEL SimpleName: emulated", "DEL TextElement: A GWT-compatible substitute for an ", "DEL SimpleName: chars", "DEL SimpleName: Override", "DEL TextElement:  whose ", "DEL MethodInvocation", "DEL SimpleName: close", "DEL SimpleType: OutputStream", "DEL SimpleName: GwtCompatible", "DEL VariableDeclarationFragment", "DEL SimpleName: IOException", "DEL SimpleName: c", "DEL Block", "DEL SimpleName: close", "DEL TextElement: .", "DEL Block", "DEL SimpleName: flush", "DEL ReturnStatement", "DEL SimpleName: stringBuilderOutput", "DEL NumberLiteral: 0", "DEL SingleMemberAnnotation", "DEL ClassInstanceCreation", "DEL TagElement: @code", "DEL Block", "DEL AnonymousClassDeclaration", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: output", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL PrimitiveType: int", "DEL TextElement: A GWT-compatible substitute for a ", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: writer", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: close", "DEL TagElement: @code", "DEL SimpleName: CharInput", "DEL AnonymousClassDeclaration", "DEL SimpleType: CharInput", "DEL Modifier: final", "DEL SimpleName: close", "DEL CastExpression", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: input", "DEL SimpleName: flush", "DEL CastExpression", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement: .", "DEL PrefixExpression: -", "DEL ReturnStatement", "DEL Assignment: =", "DEL PrefixExpression: -", "DEL SimpleName: IOException", "DEL SimpleName: close", "DEL PrefixExpression: -", "DEL SimpleType: InputStream", "DEL MarkerAnnotation", "DEL NumberLiteral: 1", "DEL SimpleName: checkNotNull", "DEL SimpleName: read", "DEL SimpleType: CharSequence", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL Modifier: public", "DEL Block", "DEL PrimitiveType: void", "DEL NumberLiteral: 0", "DEL SimpleName: chars", "DEL TextElement: Provides simple GWT-compatible substitutes for ", "DEL Modifier: static", "DEL Modifier: public", "DEL ArrayAccess", "DEL SimpleName: IOException", "DEL TextElement: .", "DEL MarkerAnnotation", "DEL TypeDeclaration: class", "DEL ReturnStatement", "DEL TextElement: A GWT-compatible substitute for a ", "DEL SimpleName: writer", "DEL TagElement", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: checkPositionIndexes", "DEL SimpleName: IOException", "DEL SimpleName: close", "DEL SimpleName: GwtIncompatible", "DEL MethodInvocation", "DEL TextElement: .", "DEL MethodDeclaration", "DEL PrimitiveType: byte", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: flush", "DEL IfStatement", "DEL SimpleType: CharInput", "DEL Block", "DEL PrimitiveType: char", "DEL MethodDeclaration", "DEL SimpleName: write", "DEL SimpleType: IOException", "DEL PrimitiveType: void", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL SimpleType: IOException", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL SimpleName: length", "DEL MethodInvocation", "DEL SimpleName: read", "DEL SimpleName: checkNotNull", "DEL SimpleName: readByte", "DEL TextElement:  as a ", "DEL MarkerAnnotation", "DEL Block", "DEL InfixExpression: +", "DEL SimpleName: flush", "DEL TextElement: A GWT-compatible substitute for an ", "DEL SimpleName: reader", "DEL Modifier: public", "DEL TextElement: while remaining GWT-compatible.", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL TextElement: .", "DEL MethodDeclaration", "DEL SimpleName: CharOutput", "DEL Block", "DEL TextElement: to get the combined output.", "DEL MethodDeclaration", "DEL SimpleName: CharOutput", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: StringBuilder", "DEL SimpleName: c", "DEL TagElement: @code", "DEL TagElement: @code", "DEL PrimitiveType: void", "DEL SimpleName: CharSequence", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleName: dst", "DEL TextElement:  Writer", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL TextElement:  ByteOutput", "DEL Modifier: final", "DEL TextElement:  ByteInput", "DEL SimpleName: Override", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleName: checkNotNull", "DEL SimpleName: CharInput", "DEL SimpleName: firstByte", "DEL ClassInstanceCreation", "DEL SimpleName: Override", "DEL PrimitiveType: void", "DEL SimpleName: input", "DEL SimpleName: close", "DEL SimpleType: CharOutput", "DEL Block", "DEL MethodDeclaration", "DEL TypeDeclaration: interface", "DEL ExpressionStatement", "DEL SimpleName: c", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL TextElement:  Writer", "DEL MethodDeclaration", "DEL SimpleName: CharInput", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL SimpleName: off", "DEL SimpleName: index", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: b", "DEL SimpleName: append", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL PrimitiveType: void", "DEL SimpleName: GwtWorkarounds", "DEL Block", "DEL PrimitiveType: char", "DEL Block", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL Javadoc", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL PrimitiveType: void", "DEL MarkerAnnotation", "DEL TagElement", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL SimpleName: CharOutput", "DEL TextElement:  CharSequence", "DEL SimpleName: close", "DEL MethodDeclaration", "DEL IfStatement", "DEL TextElement:  as an ", "DEL SimpleName: IOException", "DEL ArrayType: byte[]", "DEL TextElement:  CharOutput", "DEL PrimitiveType: int", "DEL SimpleName: output", "DEL Block", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL MarkerAnnotation", "DEL TagElement", "DEL SimpleName: length", "DEL ReturnStatement", "DEL InfixExpression: <", "DEL TextElement:  InputStream", "DEL SimpleType: ByteInput", "DEL SimpleName: Writer", "DEL Block", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL TextElement: Returns a ", "DEL Javadoc", "DEL TextElement:  method can be used", "DEL StringLiteral: \"OutputStream\"", "DEL InfixExpression: <", "DEL Block", "DEL ExpressionStatement", "DEL TagElement: @code", "DEL Modifier: final", "DEL MethodInvocation", "DEL TextElement:  Reader", "DEL SimpleName: IOException", "DEL TextElement: , and ", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"InputStream\"", "DEL SimpleName: c", "DEL SimpleName: asCharInput", "DEL TextElement:  InputStream", "DEL TextElement:  BaseEncoding", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: CharOutput", "DEL TagElement: @author", "DEL ClassInstanceCreation", "DEL SimpleType: StringBuilder", "DEL Modifier: public", "DEL TextElement:  as a ", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL SimpleType: ByteOutput", "DEL SimpleName: read", "DEL SimpleType: InputStream", "DEL StringLiteral: \"Reader\"", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL PrefixExpression: -", "DEL Javadoc", "DEL Javadoc", "DEL TextElement:  as a ", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL TextElement: Views a ", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL SimpleType: IOException", "DEL ArrayAccess", "DEL TextElement: .", "DEL SimpleName: Override", "DEL PrimitiveType: byte", "DEL SimpleType: Reader", "DEL SimpleName: ByteInput", "DEL PrimitiveType: byte", "DEL SimpleName: len", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: len", "DEL SimpleName: input", "DEL SimpleType: IOException", "DEL SimpleName: GwtWorkarounds", "DEL SimpleName: b", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL SimpleName: write", "DEL NumberLiteral: 1"]}]}}, {"GwtWorkarounds_diff": {"operations": ["Delete QualifiedName: com.google.common.io(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.common.base.Preconditions.checkNotNull(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.base.Preconditions.checkPositionIndexes(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.common.annotations.GwtCompatible(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.common.annotations.GwtIncompatible(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.io.IOException(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.io.InputStream(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.io.OutputStream(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.io.Reader(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.io.Writer(18)", "Delete ImportDeclaration(19)", "Delete TextElement: Provides simple GWT-compatible substitutes for (20)", "Delete TextElement:  InputStream(21)", "Delete TagElement: @code(22)", "Delete TextElement: , (23)", "Delete TextElement:  OutputStream(24)", "Delete TagElement: @code(25)", "Delete TextElement: ,(26)", "Delete TextElement:  Reader(27)", "Delete TagElement: @code(28)", "Delete TextElement: , and (29)", "Delete TextElement:  Writer(30)", "Delete TagElement: @code(31)", "Delete TextElement:  so that (32)", "Delete TextElement:  BaseEncoding(33)", "Delete TagElement: @code(34)", "Delete TextElement:  can use streaming implementations(35)", "Delete TextElement: while remaining GWT-compatible.(36)", "Delete TagElement(37)", "Delete TextElement:  Louis Wasserman(38)", "Delete TagElement: @author(39)", "Delete Javadoc(40)", "Delete SimpleName: GwtCompatible(41)", "Delete SimpleName: emulated(42)", "Delete BooleanLiteral: true(43)", "Delete MemberValuePair(44)", "Delete NormalAnnotation(45)", "Delete Modifier: final(46)", "Delete SimpleName: GwtWorkarounds(47)", "Delete Modifier: private(48)", "Delete SimpleName: GwtWorkarounds(49)", "Delete Block(50)", "Delete MethodDeclaration(51)", "Delete TextElement: A GWT-compatible substitute for a (52)", "Delete TextElement:  Reader(53)", "Delete TagElement: @code(54)", "Delete TextElement: .(55)", "Delete TagElement(56)", "Delete Javadoc(57)", "Delete SimpleName: CharInput(58)", "Delete PrimitiveType: int(59)", "Delete SimpleName: read(60)", "Delete SimpleName: IOException(61)", "Delete SimpleType: IOException(62)", "Delete MethodDeclaration(63)", "Delete PrimitiveType: void(64)", "Delete SimpleName: close(65)", "Delete SimpleName: IOException(66)", "Delete SimpleType: IOException(67)", "Delete MethodDeclaration(68)", "Delete TypeDeclaration: interface(69)", "Delete TextElement: Views a (70)", "Delete TextElement:  Reader(71)", "Delete TagElement: @code(72)", "Delete TextElement:  as a (73)", "Delete TextElement:  CharInput(74)", "Delete TagElement: @code(75)", "Delete TextElement: .(76)", "Delete TagElement(77)", "Delete Javadoc(78)", "Delete SimpleName: GwtIncompatible(79)", "Delete StringLiteral: \"Reader\"(80)", "Delete SingleMemberAnnotation(81)", "Delete Modifier: static(82)", "Delete SimpleName: CharInput(83)", "Delete SimpleType: CharInput(84)", "Delete SimpleName: asCharInput(85)", "Delete Modifier: final(86)", "Delete SimpleName: Reader(87)", "Delete SimpleType: Reader(88)", "Delete SimpleName: reader(89)", "Delete SingleVariableDeclaration(90)", "Delete SimpleName: checkNotNull(91)", "Delete SimpleName: reader(92)", "Delete MethodInvocation(93)", "Delete ExpressionStatement(94)", "Delete SimpleName: CharInput(95)", "Delete SimpleType: CharInput(96)", "Delete SimpleName: Override(97)", "Delete MarkerAnnotation(98)", "Delete Modifier: public(99)", "Delete PrimitiveType: int(100)", "Delete SimpleName: read(101)", "Delete SimpleName: IOException(102)", "Delete SimpleType: IOException(103)", "Delete SimpleName: reader(104)", "Delete SimpleName: read(105)", "Delete MethodInvocation(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete SimpleName: Override(110)", "Delete MarkerAnnotation(111)", "Delete Modifier: public(112)", "Delete PrimitiveType: void(113)", "Delete SimpleName: close(114)", "Delete SimpleName: IOException(115)", "Delete SimpleType: IOException(116)", "Delete SimpleName: reader(117)", "Delete SimpleName: close(118)", "Delete MethodInvocation(119)", "Delete ExpressionStatement(120)", "Delete Block(121)", "Delete MethodDeclaration(122)", "Delete AnonymousClassDeclaration(123)", "Delete ClassInstanceCreation(124)", "Delete ReturnStatement(125)", "Delete Block(126)", "Delete MethodDeclaration(127)", "Delete TextElement: Views a (128)", "Delete TextElement:  CharSequence(129)", "Delete TagElement: @code(130)", "Delete TextElement:  as a (131)", "Delete TextElement:  CharInput(132)", "Delete TagElement: @code(133)", "Delete TextElement: .(134)", "Delete TagElement(135)", "Delete Javadoc(136)", "Delete Modifier: static(137)", "Delete SimpleName: CharInput(138)", "Delete SimpleType: CharInput(139)", "Delete SimpleName: asCharInput(140)", "Delete Modifier: final(141)", "Delete SimpleName: CharSequence(142)", "Delete SimpleType: CharSequence(143)", "Delete SimpleName: chars(144)", "Delete SingleVariableDeclaration(145)", "Delete SimpleName: checkNotNull(146)", "Delete SimpleName: chars(147)", "Delete MethodInvocation(148)", "Delete ExpressionStatement(149)", "Delete SimpleName: CharInput(150)", "Delete SimpleType: CharInput(151)", "Delete PrimitiveType: int(152)", "Delete SimpleName: index(153)", "Delete NumberLiteral: 0(154)", "Delete VariableDeclarationFragment(155)", "Delete FieldDeclaration(156)", "Delete SimpleName: Override(157)", "Delete MarkerAnnotation(158)", "Delete Modifier: public(159)", "Delete PrimitiveType: int(160)", "Delete SimpleName: read(161)", "Delete SimpleName: index(162)", "Delete SimpleName: chars(163)", "Delete SimpleName: length(164)", "Delete MethodInvocation(165)", "Delete InfixExpression: <(166)", "Delete SimpleName: chars(167)", "Delete SimpleName: charAt(168)", "Delete SimpleName: index(169)", "Delete PostfixExpression: ++(170)", "Delete MethodInvocation(171)", "Delete ReturnStatement(172)", "Delete Block(173)", "Delete NumberLiteral: 1(174)", "Delete PrefixExpression: -(175)", "Delete ReturnStatement(176)", "Delete Block(177)", "Delete IfStatement(178)", "Delete Block(179)", "Delete MethodDeclaration(180)", "Delete SimpleName: Override(181)", "Delete MarkerAnnotation(182)", "Delete Modifier: public(183)", "Delete PrimitiveType: void(184)", "Delete SimpleName: close(185)", "Delete SimpleName: index(186)", "Delete SimpleName: chars(187)", "Delete SimpleName: length(188)", "Delete MethodInvocation(189)", "Delete Assignment: =(190)", "Delete ExpressionStatement(191)", "Delete Block(192)", "Delete MethodDeclaration(193)", "Delete AnonymousClassDeclaration(194)", "Delete ClassInstanceCreation(195)", "Delete ReturnStatement(196)", "Delete Block(197)", "Delete MethodDeclaration(198)", "Delete TextElement: A GWT-compatible substitute for an (199)", "Delete TextElement:  InputStream(200)", "Delete TagElement: @code(201)", "Delete TextElement: .(202)", "Delete TagElement(203)", "Delete Javadoc(204)", "Delete SimpleName: ByteInput(205)", "Delete PrimitiveType: int(206)", "Delete SimpleName: read(207)", "Delete SimpleName: IOException(208)", "Delete SimpleType: IOException(209)", "Delete MethodDeclaration(210)", "Delete PrimitiveType: void(211)", "Delete SimpleName: close(212)", "Delete SimpleName: IOException(213)", "Delete SimpleType: IOException(214)", "Delete MethodDeclaration(215)", "Delete TypeDeclaration: interface(216)", "Delete TextElement: Views a (217)", "Delete TextElement:  ByteInput(218)", "Delete TagElement: @code(219)", "Delete TextElement:  as an (220)", "Delete TextElement:  InputStream(221)", "Delete TagElement: @code(222)", "Delete TextElement: .(223)", "Delete TagElement(224)", "Delete Javadoc(225)", "Delete SimpleName: GwtIncompatible(226)", "Delete StringLiteral: \"InputStream\"(227)", "Delete SingleMemberAnnotation(228)", "Delete Modifier: static(229)", "Delete SimpleName: InputStream(230)", "Delete SimpleType: InputStream(231)", "Delete SimpleName: asInputStream(232)", "Delete Modifier: final(233)", "Delete SimpleName: ByteInput(234)", "Delete SimpleType: ByteInput(235)", "Delete SimpleName: input(236)", "Delete SingleVariableDeclaration(237)", "Delete SimpleName: checkNotNull(238)", "Delete SimpleName: input(239)", "Delete MethodInvocation(240)", "Delete ExpressionStatement(241)", "Delete SimpleName: InputStream(242)", "Delete SimpleType: InputStream(243)", "Delete SimpleName: Override(244)", "Delete MarkerAnnotation(245)", "Delete Modifier: public(246)", "Delete PrimitiveType: int(247)", "Delete SimpleName: read(248)", "Delete SimpleName: IOException(249)", "Delete SimpleType: IOException(250)", "Delete SimpleName: input(251)", "Delete SimpleName: read(252)", "Delete MethodInvocation(253)", "Delete ReturnStatement(254)", "Delete Block(255)", "Delete MethodDeclaration(256)", "Delete SimpleName: Override(257)", "Delete MarkerAnnotation(258)", "Delete Modifier: public(259)", "Delete PrimitiveType: int(260)", "Delete SimpleName: read(261)", "Delete PrimitiveType: byte(262)", "Delete Dimension(263)", "Delete ArrayType: byte[](264)", "Delete SimpleName: b(265)", "Delete SingleVariableDeclaration(266)", "Delete PrimitiveType: int(267)", "Delete SimpleName: off(268)", "Delete SingleVariableDeclaration(269)", "Delete PrimitiveType: int(270)", "Delete SimpleName: len(271)", "Delete SingleVariableDeclaration(272)", "Delete SimpleName: IOException(273)", "Delete SimpleType: IOException(274)", "Delete SimpleName: checkNotNull(275)", "Delete SimpleName: b(276)", "Delete MethodInvocation(277)", "Delete ExpressionStatement(278)", "Delete SimpleName: checkPositionIndexes(279)", "Delete SimpleName: off(280)", "Delete SimpleName: off(281)", "Delete SimpleName: len(282)", "Delete InfixExpression: +(283)", "Delete QualifiedName: b.length(284)", "Delete MethodInvocation(285)", "Delete ExpressionStatement(286)", "Delete SimpleName: len(287)", "Delete NumberLiteral: 0(288)", "Delete InfixExpression: ==(289)", "Delete NumberLiteral: 0(290)", "Delete ReturnStatement(291)", "Delete Block(292)", "Delete IfStatement(293)", "Delete PrimitiveType: int(294)", "Delete SimpleName: firstByte(295)", "Delete SimpleName: read(296)", "Delete MethodInvocation(297)", "Delete VariableDeclarationFragment(298)", "Delete VariableDeclarationStatement(299)", "Delete SimpleName: firstByte(300)", "Delete NumberLiteral: 1(301)", "Delete PrefixExpression: -(302)", "Delete InfixExpression: ==(303)", "Delete NumberLiteral: 1(304)", "Delete PrefixExpression: -(305)", "Delete ReturnStatement(306)", "Delete Block(307)", "Delete IfStatement(308)", "Delete SimpleName: b(309)", "Delete SimpleName: off(310)", "Delete ArrayAccess(311)", "Delete PrimitiveType: byte(312)", "Delete SimpleName: firstByte(313)", "Delete CastExpression(314)", "Delete Assignment: =(315)", "Delete ExpressionStatement(316)", "Delete PrimitiveType: int(317)", "Delete SimpleName: dst(318)", "Delete NumberLiteral: 1(319)", "Delete VariableDeclarationFragment(320)", "Delete VariableDeclarationExpression(321)", "Delete SimpleName: dst(322)", "Delete SimpleName: len(323)", "Delete InfixExpression: <(324)", "Delete SimpleName: dst(325)", "Delete PostfixExpression: ++(326)", "Delete PrimitiveType: int(327)", "Delete SimpleName: readByte(328)", "Delete SimpleName: read(329)", "Delete MethodInvocation(330)", "Delete VariableDeclarationFragment(331)", "Delete VariableDeclarationStatement(332)", "Delete SimpleName: readByte(333)", "Delete NumberLiteral: 1(334)", "Delete PrefixExpression: -(335)", "Delete InfixExpression: ==(336)", "Delete SimpleName: dst(337)", "Delete ReturnStatement(338)", "Delete Block(339)", "Delete IfStatement(340)", "Delete SimpleName: b(341)", "Delete SimpleName: off(342)", "Delete SimpleName: dst(343)", "Delete InfixExpression: +(344)", "Delete ArrayAccess(345)", "Delete PrimitiveType: byte(346)", "Delete SimpleName: readByte(347)", "Delete CastExpression(348)", "Delete Assignment: =(349)", "Delete ExpressionStatement(350)", "Delete Block(351)", "Delete ForStatement(352)", "Delete SimpleName: len(353)", "Delete ReturnStatement(354)", "Delete Block(355)", "Delete MethodDeclaration(356)", "Delete SimpleName: Override(357)", "Delete MarkerAnnotation(358)", "Delete Modifier: public(359)", "Delete PrimitiveType: void(360)", "Delete SimpleName: close(361)", "Delete SimpleName: IOException(362)", "Delete SimpleType: IOException(363)", "Delete SimpleName: input(364)", "Delete SimpleName: close(365)", "Delete MethodInvocation(366)", "Delete ExpressionStatement(367)", "Delete Block(368)", "Delete MethodDeclaration(369)", "Delete AnonymousClassDeclaration(370)", "Delete ClassInstanceCreation(371)", "Delete ReturnStatement(372)", "Delete Block(373)", "Delete MethodDeclaration(374)", "Delete TextElement: A GWT-compatible substitute for an (375)", "Delete TextElement:  OutputStream(376)", "Delete TagElement: @code(377)", "Delete TextElement: .(378)", "Delete TagElement(379)", "Delete Javadoc(380)", "Delete SimpleName: ByteOutput(381)", "Delete PrimitiveType: void(382)", "Delete SimpleName: write(383)", "Delete PrimitiveType: byte(384)", "Delete SimpleName: b(385)", "Delete SingleVariableDeclaration(386)", "Delete SimpleName: IOException(387)", "Delete SimpleType: IOException(388)", "Delete MethodDeclaration(389)", "Delete PrimitiveType: void(390)", "Delete SimpleName: flush(391)", "Delete SimpleName: IOException(392)", "Delete SimpleType: IOException(393)", "Delete MethodDeclaration(394)", "Delete PrimitiveType: void(395)", "Delete SimpleName: close(396)", "Delete SimpleName: IOException(397)", "Delete SimpleType: IOException(398)", "Delete MethodDeclaration(399)", "Delete TypeDeclaration: interface(400)", "Delete TextElement: Views a (401)", "Delete TextElement:  ByteOutput(402)", "Delete TagElement: @code(403)", "Delete TextElement:  as an (404)", "Delete TextElement:  OutputStream(405)", "Delete TagElement: @code(406)", "Delete TextElement: .(407)", "Delete TagElement(408)", "Delete Javadoc(409)", "Delete SimpleName: GwtIncompatible(410)", "Delete StringLiteral: \"OutputStream\"(411)", "Delete SingleMemberAnnotation(412)", "Delete Modifier: static(413)", "Delete SimpleName: OutputStream(414)", "Delete SimpleType: OutputStream(415)", "Delete SimpleName: asOutputStream(416)", "Delete Modifier: final(417)", "Delete SimpleName: ByteOutput(418)", "Delete SimpleType: ByteOutput(419)", "Delete SimpleName: output(420)", "Delete SingleVariableDeclaration(421)", "Delete SimpleName: checkNotNull(422)", "Delete SimpleName: output(423)", "Delete MethodInvocation(424)", "Delete ExpressionStatement(425)", "Delete SimpleName: OutputStream(426)", "Delete SimpleType: OutputStream(427)", "Delete SimpleName: Override(428)", "Delete MarkerAnnotation(429)", "Delete Modifier: public(430)", "Delete PrimitiveType: void(431)", "Delete SimpleName: write(432)", "Delete PrimitiveType: int(433)", "Delete SimpleName: b(434)", "Delete SingleVariableDeclaration(435)", "Delete SimpleName: IOException(436)", "Delete SimpleType: IOException(437)", "Delete SimpleName: output(438)", "Delete SimpleName: write(439)", "Delete PrimitiveType: byte(440)", "Delete SimpleName: b(441)", "Delete CastExpression(442)", "Delete MethodInvocation(443)", "Delete ExpressionStatement(444)", "Delete Block(445)", "Delete MethodDeclaration(446)", "Delete SimpleName: Override(447)", "Delete MarkerAnnotation(448)", "Delete Modifier: public(449)", "Delete PrimitiveType: void(450)", "Delete SimpleName: flush(451)", "Delete SimpleName: IOException(452)", "Delete SimpleType: IOException(453)", "Delete SimpleName: output(454)", "Delete SimpleName: flush(455)", "Delete MethodInvocation(456)", "Delete ExpressionStatement(457)", "Delete Block(458)", "Delete MethodDeclaration(459)", "Delete SimpleName: Override(460)", "Delete MarkerAnnotation(461)", "Delete Modifier: public(462)", "Delete PrimitiveType: void(463)", "Delete SimpleName: close(464)", "Delete SimpleName: IOException(465)", "Delete SimpleType: IOException(466)", "Delete SimpleName: output(467)", "Delete SimpleName: close(468)", "Delete MethodInvocation(469)", "Delete ExpressionStatement(470)", "Delete Block(471)", "Delete MethodDeclaration(472)", "Delete AnonymousClassDeclaration(473)", "Delete ClassInstanceCreation(474)", "Delete ReturnStatement(475)", "Delete Block(476)", "Delete MethodDeclaration(477)", "Delete TextElement: A GWT-compatible substitute for a (478)", "Delete TextElement:  Writer(479)", "Delete TagElement: @code(480)", "Delete TextElement: .(481)", "Delete TagElement(482)", "Delete Javadoc(483)", "Delete SimpleName: CharOutput(484)", "Delete PrimitiveType: void(485)", "Delete SimpleName: write(486)", "Delete PrimitiveType: char(487)", "Delete SimpleName: c(488)", "Delete SingleVariableDeclaration(489)", "Delete SimpleName: IOException(490)", "Delete SimpleType: IOException(491)", "Delete MethodDeclaration(492)", "Delete PrimitiveType: void(493)", "Delete SimpleName: flush(494)", "Delete SimpleName: IOException(495)", "Delete SimpleType: IOException(496)", "Delete MethodDeclaration(497)", "Delete PrimitiveType: void(498)", "Delete SimpleName: close(499)", "Delete SimpleName: IOException(500)", "Delete SimpleType: IOException(501)", "Delete MethodDeclaration(502)", "Delete TypeDeclaration: interface(503)", "Delete TextElement: Views a (504)", "Delete TextElement:  Writer(505)", "Delete TagElement: @code(506)", "Delete TextElement:  as a (507)", "Delete TextElement:  CharOutput(508)", "Delete TagElement: @code(509)", "Delete TextElement: .(510)", "Delete TagElement(511)", "Delete Javadoc(512)", "Delete SimpleName: GwtIncompatible(513)", "Delete StringLiteral: \"Writer\"(514)", "Delete SingleMemberAnnotation(515)", "Delete Modifier: static(516)", "Delete SimpleName: CharOutput(517)", "Delete SimpleType: CharOutput(518)", "Delete SimpleName: asCharOutput(519)", "Delete Modifier: final(520)", "Delete SimpleName: Writer(521)", "Delete SimpleType: Writer(522)", "Delete SimpleName: writer(523)", "Delete SingleVariableDeclaration(524)", "Delete SimpleName: checkNotNull(525)", "Delete SimpleName: writer(526)", "Delete MethodInvocation(527)", "Delete ExpressionStatement(528)", "Delete SimpleName: CharOutput(529)", "Delete SimpleType: CharOutput(530)", "Delete SimpleName: Override(531)", "Delete MarkerAnnotation(532)", "Delete Modifier: public(533)", "Delete PrimitiveType: void(534)", "Delete SimpleName: write(535)", "Delete PrimitiveType: char(536)", "Delete SimpleName: c(537)", "Delete SingleVariableDeclaration(538)", "Delete SimpleName: IOException(539)", "Delete SimpleType: IOException(540)", "Delete SimpleName: writer(541)", "Delete SimpleName: append(542)", "Delete SimpleName: c(543)", "Delete MethodInvocation(544)", "Delete ExpressionStatement(545)", "Delete Block(546)", "Delete MethodDeclaration(547)", "Delete SimpleName: Override(548)", "Delete MarkerAnnotation(549)", "Delete Modifier: public(550)", "Delete PrimitiveType: void(551)", "Delete SimpleName: flush(552)", "Delete SimpleName: IOException(553)", "Delete SimpleType: IOException(554)", "Delete SimpleName: writer(555)", "Delete SimpleName: flush(556)", "Delete MethodInvocation(557)", "Delete ExpressionStatement(558)", "Delete Block(559)", "Delete MethodDeclaration(560)", "Delete SimpleName: Override(561)", "Delete MarkerAnnotation(562)", "Delete Modifier: public(563)", "Delete PrimitiveType: void(564)", "Delete SimpleName: close(565)", "Delete SimpleName: IOException(566)", "Delete SimpleType: IOException(567)", "Delete SimpleName: writer(568)", "Delete SimpleName: close(569)", "Delete MethodInvocation(570)", "Delete ExpressionStatement(571)", "Delete Block(572)", "Delete MethodDeclaration(573)", "Delete AnonymousClassDeclaration(574)", "Delete ClassInstanceCreation(575)", "Delete ReturnStatement(576)", "Delete Block(577)", "Delete MethodDeclaration(578)", "Delete TextElement: Returns a (579)", "Delete TextElement:  CharOutput(580)", "Delete TagElement: @code(581)", "Delete TextElement:  whose (582)", "Delete TextElement:  toString()(583)", "Delete TagElement: @code(584)", "Delete TextElement:  method can be used(585)", "Delete TextElement: to get the combined output.(586)", "Delete TagElement(587)", "Delete Javadoc(588)", "Delete Modifier: static(589)", "Delete SimpleName: CharOutput(590)", "Delete SimpleType: CharOutput(591)", "Delete SimpleName: stringBuilderOutput(592)", "Delete PrimitiveType: int(593)", "Delete SimpleName: initialSize(594)", "Delete SingleVariableDeclaration(595)", "Delete Modifier: final(596)", "Delete SimpleName: StringBuilder(597)", "Delete SimpleType: StringBuilder(598)", "Delete SimpleName: builder(599)", "Delete SimpleName: StringBuilder(600)", "Delete SimpleType: StringBuilder(601)", "Delete SimpleName: initialSize(602)", "Delete ClassInstanceCreation(603)", "Delete VariableDeclarationFragment(604)", "Delete VariableDeclarationStatement(605)", "Delete SimpleName: CharOutput(606)", "Delete SimpleType: CharOutput(607)", "Delete SimpleName: Override(608)", "Delete MarkerAnnotation(609)", "Delete Modifier: public(610)", "Delete PrimitiveType: void(611)", "Delete SimpleName: write(612)", "Delete PrimitiveType: char(613)", "Delete SimpleName: c(614)", "Delete SingleVariableDeclaration(615)", "Delete SimpleName: builder(616)", "Delete SimpleName: append(617)", "Delete SimpleName: c(618)", "Delete MethodInvocation(619)", "Delete ExpressionStatement(620)", "Delete Block(621)", "Delete MethodDeclaration(622)", "Delete SimpleName: Override(623)", "Delete MarkerAnnotation(624)", "Delete Modifier: public(625)", "Delete PrimitiveType: void(626)", "Delete SimpleName: flush(627)", "Delete Block(628)", "Delete MethodDeclaration(629)", "Delete SimpleName: Override(630)", "Delete MarkerAnnotation(631)", "Delete Modifier: public(632)", "Delete PrimitiveType: void(633)", "Delete SimpleName: close(634)", "Delete Block(635)", "Delete MethodDeclaration(636)", "Delete SimpleName: Override(637)", "Delete MarkerAnnotation(638)", "Delete Modifier: public(639)", "Delete SimpleName: String(640)", "Delete SimpleType: String(641)", "Delete SimpleName: toString(642)", "Delete SimpleName: builder(643)", "Delete SimpleName: toString(644)", "Delete MethodInvocation(645)", "Delete ReturnStatement(646)", "Delete Block(647)", "Delete MethodDeclaration(648)", "Delete AnonymousClassDeclaration(649)", "Delete ClassInstanceCreation(650)", "Delete ReturnStatement(651)", "Delete Block(652)", "Delete MethodDeclaration(653)", "Delete TypeDeclaration: class(654)"]}}, {"BaseEncoding_cluster": {"actions": [{"root": "INS TypeDeclaration: class to TypeDeclaration: class at 39", "operations": ["INS Dimension to ArrayType: char[] at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS MethodInvocation to MethodInvocation at 2", "INS StringLiteral: \"Invalid input length \" to InfixExpression: + at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS Modifier: static to TypeDeclaration: class at 0", "INS SimpleName: alphabetChars to SingleVariableDeclaration at 1", "INS Modifier: final to FieldDeclaration at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrefixExpression: ++ to ForStatement at 2", "INS InfixExpression: | to VariableDeclarationFragment at 1", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: target to MethodInvocation at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: Base16Encoding to MethodDeclaration at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SimpleName: toCharArray to MethodInvocation at 1", "INS SimpleType: BaseEncoding to MethodDeclaration at 1", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS Dimension to ArrayType: byte[] at 1", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS SimpleName: encode to MethodInvocation at 1", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: i to InfixExpression: & at 0", "INS InfixExpression: < to ForStatement at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS NullLiteral to SuperConstructorInvocation at 1", "INS SimpleName: newInstance to MethodDeclaration at 2", "INS ClassInstanceCreation to ConstructorInvocation at 0", "INS SimpleType: Alphabet to ClassInstanceCreation at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS InfixExpression: < to ForStatement at 1", "INS NumberLiteral: 16 to InfixExpression: == at 1", "INS SimpleType: DecodingException to MethodDeclaration at 5", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: Base16Encoding to ClassInstanceCreation at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 39", "INS MethodInvocation to ExpressionStatement at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS VariableDeclarationStatement to Block at 0", "INS Assignment: += to ForStatement at 2", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: encoding to ArrayAccess at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: bytesWritten to VariableDeclarationFragment at 0", "INS PrimitiveType: byte to CastExpression at 0", "INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: encoding to ArrayAccess at 0", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ExpressionStatement to Block at 1", "INS ArrayAccess to Assignment: = at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS IfStatement to Block at 2", "INS SimpleName: checkArgument to MethodInvocation at 0", "INS Block to MethodDeclaration at 6", "INS InfixExpression: << to InfixExpression: | at 0", "INS SimpleName: b to InfixExpression: | at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: encodeTo to MethodDeclaration at 2", "INS NumberLiteral: 256 to InfixExpression: < at 1", "INS Modifier: private to MethodDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS SimpleName: i to InfixExpression: >>> at 0", "INS NumberLiteral: 4 to InfixExpression: >>> at 1", "INS VariableDeclarationStatement to Block at 3", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS SimpleName: Base16Encoding to MethodDeclaration at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: decoded to CastExpression at 1", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS SimpleName: decodeTo to MethodDeclaration at 2", "INS SimpleName: b to ArrayAccess at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: alphabetChars to MethodInvocation at 0", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: % at 0", "INS InfixExpression: < to ForStatement at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ArrayType: char[] to FieldDeclaration at 1", "INS CastExpression to Assignment: = at 1", "INS SimpleName: length to MethodInvocation at 1", "INS ArrayAccess to Assignment: = at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ForStatement to Block at 4", "INS SimpleName: i to Assignment: += at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS SimpleName: i to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS Block to IfStatement at 1", "INS Block to MethodDeclaration at 5", "INS ReturnStatement to Block at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleType: DecodingException to ClassInstanceCreation at 0", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS InfixExpression: | to ArrayAccess at 1", "INS ForStatement to Block at 2", "INS MethodInvocation to InfixExpression: | at 1", "INS NumberLiteral: 512 to ArrayCreation at 1", "INS SimpleName: bytesWritten to ReturnStatement at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SimpleName: i to InfixExpression: + at 0", "INS Block to MethodDeclaration at 3", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS ArrayAccess to InfixExpression: & at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS ThrowStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: IOException to MethodDeclaration at 7", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to ForStatement at 3", "INS MethodDeclaration to TypeDeclaration: class at 9", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS SimpleName: target to ArrayAccess at 0", "INS ArrayCreation to VariableDeclarationFragment at 1", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Dimension to ArrayType: char[] at 1", "INS SimpleName: Base16Encoding to SimpleType: Base16Encoding at 0", "INS SimpleName: decoded to VariableDeclarationFragment at 0", "INS SimpleName: encode to MethodInvocation at 1", "INS SimpleName: b to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS NumberLiteral: 4 to InfixExpression: << at 1", "INS NumberLiteral: 2 to InfixExpression: % at 1", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: paddingChar to SingleVariableDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS QualifiedName: bytes.length to MethodInvocation at 3", "INS PrefixExpression: ++ to ForStatement at 2", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Base16Encoding to TypeDeclaration: class at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Block to MethodDeclaration at 3", "INS ArrayType: char[] to ArrayCreation at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Dimension to ArrayType: byte[] at 1", "INS ArrayAccess to MethodInvocation at 2", "INS SimpleName: BaseEncoding to SimpleType: BaseEncoding at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: | to ArrayAccess at 1", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: name to ClassInstanceCreation at 1", "INS MethodInvocation to InfixExpression: << at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS NumberLiteral: 0x100 to InfixExpression: | at 1", "INS ForStatement to Block at 2", "INS VariableDeclarationExpression to ForStatement at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: alphabet to ClassInstanceCreation at 1", "INS SimpleName: len to InfixExpression: < at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: charAt to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: off to InfixExpression: + at 0", "INS NumberLiteral: 0xF to InfixExpression: & at 1", "INS Block to ForStatement at 3", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleName: encoding to ArrayAccess at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS InfixExpression: + to ArrayAccess at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS InfixExpression: % to InfixExpression: == at 0", "INS ReturnStatement to Block at 5", "INS ArrayAccess to MethodInvocation at 2", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: checkPositionIndexes to MethodInvocation at 0", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS NumberLiteral: 0x100 to InfixExpression: | at 1", "INS SimpleName: i to InfixExpression: | at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: len to InfixExpression: + at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: off to MethodInvocation at 1", "INS SimpleName: encoding to ArrayAccess at 0", "INS QualifiedName: alphabet.chars.length to InfixExpression: == at 0", "INS NumberLiteral: 2 to Assignment: += at 1", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS ConstructorInvocation to Block at 0", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS InfixExpression: & to VariableDeclarationFragment at 1", "INS SimpleName: chars to MethodInvocation at 1", "INS NumberLiteral: 1 to InfixExpression: == at 1", "INS Block to ForStatement at 3", "INS SimpleName: encoding to VariableDeclarationFragment at 0", "INS SimpleName: i to InfixExpression: + at 1", "INS SuperConstructorInvocation to Block at 0", "INS InfixExpression: >>> to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS Modifier: final to TypeDeclaration: class at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: alphabet to SuperConstructorInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 40", "operations": ["INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: << to InfixExpression: | at 1", "INS SimpleName: Base64Encoding to TypeDeclaration: class at 2", "INS SimpleName: paddingChar to SuperConstructorInvocation at 1", "INS Block to ForStatement at 3", "INS ThrowStatement to Block at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS Block to IfStatement at 1", "INS NumberLiteral: 8 to InfixExpression: << at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: decodeTo to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS ParenthesizedExpression to InfixExpression: << at 0", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS SimpleName: remaining to InfixExpression: >= at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS InfixExpression: & to InfixExpression: | at 1", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS SimpleName: len to VariableDeclarationFragment at 1", "INS SimpleName: off to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: off to VariableDeclarationFragment at 1", "INS NumberLiteral: 64 to InfixExpression: == at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS NumberLiteral: 6 to InfixExpression: >>> at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MethodDeclaration to TypeDeclaration: class at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: + to InfixExpression: < at 1", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: i to MethodInvocation at 3", "INS SimpleName: encode to MethodInvocation at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: remaining to Assignment: -= at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 4", "INS ConstructorInvocation to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS NumberLiteral: 3 to InfixExpression: >= at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS NumberLiteral: 3 to Assignment: -= at 1", "INS ArrayAccess to InfixExpression: & at 0", "INS Assignment: -= to ForStatement at 2", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleType: DecodingException to ClassInstanceCreation at 0", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleType: Base64Encoding to ClassInstanceCreation at 0", "INS QualifiedName: alphabet.chars.length to InfixExpression: == at 0", "INS SimpleName: BaseEncoding to SimpleType: BaseEncoding at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: i to InfixExpression: - at 1", "INS SimpleName: name to ClassInstanceCreation at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: Base64Encoding to MethodDeclaration at 0", "INS SimpleName: alphabet to SuperConstructorInvocation at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleType: BaseEncoding to MethodDeclaration at 1", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to InfixExpression: + at 1", "INS InfixExpression: | to InfixExpression: | at 0", "INS SimpleName: paddingChar to SingleVariableDeclaration at 2", "INS ArrayAccess to InfixExpression: & at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: encode to MethodInvocation at 1", "INS NumberLiteral: 0x3F to InfixExpression: & at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: bytes to ArrayAccess at 0", "INS IfStatement to Block at 3", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: + to InfixExpression: - at 0", "INS IfStatement to Block at 4", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: < to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: name to SingleVariableDeclaration at 1", "INS SimpleName: alphabetChars to SingleVariableDeclaration at 1", "INS ClassInstanceCreation to ConstructorInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: chars to MethodInvocation at 2", "INS Modifier: final to TypeDeclaration: class at 1", "INS SimpleName: target to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: DecodingException to MethodDeclaration at 5", "INS SimpleName: checkArgument to MethodInvocation at 0", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SimpleName: length to MethodInvocation at 1", "INS NumberLiteral: 16 to InfixExpression: << at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ArrayAccess to InfixExpression: & at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: length to MethodInvocation at 1", "INS Modifier: static to TypeDeclaration: class at 0", "INS SimpleName: paddingChar to ClassInstanceCreation at 2", "INS SimpleName: toCharArray to MethodInvocation at 1", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: newInstance to MethodDeclaration at 2", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: encode to MethodInvocation at 1", "INS InfixExpression: >>> to MethodInvocation at 2", "INS SimpleName: off to InfixExpression: + at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS InfixExpression: >= to ForStatement at 1", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: append to MethodInvocation at 1", "INS Block to MethodDeclaration at 8", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: len to InfixExpression: + at 1", "INS InfixExpression: - to MethodInvocation at 4", "INS SimpleName: encodeTo to MethodDeclaration at 2", "INS ExpressionStatement to Block at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS SimpleName: append to MethodInvocation at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: alphabetChars to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Block to MethodDeclaration at 6", "INS ReturnStatement to Block at 0", "INS SimpleName: chunk to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: Character to SimpleType: Character at 0", "INS StringLiteral: \"Invalid input length \" to InfixExpression: + at 0", "INS ExpressionStatement to Block at 3", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS NumberLiteral: 12 to InfixExpression: >>> at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS ExpressionStatement to Block at 4", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: chars to MethodInvocation at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS SimpleName: alphabet to ClassInstanceCreation at 1", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: len to InfixExpression: + at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS SimpleName: paddingChar to SingleVariableDeclaration at 2", "INS SimpleName: target to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: target to MethodInvocation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: Base64Encoding to SimpleType: Base64Encoding at 0", "INS SimpleName: chars to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: bytesWritten to ReturnStatement at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS Block to IfStatement at 1", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: isValidPaddingStartPosition to MethodInvocation at 1", "INS SimpleName: remaining to VariableDeclarationFragment at 0", "INS SimpleName: Base64Encoding to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: checkPositionIndexes to MethodInvocation at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: paddingChar to ConstructorInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ForStatement to Block at 3", "INS SimpleName: Character to SimpleType: Character at 0", "INS InfixExpression: | to VariableDeclarationFragment at 1", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: chunk to InfixExpression: & at 0", "INS NumberLiteral: 18 to InfixExpression: >>> at 1", "INS ExpressionStatement to Block at 1", "INS SuperConstructorInvocation to Block at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS InfixExpression: & to MethodInvocation at 2", "INS SimpleName: encode to MethodInvocation at 1", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS SimpleName: target to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS InfixExpression: << to InfixExpression: | at 0", "INS MethodDeclaration to TypeDeclaration: class at 4", "INS SimpleName: append to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: Character to SingleVariableDeclaration at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: bytesWritten to VariableDeclarationFragment at 0", "INS NumberLiteral: 0x3F to InfixExpression: & at 1", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: encodeChunkTo to MethodInvocation at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS QualifiedName: bytes.length to MethodInvocation at 3", "INS SimpleName: alphabet to MethodInvocation at 0", "INS TypeDeclaration: class to TypeDeclaration: class at 40", "INS ReturnStatement to Block at 6", "INS SimpleName: chars to MethodInvocation at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: len to InfixExpression: + at 1", "INS ParenthesizedExpression to InfixExpression: << at 0", "INS SimpleName: bytes to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS NumberLiteral: 0x3F to InfixExpression: & at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: trimTrailingFrom to MethodInvocation at 1", "INS SimpleName: padding to MethodInvocation at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 42", "operations": ["INS SimpleType: Appendable to SingleVariableDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 3", "INS ThrowStatement to Block at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 42", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: append to MethodDeclaration at 3", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS ThrowStatement to Block at 0", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleType: Appendable to MethodDeclaration at 1", "INS ReturnStatement to Block at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleType: Appendable to MethodDeclaration at 2", "INS Modifier: public to MethodDeclaration at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleType: Appendable to ClassInstanceCreation at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS Modifier: static to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: separatingAppendable to MethodDeclaration at 2", "INS SimpleName: delegate to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Block to MethodDeclaration at 6", "INS ReturnStatement to Block at 3", "INS SimpleName: append to MethodDeclaration at 3", "INS Block to MethodDeclaration at 8", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleType: Appendable to MethodDeclaration at 2", "INS SimpleType: Appendable to MethodDeclaration at 2", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 2", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: delegate to SingleVariableDeclaration at 2", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS ClassInstanceCreation to ReturnStatement at 0", "INS Block to MethodDeclaration at 6", "INS ThisExpression to ReturnStatement at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS Block to MethodDeclaration at 6", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: separator to MethodInvocation at 2", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleType: IOException to MethodDeclaration at 7", "INS SimpleName: append to MethodDeclaration at 3", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 43", "operations": ["INS SimpleName: Writer to SimpleType: Writer at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: seperatingAppendable to VariableDeclarationFragment at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: write to MethodDeclaration at 3", "INS PrimitiveType: void to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to MethodDeclaration at 8", "INS PrimitiveType: char to CastExpression at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: append to MethodInvocation at 1", "INS SimpleType: Writer to SingleVariableDeclaration at 1", "INS Modifier: public to MethodDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 5", "INS Modifier: final to SingleVariableDeclaration at 0", "INS Dimension to ArrayType: char[] at 1", "INS VariableDeclarationStatement to Block at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Writer to SimpleType: Writer at 0", "INS SimpleName: separatingWriter to MethodDeclaration at 3", "INS Block to MethodDeclaration at 6", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SimpleName: afterEveryChars to MethodInvocation at 3", "INS SimpleName: separator to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS ArrayType: char[] to SingleVariableDeclaration at 0", "INS SimpleType: Writer to ClassInstanceCreation at 0", "INS SimpleName: separatingAppendable to MethodInvocation at 0", "INS SimpleName: delegate to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS ThrowStatement to Block at 0", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS StringLiteral: \"Writer\" to SingleMemberAnnotation at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: Writer to SimpleType: Writer at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleType: Writer to MethodDeclaration at 2", "INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: c to SingleVariableDeclaration at 1", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS CastExpression to MethodInvocation at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: seperatingAppendable to MethodInvocation at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS SimpleType: Appendable to VariableDeclarationStatement at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: String to SingleVariableDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: delegate to SingleVariableDeclaration at 2", "INS SimpleName: afterEveryChars to SingleVariableDeclaration at 2", "INS SimpleName: write to MethodDeclaration at 3", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleName: c to CastExpression at 1", "INS MethodDeclaration to TypeDeclaration: class at 43", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS ReturnStatement to Block at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS Block to MethodDeclaration at 7", "INS SimpleName: separator to SingleVariableDeclaration at 2", "INS PrimitiveType: char to ArrayType: char[] at 0"]}, {"root": "UPDATE from final to abstract", "operations": ["UPD Modifier: final from final to abstract", "UPD Modifier: final from final to abstract"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 3"]}, {"root": "INS PrimitiveType: void to MethodDeclaration at 1", "operations": ["INS PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "UPDATE from encodingStream to encodeTo", "operations": ["UPD SimpleName: encodingStream from encodingStream to encodeTo", "UPD SimpleName: encodingStream from encodingStream to encodeTo"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleName: len to SingleVariableDeclaration at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "INS SimpleType: IOException to MethodDeclaration at 8", "operations": ["INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleType: IOException to MethodDeclaration at 8"]}, {"root": "INS PrimitiveType: int to MethodDeclaration at 1", "operations": ["INS PrimitiveType: int to MethodDeclaration at 1"]}, {"root": "INS SimpleName: decodeTo to MethodDeclaration at 2", "operations": ["INS SimpleName: decodeTo to MethodDeclaration at 2"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS Dimension to ArrayType: byte[] at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS SimpleType: DecodingException to MethodDeclaration at 7", "operations": ["INS SimpleType: DecodingException to MethodDeclaration at 7", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: BaseEncoding to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: BaseEncoding to FieldDeclaration at 3"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: BaseEncoding to FieldDeclaration at 3"]}, {"root": "INS SimpleName: StandardBaseEncoding to TypeDeclaration: class at 1", "operations": ["INS SimpleName: StandardBaseEncoding to TypeDeclaration: class at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SimpleName: encodeTo to MethodDeclaration at 2", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: len to InfixExpression: + at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Block to ForStatement at 3", "INS SimpleName: i to InfixExpression: - at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: Math to MethodInvocation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: i to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: off to MethodInvocation at 1", "INS QualifiedName: alphabet.bytesPerChunk to Assignment: += at 1", "INS ExpressionStatement to Block at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS QualifiedName: bytes.length to MethodInvocation at 3", "INS MethodDeclaration to TypeDeclaration: class at 12", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: alphabet.bytesPerChunk to MethodInvocation at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: off to InfixExpression: + at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS Assignment: += to ForStatement at 2", "INS SimpleName: encodeChunkTo to MethodInvocation at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS Block to MethodDeclaration at 8", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrimitiveType: void to MethodDeclaration at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: target to MethodInvocation at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS SimpleName: checkPositionIndexes to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS InfixExpression: + to MethodInvocation at 3", "INS MethodInvocation to MethodInvocation at 4", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS SimpleName: min to MethodInvocation at 1", "INS SimpleName: len to InfixExpression: - at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: bytes to MethodInvocation at 2", "INS InfixExpression: - to MethodInvocation at 3", "INS ForStatement to Block at 2", "INS ExpressionStatement to Block at 1", "INS SimpleName: i to Assignment: += at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 13", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS InfixExpression: != to IfStatement at 0", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: bitOffset to InfixExpression: - at 0", "INS SimpleName: paddingChar to InfixExpression: != at 0", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS WhileStatement to Block at 0", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: bitsProcessed to VariableDeclarationFragment at 0", "INS SimpleName: checkPositionIndexes to MethodInvocation at 0", "INS QualifiedName: alphabet.bitsPerChar to InfixExpression: - at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Assignment: <<= to ExpressionStatement at 0", "INS InfixExpression: & to Assignment: |= at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS InfixExpression: <= to MethodInvocation at 1", "INS SimpleName: bitBuffer to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS VariableDeclarationStatement to Block at 5", "INS SimpleName: charIndex to MethodInvocation at 2", "INS QualifiedName: alphabet.bitsPerChar to Assignment: += at 1", "INS InfixExpression: * to InfixExpression: - at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: bitsProcessed to InfixExpression: - at 1", "INS ExpressionStatement to Block at 0", "INS QualifiedName: alphabet.bytesPerChunk to InfixExpression: <= at 1", "INS Block to WhileStatement at 1", "INS SimpleName: charIndex to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to InfixExpression: >>> at 1", "INS SimpleName: bitBuffer to Assignment: |= at 0", "INS NumberLiteral: 1 to InfixExpression: + at 1", "INS InfixExpression: + to ParenthesizedExpression at 0", "INS SimpleName: bitsProcessed to Assignment: += at 0", "INS SimpleName: i to PrefixExpression: ++ at 0", "INS SimpleName: bitOffset to VariableDeclarationFragment at 0", "INS SimpleName: encodeChunkTo to MethodDeclaration at 1", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: bitBuffer to InfixExpression: >>> at 0", "INS InfixExpression: < to WhileStatement at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS SimpleName: off to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 13", "INS Assignment: += to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS SimpleName: target to MethodInvocation at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS ExpressionStatement to Block at 1", "INS QualifiedName: bytes.length to MethodInvocation at 3", "INS SimpleName: bitsProcessed to InfixExpression: < at 0", "INS SimpleName: encode to MethodInvocation at 1", "INS SimpleName: len to InfixExpression: * at 0", "INS InfixExpression: * to InfixExpression: < at 1", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 3", "INS Block to ForStatement at 3", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS Assignment: += to ExpressionStatement at 0", "INS Block to MethodDeclaration at 7", "INS ExpressionStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS QualifiedName: alphabet.bitsPerChar to Assignment: += at 1", "INS CastExpression to InfixExpression: & at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: charValue to MethodInvocation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS InfixExpression: * to InfixExpression: < at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: append to MethodInvocation at 1", "INS QualifiedName: alphabet.bytesPerChunk to InfixExpression: * at 0", "INS Block to IfStatement at 1", "INS PrimitiveType: int to CastExpression at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: append to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS ParenthesizedExpression to CastExpression at 1", "INS VariableDeclarationStatement to Block at 6", "INS WhileStatement to Block at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: bitsProcessed to Assignment: += at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS ExpressionStatement to Block at 1", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Block to WhileStatement at 1", "INS SimpleName: len to InfixExpression: + at 1", "INS SimpleName: target to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: alphabet.mask to InfixExpression: & at 1", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: < to WhileStatement at 0", "INS PrefixExpression: ++ to ForStatement at 2", "INS ParenthesizedExpression to InfixExpression: * at 0", "INS PrimitiveType: void to MethodDeclaration at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS SimpleName: off to InfixExpression: + at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Assignment: |= to ExpressionStatement at 0", "INS SimpleName: bitBuffer to Assignment: <<= at 0", "INS SimpleName: len to InfixExpression: + at 0", "INS SimpleName: target to MethodInvocation at 1", "INS IfStatement to Block at 8", "INS SimpleName: bitsProcessed to InfixExpression: < at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS SimpleName: paddingChar to MethodInvocation at 0", "INS Dimension to ArrayType: byte[] at 1", "INS NumberLiteral: 8 to Assignment: <<= at 1", "INS SimpleName: len to InfixExpression: < at 1", "INS InfixExpression: & to VariableDeclarationFragment at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS ForStatement to Block at 4", "INS SimpleName: len to InfixExpression: <= at 0", "INS SimpleName: checkArgument to MethodInvocation at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 15", "operations": ["INS NumberLiteral: 8 to Assignment: -= at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 3", "INS SimpleName: chunk to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 1", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: bytesWritten to ReturnStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: length to MethodInvocation at 1", "INS QualifiedName: alphabet.bitsPerChar to InfixExpression: * at 1", "INS SimpleName: target to MethodInvocation at 1", "INS InfixExpression: < to IfStatement at 0", "INS ParenthesizedExpression to InfixExpression: * at 0", "INS SimpleName: charsProcessed to PostfixExpression: ++ at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS SimpleName: length to MethodInvocation at 1", "INS InfixExpression: < to ForStatement at 1", "INS SimpleName: i to InfixExpression: + at 1", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Assignment: -= to ForStatement at 2", "INS MethodInvocation to MethodInvocation at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS SimpleName: chars to MethodInvocation at 2", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS QualifiedName: alphabet.charsPerChunk to Assignment: += at 1", "INS Dimension to ArrayType: byte[] at 1", "INS StringLiteral: \"Invalid input length \" to InfixExpression: + at 0", "INS SimpleName: offset to InfixExpression: >>> at 1", "INS SimpleName: minOffset to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: offset to InfixExpression: >= at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: padding to MethodInvocation at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: charIdx to VariableDeclarationFragment at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS ArrayAccess to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS SimpleName: offset to VariableDeclarationFragment at 0", "INS QualifiedName: alphabet.bitsPerChar to Assignment: <<= at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to ForStatement at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS SimpleName: charIdx to InfixExpression: + at 0", "INS ForStatement to Block at 5", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS SimpleName: charIdx to InfixExpression: + at 0", "INS PrimitiveType: long to VariableDeclarationStatement at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS Assignment: |= to ExpressionStatement at 0", "INS Block to ForStatement at 3", "INS SimpleName: bytesWritten to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 4", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS InfixExpression: + to InfixExpression: < at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: chars to Assignment: = at 0", "INS SimpleName: chunk to Assignment: |= at 0", "INS SimpleName: length to MethodInvocation at 1", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: offset to Assignment: -= at 0", "INS SimpleType: DecodingException to MethodDeclaration at 5", "INS Assignment: += to ForStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: decodeTo to MethodDeclaration at 2", "INS IfStatement to Block at 3", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS PrimitiveType: byte to CastExpression at 0", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: charsProcessed to InfixExpression: * at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS PrefixExpression: ! to IfStatement at 0", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS ExpressionStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 15", "INS VariableDeclarationExpression to ForStatement at 0", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: chars to MethodInvocation at 1", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS InfixExpression: * to InfixExpression: - at 0", "INS Block to IfStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: alphabet.bytesPerChunk to InfixExpression: * at 0", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS InfixExpression: < to ForStatement at 1", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS IfStatement to Block at 1", "INS SimpleName: target to ArrayAccess at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: - to ParenthesizedExpression at 0", "INS PostfixExpression: ++ to InfixExpression: + at 1", "INS ExpressionStatement to Block at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: >= to ForStatement at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS ForStatement to Block at 4", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS Assignment: <<= to ExpressionStatement at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS InfixExpression: * to VariableDeclarationFragment at 1", "INS ReturnStatement to Block at 6", "INS SimpleName: minOffset to InfixExpression: >= at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: chunk to Assignment: <<= at 0", "INS Block to MethodDeclaration at 6", "INS MethodInvocation to MethodInvocation at 2", "INS QualifiedName: alphabet.charsPerChunk to InfixExpression: < at 1", "INS InfixExpression: * to InfixExpression: - at 1", "INS QualifiedName: alphabet.bytesPerChunk to InfixExpression: - at 0", "INS SimpleName: isValidPaddingStartPosition to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: charIdx to Assignment: += at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS SimpleName: charIdx to InfixExpression: < at 0", "INS SimpleName: trimTrailingFrom to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS SimpleName: checkNotNull to MethodInvocation at 0", "INS SimpleName: charsProcessed to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: decode to MethodInvocation at 1", "INS Block to ForStatement at 3", "INS VariableDeclarationExpression to ForStatement at 0", "INS ForStatement to Block at 2", "INS CastExpression to Assignment: = at 1", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS NumberLiteral: 8 to InfixExpression: * at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: |= at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS SimpleName: paddingChar to SingleVariableDeclaration at 2", "INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0", "INS SimpleType: BaseEncoding to MethodDeclaration at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: alphabet to ClassInstanceCreation at 1", "INS Block to MethodDeclaration at 4", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: newInstance to MethodDeclaration at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS SimpleType: Alphabet to SingleVariableDeclaration at 0", "INS SimpleName: BaseEncoding to SimpleType: BaseEncoding at 0", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: Alphabet to SimpleType: Alphabet at 0", "INS SimpleName: Character to SimpleType: Character at 0", "INS SimpleName: paddingChar to ClassInstanceCreation at 2", "INS SimpleName: alphabet to SingleVariableDeclaration at 1", "INS SimpleType: Character to SingleVariableDeclaration at 1"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV SimpleType: StandardBaseEncoding to TypeDeclaration: class at 3"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV SimpleType: StandardBaseEncoding to TypeDeclaration: class at 3"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"Reader\" to SingleMemberAnnotation at 1"]}, {"root": "UPDATE from CharInput to Reader", "operations": ["UPD SimpleName: CharInput from CharInput to Reader", "UPD SimpleName: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleName: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleType: CharInput from CharInput to Reader", "UPD SimpleName: CharInput from CharInput to Reader", "UPD SimpleName: CharInput from CharInput to Reader"]}, {"root": "UPDATE from ignoringInput to ignoringReader", "operations": ["UPD SimpleName: ignoringInput from ignoringInput to ignoringReader", "UPD SimpleName: ignoringInput from ignoringInput to ignoringReader"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 12", "operations": ["INS SimpleName: afterEveryChars to MethodInvocation at 3", "INS SimpleName: off to MethodInvocation at 4", "INS Dimension to ArrayType: byte[] at 1", "INS SimpleName: Appendable to SimpleType: Appendable at 0", "INS SimpleName: separator to MethodInvocation at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS SimpleName: bytes to MethodInvocation at 3", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: delegate to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: encodeTo to MethodInvocation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IOException to MethodDeclaration at 7", "INS PrimitiveType: void to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS SimpleName: separatingAppendable to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: len to MethodInvocation at 5", "INS SimpleType: Appendable to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 8", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 1", "INS SimpleName: encodeTo to MethodDeclaration at 2", "INS SimpleName: target to MethodInvocation at 1", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS MethodDeclaration to TypeDeclaration: class at 12"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleName: decodeTo to MethodDeclaration at 2", "INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SimpleName: separatorChars to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: chars to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 0", "INS SimpleName: target to MethodInvocation at 2", "INS SimpleName: CharSequence to SimpleType: CharSequence at 0", "INS SimpleName: chars to MethodInvocation at 2", "INS Dimension to ArrayType: byte[] at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: removeFrom to MethodInvocation at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 0", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS Block to MethodDeclaration at 6", "INS SimpleType: CharSequence to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: target to SingleVariableDeclaration at 1", "INS MethodInvocation to MethodInvocation at 3", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: decodeTo to MethodInvocation at 1", "INS PrimitiveType: int to MethodDeclaration at 1", "INS SimpleName: delegate to MethodInvocation at 0", "INS SimpleType: DecodingException to MethodDeclaration at 5"]}, {"root": "INS TryStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS TryStatement to Block at 3", "INS Block to TryStatement at 0"]}, {"root": "UPDATE from CharOutput to Appendable", "operations": ["UPD SimpleName: CharOutput from CharOutput to Appendable", "UPD SimpleType: CharOutput from CharOutput to Appendable"]}, {"root": "UPDATE from charOutput to target", "operations": ["UPD SimpleName: charOutput from charOutput to target"]}, {"root": "UPDATE from CharInput to CharSequence", "operations": ["UPD SimpleName: CharInput from CharInput to CharSequence", "UPD SimpleType: CharInput from CharInput to CharSequence"]}, {"root": "UPDATE from charInput to chars", "operations": ["UPD SimpleName: charInput from charInput to chars", "UPD SimpleName: separator from separator to chars", "UPD SimpleName: separator from separator to chars"]}, {"root": "INS SimpleType: DecodingException to MethodDeclaration at 3", "operations": ["INS SimpleName: DecodingException to SimpleType: DecodingException at 0", "INS SimpleType: DecodingException to MethodDeclaration at 3"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS SingleMemberAnnotation to MethodDeclaration at 0", "INS StringLiteral: \"Writer,OutputStream\" to SingleMemberAnnotation at 1"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "UPDATE from ByteOutput to OutputStream", "operations": ["UPD SimpleName: ByteOutput from ByteOutput to OutputStream", "UPD SimpleName: ByteOutput from ByteOutput to OutputStream", "UPD SimpleName: ByteOutput from ByteOutput to OutputStream", "UPD SimpleType: ByteOutput from ByteOutput to OutputStream", "UPD SimpleType: ByteOutput from ByteOutput to OutputStream", "UPD SimpleType: ByteOutput from ByteOutput to OutputStream"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 6"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS StringLiteral: \"Reader,InputStream\" to SingleMemberAnnotation at 1"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "UPDATE from ByteInput to InputStream", "operations": ["UPD SimpleType: ByteInput from ByteInput to InputStream", "UPD SimpleName: ByteInput from ByteInput to InputStream", "UPD SimpleName: ByteInput from ByteInput to InputStream", "UPD SimpleType: ByteInput from ByteInput to InputStream", "UPD SimpleName: ByteInput from ByteInput to InputStream", "UPD SimpleType: ByteInput from ByteInput to InputStream"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from public to private", "operations": ["UPD Modifier: public from public to private"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV SimpleType: IOException to MethodDeclaration at 5", "MOV Modifier: public to MethodDeclaration at 0", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV PrimitiveType: void to MethodDeclaration at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to Block at 1"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SingleMemberAnnotation to MethodDeclaration at 0", "INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS StringLiteral: \"Writer,OutputStream\" to SingleMemberAnnotation at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "INS SingleMemberAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: GwtIncompatible to SingleMemberAnnotation at 0", "INS StringLiteral: \"Reader,InputStream\" to SingleMemberAnnotation at 1", "INS SingleMemberAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "UPDATE from CharOutput to StringBuilder", "operations": ["UPD SimpleName: CharOutput from CharOutput to StringBuilder", "UPD SimpleType: CharOutput from CharOutput to StringBuilder"]}, {"root": "MOVE from TryStatement", "operations": ["MOV CatchClause to TryStatement at 1"]}, {"root": "INS PrimitiveType: int to VariableDeclarationStatement at 0", "operations": ["INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from StandardBaseEncoding to Base64Encoding", "operations": ["UPD SimpleType: StandardBaseEncoding from StandardBaseEncoding to Base64Encoding", "UPD SimpleType: StandardBaseEncoding from StandardBaseEncoding to Base64Encoding", "UPD SimpleName: StandardBaseEncoding from StandardBaseEncoding to Base64Encoding", "UPD SimpleName: StandardBaseEncoding from StandardBaseEncoding to Base64Encoding"]}, {"root": "UPDATE from StandardBaseEncoding to Base16Encoding", "operations": ["UPD SimpleType: StandardBaseEncoding from StandardBaseEncoding to Base16Encoding", "UPD SimpleName: StandardBaseEncoding from StandardBaseEncoding to Base16Encoding"]}, {"root": "UPDATE from CharOutput to Writer", "operations": ["UPD SimpleType: CharOutput from CharOutput to Writer", "UPD SimpleType: CharOutput from CharOutput to Writer", "UPD SimpleName: CharOutput from CharOutput to Writer", "UPD SimpleName: CharOutput from CharOutput to Writer"]}, {"root": "UPDATE from CharOutput to Character", "operations": ["UPD SimpleName: CharOutput from CharOutput to Character", "UPD SimpleName: CharOutput from CharOutput to Character", "UPD SimpleType: CharOutput from CharOutput to Character"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: CharOutput to SingleVariableDeclaration at 1", "MOV SimpleName: delegate to SingleVariableDeclaration at 2"]}, {"root": "UPDATE from delegate to paddingChar", "operations": ["UPD SimpleName: delegate from delegate to paddingChar"]}, {"root": "MOVE from Block", "operations": ["MOV ForStatement to Block at 5", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from input to reader", "operations": ["UPD SimpleName: input from input to reader", "UPD SimpleName: input from input to reader"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: StringBuilder to ClassInstanceCreation at 0", "INS SimpleName: StringBuilder to SimpleType: StringBuilder at 0"]}, {"root": "UPDATE from index to len", "operations": ["UPD SimpleName: index from index to len", "UPD SimpleName: decodedInput from decodedInput to len", "UPD SimpleName: byteOutput from byteOutput to len"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV PostfixExpression: ++ to MethodInvocation at 2", "MOV VariableDeclarationExpression to ForStatement at 0", "MOV InfixExpression: < to ForStatement at 1"]}, {"root": "MOVE from ForStatement", "operations": ["MOV PostfixExpression: ++ to ForStatement at 2", "MOV VariableDeclarationExpression to ForStatement at 0"]}, {"root": "MOVE from SimpleType: Character", "operations": ["MOV SimpleName: CharOutput to SimpleType: Character at 0"]}, {"root": "INS VariableDeclarationExpression to ForStatement at 0", "operations": ["INS SimpleName: i to VariableDeclarationFragment at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1"]}, {"root": "INS Block to ForStatement at 2", "operations": ["INS CastExpression to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: chunk to InfixExpression: >>> at 0", "INS PostfixExpression: ++ to MethodInvocation at 2", "INS MethodInvocation to InfixExpression: << at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: length to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS InfixExpression: << to VariableDeclarationFragment at 1", "INS PrimitiveType: byte to CastExpression at 0", "INS SimpleName: target to ArrayAccess at 0", "INS SimpleName: alphabet to MethodInvocation at 0", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS MethodInvocation to InfixExpression: < at 1", "INS SimpleName: target to ArrayAccess at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS Block to ForStatement at 2", "INS SimpleName: chars to MethodInvocation at 0", "INS NumberLiteral: 0xFF to InfixExpression: & at 1", "INS InfixExpression: & to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: & at 0", "INS SimpleName: chunk to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS InfixExpression: << to Assignment: |= at 1", "INS SimpleName: length to MethodInvocation at 1", "INS ArrayAccess to Assignment: = at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS NumberLiteral: 6 to InfixExpression: << at 1", "INS ExpressionStatement to Block at 1", "INS InfixExpression: << to Assignment: |= at 1", "INS SimpleName: chars to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS CastExpression to Assignment: = at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: chunk to InfixExpression: & at 0", "INS ArrayAccess to Assignment: = at 0", "INS NumberLiteral: 12 to InfixExpression: << at 1", "INS SimpleName: charAt to MethodInvocation at 1", "INS SimpleName: i to InfixExpression: < at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS IfStatement to Block at 3", "INS PrimitiveType: byte to CastExpression at 0", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS ArrayAccess to Assignment: = at 0", "INS MethodInvocation to InfixExpression: << at 0", "INS NumberLiteral: 18 to InfixExpression: << at 1", "INS Block to IfStatement at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS InfixExpression: < to IfStatement at 0", "INS SimpleName: charAt to MethodInvocation at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to MethodInvocation at 2", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: bytesWritten to PostfixExpression: ++ at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: chars to MethodInvocation at 0", "INS Assignment: |= to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: << at 0", "INS CastExpression to Assignment: = at 1", "INS NumberLiteral: 16 to InfixExpression: >>> at 1", "INS SimpleName: target to ArrayAccess at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS PostfixExpression: ++ to MethodInvocation at 2", "INS PrimitiveType: byte to CastExpression at 0", "INS SimpleName: decode to MethodInvocation at 1", "INS InfixExpression: >>> to ParenthesizedExpression at 0", "INS SimpleName: chunk to Assignment: |= at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS NumberLiteral: 8 to InfixExpression: >>> at 1", "INS Block to IfStatement at 1", "INS PostfixExpression: ++ to ArrayAccess at 1", "INS SimpleName: alphabet to MethodInvocation at 0", "INS Assignment: |= to ExpressionStatement at 0", "INS SimpleName: chunk to Assignment: |= at 0", "INS ParenthesizedExpression to CastExpression at 1", "INS SimpleName: chunk to InfixExpression: >>> at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "UPDATE from decodingStream to decodeTo", "operations": ["UPD SimpleName: decodingStream from decodingStream to decodeTo"]}, {"root": "UPDATE from asCharInput to tmp", "operations": ["UPD SimpleName: asCharInput from asCharInput to tmp"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: asCharInput to MethodInvocation at 1", "MOV SimpleName: chars to MethodInvocation at 2"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: alphabet to MethodInvocation at 1", "INS SimpleName: newInstance to MethodInvocation at 0", "INS NullLiteral to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: StandardBaseEncoding to ClassInstanceCreation at 0"]}, {"root": "UPDATE from CharOutput to Alphabet", "operations": ["UPD SimpleName: CharOutput from CharOutput to Alphabet", "UPD SimpleType: CharOutput from CharOutput to Alphabet"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: CharOutput to ClassInstanceCreation at 0"]}, {"root": "INS MethodDeclaration to AnonymousClassDeclaration at 1", "operations": ["INS ThrowStatement to Block at 0", "INS PrimitiveType: int to MethodDeclaration at 2", "INS SimpleType: IOException to MethodDeclaration at 7", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS Dimension to ArrayType: char[] at 1", "INS SimpleType: UnsupportedOperationException to ClassInstanceCreation at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: UnsupportedOperationException to SimpleType: UnsupportedOperationException at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: off to SingleVariableDeclaration at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 1", "INS SimpleName: cbuf to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: len to SingleVariableDeclaration at 1", "INS SimpleName: read to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS Block to MethodDeclaration at 8", "INS PrimitiveType: int to SingleVariableDeclaration at 0", "INS PrimitiveType: char to ArrayType: char[] at 0", "INS ArrayType: char[] to SingleVariableDeclaration at 0"]}, {"root": "MOVE from AnonymousClassDeclaration", "operations": ["MOV MethodDeclaration to AnonymousClassDeclaration at 2", "MOV MethodDeclaration to AnonymousClassDeclaration at 3", "MOV FieldDeclaration to AnonymousClassDeclaration at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: encodingStream to MethodInvocation at 0", "MOV SimpleName: result to MethodInvocation at 1"]}, {"root": "UPDATE from byteOutput to bytes", "operations": ["UPD SimpleName: byteOutput from byteOutput to bytes"]}, {"root": "MOVE from InfixExpression: &", "operations": ["MOV ArrayAccess to InfixExpression: & at 0", "MOV SimpleName: write to MethodInvocation at 3", "MOV SimpleName: byteOutput to MethodInvocation at 2"]}, {"root": "UPDATE from write to off", "operations": ["UPD SimpleName: write from write to off"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: byteOutput to MethodInvocation at 4"]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: alphabet to MethodInvocation at 1", "INS SimpleName: newInstance to MethodInvocation at 0", "INS SimpleName: padChar to MethodInvocation at 2"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: IOException to MethodDeclaration at 5"]}, {"root": "UPDATE from separatingOutput to separatingWriter", "operations": ["UPD SimpleName: separatingOutput from separatingOutput to separatingWriter"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: DecodingException to ClassInstanceCreation at 0"]}, {"root": "INS SimpleName: i to PostfixExpression: ++ at 0", "operations": ["INS SimpleName: i to PostfixExpression: ++ at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from byte to int", "operations": ["UPD PrimitiveType: byte from byte to int"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: == to IfStatement at 0"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS SimpleName: paddingChar to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 2", "INS SimpleName: upper to MethodInvocation at 1", "INS SimpleName: newInstance to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ConditionalExpression at 2", "operations": ["INS SimpleName: lower to MethodInvocation at 1", "INS SimpleName: newInstance to MethodInvocation at 0", "INS SimpleName: paddingChar to MethodInvocation at 2", "INS MethodInvocation to ConditionalExpression at 2"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from write to append", "operations": ["UPD SimpleName: write from write to append"]}, {"root": "INS Assignment: |= to ExpressionStatement at 0", "operations": ["INS SimpleName: chunk to Assignment: |= at 0", "INS Assignment: |= to ExpressionStatement at 0", "INS MethodInvocation to Assignment: |= at 1"]}, {"root": "MOVE from PostfixExpression: ++", "operations": ["MOV SimpleName: i to PostfixExpression: ++ at 0"]}, {"root": "UPDATE from delegate to alphabet", "operations": ["UPD SimpleName: delegate from delegate to alphabet"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: delegate to MethodInvocation at 0", "MOV SimpleName: write to MethodInvocation at 1", "MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from write to decode", "operations": ["UPD SimpleName: write from write to decode"]}, {"root": "INS PostfixExpression: ++ to MethodInvocation at 2", "operations": ["INS SimpleName: i to PostfixExpression: ++ at 0", "INS PostfixExpression: ++ to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.io.GwtWorkarounds.asCharInput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.io.GwtWorkarounds.asCharOutput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.asInputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.asOutputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.io.GwtWorkarounds.stringBuilderOutput"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.ByteInput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.ByteOutput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.CharInput", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.io.GwtWorkarounds.CharOutput", "DEL ImportDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: stringBuilderOutput"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: ByteOutput", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SimpleName: byteOutput", "DEL SimpleType: ByteOutput"]}, {"root": "DEL TryStatement", "operations": ["DEL CatchClause", "DEL ClassInstanceCreation", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: impossible", "DEL ThrowStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: AssertionError", "DEL SimpleName: close", "DEL TryStatement", "DEL Block", "DEL StringLiteral: \"impossible\"", "DEL ForStatement", "DEL ExpressionStatement", "DEL SimpleType: AssertionError", "DEL ExpressionStatement", "DEL Block"]}, {"root": "DEL Block", "operations": ["DEL SimpleName: asCharOutput", "DEL MethodInvocation", "DEL SimpleName: asOutputStream", "DEL SimpleName: encodingStream", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: writer", "DEL MethodInvocation", "DEL Block"]}, {"root": "DEL SimpleType: ByteInput", "operations": ["DEL SimpleName: ByteInput", "DEL SimpleType: ByteInput"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL PrimitiveType: int", "DEL NumberLiteral: 0", "DEL VariableDeclarationStatement", "DEL SimpleName: index", "DEL VariableDeclarationFragment"]}, {"root": "DEL TryStatement", "operations": ["DEL Block", "DEL SimpleName: decodedInput", "DEL SingleVariableDeclaration", "DEL VariableDeclarationExpression", "DEL Assignment: =", "DEL PostfixExpression: ++", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: read", "DEL SimpleName: i", "DEL ForStatement", "DEL SimpleName: tmp", "DEL MethodInvocation", "DEL PrefixExpression: -", "DEL SimpleName: badInput", "DEL TryStatement", "DEL CastExpression", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: i", "DEL InfixExpression: !=", "DEL NumberLiteral: 1", "DEL SimpleName: read", "DEL CatchClause", "DEL SimpleName: badInput", "DEL ArrayAccess", "DEL ThrowStatement", "DEL SimpleName: i", "DEL PrimitiveType: int", "DEL PrimitiveType: byte", "DEL SimpleName: index", "DEL SimpleName: decodedInput", "DEL ExpressionStatement", "DEL Block", "DEL Assignment: ="]}, {"root": "DEL Block", "operations": ["DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: asInputStream", "DEL MethodInvocation", "DEL SimpleName: asCharInput", "DEL MethodInvocation", "DEL SimpleName: reader", "DEL Block", "DEL SimpleName: decodingStream"]}, {"root": "DEL SimpleType: ByteOutput", "operations": ["DEL SimpleName: ByteOutput", "DEL SimpleType: ByteOutput"]}, {"root": "DEL SimpleType: ByteInput", "operations": ["DEL SimpleType: ByteInput", "DEL SimpleName: ByteInput"]}, {"root": "DEL SimpleName: decodingStream", "operations": ["DEL SimpleName: decodingStream"]}, {"root": "DEL NullLiteral", "operations": ["DEL NullLiteral"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL SimpleName: StandardBaseEncoding", "operations": ["DEL SimpleName: StandardBaseEncoding"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL Modifier: private", "operations": ["DEL Modifier: private"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleType: StandardBaseEncoding", "DEL NullLiteral", "DEL SimpleName: alphabet", "DEL SimpleName: StandardBaseEncoding"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL SimpleName: padChar", "DEL ClassInstanceCreation", "DEL SimpleName: alphabet"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: upper", "DEL SimpleName: paddingChar"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleName: paddingChar", "DEL SimpleName: lower"]}, {"root": "DEL SimpleName: i", "operations": ["DEL SimpleName: i"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL Block"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL Modifier: static", "DEL SimpleType: CharOutput", "DEL AnonymousClassDeclaration", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL Block", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: separatingOutput", "DEL Block", "DEL SimpleName: write", "DEL Block", "DEL ReturnStatement", "DEL SingleVariableDeclaration"]}]}}, {"BaseEncoding_diff": {"operations": ["Insert TypeDeclaration: class(3022) into TypeDeclaration: class(4120) at 39", "Insert TypeDeclaration: class(3421) into TypeDeclaration: class(4120) at 40", "Insert MethodDeclaration(3647) into TypeDeclaration: class(4120) at 42", "Insert MethodDeclaration(3755) into TypeDeclaration: class(4120) at 43", "Update Modifier: final(359) to abstract", "Move VariableDeclarationStatement(567) into Block(534) at 3", "Update Modifier: final(660) to abstract", "Insert PrimitiveType: void(619) into MethodDeclaration(638) at 1", "Update SimpleName: encodingStream(737) to encodeTo", "Insert SingleVariableDeclaration(629) into MethodDeclaration(638) at 4", "Insert SingleVariableDeclaration(632) into MethodDeclaration(638) at 5", "Insert SingleVariableDeclaration(635) into MethodDeclaration(638) at 6", "Insert SimpleType: IOException(637) into MethodDeclaration(638) at 7", "Insert PrimitiveType: int(647) into MethodDeclaration(660) at 1", "Insert SimpleName: decodeTo(648) into MethodDeclaration(660) at 2", "Insert SingleVariableDeclaration(653) into MethodDeclaration(660) at 3", "Insert SimpleType: DecodingException(659) into MethodDeclaration(660) at 5", "Move SimpleType: BaseEncoding(1092) into FieldDeclaration(775) at 3", "Move SimpleType: BaseEncoding(864) into FieldDeclaration(832) at 3", "Move SimpleType: BaseEncoding(921) into FieldDeclaration(1002) at 3", "Insert SimpleName: StandardBaseEncoding(1572) into TypeDeclaration: class(2739) at 1", "Insert MethodDeclaration(1931) into TypeDeclaration: class(2739) at 10", "Insert MethodDeclaration(2076) into TypeDeclaration: class(2739) at 11", "Insert MethodDeclaration(2265) into TypeDeclaration: class(2739) at 13", "Insert MethodDeclaration(2681) into TypeDeclaration: class(2739) at 22", "Insert Modifier: static(2740) into TypeDeclaration: class(3022) at 0", "Insert Modifier: final(2741) into TypeDeclaration: class(3022) at 1", "Insert SimpleName: Base16Encoding(2742) into TypeDeclaration: class(3022) at 2", "Move SimpleType: StandardBaseEncoding(2326) into TypeDeclaration: class(3022) at 3", "Insert FieldDeclaration(2756) into TypeDeclaration: class(3022) at 4", "Insert MethodDeclaration(2775) into TypeDeclaration: class(3022) at 5", "Insert MethodDeclaration(2828) into TypeDeclaration: class(3022) at 6", "Insert MethodDeclaration(2902) into TypeDeclaration: class(3022) at 7", "Insert MethodDeclaration(2999) into TypeDeclaration: class(3022) at 8", "Insert MethodDeclaration(3021) into TypeDeclaration: class(3022) at 9", "Insert Modifier: static(3023) into TypeDeclaration: class(3421) at 0", "Insert Modifier: final(3024) into TypeDeclaration: class(3421) at 1", "Insert SimpleName: Base64Encoding(3025) into TypeDeclaration: class(3421) at 2", "Move SimpleType: StandardBaseEncoding(2234) into TypeDeclaration: class(3421) at 3", "Insert MethodDeclaration(3053) into TypeDeclaration: class(3421) at 4", "Insert MethodDeclaration(3076) into TypeDeclaration: class(3421) at 5", "Insert MethodDeclaration(3223) into TypeDeclaration: class(3421) at 6", "Insert MethodDeclaration(3397) into TypeDeclaration: class(3421) at 7", "Insert MethodDeclaration(3420) into TypeDeclaration: class(3421) at 8", "Insert SingleMemberAnnotation(3424) into MethodDeclaration(3524) at 0", "Update SimpleType: CharInput(2445) to Reader", "Update SimpleName: ignoringInput(2446) to ignoringReader", "Insert Modifier: static(3525) into MethodDeclaration(3647) at 0", "Insert SimpleType: Appendable(3527) into MethodDeclaration(3647) at 1", "Insert SimpleName: separatingAppendable(3528) into MethodDeclaration(3647) at 2", "Insert SingleVariableDeclaration(3533) into MethodDeclaration(3647) at 3", "Move SingleVariableDeclaration(2532) into MethodDeclaration(3647) at 4", "Move SingleVariableDeclaration(2536) into MethodDeclaration(3647) at 5", "Insert Block(3646) into MethodDeclaration(3647) at 6", "Insert SingleMemberAnnotation(3650) into MethodDeclaration(3755) at 0", "Insert Modifier: static(3651) into MethodDeclaration(3755) at 1", "Insert SimpleType: Writer(3653) into MethodDeclaration(3755) at 2", "Insert SimpleName: separatingWriter(3654) into MethodDeclaration(3755) at 3", "Insert SingleVariableDeclaration(3659) into MethodDeclaration(3755) at 4", "Insert SingleVariableDeclaration(3664) into MethodDeclaration(3755) at 5", "Insert SingleVariableDeclaration(3668) into MethodDeclaration(3755) at 6", "Insert Block(3754) into MethodDeclaration(3755) at 7", "Insert MethodDeclaration(3948) into TypeDeclaration: class(4119) at 12", "Insert MethodDeclaration(3988) into TypeDeclaration: class(4119) at 14", "Insert TryStatement(290) into Block(295) at 3", "Update SimpleType: CharOutput(739) to Appendable", "Update SimpleName: charOutput(740) to target", "Insert ArrayType: byte[](627) into SingleVariableDeclaration(629) at 0", "Insert SimpleName: bytes(628) into SingleVariableDeclaration(629) at 1", "Insert PrimitiveType: int(630) into SingleVariableDeclaration(632) at 0", "Insert SimpleName: off(631) into SingleVariableDeclaration(632) at 1", "Insert PrimitiveType: int(633) into SingleVariableDeclaration(635) at 0", "Insert SimpleName: len(634) into SingleVariableDeclaration(635) at 1", "Insert SimpleName: IOException(636) into SimpleType: IOException(637) at 0", "Insert ArrayType: byte[](651) into SingleVariableDeclaration(653) at 0", "Insert SimpleName: target(652) into SingleVariableDeclaration(653) at 1", "Update SimpleType: CharInput(755) to CharSequence", "Update SimpleName: charInput(756) to chars", "Insert SimpleName: DecodingException(658) into SimpleType: DecodingException(659) at 0", "Insert SimpleType: DecodingException(1334) into MethodDeclaration(1371) at 3", "Insert SingleMemberAnnotation(1695) into MethodDeclaration(1868) at 0", "Insert Modifier: public(1698) into MethodDeclaration(1868) at 2", "Update SimpleType: ByteOutput(1798) to OutputStream", "Insert MarkerAnnotation(1870) into MethodDeclaration(1931) at 0", "Insert PrimitiveType: void(1871) into MethodDeclaration(1931) at 1", "Insert SimpleName: encodeTo(1872) into MethodDeclaration(1931) at 2", "Insert SingleVariableDeclaration(1876) into MethodDeclaration(1931) at 3", "Insert SingleVariableDeclaration(1881) into MethodDeclaration(1931) at 4", "Insert SingleVariableDeclaration(1884) into MethodDeclaration(1931) at 5", "Insert SingleVariableDeclaration(1887) into MethodDeclaration(1931) at 6", "Insert SimpleType: IOException(1889) into MethodDeclaration(1931) at 7", "Insert Block(1930) into MethodDeclaration(1931) at 8", "Insert PrimitiveType: void(1932) into MethodDeclaration(2076) at 0", "Insert SimpleName: encodeChunkTo(1933) into MethodDeclaration(2076) at 1", "Insert SingleVariableDeclaration(1937) into MethodDeclaration(2076) at 2", "Insert SingleVariableDeclaration(1942) into MethodDeclaration(2076) at 3", "Insert SingleVariableDeclaration(1945) into MethodDeclaration(2076) at 4", "Insert SingleVariableDeclaration(1948) into MethodDeclaration(2076) at 5", "Move SimpleType: IOException(323) into MethodDeclaration(2076) at 6", "Insert Block(2075) into MethodDeclaration(2076) at 7", "Insert MarkerAnnotation(2101) into MethodDeclaration(2265) at 0", "Insert PrimitiveType: int(2102) into MethodDeclaration(2265) at 1", "Insert SimpleName: decodeTo(2103) into MethodDeclaration(2265) at 2", "Insert SingleVariableDeclaration(2108) into MethodDeclaration(2265) at 3", "Insert SingleVariableDeclaration(2112) into MethodDeclaration(2265) at 4", "Insert SimpleType: DecodingException(2114) into MethodDeclaration(2265) at 5", "Insert Block(2264) into MethodDeclaration(2265) at 6", "Insert SingleMemberAnnotation(2268) into MethodDeclaration(2464) at 0", "Insert Modifier: public(2271) into MethodDeclaration(2464) at 2", "Update SimpleType: ByteInput(1993) to InputStream", "Insert SimpleType: BaseEncoding(2662) into MethodDeclaration(2681) at 0", "Insert SimpleName: newInstance(2663) into MethodDeclaration(2681) at 1", "Insert SingleVariableDeclaration(2667) into MethodDeclaration(2681) at 2", "Insert SingleVariableDeclaration(2673) into MethodDeclaration(2681) at 3", "Insert Block(2680) into MethodDeclaration(2681) at 4", "Insert Modifier: final(2745) into FieldDeclaration(2756) at 0", "Insert ArrayType: char[](2748) into FieldDeclaration(2756) at 1", "Insert VariableDeclarationFragment(2755) into FieldDeclaration(2756) at 2", "Insert SimpleName: Base16Encoding(2757) into MethodDeclaration(2775) at 0", "Insert SingleVariableDeclaration(2761) into MethodDeclaration(2775) at 1", "Insert SingleVariableDeclaration(2765) into MethodDeclaration(2775) at 2", "Insert Block(2774) into MethodDeclaration(2775) at 3", "Insert Modifier: private(2776) into MethodDeclaration(2828) at 0", "Insert SimpleName: Base16Encoding(2777) into MethodDeclaration(2828) at 1", "Insert SingleVariableDeclaration(2781) into MethodDeclaration(2828) at 2", "Insert Block(2827) into MethodDeclaration(2828) at 3", "Move MarkerAnnotation(2809) into MethodDeclaration(2902) at 0", "Insert PrimitiveType: void(2831) into MethodDeclaration(2902) at 1", "Insert SimpleName: encodeTo(2832) into MethodDeclaration(2902) at 2", "Insert SingleVariableDeclaration(2836) into MethodDeclaration(2902) at 3", "Insert SingleVariableDeclaration(2841) into MethodDeclaration(2902) at 4", "Insert SingleVariableDeclaration(2844) into MethodDeclaration(2902) at 5", "Insert SingleVariableDeclaration(2847) into MethodDeclaration(2902) at 6", "Insert SimpleType: IOException(2849) into MethodDeclaration(2902) at 7", "Insert Block(2901) into MethodDeclaration(2902) at 8", "Move MarkerAnnotation(2774) into MethodDeclaration(2999) at 0", "Insert PrimitiveType: int(2905) into MethodDeclaration(2999) at 1", "Insert SimpleName: decodeTo(2906) into MethodDeclaration(2999) at 2", "Insert SingleVariableDeclaration(2911) into MethodDeclaration(2999) at 3", "Insert SingleVariableDeclaration(2915) into MethodDeclaration(2999) at 4", "Insert SimpleType: DecodingException(2917) into MethodDeclaration(2999) at 5", "Insert Block(2998) into MethodDeclaration(2999) at 6", "Insert MarkerAnnotation(3001) into MethodDeclaration(3021) at 0", "Insert SimpleType: BaseEncoding(3003) into MethodDeclaration(3021) at 1", "Insert SimpleName: newInstance(3004) into MethodDeclaration(3021) at 2", "Insert SingleVariableDeclaration(3008) into MethodDeclaration(3021) at 3", "Insert SingleVariableDeclaration(3014) into MethodDeclaration(3021) at 4", "Insert Block(3020) into MethodDeclaration(3021) at 5", "Insert SimpleName: Base64Encoding(3028) into MethodDeclaration(3053) at 0", "Insert SingleVariableDeclaration(3032) into MethodDeclaration(3053) at 1", "Insert SingleVariableDeclaration(3036) into MethodDeclaration(3053) at 2", "Insert SingleVariableDeclaration(3042) into MethodDeclaration(3053) at 3", "Insert Block(3052) into MethodDeclaration(3053) at 4", "Update Modifier: public(2560) to private", "Move Modifier: public(2560) into MethodDeclaration(3076) at 0", "Insert SimpleName: Base64Encoding(3055) into MethodDeclaration(3076) at 1", "Insert SingleVariableDeclaration(3059) into MethodDeclaration(3076) at 2", "Insert SingleVariableDeclaration(3065) into MethodDeclaration(3076) at 3", "Insert Block(3075) into MethodDeclaration(3076) at 4", "Insert MarkerAnnotation(3078) into MethodDeclaration(3223) at 0", "Move PrimitiveType: void(2561) into MethodDeclaration(3223) at 1", "Insert SimpleName: encodeTo(3080) into MethodDeclaration(3223) at 2", "Insert SingleVariableDeclaration(3084) into MethodDeclaration(3223) at 3", "Insert SingleVariableDeclaration(3089) into MethodDeclaration(3223) at 4", "Insert SingleVariableDeclaration(3092) into MethodDeclaration(3223) at 5", "Insert SingleVariableDeclaration(3095) into MethodDeclaration(3223) at 6", "Insert SimpleType: IOException(3097) into MethodDeclaration(3223) at 7", "Insert Block(3222) into MethodDeclaration(3223) at 8", "Insert MarkerAnnotation(3225) into MethodDeclaration(3397) at 0", "Insert PrimitiveType: int(3226) into MethodDeclaration(3397) at 1", "Insert SimpleName: decodeTo(3227) into MethodDeclaration(3397) at 2", "Insert SingleVariableDeclaration(3232) into MethodDeclaration(3397) at 3", "Insert SingleVariableDeclaration(3236) into MethodDeclaration(3397) at 4", "Insert SimpleType: DecodingException(3238) into MethodDeclaration(3397) at 5", "Insert Block(3396) into MethodDeclaration(3397) at 6", "Insert MarkerAnnotation(3399) into MethodDeclaration(3420) at 0", "Insert SimpleType: BaseEncoding(3401) into MethodDeclaration(3420) at 1", "Insert SimpleName: newInstance(3402) into MethodDeclaration(3420) at 2", "Insert SingleVariableDeclaration(3406) into MethodDeclaration(3420) at 3", "Insert SingleVariableDeclaration(3412) into MethodDeclaration(3420) at 4", "Insert Block(3419) into MethodDeclaration(3420) at 5", "Insert SimpleName: GwtIncompatible(3422) into SingleMemberAnnotation(3424) at 0", "Insert StringLiteral: \"Reader\"(3423) into SingleMemberAnnotation(3424) at 1", "Update SimpleName: CharInput(2444) to Reader", "Update SimpleType: CharInput(2449) to Reader", "Insert SimpleName: Appendable(3526) into SimpleType: Appendable(3527) at 0", "Insert Modifier: final(3529) into SingleVariableDeclaration(3533) at 0", "Insert SimpleType: Appendable(3531) into SingleVariableDeclaration(3533) at 1", "Insert SimpleName: delegate(3532) into SingleVariableDeclaration(3533) at 2", "Move ExpressionStatement(2540) into Block(3646) at 0", "Move ExpressionStatement(2544) into Block(3646) at 1", "Move ExpressionStatement(2550) into Block(3646) at 2", "Insert ReturnStatement(3645) into Block(3646) at 3", "Insert SimpleName: GwtIncompatible(3648) into SingleMemberAnnotation(3650) at 0", "Insert StringLiteral: \"Writer\"(3649) into SingleMemberAnnotation(3650) at 1", "Insert SimpleName: Writer(3652) into SimpleType: Writer(3653) at 0", "Insert Modifier: final(3655) into SingleVariableDeclaration(3659) at 0", "Insert SimpleType: Writer(3657) into SingleVariableDeclaration(3659) at 1", "Insert SimpleName: delegate(3658) into SingleVariableDeclaration(3659) at 2", "Insert Modifier: final(3660) into SingleVariableDeclaration(3664) at 0", "Insert SimpleType: String(3662) into SingleVariableDeclaration(3664) at 1", "Insert SimpleName: separator(3663) into SingleVariableDeclaration(3664) at 2", "Insert Modifier: final(3665) into SingleVariableDeclaration(3668) at 0", "Insert PrimitiveType: int(3666) into SingleVariableDeclaration(3668) at 1", "Insert SimpleName: afterEveryChars(3667) into SingleVariableDeclaration(3668) at 2", "Insert VariableDeclarationStatement(3679) into Block(3754) at 0", "Insert ReturnStatement(3753) into Block(3754) at 1", "Insert SingleMemberAnnotation(3891) into MethodDeclaration(3913) at 0", "Insert MarkerAnnotation(3893) into MethodDeclaration(3913) at 1", "Insert Modifier: public(3894) into MethodDeclaration(3913) at 2", "Update SimpleType: ByteOutput(2776) to OutputStream", "Insert MarkerAnnotation(3915) into MethodDeclaration(3948) at 0", "Insert PrimitiveType: void(3916) into MethodDeclaration(3948) at 1", "Insert SimpleName: encodeTo(3917) into MethodDeclaration(3948) at 2", "Insert SingleVariableDeclaration(3921) into MethodDeclaration(3948) at 3", "Insert SingleVariableDeclaration(3926) into MethodDeclaration(3948) at 4", "Insert SingleVariableDeclaration(3929) into MethodDeclaration(3948) at 5", "Insert SingleVariableDeclaration(3932) into MethodDeclaration(3948) at 6", "Insert SimpleType: IOException(3934) into MethodDeclaration(3948) at 7", "Insert Block(3947) into MethodDeclaration(3948) at 8", "Insert MarkerAnnotation(3964) into MethodDeclaration(3988) at 0", "Insert PrimitiveType: int(3965) into MethodDeclaration(3988) at 1", "Insert SimpleName: decodeTo(3966) into MethodDeclaration(3988) at 2", "Insert SingleVariableDeclaration(3971) into MethodDeclaration(3988) at 3", "Insert SingleVariableDeclaration(3975) into MethodDeclaration(3988) at 4", "Insert SimpleType: DecodingException(3977) into MethodDeclaration(3988) at 5", "Insert Block(3987) into MethodDeclaration(3988) at 6", "Insert SingleMemberAnnotation(3991) into MethodDeclaration(4012) at 0", "Insert MarkerAnnotation(3993) into MethodDeclaration(4012) at 1", "Insert Modifier: public(3994) into MethodDeclaration(4012) at 2", "Update SimpleType: ByteInput(2811) to InputStream", "Update SimpleType: CharOutput(279) to StringBuilder", "Insert Block(278) into TryStatement(290) at 0", "Move CatchClause(634) into TryStatement(290) at 1", "Insert PrimitiveType: int(521) into VariableDeclarationStatement(528) at 0", "Update SimpleName: CharOutput(738) to Appendable", "Insert PrimitiveType: byte(625) into ArrayType: byte[](627) at 0", "Insert Dimension(626) into ArrayType: byte[](627) at 1", "Insert PrimitiveType: byte(649) into ArrayType: byte[](651) at 0", "Insert Dimension(650) into ArrayType: byte[](651) at 1", "Update SimpleName: CharInput(754) to CharSequence", "Update SimpleType: StandardBaseEncoding(867) to Base64Encoding", "Update SimpleType: StandardBaseEncoding(924) to Base64Encoding", "Update SimpleType: StandardBaseEncoding(1095) to Base16Encoding", "Insert SimpleName: DecodingException(1333) into SimpleType: DecodingException(1334) at 0", "Insert SimpleName: GwtIncompatible(1693) into SingleMemberAnnotation(1695) at 0", "Insert StringLiteral: \"Writer,OutputStream\"(1694) into SingleMemberAnnotation(1695) at 1", "Update SimpleName: ByteOutput(1797) to OutputStream", "Update SimpleType: CharOutput(1802) to Writer", "Insert SimpleName: Override(1869) into MarkerAnnotation(1870) at 0", "Insert SimpleType: Appendable(1874) into SingleVariableDeclaration(1876) at 0", "Insert SimpleName: target(1875) into SingleVariableDeclaration(1876) at 1", "Insert ArrayType: byte[](1879) into SingleVariableDeclaration(1881) at 0", "Insert SimpleName: bytes(1880) into SingleVariableDeclaration(1881) at 1", "Insert PrimitiveType: int(1882) into SingleVariableDeclaration(1884) at 0", "Insert SimpleName: off(1883) into SingleVariableDeclaration(1884) at 1", "Insert PrimitiveType: int(1885) into SingleVariableDeclaration(1887) at 0", "Insert SimpleName: len(1886) into SingleVariableDeclaration(1887) at 1", "Insert SimpleName: IOException(1888) into SimpleType: IOException(1889) at 0", "Insert ExpressionStatement(1893) into Block(1930) at 0", "Insert ExpressionStatement(1901) into Block(1930) at 1", "Insert ForStatement(1929) into Block(1930) at 2", "Insert SimpleType: Appendable(1935) into SingleVariableDeclaration(1937) at 0", "Insert SimpleName: target(1936) into SingleVariableDeclaration(1937) at 1", "Insert ArrayType: byte[](1940) into SingleVariableDeclaration(1942) at 0", "Insert SimpleName: bytes(1941) into SingleVariableDeclaration(1942) at 1", "Insert PrimitiveType: int(1943) into SingleVariableDeclaration(1945) at 0", "Insert SimpleName: off(1944) into SingleVariableDeclaration(1945) at 1", "Insert PrimitiveType: int(1946) into SingleVariableDeclaration(1948) at 0", "Insert SimpleName: len(1947) into SingleVariableDeclaration(1948) at 1", "Insert ExpressionStatement(1954) into Block(2075) at 0", "Insert ExpressionStatement(1962) into Block(2075) at 1", "Insert ExpressionStatement(1968) into Block(2075) at 2", "Insert VariableDeclarationStatement(1973) into Block(2075) at 3", "Insert ForStatement(1999) into Block(2075) at 4", "Insert VariableDeclarationStatement(2012) into Block(2075) at 5", "Insert VariableDeclarationStatement(2017) into Block(2075) at 6", "Insert WhileStatement(2051) into Block(2075) at 7", "Insert IfStatement(2074) into Block(2075) at 8", "Insert SimpleName: Override(2100) into MarkerAnnotation(2101) at 0", "Insert ArrayType: byte[](2106) into SingleVariableDeclaration(2108) at 0", "Insert SimpleName: target(2107) into SingleVariableDeclaration(2108) at 1", "Insert SimpleType: CharSequence(2110) into SingleVariableDeclaration(2112) at 0", "Insert SimpleName: chars(2111) into SingleVariableDeclaration(2112) at 1", "Insert SimpleName: DecodingException(2113) into SimpleType: DecodingException(2114) at 0", "Insert ExpressionStatement(2118) into Block(2264) at 0", "Insert ExpressionStatement(2122) into Block(2264) at 1", "Insert ExpressionStatement(2130) into Block(2264) at 2", "Insert IfStatement(2148) into Block(2264) at 3", "Insert VariableDeclarationStatement(2153) into Block(2264) at 4", "Insert ForStatement(2261) into Block(2264) at 5", "Insert ReturnStatement(2263) into Block(2264) at 6", "Insert SimpleName: GwtIncompatible(2266) into SingleMemberAnnotation(2268) at 0", "Insert StringLiteral: \"Reader,InputStream\"(2267) into SingleMemberAnnotation(2268) at 1", "Update SimpleName: ByteInput(1992) to InputStream", "Update SimpleType: CharInput(1997) to Reader", "Insert SimpleName: BaseEncoding(2661) into SimpleType: BaseEncoding(2662) at 0", "Insert SimpleType: Alphabet(2665) into SingleVariableDeclaration(2667) at 0", "Insert SimpleName: alphabet(2666) into SingleVariableDeclaration(2667) at 1", "Insert MarkerAnnotation(2669) into SingleVariableDeclaration(2673) at 0", "Insert SimpleType: Character(2671) into SingleVariableDeclaration(2673) at 1", "Insert SimpleName: paddingChar(2672) into SingleVariableDeclaration(2673) at 2", "Insert ReturnStatement(2679) into Block(2680) at 0", "Insert PrimitiveType: char(2746) into ArrayType: char[](2748) at 0", "Insert Dimension(2747) into ArrayType: char[](2748) at 1", "Insert SimpleName: encoding(2749) into VariableDeclarationFragment(2755) at 0", "Insert ArrayCreation(2754) into VariableDeclarationFragment(2755) at 1", "Insert SimpleType: String(2759) into SingleVariableDeclaration(2761) at 0", "Insert SimpleName: name(2760) into SingleVariableDeclaration(2761) at 1", "Insert SimpleType: String(2763) into SingleVariableDeclaration(2765) at 0", "Insert SimpleName: alphabetChars(2764) into SingleVariableDeclaration(2765) at 1", "Insert ConstructorInvocation(2773) into Block(2774) at 0", "Insert SimpleType: Alphabet(2779) into SingleVariableDeclaration(2781) at 0", "Insert SimpleName: alphabet(2780) into SingleVariableDeclaration(2781) at 1", "Insert SuperConstructorInvocation(2784) into Block(2827) at 0", "Insert ExpressionStatement(2790) into Block(2827) at 1", "Insert ForStatement(2826) into Block(2827) at 2", "Insert SimpleType: Appendable(2834) into SingleVariableDeclaration(2836) at 0", "Insert SimpleName: target(2835) into SingleVariableDeclaration(2836) at 1", "Insert ArrayType: byte[](2839) into SingleVariableDeclaration(2841) at 0", "Insert SimpleName: bytes(2840) into SingleVariableDeclaration(2841) at 1", "Insert PrimitiveType: int(2842) into SingleVariableDeclaration(2844) at 0", "Insert SimpleName: off(2843) into SingleVariableDeclaration(2844) at 1", "Insert PrimitiveType: int(2845) into SingleVariableDeclaration(2847) at 0", "Insert SimpleName: len(2846) into SingleVariableDeclaration(2847) at 1", "Insert SimpleName: IOException(2848) into SimpleType: IOException(2849) at 0", "Insert ExpressionStatement(2853) into Block(2901) at 0", "Insert ExpressionStatement(2861) into Block(2901) at 1", "Insert ForStatement(2900) into Block(2901) at 2", "Insert ArrayType: byte[](2909) into SingleVariableDeclaration(2911) at 0", "Insert SimpleName: target(2910) into SingleVariableDeclaration(2911) at 1", "Insert SimpleType: CharSequence(2913) into SingleVariableDeclaration(2915) at 0", "Insert SimpleName: chars(2914) into SingleVariableDeclaration(2915) at 1", "Insert SimpleName: DecodingException(2916) into SimpleType: DecodingException(2917) at 0", "Insert ExpressionStatement(2921) into Block(2998) at 0", "Insert ExpressionStatement(2925) into Block(2998) at 1", "Insert IfStatement(2943) into Block(2998) at 2", "Insert VariableDeclarationStatement(2948) into Block(2998) at 3", "Insert ForStatement(2995) into Block(2998) at 4", "Insert ReturnStatement(2997) into Block(2998) at 5", "Insert SimpleName: Override(3000) into MarkerAnnotation(3001) at 0", "Insert SimpleName: BaseEncoding(3002) into SimpleType: BaseEncoding(3003) at 0", "Insert SimpleType: Alphabet(3006) into SingleVariableDeclaration(3008) at 0", "Insert SimpleName: alphabet(3007) into SingleVariableDeclaration(3008) at 1", "Insert MarkerAnnotation(3010) into SingleVariableDeclaration(3014) at 0", "Insert SimpleType: Character(3012) into SingleVariableDeclaration(3014) at 1", "Insert SimpleName: paddingChar(3013) into SingleVariableDeclaration(3014) at 2", "Insert ReturnStatement(3019) into Block(3020) at 0", "Insert SimpleType: String(3030) into SingleVariableDeclaration(3032) at 0", "Insert SimpleName: name(3031) into SingleVariableDeclaration(3032) at 1", "Insert SimpleType: String(3034) into SingleVariableDeclaration(3036) at 0", "Insert SimpleName: alphabetChars(3035) into SingleVariableDeclaration(3036) at 1", "Insert MarkerAnnotation(3038) into SingleVariableDeclaration(3042) at 0", "Update SimpleType: CharOutput(2525) to Character", "Move SimpleType: CharOutput(2525) into SingleVariableDeclaration(3042) at 1", "Update SimpleName: delegate(2526) to paddingChar", "Move SimpleName: delegate(2526) into SingleVariableDeclaration(3042) at 2", "Insert ConstructorInvocation(3051) into Block(3052) at 0", "Insert SimpleType: Alphabet(3057) into SingleVariableDeclaration(3059) at 0", "Insert SimpleName: alphabet(3058) into SingleVariableDeclaration(3059) at 1", "Insert MarkerAnnotation(3061) into SingleVariableDeclaration(3065) at 0", "Insert SimpleType: Character(3063) into SingleVariableDeclaration(3065) at 1", "Insert SimpleName: paddingChar(3064) into SingleVariableDeclaration(3065) at 2", "Insert SuperConstructorInvocation(3068) into Block(3075) at 0", "Insert ExpressionStatement(3074) into Block(3075) at 1", "Insert SimpleName: Override(3077) into MarkerAnnotation(3078) at 0", "Insert SimpleType: Appendable(3082) into SingleVariableDeclaration(3084) at 0", "Insert SimpleName: target(3083) into SingleVariableDeclaration(3084) at 1", "Insert ArrayType: byte[](3087) into SingleVariableDeclaration(3089) at 0", "Insert SimpleName: bytes(3088) into SingleVariableDeclaration(3089) at 1", "Insert PrimitiveType: int(3090) into SingleVariableDeclaration(3092) at 0", "Insert SimpleName: off(3091) into SingleVariableDeclaration(3092) at 1", "Insert PrimitiveType: int(3093) into SingleVariableDeclaration(3095) at 0", "Insert SimpleName: len(3094) into SingleVariableDeclaration(3095) at 1", "Insert SimpleName: IOException(3096) into SimpleType: IOException(3097) at 0", "Insert ExpressionStatement(3101) into Block(3222) at 0", "Insert ExpressionStatement(3109) into Block(3222) at 1", "Insert VariableDeclarationStatement(3114) into Block(3222) at 2", "Insert ForStatement(3203) into Block(3222) at 3", "Insert IfStatement(3221) into Block(3222) at 4", "Insert SimpleName: Override(3224) into MarkerAnnotation(3225) at 0", "Insert ArrayType: byte[](3230) into SingleVariableDeclaration(3232) at 0", "Insert SimpleName: target(3231) into SingleVariableDeclaration(3232) at 1", "Insert SimpleType: CharSequence(3234) into SingleVariableDeclaration(3236) at 0", "Insert SimpleName: chars(3235) into SingleVariableDeclaration(3236) at 1", "Insert SimpleName: DecodingException(3237) into SimpleType: DecodingException(3238) at 0", "Insert ExpressionStatement(3242) into Block(3396) at 0", "Insert ExpressionStatement(3246) into Block(3396) at 1", "Insert ExpressionStatement(3254) into Block(3396) at 2", "Insert IfStatement(3272) into Block(3396) at 3", "Insert VariableDeclarationStatement(3277) into Block(3396) at 4", "Move ForStatement(2592) into Block(3396) at 5", "Insert ReturnStatement(3395) into Block(3396) at 6", "Insert SimpleName: Override(3398) into MarkerAnnotation(3399) at 0", "Insert SimpleName: BaseEncoding(3400) into SimpleType: BaseEncoding(3401) at 0", "Insert SimpleType: Alphabet(3404) into SingleVariableDeclaration(3406) at 0", "Insert SimpleName: alphabet(3405) into SingleVariableDeclaration(3406) at 1", "Insert MarkerAnnotation(3408) into SingleVariableDeclaration(3412) at 0", "Insert SimpleType: Character(3410) into SingleVariableDeclaration(3412) at 1", "Insert SimpleName: paddingChar(3411) into SingleVariableDeclaration(3412) at 2", "Insert ReturnStatement(3418) into Block(3419) at 0", "Update SimpleName: CharInput(2448) to Reader", "Insert SimpleName: Appendable(3530) into SimpleType: Appendable(3531) at 0", "Insert ClassInstanceCreation(3644) into ReturnStatement(3645) at 0", "Insert SimpleName: Writer(3656) into SimpleType: Writer(3657) at 0", "Insert SimpleName: String(3661) into SimpleType: String(3662) at 0", "Insert Modifier: final(3669) into VariableDeclarationStatement(3679) at 0", "Insert SimpleType: Appendable(3671) into VariableDeclarationStatement(3679) at 1", "Insert VariableDeclarationFragment(3678) into VariableDeclarationStatement(3679) at 2", "Insert ClassInstanceCreation(3752) into ReturnStatement(3753) at 0", "Insert SimpleName: GwtIncompatible(3889) into SingleMemberAnnotation(3891) at 0", "Insert StringLiteral: \"Writer,OutputStream\"(3890) into SingleMemberAnnotation(3891) at 1", "Insert SimpleName: Override(3892) into MarkerAnnotation(3893) at 0", "Update SimpleName: ByteOutput(2775) to OutputStream", "Update SimpleType: CharOutput(2780) to Writer", "Insert SimpleName: Override(3914) into MarkerAnnotation(3915) at 0", "Insert SimpleType: Appendable(3919) into SingleVariableDeclaration(3921) at 0", "Insert SimpleName: target(3920) into SingleVariableDeclaration(3921) at 1", "Insert ArrayType: byte[](3924) into SingleVariableDeclaration(3926) at 0", "Insert SimpleName: bytes(3925) into SingleVariableDeclaration(3926) at 1", "Insert PrimitiveType: int(3927) into SingleVariableDeclaration(3929) at 0", "Insert SimpleName: off(3928) into SingleVariableDeclaration(3929) at 1", "Insert PrimitiveType: int(3930) into SingleVariableDeclaration(3932) at 0", "Insert SimpleName: len(3931) into SingleVariableDeclaration(3932) at 1", "Insert SimpleName: IOException(3933) into SimpleType: IOException(3934) at 0", "Insert ExpressionStatement(3946) into Block(3947) at 0", "Insert SimpleName: Override(3963) into MarkerAnnotation(3964) at 0", "Insert ArrayType: byte[](3969) into SingleVariableDeclaration(3971) at 0", "Insert SimpleName: target(3970) into SingleVariableDeclaration(3971) at 1", "Insert SimpleType: CharSequence(3973) into SingleVariableDeclaration(3975) at 0", "Insert SimpleName: chars(3974) into SingleVariableDeclaration(3975) at 1", "Insert SimpleName: DecodingException(3976) into SimpleType: DecodingException(3977) at 0", "Insert ReturnStatement(3986) into Block(3987) at 0", "Insert SimpleName: GwtIncompatible(3989) into SingleMemberAnnotation(3991) at 0", "Insert StringLiteral: \"Reader,InputStream\"(3990) into SingleMemberAnnotation(3991) at 1", "Insert SimpleName: Override(3992) into MarkerAnnotation(3993) at 0", "Update SimpleName: ByteInput(2810) to InputStream", "Update SimpleType: CharInput(2815) to Reader", "Update SimpleName: input(2816) to reader", "Update SimpleName: CharOutput(278) to StringBuilder", "Insert ClassInstanceCreation(268) into VariableDeclarationFragment(269) at 1", "Insert ExpressionStatement(277) into Block(278) at 0", "Update SimpleName: decodedInput(560) to len", "Update SimpleName: index(638) to len", "Update SimpleName: StandardBaseEncoding(866) to Base64Encoding", "Update SimpleName: StandardBaseEncoding(923) to Base64Encoding", "Update SimpleName: StandardBaseEncoding(1094) to Base16Encoding", "Update SimpleName: CharOutput(1801) to Writer", "Insert SimpleName: Appendable(1873) into SimpleType: Appendable(1874) at 0", "Insert PrimitiveType: byte(1877) into ArrayType: byte[](1879) at 0", "Insert Dimension(1878) into ArrayType: byte[](1879) at 1", "Insert MethodInvocation(1892) into ExpressionStatement(1893) at 0", "Insert MethodInvocation(1900) into ExpressionStatement(1901) at 0", "Move VariableDeclarationExpression(300) into ForStatement(1929) at 0", "Move InfixExpression: <(303) into ForStatement(1929) at 1", "Insert Assignment: +=(1912) into ForStatement(1929) at 2", "Insert Block(1928) into ForStatement(1929) at 3", "Insert SimpleName: Appendable(1934) into SimpleType: Appendable(1935) at 0", "Insert PrimitiveType: byte(1938) into ArrayType: byte[](1940) at 0", "Insert Dimension(1939) into ArrayType: byte[](1940) at 1", "Insert MethodInvocation(1953) into ExpressionStatement(1954) at 0", "Insert MethodInvocation(1961) into ExpressionStatement(1962) at 0", "Insert MethodInvocation(1967) into ExpressionStatement(1968) at 0", "Insert PrimitiveType: long(1969) into VariableDeclarationStatement(1973) at 0", "Insert VariableDeclarationFragment(1972) into VariableDeclarationStatement(1973) at 1", "Insert VariableDeclarationExpression(1978) into ForStatement(1999) at 0", "Insert InfixExpression: <(1981) into ForStatement(1999) at 1", "Insert PrefixExpression: ++(1983) into ForStatement(1999) at 2", "Insert Block(1998) into ForStatement(1999) at 3", "Insert Modifier: final(2000) into VariableDeclarationStatement(2012) at 0", "Insert PrimitiveType: int(2001) into VariableDeclarationStatement(2012) at 1", "Insert VariableDeclarationFragment(2011) into VariableDeclarationStatement(2012) at 2", "Insert PrimitiveType: int(2013) into VariableDeclarationStatement(2017) at 0", "Insert VariableDeclarationFragment(2016) into VariableDeclarationStatement(2017) at 1", "Insert InfixExpression: <(2022) into WhileStatement(2051) at 0", "Insert Block(2050) into WhileStatement(2051) at 1", "Insert InfixExpression: !=(2054) into IfStatement(2074) at 0", "Insert Block(2073) into IfStatement(2074) at 1", "Insert PrimitiveType: byte(2104) into ArrayType: byte[](2106) at 0", "Insert Dimension(2105) into ArrayType: byte[](2106) at 1", "Insert SimpleName: CharSequence(2109) into SimpleType: CharSequence(2110) at 0", "Insert MethodInvocation(2117) into ExpressionStatement(2118) at 0", "Insert MethodInvocation(2121) into ExpressionStatement(2122) at 0", "Insert Assignment: =(2129) into ExpressionStatement(2130) at 0", "Insert PrefixExpression: !(2137) into IfStatement(2148) at 0", "Insert Block(2147) into IfStatement(2148) at 1", "Insert PrimitiveType: int(2149) into VariableDeclarationStatement(2153) at 0", "Insert VariableDeclarationFragment(2152) into VariableDeclarationStatement(2153) at 1", "Insert VariableDeclarationExpression(2158) into ForStatement(2261) at 0", "Insert InfixExpression: <(2163) into ForStatement(2261) at 1", "Insert Assignment: +=(2166) into ForStatement(2261) at 2", "Insert Block(2260) into ForStatement(2261) at 3", "Insert SimpleName: bytesWritten(2262) into ReturnStatement(2263) at 0", "Update SimpleName: CharInput(1996) to Reader", "Insert SimpleName: Alphabet(2664) into SimpleType: Alphabet(2665) at 0", "Insert SimpleName: Nullable(2668) into MarkerAnnotation(2669) at 0", "Insert SimpleName: Character(2670) into SimpleType: Character(2671) at 0", "Insert ClassInstanceCreation(2678) into ReturnStatement(2679) at 0", "Insert ArrayType: char[](2752) into ArrayCreation(2754) at 0", "Insert NumberLiteral: 512(2753) into ArrayCreation(2754) at 1", "Insert SimpleName: String(2758) into SimpleType: String(2759) at 0", "Insert SimpleName: String(2762) into SimpleType: String(2763) at 0", "Insert ClassInstanceCreation(2772) into ConstructorInvocation(2773) at 0", "Insert SimpleName: Alphabet(2778) into SimpleType: Alphabet(2779) at 0", "Insert SimpleName: alphabet(2782) into SuperConstructorInvocation(2784) at 0", "Insert NullLiteral(2783) into SuperConstructorInvocation(2784) at 1", "Insert MethodInvocation(2789) into ExpressionStatement(2790) at 0", "Move VariableDeclarationExpression(2575) into ForStatement(2826) at 0", "Insert InfixExpression: <(2798) into ForStatement(2826) at 1", "Insert PrefixExpression: ++(2800) into ForStatement(2826) at 2", "Insert Block(2825) into ForStatement(2826) at 3", "Insert SimpleName: Appendable(2833) into SimpleType: Appendable(2834) at 0", "Insert PrimitiveType: byte(2837) into ArrayType: byte[](2839) at 0", "Insert Dimension(2838) into ArrayType: byte[](2839) at 1", "Insert MethodInvocation(2852) into ExpressionStatement(2853) at 0", "Insert MethodInvocation(2860) into ExpressionStatement(2861) at 0", "Insert VariableDeclarationExpression(2866) into ForStatement(2900) at 0", "Insert InfixExpression: <(2869) into ForStatement(2900) at 1", "Insert PrefixExpression: ++(2871) into ForStatement(2900) at 2", "Insert Block(2899) into ForStatement(2900) at 3", "Insert PrimitiveType: byte(2907) into ArrayType: byte[](2909) at 0", "Insert Dimension(2908) into ArrayType: byte[](2909) at 1", "Insert SimpleName: CharSequence(2912) into SimpleType: CharSequence(2913) at 0", "Insert MethodInvocation(2920) into ExpressionStatement(2921) at 0", "Insert MethodInvocation(2924) into ExpressionStatement(2925) at 0", "Insert InfixExpression: ==(2932) into IfStatement(2943) at 0", "Insert Block(2942) into IfStatement(2943) at 1", "Insert PrimitiveType: int(2944) into VariableDeclarationStatement(2948) at 0", "Insert VariableDeclarationFragment(2947) into VariableDeclarationStatement(2948) at 1", "Insert VariableDeclarationExpression(2953) into ForStatement(2995) at 0", "Insert InfixExpression: <(2958) into ForStatement(2995) at 1", "Insert Assignment: +=(2961) into ForStatement(2995) at 2", "Insert Block(2994) into ForStatement(2995) at 3", "Insert SimpleName: bytesWritten(2996) into ReturnStatement(2997) at 0", "Insert SimpleName: Alphabet(3005) into SimpleType: Alphabet(3006) at 0", "Insert SimpleName: Nullable(3009) into MarkerAnnotation(3010) at 0", "Update SimpleName: CharOutput(2520) to Character", "Move SimpleName: CharOutput(2520) into SimpleType: Character(3012) at 0", "Insert ClassInstanceCreation(3018) into ReturnStatement(3019) at 0", "Insert SimpleName: String(3029) into SimpleType: String(3030) at 0", "Insert SimpleName: String(3033) into SimpleType: String(3034) at 0", "Insert SimpleName: Nullable(3037) into MarkerAnnotation(3038) at 0", "Update SimpleName: CharOutput(2524) to Character", "Insert ClassInstanceCreation(3049) into ConstructorInvocation(3051) at 0", "Insert SimpleName: paddingChar(3050) into ConstructorInvocation(3051) at 1", "Insert SimpleName: Alphabet(3056) into SimpleType: Alphabet(3057) at 0", "Insert SimpleName: Nullable(3060) into MarkerAnnotation(3061) at 0", "Insert SimpleName: Character(3062) into SimpleType: Character(3063) at 0", "Insert SimpleName: alphabet(3066) into SuperConstructorInvocation(3068) at 0", "Insert SimpleName: paddingChar(3067) into SuperConstructorInvocation(3068) at 1", "Insert MethodInvocation(3073) into ExpressionStatement(3074) at 0", "Insert SimpleName: Appendable(3081) into SimpleType: Appendable(3082) at 0", "Insert PrimitiveType: byte(3085) into ArrayType: byte[](3087) at 0", "Insert Dimension(3086) into ArrayType: byte[](3087) at 1", "Insert MethodInvocation(3100) into ExpressionStatement(3101) at 0", "Insert MethodInvocation(3108) into ExpressionStatement(3109) at 0", "Insert PrimitiveType: int(3110) into VariableDeclarationStatement(3114) at 0", "Insert VariableDeclarationFragment(3113) into VariableDeclarationStatement(3114) at 1", "Insert VariableDeclarationExpression(3119) into ForStatement(3203) at 0", "Insert InfixExpression: >=(3122) into ForStatement(3203) at 1", "Insert Assignment: -=(3125) into ForStatement(3203) at 2", "Insert Block(3202) into ForStatement(3203) at 3", "Insert InfixExpression: <(3208) into IfStatement(3221) at 0", "Insert Block(3220) into IfStatement(3221) at 1", "Insert PrimitiveType: byte(3228) into ArrayType: byte[](3230) at 0", "Insert Dimension(3229) into ArrayType: byte[](3230) at 1", "Insert SimpleName: CharSequence(3233) into SimpleType: CharSequence(3234) at 0", "Insert MethodInvocation(3241) into ExpressionStatement(3242) at 0", "Insert MethodInvocation(3245) into ExpressionStatement(3246) at 0", "Insert Assignment: =(3253) into ExpressionStatement(3254) at 0", "Insert PrefixExpression: !(3261) into IfStatement(3272) at 0", "Insert Block(3271) into IfStatement(3272) at 1", "Insert PrimitiveType: int(3273) into VariableDeclarationStatement(3277) at 0", "Insert VariableDeclarationFragment(3276) into VariableDeclarationStatement(3277) at 1", "Insert VariableDeclarationExpression(3282) into ForStatement(3393) at 0", "Insert Block(3392) into ForStatement(3393) at 2", "Insert SimpleName: bytesWritten(3394) into ReturnStatement(3395) at 0", "Insert SimpleName: Alphabet(3403) into SimpleType: Alphabet(3404) at 0", "Insert SimpleName: Nullable(3407) into MarkerAnnotation(3408) at 0", "Insert SimpleName: Character(3409) into SimpleType: Character(3410) at 0", "Insert ClassInstanceCreation(3417) into ReturnStatement(3418) at 0", "Update SimpleType: CharInput(2466) to Reader", "Insert SimpleType: Appendable(3558) into ClassInstanceCreation(3644) at 0", "Insert AnonymousClassDeclaration(3643) into ClassInstanceCreation(3644) at 1", "Insert SimpleName: Appendable(3670) into SimpleType: Appendable(3671) at 0", "Insert SimpleName: seperatingAppendable(3672) into VariableDeclarationFragment(3678) at 0", "Insert MethodInvocation(3677) into VariableDeclarationFragment(3678) at 1", "Insert SimpleType: Writer(3681) into ClassInstanceCreation(3752) at 0", "Insert AnonymousClassDeclaration(3751) into ClassInstanceCreation(3752) at 1", "Update SimpleName: CharOutput(2779) to Writer", "Insert SimpleName: Appendable(3918) into SimpleType: Appendable(3919) at 0", "Insert PrimitiveType: byte(3922) into ArrayType: byte[](3924) at 0", "Insert Dimension(3923) into ArrayType: byte[](3924) at 1", "Insert MethodInvocation(3945) into ExpressionStatement(3946) at 0", "Insert PrimitiveType: byte(3967) into ArrayType: byte[](3969) at 0", "Insert Dimension(3968) into ArrayType: byte[](3969) at 1", "Insert SimpleName: CharSequence(3972) into SimpleType: CharSequence(3973) at 0", "Insert MethodInvocation(3985) into ReturnStatement(3986) at 0", "Update SimpleName: CharInput(2814) to Reader", "Insert SimpleType: StringBuilder(264) into ClassInstanceCreation(268) at 0", "Move MethodInvocation(284) into ClassInstanceCreation(268) at 1", "Insert MethodInvocation(276) into ExpressionStatement(277) at 0", "Update SimpleName: decodingStream(561) to decodeTo", "Update SimpleName: asCharInput(562) to tmp", "Move SimpleName: asCharInput(562) into MethodInvocation(526) at 1", "Move SimpleName: chars(563) into MethodInvocation(526) at 2", "Update SimpleType: ByteOutput(1810) to OutputStream", "Insert SimpleName: checkNotNull(1890) into MethodInvocation(1892) at 0", "Insert SimpleName: target(1891) into MethodInvocation(1892) at 1", "Insert SimpleName: checkPositionIndexes(1894) into MethodInvocation(1900) at 0", "Insert SimpleName: off(1895) into MethodInvocation(1900) at 1", "Insert InfixExpression: +(1898) into MethodInvocation(1900) at 2", "Insert QualifiedName: bytes.length(1899) into MethodInvocation(1900) at 3", "Insert SimpleName: i(1910) into Assignment: +=(1912) at 0", "Insert QualifiedName: alphabet.bytesPerChunk(1911) into Assignment: +=(1912) at 1", "Insert ExpressionStatement(1927) into Block(1928) at 0", "Insert SimpleName: checkNotNull(1951) into MethodInvocation(1953) at 0", "Insert SimpleName: target(1952) into MethodInvocation(1953) at 1", "Insert SimpleName: checkPositionIndexes(1955) into MethodInvocation(1961) at 0", "Insert SimpleName: off(1956) into MethodInvocation(1961) at 1", "Insert InfixExpression: +(1959) into MethodInvocation(1961) at 2", "Insert QualifiedName: bytes.length(1960) into MethodInvocation(1961) at 3", "Insert SimpleName: checkArgument(1963) into MethodInvocation(1967) at 0", "Insert InfixExpression: <=(1966) into MethodInvocation(1967) at 1", "Insert SimpleName: bitBuffer(1970) into VariableDeclarationFragment(1972) at 0", "Insert NumberLiteral: 0(1971) into VariableDeclarationFragment(1972) at 1", "Insert PrimitiveType: int(1974) into VariableDeclarationExpression(1978) at 0", "Insert VariableDeclarationFragment(1977) into VariableDeclarationExpression(1978) at 1", "Insert SimpleName: i(1979) into InfixExpression: <(1981) at 0", "Insert SimpleName: len(1980) into InfixExpression: <(1981) at 1", "Insert SimpleName: i(1982) into PrefixExpression: ++(1983) at 0", "Insert ExpressionStatement(1993) into Block(1998) at 0", "Insert ExpressionStatement(1997) into Block(1998) at 1", "Insert SimpleName: bitOffset(2002) into VariableDeclarationFragment(2011) at 0", "Insert InfixExpression: -(2010) into VariableDeclarationFragment(2011) at 1", "Insert SimpleName: bitsProcessed(2014) into VariableDeclarationFragment(2016) at 0", "Insert NumberLiteral: 0(2015) into VariableDeclarationFragment(2016) at 1", "Insert SimpleName: bitsProcessed(2018) into InfixExpression: <(2022) at 0", "Insert InfixExpression: *(2021) into InfixExpression: <(2022) at 1", "Insert VariableDeclarationStatement(2037) into Block(2050) at 0", "Insert ExpressionStatement(2045) into Block(2050) at 1", "Insert ExpressionStatement(2049) into Block(2050) at 2", "Insert SimpleName: paddingChar(2052) into InfixExpression: !=(2054) at 0", "Insert NullLiteral(2053) into InfixExpression: !=(2054) at 1", "Insert WhileStatement(2072) into Block(2073) at 0", "Insert SimpleName: checkNotNull(2115) into MethodInvocation(2117) at 0", "Insert SimpleName: target(2116) into MethodInvocation(2117) at 1", "Insert SimpleName: checkNotNull(2119) into MethodInvocation(2121) at 0", "Insert SimpleName: chars(2120) into MethodInvocation(2121) at 1", "Insert SimpleName: chars(2123) into Assignment: =(2129) at 0", "Insert MethodInvocation(2128) into Assignment: =(2129) at 1", "Insert MethodInvocation(2136) into PrefixExpression: !(2137) at 0", "Insert ThrowStatement(2146) into Block(2147) at 0", "Insert SimpleName: bytesWritten(2150) into VariableDeclarationFragment(2152) at 0", "Insert NumberLiteral: 0(2151) into VariableDeclarationFragment(2152) at 1", "Insert PrimitiveType: int(2154) into VariableDeclarationExpression(2158) at 0", "Insert VariableDeclarationFragment(2157) into VariableDeclarationExpression(2158) at 1", "Insert SimpleName: charIdx(2159) into InfixExpression: <(2163) at 0", "Insert MethodInvocation(2162) into InfixExpression: <(2163) at 1", "Insert SimpleName: charIdx(2164) into Assignment: +=(2166) at 0", "Insert QualifiedName: alphabet.charsPerChunk(2165) into Assignment: +=(2166) at 1", "Insert VariableDeclarationStatement(2171) into Block(2260) at 0", "Insert VariableDeclarationStatement(2176) into Block(2260) at 1", "Insert ForStatement(2214) into Block(2260) at 2", "Insert VariableDeclarationStatement(2226) into Block(2260) at 3", "Insert ForStatement(2259) into Block(2260) at 4", "Update SimpleType: ByteInput(2005) to InputStream", "Insert MethodInvocation(2479) into ConditionalExpression(2480) at 2", "Move SimpleType: StandardBaseEncoding(2371) into ClassInstanceCreation(2678) at 0", "Insert SimpleName: alphabet(2676) into ClassInstanceCreation(2678) at 1", "Insert SimpleName: paddingChar(2677) into ClassInstanceCreation(2678) at 2", "Insert PrimitiveType: char(2750) into ArrayType: char[](2752) at 0", "Insert Dimension(2751) into ArrayType: char[](2752) at 1", "Insert SimpleType: Alphabet(2767) into ClassInstanceCreation(2772) at 0", "Insert SimpleName: name(2768) into ClassInstanceCreation(2772) at 1", "Insert MethodInvocation(2771) into ClassInstanceCreation(2772) at 2", "Insert SimpleName: checkArgument(2785) into MethodInvocation(2789) at 0", "Insert InfixExpression: ==(2788) into MethodInvocation(2789) at 1", "Insert SimpleName: i(2796) into InfixExpression: <(2798) at 0", "Insert NumberLiteral: 256(2797) into InfixExpression: <(2798) at 1", "Insert SimpleName: i(2799) into PrefixExpression: ++(2800) at 0", "Insert ExpressionStatement(2811) into Block(2825) at 0", "Insert ExpressionStatement(2824) into Block(2825) at 1", "Insert SimpleName: checkNotNull(2850) into MethodInvocation(2852) at 0", "Insert SimpleName: target(2851) into MethodInvocation(2852) at 1", "Insert SimpleName: checkPositionIndexes(2854) into MethodInvocation(2860) at 0", "Insert SimpleName: off(2855) into MethodInvocation(2860) at 1", "Insert InfixExpression: +(2858) into MethodInvocation(2860) at 2", "Insert QualifiedName: bytes.length(2859) into MethodInvocation(2860) at 3", "Insert PrimitiveType: int(2862) into VariableDeclarationExpression(2866) at 0", "Insert VariableDeclarationFragment(2865) into VariableDeclarationExpression(2866) at 1", "Insert SimpleName: i(2867) into InfixExpression: <(2869) at 0", "Insert SimpleName: len(2868) into InfixExpression: <(2869) at 1", "Insert SimpleName: i(2870) into PrefixExpression: ++(2871) at 0", "Insert VariableDeclarationStatement(2882) into Block(2899) at 0", "Insert ExpressionStatement(2889) into Block(2899) at 1", "Insert ExpressionStatement(2898) into Block(2899) at 2", "Insert SimpleName: checkNotNull(2918) into MethodInvocation(2920) at 0", "Insert SimpleName: target(2919) into MethodInvocation(2920) at 1", "Insert SimpleName: checkNotNull(2922) into MethodInvocation(2924) at 0", "Insert SimpleName: chars(2923) into MethodInvocation(2924) at 1", "Insert InfixExpression: %(2930) into InfixExpression: ==(2932) at 0", "Insert NumberLiteral: 1(2931) into InfixExpression: ==(2932) at 1", "Insert ThrowStatement(2941) into Block(2942) at 0", "Insert SimpleName: bytesWritten(2945) into VariableDeclarationFragment(2947) at 0", "Insert NumberLiteral: 0(2946) into VariableDeclarationFragment(2947) at 1", "Insert PrimitiveType: int(2949) into VariableDeclarationExpression(2953) at 0", "Insert VariableDeclarationFragment(2952) into VariableDeclarationExpression(2953) at 1", "Insert SimpleName: i(2954) into InfixExpression: <(2958) at 0", "Insert MethodInvocation(2957) into InfixExpression: <(2958) at 1", "Insert SimpleName: i(2959) into Assignment: +=(2961) at 0", "Insert NumberLiteral: 2(2960) into Assignment: +=(2961) at 1", "Insert VariableDeclarationStatement(2984) into Block(2994) at 0", "Insert ExpressionStatement(2993) into Block(2994) at 1", "Insert SimpleType: Base16Encoding(3016) into ClassInstanceCreation(3018) at 0", "Insert SimpleName: alphabet(3017) into ClassInstanceCreation(3018) at 1", "Update SimpleType: CharOutput(2552) to Alphabet", "Move SimpleType: CharOutput(2552) into ClassInstanceCreation(3049) at 0", "Insert SimpleName: name(3045) into ClassInstanceCreation(3049) at 1", "Insert MethodInvocation(3048) into ClassInstanceCreation(3049) at 2", "Insert SimpleName: checkArgument(3069) into MethodInvocation(3073) at 0", "Insert InfixExpression: ==(3072) into MethodInvocation(3073) at 1", "Insert SimpleName: checkNotNull(3098) into MethodInvocation(3100) at 0", "Insert SimpleName: target(3099) into MethodInvocation(3100) at 1", "Insert SimpleName: checkPositionIndexes(3102) into MethodInvocation(3108) at 0", "Insert SimpleName: off(3103) into MethodInvocation(3108) at 1", "Insert InfixExpression: +(3106) into MethodInvocation(3108) at 2", "Insert QualifiedName: bytes.length(3107) into MethodInvocation(3108) at 3", "Insert SimpleName: i(3111) into VariableDeclarationFragment(3113) at 0", "Insert SimpleName: off(3112) into VariableDeclarationFragment(3113) at 1", "Insert PrimitiveType: int(3115) into VariableDeclarationExpression(3119) at 0", "Insert VariableDeclarationFragment(3118) into VariableDeclarationExpression(3119) at 1", "Insert SimpleName: remaining(3120) into InfixExpression: >=(3122) at 0", "Insert NumberLiteral: 3(3121) into InfixExpression: >=(3122) at 1", "Insert SimpleName: remaining(3123) into Assignment: -=(3125) at 0", "Insert NumberLiteral: 3(3124) into Assignment: -=(3125) at 1", "Insert VariableDeclarationStatement(3155) into Block(3202) at 0", "Insert ExpressionStatement(3165) into Block(3202) at 1", "Insert ExpressionStatement(3178) into Block(3202) at 2", "Insert ExpressionStatement(3191) into Block(3202) at 3", "Insert ExpressionStatement(3201) into Block(3202) at 4", "Insert SimpleName: i(3204) into InfixExpression: <(3208) at 0", "Insert InfixExpression: +(3207) into InfixExpression: <(3208) at 1", "Insert ExpressionStatement(3219) into Block(3220) at 0", "Insert SimpleName: checkNotNull(3239) into MethodInvocation(3241) at 0", "Insert SimpleName: target(3240) into MethodInvocation(3241) at 1", "Insert SimpleName: checkNotNull(3243) into MethodInvocation(3245) at 0", "Insert SimpleName: chars(3244) into MethodInvocation(3245) at 1", "Insert SimpleName: chars(3247) into Assignment: =(3253) at 0", "Insert MethodInvocation(3252) into Assignment: =(3253) at 1", "Insert MethodInvocation(3260) into PrefixExpression: !(3261) at 0", "Insert ThrowStatement(3270) into Block(3271) at 0", "Insert SimpleName: bytesWritten(3274) into VariableDeclarationFragment(3276) at 0", "Insert NumberLiteral: 0(3275) into VariableDeclarationFragment(3276) at 1", "Insert PrimitiveType: int(3278) into VariableDeclarationExpression(3282) at 0", "Insert VariableDeclarationFragment(3281) into VariableDeclarationExpression(3282) at 1", "Insert VariableDeclarationStatement(3301) into Block(3392) at 0", "Insert ExpressionStatement(3314) into Block(3392) at 1", "Insert ExpressionStatement(3326) into Block(3392) at 2", "Insert IfStatement(3391) into Block(3392) at 3", "Insert SimpleType: Base64Encoding(3414) into ClassInstanceCreation(3417) at 0", "Insert SimpleName: alphabet(3415) into ClassInstanceCreation(3417) at 1", "Insert SimpleName: paddingChar(3416) into ClassInstanceCreation(3417) at 2", "Update SimpleName: CharInput(2465) to Reader", "Insert MethodDeclaration(3506) into AnonymousClassDeclaration(3520) at 1", "Insert SimpleName: Appendable(3557) into SimpleType: Appendable(3558) at 0", "Move FieldDeclaration(2557) into AnonymousClassDeclaration(3643) at 0", "Insert MethodDeclaration(3600) into AnonymousClassDeclaration(3643) at 1", "Insert MethodDeclaration(3624) into AnonymousClassDeclaration(3643) at 2", "Insert MethodDeclaration(3642) into AnonymousClassDeclaration(3643) at 3", "Insert SimpleName: separatingAppendable(3673) into MethodInvocation(3677) at 0", "Insert SimpleName: delegate(3674) into MethodInvocation(3677) at 1", "Insert SimpleName: separator(3675) into MethodInvocation(3677) at 2", "Insert SimpleName: afterEveryChars(3676) into MethodInvocation(3677) at 3", "Insert SimpleName: Writer(3680) into SimpleType: Writer(3681) at 0", "Insert MethodDeclaration(3700) into AnonymousClassDeclaration(3751) at 0", "Insert MethodDeclaration(3724) into AnonymousClassDeclaration(3751) at 1", "Move MethodDeclaration(2621) into AnonymousClassDeclaration(3751) at 2", "Move MethodDeclaration(2634) into AnonymousClassDeclaration(3751) at 3", "Insert SimpleName: delegate(3935) into MethodInvocation(3945) at 0", "Insert SimpleName: encodeTo(3936) into MethodInvocation(3945) at 1", "Insert MethodInvocation(3941) into MethodInvocation(3945) at 2", "Insert SimpleName: bytes(3942) into MethodInvocation(3945) at 3", "Insert SimpleName: off(3943) into MethodInvocation(3945) at 4", "Insert SimpleName: len(3944) into MethodInvocation(3945) at 5", "Insert SimpleName: delegate(3978) into MethodInvocation(3985) at 0", "Insert SimpleName: decodeTo(3979) into MethodInvocation(3985) at 1", "Insert SimpleName: target(3980) into MethodInvocation(3985) at 2", "Insert MethodInvocation(3984) into MethodInvocation(3985) at 3", "Insert SimpleName: StringBuilder(263) into SimpleType: StringBuilder(264) at 0", "Update SimpleName: encodingStream(291) to encodeTo", "Move SimpleName: encodingStream(291) into MethodInvocation(276) at 0", "Move SimpleName: result(292) into MethodInvocation(276) at 1", "Update SimpleName: byteOutput(306) to bytes", "Move SimpleName: byteOutput(306) into MethodInvocation(276) at 2", "Update SimpleName: write(307) to off", "Move SimpleName: write(307) into MethodInvocation(276) at 3", "Update SimpleName: byteOutput(317) to len", "Move SimpleName: byteOutput(317) into MethodInvocation(276) at 4", "Update SimpleName: ByteOutput(1809) to OutputStream", "Insert SimpleName: off(1896) into InfixExpression: +(1898) at 0", "Insert SimpleName: len(1897) into InfixExpression: +(1898) at 1", "Insert MethodInvocation(1926) into ExpressionStatement(1927) at 0", "Insert SimpleName: off(1957) into InfixExpression: +(1959) at 0", "Insert SimpleName: len(1958) into InfixExpression: +(1959) at 1", "Insert SimpleName: len(1964) into InfixExpression: <=(1966) at 0", "Insert QualifiedName: alphabet.bytesPerChunk(1965) into InfixExpression: <=(1966) at 1", "Insert SimpleName: i(1975) into VariableDeclarationFragment(1977) at 0", "Insert NumberLiteral: 0(1976) into VariableDeclarationFragment(1977) at 1", "Insert Assignment: |=(1992) into ExpressionStatement(1993) at 0", "Insert Assignment: <<=(1996) into ExpressionStatement(1997) at 0", "Insert InfixExpression: *(2008) into InfixExpression: -(2010) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2009) into InfixExpression: -(2010) at 1", "Insert SimpleName: len(2019) into InfixExpression: *(2021) at 0", "Insert NumberLiteral: 8(2020) into InfixExpression: *(2021) at 1", "Insert PrimitiveType: int(2023) into VariableDeclarationStatement(2037) at 0", "Insert VariableDeclarationFragment(2036) into VariableDeclarationStatement(2037) at 1", "Insert MethodInvocation(2044) into ExpressionStatement(2045) at 0", "Insert Assignment: +=(2048) into ExpressionStatement(2049) at 0", "Insert InfixExpression: <(2059) into WhileStatement(2072) at 0", "Insert Block(2071) into WhileStatement(2072) at 1", "Insert MethodInvocation(2125) into MethodInvocation(2128) at 0", "Insert SimpleName: trimTrailingFrom(2126) into MethodInvocation(2128) at 1", "Insert SimpleName: chars(2127) into MethodInvocation(2128) at 2", "Insert SimpleName: alphabet(2131) into MethodInvocation(2136) at 0", "Insert SimpleName: isValidPaddingStartPosition(2132) into MethodInvocation(2136) at 1", "Insert MethodInvocation(2135) into MethodInvocation(2136) at 2", "Insert ClassInstanceCreation(2145) into ThrowStatement(2146) at 0", "Insert SimpleName: charIdx(2155) into VariableDeclarationFragment(2157) at 0", "Insert NumberLiteral: 0(2156) into VariableDeclarationFragment(2157) at 1", "Insert SimpleName: chars(2160) into MethodInvocation(2162) at 0", "Insert SimpleName: length(2161) into MethodInvocation(2162) at 1", "Insert PrimitiveType: long(2167) into VariableDeclarationStatement(2171) at 0", "Insert VariableDeclarationFragment(2170) into VariableDeclarationStatement(2171) at 1", "Insert PrimitiveType: int(2172) into VariableDeclarationStatement(2176) at 0", "Insert VariableDeclarationFragment(2175) into VariableDeclarationStatement(2176) at 1", "Insert VariableDeclarationExpression(2181) into ForStatement(2214) at 0", "Insert InfixExpression: <(2184) into ForStatement(2214) at 1", "Move PostfixExpression: ++(2582) into ForStatement(2214) at 2", "Insert Block(2213) into ForStatement(2214) at 3", "Insert Modifier: final(2215) into VariableDeclarationStatement(2226) at 0", "Insert PrimitiveType: int(2216) into VariableDeclarationStatement(2226) at 1", "Insert VariableDeclarationFragment(2225) into VariableDeclarationStatement(2226) at 2", "Insert VariableDeclarationExpression(2236) into ForStatement(2259) at 0", "Insert InfixExpression: >=(2239) into ForStatement(2259) at 1", "Insert Assignment: -=(2242) into ForStatement(2259) at 2", "Insert Block(2258) into ForStatement(2259) at 3", "Update SimpleName: ByteInput(2004) to InputStream", "Insert SimpleName: newInstance(2476) into MethodInvocation(2479) at 0", "Insert SimpleName: alphabet(2477) into MethodInvocation(2479) at 1", "Insert NullLiteral(2478) into MethodInvocation(2479) at 2", "Insert MethodInvocation(2515) into ReturnStatement(2516) at 0", "Insert SimpleName: Alphabet(2766) into SimpleType: Alphabet(2767) at 0", "Insert SimpleName: alphabetChars(2769) into MethodInvocation(2771) at 0", "Insert SimpleName: toCharArray(2770) into MethodInvocation(2771) at 1", "Insert QualifiedName: alphabet.chars.length(2786) into InfixExpression: ==(2788) at 0", "Insert NumberLiteral: 16(2787) into InfixExpression: ==(2788) at 1", "Insert Assignment: =(2810) into ExpressionStatement(2811) at 0", "Insert Assignment: =(2823) into ExpressionStatement(2824) at 0", "Insert SimpleName: off(2856) into InfixExpression: +(2858) at 0", "Insert SimpleName: len(2857) into InfixExpression: +(2858) at 1", "Insert SimpleName: i(2863) into VariableDeclarationFragment(2865) at 0", "Insert NumberLiteral: 0(2864) into VariableDeclarationFragment(2865) at 1", "Insert PrimitiveType: int(2872) into VariableDeclarationStatement(2882) at 0", "Insert VariableDeclarationFragment(2881) into VariableDeclarationStatement(2882) at 1", "Insert MethodInvocation(2888) into ExpressionStatement(2889) at 0", "Insert MethodInvocation(2897) into ExpressionStatement(2898) at 0", "Insert MethodInvocation(2928) into InfixExpression: %(2930) at 0", "Insert NumberLiteral: 2(2929) into InfixExpression: %(2930) at 1", "Insert ClassInstanceCreation(2940) into ThrowStatement(2941) at 0", "Insert SimpleName: i(2950) into VariableDeclarationFragment(2952) at 0", "Insert NumberLiteral: 0(2951) into VariableDeclarationFragment(2952) at 1", "Insert SimpleName: chars(2955) into MethodInvocation(2957) at 0", "Insert SimpleName: length(2956) into MethodInvocation(2957) at 1", "Insert PrimitiveType: int(2962) into VariableDeclarationStatement(2984) at 0", "Insert VariableDeclarationFragment(2983) into VariableDeclarationStatement(2984) at 1", "Insert Assignment: =(2992) into ExpressionStatement(2993) at 0", "Insert SimpleName: Base16Encoding(3015) into SimpleType: Base16Encoding(3016) at 0", "Update SimpleName: CharOutput(2551) to Alphabet", "Insert SimpleName: alphabetChars(3046) into MethodInvocation(3048) at 0", "Insert SimpleName: toCharArray(3047) into MethodInvocation(3048) at 1", "Insert QualifiedName: alphabet.chars.length(3070) into InfixExpression: ==(3072) at 0", "Insert NumberLiteral: 64(3071) into InfixExpression: ==(3072) at 1", "Insert SimpleName: off(3104) into InfixExpression: +(3106) at 0", "Insert SimpleName: len(3105) into InfixExpression: +(3106) at 1", "Insert SimpleName: remaining(3116) into VariableDeclarationFragment(3118) at 0", "Insert SimpleName: len(3117) into VariableDeclarationFragment(3118) at 1", "Insert PrimitiveType: int(3126) into VariableDeclarationStatement(3155) at 0", "Insert VariableDeclarationFragment(3154) into VariableDeclarationStatement(3155) at 1", "Insert MethodInvocation(3164) into ExpressionStatement(3165) at 0", "Insert MethodInvocation(3177) into ExpressionStatement(3178) at 0", "Insert MethodInvocation(3190) into ExpressionStatement(3191) at 0", "Insert MethodInvocation(3200) into ExpressionStatement(3201) at 0", "Insert SimpleName: off(3205) into InfixExpression: +(3207) at 0", "Insert SimpleName: len(3206) into InfixExpression: +(3207) at 1", "Insert MethodInvocation(3218) into ExpressionStatement(3219) at 0", "Insert MethodInvocation(3249) into MethodInvocation(3252) at 0", "Insert SimpleName: trimTrailingFrom(3250) into MethodInvocation(3252) at 1", "Insert SimpleName: chars(3251) into MethodInvocation(3252) at 2", "Insert SimpleName: alphabet(3255) into MethodInvocation(3260) at 0", "Insert SimpleName: isValidPaddingStartPosition(3256) into MethodInvocation(3260) at 1", "Insert MethodInvocation(3259) into MethodInvocation(3260) at 2", "Insert ClassInstanceCreation(3269) into ThrowStatement(3270) at 0", "Insert SimpleName: i(3279) into VariableDeclarationFragment(3281) at 0", "Insert NumberLiteral: 0(3280) into VariableDeclarationFragment(3281) at 1", "Update SimpleName: separator(2577) to chars", "Insert PrimitiveType: int(3288) into VariableDeclarationStatement(3301) at 0", "Insert VariableDeclarationFragment(3300) into VariableDeclarationStatement(3301) at 1", "Insert Assignment: |=(3313) into ExpressionStatement(3314) at 0", "Insert Assignment: =(3325) into ExpressionStatement(3326) at 0", "Insert InfixExpression: <(3331) into IfStatement(3391) at 0", "Insert Block(3390) into IfStatement(3391) at 1", "Insert SimpleName: Base64Encoding(3413) into SimpleType: Base64Encoding(3414) at 0", "Insert MarkerAnnotation(3484) into MethodDeclaration(3506) at 0", "Insert Modifier: public(3485) into MethodDeclaration(3506) at 1", "Insert PrimitiveType: int(3486) into MethodDeclaration(3506) at 2", "Insert SimpleName: read(3487) into MethodDeclaration(3506) at 3", "Insert SingleVariableDeclaration(3492) into MethodDeclaration(3506) at 4", "Insert SingleVariableDeclaration(3495) into MethodDeclaration(3506) at 5", "Insert SingleVariableDeclaration(3498) into MethodDeclaration(3506) at 6", "Insert SimpleType: IOException(3500) into MethodDeclaration(3506) at 7", "Insert Block(3505) into MethodDeclaration(3506) at 8", "Move MarkerAnnotation(2559) into MethodDeclaration(3600) at 0", "Insert Modifier: public(3566) into MethodDeclaration(3600) at 1", "Insert SimpleType: Appendable(3568) into MethodDeclaration(3600) at 2", "Insert SimpleName: append(3569) into MethodDeclaration(3600) at 3", "Move SingleVariableDeclaration(2565) into MethodDeclaration(3600) at 4", "Move SimpleType: IOException(2567) into MethodDeclaration(3600) at 5", "Insert Block(3599) into MethodDeclaration(3600) at 6", "Insert MarkerAnnotation(3602) into MethodDeclaration(3624) at 0", "Insert Modifier: public(3603) into MethodDeclaration(3624) at 1", "Insert SimpleType: Appendable(3605) into MethodDeclaration(3624) at 2", "Insert SimpleName: append(3606) into MethodDeclaration(3624) at 3", "Insert SingleVariableDeclaration(3610) into MethodDeclaration(3624) at 4", "Insert SingleVariableDeclaration(3613) into MethodDeclaration(3624) at 5", "Insert SingleVariableDeclaration(3616) into MethodDeclaration(3624) at 6", "Insert SimpleType: IOException(3618) into MethodDeclaration(3624) at 7", "Insert Block(3623) into MethodDeclaration(3624) at 8", "Insert MarkerAnnotation(3626) into MethodDeclaration(3642) at 0", "Insert Modifier: public(3627) into MethodDeclaration(3642) at 1", "Insert SimpleType: Appendable(3629) into MethodDeclaration(3642) at 2", "Insert SimpleName: append(3630) into MethodDeclaration(3642) at 3", "Insert SingleVariableDeclaration(3634) into MethodDeclaration(3642) at 4", "Move SimpleType: IOException(1433) into MethodDeclaration(3642) at 5", "Insert Block(3641) into MethodDeclaration(3642) at 6", "Insert MarkerAnnotation(3683) into MethodDeclaration(3700) at 0", "Insert Modifier: public(3684) into MethodDeclaration(3700) at 1", "Insert PrimitiveType: void(3685) into MethodDeclaration(3700) at 2", "Insert SimpleName: write(3686) into MethodDeclaration(3700) at 3", "Insert SingleVariableDeclaration(3689) into MethodDeclaration(3700) at 4", "Insert SimpleType: IOException(3691) into MethodDeclaration(3700) at 5", "Insert Block(3699) into MethodDeclaration(3700) at 6", "Insert MarkerAnnotation(3702) into MethodDeclaration(3724) at 0", "Insert Modifier: public(3703) into MethodDeclaration(3724) at 1", "Insert PrimitiveType: void(3704) into MethodDeclaration(3724) at 2", "Insert SimpleName: write(3705) into MethodDeclaration(3724) at 3", "Insert SingleVariableDeclaration(3710) into MethodDeclaration(3724) at 4", "Insert SingleVariableDeclaration(3713) into MethodDeclaration(3724) at 5", "Insert SingleVariableDeclaration(3716) into MethodDeclaration(3724) at 6", "Insert SimpleType: IOException(3718) into MethodDeclaration(3724) at 7", "Insert Block(3723) into MethodDeclaration(3724) at 8", "Update SimpleName: separatingOutput(2785) to separatingWriter", "Insert SimpleName: separatingAppendable(3937) into MethodInvocation(3941) at 0", "Insert SimpleName: target(3938) into MethodInvocation(3941) at 1", "Insert SimpleName: separator(3939) into MethodInvocation(3941) at 2", "Insert SimpleName: afterEveryChars(3940) into MethodInvocation(3941) at 3", "Insert SimpleName: separatorChars(3981) into MethodInvocation(3984) at 0", "Insert SimpleName: removeFrom(3982) into MethodInvocation(3984) at 1", "Insert SimpleName: chars(3983) into MethodInvocation(3984) at 2", "Update SimpleName: ignoringInput(2820) to ignoringReader", "Update SimpleName: input(2821) to reader", "Insert SimpleName: encodeChunkTo(1913) into MethodInvocation(1926) at 0", "Insert SimpleName: target(1914) into MethodInvocation(1926) at 1", "Insert SimpleName: bytes(1915) into MethodInvocation(1926) at 2", "Insert InfixExpression: +(1918) into MethodInvocation(1926) at 3", "Insert MethodInvocation(1925) into MethodInvocation(1926) at 4", "Insert SimpleName: bitBuffer(1984) into Assignment: |=(1992) at 0", "Insert InfixExpression: &(1991) into Assignment: |=(1992) at 1", "Insert SimpleName: bitBuffer(1994) into Assignment: <<=(1996) at 0", "Insert NumberLiteral: 8(1995) into Assignment: <<=(1996) at 1", "Insert ParenthesizedExpression(2006) into InfixExpression: *(2008) at 0", "Insert NumberLiteral: 8(2007) into InfixExpression: *(2008) at 1", "Insert SimpleName: charIndex(2024) into VariableDeclarationFragment(2036) at 0", "Insert InfixExpression: &(2035) into VariableDeclarationFragment(2036) at 1", "Insert SimpleName: target(2038) into MethodInvocation(2044) at 0", "Insert SimpleName: append(2039) into MethodInvocation(2044) at 1", "Insert MethodInvocation(2043) into MethodInvocation(2044) at 2", "Insert SimpleName: bitsProcessed(2046) into Assignment: +=(2048) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2047) into Assignment: +=(2048) at 1", "Insert SimpleName: bitsProcessed(2055) into InfixExpression: <(2059) at 0", "Insert InfixExpression: *(2058) into InfixExpression: <(2059) at 1", "Insert ExpressionStatement(2066) into Block(2071) at 0", "Insert ExpressionStatement(2070) into Block(2071) at 1", "Insert SimpleName: padding(2124) into MethodInvocation(2125) at 0", "Insert SimpleName: chars(2133) into MethodInvocation(2135) at 0", "Insert SimpleName: length(2134) into MethodInvocation(2135) at 1", "Move SimpleType: DecodingException(617) into ClassInstanceCreation(2145) at 0", "Insert InfixExpression: +(2144) into ClassInstanceCreation(2145) at 1", "Insert SimpleName: chunk(2168) into VariableDeclarationFragment(2170) at 0", "Insert NumberLiteral: 0(2169) into VariableDeclarationFragment(2170) at 1", "Insert SimpleName: charsProcessed(2173) into VariableDeclarationFragment(2175) at 0", "Insert NumberLiteral: 0(2174) into VariableDeclarationFragment(2175) at 1", "Insert PrimitiveType: int(2177) into VariableDeclarationExpression(2181) at 0", "Insert VariableDeclarationFragment(2180) into VariableDeclarationExpression(2181) at 1", "Insert SimpleName: i(2182) into InfixExpression: <(2184) at 0", "Insert QualifiedName: alphabet.charsPerChunk(2183) into InfixExpression: <(2184) at 1", "Insert SimpleName: i(2185) into PostfixExpression: ++(2186) at 0", "Insert ExpressionStatement(2190) into Block(2213) at 0", "Insert IfStatement(2212) into Block(2213) at 1", "Insert SimpleName: minOffset(2217) into VariableDeclarationFragment(2225) at 0", "Insert InfixExpression: -(2224) into VariableDeclarationFragment(2225) at 1", "Insert PrimitiveType: int(2227) into VariableDeclarationExpression(2236) at 0", "Insert VariableDeclarationFragment(2235) into VariableDeclarationExpression(2236) at 1", "Insert SimpleName: offset(2237) into InfixExpression: >=(2239) at 0", "Insert SimpleName: minOffset(2238) into InfixExpression: >=(2239) at 1", "Insert SimpleName: offset(2240) into Assignment: -=(2242) at 0", "Insert NumberLiteral: 8(2241) into Assignment: -=(2242) at 1", "Insert ExpressionStatement(2257) into Block(2258) at 0", "Insert SimpleName: newInstance(2512) into MethodInvocation(2515) at 0", "Insert SimpleName: alphabet(2513) into MethodInvocation(2515) at 1", "Insert SimpleName: padChar(2514) into MethodInvocation(2515) at 2", "Insert ArrayAccess(2803) into Assignment: =(2810) at 0", "Insert MethodInvocation(2809) into Assignment: =(2810) at 1", "Insert ArrayAccess(2816) into Assignment: =(2823) at 0", "Insert MethodInvocation(2822) into Assignment: =(2823) at 1", "Insert SimpleName: b(2873) into VariableDeclarationFragment(2881) at 0", "Insert InfixExpression: &(2880) into VariableDeclarationFragment(2881) at 1", "Insert SimpleName: target(2883) into MethodInvocation(2888) at 0", "Insert SimpleName: append(2884) into MethodInvocation(2888) at 1", "Insert ArrayAccess(2887) into MethodInvocation(2888) at 2", "Insert SimpleName: target(2890) into MethodInvocation(2897) at 0", "Insert SimpleName: append(2891) into MethodInvocation(2897) at 1", "Insert ArrayAccess(2896) into MethodInvocation(2897) at 2", "Insert SimpleName: chars(2926) into MethodInvocation(2928) at 0", "Insert SimpleName: length(2927) into MethodInvocation(2928) at 1", "Insert SimpleType: DecodingException(2934) into ClassInstanceCreation(2940) at 0", "Insert InfixExpression: +(2939) into ClassInstanceCreation(2940) at 1", "Insert SimpleName: decoded(2963) into VariableDeclarationFragment(2983) at 0", "Insert InfixExpression: |(2982) into VariableDeclarationFragment(2983) at 1", "Insert ArrayAccess(2988) into Assignment: =(2992) at 0", "Insert CastExpression(2991) into Assignment: =(2992) at 1", "Insert SimpleName: chunk(3127) into VariableDeclarationFragment(3154) at 0", "Insert InfixExpression: |(3153) into VariableDeclarationFragment(3154) at 1", "Insert SimpleName: target(3156) into MethodInvocation(3164) at 0", "Insert SimpleName: append(3157) into MethodInvocation(3164) at 1", "Insert MethodInvocation(3163) into MethodInvocation(3164) at 2", "Insert SimpleName: target(3166) into MethodInvocation(3177) at 0", "Insert SimpleName: append(3167) into MethodInvocation(3177) at 1", "Insert MethodInvocation(3176) into MethodInvocation(3177) at 2", "Insert SimpleName: target(3179) into MethodInvocation(3190) at 0", "Insert SimpleName: append(3180) into MethodInvocation(3190) at 1", "Insert MethodInvocation(3189) into MethodInvocation(3190) at 2", "Insert SimpleName: target(3192) into MethodInvocation(3200) at 0", "Insert SimpleName: append(3193) into MethodInvocation(3200) at 1", "Insert MethodInvocation(3199) into MethodInvocation(3200) at 2", "Insert SimpleName: encodeChunkTo(3209) into MethodInvocation(3218) at 0", "Insert SimpleName: target(3210) into MethodInvocation(3218) at 1", "Insert SimpleName: bytes(3211) into MethodInvocation(3218) at 2", "Insert SimpleName: i(3212) into MethodInvocation(3218) at 3", "Insert InfixExpression: -(3217) into MethodInvocation(3218) at 4", "Insert SimpleName: padding(3248) into MethodInvocation(3249) at 0", "Insert SimpleName: chars(3257) into MethodInvocation(3259) at 0", "Insert SimpleName: length(3258) into MethodInvocation(3259) at 1", "Insert SimpleType: DecodingException(3263) into ClassInstanceCreation(3269) at 0", "Insert InfixExpression: +(3268) into ClassInstanceCreation(3269) at 1", "Insert SimpleName: chunk(3289) into VariableDeclarationFragment(3300) at 0", "Insert InfixExpression: <<(3299) into VariableDeclarationFragment(3300) at 1", "Insert SimpleName: chunk(3302) into Assignment: |=(3313) at 0", "Insert InfixExpression: <<(3312) into Assignment: |=(3313) at 1", "Insert ArrayAccess(3318) into Assignment: =(3325) at 0", "Insert CastExpression(3324) into Assignment: =(3325) at 1", "Insert SimpleName: i(3327) into InfixExpression: <(3331) at 0", "Insert MethodInvocation(3330) into InfixExpression: <(3331) at 1", "Insert ExpressionStatement(3344) into Block(3390) at 0", "Insert ExpressionStatement(3359) into Block(3390) at 1", "Insert IfStatement(3389) into Block(3390) at 2", "Insert SimpleName: Override(3483) into MarkerAnnotation(3484) at 0", "Insert ArrayType: char[](3490) into SingleVariableDeclaration(3492) at 0", "Insert SimpleName: cbuf(3491) into SingleVariableDeclaration(3492) at 1", "Insert PrimitiveType: int(3493) into SingleVariableDeclaration(3495) at 0", "Insert SimpleName: off(3494) into SingleVariableDeclaration(3495) at 1", "Insert PrimitiveType: int(3496) into SingleVariableDeclaration(3498) at 0", "Insert SimpleName: len(3497) into SingleVariableDeclaration(3498) at 1", "Insert SimpleName: IOException(3499) into SimpleType: IOException(3500) at 0", "Insert ThrowStatement(3504) into Block(3505) at 0", "Insert SimpleName: Appendable(3567) into SimpleType: Appendable(3568) at 0", "Insert IfStatement(3588) into Block(3599) at 0", "Move ExpressionStatement(2603) into Block(3599) at 1", "Move ExpressionStatement(2606) into Block(3599) at 2", "Insert ReturnStatement(3598) into Block(3599) at 3", "Insert SimpleName: Override(3601) into MarkerAnnotation(3602) at 0", "Insert SimpleName: Appendable(3604) into SimpleType: Appendable(3605) at 0", "Insert SimpleType: CharSequence(3608) into SingleVariableDeclaration(3610) at 0", "Insert SimpleName: chars(3609) into SingleVariableDeclaration(3610) at 1", "Insert PrimitiveType: int(3611) into SingleVariableDeclaration(3613) at 0", "Insert SimpleName: off(3612) into SingleVariableDeclaration(3613) at 1", "Insert PrimitiveType: int(3614) into SingleVariableDeclaration(3616) at 0", "Insert SimpleName: len(3615) into SingleVariableDeclaration(3616) at 1", "Insert SimpleName: IOException(3617) into SimpleType: IOException(3618) at 0", "Insert ThrowStatement(3622) into Block(3623) at 0", "Insert SimpleName: Override(3625) into MarkerAnnotation(3626) at 0", "Insert SimpleName: Appendable(3628) into SimpleType: Appendable(3629) at 0", "Insert SimpleType: CharSequence(3632) into SingleVariableDeclaration(3634) at 0", "Insert SimpleName: chars(3633) into SingleVariableDeclaration(3634) at 1", "Insert ThrowStatement(3640) into Block(3641) at 0", "Insert SimpleName: Override(3682) into MarkerAnnotation(3683) at 0", "Insert PrimitiveType: int(3687) into SingleVariableDeclaration(3689) at 0", "Insert SimpleName: c(3688) into SingleVariableDeclaration(3689) at 1", "Insert SimpleName: IOException(3690) into SimpleType: IOException(3691) at 0", "Insert ExpressionStatement(3698) into Block(3699) at 0", "Insert SimpleName: Override(3701) into MarkerAnnotation(3702) at 0", "Insert ArrayType: char[](3708) into SingleVariableDeclaration(3710) at 0", "Insert SimpleName: chars(3709) into SingleVariableDeclaration(3710) at 1", "Insert PrimitiveType: int(3711) into SingleVariableDeclaration(3713) at 0", "Insert SimpleName: off(3712) into SingleVariableDeclaration(3713) at 1", "Insert PrimitiveType: int(3714) into SingleVariableDeclaration(3716) at 0", "Insert SimpleName: len(3715) into SingleVariableDeclaration(3716) at 1", "Insert SimpleName: IOException(3717) into SimpleType: IOException(3718) at 0", "Insert ThrowStatement(3722) into Block(3723) at 0", "Update PrimitiveType: byte(1831) to int", "Insert SimpleName: off(1916) into InfixExpression: +(1918) at 0", "Insert SimpleName: i(1917) into InfixExpression: +(1918) at 1", "Insert SimpleName: Math(1919) into MethodInvocation(1925) at 0", "Insert SimpleName: min(1920) into MethodInvocation(1925) at 1", "Insert QualifiedName: alphabet.bytesPerChunk(1921) into MethodInvocation(1925) at 2", "Insert InfixExpression: -(1924) into MethodInvocation(1925) at 3", "Move ArrayAccess(312) into InfixExpression: &(1991) at 0", "Insert NumberLiteral: 0xFF(1990) into InfixExpression: &(1991) at 1", "Insert InfixExpression: +(2005) into ParenthesizedExpression(2006) at 0", "Insert CastExpression(2033) into InfixExpression: &(2035) at 0", "Insert QualifiedName: alphabet.mask(2034) into InfixExpression: &(2035) at 1", "Insert SimpleName: alphabet(2040) into MethodInvocation(2043) at 0", "Insert SimpleName: encode(2041) into MethodInvocation(2043) at 1", "Insert SimpleName: charIndex(2042) into MethodInvocation(2043) at 2", "Insert QualifiedName: alphabet.bytesPerChunk(2056) into InfixExpression: *(2058) at 0", "Insert NumberLiteral: 8(2057) into InfixExpression: *(2058) at 1", "Insert MethodInvocation(2065) into ExpressionStatement(2066) at 0", "Insert Assignment: +=(2069) into ExpressionStatement(2070) at 0", "Insert StringLiteral: \"Invalid input length \"(2140) into InfixExpression: +(2144) at 0", "Insert MethodInvocation(2143) into InfixExpression: +(2144) at 1", "Insert SimpleName: i(2178) into VariableDeclarationFragment(2180) at 0", "Insert NumberLiteral: 0(2179) into VariableDeclarationFragment(2180) at 1", "Insert Assignment: <<=(2189) into ExpressionStatement(2190) at 0", "Insert InfixExpression: <(2197) into IfStatement(2212) at 0", "Insert Block(2211) into IfStatement(2212) at 1", "Insert InfixExpression: *(2220) into InfixExpression: -(2224) at 0", "Insert InfixExpression: *(2223) into InfixExpression: -(2224) at 1", "Insert SimpleName: offset(2228) into VariableDeclarationFragment(2235) at 0", "Insert InfixExpression: *(2234) into VariableDeclarationFragment(2235) at 1", "Insert Assignment: =(2256) into ExpressionStatement(2257) at 0", "Insert SimpleName: encoding(2801) into ArrayAccess(2803) at 0", "Insert SimpleName: i(2802) into ArrayAccess(2803) at 1", "Insert SimpleName: alphabet(2804) into MethodInvocation(2809) at 0", "Insert SimpleName: encode(2805) into MethodInvocation(2809) at 1", "Insert InfixExpression: >>>(2808) into MethodInvocation(2809) at 2", "Insert SimpleName: encoding(2812) into ArrayAccess(2816) at 0", "Insert InfixExpression: |(2815) into ArrayAccess(2816) at 1", "Insert SimpleName: alphabet(2817) into MethodInvocation(2822) at 0", "Insert SimpleName: encode(2818) into MethodInvocation(2822) at 1", "Insert InfixExpression: &(2821) into MethodInvocation(2822) at 2", "Insert ArrayAccess(2878) into InfixExpression: &(2880) at 0", "Insert NumberLiteral: 0xFF(2879) into InfixExpression: &(2880) at 1", "Insert SimpleName: encoding(2885) into ArrayAccess(2887) at 0", "Insert SimpleName: b(2886) into ArrayAccess(2887) at 1", "Insert SimpleName: encoding(2892) into ArrayAccess(2896) at 0", "Insert InfixExpression: |(2895) into ArrayAccess(2896) at 1", "Insert SimpleName: DecodingException(2933) into SimpleType: DecodingException(2934) at 0", "Insert StringLiteral: \"Invalid input length \"(2935) into InfixExpression: +(2939) at 0", "Insert MethodInvocation(2938) into InfixExpression: +(2939) at 1", "Insert InfixExpression: <<(2972) into InfixExpression: |(2982) at 0", "Insert MethodInvocation(2981) into InfixExpression: |(2982) at 1", "Insert SimpleName: target(2985) into ArrayAccess(2988) at 0", "Insert PostfixExpression: ++(2987) into ArrayAccess(2988) at 1", "Insert PrimitiveType: byte(2989) into CastExpression(2991) at 0", "Insert SimpleName: decoded(2990) into CastExpression(2991) at 1", "Insert InfixExpression: |(3146) into InfixExpression: |(3153) at 0", "Insert InfixExpression: &(3152) into InfixExpression: |(3153) at 1", "Insert SimpleName: alphabet(3158) into MethodInvocation(3163) at 0", "Insert SimpleName: encode(3159) into MethodInvocation(3163) at 1", "Insert InfixExpression: >>>(3162) into MethodInvocation(3163) at 2", "Insert SimpleName: alphabet(3168) into MethodInvocation(3176) at 0", "Insert SimpleName: encode(3169) into MethodInvocation(3176) at 1", "Insert InfixExpression: &(3175) into MethodInvocation(3176) at 2", "Insert SimpleName: alphabet(3181) into MethodInvocation(3189) at 0", "Insert SimpleName: encode(3182) into MethodInvocation(3189) at 1", "Insert InfixExpression: &(3188) into MethodInvocation(3189) at 2", "Insert SimpleName: alphabet(3194) into MethodInvocation(3199) at 0", "Insert SimpleName: encode(3195) into MethodInvocation(3199) at 1", "Insert InfixExpression: &(3198) into MethodInvocation(3199) at 2", "Insert InfixExpression: +(3215) into InfixExpression: -(3217) at 0", "Insert SimpleName: i(3216) into InfixExpression: -(3217) at 1", "Insert SimpleName: DecodingException(3262) into SimpleType: DecodingException(3263) at 0", "Insert StringLiteral: \"Invalid input length \"(3264) into InfixExpression: +(3268) at 0", "Insert MethodInvocation(3267) into InfixExpression: +(3268) at 1", "Insert MethodInvocation(3297) into InfixExpression: <<(3299) at 0", "Insert NumberLiteral: 18(3298) into InfixExpression: <<(3299) at 1", "Insert MethodInvocation(3310) into InfixExpression: <<(3312) at 0", "Insert NumberLiteral: 12(3311) into InfixExpression: <<(3312) at 1", "Insert SimpleName: target(3315) into ArrayAccess(3318) at 0", "Insert PostfixExpression: ++(3317) into ArrayAccess(3318) at 1", "Insert PrimitiveType: byte(3319) into CastExpression(3324) at 0", "Insert ParenthesizedExpression(3323) into CastExpression(3324) at 1", "Insert SimpleName: chars(3328) into MethodInvocation(3330) at 0", "Insert SimpleName: length(3329) into MethodInvocation(3330) at 1", "Insert Assignment: |=(3343) into ExpressionStatement(3344) at 0", "Insert Assignment: =(3358) into ExpressionStatement(3359) at 0", "Insert InfixExpression: <(3364) into IfStatement(3389) at 0", "Insert Block(3388) into IfStatement(3389) at 1", "Insert PrimitiveType: char(3488) into ArrayType: char[](3490) at 0", "Insert Dimension(3489) into ArrayType: char[](3490) at 1", "Insert ClassInstanceCreation(3503) into ThrowStatement(3504) at 0", "Move InfixExpression: ==(2570) into IfStatement(3588) at 0", "Insert Block(3587) into IfStatement(3588) at 1", "Insert ThisExpression(3597) into ReturnStatement(3598) at 0", "Insert SimpleName: CharSequence(3607) into SimpleType: CharSequence(3608) at 0", "Insert ClassInstanceCreation(3621) into ThrowStatement(3622) at 0", "Insert SimpleName: CharSequence(3631) into SimpleType: CharSequence(3632) at 0", "Insert ClassInstanceCreation(3639) into ThrowStatement(3640) at 0", "Insert MethodInvocation(3697) into ExpressionStatement(3698) at 0", "Insert PrimitiveType: char(3706) into ArrayType: char[](3708) at 0", "Insert Dimension(3707) into ArrayType: char[](3708) at 1", "Insert ClassInstanceCreation(3721) into ThrowStatement(3722) at 0", "Insert SimpleName: len(1922) into InfixExpression: -(1924) at 0", "Insert SimpleName: i(1923) into InfixExpression: -(1924) at 1", "Insert SimpleName: len(2003) into InfixExpression: +(2005) at 0", "Insert NumberLiteral: 1(2004) into InfixExpression: +(2005) at 1", "Insert PrimitiveType: int(2025) into CastExpression(2033) at 0", "Insert ParenthesizedExpression(2032) into CastExpression(2033) at 1", "Insert SimpleName: target(2060) into MethodInvocation(2065) at 0", "Insert SimpleName: append(2061) into MethodInvocation(2065) at 1", "Insert MethodInvocation(2064) into MethodInvocation(2065) at 2", "Insert SimpleName: bitsProcessed(2067) into Assignment: +=(2069) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2068) into Assignment: +=(2069) at 1", "Insert SimpleName: chars(2141) into MethodInvocation(2143) at 0", "Insert SimpleName: length(2142) into MethodInvocation(2143) at 1", "Insert SimpleName: chunk(2187) into Assignment: <<=(2189) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2188) into Assignment: <<=(2189) at 1", "Insert InfixExpression: +(2193) into InfixExpression: <(2197) at 0", "Insert MethodInvocation(2196) into InfixExpression: <(2197) at 1", "Insert ExpressionStatement(2210) into Block(2211) at 0", "Insert QualifiedName: alphabet.bytesPerChunk(2218) into InfixExpression: *(2220) at 0", "Insert NumberLiteral: 8(2219) into InfixExpression: *(2220) at 1", "Insert SimpleName: charsProcessed(2221) into InfixExpression: *(2223) at 0", "Insert QualifiedName: alphabet.bitsPerChar(2222) into InfixExpression: *(2223) at 1", "Insert ParenthesizedExpression(2232) into InfixExpression: *(2234) at 0", "Insert NumberLiteral: 8(2233) into InfixExpression: *(2234) at 1", "Insert ArrayAccess(2246) into Assignment: =(2256) at 0", "Insert CastExpression(2255) into Assignment: =(2256) at 1", "Insert MethodInvocation(2606) into ConditionalExpression(2607) at 2", "Insert MethodInvocation(2650) into ConditionalExpression(2651) at 2", "Insert SimpleName: i(2806) into InfixExpression: >>>(2808) at 0", "Insert NumberLiteral: 4(2807) into InfixExpression: >>>(2808) at 1", "Insert SimpleName: i(2813) into InfixExpression: |(2815) at 0", "Insert NumberLiteral: 0x100(2814) into InfixExpression: |(2815) at 1", "Insert SimpleName: i(2819) into InfixExpression: &(2821) at 0", "Insert NumberLiteral: 0xF(2820) into InfixExpression: &(2821) at 1", "Insert SimpleName: bytes(2874) into ArrayAccess(2878) at 0", "Insert InfixExpression: +(2877) into ArrayAccess(2878) at 1", "Insert SimpleName: b(2893) into InfixExpression: |(2895) at 0", "Insert NumberLiteral: 0x100(2894) into InfixExpression: |(2895) at 1", "Insert SimpleName: chars(2936) into MethodInvocation(2938) at 0", "Insert SimpleName: length(2937) into MethodInvocation(2938) at 1", "Insert MethodInvocation(2970) into InfixExpression: <<(2972) at 0", "Insert NumberLiteral: 4(2971) into InfixExpression: <<(2972) at 1", "Insert SimpleName: alphabet(2973) into MethodInvocation(2981) at 0", "Insert SimpleName: decode(2974) into MethodInvocation(2981) at 1", "Insert MethodInvocation(2980) into MethodInvocation(2981) at 2", "Insert SimpleName: bytesWritten(2986) into PostfixExpression: ++(2987) at 0", "Insert InfixExpression: <<(3136) into InfixExpression: |(3146) at 0", "Insert InfixExpression: <<(3145) into InfixExpression: |(3146) at 1", "Insert ArrayAccess(3150) into InfixExpression: &(3152) at 0", "Insert NumberLiteral: 0xFF(3151) into InfixExpression: &(3152) at 1", "Insert SimpleName: chunk(3160) into InfixExpression: >>>(3162) at 0", "Insert NumberLiteral: 18(3161) into InfixExpression: >>>(3162) at 1", "Insert ParenthesizedExpression(3173) into InfixExpression: &(3175) at 0", "Insert NumberLiteral: 0x3F(3174) into InfixExpression: &(3175) at 1", "Insert ParenthesizedExpression(3186) into InfixExpression: &(3188) at 0", "Insert NumberLiteral: 0x3F(3187) into InfixExpression: &(3188) at 1", "Insert SimpleName: chunk(3196) into InfixExpression: &(3198) at 0", "Insert NumberLiteral: 0x3F(3197) into InfixExpression: &(3198) at 1", "Insert SimpleName: off(3213) into InfixExpression: +(3215) at 0", "Insert SimpleName: len(3214) into InfixExpression: +(3215) at 1", "Insert SimpleName: chars(3265) into MethodInvocation(3267) at 0", "Insert SimpleName: length(3266) into MethodInvocation(3267) at 1", "Insert SimpleName: alphabet(3290) into MethodInvocation(3297) at 0", "Insert SimpleName: decode(3291) into MethodInvocation(3297) at 1", "Insert MethodInvocation(3296) into MethodInvocation(3297) at 2", "Insert SimpleName: alphabet(3303) into MethodInvocation(3310) at 0", "Insert SimpleName: decode(3304) into MethodInvocation(3310) at 1", "Insert MethodInvocation(3309) into MethodInvocation(3310) at 2", "Insert SimpleName: bytesWritten(3316) into PostfixExpression: ++(3317) at 0", "Insert InfixExpression: >>>(3322) into ParenthesizedExpression(3323) at 0", "Insert SimpleName: chunk(3332) into Assignment: |=(3343) at 0", "Insert InfixExpression: <<(3342) into Assignment: |=(3343) at 1", "Insert ArrayAccess(3348) into Assignment: =(3358) at 0", "Insert CastExpression(3357) into Assignment: =(3358) at 1", "Insert SimpleName: i(3360) into InfixExpression: <(3364) at 0", "Insert MethodInvocation(3363) into InfixExpression: <(3364) at 1", "Move ExpressionStatement(2590) into Block(3388) at 0", "Insert ExpressionStatement(3387) into Block(3388) at 1", "Insert SimpleType: UnsupportedOperationException(3502) into ClassInstanceCreation(3503) at 0", "Insert ExpressionStatement(3582) into Block(3587) at 0", "Move ExpressionStatement(2596) into Block(3587) at 1", "Update SimpleName: write(2600) to append", "Insert SimpleType: UnsupportedOperationException(3620) into ClassInstanceCreation(3621) at 0", "Insert SimpleType: UnsupportedOperationException(3638) into ClassInstanceCreation(3639) at 0", "Insert SimpleName: seperatingAppendable(3692) into MethodInvocation(3697) at 0", "Insert SimpleName: append(3693) into MethodInvocation(3697) at 1", "Insert CastExpression(3696) into MethodInvocation(3697) at 2", "Insert SimpleType: UnsupportedOperationException(3720) into ClassInstanceCreation(3721) at 0", "Insert InfixExpression: >>>(2031) into ParenthesizedExpression(2032) at 0", "Insert SimpleName: paddingChar(2062) into MethodInvocation(2064) at 0", "Insert SimpleName: charValue(2063) into MethodInvocation(2064) at 1", "Insert SimpleName: charIdx(2191) into InfixExpression: +(2193) at 0", "Insert SimpleName: i(2192) into InfixExpression: +(2193) at 1", "Insert SimpleName: chars(2194) into MethodInvocation(2196) at 0", "Insert SimpleName: length(2195) into MethodInvocation(2196) at 1", "Insert Assignment: |=(2209) into ExpressionStatement(2210) at 0", "Insert InfixExpression: -(2231) into ParenthesizedExpression(2232) at 0", "Insert SimpleName: target(2243) into ArrayAccess(2246) at 0", "Insert PostfixExpression: ++(2245) into ArrayAccess(2246) at 1", "Insert PrimitiveType: byte(2247) into CastExpression(2255) at 0", "Insert ParenthesizedExpression(2254) into CastExpression(2255) at 1", "Insert SimpleName: newInstance(2603) into MethodInvocation(2606) at 0", "Insert SimpleName: upper(2604) into MethodInvocation(2606) at 1", "Insert SimpleName: paddingChar(2605) into MethodInvocation(2606) at 2", "Insert SimpleName: newInstance(2647) into MethodInvocation(2650) at 0", "Insert SimpleName: lower(2648) into MethodInvocation(2650) at 1", "Insert SimpleName: paddingChar(2649) into MethodInvocation(2650) at 2", "Insert SimpleName: off(2875) into InfixExpression: +(2877) at 0", "Insert SimpleName: i(2876) into InfixExpression: +(2877) at 1", "Insert SimpleName: alphabet(2964) into MethodInvocation(2970) at 0", "Insert SimpleName: decode(2965) into MethodInvocation(2970) at 1", "Insert MethodInvocation(2969) into MethodInvocation(2970) at 2", "Insert SimpleName: chars(2975) into MethodInvocation(2980) at 0", "Insert SimpleName: charAt(2976) into MethodInvocation(2980) at 1", "Insert InfixExpression: +(2979) into MethodInvocation(2980) at 2", "Insert ParenthesizedExpression(3134) into InfixExpression: <<(3136) at 0", "Insert NumberLiteral: 16(3135) into InfixExpression: <<(3136) at 1", "Insert ParenthesizedExpression(3143) into InfixExpression: <<(3145) at 0", "Insert NumberLiteral: 8(3144) into InfixExpression: <<(3145) at 1", "Insert SimpleName: bytes(3147) into ArrayAccess(3150) at 0", "Insert PostfixExpression: ++(3149) into ArrayAccess(3150) at 1", "Insert InfixExpression: >>>(3172) into ParenthesizedExpression(3173) at 0", "Insert InfixExpression: >>>(3185) into ParenthesizedExpression(3186) at 0", "Insert SimpleName: chars(3292) into MethodInvocation(3296) at 0", "Insert SimpleName: charAt(3293) into MethodInvocation(3296) at 1", "Move PostfixExpression: ++(305) into MethodInvocation(3296) at 2", "Insert SimpleName: chars(3305) into MethodInvocation(3309) at 0", "Insert SimpleName: charAt(3306) into MethodInvocation(3309) at 1", "Insert PostfixExpression: ++(3308) into MethodInvocation(3309) at 2", "Insert SimpleName: chunk(3320) into InfixExpression: >>>(3322) at 0", "Insert NumberLiteral: 16(3321) into InfixExpression: >>>(3322) at 1", "Insert MethodInvocation(3340) into InfixExpression: <<(3342) at 0", "Insert NumberLiteral: 6(3341) into InfixExpression: <<(3342) at 1", "Insert SimpleName: target(3345) into ArrayAccess(3348) at 0", "Insert PostfixExpression: ++(3347) into ArrayAccess(3348) at 1", "Insert PrimitiveType: byte(3349) into CastExpression(3357) at 0", "Insert ParenthesizedExpression(3356) into CastExpression(3357) at 1", "Insert SimpleName: chars(3361) into MethodInvocation(3363) at 0", "Insert SimpleName: length(3362) into MethodInvocation(3363) at 1", "Insert Assignment: |=(3374) into ExpressionStatement(3375) at 0", "Insert Assignment: =(3386) into ExpressionStatement(3387) at 0", "Insert SimpleName: UnsupportedOperationException(3501) into SimpleType: UnsupportedOperationException(3502) at 0", "Insert MethodInvocation(3581) into ExpressionStatement(3582) at 0", "Insert SimpleName: UnsupportedOperationException(3619) into SimpleType: UnsupportedOperationException(3620) at 0", "Insert SimpleName: UnsupportedOperationException(3637) into SimpleType: UnsupportedOperationException(3638) at 0", "Insert PrimitiveType: char(3694) into CastExpression(3696) at 0", "Insert SimpleName: c(3695) into CastExpression(3696) at 1", "Insert SimpleName: UnsupportedOperationException(3719) into SimpleType: UnsupportedOperationException(3720) at 0", "Insert SimpleName: bitBuffer(2026) into InfixExpression: >>>(2031) at 0", "Insert ParenthesizedExpression(2030) into InfixExpression: >>>(2031) at 1", "Insert SimpleName: chunk(2198) into Assignment: |=(2209) at 0", "Insert MethodInvocation(2208) into Assignment: |=(2209) at 1", "Insert QualifiedName: alphabet.bytesPerChunk(2229) into InfixExpression: -(2231) at 0", "Insert NumberLiteral: 1(2230) into InfixExpression: -(2231) at 1", "Insert SimpleName: bytesWritten(2244) into PostfixExpression: ++(2245) at 0", "Insert InfixExpression: &(2253) into ParenthesizedExpression(2254) at 0", "Insert SimpleName: chars(2966) into MethodInvocation(2969) at 0", "Insert SimpleName: charAt(2967) into MethodInvocation(2969) at 1", "Insert SimpleName: i(2968) into MethodInvocation(2969) at 2", "Insert SimpleName: i(2977) into InfixExpression: +(2979) at 0", "Insert NumberLiteral: 1(2978) into InfixExpression: +(2979) at 1", "Insert InfixExpression: &(3133) into ParenthesizedExpression(3134) at 0", "Insert InfixExpression: &(3142) into ParenthesizedExpression(3143) at 0", "Insert SimpleName: i(3148) into PostfixExpression: ++(3149) at 0", "Insert SimpleName: chunk(3170) into InfixExpression: >>>(3172) at 0", "Insert NumberLiteral: 12(3171) into InfixExpression: >>>(3172) at 1", "Insert SimpleName: chunk(3183) into InfixExpression: >>>(3185) at 0", "Insert NumberLiteral: 6(3184) into InfixExpression: >>>(3185) at 1", "Move SimpleName: i(2581) into PostfixExpression: ++(3308) at 0", "Insert SimpleName: alphabet(3333) into MethodInvocation(3340) at 0", "Insert SimpleName: decode(3334) into MethodInvocation(3340) at 1", "Insert MethodInvocation(3339) into MethodInvocation(3340) at 2", "Insert SimpleName: bytesWritten(3346) into PostfixExpression: ++(3347) at 0", "Insert InfixExpression: &(3355) into ParenthesizedExpression(3356) at 0", "Insert SimpleName: chunk(3365) into Assignment: |=(3374) at 0", "Insert MethodInvocation(3373) into Assignment: |=(3374) at 1", "Insert ArrayAccess(3379) into Assignment: =(3386) at 0", "Insert CastExpression(3385) into Assignment: =(3386) at 1", "Insert SimpleName: delegate(3578) into MethodInvocation(3581) at 0", "Insert SimpleName: append(3579) into MethodInvocation(3581) at 1", "Insert SimpleName: separator(3580) into MethodInvocation(3581) at 2", "Insert InfixExpression: -(2029) into ParenthesizedExpression(2030) at 0", "Insert SimpleName: alphabet(2199) into MethodInvocation(2208) at 0", "Insert SimpleName: decode(2200) into MethodInvocation(2208) at 1", "Insert MethodInvocation(2207) into MethodInvocation(2208) at 2", "Insert ParenthesizedExpression(2251) into InfixExpression: &(2253) at 0", "Insert NumberLiteral: 0xFF(2252) into InfixExpression: &(2253) at 1", "Insert ArrayAccess(3131) into InfixExpression: &(3133) at 0", "Insert NumberLiteral: 0xFF(3132) into InfixExpression: &(3133) at 1", "Insert ArrayAccess(3140) into InfixExpression: &(3142) at 0", "Insert NumberLiteral: 0xFF(3141) into InfixExpression: &(3142) at 1", "Insert SimpleName: chars(3335) into MethodInvocation(3339) at 0", "Insert SimpleName: charAt(3336) into MethodInvocation(3339) at 1", "Insert PostfixExpression: ++(3338) into MethodInvocation(3339) at 2", "Insert ParenthesizedExpression(3353) into InfixExpression: &(3355) at 0", "Insert NumberLiteral: 0xFF(3354) into InfixExpression: &(3355) at 1", "Update SimpleName: delegate(2583) to alphabet", "Move SimpleName: delegate(2583) into MethodInvocation(3373) at 0", "Update SimpleName: write(2584) to decode", "Move SimpleName: write(2584) into MethodInvocation(3373) at 1", "Move MethodInvocation(2588) into MethodInvocation(3373) at 2", "Insert SimpleName: target(3376) into ArrayAccess(3379) at 0", "Insert PostfixExpression: ++(3378) into ArrayAccess(3379) at 1", "Insert PrimitiveType: byte(3380) into CastExpression(3385) at 0", "Insert ParenthesizedExpression(3384) into CastExpression(3385) at 1", "Insert SimpleName: bitOffset(2027) into InfixExpression: -(2029) at 0", "Insert SimpleName: bitsProcessed(2028) into InfixExpression: -(2029) at 1", "Insert SimpleName: chars(2201) into MethodInvocation(2207) at 0", "Insert SimpleName: charAt(2202) into MethodInvocation(2207) at 1", "Insert InfixExpression: +(2206) into MethodInvocation(2207) at 2", "Insert InfixExpression: >>>(2250) into ParenthesizedExpression(2251) at 0", "Insert SimpleName: bytes(3128) into ArrayAccess(3131) at 0", "Insert PostfixExpression: ++(3130) into ArrayAccess(3131) at 1", "Insert SimpleName: bytes(3137) into ArrayAccess(3140) at 0", "Insert PostfixExpression: ++(3139) into ArrayAccess(3140) at 1", "Insert SimpleName: i(3337) into PostfixExpression: ++(3338) at 0", "Insert InfixExpression: >>>(3352) into ParenthesizedExpression(3353) at 0", "Update SimpleName: separator(2585) to chars", "Insert PostfixExpression: ++(3371) into MethodInvocation(3372) at 2", "Insert SimpleName: bytesWritten(3377) into PostfixExpression: ++(3378) at 0", "Insert InfixExpression: &(3383) into ParenthesizedExpression(3384) at 0", "Insert SimpleName: charIdx(2203) into InfixExpression: +(2206) at 0", "Insert PostfixExpression: ++(2205) into InfixExpression: +(2206) at 1", "Insert SimpleName: chunk(2248) into InfixExpression: >>>(2250) at 0", "Insert SimpleName: offset(2249) into InfixExpression: >>>(2250) at 1", "Insert SimpleName: i(3129) into PostfixExpression: ++(3130) at 0", "Insert SimpleName: i(3138) into PostfixExpression: ++(3139) at 0", "Insert SimpleName: chunk(3350) into InfixExpression: >>>(3352) at 0", "Insert NumberLiteral: 8(3351) into InfixExpression: >>>(3352) at 1", "Insert SimpleName: i(3370) into PostfixExpression: ++(3371) at 0", "Insert SimpleName: chunk(3381) into InfixExpression: &(3383) at 0", "Insert NumberLiteral: 0xFF(3382) into InfixExpression: &(3383) at 1", "Insert SimpleName: charsProcessed(2204) into PostfixExpression: ++(2205) at 0", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.asCharInput(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.asCharOutput(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.asInputStream(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.asOutputStream(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.stringBuilderOutput(18)", "Delete ImportDeclaration(19)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.ByteInput(40)", "Delete ImportDeclaration(41)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.ByteOutput(42)", "Delete ImportDeclaration(43)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.CharInput(44)", "Delete ImportDeclaration(45)", "Delete QualifiedName: com.google.common.io.GwtWorkarounds.CharOutput(46)", "Delete ImportDeclaration(47)", "Delete SimpleName: stringBuilderOutput(281)", "Delete MethodInvocation(285)", "Delete SimpleName: ByteOutput(288)", "Delete SimpleType: ByteOutput(289)", "Delete SimpleName: byteOutput(290)", "Delete MethodInvocation(293)", "Delete VariableDeclarationFragment(294)", "Delete VariableDeclarationStatement(295)", "Delete MethodInvocation(313)", "Delete ExpressionStatement(314)", "Delete Block(315)", "Delete ForStatement(316)", "Delete SimpleName: close(318)", "Delete MethodInvocation(319)", "Delete ExpressionStatement(320)", "Delete Block(321)", "Delete SimpleName: impossible(324)", "Delete SingleVariableDeclaration(325)", "Delete SimpleName: AssertionError(326)", "Delete SimpleType: AssertionError(327)", "Delete StringLiteral: \"impossible\"(328)", "Delete ClassInstanceCreation(329)", "Delete ThrowStatement(330)", "Delete Block(331)", "Delete CatchClause(332)", "Delete TryStatement(333)", "Delete SimpleName: asOutputStream(367)", "Delete SimpleName: encodingStream(368)", "Delete SimpleName: asCharOutput(369)", "Delete SimpleName: writer(370)", "Delete MethodInvocation(371)", "Delete MethodInvocation(372)", "Delete MethodInvocation(373)", "Delete ReturnStatement(374)", "Delete Block(375)", "Delete SimpleName: ByteInput(558)", "Delete SimpleType: ByteInput(559)", "Delete MethodInvocation(564)", "Delete PrimitiveType: int(583)", "Delete SimpleName: index(584)", "Delete NumberLiteral: 0(585)", "Delete VariableDeclarationFragment(586)", "Delete VariableDeclarationStatement(587)", "Delete PrimitiveType: int(588)", "Delete SimpleName: i(589)", "Delete SimpleName: decodedInput(590)", "Delete SimpleName: read(591)", "Delete MethodInvocation(592)", "Delete VariableDeclarationFragment(593)", "Delete VariableDeclarationExpression(594)", "Delete SimpleName: i(595)", "Delete NumberLiteral: 1(596)", "Delete PrefixExpression: -(597)", "Delete InfixExpression: !=(598)", "Delete SimpleName: i(599)", "Delete SimpleName: decodedInput(600)", "Delete SimpleName: read(601)", "Delete MethodInvocation(602)", "Delete Assignment: =(603)", "Delete SimpleName: tmp(604)", "Delete SimpleName: index(605)", "Delete PostfixExpression: ++(606)", "Delete ArrayAccess(607)", "Delete PrimitiveType: byte(608)", "Delete SimpleName: i(609)", "Delete CastExpression(610)", "Delete Assignment: =(611)", "Delete ExpressionStatement(612)", "Delete Block(613)", "Delete ForStatement(614)", "Delete Block(615)", "Delete SimpleName: badInput(618)", "Delete SingleVariableDeclaration(619)", "Delete SimpleName: badInput(620)", "Delete ThrowStatement(621)", "Delete Block(622)", "Delete CatchClause(623)", "Delete TryStatement(635)", "Delete SimpleName: asInputStream(668)", "Delete SimpleName: decodingStream(669)", "Delete SimpleName: asCharInput(670)", "Delete SimpleName: reader(671)", "Delete MethodInvocation(672)", "Delete MethodInvocation(673)", "Delete MethodInvocation(674)", "Delete ReturnStatement(675)", "Delete Block(676)", "Delete SimpleName: ByteOutput(735)", "Delete SimpleType: ByteOutput(736)", "Delete SimpleName: ByteInput(751)", "Delete SimpleType: ByteInput(752)", "Delete SimpleName: decodingStream(753)", "Delete NullLiteral(1098)", "Delete Modifier: final(1671)", "Delete SimpleName: StandardBaseEncoding(1672)", "Delete Modifier: private(1675)", "Delete Modifier: private(1684)", "Delete SimpleName: StandardBaseEncoding(2196)", "Delete SimpleType: StandardBaseEncoding(2197)", "Delete SimpleName: alphabet(2198)", "Delete NullLiteral(2199)", "Delete ClassInstanceCreation(2200)", "Delete SimpleName: alphabet(2235)", "Delete SimpleName: padChar(2236)", "Delete ClassInstanceCreation(2237)", "Delete SimpleName: upper(2327)", "Delete SimpleName: paddingChar(2328)", "Delete ClassInstanceCreation(2329)", "Delete SimpleName: lower(2372)", "Delete SimpleName: paddingChar(2373)", "Delete ClassInstanceCreation(2374)", "Delete SimpleName: i(2587)", "Delete MethodInvocation(2589)", "Delete Block(2591)", "Delete Modifier: static(2519)", "Delete SimpleType: CharOutput(2521)", "Delete SimpleName: separatingOutput(2522)", "Delete Modifier: final(2523)", "Delete SingleVariableDeclaration(2527)", "Delete SimpleName: write(2562)", "Delete Block(2597)", "Delete IfStatement(2598)", "Delete Block(2607)", "Delete MethodDeclaration(2608)", "Delete AnonymousClassDeclaration(2635)", "Delete ClassInstanceCreation(2636)", "Delete ReturnStatement(2637)", "Delete Block(2638)", "Delete MethodDeclaration(2639)"]}}, {"GwtWorkarounds_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: com.google.common.io"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.common.base.Preconditions.checkNotNull", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.base.Preconditions.checkPositionIndexes"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.annotations.GwtCompatible"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.annotations.GwtIncompatible"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.IOException", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.InputStream"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.OutputStream", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.io.Reader"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.io.Writer", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL VariableDeclarationStatement", "DEL AnonymousClassDeclaration", "DEL SimpleName: close", "DEL CastExpression", "DEL TextElement:  Louis Wasserman", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: IOException", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL Javadoc", "DEL NumberLiteral: 1", "DEL SimpleName: IOException", "DEL AnonymousClassDeclaration", "DEL TextElement:  Reader", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL TextElement:  can use streaming implementations", "DEL TagElement", "DEL ReturnStatement", "DEL SimpleName: Override", "DEL ClassInstanceCreation", "DEL TextElement: Views a ", "DEL SimpleName: chars", "DEL TextElement:  Reader", "DEL Block", "DEL InfixExpression: ==", "DEL SimpleName: IOException", "DEL TextElement: .", "DEL PrimitiveType: int", "DEL SimpleName: write", "DEL Modifier: public", "DEL MethodDeclaration", "DEL SimpleName: len", "DEL TextElement: Views a ", "DEL SimpleName: chars", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL SimpleName: initialSize", "DEL SimpleName: CharInput", "DEL ExpressionStatement", "DEL SimpleType: IOException", "DEL MethodDeclaration", "DEL SimpleName: ByteInput", "DEL VariableDeclarationStatement", "DEL TagElement: @code", "DEL PrimitiveType: void", "DEL SimpleName: len", "DEL TextElement:  CharInput", "DEL TextElement:  InputStream", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: read", "DEL SimpleType: IOException", "DEL SimpleName: output", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: IOException", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL Block", "DEL TagElement", "DEL IfStatement", "DEL TagElement: @code", "DEL SimpleName: read", "DEL MethodDeclaration", "DEL Block", "DEL SingleMemberAnnotation", "DEL MethodDeclaration", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: charAt", "DEL SimpleType: IOException", "DEL MethodDeclaration", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL Modifier: final", "DEL SimpleName: ByteOutput", "DEL SimpleName: GwtIncompatible", "DEL TypeDeclaration: interface", "DEL SimpleName: read", "DEL TagElement: @code", "DEL Modifier: private", "DEL SimpleType: IOException", "DEL ExpressionStatement", "DEL SimpleType: CharInput", "DEL PostfixExpression: ++", "DEL MethodDeclaration", "DEL Modifier: static", "DEL SimpleName: builder", "DEL Block", "DEL SimpleName: read", "DEL SimpleName: checkNotNull", "DEL MarkerAnnotation", "DEL TextElement:  toString()", "DEL SimpleName: write", "DEL PrimitiveType: void", "DEL SimpleName: close", "DEL SimpleType: IOException", "DEL Modifier: static", "DEL SimpleType: CharOutput", "DEL SimpleName: dst", "DEL SimpleName: Override", "DEL SimpleName: off", "DEL TextElement: Views a ", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: asInputStream", "DEL MethodInvocation", "DEL SimpleName: reader", "DEL TagElement: @code", "DEL SimpleName: Override", "DEL Javadoc", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL MarkerAnnotation", "DEL Block", "DEL Modifier: static", "DEL SimpleName: InputStream", "DEL SimpleName: b", "DEL Block", "DEL SimpleName: close", "DEL Block", "DEL ReturnStatement", "DEL Block", "DEL Dimension", "DEL TextElement: ,", "DEL SimpleName: b", "DEL PostfixExpression: ++", "DEL Javadoc", "DEL MethodInvocation", "DEL TextElement: .", "DEL Block", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL TypeDeclaration: interface", "DEL SimpleName: close", "DEL SimpleName: reader", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL MethodInvocation", "DEL SimpleName: writer", "DEL NormalAnnotation", "DEL Javadoc", "DEL TagElement: @code", "DEL VariableDeclarationStatement", "DEL SimpleName: close", "DEL SimpleName: IOException", "DEL ExpressionStatement", "DEL SimpleType: IOException", "DEL SimpleName: off", "DEL SimpleName: OutputStream", "DEL SimpleName: off", "DEL SimpleType: IOException", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Modifier: public", "DEL QualifiedName: b.length", "DEL TagElement: @code", "DEL TagElement", "DEL SimpleName: c", "DEL SimpleName: checkNotNull", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Reader", "DEL TextElement:  OutputStream", "DEL SimpleName: write", "DEL NumberLiteral: 1", "DEL TextElement:  so that ", "DEL PrimitiveType: void", "DEL SimpleName: dst", "DEL TagElement: @code", "DEL Assignment: =", "DEL SimpleType: IOException", "DEL SimpleName: Override", "DEL Modifier: public", "DEL ReturnStatement", "DEL Block", "DEL MarkerAnnotation", "DEL AnonymousClassDeclaration", "DEL SimpleName: IOException", "DEL ReturnStatement", "DEL PrimitiveType: void", "DEL SimpleName: firstByte", "DEL SimpleName: read", "DEL TextElement:  OutputStream", "DEL SimpleType: IOException", "DEL SimpleName: Override", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL AnonymousClassDeclaration", "DEL SimpleName: readByte", "DEL SimpleName: asCharInput", "DEL SimpleName: ByteOutput", "DEL SimpleName: input", "DEL SimpleType: IOException", "DEL TagElement", "DEL TagElement", "DEL SingleMemberAnnotation", "DEL SimpleName: writer", "DEL SimpleType: IOException", "DEL Modifier: public", "DEL SimpleName: b", "DEL TextElement: , ", "DEL SimpleType: OutputStream", "DEL SimpleName: builder", "DEL Block", "DEL SimpleName: index", "DEL SimpleName: output", "DEL TagElement", "DEL TextElement:  OutputStream", "DEL SimpleName: Override", "DEL VariableDeclarationExpression", "DEL SimpleType: CharOutput", "DEL PrimitiveType: void", "DEL SimpleName: CharInput", "DEL SingleVariableDeclaration", "DEL MarkerAnnotation", "DEL TypeDeclaration: interface", "DEL Modifier: public", "DEL SimpleName: writer", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL SimpleName: b", "DEL SimpleName: off", "DEL SimpleName: IOException", "DEL SimpleName: read", "DEL Modifier: public", "DEL SimpleName: OutputStream", "DEL SimpleType: CharOutput", "DEL PrimitiveType: void", "DEL SimpleName: IOException", "DEL ReturnStatement", "DEL PrimitiveType: byte", "DEL SimpleName: asCharOutput", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: checkNotNull", "DEL Modifier: final", "DEL VariableDeclarationFragment", "DEL SimpleName: output", "DEL IfStatement", "DEL SimpleName: String", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: b", "DEL Modifier: public", "DEL Modifier: static", "DEL SimpleName: GwtIncompatible", "DEL PrimitiveType: char", "DEL MarkerAnnotation", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: StringBuilder", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleType: Writer", "DEL TextElement:  Writer", "DEL SimpleName: firstByte", "DEL SimpleName: readByte", "DEL SimpleName: read", "DEL SimpleName: flush", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL SimpleName: IOException", "DEL SimpleName: len", "DEL SingleMemberAnnotation", "DEL PrimitiveType: void", "DEL SimpleName: Override", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: flush", "DEL SimpleName: write", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL SimpleType: StringBuilder", "DEL SimpleName: close", "DEL SimpleName: asOutputStream", "DEL SimpleName: dst", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL TextElement:  CharOutput", "DEL SimpleName: InputStream", "DEL TextElement: Views a ", "DEL SimpleType: IOException", "DEL SimpleName: reader", "DEL SimpleName: GwtIncompatible", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL SimpleName: Override", "DEL SimpleName: CharOutput", "DEL SimpleName: index", "DEL Javadoc", "DEL Modifier: static", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL MethodDeclaration", "DEL TextElement:  CharInput", "DEL SimpleName: append", "DEL TextElement: .", "DEL MethodDeclaration", "DEL SimpleName: dst", "DEL TextElement:  as an ", "DEL Block", "DEL SimpleName: flush", "DEL StringLiteral: \"Writer\"", "DEL SimpleName: initialSize", "DEL SimpleName: index", "DEL TagElement: @code", "DEL SimpleType: CharInput", "DEL MethodInvocation", "DEL SimpleName: chars", "DEL ForStatement", "DEL Modifier: public", "DEL MemberValuePair", "DEL SimpleName: emulated", "DEL TextElement: A GWT-compatible substitute for an ", "DEL SimpleName: chars", "DEL SimpleName: Override", "DEL TextElement:  whose ", "DEL MethodInvocation", "DEL SimpleName: close", "DEL SimpleType: OutputStream", "DEL SimpleName: GwtCompatible", "DEL VariableDeclarationFragment", "DEL SimpleName: IOException", "DEL SimpleName: c", "DEL Block", "DEL SimpleName: close", "DEL TextElement: .", "DEL Block", "DEL SimpleName: flush", "DEL ReturnStatement", "DEL SimpleName: stringBuilderOutput", "DEL NumberLiteral: 0", "DEL SingleMemberAnnotation", "DEL ClassInstanceCreation", "DEL TagElement: @code", "DEL Block", "DEL AnonymousClassDeclaration", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL SimpleName: output", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL PrimitiveType: int", "DEL TextElement: A GWT-compatible substitute for a ", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: writer", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: close", "DEL TagElement: @code", "DEL SimpleName: CharInput", "DEL AnonymousClassDeclaration", "DEL SimpleType: CharInput", "DEL Modifier: final", "DEL SimpleName: close", "DEL CastExpression", "DEL MarkerAnnotation", "DEL MethodInvocation", "DEL SimpleName: input", "DEL SimpleName: flush", "DEL CastExpression", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL TextElement: .", "DEL PrefixExpression: -", "DEL ReturnStatement", "DEL Assignment: =", "DEL PrefixExpression: -", "DEL SimpleName: IOException", "DEL SimpleName: close", "DEL PrefixExpression: -", "DEL SimpleType: InputStream", "DEL MarkerAnnotation", "DEL NumberLiteral: 1", "DEL SimpleName: checkNotNull", "DEL SimpleName: read", "DEL SimpleType: CharSequence", "DEL PrimitiveType: int", "DEL Modifier: final", "DEL Modifier: public", "DEL Block", "DEL PrimitiveType: void", "DEL NumberLiteral: 0", "DEL SimpleName: chars", "DEL TextElement: Provides simple GWT-compatible substitutes for ", "DEL Modifier: static", "DEL Modifier: public", "DEL ArrayAccess", "DEL SimpleName: IOException", "DEL TextElement: .", "DEL MarkerAnnotation", "DEL TypeDeclaration: class", "DEL ReturnStatement", "DEL TextElement: A GWT-compatible substitute for a ", "DEL SimpleName: writer", "DEL TagElement", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleName: checkPositionIndexes", "DEL SimpleName: IOException", "DEL SimpleName: close", "DEL SimpleName: GwtIncompatible", "DEL MethodInvocation", "DEL TextElement: .", "DEL MethodDeclaration", "DEL PrimitiveType: byte", "DEL MethodInvocation", "DEL PrimitiveType: byte", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: flush", "DEL IfStatement", "DEL SimpleType: CharInput", "DEL Block", "DEL PrimitiveType: char", "DEL MethodDeclaration", "DEL SimpleName: write", "DEL SimpleType: IOException", "DEL PrimitiveType: void", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL SimpleType: IOException", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL SimpleName: length", "DEL MethodInvocation", "DEL SimpleName: read", "DEL SimpleName: checkNotNull", "DEL SimpleName: readByte", "DEL TextElement:  as a ", "DEL MarkerAnnotation", "DEL Block", "DEL InfixExpression: +", "DEL SimpleName: flush", "DEL TextElement: A GWT-compatible substitute for an ", "DEL SimpleName: reader", "DEL Modifier: public", "DEL TextElement: while remaining GWT-compatible.", "DEL PrimitiveType: void", "DEL ExpressionStatement", "DEL TextElement: .", "DEL MethodDeclaration", "DEL SimpleName: CharOutput", "DEL Block", "DEL TextElement: to get the combined output.", "DEL MethodDeclaration", "DEL SimpleName: CharOutput", "DEL ReturnStatement", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: StringBuilder", "DEL SimpleName: c", "DEL TagElement: @code", "DEL TagElement: @code", "DEL PrimitiveType: void", "DEL SimpleName: CharSequence", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleName: dst", "DEL TextElement:  Writer", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL TextElement:  ByteOutput", "DEL Modifier: final", "DEL TextElement:  ByteInput", "DEL SimpleName: Override", "DEL SimpleName: Override", "DEL MethodDeclaration", "DEL SimpleName: checkNotNull", "DEL SimpleName: CharInput", "DEL SimpleName: firstByte", "DEL ClassInstanceCreation", "DEL SimpleName: Override", "DEL PrimitiveType: void", "DEL SimpleName: input", "DEL SimpleName: close", "DEL SimpleType: CharOutput", "DEL Block", "DEL MethodDeclaration", "DEL TypeDeclaration: interface", "DEL ExpressionStatement", "DEL SimpleName: c", "DEL SimpleType: IOException", "DEL MethodInvocation", "DEL TextElement:  Writer", "DEL MethodDeclaration", "DEL SimpleName: CharInput", "DEL TagElement: @code", "DEL ExpressionStatement", "DEL SimpleName: off", "DEL SimpleName: index", "DEL MarkerAnnotation", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: b", "DEL SimpleName: append", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL PrimitiveType: void", "DEL SimpleName: GwtWorkarounds", "DEL Block", "DEL PrimitiveType: char", "DEL Block", "DEL SimpleName: toString", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL Javadoc", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL PrimitiveType: void", "DEL MarkerAnnotation", "DEL TagElement", "DEL SimpleName: IOException", "DEL PrimitiveType: void", "DEL SimpleName: CharOutput", "DEL TextElement:  CharSequence", "DEL SimpleName: close", "DEL MethodDeclaration", "DEL IfStatement", "DEL TextElement:  as an ", "DEL SimpleName: IOException", "DEL ArrayType: byte[]", "DEL TextElement:  CharOutput", "DEL PrimitiveType: int", "DEL SimpleName: output", "DEL Block", "DEL TagElement: @code", "DEL PrimitiveType: int", "DEL MarkerAnnotation", "DEL TagElement", "DEL SimpleName: length", "DEL ReturnStatement", "DEL InfixExpression: <", "DEL TextElement:  InputStream", "DEL SimpleType: ByteInput", "DEL SimpleName: Writer", "DEL Block", "DEL PrimitiveType: int", "DEL Modifier: public", "DEL TextElement: Returns a ", "DEL Javadoc", "DEL TextElement:  method can be used", "DEL StringLiteral: \"OutputStream\"", "DEL InfixExpression: <", "DEL Block", "DEL ExpressionStatement", "DEL TagElement: @code", "DEL Modifier: final", "DEL MethodInvocation", "DEL TextElement:  Reader", "DEL SimpleName: IOException", "DEL TextElement: , and ", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL StringLiteral: \"InputStream\"", "DEL SimpleName: c", "DEL SimpleName: asCharInput", "DEL TextElement:  InputStream", "DEL TextElement:  BaseEncoding", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: CharOutput", "DEL TagElement: @author", "DEL ClassInstanceCreation", "DEL SimpleType: StringBuilder", "DEL Modifier: public", "DEL TextElement:  as a ", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 1", "DEL SimpleType: ByteOutput", "DEL SimpleName: read", "DEL SimpleType: InputStream", "DEL StringLiteral: \"Reader\"", "DEL SimpleType: String", "DEL MethodDeclaration", "DEL PrefixExpression: -", "DEL Javadoc", "DEL Javadoc", "DEL TextElement:  as a ", "DEL SimpleType: IOException", "DEL SimpleName: IOException", "DEL TextElement: Views a ", "DEL ReturnStatement", "DEL MarkerAnnotation", "DEL ReturnStatement", "DEL SimpleType: IOException", "DEL ArrayAccess", "DEL TextElement: .", "DEL SimpleName: Override", "DEL PrimitiveType: byte", "DEL SimpleType: Reader", "DEL SimpleName: ByteInput", "DEL PrimitiveType: byte", "DEL SimpleName: len", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: len", "DEL SimpleName: input", "DEL SimpleType: IOException", "DEL SimpleName: GwtWorkarounds", "DEL SimpleName: b", "DEL TagElement: @code", "DEL MethodDeclaration", "DEL SimpleName: write", "DEL NumberLiteral: 1"]}]}}, {"GwtWorkarounds_diff": {"operations": ["Delete QualifiedName: com.google.common.io(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: com.google.common.base.Preconditions.checkNotNull(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.base.Preconditions.checkPositionIndexes(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: com.google.common.annotations.GwtCompatible(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: com.google.common.annotations.GwtIncompatible(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.io.IOException(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: java.io.InputStream(12)", "Delete ImportDeclaration(13)", "Delete QualifiedName: java.io.OutputStream(14)", "Delete ImportDeclaration(15)", "Delete QualifiedName: java.io.Reader(16)", "Delete ImportDeclaration(17)", "Delete QualifiedName: java.io.Writer(18)", "Delete ImportDeclaration(19)", "Delete TextElement: Provides simple GWT-compatible substitutes for (20)", "Delete TextElement:  InputStream(21)", "Delete TagElement: @code(22)", "Delete TextElement: , (23)", "Delete TextElement:  OutputStream(24)", "Delete TagElement: @code(25)", "Delete TextElement: ,(26)", "Delete TextElement:  Reader(27)", "Delete TagElement: @code(28)", "Delete TextElement: , and (29)", "Delete TextElement:  Writer(30)", "Delete TagElement: @code(31)", "Delete TextElement:  so that (32)", "Delete TextElement:  BaseEncoding(33)", "Delete TagElement: @code(34)", "Delete TextElement:  can use streaming implementations(35)", "Delete TextElement: while remaining GWT-compatible.(36)", "Delete TagElement(37)", "Delete TextElement:  Louis Wasserman(38)", "Delete TagElement: @author(39)", "Delete Javadoc(40)", "Delete SimpleName: GwtCompatible(41)", "Delete SimpleName: emulated(42)", "Delete BooleanLiteral: true(43)", "Delete MemberValuePair(44)", "Delete NormalAnnotation(45)", "Delete Modifier: final(46)", "Delete SimpleName: GwtWorkarounds(47)", "Delete Modifier: private(48)", "Delete SimpleName: GwtWorkarounds(49)", "Delete Block(50)", "Delete MethodDeclaration(51)", "Delete TextElement: A GWT-compatible substitute for a (52)", "Delete TextElement:  Reader(53)", "Delete TagElement: @code(54)", "Delete TextElement: .(55)", "Delete TagElement(56)", "Delete Javadoc(57)", "Delete SimpleName: CharInput(58)", "Delete PrimitiveType: int(59)", "Delete SimpleName: read(60)", "Delete SimpleName: IOException(61)", "Delete SimpleType: IOException(62)", "Delete MethodDeclaration(63)", "Delete PrimitiveType: void(64)", "Delete SimpleName: close(65)", "Delete SimpleName: IOException(66)", "Delete SimpleType: IOException(67)", "Delete MethodDeclaration(68)", "Delete TypeDeclaration: interface(69)", "Delete TextElement: Views a (70)", "Delete TextElement:  Reader(71)", "Delete TagElement: @code(72)", "Delete TextElement:  as a (73)", "Delete TextElement:  CharInput(74)", "Delete TagElement: @code(75)", "Delete TextElement: .(76)", "Delete TagElement(77)", "Delete Javadoc(78)", "Delete SimpleName: GwtIncompatible(79)", "Delete StringLiteral: \"Reader\"(80)", "Delete SingleMemberAnnotation(81)", "Delete Modifier: static(82)", "Delete SimpleName: CharInput(83)", "Delete SimpleType: CharInput(84)", "Delete SimpleName: asCharInput(85)", "Delete Modifier: final(86)", "Delete SimpleName: Reader(87)", "Delete SimpleType: Reader(88)", "Delete SimpleName: reader(89)", "Delete SingleVariableDeclaration(90)", "Delete SimpleName: checkNotNull(91)", "Delete SimpleName: reader(92)", "Delete MethodInvocation(93)", "Delete ExpressionStatement(94)", "Delete SimpleName: CharInput(95)", "Delete SimpleType: CharInput(96)", "Delete SimpleName: Override(97)", "Delete MarkerAnnotation(98)", "Delete Modifier: public(99)", "Delete PrimitiveType: int(100)", "Delete SimpleName: read(101)", "Delete SimpleName: IOException(102)", "Delete SimpleType: IOException(103)", "Delete SimpleName: reader(104)", "Delete SimpleName: read(105)", "Delete MethodInvocation(106)", "Delete ReturnStatement(107)", "Delete Block(108)", "Delete MethodDeclaration(109)", "Delete SimpleName: Override(110)", "Delete MarkerAnnotation(111)", "Delete Modifier: public(112)", "Delete PrimitiveType: void(113)", "Delete SimpleName: close(114)", "Delete SimpleName: IOException(115)", "Delete SimpleType: IOException(116)", "Delete SimpleName: reader(117)", "Delete SimpleName: close(118)", "Delete MethodInvocation(119)", "Delete ExpressionStatement(120)", "Delete Block(121)", "Delete MethodDeclaration(122)", "Delete AnonymousClassDeclaration(123)", "Delete ClassInstanceCreation(124)", "Delete ReturnStatement(125)", "Delete Block(126)", "Delete MethodDeclaration(127)", "Delete TextElement: Views a (128)", "Delete TextElement:  CharSequence(129)", "Delete TagElement: @code(130)", "Delete TextElement:  as a (131)", "Delete TextElement:  CharInput(132)", "Delete TagElement: @code(133)", "Delete TextElement: .(134)", "Delete TagElement(135)", "Delete Javadoc(136)", "Delete Modifier: static(137)", "Delete SimpleName: CharInput(138)", "Delete SimpleType: CharInput(139)", "Delete SimpleName: asCharInput(140)", "Delete Modifier: final(141)", "Delete SimpleName: CharSequence(142)", "Delete SimpleType: CharSequence(143)", "Delete SimpleName: chars(144)", "Delete SingleVariableDeclaration(145)", "Delete SimpleName: checkNotNull(146)", "Delete SimpleName: chars(147)", "Delete MethodInvocation(148)", "Delete ExpressionStatement(149)", "Delete SimpleName: CharInput(150)", "Delete SimpleType: CharInput(151)", "Delete PrimitiveType: int(152)", "Delete SimpleName: index(153)", "Delete NumberLiteral: 0(154)", "Delete VariableDeclarationFragment(155)", "Delete FieldDeclaration(156)", "Delete SimpleName: Override(157)", "Delete MarkerAnnotation(158)", "Delete Modifier: public(159)", "Delete PrimitiveType: int(160)", "Delete SimpleName: read(161)", "Delete SimpleName: index(162)", "Delete SimpleName: chars(163)", "Delete SimpleName: length(164)", "Delete MethodInvocation(165)", "Delete InfixExpression: <(166)", "Delete SimpleName: chars(167)", "Delete SimpleName: charAt(168)", "Delete SimpleName: index(169)", "Delete PostfixExpression: ++(170)", "Delete MethodInvocation(171)", "Delete ReturnStatement(172)", "Delete Block(173)", "Delete NumberLiteral: 1(174)", "Delete PrefixExpression: -(175)", "Delete ReturnStatement(176)", "Delete Block(177)", "Delete IfStatement(178)", "Delete Block(179)", "Delete MethodDeclaration(180)", "Delete SimpleName: Override(181)", "Delete MarkerAnnotation(182)", "Delete Modifier: public(183)", "Delete PrimitiveType: void(184)", "Delete SimpleName: close(185)", "Delete SimpleName: index(186)", "Delete SimpleName: chars(187)", "Delete SimpleName: length(188)", "Delete MethodInvocation(189)", "Delete Assignment: =(190)", "Delete ExpressionStatement(191)", "Delete Block(192)", "Delete MethodDeclaration(193)", "Delete AnonymousClassDeclaration(194)", "Delete ClassInstanceCreation(195)", "Delete ReturnStatement(196)", "Delete Block(197)", "Delete MethodDeclaration(198)", "Delete TextElement: A GWT-compatible substitute for an (199)", "Delete TextElement:  InputStream(200)", "Delete TagElement: @code(201)", "Delete TextElement: .(202)", "Delete TagElement(203)", "Delete Javadoc(204)", "Delete SimpleName: ByteInput(205)", "Delete PrimitiveType: int(206)", "Delete SimpleName: read(207)", "Delete SimpleName: IOException(208)", "Delete SimpleType: IOException(209)", "Delete MethodDeclaration(210)", "Delete PrimitiveType: void(211)", "Delete SimpleName: close(212)", "Delete SimpleName: IOException(213)", "Delete SimpleType: IOException(214)", "Delete MethodDeclaration(215)", "Delete TypeDeclaration: interface(216)", "Delete TextElement: Views a (217)", "Delete TextElement:  ByteInput(218)", "Delete TagElement: @code(219)", "Delete TextElement:  as an (220)", "Delete TextElement:  InputStream(221)", "Delete TagElement: @code(222)", "Delete TextElement: .(223)", "Delete TagElement(224)", "Delete Javadoc(225)", "Delete SimpleName: GwtIncompatible(226)", "Delete StringLiteral: \"InputStream\"(227)", "Delete SingleMemberAnnotation(228)", "Delete Modifier: static(229)", "Delete SimpleName: InputStream(230)", "Delete SimpleType: InputStream(231)", "Delete SimpleName: asInputStream(232)", "Delete Modifier: final(233)", "Delete SimpleName: ByteInput(234)", "Delete SimpleType: ByteInput(235)", "Delete SimpleName: input(236)", "Delete SingleVariableDeclaration(237)", "Delete SimpleName: checkNotNull(238)", "Delete SimpleName: input(239)", "Delete MethodInvocation(240)", "Delete ExpressionStatement(241)", "Delete SimpleName: InputStream(242)", "Delete SimpleType: InputStream(243)", "Delete SimpleName: Override(244)", "Delete MarkerAnnotation(245)", "Delete Modifier: public(246)", "Delete PrimitiveType: int(247)", "Delete SimpleName: read(248)", "Delete SimpleName: IOException(249)", "Delete SimpleType: IOException(250)", "Delete SimpleName: input(251)", "Delete SimpleName: read(252)", "Delete MethodInvocation(253)", "Delete ReturnStatement(254)", "Delete Block(255)", "Delete MethodDeclaration(256)", "Delete SimpleName: Override(257)", "Delete MarkerAnnotation(258)", "Delete Modifier: public(259)", "Delete PrimitiveType: int(260)", "Delete SimpleName: read(261)", "Delete PrimitiveType: byte(262)", "Delete Dimension(263)", "Delete ArrayType: byte[](264)", "Delete SimpleName: b(265)", "Delete SingleVariableDeclaration(266)", "Delete PrimitiveType: int(267)", "Delete SimpleName: off(268)", "Delete SingleVariableDeclaration(269)", "Delete PrimitiveType: int(270)", "Delete SimpleName: len(271)", "Delete SingleVariableDeclaration(272)", "Delete SimpleName: IOException(273)", "Delete SimpleType: IOException(274)", "Delete SimpleName: checkNotNull(275)", "Delete SimpleName: b(276)", "Delete MethodInvocation(277)", "Delete ExpressionStatement(278)", "Delete SimpleName: checkPositionIndexes(279)", "Delete SimpleName: off(280)", "Delete SimpleName: off(281)", "Delete SimpleName: len(282)", "Delete InfixExpression: +(283)", "Delete QualifiedName: b.length(284)", "Delete MethodInvocation(285)", "Delete ExpressionStatement(286)", "Delete SimpleName: len(287)", "Delete NumberLiteral: 0(288)", "Delete InfixExpression: ==(289)", "Delete NumberLiteral: 0(290)", "Delete ReturnStatement(291)", "Delete Block(292)", "Delete IfStatement(293)", "Delete PrimitiveType: int(294)", "Delete SimpleName: firstByte(295)", "Delete SimpleName: read(296)", "Delete MethodInvocation(297)", "Delete VariableDeclarationFragment(298)", "Delete VariableDeclarationStatement(299)", "Delete SimpleName: firstByte(300)", "Delete NumberLiteral: 1(301)", "Delete PrefixExpression: -(302)", "Delete InfixExpression: ==(303)", "Delete NumberLiteral: 1(304)", "Delete PrefixExpression: -(305)", "Delete ReturnStatement(306)", "Delete Block(307)", "Delete IfStatement(308)", "Delete SimpleName: b(309)", "Delete SimpleName: off(310)", "Delete ArrayAccess(311)", "Delete PrimitiveType: byte(312)", "Delete SimpleName: firstByte(313)", "Delete CastExpression(314)", "Delete Assignment: =(315)", "Delete ExpressionStatement(316)", "Delete PrimitiveType: int(317)", "Delete SimpleName: dst(318)", "Delete NumberLiteral: 1(319)", "Delete VariableDeclarationFragment(320)", "Delete VariableDeclarationExpression(321)", "Delete SimpleName: dst(322)", "Delete SimpleName: len(323)", "Delete InfixExpression: <(324)", "Delete SimpleName: dst(325)", "Delete PostfixExpression: ++(326)", "Delete PrimitiveType: int(327)", "Delete SimpleName: readByte(328)", "Delete SimpleName: read(329)", "Delete MethodInvocation(330)", "Delete VariableDeclarationFragment(331)", "Delete VariableDeclarationStatement(332)", "Delete SimpleName: readByte(333)", "Delete NumberLiteral: 1(334)", "Delete PrefixExpression: -(335)", "Delete InfixExpression: ==(336)", "Delete SimpleName: dst(337)", "Delete ReturnStatement(338)", "Delete Block(339)", "Delete IfStatement(340)", "Delete SimpleName: b(341)", "Delete SimpleName: off(342)", "Delete SimpleName: dst(343)", "Delete InfixExpression: +(344)", "Delete ArrayAccess(345)", "Delete PrimitiveType: byte(346)", "Delete SimpleName: readByte(347)", "Delete CastExpression(348)", "Delete Assignment: =(349)", "Delete ExpressionStatement(350)", "Delete Block(351)", "Delete ForStatement(352)", "Delete SimpleName: len(353)", "Delete ReturnStatement(354)", "Delete Block(355)", "Delete MethodDeclaration(356)", "Delete SimpleName: Override(357)", "Delete MarkerAnnotation(358)", "Delete Modifier: public(359)", "Delete PrimitiveType: void(360)", "Delete SimpleName: close(361)", "Delete SimpleName: IOException(362)", "Delete SimpleType: IOException(363)", "Delete SimpleName: input(364)", "Delete SimpleName: close(365)", "Delete MethodInvocation(366)", "Delete ExpressionStatement(367)", "Delete Block(368)", "Delete MethodDeclaration(369)", "Delete AnonymousClassDeclaration(370)", "Delete ClassInstanceCreation(371)", "Delete ReturnStatement(372)", "Delete Block(373)", "Delete MethodDeclaration(374)", "Delete TextElement: A GWT-compatible substitute for an (375)", "Delete TextElement:  OutputStream(376)", "Delete TagElement: @code(377)", "Delete TextElement: .(378)", "Delete TagElement(379)", "Delete Javadoc(380)", "Delete SimpleName: ByteOutput(381)", "Delete PrimitiveType: void(382)", "Delete SimpleName: write(383)", "Delete PrimitiveType: byte(384)", "Delete SimpleName: b(385)", "Delete SingleVariableDeclaration(386)", "Delete SimpleName: IOException(387)", "Delete SimpleType: IOException(388)", "Delete MethodDeclaration(389)", "Delete PrimitiveType: void(390)", "Delete SimpleName: flush(391)", "Delete SimpleName: IOException(392)", "Delete SimpleType: IOException(393)", "Delete MethodDeclaration(394)", "Delete PrimitiveType: void(395)", "Delete SimpleName: close(396)", "Delete SimpleName: IOException(397)", "Delete SimpleType: IOException(398)", "Delete MethodDeclaration(399)", "Delete TypeDeclaration: interface(400)", "Delete TextElement: Views a (401)", "Delete TextElement:  ByteOutput(402)", "Delete TagElement: @code(403)", "Delete TextElement:  as an (404)", "Delete TextElement:  OutputStream(405)", "Delete TagElement: @code(406)", "Delete TextElement: .(407)", "Delete TagElement(408)", "Delete Javadoc(409)", "Delete SimpleName: GwtIncompatible(410)", "Delete StringLiteral: \"OutputStream\"(411)", "Delete SingleMemberAnnotation(412)", "Delete Modifier: static(413)", "Delete SimpleName: OutputStream(414)", "Delete SimpleType: OutputStream(415)", "Delete SimpleName: asOutputStream(416)", "Delete Modifier: final(417)", "Delete SimpleName: ByteOutput(418)", "Delete SimpleType: ByteOutput(419)", "Delete SimpleName: output(420)", "Delete SingleVariableDeclaration(421)", "Delete SimpleName: checkNotNull(422)", "Delete SimpleName: output(423)", "Delete MethodInvocation(424)", "Delete ExpressionStatement(425)", "Delete SimpleName: OutputStream(426)", "Delete SimpleType: OutputStream(427)", "Delete SimpleName: Override(428)", "Delete MarkerAnnotation(429)", "Delete Modifier: public(430)", "Delete PrimitiveType: void(431)", "Delete SimpleName: write(432)", "Delete PrimitiveType: int(433)", "Delete SimpleName: b(434)", "Delete SingleVariableDeclaration(435)", "Delete SimpleName: IOException(436)", "Delete SimpleType: IOException(437)", "Delete SimpleName: output(438)", "Delete SimpleName: write(439)", "Delete PrimitiveType: byte(440)", "Delete SimpleName: b(441)", "Delete CastExpression(442)", "Delete MethodInvocation(443)", "Delete ExpressionStatement(444)", "Delete Block(445)", "Delete MethodDeclaration(446)", "Delete SimpleName: Override(447)", "Delete MarkerAnnotation(448)", "Delete Modifier: public(449)", "Delete PrimitiveType: void(450)", "Delete SimpleName: flush(451)", "Delete SimpleName: IOException(452)", "Delete SimpleType: IOException(453)", "Delete SimpleName: output(454)", "Delete SimpleName: flush(455)", "Delete MethodInvocation(456)", "Delete ExpressionStatement(457)", "Delete Block(458)", "Delete MethodDeclaration(459)", "Delete SimpleName: Override(460)", "Delete MarkerAnnotation(461)", "Delete Modifier: public(462)", "Delete PrimitiveType: void(463)", "Delete SimpleName: close(464)", "Delete SimpleName: IOException(465)", "Delete SimpleType: IOException(466)", "Delete SimpleName: output(467)", "Delete SimpleName: close(468)", "Delete MethodInvocation(469)", "Delete ExpressionStatement(470)", "Delete Block(471)", "Delete MethodDeclaration(472)", "Delete AnonymousClassDeclaration(473)", "Delete ClassInstanceCreation(474)", "Delete ReturnStatement(475)", "Delete Block(476)", "Delete MethodDeclaration(477)", "Delete TextElement: A GWT-compatible substitute for a (478)", "Delete TextElement:  Writer(479)", "Delete TagElement: @code(480)", "Delete TextElement: .(481)", "Delete TagElement(482)", "Delete Javadoc(483)", "Delete SimpleName: CharOutput(484)", "Delete PrimitiveType: void(485)", "Delete SimpleName: write(486)", "Delete PrimitiveType: char(487)", "Delete SimpleName: c(488)", "Delete SingleVariableDeclaration(489)", "Delete SimpleName: IOException(490)", "Delete SimpleType: IOException(491)", "Delete MethodDeclaration(492)", "Delete PrimitiveType: void(493)", "Delete SimpleName: flush(494)", "Delete SimpleName: IOException(495)", "Delete SimpleType: IOException(496)", "Delete MethodDeclaration(497)", "Delete PrimitiveType: void(498)", "Delete SimpleName: close(499)", "Delete SimpleName: IOException(500)", "Delete SimpleType: IOException(501)", "Delete MethodDeclaration(502)", "Delete TypeDeclaration: interface(503)", "Delete TextElement: Views a (504)", "Delete TextElement:  Writer(505)", "Delete TagElement: @code(506)", "Delete TextElement:  as a (507)", "Delete TextElement:  CharOutput(508)", "Delete TagElement: @code(509)", "Delete TextElement: .(510)", "Delete TagElement(511)", "Delete Javadoc(512)", "Delete SimpleName: GwtIncompatible(513)", "Delete StringLiteral: \"Writer\"(514)", "Delete SingleMemberAnnotation(515)", "Delete Modifier: static(516)", "Delete SimpleName: CharOutput(517)", "Delete SimpleType: CharOutput(518)", "Delete SimpleName: asCharOutput(519)", "Delete Modifier: final(520)", "Delete SimpleName: Writer(521)", "Delete SimpleType: Writer(522)", "Delete SimpleName: writer(523)", "Delete SingleVariableDeclaration(524)", "Delete SimpleName: checkNotNull(525)", "Delete SimpleName: writer(526)", "Delete MethodInvocation(527)", "Delete ExpressionStatement(528)", "Delete SimpleName: CharOutput(529)", "Delete SimpleType: CharOutput(530)", "Delete SimpleName: Override(531)", "Delete MarkerAnnotation(532)", "Delete Modifier: public(533)", "Delete PrimitiveType: void(534)", "Delete SimpleName: write(535)", "Delete PrimitiveType: char(536)", "Delete SimpleName: c(537)", "Delete SingleVariableDeclaration(538)", "Delete SimpleName: IOException(539)", "Delete SimpleType: IOException(540)", "Delete SimpleName: writer(541)", "Delete SimpleName: append(542)", "Delete SimpleName: c(543)", "Delete MethodInvocation(544)", "Delete ExpressionStatement(545)", "Delete Block(546)", "Delete MethodDeclaration(547)", "Delete SimpleName: Override(548)", "Delete MarkerAnnotation(549)", "Delete Modifier: public(550)", "Delete PrimitiveType: void(551)", "Delete SimpleName: flush(552)", "Delete SimpleName: IOException(553)", "Delete SimpleType: IOException(554)", "Delete SimpleName: writer(555)", "Delete SimpleName: flush(556)", "Delete MethodInvocation(557)", "Delete ExpressionStatement(558)", "Delete Block(559)", "Delete MethodDeclaration(560)", "Delete SimpleName: Override(561)", "Delete MarkerAnnotation(562)", "Delete Modifier: public(563)", "Delete PrimitiveType: void(564)", "Delete SimpleName: close(565)", "Delete SimpleName: IOException(566)", "Delete SimpleType: IOException(567)", "Delete SimpleName: writer(568)", "Delete SimpleName: close(569)", "Delete MethodInvocation(570)", "Delete ExpressionStatement(571)", "Delete Block(572)", "Delete MethodDeclaration(573)", "Delete AnonymousClassDeclaration(574)", "Delete ClassInstanceCreation(575)", "Delete ReturnStatement(576)", "Delete Block(577)", "Delete MethodDeclaration(578)", "Delete TextElement: Returns a (579)", "Delete TextElement:  CharOutput(580)", "Delete TagElement: @code(581)", "Delete TextElement:  whose (582)", "Delete TextElement:  toString()(583)", "Delete TagElement: @code(584)", "Delete TextElement:  method can be used(585)", "Delete TextElement: to get the combined output.(586)", "Delete TagElement(587)", "Delete Javadoc(588)", "Delete Modifier: static(589)", "Delete SimpleName: CharOutput(590)", "Delete SimpleType: CharOutput(591)", "Delete SimpleName: stringBuilderOutput(592)", "Delete PrimitiveType: int(593)", "Delete SimpleName: initialSize(594)", "Delete SingleVariableDeclaration(595)", "Delete Modifier: final(596)", "Delete SimpleName: StringBuilder(597)", "Delete SimpleType: StringBuilder(598)", "Delete SimpleName: builder(599)", "Delete SimpleName: StringBuilder(600)", "Delete SimpleType: StringBuilder(601)", "Delete SimpleName: initialSize(602)", "Delete ClassInstanceCreation(603)", "Delete VariableDeclarationFragment(604)", "Delete VariableDeclarationStatement(605)", "Delete SimpleName: CharOutput(606)", "Delete SimpleType: CharOutput(607)", "Delete SimpleName: Override(608)", "Delete MarkerAnnotation(609)", "Delete Modifier: public(610)", "Delete PrimitiveType: void(611)", "Delete SimpleName: write(612)", "Delete PrimitiveType: char(613)", "Delete SimpleName: c(614)", "Delete SingleVariableDeclaration(615)", "Delete SimpleName: builder(616)", "Delete SimpleName: append(617)", "Delete SimpleName: c(618)", "Delete MethodInvocation(619)", "Delete ExpressionStatement(620)", "Delete Block(621)", "Delete MethodDeclaration(622)", "Delete SimpleName: Override(623)", "Delete MarkerAnnotation(624)", "Delete Modifier: public(625)", "Delete PrimitiveType: void(626)", "Delete SimpleName: flush(627)", "Delete Block(628)", "Delete MethodDeclaration(629)", "Delete SimpleName: Override(630)", "Delete MarkerAnnotation(631)", "Delete Modifier: public(632)", "Delete PrimitiveType: void(633)", "Delete SimpleName: close(634)", "Delete Block(635)", "Delete MethodDeclaration(636)", "Delete SimpleName: Override(637)", "Delete MarkerAnnotation(638)", "Delete Modifier: public(639)", "Delete SimpleName: String(640)", "Delete SimpleType: String(641)", "Delete SimpleName: toString(642)", "Delete SimpleName: builder(643)", "Delete SimpleName: toString(644)", "Delete MethodInvocation(645)", "Delete ReturnStatement(646)", "Delete Block(647)", "Delete MethodDeclaration(648)", "Delete AnonymousClassDeclaration(649)", "Delete ClassInstanceCreation(650)", "Delete ReturnStatement(651)", "Delete Block(652)", "Delete MethodDeclaration(653)", "Delete TypeDeclaration: class(654)"]}}], "commit_stats": [{"total_files": 7, "deleted_files": 2, "testing": "True", "maintenance": "False", "build": "False"}]}