{"application": "google-error-prone", "csha": "947ce04b042d82fe3d3a8cb2c2658cc726efc516", "files": [{"LocalStore_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 4", "operations": ["INS QualifiedName: javax.lang.model.element.ElementKind.EXCEPTION_PARAMETER to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 4"]}, {"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS QualifiedName: javax.lang.model.element.ElementKind.LOCAL_VARIABLE to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 5"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS QualifiedName: javax.lang.model.element.ElementKind.PARAMETER to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 6"]}, {"root": "INS ImportDeclaration to CompilationUnit at 13", "operations": ["INS QualifiedName: org.checkerframework.javacutil.TreeUtils to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 13"]}, {"root": "UPDATE from com.google.common.base.Equivalence to com.google.common.base.Preconditions.checkArgument", "operations": ["UPD QualifiedName: com.google.common.base.Equivalence from com.google.common.base.Equivalence to com.google.common.base.Preconditions.checkArgument"]}, {"root": "UPDATE from org.checkerframework.dataflow.cfg.node.Node to org.checkerframework.dataflow.cfg.node.VariableDeclarationNode", "operations": ["UPD QualifiedName: org.checkerframework.dataflow.cfg.node.Node from org.checkerframework.dataflow.cfg.node.Node to org.checkerframework.dataflow.cfg.node.VariableDeclarationNode"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 21", "operations": ["INS SimpleName: element to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 3", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleName: PARAMETER to InfixExpression: == at 1", "INS Block to MethodDeclaration at 5", "INS InfixExpression: || to MethodInvocation at 1", "INS StringLiteral: \"unexpected element type: %s (%s)\" to MethodInvocation at 2", "INS InfixExpression: == to InfixExpression: || at 1", "INS SimpleName: element to MethodInvocation at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: checkArgument to MethodInvocation at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS InfixExpression: || to InfixExpression: || at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: EXCEPTION_PARAMETER to InfixExpression: == at 1", "INS MethodDeclaration to TypeDeclaration: class at 21", "INS SimpleName: LOCAL_VARIABLE to InfixExpression: == at 1", "INS InfixExpression: == to InfixExpression: || at 0", "INS SimpleName: element to MethodInvocation at 0"]}, {"root": "UPDATE from ImmutableMap<Equivalence.Wrapper<Node>,V> to ImmutableMap<Element,V>", "operations": ["UPD ParameterizedType: ImmutableMap<Equivalence.Wrapper<Node>,V> from ImmutableMap<Equivalence.Wrapper<Node>,V> to ImmutableMap<Element,V>"]}, {"root": "INS Javadoc to MethodDeclaration at 0", "operations": ["INS TextElement: ). to TagElement at 8", "INS TextElement:  must come from a call to to TagElement at 2", "INS SimpleName: VariableDeclarationNode to MethodRef at 0", "INS SimpleType: com.sun.source.tree.VariableTree to MethodRefParameter at 0", "INS TagElement: @code to TagElement at 1", "INS TagElement: @link to TagElement at 5", "INS MethodRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 7", "INS SimpleName: getTree to MethodRef at 1", "INS MethodRef to TagElement: @link at 0", "INS TagElement to Javadoc at 0", "INS SimpleName: LocalVariableNode to MethodRef at 0", "INS MethodRef to TagElement: @link at 0", "INS SimpleName: getElement to MethodRef at 1", "INS SimpleName: TreeUtils to MethodRef at 0", "INS TagElement: @link to TagElement at 3", "INS QualifiedName: com.sun.source.tree.VariableTree to SimpleType: com.sun.source.tree.VariableTree at 0", "INS Javadoc to MethodDeclaration at 0", "INS TextElement:  element to TagElement: @code at 0", "INS MethodRefParameter to MethodRef at 2", "INS TextElement:  or to TagElement at 4", "INS SimpleName: elementFromDeclaration to MethodRef at 1", "INS TextElement: Returns the value for the given variable.  to TagElement at 0", "INS TextElement: ( to TagElement at 6"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 8", "operations": ["INS SimpleName: elementFromDeclaration to MethodRef at 1", "INS TagElement: @link to TagElement at 3", "INS TextElement: Sets the value for the given variable.  to TagElement at 0", "INS SimpleType: com.sun.source.tree.VariableTree to MethodRefParameter at 0", "INS TagElement to Javadoc at 0", "INS TagElement: @link to TagElement at 5", "INS SimpleName: VariableDeclarationNode to MethodRef at 0", "INS QualifiedName: com.sun.source.tree.VariableTree to SimpleType: com.sun.source.tree.VariableTree at 0", "INS SimpleName: getElement to MethodRef at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: ). to TagElement at 8", "INS TextElement:  must come from a call to to TagElement at 2", "INS SimpleName: TreeUtils to MethodRef at 0", "INS TextElement: ( to TagElement at 6", "INS TextElement:  or to TagElement at 4", "INS MethodRef to TagElement: @link at 0", "INS MethodDeclaration to TypeDeclaration: class at 8", "INS TagElement: @code to TagElement at 1", "INS TagElement: @link to TagElement at 7", "INS MethodRef to TagElement: @link at 0", "INS SimpleName: getTree to MethodRef at 1", "INS MethodRefParameter to MethodRef at 2", "INS SimpleName: LocalVariableNode to MethodRef at 0", "INS TextElement:  element to TagElement: @code at 0", "INS MethodRef to TagElement: @link at 0"]}, {"root": "UPDATE from boolean to void", "operations": ["UPD PrimitiveType: boolean from boolean to void"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV PrimitiveType: boolean to MethodDeclaration at 2", "MOV SimpleName: doEquivalent to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "UPDATE from doEquivalent to checkElementType", "operations": ["UPD SimpleName: doEquivalent from doEquivalent to checkElementType"]}, {"root": "UPDATE from Node to Element", "operations": ["UPD SimpleType: Node from Node to Element", "UPD SimpleName: Node from Node to Element", "UPD SimpleName: Node from Node to Element", "UPD SimpleName: Node from Node to Element", "UPD SimpleName: Node from Node to Element", "UPD SimpleName: Node from Node to Element", "UPD SimpleType: Node from Node to Element", "UPD SimpleType: Node from Node to Element", "UPD SimpleType: Node from Node to Element", "UPD SimpleType: Node from Node to Element", "UPD SimpleName: Node from Node to Element"]}, {"root": "MOVE from ParameterizedType: ImmutableMap<Equivalence.Wrapper<Node>,V>", "operations": ["MOV SimpleType: Node to ParameterizedType: ImmutableMap<Equivalence.Wrapper<Node>,V> at 1"]}, {"root": "UPDATE from Map<Equivalence.Wrapper<Node>,V> to Map<Element,V>", "operations": ["UPD ParameterizedType: Map<Equivalence.Wrapper<Node>,V> from Map<Equivalence.Wrapper<Node>,V> to Map<Element,V>", "UPD ParameterizedType: Map<Equivalence.Wrapper<Node>,V> from Map<Equivalence.Wrapper<Node>,V> to Map<Element,V>"]}, {"root": "UPDATE from getElement to element", "operations": ["UPD SimpleName: getElement from getElement to element", "UPD SimpleName: equals from equals to element", "UPD SimpleName: node from node to element", "UPD SimpleName: node from node to element", "UPD SimpleName: node from node to element", "UPD SimpleName: node from node to element"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: checkElementType to MethodInvocation at 0", "INS SimpleName: element to MethodInvocation at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 6", "MOV SimpleName: getInformation to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Modifier: public to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV ParameterizedType: Builder<V> to MethodDeclaration at 2"]}, {"root": "UPDATE from getInformation to setInformation", "operations": ["UPD SimpleName: getInformation from getInformation to setInformation"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Element to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: element to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: element to SingleVariableDeclaration at 1"]}, {"root": "MOVE from ParameterizedType: Map<Equivalence.Wrapper<Node>,V>", "operations": ["MOV SimpleType: Node to ParameterizedType: Map<Equivalence.Wrapper<Node>,V> at 1"]}, {"root": "MOVE from ParameterizedType: Map<Equivalence.Wrapper<Node>,V>", "operations": ["MOV SimpleType: Node to ParameterizedType: Map<Equivalence.Wrapper<Node>,V> at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: element to MethodInvocation at 1", "INS SimpleName: checkElementType to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Element to SingleVariableDeclaration at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getElement to MethodInvocation at 4"]}, {"root": "UPDATE from wrap to checkNotNull", "operations": ["UPD SimpleName: wrap from wrap to checkNotNull", "UPD SimpleName: wrap from wrap to checkNotNull"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: get to MethodInvocation at 1", "MOV SimpleName: contents to MethodInvocation at 0"]}, {"root": "UPDATE from get to put", "operations": ["UPD SimpleName: get from get to put"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "MOVE from SimpleType: Element", "operations": ["MOV SimpleName: Node to SimpleType: Element at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: equals to MethodInvocation at 0", "MOV SimpleName: b to MethodInvocation at 1"]}, {"root": "UPDATE from b to getKind", "operations": ["UPD SimpleName: b from b to getKind", "UPD SimpleName: getElement from getElement to getKind", "UPD SimpleName: getElement from getElement to getKind"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getElement to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getElement to MethodInvocation at 1"]}, {"root": "DEL ParameterizedType: Equivalence.Wrapper<Node>", "operations": ["DEL SimpleType: Equivalence.Wrapper", "DEL QualifiedName: Equivalence.Wrapper", "DEL ParameterizedType: Equivalence.Wrapper<Node>"]}, {"root": "DEL ParameterizedType: Equivalence.Wrapper<Node>", "operations": ["DEL QualifiedName: Equivalence.Wrapper", "DEL SimpleType: Equivalence.Wrapper", "DEL ParameterizedType: Equivalence.Wrapper<Node>"]}, {"root": "DEL QualifiedName: NodeEquivalance.INSTANCE", "operations": ["DEL QualifiedName: NodeEquivalance.INSTANCE"]}, {"root": "DEL ParameterizedType: Equivalence.Wrapper<Node>", "operations": ["DEL QualifiedName: Equivalence.Wrapper", "DEL SimpleType: Equivalence.Wrapper", "DEL ParameterizedType: Equivalence.Wrapper<Node>"]}, {"root": "DEL QualifiedName: NodeEquivalance.INSTANCE", "operations": ["DEL QualifiedName: NodeEquivalance.INSTANCE"]}, {"root": "DEL ReturnStatement", "operations": ["DEL MethodInvocation", "DEL ReturnStatement"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: Node", "DEL SimpleName: node", "DEL SimpleName: Node", "DEL SimpleName: wrap", "DEL Modifier: public", "DEL SimpleName: put", "DEL SimpleName: setInformation", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: node", "DEL QualifiedName: NodeEquivalance.INSTANCE", "DEL MethodInvocation", "DEL SimpleName: contents"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL SimpleName: V", "DEL SimpleType: V", "DEL MethodDeclaration"]}, {"root": "DEL ParameterizedType: Equivalence.Wrapper<Node>", "operations": ["DEL SimpleType: Node", "DEL QualifiedName: Equivalence.Wrapper", "DEL SimpleType: Equivalence.Wrapper", "DEL ParameterizedType: Equivalence.Wrapper<Node>"]}, {"root": "DEL SimpleType: Node", "operations": ["DEL SimpleType: Node", "DEL SimpleName: Node"]}, {"root": "DEL SimpleName: a", "operations": ["DEL SimpleName: a"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TypeDeclaration: class", "DEL SimpleName: Node", "DEL SimpleType: NodeEquivalance", "DEL InstanceofExpression", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: equals", "DEL ParenthesizedExpression", "DEL SimpleName: Node", "DEL SimpleType: LocalVariableNode", "DEL SimpleType: Node", "DEL SimpleType: LocalVariableNode", "DEL ParenthesizedExpression", "DEL SimpleType: LocalVariableNode", "DEL SimpleName: bEl", "DEL Modifier: static", "DEL SimpleName: NodeEquivalance", "DEL VariableDeclarationFragment", "DEL SimpleName: hashCode", "DEL VariableDeclarationStatement", "DEL SimpleType: LocalVariableNode", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: Equivalence", "DEL SimpleName: n", "DEL MarkerAnnotation", "DEL SimpleName: aEl", "DEL Modifier: final", "DEL Modifier: protected", "DEL SimpleName: n", "DEL MethodInvocation", "DEL SimpleName: INSTANCE", "DEL SimpleType: LocalVariableNode", "DEL SimpleName: LocalVariableNode", "DEL Modifier: protected", "DEL SimpleName: a", "DEL SimpleName: NodeEquivalance", "DEL SimpleName: NodeEquivalance", "DEL IfStatement", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL SimpleName: a", "DEL SimpleName: n", "DEL SimpleName: n", "DEL MethodInvocation", "DEL ParameterizedType: Equivalence<Node>", "DEL Block", "DEL SimpleName: Override", "DEL SimpleName: b", "DEL ReturnStatement", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: LocalVariableNode", "DEL PrimitiveType: int", "DEL Modifier: private", "DEL SimpleName: Equivalence", "DEL Block", "DEL SimpleName: LocalVariableNode", "DEL ParenthesizedExpression", "DEL SimpleName: b", "DEL SimpleName: bEl", "DEL SimpleName: aEl", "DEL SimpleName: doHash", "DEL SimpleType: Node", "DEL InstanceofExpression", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL ClassInstanceCreation", "DEL SimpleName: Node", "DEL SimpleName: LocalVariableNode", "DEL SingleVariableDeclaration", "DEL SimpleType: LocalVariableNode", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL SimpleName: hashCode", "DEL SimpleName: LocalVariableNode", "DEL MethodDeclaration", "DEL SimpleType: NodeEquivalance", "DEL ReturnStatement", "DEL SimpleName: a", "DEL MethodInvocation", "DEL CastExpression", "DEL IfStatement", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: Override", "DEL Modifier: static", "DEL MarkerAnnotation", "DEL InfixExpression: &&", "DEL SimpleName: LocalVariableNode", "DEL VariableDeclarationStatement", "DEL SimpleName: b", "DEL SimpleType: Node"]}]}}, {"LocalStore_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(571) at 1", "Insert ImportDeclaration(9) into CompilationUnit(571) at 4", "Insert ImportDeclaration(11) into CompilationUnit(571) at 5", "Insert ImportDeclaration(13) into CompilationUnit(571) at 6", "Insert ImportDeclaration(27) into CompilationUnit(571) at 13", "Update QualifiedName: com.google.common.base.Equivalence(6) to com.google.common.base.Preconditions.checkArgument", "Insert QualifiedName: javax.lang.model.element.ElementKind.EXCEPTION_PARAMETER(8) into ImportDeclaration(9) at 0", "Insert QualifiedName: javax.lang.model.element.ElementKind.LOCAL_VARIABLE(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: javax.lang.model.element.ElementKind.PARAMETER(12) into ImportDeclaration(13) at 0", "Update QualifiedName: org.checkerframework.dataflow.cfg.node.Node(18) to org.checkerframework.dataflow.cfg.node.VariableDeclarationNode", "Insert QualifiedName: org.checkerframework.javacutil.TreeUtils(26) into ImportDeclaration(27) at 0", "Insert MethodDeclaration(569) into TypeDeclaration: class(570) at 21", "Update ParameterizedType: ImmutableMap<Equivalence.Wrapper<Node>,V>(125) to ImmutableMap<Element,V>", "Insert Javadoc(179) into MethodDeclaration(200) at 0", "Insert MethodDeclaration(336) into TypeDeclaration: class(354) at 8", "Insert Modifier: private(535) into MethodDeclaration(569) at 0", "Insert Modifier: static(536) into MethodDeclaration(569) at 1", "Update PrimitiveType: boolean(524) to void", "Move PrimitiveType: boolean(524) into MethodDeclaration(569) at 2", "Update SimpleName: doEquivalent(525) to checkElementType", "Move SimpleName: doEquivalent(525) into MethodDeclaration(569) at 3", "Move SingleVariableDeclaration(529) into MethodDeclaration(569) at 4", "Insert Block(568) into MethodDeclaration(569) at 5", "Update SimpleType: Node(121) to Element", "Move SimpleType: Node(121) into ParameterizedType: ImmutableMap<Element,V>(130) at 1", "Update ParameterizedType: Map<Equivalence.Wrapper<Node>,V>(140) to Map<Element,V>", "Insert TagElement(178) into Javadoc(179) at 0", "Update SimpleType: Node(159) to Element", "Update SimpleName: node(160) to element", "Insert ExpressionStatement(191) into Block(199) at 0", "Update ParameterizedType: Map<Equivalence.Wrapper<Node>,V>(232) to Map<Element,V>", "Insert Javadoc(303) into MethodDeclaration(336) at 0", "Move Modifier: public(284) into MethodDeclaration(336) at 1", "Move ParameterizedType: Builder<V>(259) into MethodDeclaration(336) at 2", "Update SimpleName: getInformation(287) to setInformation", "Move SimpleName: getInformation(287) into MethodDeclaration(336) at 3", "Move SingleVariableDeclaration(291) into MethodDeclaration(336) at 4", "Move SingleVariableDeclaration(268) into MethodDeclaration(336) at 5", "Move Block(300) into MethodDeclaration(336) at 6", "Move SimpleType: Element(544) into SingleVariableDeclaration(542) at 0", "Insert SimpleName: element(541) into SingleVariableDeclaration(542) at 1", "Insert ExpressionStatement(567) into Block(568) at 0", "Update SimpleName: Node(120) to Element", "Update SimpleType: Node(136) to Element", "Move SimpleType: Node(136) into ParameterizedType: Map<Element,V>(142) at 1", "Insert TextElement: Returns the value for the given variable. (156) into TagElement(178) at 0", "Insert TagElement: @code(158) into TagElement(178) at 1", "Insert TextElement:  must come from a call to(159) into TagElement(178) at 2", "Insert TagElement: @link(163) into TagElement(178) at 3", "Insert TextElement:  or(164) into TagElement(178) at 4", "Insert TagElement: @link(171) into TagElement(178) at 5", "Insert TextElement: ((172) into TagElement(178) at 6", "Insert TagElement: @link(176) into TagElement(178) at 7", "Insert TextElement: ).(177) into TagElement(178) at 8", "Update SimpleName: Node(158) to Element", "Insert MethodInvocation(190) into ExpressionStatement(191) at 0", "Update SimpleType: Node(228) to Element", "Move SimpleType: Node(228) into ParameterizedType: Map<Element,V>(258) at 1", "Insert TagElement(302) into Javadoc(303) at 0", "Update SimpleType: Node(289) to Element", "Update SimpleName: node(290) to element", "Insert ExpressionStatement(322) into Block(335) at 0", "Insert ExpressionStatement(332) into Block(335) at 1", "Move ReturnStatement(281) into Block(335) at 2", "Insert MethodInvocation(566) into ExpressionStatement(567) at 0", "Update SimpleName: Node(135) to Element", "Insert TextElement:  element(157) into TagElement: @code(158) at 0", "Insert MethodRef(162) into TagElement: @link(163) at 0", "Insert MethodRef(170) into TagElement: @link(171) at 0", "Insert MethodRef(175) into TagElement: @link(176) at 0", "Insert SimpleName: checkElementType(188) into MethodInvocation(190) at 0", "Insert SimpleName: element(189) into MethodInvocation(190) at 1", "Update SimpleName: Node(227) to Element", "Insert TextElement: Sets the value for the given variable. (280) into TagElement(302) at 0", "Insert TagElement: @code(282) into TagElement(302) at 1", "Insert TextElement:  must come from a call to(283) into TagElement(302) at 2", "Insert TagElement: @link(287) into TagElement(302) at 3", "Insert TextElement:  or(288) into TagElement(302) at 4", "Insert TagElement: @link(295) into TagElement(302) at 5", "Insert TextElement: ((296) into TagElement(302) at 6", "Insert TagElement: @link(300) into TagElement(302) at 7", "Insert TextElement: ).(301) into TagElement(302) at 8", "Update SimpleName: Node(288) to Element", "Insert MethodInvocation(321) into ExpressionStatement(322) at 0", "Insert MethodInvocation(331) into ExpressionStatement(332) at 0", "Move SimpleType: Element(556) into SingleVariableDeclaration(402) at 0", "Insert SimpleName: checkArgument(543) into MethodInvocation(566) at 0", "Insert InfixExpression: ||(560) into MethodInvocation(566) at 1", "Insert StringLiteral: \"unexpected element type: %s (%s)\"(561) into MethodInvocation(566) at 2", "Insert MethodInvocation(564) into MethodInvocation(566) at 3", "Update SimpleName: getElement(599) to element", "Move SimpleName: getElement(599) into MethodInvocation(566) at 4", "Insert SimpleName: LocalVariableNode(160) into MethodRef(162) at 0", "Insert SimpleName: getElement(161) into MethodRef(162) at 1", "Insert SimpleName: TreeUtils(165) into MethodRef(170) at 0", "Insert SimpleName: elementFromDeclaration(166) into MethodRef(170) at 1", "Insert MethodRefParameter(169) into MethodRef(170) at 2", "Insert SimpleName: VariableDeclarationNode(173) into MethodRef(175) at 0", "Insert SimpleName: getTree(174) into MethodRef(175) at 1", "Update SimpleName: wrap(165) to checkNotNull", "Update SimpleName: node(166) to element", "Insert TextElement:  element(281) into TagElement: @code(282) at 0", "Insert MethodRef(286) into TagElement: @link(287) at 0", "Insert MethodRef(294) into TagElement: @link(295) at 0", "Insert MethodRef(299) into TagElement: @link(300) at 0", "Insert SimpleName: checkElementType(319) into MethodInvocation(321) at 0", "Insert SimpleName: element(320) into MethodInvocation(321) at 1", "Move SimpleName: contents(292) into MethodInvocation(331) at 0", "Update SimpleName: get(293) to put", "Move SimpleName: get(293) into MethodInvocation(331) at 1", "Move MethodInvocation(297) into MethodInvocation(331) at 2", "Move MethodInvocation(277) into MethodInvocation(331) at 3", "Insert InfixExpression: ||(554) into InfixExpression: ||(560) at 0", "Insert InfixExpression: ==(559) into InfixExpression: ||(560) at 1", "Update SimpleName: equals(575) to element", "Move SimpleName: equals(575) into MethodInvocation(564) at 0", "Update SimpleName: b(576) to getKind", "Move SimpleName: b(576) into MethodInvocation(564) at 1", "Insert SimpleType: com.sun.source.tree.VariableTree(168) into MethodRefParameter(169) at 0", "Insert SimpleName: LocalVariableNode(284) into MethodRef(286) at 0", "Insert SimpleName: getElement(285) into MethodRef(286) at 1", "Insert SimpleName: TreeUtils(289) into MethodRef(294) at 0", "Insert SimpleName: elementFromDeclaration(290) into MethodRef(294) at 1", "Insert MethodRefParameter(293) into MethodRef(294) at 2", "Insert SimpleName: VariableDeclarationNode(297) into MethodRef(299) at 0", "Insert SimpleName: getTree(298) into MethodRef(299) at 1", "Update SimpleName: wrap(295) to checkNotNull", "Update SimpleName: node(296) to element", "Insert InfixExpression: ==(548) into InfixExpression: ||(554) at 0", "Insert InfixExpression: ==(553) into InfixExpression: ||(554) at 1", "Insert MethodInvocation(557) into InfixExpression: ==(559) at 0", "Insert SimpleName: EXCEPTION_PARAMETER(558) into InfixExpression: ==(559) at 1", "Insert QualifiedName: com.sun.source.tree.VariableTree(167) into SimpleType: com.sun.source.tree.VariableTree(168) at 0", "Insert SimpleType: com.sun.source.tree.VariableTree(292) into MethodRefParameter(293) at 0", "Insert MethodInvocation(546) into InfixExpression: ==(548) at 0", "Insert SimpleName: LOCAL_VARIABLE(547) into InfixExpression: ==(548) at 1", "Insert MethodInvocation(551) into InfixExpression: ==(553) at 0", "Insert SimpleName: PARAMETER(552) into InfixExpression: ==(553) at 1", "Insert SimpleName: element(555) into MethodInvocation(557) at 0", "Update SimpleName: getElement(563) to getKind", "Move SimpleName: getElement(563) into MethodInvocation(557) at 1", "Insert QualifiedName: com.sun.source.tree.VariableTree(291) into SimpleType: com.sun.source.tree.VariableTree(292) at 0", "Insert SimpleName: element(544) into MethodInvocation(546) at 0", "Insert SimpleName: getKind(545) into MethodInvocation(546) at 1", "Insert SimpleName: element(549) into MethodInvocation(551) at 0", "Update SimpleName: getElement(551) to getKind", "Move SimpleName: getElement(551) into MethodInvocation(551) at 1", "Delete QualifiedName: Equivalence.Wrapper(118)", "Delete SimpleType: Equivalence.Wrapper(119)", "Delete ParameterizedType: Equivalence.Wrapper<Node>(122)", "Delete QualifiedName: Equivalence.Wrapper(133)", "Delete SimpleType: Equivalence.Wrapper(134)", "Delete ParameterizedType: Equivalence.Wrapper<Node>(137)", "Delete QualifiedName: NodeEquivalance.INSTANCE(164)", "Delete QualifiedName: Equivalence.Wrapper(225)", "Delete SimpleType: Equivalence.Wrapper(226)", "Delete ParameterizedType: Equivalence.Wrapper<Node>(229)", "Delete QualifiedName: NodeEquivalance.INSTANCE(294)", "Delete MethodInvocation(298)", "Delete ReturnStatement(299)", "Delete Modifier: public(254)", "Delete SimpleName: setInformation(260)", "Delete SimpleName: Node(261)", "Delete SimpleType: Node(262)", "Delete SimpleName: node(263)", "Delete SingleVariableDeclaration(264)", "Delete SimpleName: contents(269)", "Delete SimpleName: put(270)", "Delete QualifiedName: NodeEquivalance.INSTANCE(271)", "Delete SimpleName: wrap(272)", "Delete SimpleName: node(273)", "Delete MethodInvocation(274)", "Delete MethodInvocation(278)", "Delete ExpressionStatement(279)", "Delete Block(282)", "Delete MethodDeclaration(283)", "Delete SimpleName: V(285)", "Delete SimpleType: V(286)", "Delete MethodDeclaration(301)", "Delete QualifiedName: Equivalence.Wrapper(364)", "Delete SimpleType: Equivalence.Wrapper(365)", "Delete SimpleType: Node(367)", "Delete ParameterizedType: Equivalence.Wrapper<Node>(368)", "Delete SimpleName: Node(526)", "Delete SimpleType: Node(527)", "Delete SimpleName: a(528)", "Delete Modifier: private(503)", "Delete Modifier: static(504)", "Delete SimpleName: NodeEquivalance(505)", "Delete SimpleName: Equivalence(506)", "Delete SimpleType: Equivalence(507)", "Delete SimpleName: Node(508)", "Delete SimpleType: Node(509)", "Delete ParameterizedType: Equivalence<Node>(510)", "Delete Modifier: static(511)", "Delete Modifier: final(512)", "Delete SimpleName: NodeEquivalance(513)", "Delete SimpleType: NodeEquivalance(514)", "Delete SimpleName: INSTANCE(515)", "Delete SimpleName: NodeEquivalance(516)", "Delete SimpleType: NodeEquivalance(517)", "Delete ClassInstanceCreation(518)", "Delete VariableDeclarationFragment(519)", "Delete FieldDeclaration(520)", "Delete SimpleName: Override(521)", "Delete MarkerAnnotation(522)", "Delete Modifier: protected(523)", "Delete SimpleName: Node(530)", "Delete SimpleType: Node(531)", "Delete SimpleName: b(532)", "Delete SingleVariableDeclaration(533)", "Delete SimpleName: a(534)", "Delete SimpleName: LocalVariableNode(535)", "Delete SimpleType: LocalVariableNode(536)", "Delete InstanceofExpression(537)", "Delete SimpleName: b(538)", "Delete SimpleName: LocalVariableNode(539)", "Delete SimpleType: LocalVariableNode(540)", "Delete InstanceofExpression(541)", "Delete InfixExpression: &&(542)", "Delete SimpleName: aEl(545)", "Delete SimpleName: LocalVariableNode(546)", "Delete SimpleType: LocalVariableNode(547)", "Delete SimpleName: a(548)", "Delete CastExpression(549)", "Delete ParenthesizedExpression(550)", "Delete MethodInvocation(552)", "Delete VariableDeclarationFragment(553)", "Delete VariableDeclarationStatement(554)", "Delete SimpleName: bEl(557)", "Delete SimpleName: LocalVariableNode(558)", "Delete SimpleType: LocalVariableNode(559)", "Delete SimpleName: b(560)", "Delete CastExpression(561)", "Delete ParenthesizedExpression(562)", "Delete MethodInvocation(564)", "Delete VariableDeclarationFragment(565)", "Delete VariableDeclarationStatement(566)", "Delete SimpleName: aEl(567)", "Delete SimpleName: equals(568)", "Delete SimpleName: bEl(569)", "Delete MethodInvocation(570)", "Delete ReturnStatement(571)", "Delete Block(572)", "Delete IfStatement(573)", "Delete SimpleName: a(574)", "Delete MethodInvocation(577)", "Delete ReturnStatement(578)", "Delete Block(579)", "Delete MethodDeclaration(580)", "Delete SimpleName: Override(581)", "Delete MarkerAnnotation(582)", "Delete Modifier: protected(583)", "Delete PrimitiveType: int(584)", "Delete SimpleName: doHash(585)", "Delete SimpleName: Node(586)", "Delete SimpleType: Node(587)", "Delete SimpleName: n(588)", "Delete SingleVariableDeclaration(589)", "Delete SimpleName: n(590)", "Delete SimpleName: LocalVariableNode(591)", "Delete SimpleType: LocalVariableNode(592)", "Delete InstanceofExpression(593)", "Delete SimpleName: LocalVariableNode(594)", "Delete SimpleType: LocalVariableNode(595)", "Delete SimpleName: n(596)", "Delete CastExpression(597)", "Delete ParenthesizedExpression(598)", "Delete MethodInvocation(600)", "Delete SimpleName: hashCode(601)", "Delete MethodInvocation(602)", "Delete ReturnStatement(603)", "Delete Block(604)", "Delete IfStatement(605)", "Delete SimpleName: n(606)", "Delete SimpleName: hashCode(607)", "Delete MethodInvocation(608)", "Delete ReturnStatement(609)", "Delete Block(610)", "Delete MethodDeclaration(611)", "Delete TypeDeclaration: class(612)"]}}, {"AbstractNullnessPropagationTransfer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: org.checkerframework.javacutil.TreeUtils.elementFromDeclaration to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 86", "operations": ["INS ImportDeclaration to CompilationUnit at 86", "INS QualifiedName: javax.lang.model.element.Element to ImportDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: interface at 3", "operations": ["INS SimpleName: VariableDeclarationNode to SimpleType: VariableDeclarationNode at 0", "INS MethodDeclaration to TypeDeclaration: interface at 3", "INS SimpleType: VariableDeclarationNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: Nullness to SimpleType: Nullness at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS PrimitiveType: void to MethodDeclaration at 0", "INS SimpleName: set to MethodDeclaration at 1", "INS SimpleType: Nullness to SingleVariableDeclaration at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 2", "operations": ["INS SimpleName: VariableDeclarationNode to SimpleType: VariableDeclarationNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS SimpleType: VariableDeclarationNode to SingleVariableDeclaration at 0", "INS SimpleName: node to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 3", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleType: SubNodeValues to SingleVariableDeclaration at 0", "INS SimpleName: SubNodeValues to SimpleType: SubNodeValues at 0", "INS SimpleName: inputs to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SimpleName: updates to SingleVariableDeclaration at 1", "INS SimpleName: LocalVariableUpdates to SimpleType: LocalVariableUpdates at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: LocalVariableUpdates to SingleVariableDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 6", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: getElement to MethodInvocation at 1", "INS SimpleName: set to MethodDeclaration at 3", "INS Block to MethodDeclaration at 6", "INS ExpressionStatement to Block at 0", "INS SimpleName: values to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 6", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS PrimitiveType: void to MethodDeclaration at 2"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleName: updates to VariableDeclarationFragment at 0", "INS SimpleName: ReadableLocalVariableUpdates to SimpleType: ReadableLocalVariableUpdates at 0", "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleType: ReadableLocalVariableUpdates to ClassInstanceCreation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: ReadableLocalVariableUpdates to VariableDeclarationStatement at 0", "INS SimpleName: ReadableLocalVariableUpdates to SimpleType: ReadableLocalVariableUpdates at 0"]}, {"root": "UPDATE from Map<LocalVariableNode,Nullness> to Map<Element,Nullness>", "operations": ["UPD ParameterizedType: Map<LocalVariableNode,Nullness> from Map<LocalVariableNode,Nullness> to Map<Element,Nullness>"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: VariableDeclarationNode to SingleVariableDeclaration at 0", "INS SimpleName: VariableDeclarationNode to SimpleType: VariableDeclarationNode at 0", "INS SimpleName: node to SingleVariableDeclaration at 1"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: Nullness to SimpleType: Nullness at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: value to SingleVariableDeclaration at 1", "INS SimpleType: Nullness to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from LocalVariableNode to Element", "operations": ["UPD SimpleName: LocalVariableNode from LocalVariableNode to Element", "UPD SimpleName: LocalVariableNode from LocalVariableNode to Element", "UPD SimpleType: LocalVariableNode from LocalVariableNode to Element", "UPD SimpleType: LocalVariableNode from LocalVariableNode to Element"]}, {"root": "UPDATE from value to result", "operations": ["UPD SimpleName: value from value to result", "UPD SimpleName: value from value to result"]}, {"root": "UPDATE from noStoreChanges to updateRegularStore", "operations": ["UPD SimpleName: noStoreChanges from noStoreChanges to updateRegularStore"]}, {"root": "INS SimpleName: updates to MethodInvocation at 3", "operations": ["INS SimpleName: updates to MethodInvocation at 3"]}, {"root": "INS SimpleName: node to MethodInvocation at 1", "operations": ["INS SimpleName: node to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: input to MethodInvocation at 1", "INS SimpleName: values to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "INS SimpleName: updates to MethodInvocation at 3", "operations": ["INS SimpleName: updates to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 3"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getTree to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: elementFromDeclaration to MethodInvocation at 0"]}, {"root": "UPDATE from node to value", "operations": ["UPD SimpleName: node from node to value"]}, {"root": "UPDATE from Entry<LocalVariableNode,Nullness> to Entry<Element,Nullness>", "operations": ["UPD ParameterizedType: Entry<LocalVariableNode,Nullness> from Entry<LocalVariableNode,Nullness> to Entry<Element,Nullness>"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: getElement to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 0"]}]}}, {"AbstractNullnessPropagationTransfer_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(4910) at 5", "Insert ImportDeclaration(173) into CompilationUnit(4910) at 86", "Insert QualifiedName: org.checkerframework.javacutil.TreeUtils.elementFromDeclaration(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: javax.lang.model.element.Element(172) into ImportDeclaration(173) at 0", "Insert MethodDeclaration(333) into TypeDeclaration: interface(334) at 3", "Insert SingleVariableDeclaration(3309) into MethodDeclaration(3321) at 2", "Insert SingleVariableDeclaration(3313) into MethodDeclaration(3321) at 3", "Insert SingleVariableDeclaration(3317) into MethodDeclaration(3321) at 4", "Insert MethodDeclaration(4643) into TypeDeclaration: class(4671) at 6", "Insert PrimitiveType: void(323) into MethodDeclaration(333) at 0", "Insert SimpleName: set(324) into MethodDeclaration(333) at 1", "Insert SingleVariableDeclaration(328) into MethodDeclaration(333) at 2", "Insert SingleVariableDeclaration(332) into MethodDeclaration(333) at 3", "Insert VariableDeclarationStatement(3282) into Block(3301) at 0", "Insert SimpleType: VariableDeclarationNode(3307) into SingleVariableDeclaration(3309) at 0", "Insert SimpleName: node(3308) into SingleVariableDeclaration(3309) at 1", "Insert SimpleType: SubNodeValues(3311) into SingleVariableDeclaration(3313) at 0", "Insert SimpleName: inputs(3312) into SingleVariableDeclaration(3313) at 1", "Insert SimpleType: LocalVariableUpdates(3315) into SingleVariableDeclaration(3317) at 0", "Insert SimpleName: updates(3316) into SingleVariableDeclaration(3317) at 1", "Update ParameterizedType: Map<LocalVariableNode,Nullness>(4570) to Map<Element,Nullness>", "Move MarkerAnnotation(4579) into MethodDeclaration(4643) at 0", "Insert Modifier: public(4621) into MethodDeclaration(4643) at 1", "Insert PrimitiveType: void(4622) into MethodDeclaration(4643) at 2", "Insert SimpleName: set(4623) into MethodDeclaration(4643) at 3", "Move SingleVariableDeclaration(4586) into MethodDeclaration(4643) at 4", "Move SingleVariableDeclaration(4590) into MethodDeclaration(4643) at 5", "Insert Block(4642) into MethodDeclaration(4643) at 6", "Insert MarkerAnnotation(4645) into MethodDeclaration(4670) at 0", "Insert SingleVariableDeclaration(4652) into MethodDeclaration(4670) at 4", "Insert SingleVariableDeclaration(4656) into MethodDeclaration(4670) at 5", "Insert SimpleType: VariableDeclarationNode(326) into SingleVariableDeclaration(328) at 0", "Insert SimpleName: node(327) into SingleVariableDeclaration(328) at 1", "Insert SimpleType: Nullness(330) into SingleVariableDeclaration(332) at 0", "Insert SimpleName: value(331) into SingleVariableDeclaration(332) at 1", "Insert SimpleType: ReadableLocalVariableUpdates(3276) into VariableDeclarationStatement(3282) at 0", "Insert VariableDeclarationFragment(3281) into VariableDeclarationStatement(3282) at 1", "Insert SimpleName: VariableDeclarationNode(3306) into SimpleType: VariableDeclarationNode(3307) at 0", "Insert SimpleName: SubNodeValues(3310) into SimpleType: SubNodeValues(3311) at 0", "Insert SimpleName: LocalVariableUpdates(3314) into SimpleType: LocalVariableUpdates(3315) at 0", "Update SimpleType: LocalVariableNode(4567) to Element", "Insert ExpressionStatement(4641) into Block(4642) at 0", "Insert SimpleName: Override(4644) into MarkerAnnotation(4645) at 0", "Insert SimpleType: VariableDeclarationNode(4650) into SingleVariableDeclaration(4652) at 0", "Insert SimpleName: node(4651) into SingleVariableDeclaration(4652) at 1", "Insert SimpleType: Nullness(4654) into SingleVariableDeclaration(4656) at 0", "Insert SimpleName: value(4655) into SingleVariableDeclaration(4656) at 1", "Insert SimpleName: VariableDeclarationNode(325) into SimpleType: VariableDeclarationNode(326) at 0", "Insert SimpleName: Nullness(329) into SimpleType: Nullness(330) at 0", "Insert SimpleName: ReadableLocalVariableUpdates(3275) into SimpleType: ReadableLocalVariableUpdates(3276) at 0", "Insert SimpleName: updates(3277) into VariableDeclarationFragment(3281) at 0", "Insert ClassInstanceCreation(3280) into VariableDeclarationFragment(3281) at 1", "Update SimpleName: value(3262) to result", "Update SimpleName: noStoreChanges(3267) to updateRegularStore", "Update SimpleName: value(3268) to result", "Insert SimpleName: updates(3298) into MethodInvocation(3299) at 3", "Update SimpleName: LocalVariableNode(4566) to Element", "Insert MethodInvocation(4640) into ExpressionStatement(4641) at 0", "Insert SimpleName: VariableDeclarationNode(4649) into SimpleType: VariableDeclarationNode(4650) at 0", "Insert SimpleName: Nullness(4653) into SimpleType: Nullness(4654) at 0", "Insert SimpleType: ReadableLocalVariableUpdates(3279) into ClassInstanceCreation(3280) at 0", "Insert SimpleName: node(3287) into MethodInvocation(3292) at 1", "Insert MethodInvocation(3290) into MethodInvocation(3292) at 2", "Insert SimpleName: updates(3291) into MethodInvocation(3292) at 3", "Insert SimpleName: values(4632) into MethodInvocation(4640) at 0", "Insert SimpleName: put(4633) into MethodInvocation(4640) at 1", "Insert MethodInvocation(4636) into MethodInvocation(4640) at 2", "Move MethodInvocation(4598) into MethodInvocation(4640) at 3", "Insert MethodInvocation(4663) into MethodInvocation(4667) at 2", "Insert SimpleName: ReadableLocalVariableUpdates(3278) into SimpleType: ReadableLocalVariableUpdates(3279) at 0", "Insert SimpleName: values(3288) into MethodInvocation(3290) at 0", "Insert SimpleName: input(3289) into MethodInvocation(3290) at 1", "Insert SimpleName: node(4634) into MethodInvocation(4636) at 0", "Insert SimpleName: getElement(4635) into MethodInvocation(4636) at 1", "Insert SimpleName: elementFromDeclaration(4659) into MethodInvocation(4663) at 0", "Insert MethodInvocation(4662) into MethodInvocation(4663) at 1", "Update SimpleName: node(4594) to value", "Update ParameterizedType: Entry<LocalVariableNode,Nullness>(4644) to Entry<Element,Nullness>", "Insert SimpleName: node(4660) into MethodInvocation(4662) at 0", "Insert SimpleName: getTree(4661) into MethodInvocation(4662) at 1", "Update SimpleType: LocalVariableNode(4641) to Element", "Update SimpleName: LocalVariableNode(4640) to Element", "Insert MethodInvocation(4827) into MethodInvocation(4828) at 2", "Move SimpleName: node(4757) into MethodInvocation(4827) at 0", "Insert SimpleName: getElement(4826) into MethodInvocation(4827) at 1"]}}, {"NullnessPropagationTransfer_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 5", "operations": ["INS ImportDeclaration to CompilationUnit at 5", "INS QualifiedName: javax.lang.model.element.ElementKind.EXCEPTION_PARAMETER to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: org.checkerframework.javacutil.TreeUtils.elementFromDeclaration to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 50", "operations": ["INS QualifiedName: org.checkerframework.dataflow.cfg.node.VariableDeclarationNode to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 50"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 31", "operations": ["INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleType: Nullness to MethodDeclaration at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: inputs to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS IfStatement to Block at 0", "INS SimpleName: updates to SingleVariableDeclaration at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleType: VariableDeclarationNode to SingleVariableDeclaration at 0", "INS SimpleName: Nullness to SimpleType: Nullness at 0", "INS SimpleName: updates to MethodInvocation at 0", "INS SimpleType: SubNodeValues to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: NONNULL to MethodInvocation at 3", "INS Block to MethodDeclaration at 6", "INS SimpleName: isCatchVariable to MethodInvocation at 0", "INS SimpleName: LocalVariableUpdates to SimpleType: LocalVariableUpdates at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: set to MethodInvocation at 1", "INS SimpleName: visitVariableDeclaration to MethodDeclaration at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: node to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 31", "INS SimpleName: SubNodeValues to SimpleType: SubNodeValues at 0", "INS SimpleName: VariableDeclarationNode to SimpleType: VariableDeclarationNode at 0", "INS SimpleType: LocalVariableUpdates to SingleVariableDeclaration at 0", "INS SimpleName: NULLABLE to ReturnStatement at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS SimpleName: isCatchVariable to MethodDeclaration at 3", "INS MethodInvocation to InfixExpression: == at 0", "INS SimpleType: VariableDeclarationNode to SingleVariableDeclaration at 0", "INS SimpleName: getKind to MethodInvocation at 1", "INS Modifier: static to MethodDeclaration at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: VariableDeclarationNode to SimpleType: VariableDeclarationNode at 0", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS SimpleName: EXCEPTION_PARAMETER to InfixExpression: == at 1", "INS InfixExpression: == to ReturnStatement at 0", "INS MethodInvocation to MethodInvocation at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: getTree to MethodInvocation at 1", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: node to MethodInvocation at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: elementFromDeclaration to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Block to MethodDeclaration at 5"]}]}}, {"NullnessPropagationTransfer_diff": {"operations": ["Insert ImportDeclaration(11) into CompilationUnit(2796) at 5", "Insert ImportDeclaration(13) into CompilationUnit(2796) at 6", "Insert ImportDeclaration(101) into CompilationUnit(2796) at 50", "Insert QualifiedName: javax.lang.model.element.ElementKind.EXCEPTION_PARAMETER(10) into ImportDeclaration(11) at 0", "Insert QualifiedName: org.checkerframework.javacutil.TreeUtils.elementFromDeclaration(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: org.checkerframework.dataflow.cfg.node.VariableDeclarationNode(100) into ImportDeclaration(101) at 0", "Insert MethodDeclaration(1200) into TypeDeclaration: class(2795) at 31", "Insert MethodDeclaration(1220) into TypeDeclaration: class(2795) at 32", "Insert MarkerAnnotation(1170) into MethodDeclaration(1200) at 0", "Insert SimpleType: Nullness(1172) into MethodDeclaration(1200) at 1", "Insert SimpleName: visitVariableDeclaration(1173) into MethodDeclaration(1200) at 2", "Insert SingleVariableDeclaration(1177) into MethodDeclaration(1200) at 3", "Insert SingleVariableDeclaration(1181) into MethodDeclaration(1200) at 4", "Insert SingleVariableDeclaration(1185) into MethodDeclaration(1200) at 5", "Insert Block(1199) into MethodDeclaration(1200) at 6", "Insert Modifier: private(1201) into MethodDeclaration(1220) at 0", "Insert Modifier: static(1202) into MethodDeclaration(1220) at 1", "Insert PrimitiveType: boolean(1203) into MethodDeclaration(1220) at 2", "Insert SimpleName: isCatchVariable(1204) into MethodDeclaration(1220) at 3", "Insert SingleVariableDeclaration(1208) into MethodDeclaration(1220) at 4", "Insert Block(1219) into MethodDeclaration(1220) at 5", "Insert SimpleName: Override(1169) into MarkerAnnotation(1170) at 0", "Insert SimpleName: Nullness(1171) into SimpleType: Nullness(1172) at 0", "Insert SimpleType: VariableDeclarationNode(1175) into SingleVariableDeclaration(1177) at 0", "Insert SimpleName: node(1176) into SingleVariableDeclaration(1177) at 1", "Insert SimpleType: SubNodeValues(1179) into SingleVariableDeclaration(1181) at 0", "Insert SimpleName: inputs(1180) into SingleVariableDeclaration(1181) at 1", "Insert SimpleType: LocalVariableUpdates(1183) into SingleVariableDeclaration(1185) at 0", "Insert SimpleName: updates(1184) into SingleVariableDeclaration(1185) at 1", "Insert IfStatement(1196) into Block(1199) at 0", "Insert ReturnStatement(1198) into Block(1199) at 1", "Insert SimpleType: VariableDeclarationNode(1206) into SingleVariableDeclaration(1208) at 0", "Insert SimpleName: node(1207) into SingleVariableDeclaration(1208) at 1", "Insert ReturnStatement(1218) into Block(1219) at 0", "Insert SimpleName: VariableDeclarationNode(1174) into SimpleType: VariableDeclarationNode(1175) at 0", "Insert SimpleName: SubNodeValues(1178) into SimpleType: SubNodeValues(1179) at 0", "Insert SimpleName: LocalVariableUpdates(1182) into SimpleType: LocalVariableUpdates(1183) at 0", "Insert MethodInvocation(1188) into IfStatement(1196) at 0", "Insert Block(1195) into IfStatement(1196) at 1", "Insert SimpleName: NULLABLE(1197) into ReturnStatement(1198) at 0", "Insert SimpleName: VariableDeclarationNode(1205) into SimpleType: VariableDeclarationNode(1206) at 0", "Insert InfixExpression: ==(1217) into ReturnStatement(1218) at 0", "Insert SimpleName: isCatchVariable(1186) into MethodInvocation(1188) at 0", "Insert SimpleName: node(1187) into MethodInvocation(1188) at 1", "Insert ExpressionStatement(1194) into Block(1195) at 0", "Insert MethodInvocation(1215) into InfixExpression: ==(1217) at 0", "Insert SimpleName: EXCEPTION_PARAMETER(1216) into InfixExpression: ==(1217) at 1", "Insert MethodInvocation(1193) into ExpressionStatement(1194) at 0", "Insert MethodInvocation(1213) into MethodInvocation(1215) at 0", "Insert SimpleName: getKind(1214) into MethodInvocation(1215) at 1", "Insert SimpleName: updates(1189) into MethodInvocation(1193) at 0", "Insert SimpleName: set(1190) into MethodInvocation(1193) at 1", "Insert SimpleName: node(1191) into MethodInvocation(1193) at 2", "Insert SimpleName: NONNULL(1192) into MethodInvocation(1193) at 3", "Insert SimpleName: elementFromDeclaration(1209) into MethodInvocation(1213) at 0", "Insert MethodInvocation(1212) into MethodInvocation(1213) at 1", "Insert SimpleName: node(1210) into MethodInvocation(1212) at 0", "Insert SimpleName: getTree(1211) into MethodInvocation(1212) at 1"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}