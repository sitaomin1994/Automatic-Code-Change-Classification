{"application": "google-closure-compiler", "csha": "2fae552711d1e3f3034831f2207ba2d16f97e4af", "files": [{"RemoveUnusedVars_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 27", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getParent to MethodInvocation at 1", "INS MethodDeclaration to TypeDeclaration: class at 27", "INS PrimitiveType: boolean to MethodDeclaration at 1", "INS ReturnStatement to Block at 2", "INS SimpleName: function to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 2", "INS InfixExpression: && to ReturnStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: parameterList to SingleVariableDeclaration at 1", "INS SimpleName: removeGlobals to InfixExpression: && at 0", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: isParamList to MethodInvocation at 1", "INS SimpleName: getParent to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: canRemoveParameters to MethodDeclaration at 2", "INS SimpleName: parameterList to MethodInvocation at 0", "INS SimpleName: parameterList to MethodInvocation at 0", "INS PrefixExpression: ! to InfixExpression: && at 1", "INS Block to MethodDeclaration at 4", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: isGetOrSetKey to MethodInvocation at 1", "INS SimpleName: function to MethodInvocation at 0", "INS SimpleName: checkState to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 33", "operations": ["INS EnhancedForStatement to Block at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: remove to MethodInvocation at 1", "INS SimpleName: compiler to MethodInvocation at 2", "INS SimpleName: removable to MethodInvocation at 0", "INS Block to MethodDeclaration at 5", "INS Block to EnhancedForStatement at 2", "INS MethodDeclaration to TypeDeclaration: class at 33", "INS Modifier: private to MethodDeclaration at 1", "INS ExpressionStatement to Block at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 37", "operations": ["INS Block to MethodDeclaration at 5", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: toRemove to SingleVariableDeclaration at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: parent to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SwitchCase to SwitchStatement at 2", "INS SimpleName: getToken to MethodInvocation at 1", "INS SimpleName: ARRAY_PATTERN to SwitchCase at 0", "INS SimpleName: toRemove to InfixExpression: == at 0", "INS SimpleName: removeRestNode to MethodDeclaration at 2", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS BreakStatement to SwitchStatement at 5", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SimpleName: parent to MethodInvocation at 0", "INS InfixExpression: == to MethodInvocation at 1", "INS SimpleName: getLastChild to MethodInvocation at 1", "INS MethodInvocation to SwitchStatement at 0", "INS SimpleName: checkState to MethodInvocation at 0", "INS Modifier: private to MethodDeclaration at 0", "INS SwitchCase to SwitchStatement at 6", "INS StringLiteral: \"unexpected\" to ClassInstanceCreation at 1", "INS SimpleName: PARAM_LIST to SwitchCase at 0", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS MethodInvocation to InfixExpression: == at 1", "INS MethodDeclaration to TypeDeclaration: class at 37", "INS ExpressionStatement to SwitchStatement at 4", "INS ThrowStatement to SwitchStatement at 7", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: compiler to MethodInvocation at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SwitchStatement to Block at 0", "INS SwitchCase to SwitchStatement at 1", "INS ExpressionStatement to SwitchStatement at 3", "INS SimpleName: parent to SingleVariableDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 38", "operations": ["INS SwitchCase to SwitchStatement at 6", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS SimpleName: toRemove to SingleVariableDeclaration at 1", "INS Block to MethodDeclaration at 5", "INS BreakStatement to SwitchStatement at 5", "INS SimpleName: removeGlobals to InfixExpression: && at 1", "INS InfixExpression: && to IfStatement at 0", "INS ExpressionStatement to SwitchStatement at 9", "INS PrimitiveType: void to MethodDeclaration at 1", "INS InfixExpression: && to InfixExpression: && at 0", "INS BreakStatement to SwitchStatement at 12", "INS SwitchStatement to Block at 0", "INS ExpressionStatement to SwitchStatement at 16", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS VariableDeclarationStatement to SwitchStatement at 8", "INS ExpressionStatement to SwitchStatement at 11", "INS SimpleName: markFunctionsDeleted to MethodInvocation at 1", "INS PrefixExpression: ! to InfixExpression: || at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3", "INS SimpleName: toRemove to MethodInvocation at 2", "INS Block to IfStatement at 2", "INS SimpleName: parent to MethodInvocation at 2", "INS SimpleName: PARAM_LIST to SwitchCase at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS ExpressionStatement to SwitchStatement at 15", "INS MethodInvocation to InfixExpression: == at 1", "INS SimpleName: COMPUTED_PROP to SwitchCase at 0", "INS SimpleName: toRemove to InfixExpression: == at 0", "INS BreakStatement to SwitchStatement at 17", "INS SimpleName: ARRAY_PATTERN to SwitchCase at 0", "INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1", "INS SimpleName: checkState to MethodInvocation at 0", "INS SwitchCase to SwitchStatement at 1", "INS InfixExpression: || to MethodInvocation at 1", "INS SimpleName: toRemove to MethodInvocation at 2", "INS SimpleName: STRING_KEY to SwitchCase at 0", "INS StringLiteral: \"unexpected\" to ClassInstanceCreation at 1", "INS PrefixExpression: ! to InfixExpression: || at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SwitchCase to SwitchStatement at 13", "INS SimpleName: removeDefaultValueNode to MethodDeclaration at 2", "INS ExpressionStatement to SwitchStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Modifier: private to MethodDeclaration at 0", "INS ExpressionStatement to SwitchStatement at 7", "INS SimpleName: Node to SimpleType: Node at 0", "INS ThrowStatement to SwitchStatement at 19", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to InfixExpression: && at 0", "INS MethodDeclaration to TypeDeclaration: class at 38", "INS IfStatement to SwitchStatement at 10", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS MethodInvocation to SwitchStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS SimpleName: parent to MethodInvocation at 0", "INS SimpleName: compiler to MethodInvocation at 0", "INS SimpleName: isComputedProp to MethodInvocation at 1", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1", "INS SwitchCase to SwitchStatement at 18", "INS SimpleName: toRemove to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SwitchCase to SwitchStatement at 14", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: compiler to MethodInvocation at 0", "INS SimpleName: parent to MethodInvocation at 0", "INS SimpleName: getToken to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS ExpressionStatement to SwitchStatement at 3"]}, {"root": "INS TypeDeclaration: interface to TypeDeclaration: class at 40", "operations": ["INS SimpleType: AbstractCompiler to SingleVariableDeclaration at 0", "INS TypeDeclaration: interface to TypeDeclaration: class at 40", "INS SimpleName: Removable to TypeDeclaration: interface at 2", "INS Modifier: public to MethodDeclaration at 0", "INS Modifier: static to TypeDeclaration: interface at 1", "INS SimpleName: compiler to SingleVariableDeclaration at 1", "INS Modifier: private to TypeDeclaration: interface at 0", "INS SimpleName: remove to MethodDeclaration at 2", "INS SimpleName: AbstractCompiler to SimpleType: AbstractCompiler at 0", "INS MethodDeclaration to TypeDeclaration: interface at 3", "INS PrimitiveType: void to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 3"]}, {"root": "INS TypeDeclaration: class to TypeDeclaration: class at 41", "operations": ["INS SimpleType: Node to FieldDeclaration at 1", "INS SimpleName: Removable to SimpleType: Removable at 0", "INS IfStatement to Block at 4", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS Modifier: private to TypeDeclaration: class at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: removableNode to VariableDeclarationFragment at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS MethodInvocation to MethodInvocation at 1", "INS TypeDeclaration: class to TypeDeclaration: class at 41", "INS MethodDeclaration to TypeDeclaration: class at 5", "INS SimpleName: DestructuringAssign to MethodDeclaration at 0", "INS SimpleType: Removable to TypeDeclaration: class at 2", "INS SimpleName: isDefaultValue to MethodInvocation at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: nameNode to FieldAccess at 1", "INS SingleVariableDeclaration to MethodDeclaration at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleType: Node to FieldDeclaration at 1", "INS Block to MethodDeclaration at 3", "INS SimpleName: Node to SimpleType: Node at 0", "INS VariableDeclarationFragment to FieldDeclaration at 2", "INS SimpleName: parent to VariableDeclarationFragment at 0", "INS SimpleName: nameNode to VariableDeclarationFragment at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleType: Node to SingleVariableDeclaration at 0", "INS ThisExpression to FieldAccess at 0", "INS SimpleName: parent to MethodInvocation at 0", "INS SimpleName: nameNode to Assignment: = at 1", "INS FieldAccess to Assignment: = at 0", "INS SimpleName: removableNode to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: DestructuringAssign to TypeDeclaration: class at 1", "INS FieldDeclaration to TypeDeclaration: class at 3", "INS FieldDeclaration to TypeDeclaration: class at 4", "INS SingleVariableDeclaration to MethodDeclaration at 1", "INS SimpleName: nameNode to SingleVariableDeclaration at 1", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS Modifier: final to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1"]}, {"root": "UPDATE from Multimap<Var,Assign> to Multimap<Var,Removable>", "operations": ["UPD ParameterizedType: Multimap<Var,Assign> from Multimap<Var,Assign> to Multimap<Var,Removable>"]}, {"root": "UPDATE from Map<Node,Assign> to Set<Node>", "operations": ["UPD ParameterizedType: Map<Node,Assign> from Map<Node,Assign> to Set<Node>"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 8", "MOV ExpressionStatement to Block at 9"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Modifier: private to MethodDeclaration at 0", "MOV PrimitiveType: void to MethodDeclaration at 2", "MOV SimpleName: removeUnusedDestructuringNames to MethodDeclaration at 3"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SingleVariableDeclaration to MethodDeclaration at 4", "MOV Javadoc to MethodDeclaration at 0"]}, {"root": "UPDATE from removeUnusedDestructuringNames to removeAllAssigns", "operations": ["UPD SimpleName: removeUnusedDestructuringNames from removeUnusedDestructuringNames to removeAllAssigns"]}, {"root": "MOVE from TypeDeclaration: class", "operations": ["MOV MethodDeclaration to TypeDeclaration: class at 6"]}, {"root": "INS SimpleType: Removable to TypeDeclaration: class at 3", "operations": ["INS SimpleType: Removable to TypeDeclaration: class at 3", "INS SimpleName: Removable to SimpleType: Removable at 0"]}, {"root": "UPDATE from Node to Removable", "operations": ["UPD SimpleName: Node from Node to Removable", "UPD SimpleName: Assign from Assign to Removable", "UPD SimpleType: Assign from Assign to Removable", "UPD SimpleType: Node from Node to Removable"]}, {"root": "UPDATE from Map to Set", "operations": ["UPD SimpleName: Map from Map to Set", "UPD SimpleType: Map from Map to Set"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV BreakStatement to SwitchStatement at 28", "MOV SwitchCase to SwitchStatement at 26"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS SimpleName: paramlist to VariableDeclarationFragment at 0", "INS SimpleName: function to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: NodeUtil to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getFunctionParameters to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 2", "INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS ExpressionStatement to Block at 9", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS ExpressionStatement to Block at 9", "INS SimpleName: traverseChildren to MethodInvocation at 0", "INS SimpleName: paramlist to MethodInvocation at 1", "INS SimpleName: fparamScope to MethodInvocation at 2"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Node to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Node to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: Node to SingleVariableDeclaration at 0", "MOV SimpleName: patternElt to SingleVariableDeclaration at 1"]}, {"root": "UPDATE from grandParent to parent", "operations": ["UPD SimpleName: grandParent from grandParent to parent", "UPD SimpleName: toRemove from toRemove to parent", "UPD SimpleName: destructuringDeclarations from destructuringDeclarations to parent", "UPD SimpleName: patternElt from patternElt to parent", "UPD SimpleName: defaultValueRhs from defaultValueRhs to parent", "UPD SimpleName: patternElt from patternElt to parent", "UPD SimpleName: grandparent from grandparent to parent", "UPD SimpleName: patternElt from patternElt to parent"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "UPDATE from removeAllAssigns to remove", "operations": ["UPD SimpleName: removeAllAssigns from removeAllAssigns to remove"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 4", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 4"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS MethodInvocation to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: removableNode to MethodInvocation at 0", "INS IfStatement to Block at 0", "INS SimpleName: removableNode to InfixExpression: == at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS Block to IfStatement at 1", "INS ClassInstanceCreation to ThrowStatement at 0", "INS ThrowStatement to Block at 0", "INS SimpleName: removableNode to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: removableParent to VariableDeclarationFragment at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: srcref to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS StringLiteral: \"unexpected\" to ClassInstanceCreation at 1", "INS SimpleName: removeDefaultValueNode to MethodInvocation at 0", "INS SimpleName: detach to MethodInvocation at 1", "INS IfStatement to Block at 1", "INS IfStatement to IfStatement at 2", "INS Block to IfStatement at 2", "INS SimpleName: removableNode to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: IR to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: IllegalStateException to SimpleType: IllegalStateException at 0", "INS SimpleName: removableNode to MethodInvocation at 1", "INS IfStatement to IfStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to IfStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getParent to MethodInvocation at 1", "INS SimpleName: removableNode to MethodInvocation at 2", "INS MethodInvocation to IfStatement at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS MethodInvocation to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: removableParent to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: removableParent to MethodInvocation at 0", "INS SimpleName: isArrayPattern to MethodInvocation at 1", "INS MethodInvocation to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: isObjectPattern to MethodInvocation at 1", "INS SimpleName: detach to MethodInvocation at 1", "INS SimpleName: getLastChild to MethodInvocation at 1", "INS SimpleName: removableNode to MethodInvocation at 0", "INS SimpleName: removeRestNode to MethodInvocation at 0", "INS SimpleName: removableParent to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: removableParent to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: removableParent to MethodInvocation at 0", "INS Block to IfStatement at 2", "INS SimpleName: empty to MethodInvocation at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: replaceWith to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: removableNode to MethodInvocation at 1", "INS SimpleName: removableNode to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 2", "INS SimpleType: IllegalStateException to ClassInstanceCreation at 0", "INS ExpressionStatement to Block at 0", "INS IfStatement to Block at 1", "INS SimpleName: isRest to MethodInvocation at 1", "INS SimpleName: isDefaultValue to MethodInvocation at 1", "INS SimpleName: removableNode to MethodInvocation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Override to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS Modifier: public to MethodDeclaration at 2", "operations": ["INS Modifier: public to MethodDeclaration at 2"]}, {"root": "UPDATE from HashMap<> to HashSet<>", "operations": ["UPD ParameterizedType: HashMap<> from HashMap<> to HashSet<>"]}, {"root": "INS SwitchCase to SwitchStatement at 22", "operations": ["INS SimpleName: DEFAULT_VALUE to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 22"]}, {"root": "INS Block to SwitchStatement at 23", "operations": ["INS MethodInvocation to IfStatement at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS Block to SwitchStatement at 23", "INS SimpleName: target to MethodInvocation at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: isName to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: target to VariableDeclarationFragment at 0"]}, {"root": "INS Block to SwitchStatement at 27", "operations": ["INS SimpleName: var to MethodInvocation at 2", "INS SimpleName: n to ClassInstanceCreation at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to SwitchStatement at 27", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: scope to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SimpleType: DestructuringAssign to ClassInstanceCreation at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: target to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: target to MethodInvocation at 2", "INS SimpleName: target to ClassInstanceCreation at 2", "INS ExpressionStatement to Block at 1", "INS ExpressionStatement to Block at 2", "INS SimpleName: target to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: DestructuringAssign to SimpleType: DestructuringAssign at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: n to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS IfStatement to Block at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: assignsByVar to MethodInvocation at 0", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: var to Assignment: = at 0", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: isName to MethodInvocation at 1", "INS SimpleName: assignsByNode to MethodInvocation at 0", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: getVar to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1"]}, {"root": "INS BreakStatement to SwitchStatement at 28", "operations": ["INS BreakStatement to SwitchStatement at 28"]}, {"root": "INS ForStatement to SwitchStatement at 30", "operations": ["INS ForStatement to SwitchStatement at 30", "INS SimpleName: getString to MethodInvocation at 1", "INS SimpleName: isName to MethodInvocation at 1", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: DestructuringAssign to SimpleType: DestructuringAssign at 0", "INS SimpleName: c to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: var to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Assignment: = to ForStatement at 2", "INS SimpleType: DestructuringAssign to ClassInstanceCreation at 0", "INS SimpleName: c to ClassInstanceCreation at 2", "INS SimpleName: c to ClassInstanceCreation at 1", "INS SimpleName: c to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 0", "INS SimpleName: getVar to MethodInvocation at 1", "INS VariableDeclarationExpression to ForStatement at 0", "INS InfixExpression: != to ForStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: c to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS SimpleName: c to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: assignsByVar to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS SimpleName: put to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleName: getLastChild to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS ExpressionStatement to Block at 2", "INS SimpleType: Node to VariableDeclarationExpression at 0", "INS SimpleName: scope to MethodInvocation at 0", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: getPrevious to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: var to Assignment: = at 0", "INS SimpleName: assignsByNode to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: c to InfixExpression: != at 0", "INS Block to ForStatement at 3", "INS SimpleName: c to MethodInvocation at 0", "INS SimpleName: c to MethodInvocation at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 31", "operations": ["INS BreakStatement to SwitchStatement at 31"]}, {"root": "INS SwitchCase to SwitchStatement at 32", "operations": ["INS SwitchCase to SwitchStatement at 32", "INS SimpleName: COMPUTED_PROP to SwitchCase at 0"]}, {"root": "INS SwitchCase to SwitchStatement at 35", "operations": ["INS SimpleName: STRING_KEY to SwitchCase at 0", "INS SwitchCase to SwitchStatement at 35"]}, {"root": "INS IfStatement to SwitchStatement at 36", "operations": ["INS VariableDeclarationStatement to Block at 0", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: var to MethodInvocation at 2", "INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleName: scope to MethodInvocation at 0", "INS SimpleName: assignsByNode to MethodInvocation at 0", "INS SimpleName: target to VariableDeclarationFragment at 0", "INS MethodInvocation to IfStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getLastChild to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: DestructuringAssign to SimpleType: DestructuringAssign at 0", "INS SimpleName: var to Assignment: = at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS IfStatement to SwitchStatement at 36", "INS IfStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to IfStatement at 1", "INS SimpleName: add to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: target to MethodInvocation at 2", "INS SimpleName: target to ClassInstanceCreation at 2", "INS SimpleName: assignsByVar to MethodInvocation at 0", "INS SimpleName: n to ClassInstanceCreation at 1", "INS SimpleName: getVar to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: isName to MethodInvocation at 1", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: target to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleType: DestructuringAssign to ClassInstanceCreation at 0"]}, {"root": "INS IfStatement to SwitchStatement at 39", "operations": ["INS MethodInvocation to IfStatement at 0", "INS IfStatement to SwitchStatement at 39", "INS SimpleName: isParamList to MethodInvocation at 1", "INS SimpleName: parent to MethodInvocation at 0"]}, {"root": "INS BreakStatement to SwitchStatement at 42", "operations": ["INS BreakStatement to SwitchStatement at 42"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Node to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "MOVE from EnhancedForStatement", "operations": ["MOV MethodInvocation to EnhancedForStatement at 1"]}, {"root": "MOVE from SimpleType: Node", "operations": ["MOV SimpleName: Node to SimpleType: Node at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0", "MOV ExpressionStatement to SwitchStatement at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 1"]}, {"root": "UPDATE from Assign to AbstractCompiler", "operations": ["UPD SimpleName: Assign from Assign to AbstractCompiler", "UPD SimpleType: Assign from Assign to AbstractCompiler"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: assign to SingleVariableDeclaration at 1", "MOV SimpleType: Assign to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from var to compiler", "operations": ["UPD SimpleName: var from var to compiler", "UPD SimpleName: getParent from getParent to compiler", "UPD SimpleName: assign from assign to compiler"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS SimpleName: compiler to MethodInvocation at 0", "INS SimpleName: reportChangeToEnclosingScope to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assignNode to MethodInvocation at 2"]}, {"root": "UPDATE from HashMap to HashSet", "operations": ["UPD SimpleType: HashMap from HashMap to HashSet", "UPD SimpleName: HashMap from HashMap to HashSet"]}, {"root": "UPDATE from OBJECT_PATTERN to REST", "operations": ["UPD SimpleName: OBJECT_PATTERN from OBJECT_PATTERN to REST"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV MethodInvocation to IfStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1", "MOV Block to IfStatement at 1"]}, {"root": "INS SimpleName: Node to SimpleType: Node at 0", "operations": ["INS SimpleName: Node to SimpleType: Node at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleName: argList to SingleVariableDeclaration at 1", "MOV SimpleType: Node to SingleVariableDeclaration at 0"]}, {"root": "UPDATE from argList to removable", "operations": ["UPD SimpleName: argList from argList to removable"]}, {"root": "INS IfStatement to Block at 5", "operations": ["INS SimpleName: toRemove to InfixExpression: == at 0", "INS InfixExpression: == to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS IfStatement to Block at 5"]}, {"root": "INS VariableDeclarationStatement to Block at 8", "operations": ["INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: grandParent to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 8", "INS NullLiteral to ConditionalExpression at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS SimpleName: parent to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS IfStatement to Block at 9", "operations": ["INS SimpleName: grandParent to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: == to InfixExpression: || at 0", "INS IfStatement to IfStatement at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS InfixExpression: || to IfStatement at 0", "INS NullLiteral to InfixExpression: == at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 0", "INS InfixExpression: || to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: parent to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS IfStatement to Block at 9", "INS SimpleName: parent to InfixExpression: == at 0", "INS InfixExpression: || to MethodInvocation at 1", "INS StringLiteral: \"unremoved destructuring \" to MethodInvocation at 2", "INS InfixExpression: == to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: || at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV VariableDeclarationFragment to VariableDeclarationStatement at 1", "MOV SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from isDestructuringLhs to isObjectPattern", "operations": ["UPD SimpleName: isDestructuringLhs from isDestructuringLhs to isObjectPattern", "UPD SimpleName: isDestructuringLhs from isDestructuringLhs to isObjectPattern"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: target to VariableDeclarationFragment at 0", "INS SimpleName: getLastChild to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: n to MethodInvocation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Node to SimpleType: Node at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: value to VariableDeclarationFragment at 0"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: argList to MethodInvocation at 2", "MOV SimpleName: getLhsNodesOfDeclaration to MethodInvocation at 1", "MOV SimpleName: NodeUtil to MethodInvocation at 0"]}, {"root": "UPDATE from getLhsNodesOfDeclaration to deleteNode", "operations": ["UPD SimpleName: getLhsNodesOfDeclaration from getLhsNodesOfDeclaration to deleteNode", "UPD SimpleName: contains from contains to deleteNode"]}, {"root": "UPDATE from argList to toRemove", "operations": ["UPD SimpleName: argList from argList to toRemove"]}, {"root": "UPDATE from referenced to NodeUtil", "operations": ["UPD SimpleName: referenced from referenced to NodeUtil", "UPD SimpleName: fparamScope from fparamScope to NodeUtil", "UPD SimpleName: Lists from Lists to NodeUtil", "UPD SimpleName: assign from assign to NodeUtil"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: reverse to MethodInvocation at 1", "MOV SimpleName: destructuringDeclarations to MethodInvocation at 2", "MOV SimpleName: Lists to MethodInvocation at 0"]}, {"root": "UPDATE from reverse to removeChild", "operations": ["UPD SimpleName: reverse from reverse to removeChild"]}, {"root": "INS SimpleName: name to VariableDeclarationFragment at 0", "operations": ["INS SimpleName: name to VariableDeclarationFragment at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleName: toRemove to MethodInvocation at 0"]}, {"root": "UPDATE from toRemove to checkState", "operations": ["UPD SimpleName: toRemove from toRemove to checkState", "UPD SimpleName: toRemove from toRemove to checkState", "UPD SimpleName: patternElt from patternElt to checkState", "UPD SimpleName: NodeUtil from NodeUtil to checkState"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: patternElt to MethodInvocation at 0", "MOV SimpleName: getParent to MethodInvocation at 0"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: detach to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: toRemove to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toRemove to MethodInvocation at 2", "MOV SimpleName: getParent to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: var to MethodInvocation at 3", "MOV SimpleName: contains to MethodInvocation at 1", "MOV SimpleName: referenced to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toRemove to MethodInvocation at 0", "MOV SimpleName: getParent to MethodInvocation at 0"]}, {"root": "INS FieldAccess to Assignment: = at 0", "operations": ["INS SimpleName: removableNode to FieldAccess at 1", "INS FieldAccess to Assignment: = at 0", "INS ThisExpression to FieldAccess at 0"]}, {"root": "INS SimpleName: removableNode to Assignment: = at 1", "operations": ["INS SimpleName: removableNode to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: n to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: Node to SimpleType: Node at 0", "INS SimpleName: value to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: getLastChild to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: var to Assignment: = at 0", "INS SimpleName: getString to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: scope to MethodInvocation at 0", "INS SimpleName: getVar to MethodInvocation at 1", "INS SimpleName: target to MethodInvocation at 0", "INS ExpressionStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 3", "operations": ["INS ExpressionStatement to Block at 3", "INS SimpleName: target to MethodInvocation at 2", "INS SimpleName: add to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: assignsByNode to MethodInvocation at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS IfStatement to Block at 0", "INS SimpleName: isName to MethodInvocation at 1", "INS SimpleName: target to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS Block to IfStatement at 1"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS SimpleName: Node to SimpleType: Node at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: defaultTarget to MethodInvocation at 0", "INS MethodInvocation to Assignment: = at 1", "INS IfStatement to IfStatement at 2", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MethodInvocation to MethodInvocation at 0", "INS ExpressionStatement to Block at 1", "INS InfixExpression: && to IfStatement at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: getVar to MethodInvocation at 1", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: isName to MethodInvocation at 1", "INS SimpleName: isDefaultValue to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: scope to MethodInvocation at 0", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleName: var to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: markReferencedVar to MethodInvocation at 0", "INS SimpleName: defaultTarget to VariableDeclarationFragment at 0", "INS SimpleName: target to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS ExpressionStatement to Block at 2", "INS SimpleType: Node to VariableDeclarationStatement at 0", "INS SimpleName: getFirstChild to MethodInvocation at 1", "INS SimpleName: var to Assignment: = at 0"]}, {"root": "INS ConditionalExpression to VariableDeclarationFragment at 1", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS NullLiteral to ConditionalExpression at 2", "INS InfixExpression: != to ConditionalExpression at 0", "INS SimpleName: toRemove to InfixExpression: != at 0", "INS ConditionalExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV MethodInvocation to InfixExpression: || at 0"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV MethodInvocation to InfixExpression: || at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV IfStatement to IfStatement at 2"]}, {"root": "UPDATE from patternElt to name", "operations": ["UPD SimpleName: patternElt from patternElt to name", "UPD SimpleName: getParent from getParent to name"]}, {"root": "UPDATE from isDefaultValue to isName", "operations": ["UPD SimpleName: isDefaultValue from isDefaultValue to isName", "UPD SimpleName: isStringKey from isStringKey to isName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isDefaultValue to MethodInvocation at 1"]}, {"root": "UPDATE from mayHaveSideEffects to canRemoveParameters", "operations": ["UPD SimpleName: mayHaveSideEffects from mayHaveSideEffects to canRemoveParameters"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: defaultValueRhs to MethodInvocation at 1", "MOV SimpleName: mayHaveSideEffects to MethodInvocation at 0"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: replaceWith to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: toRemove to MethodInvocation at 0"]}, {"root": "UPDATE from getParent to nameNode", "operations": ["UPD SimpleName: getParent from getParent to nameNode", "UPD SimpleName: toRemove from toRemove to nameNode"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isStringKey to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toRemove to MethodInvocation at 0", "MOV SimpleName: getParent to MethodInvocation at 1"]}, {"root": "INS MethodInvocation to ExpressionStatement at 0", "operations": ["INS SimpleName: checkState to MethodInvocation at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS PrefixExpression: ! to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2", "MOV ExpressionStatement to Block at 0"]}, {"root": "INS PrefixExpression: ! to IfStatement at 0", "operations": ["INS MethodInvocation to PrefixExpression: ! at 0", "INS PrefixExpression: ! to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 4", "operations": ["INS SimpleName: markReferencedVar to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: var to MethodInvocation at 1", "INS Block to IfStatement at 4", "INS ExpressionStatement to Block at 0"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "MOVE from ConditionalExpression", "operations": ["MOV MethodInvocation to ConditionalExpression at 1"]}, {"root": "MOVE from InfixExpression: ||", "operations": ["MOV MethodInvocation to InfixExpression: || at 0", "MOV MethodInvocation to InfixExpression: || at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV MethodInvocation to IfStatement at 0"]}, {"root": "UPDATE from parent to assignNode", "operations": ["UPD SimpleName: parent from parent to assignNode", "UPD SimpleName: parent from parent to assignNode"]}, {"root": "UPDATE from replaceChild to replaceWith", "operations": ["UPD SimpleName: replaceChild from replaceChild to replaceWith", "UPD SimpleName: replaceChild from replaceChild to replaceWith"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: continuations to MethodInvocation at 0", "INS SimpleName: var to MethodInvocation at 2", "INS SimpleName: scope to ClassInstanceCreation at 2", "INS ClassInstanceCreation to MethodInvocation at 3", "INS ExpressionStatement to Block at 0", "INS SimpleName: n to ClassInstanceCreation at 1", "INS SimpleType: Continuation to ClassInstanceCreation at 0", "INS SimpleName: Continuation to SimpleType: Continuation at 0", "INS SimpleName: put to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS ExpressionStatement to Block at 1", "INS SimpleName: put to MethodInvocation at 1", "INS ClassInstanceCreation to MethodInvocation at 3", "INS SimpleName: var to MethodInvocation at 2", "INS SimpleType: DestructuringAssign to ClassInstanceCreation at 0", "INS SimpleName: DestructuringAssign to SimpleType: DestructuringAssign at 0", "INS SimpleName: n to ClassInstanceCreation at 1", "INS SimpleName: target to ClassInstanceCreation at 2", "INS SimpleName: assignsByVar to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isNestedObjectPattern to MethodInvocation at 1", "MOV SimpleName: n to MethodInvocation at 2", "MOV SimpleName: NodeUtil to MethodInvocation at 0"]}, {"root": "UPDATE from isNestedObjectPattern to mayHaveSideEffects", "operations": ["UPD SimpleName: isNestedObjectPattern from isNestedObjectPattern to mayHaveSideEffects", "UPD SimpleName: getVar from getVar to mayHaveSideEffects", "UPD SimpleName: isNestedArrayPattern from isNestedArrayPattern to mayHaveSideEffects", "UPD SimpleName: removeChild from removeChild to mayHaveSideEffects"]}, {"root": "UPDATE from n to value", "operations": ["UPD SimpleName: n from n to value", "UPD SimpleName: n from n to value"]}, {"root": "INS MethodInvocation to MethodInvocation at 2", "operations": ["INS SimpleName: lastArg to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toRemove to MethodInvocation at 0"]}, {"root": "UPDATE from isDefaultValue to isStringKey", "operations": ["UPD SimpleName: isDefaultValue from isDefaultValue to isStringKey"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: toRemove to MethodInvocation at 0"]}, {"root": "UPDATE from isFunction to isComputedProp", "operations": ["UPD SimpleName: isFunction from isFunction to isComputedProp"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: patternElt to MethodInvocation at 0", "MOV SimpleName: getNext to MethodInvocation at 1"]}, {"root": "UPDATE from getParent to getLastChild", "operations": ["UPD SimpleName: getParent from getParent to getLastChild", "UPD SimpleName: getNext from getNext to getLastChild", "UPD SimpleName: defaultValueSecondChild from defaultValueSecondChild to getLastChild"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getParent to MethodInvocation at 1", "MOV SimpleName: patternElt to MethodInvocation at 0"]}, {"root": "UPDATE from getParent to detach", "operations": ["UPD SimpleName: getParent from getParent to detach", "UPD SimpleName: removeChild from removeChild to detach"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: fparamScope to MethodInvocation at 0", "MOV SimpleName: getVar to MethodInvocation at 1"]}, {"root": "INS SimpleName: removableNode to MethodInvocation at 2", "operations": ["INS SimpleName: removableNode to MethodInvocation at 2"]}, {"root": "INS SimpleName: markFunctionsDeleted to MethodInvocation at 1", "operations": ["INS SimpleName: markFunctionsDeleted to MethodInvocation at 1"]}, {"root": "UPDATE from remove to removableNode", "operations": ["UPD SimpleName: remove from remove to removableNode"]}, {"root": "UPDATE from put to add", "operations": ["UPD SimpleName: put from put to add"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: n to MethodInvocation at 2", "MOV SimpleName: NodeUtil to MethodInvocation at 0", "MOV SimpleName: isNestedArrayPattern to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 0", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS MethodInvocation to MethodInvocation at 2", "INS SimpleName: target to MethodInvocation at 0", "INS SimpleName: scope to MethodInvocation at 0", "INS SimpleName: var to Assignment: = at 0", "INS ExpressionStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getVar to MethodInvocation at 1", "INS SimpleName: getString to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 1", "operations": ["INS SimpleName: add to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: assignsByNode to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: target to MethodInvocation at 2"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS SimpleName: n to ClassInstanceCreation at 1", "INS SimpleName: DestructuringAssign to SimpleType: DestructuringAssign at 0", "INS SimpleName: assignsByVar to MethodInvocation at 0", "INS SimpleName: put to MethodInvocation at 1", "INS SimpleName: var to MethodInvocation at 2", "INS SimpleName: target to ClassInstanceCreation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: DestructuringAssign to ClassInstanceCreation at 0", "INS ClassInstanceCreation to MethodInvocation at 3", "INS ExpressionStatement to Block at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: defaultValueSecondChild to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: NodeUtil to MethodInvocation at 0", "MOV SimpleName: toRemove to MethodInvocation at 3"]}, {"root": "UPDATE from getString to getFirstChild", "operations": ["UPD SimpleName: getString from getString to getFirstChild"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2", "MOV SimpleName: NodeUtil to MethodInvocation at 0", "MOV SimpleName: removeChild to MethodInvocation at 1"]}, {"root": "INS SimpleType: Removable to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Removable to SimpleType: Removable at 0", "INS SimpleType: Removable to SingleVariableDeclaration at 0"]}, {"root": "INS SimpleName: removable to SingleVariableDeclaration at 1", "operations": ["INS SimpleName: removable to SingleVariableDeclaration at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleName: removable to InstanceofExpression at 0", "INS SimpleName: DestructuringAssign to SimpleType: DestructuringAssign at 0", "INS ContinueStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleType: DestructuringAssign to InstanceofExpression at 1", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: assignedToUnknownValue to Assignment: = at 0", "INS IfStatement to Block at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: Assign to SimpleType: Assign at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleType: Assign to VariableDeclarationStatement at 0", "INS SimpleName: removable to CastExpression at 1", "INS SimpleName: assign to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from containsKey to contains", "operations": ["UPD SimpleName: containsKey from containsKey to contains"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: Assign to CastExpression at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.Lists"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util.HashMap", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util.Map"]}, {"root": "DEL SimpleType: Assign", "operations": ["DEL SimpleType: Assign", "DEL SimpleName: Assign"]}, {"root": "DEL SimpleName: maybeAssign", "operations": ["DEL SimpleName: maybeAssign"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL Block", "operations": ["DEL BreakStatement", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: argList", "DEL ExpressionStatement", "DEL SimpleName: removeUnusedDestructuringNames", "DEL MethodInvocation", "DEL SimpleName: fparamScope"]}, {"root": "DEL MethodDeclaration", "operations": ["DEL TextElement: Iterate through the parameters of the function and if they are destructuring parameters, remove", "DEL SingleVariableDeclaration", "DEL EnhancedForStatement", "DEL SimpleName: destructuringDeclarations", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: compiler", "DEL SimpleName: fparamScope", "DEL MethodInvocation", "DEL SimpleName: var", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL IfStatement", "DEL ParameterizedType: List<Node>", "DEL Block", "DEL IfStatement", "DEL SimpleName: defaultValueRhs", "DEL SimpleName: isParamList", "DEL Block", "DEL MethodInvocation", "DEL SimpleType: Var", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: List", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL TagElement", "DEL Block", "DEL SimpleName: reportChangeToEnclosingScope", "DEL SimpleName: Scope", "DEL SimpleName: Var", "DEL MethodInvocation", "DEL SimpleType: Scope", "DEL MethodInvocation", "DEL Javadoc", "DEL IfStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: NodeUtil", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL TextElement: any unreferenced variables from inside the destructuring pattern.", "DEL SingleVariableDeclaration", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Block", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: List", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL SimpleName: defaultValueSecondChild", "DEL SimpleName: lValue", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL VariableDeclarationStatement", "DEL SimpleName: getNext"]}, {"root": "DEL SimpleName: assign", "operations": ["DEL SimpleName: assign"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: parent", "DEL VariableDeclarationStatement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: toRemove", "DEL SimpleName: getGrandparent"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: NodeUtil", "DEL SimpleName: getEnclosingScopeRoot"]}, {"root": "DEL InfixExpression: ||", "operations": ["DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: toRemove", "DEL SimpleName: getEnclosingScopeRoot", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleName: NodeUtil", "DEL SimpleName: getEnclosingScopeRoot", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: isFunction", "DEL SimpleName: NodeUtil", "DEL ParenthesizedExpression", "DEL SimpleName: isFunction", "DEL InfixExpression: &&", "DEL SimpleName: toRemove", "DEL InfixExpression: &&", "DEL SimpleName: parent", "DEL SimpleName: isFunction"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: isFunction", "DEL SimpleName: checkState", "DEL SimpleName: isFunction", "DEL InfixExpression: ||", "DEL ExpressionStatement", "DEL SimpleName: isDestructuringDeclaration", "DEL SimpleName: toRemove", "DEL MethodInvocation", "DEL SimpleName: isFunction", "DEL SimpleName: isRest", "DEL MethodInvocation", "DEL SimpleName: toRemove", "DEL SimpleName: isParamList", "DEL SimpleName: isClass", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: toRemove", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: parent", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: toRemove", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: isObjectPattern", "DEL SimpleName: NodeUtil", "DEL SimpleName: toRemove", "DEL ParenthesizedExpression", "DEL StringLiteral: \"We should only declare Vars and functions and function args and classes\"", "DEL ParenthesizedExpression", "DEL SimpleName: isNameDeclaration", "DEL InfixExpression: &&", "DEL SimpleName: isArrayPattern", "DEL MethodInvocation", "DEL SimpleName: getEnclosingScopeRoot", "DEL SimpleName: parent", "DEL InfixExpression: &&", "DEL MethodInvocation"]}, {"root": "DEL SimpleName: toRemove", "operations": ["DEL SimpleName: toRemove"]}, {"root": "DEL SimpleName: patternElt", "operations": ["DEL SimpleName: patternElt"]}, {"root": "DEL ContinueStatement", "operations": ["DEL ContinueStatement"]}, {"root": "DEL Assignment: =", "operations": ["DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: toRemove"]}, {"root": "DEL SimpleName: toRemove", "operations": ["DEL SimpleName: toRemove"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: toRemove", "DEL SimpleName: getParent"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: toRemove"]}, {"root": "DEL QualifiedName: assign.assignNode", "operations": ["DEL QualifiedName: assign.assignNode"]}, {"root": "DEL Block", "operations": ["DEL EnhancedForStatement", "DEL Block", "DEL Block", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: assignNode", "operations": ["DEL SimpleName: assignNode"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: grandparent"]}, {"root": "DEL SimpleName: parent", "operations": ["DEL SimpleName: parent"]}, {"root": "DEL SimpleName: assignNode", "operations": ["DEL SimpleName: assignNode"]}]}}, {"RemoveUnusedVars_diff": {"operations": ["Insert MethodDeclaration(1537) into TypeDeclaration: class(3997) at 27", "Insert MethodDeclaration(2894) into TypeDeclaration: class(3997) at 32", "Insert MethodDeclaration(3281) into TypeDeclaration: class(3997) at 35", "Insert MethodDeclaration(3403) into TypeDeclaration: class(3997) at 36", "Insert TypeDeclaration: interface(3500) into TypeDeclaration: class(3997) at 38", "Insert TypeDeclaration: class(3662) into TypeDeclaration: class(3997) at 39", "Update ParameterizedType: Multimap<Var,Assign>(187) to Multimap<Var,Removable>", "Update ParameterizedType: Map<Node,Assign>(205) to Set<Node>", "Move VariableDeclarationStatement(1173) into Block(1471) at 8", "Move ExpressionStatement(1178) into Block(1471) at 9", "Move Modifier: private(1314) into MethodDeclaration(1537) at 0", "Insert PrimitiveType: boolean(1506) into MethodDeclaration(1537) at 1", "Insert SimpleName: canRemoveParameters(1507) into MethodDeclaration(1537) at 2", "Insert SingleVariableDeclaration(1511) into MethodDeclaration(1537) at 3", "Insert Block(1536) into MethodDeclaration(1537) at 4", "Move Javadoc(2682) into MethodDeclaration(2894) at 0", "Insert Modifier: private(2871) into MethodDeclaration(2894) at 1", "Move PrimitiveType: void(1315) into MethodDeclaration(2894) at 2", "Update SimpleName: removeUnusedDestructuringNames(1316) to removeAllAssigns", "Move SimpleName: removeUnusedDestructuringNames(1316) into MethodDeclaration(2894) at 3", "Move SingleVariableDeclaration(2689) into MethodDeclaration(2894) at 4", "Insert Block(2893) into MethodDeclaration(2894) at 5", "Insert Modifier: private(3240) into MethodDeclaration(3281) at 0", "Insert PrimitiveType: void(3241) into MethodDeclaration(3281) at 1", "Insert SimpleName: removeRestNode(3242) into MethodDeclaration(3281) at 2", "Insert SingleVariableDeclaration(3246) into MethodDeclaration(3281) at 3", "Insert SingleVariableDeclaration(3250) into MethodDeclaration(3281) at 4", "Insert Block(3280) into MethodDeclaration(3281) at 5", "Insert Modifier: private(3282) into MethodDeclaration(3403) at 0", "Insert PrimitiveType: void(3283) into MethodDeclaration(3403) at 1", "Insert SimpleName: removeDefaultValueNode(3284) into MethodDeclaration(3403) at 2", "Insert SingleVariableDeclaration(3288) into MethodDeclaration(3403) at 3", "Insert SingleVariableDeclaration(3292) into MethodDeclaration(3403) at 4", "Insert Block(3402) into MethodDeclaration(3403) at 5", "Insert Modifier: private(3489) into TypeDeclaration: interface(3500) at 0", "Insert Modifier: static(3490) into TypeDeclaration: interface(3500) at 1", "Insert SimpleName: Removable(3491) into TypeDeclaration: interface(3500) at 2", "Insert MethodDeclaration(3499) into TypeDeclaration: interface(3500) at 3", "Insert Modifier: private(3501) into TypeDeclaration: class(3662) at 0", "Insert SimpleName: DestructuringAssign(3502) into TypeDeclaration: class(3662) at 1", "Insert SimpleType: Removable(3504) into TypeDeclaration: class(3662) at 2", "Insert FieldDeclaration(3510) into TypeDeclaration: class(3662) at 3", "Insert FieldDeclaration(3516) into TypeDeclaration: class(3662) at 4", "Insert MethodDeclaration(3568) into TypeDeclaration: class(3662) at 5", "Move MethodDeclaration(2711) into TypeDeclaration: class(3662) at 6", "Insert SimpleType: Removable(3667) into TypeDeclaration: class(3960) at 3", "Update SimpleType: Assign(186) to Removable", "Update SimpleType: Map(200) to Set", "Move SwitchCase(796) into SwitchStatement(1250) at 26", "Move BreakStatement(983) into SwitchStatement(1250) at 28", "Insert VariableDeclarationStatement(1405) into Block(1471) at 2", "Insert ExpressionStatement(1460) into Block(1471) at 9", "Move SimpleType: Node(1494) into SingleVariableDeclaration(1511) at 0", "Insert SimpleName: parameterList(1510) into SingleVariableDeclaration(1511) at 1", "Insert ExpressionStatement(1517) into Block(1536) at 0", "Insert VariableDeclarationStatement(1525) into Block(1536) at 1", "Insert ReturnStatement(1535) into Block(1536) at 2", "Insert EnhancedForStatement(2892) into Block(2893) at 0", "Move SimpleType: Node(2811) into SingleVariableDeclaration(3246) at 0", "Insert SimpleName: toRemove(3245) into SingleVariableDeclaration(3246) at 1", "Insert SimpleType: Node(3248) into SingleVariableDeclaration(3250) at 0", "Insert SimpleName: parent(3249) into SingleVariableDeclaration(3250) at 1", "Insert SwitchStatement(3279) into Block(3280) at 0", "Insert SimpleType: Node(3286) into SingleVariableDeclaration(3288) at 0", "Insert SimpleName: toRemove(3287) into SingleVariableDeclaration(3288) at 1", "Move SimpleType: Node(1338) into SingleVariableDeclaration(3292) at 0", "Update SimpleName: patternElt(1339) to parent", "Move SimpleName: patternElt(1339) into SingleVariableDeclaration(3292) at 1", "Insert SwitchStatement(3401) into Block(3402) at 0", "Insert Modifier: public(3492) into MethodDeclaration(3499) at 0", "Insert PrimitiveType: void(3493) into MethodDeclaration(3499) at 1", "Insert SimpleName: remove(3494) into MethodDeclaration(3499) at 2", "Insert SingleVariableDeclaration(3498) into MethodDeclaration(3499) at 3", "Insert SimpleName: Removable(3503) into SimpleType: Removable(3504) at 0", "Insert Modifier: final(3505) into FieldDeclaration(3510) at 0", "Insert SimpleType: Node(3507) into FieldDeclaration(3510) at 1", "Insert VariableDeclarationFragment(3509) into FieldDeclaration(3510) at 2", "Insert Modifier: final(3511) into FieldDeclaration(3516) at 0", "Insert SimpleType: Node(3513) into FieldDeclaration(3516) at 1", "Insert VariableDeclarationFragment(3515) into FieldDeclaration(3516) at 2", "Insert SimpleName: DestructuringAssign(3517) into MethodDeclaration(3568) at 0", "Insert SingleVariableDeclaration(3521) into MethodDeclaration(3568) at 1", "Insert SingleVariableDeclaration(3525) into MethodDeclaration(3568) at 2", "Insert Block(3567) into MethodDeclaration(3568) at 3", "Insert MarkerAnnotation(3570) into MethodDeclaration(3661) at 0", "Update Modifier: private(2683) to public", "Update SimpleName: removeAllAssigns(2685) to remove", "Insert SingleVariableDeclaration(3577) into MethodDeclaration(3661) at 4", "Insert Block(3660) into MethodDeclaration(3661) at 5", "Insert SimpleName: Removable(3666) into SimpleType: Removable(3667) at 0", "Insert MarkerAnnotation(3850) into MethodDeclaration(3959) at 1", "Insert Modifier: public(3851) into MethodDeclaration(3959) at 2", "Update SimpleName: Assign(185) to Removable", "Update SimpleName: Map(199) to Set", "Update ParameterizedType: HashMap<>(209) to HashSet<>", "Insert SwitchCase(787) into SwitchStatement(1250) at 22", "Insert Block(856) into SwitchStatement(1250) at 23", "Insert Block(897) into SwitchStatement(1250) at 26", "Insert BreakStatement(898) into SwitchStatement(1250) at 27", "Insert ForStatement(947) into SwitchStatement(1250) at 29", "Insert BreakStatement(948) into SwitchStatement(1250) at 30", "Insert SwitchCase(950) into SwitchStatement(1250) at 31", "Insert SwitchCase(1045) into SwitchStatement(1250) at 34", "Insert IfStatement(1089) into SwitchStatement(1250) at 35", "Insert IfStatement(1098) into SwitchStatement(1250) at 38", "Insert BreakStatement(1247) into SwitchStatement(1250) at 41", "Insert Modifier: final(1396) into VariableDeclarationStatement(1405) at 0", "Move SimpleType: Node(1328) into VariableDeclarationStatement(1405) at 1", "Insert VariableDeclarationFragment(1404) into VariableDeclarationStatement(1405) at 2", "Insert MethodInvocation(1459) into ExpressionStatement(1460) at 0", "Insert MethodInvocation(1516) into ExpressionStatement(1517) at 0", "Move SimpleType: Node(1357) into VariableDeclarationStatement(1525) at 0", "Insert VariableDeclarationFragment(1524) into VariableDeclarationStatement(1525) at 1", "Insert InfixExpression: &&(1534) into ReturnStatement(1535) at 0", "Insert SingleVariableDeclaration(2881) into EnhancedForStatement(2892) at 0", "Move MethodInvocation(2697) into EnhancedForStatement(2892) at 1", "Insert Block(2891) into EnhancedForStatement(2892) at 2", "Move SimpleName: Node(1327) into SimpleType: Node(3248) at 0", "Insert MethodInvocation(3253) into SwitchStatement(3279) at 0", "Insert SwitchCase(3255) into SwitchStatement(3279) at 1", "Insert SwitchCase(3257) into SwitchStatement(3279) at 2", "Insert ExpressionStatement(3265) into SwitchStatement(3279) at 3", "Insert ExpressionStatement(3271) into SwitchStatement(3279) at 4", "Insert BreakStatement(3272) into SwitchStatement(3279) at 5", "Insert SwitchCase(3273) into SwitchStatement(3279) at 6", "Insert ThrowStatement(3278) into SwitchStatement(3279) at 7", "Insert SimpleName: Node(3285) into SimpleType: Node(3286) at 0", "Insert MethodInvocation(3295) into SwitchStatement(3401) at 0", "Insert SwitchCase(3297) into SwitchStatement(3401) at 1", "Insert ExpressionStatement(3302) into SwitchStatement(3401) at 2", "Insert ExpressionStatement(3308) into SwitchStatement(3401) at 3", "Move ExpressionStatement(1421) into SwitchStatement(3401) at 4", "Insert BreakStatement(3315) into SwitchStatement(3401) at 5", "Insert SwitchCase(3317) into SwitchStatement(3401) at 6", "Insert ExpressionStatement(3322) into SwitchStatement(3401) at 7", "Insert VariableDeclarationStatement(3330) into SwitchStatement(3401) at 8", "Insert ExpressionStatement(3336) into SwitchStatement(3401) at 9", "Insert IfStatement(3361) into SwitchStatement(3401) at 10", "Insert ExpressionStatement(3367) into SwitchStatement(3401) at 11", "Insert BreakStatement(3368) into SwitchStatement(3401) at 12", "Insert SwitchCase(3370) into SwitchStatement(3401) at 13", "Insert SwitchCase(3372) into SwitchStatement(3401) at 14", "Insert ExpressionStatement(3387) into SwitchStatement(3401) at 15", "Insert ExpressionStatement(3393) into SwitchStatement(3401) at 16", "Insert BreakStatement(3394) into SwitchStatement(3401) at 17", "Insert SwitchCase(3395) into SwitchStatement(3401) at 18", "Insert ThrowStatement(3400) into SwitchStatement(3401) at 19", "Insert SimpleType: AbstractCompiler(3496) into SingleVariableDeclaration(3498) at 0", "Insert SimpleName: compiler(3497) into SingleVariableDeclaration(3498) at 1", "Insert SimpleName: Node(3506) into SimpleType: Node(3507) at 0", "Insert SimpleName: removableNode(3508) into VariableDeclarationFragment(3509) at 0", "Insert SimpleName: Node(3512) into SimpleType: Node(3513) at 0", "Insert SimpleName: nameNode(3514) into VariableDeclarationFragment(3515) at 0", "Insert SimpleType: Node(3519) into SingleVariableDeclaration(3521) at 0", "Insert SimpleName: removableNode(3520) into SingleVariableDeclaration(3521) at 1", "Insert SimpleType: Node(3523) into SingleVariableDeclaration(3525) at 0", "Insert SimpleName: nameNode(3524) into SingleVariableDeclaration(3525) at 1", "Insert ExpressionStatement(3531) into Block(3567) at 0", "Move ExpressionStatement(1413) into Block(3567) at 1", "Insert ExpressionStatement(3543) into Block(3567) at 2", "Insert VariableDeclarationStatement(3551) into Block(3567) at 3", "Insert IfStatement(3566) into Block(3567) at 4", "Insert SimpleName: Override(3569) into MarkerAnnotation(3570) at 0", "Update SimpleType: Assign(2691) to AbstractCompiler", "Move SimpleType: Assign(2691) into SingleVariableDeclaration(3577) at 0", "Update SimpleName: assign(2692) to compiler", "Move SimpleName: assign(2692) into SingleVariableDeclaration(3577) at 1", "Insert VariableDeclarationStatement(3585) into Block(3660) at 0", "Insert IfStatement(3659) into Block(3660) at 1", "Insert SimpleName: Override(3849) into MarkerAnnotation(3850) at 0", "Insert ExpressionStatement(3862) into Block(3958) at 0", "Update SimpleType: HashMap(208) to HashSet", "Insert SimpleName: DEFAULT_VALUE(786) into SwitchCase(787) at 0", "Insert VariableDeclarationStatement(795) into Block(856) at 0", "Insert IfStatement(855) into Block(856) at 1", "Update SimpleName: OBJECT_PATTERN(814) to REST", "Insert VariableDeclarationStatement(867) into Block(897) at 0", "Insert IfStatement(896) into Block(897) at 1", "Insert VariableDeclarationExpression(908) into ForStatement(947) at 0", "Insert InfixExpression: !=(911) into ForStatement(947) at 1", "Insert Assignment: =(916) into ForStatement(947) at 2", "Insert Block(946) into ForStatement(947) at 3", "Insert SimpleName: COMPUTED_PROP(949) into SwitchCase(950) at 0", "Insert SimpleName: STRING_KEY(1044) into SwitchCase(1045) at 0", "Move MethodInvocation(801) into IfStatement(1089) at 0", "Insert Block(1088) into IfStatement(1089) at 1", "Insert MethodInvocation(1095) into IfStatement(1098) at 0", "Move Block(826) into IfStatement(1098) at 1", "Insert SimpleName: Node(1397) into SimpleType: Node(1398) at 0", "Insert SimpleName: paramlist(1399) into VariableDeclarationFragment(1404) at 0", "Insert MethodInvocation(1403) into VariableDeclarationFragment(1404) at 1", "Insert SimpleName: traverseChildren(1456) into MethodInvocation(1459) at 0", "Insert SimpleName: paramlist(1457) into MethodInvocation(1459) at 1", "Insert SimpleName: fparamScope(1458) into MethodInvocation(1459) at 2", "Insert SimpleName: checkState(1512) into MethodInvocation(1516) at 0", "Insert MethodInvocation(1515) into MethodInvocation(1516) at 1", "Insert SimpleName: function(1520) into VariableDeclarationFragment(1524) at 0", "Insert MethodInvocation(1523) into VariableDeclarationFragment(1524) at 1", "Insert SimpleName: removeGlobals(1526) into InfixExpression: &&(1534) at 0", "Insert PrefixExpression: !(1533) into InfixExpression: &&(1534) at 1", "Update SimpleType: Node(1318) to Removable", "Move SimpleType: Node(1318) into SingleVariableDeclaration(2881) at 0", "Update SimpleName: argList(1319) to removable", "Move SimpleName: argList(1319) into SingleVariableDeclaration(2881) at 1", "Insert ExpressionStatement(2890) into Block(2891) at 0", "Insert IfStatement(2998) into Block(3236) at 5", "Insert VariableDeclarationStatement(3024) into Block(3236) at 7", "Insert IfStatement(3235) into Block(3236) at 8", "Insert SimpleName: parent(3251) into MethodInvocation(3253) at 0", "Insert SimpleName: getToken(3252) into MethodInvocation(3253) at 1", "Insert SimpleName: ARRAY_PATTERN(3254) into SwitchCase(3255) at 0", "Insert SimpleName: PARAM_LIST(3256) into SwitchCase(3257) at 0", "Insert MethodInvocation(3264) into ExpressionStatement(3265) at 0", "Insert MethodInvocation(3270) into ExpressionStatement(3271) at 0", "Insert ClassInstanceCreation(3277) into ThrowStatement(3278) at 0", "Insert SimpleName: parent(3293) into MethodInvocation(3295) at 0", "Insert SimpleName: getToken(3294) into MethodInvocation(3295) at 1", "Insert SimpleName: ARRAY_PATTERN(3296) into SwitchCase(3297) at 0", "Insert MethodInvocation(3301) into ExpressionStatement(3302) at 0", "Insert MethodInvocation(3307) into ExpressionStatement(3308) at 0", "Insert SimpleName: PARAM_LIST(3316) into SwitchCase(3317) at 0", "Insert MethodInvocation(3321) into ExpressionStatement(3322) at 0", "Move SimpleType: Node(1346) into VariableDeclarationStatement(3330) at 0", "Move VariableDeclarationFragment(1349) into VariableDeclarationStatement(3330) at 1", "Insert MethodInvocation(3335) into ExpressionStatement(3336) at 0", "Insert InfixExpression: &&(3347) into IfStatement(3361) at 0", "Move Block(1369) into IfStatement(3361) at 1", "Insert Block(3360) into IfStatement(3361) at 2", "Insert MethodInvocation(3366) into ExpressionStatement(3367) at 0", "Insert SimpleName: COMPUTED_PROP(3369) into SwitchCase(3370) at 0", "Insert SimpleName: STRING_KEY(3371) into SwitchCase(3372) at 0", "Insert MethodInvocation(3386) into ExpressionStatement(3387) at 0", "Insert MethodInvocation(3392) into ExpressionStatement(3393) at 0", "Insert ClassInstanceCreation(3399) into ThrowStatement(3400) at 0", "Insert SimpleName: AbstractCompiler(3495) into SimpleType: AbstractCompiler(3496) at 0", "Insert SimpleName: Node(3518) into SimpleType: Node(3519) at 0", "Insert SimpleName: Node(3522) into SimpleType: Node(3523) at 0", "Insert MethodInvocation(3530) into ExpressionStatement(3531) at 0", "Insert Assignment: =(3542) into ExpressionStatement(3543) at 0", "Insert SimpleType: Node(3545) into VariableDeclarationStatement(3551) at 0", "Insert VariableDeclarationFragment(3550) into VariableDeclarationStatement(3551) at 1", "Insert MethodInvocation(3554) into IfStatement(3566) at 0", "Insert Block(3565) into IfStatement(3566) at 1", "Update SimpleName: Assign(2690) to AbstractCompiler", "Insert SimpleType: Node(3579) into VariableDeclarationStatement(3585) at 0", "Insert VariableDeclarationFragment(3584) into VariableDeclarationStatement(3585) at 1", "Insert MethodInvocation(3588) into IfStatement(3659) at 0", "Insert Block(3594) into IfStatement(3659) at 1", "Insert IfStatement(3658) into IfStatement(3659) at 2", "Insert MethodInvocation(3861) into ExpressionStatement(3862) at 0", "Update SimpleName: HashMap(207) to HashSet", "Insert SimpleType: Node(789) into VariableDeclarationStatement(795) at 0", "Insert VariableDeclarationFragment(794) into VariableDeclarationStatement(795) at 1", "Insert MethodInvocation(798) into IfStatement(855) at 0", "Move Block(811) into IfStatement(855) at 1", "Insert SimpleType: Node(861) into VariableDeclarationStatement(867) at 0", "Insert VariableDeclarationFragment(866) into VariableDeclarationStatement(867) at 1", "Insert MethodInvocation(870) into IfStatement(896) at 0", "Insert Block(895) into IfStatement(896) at 1", "Insert SimpleType: Node(902) into VariableDeclarationExpression(908) at 0", "Insert VariableDeclarationFragment(907) into VariableDeclarationExpression(908) at 1", "Insert SimpleName: c(909) into InfixExpression: !=(911) at 0", "Insert NullLiteral(910) into InfixExpression: !=(911) at 1", "Insert SimpleName: c(912) into Assignment: =(916) at 0", "Insert MethodInvocation(915) into Assignment: =(916) at 1", "Insert IfStatement(945) into Block(946) at 0", "Update SimpleName: isDestructuringLhs(819) to isObjectPattern", "Insert VariableDeclarationStatement(963) into Block(1041) at 0", "Insert VariableDeclarationStatement(971) into Block(1041) at 1", "Update SimpleName: isDestructuringLhs(800) to isObjectPattern", "Insert VariableDeclarationStatement(1058) into Block(1088) at 0", "Insert IfStatement(1087) into Block(1088) at 1", "Insert SimpleName: parent(1093) into MethodInvocation(1095) at 0", "Insert SimpleName: isParamList(1094) into MethodInvocation(1095) at 1", "Insert SimpleName: NodeUtil(1400) into MethodInvocation(1403) at 0", "Insert SimpleName: getFunctionParameters(1401) into MethodInvocation(1403) at 1", "Insert SimpleName: function(1402) into MethodInvocation(1403) at 2", "Insert SimpleName: parameterList(1513) into MethodInvocation(1515) at 0", "Insert SimpleName: isParamList(1514) into MethodInvocation(1515) at 1", "Insert SimpleName: parameterList(1521) into MethodInvocation(1523) at 0", "Insert SimpleName: getParent(1522) into MethodInvocation(1523) at 1", "Insert MethodInvocation(1532) into PrefixExpression: !(1533) at 0", "Update SimpleName: Node(1317) to Removable", "Insert MethodInvocation(2889) into ExpressionStatement(2890) at 0", "Insert InfixExpression: ==(2995) into IfStatement(2998) at 0", "Move Block(1385) into IfStatement(2998) at 1", "Move SimpleType: Node(3431) into VariableDeclarationStatement(3024) at 0", "Insert VariableDeclarationFragment(3023) into VariableDeclarationStatement(3024) at 1", "Insert InfixExpression: ||(3031) into IfStatement(3235) at 0", "Insert Block(3042) into IfStatement(3235) at 1", "Insert IfStatement(3234) into IfStatement(3235) at 2", "Insert SimpleName: checkState(3258) into MethodInvocation(3264) at 0", "Insert InfixExpression: ==(3263) into MethodInvocation(3264) at 1", "Move SimpleName: NodeUtil(1331) into MethodInvocation(3270) at 0", "Update SimpleName: getLhsNodesOfDeclaration(1332) to deleteNode", "Move SimpleName: getLhsNodesOfDeclaration(1332) into MethodInvocation(3270) at 1", "Update SimpleName: argList(1333) to toRemove", "Move SimpleName: argList(1333) into MethodInvocation(3270) at 2", "Insert SimpleName: compiler(3269) into MethodInvocation(3270) at 3", "Insert SimpleType: IllegalStateException(3275) into ClassInstanceCreation(3277) at 0", "Insert StringLiteral: \"unexpected\"(3276) into ClassInstanceCreation(3277) at 1", "Insert SimpleName: compiler(3298) into MethodInvocation(3301) at 0", "Insert SimpleName: reportChangeToEnclosingScope(3299) into MethodInvocation(3301) at 1", "Insert SimpleName: toRemove(3300) into MethodInvocation(3301) at 2", "Update SimpleName: Lists(1341) to NodeUtil", "Move SimpleName: Lists(1341) into MethodInvocation(3307) at 0", "Update SimpleName: reverse(1342) to removeChild", "Move SimpleName: reverse(1342) into MethodInvocation(3307) at 1", "Update SimpleName: destructuringDeclarations(1343) to parent", "Move SimpleName: destructuringDeclarations(1343) into MethodInvocation(3307) at 2", "Insert SimpleName: toRemove(3306) into MethodInvocation(3307) at 3", "Insert SimpleName: compiler(3318) into MethodInvocation(3321) at 0", "Insert SimpleName: reportChangeToEnclosingScope(3319) into MethodInvocation(3321) at 1", "Insert SimpleName: toRemove(3320) into MethodInvocation(3321) at 2", "Insert SimpleName: name(3325) into VariableDeclarationFragment(3329) at 0", "Insert MethodInvocation(3328) into VariableDeclarationFragment(3329) at 1", "Update SimpleName: patternElt(1351) to checkState", "Move SimpleName: patternElt(1351) into MethodInvocation(3335) at 0", "Insert MethodInvocation(3334) into MethodInvocation(3335) at 1", "Insert InfixExpression: &&(3343) into InfixExpression: &&(3347) at 0", "Insert MethodInvocation(3346) into InfixExpression: &&(3347) at 1", "Insert ExpressionStatement(3351) into Block(3352) at 0", "Move ExpressionStatement(1376) into Block(3360) at 0", "Insert SimpleName: NodeUtil(3362) into MethodInvocation(3366) at 0", "Insert SimpleName: markFunctionsDeleted(3363) into MethodInvocation(3366) at 1", "Move SimpleName: toRemove(1379) into MethodInvocation(3366) at 2", "Update SimpleName: getParent(1380) to compiler", "Move SimpleName: getParent(1380) into MethodInvocation(3366) at 3", "Insert SimpleName: checkState(3373) into MethodInvocation(3386) at 0", "Insert InfixExpression: ||(3385) into MethodInvocation(3386) at 1", "Update SimpleName: referenced(1398) to NodeUtil", "Move SimpleName: referenced(1398) into MethodInvocation(3392) at 0", "Update SimpleName: contains(1399) to deleteNode", "Move SimpleName: contains(1399) into MethodInvocation(3392) at 1", "Insert SimpleName: parent(3390) into MethodInvocation(3392) at 2", "Update SimpleName: var(1400) to compiler", "Move SimpleName: var(1400) into MethodInvocation(3392) at 3", "Insert SimpleType: IllegalStateException(3397) into ClassInstanceCreation(3399) at 0", "Insert StringLiteral: \"unexpected\"(3398) into ClassInstanceCreation(3399) at 1", "Update SimpleName: toRemove(1403) to checkState", "Move SimpleName: toRemove(1403) into MethodInvocation(3530) at 0", "Insert MethodInvocation(3529) into MethodInvocation(3530) at 1", "Insert FieldAccess(3534) into Assignment: =(3536) at 0", "Insert SimpleName: removableNode(3535) into Assignment: =(3536) at 1", "Insert FieldAccess(3540) into Assignment: =(3542) at 0", "Insert SimpleName: nameNode(3541) into Assignment: =(3542) at 1", "Insert SimpleName: Node(3544) into SimpleType: Node(3545) at 0", "Insert SimpleName: parent(3546) into VariableDeclarationFragment(3550) at 0", "Insert MethodInvocation(3549) into VariableDeclarationFragment(3550) at 1", "Insert SimpleName: parent(3552) into MethodInvocation(3554) at 0", "Insert SimpleName: isDefaultValue(3553) into MethodInvocation(3554) at 1", "Move ExpressionStatement(1436) into Block(3565) at 0", "Insert SimpleName: Node(3578) into SimpleType: Node(3579) at 0", "Insert SimpleName: removableParent(3580) into VariableDeclarationFragment(3584) at 0", "Insert MethodInvocation(3583) into VariableDeclarationFragment(3584) at 1", "Insert SimpleName: removableNode(3586) into MethodInvocation(3588) at 0", "Insert SimpleName: isRest(3587) into MethodInvocation(3588) at 1", "Insert ExpressionStatement(3593) into Block(3594) at 0", "Insert MethodInvocation(3597) into IfStatement(3658) at 0", "Insert Block(3603) into IfStatement(3658) at 1", "Insert Block(3657) into IfStatement(3658) at 2", "Insert SimpleName: compiler(3858) into MethodInvocation(3861) at 0", "Insert SimpleName: reportChangeToEnclosingScope(3859) into MethodInvocation(3861) at 1", "Insert SimpleName: assignNode(3860) into MethodInvocation(3861) at 2", "Move VariableDeclarationStatement(3370) into Block(3956) at 0", "Insert SimpleName: Node(788) into SimpleType: Node(789) at 0", "Insert SimpleName: target(790) into VariableDeclarationFragment(794) at 0", "Insert MethodInvocation(793) into VariableDeclarationFragment(794) at 1", "Insert SimpleName: target(796) into MethodInvocation(798) at 0", "Insert SimpleName: isName(797) into MethodInvocation(798) at 1", "Insert VariableDeclarationStatement(806) into Block(854) at 0", "Insert ExpressionStatement(815) into Block(854) at 1", "Insert ExpressionStatement(853) into Block(854) at 3", "Insert SimpleName: Node(860) into SimpleType: Node(861) at 0", "Insert SimpleName: target(862) into VariableDeclarationFragment(866) at 0", "Insert MethodInvocation(865) into VariableDeclarationFragment(866) at 1", "Insert SimpleName: target(868) into MethodInvocation(870) at 0", "Insert SimpleName: isName(869) into MethodInvocation(870) at 1", "Insert ExpressionStatement(875) into Block(895) at 0", "Insert ExpressionStatement(884) into Block(895) at 1", "Insert ExpressionStatement(894) into Block(895) at 2", "Insert SimpleName: Node(901) into SimpleType: Node(902) at 0", "Insert SimpleName: c(903) into VariableDeclarationFragment(907) at 0", "Insert MethodInvocation(906) into VariableDeclarationFragment(907) at 1", "Insert SimpleName: c(913) into MethodInvocation(915) at 0", "Insert SimpleName: getPrevious(914) into MethodInvocation(915) at 1", "Insert MethodInvocation(919) into IfStatement(945) at 0", "Insert Block(944) into IfStatement(945) at 1", "Insert SimpleType: Node(957) into VariableDeclarationStatement(963) at 0", "Insert VariableDeclarationFragment(962) into VariableDeclarationStatement(963) at 1", "Insert SimpleType: Node(965) into VariableDeclarationStatement(971) at 0", "Insert VariableDeclarationFragment(970) into VariableDeclarationStatement(971) at 1", "Insert PrefixExpression: !(976) into IfStatement(1040) at 0", "Insert Block(1007) into IfStatement(1040) at 1", "Insert IfStatement(1039) into IfStatement(1040) at 2", "Insert SimpleType: Node(1052) into VariableDeclarationStatement(1058) at 0", "Insert VariableDeclarationFragment(1057) into VariableDeclarationStatement(1058) at 1", "Insert MethodInvocation(1061) into IfStatement(1087) at 0", "Insert Block(1086) into IfStatement(1087) at 1", "Insert SimpleName: NodeUtil(1527) into MethodInvocation(1532) at 0", "Insert SimpleName: isGetOrSetKey(1528) into MethodInvocation(1532) at 1", "Insert MethodInvocation(1531) into MethodInvocation(1532) at 2", "Insert SimpleName: removable(2886) into MethodInvocation(2889) at 0", "Insert SimpleName: remove(2887) into MethodInvocation(2889) at 1", "Insert SimpleName: compiler(2888) into MethodInvocation(2889) at 2", "Insert SimpleName: toRemove(2993) into InfixExpression: ==(2995) at 0", "Insert NullLiteral(2994) into InfixExpression: ==(2995) at 1", "Update SimpleName: grandParent(2820) to parent", "Insert ConditionalExpression(3009) into VariableDeclarationFragment(3010) at 1", "Insert SimpleName: grandParent(3014) into VariableDeclarationFragment(3023) at 0", "Insert ConditionalExpression(3022) into VariableDeclarationFragment(3023) at 1", "Move MethodInvocation(2891) into InfixExpression: ||(3031) at 0", "Move MethodInvocation(2902) into InfixExpression: ||(3031) at 1", "Insert ExpressionStatement(3041) into Block(3042) at 0", "Insert InfixExpression: ||(3049) into IfStatement(3234) at 0", "Insert Block(3058) into IfStatement(3234) at 1", "Move IfStatement(3083) into IfStatement(3234) at 2", "Insert SimpleName: toRemove(3259) into InfixExpression: ==(3263) at 0", "Insert MethodInvocation(3262) into InfixExpression: ==(3263) at 1", "Insert SimpleName: IllegalStateException(3274) into SimpleType: IllegalStateException(3275) at 0", "Insert SimpleName: toRemove(3326) into MethodInvocation(3328) at 0", "Insert SimpleName: getFirstChild(3327) into MethodInvocation(3328) at 1", "Update SimpleName: getParent(1352) to name", "Move SimpleName: getParent(1352) into MethodInvocation(3334) at 0", "Update SimpleName: isDefaultValue(1354) to isName", "Move SimpleName: isDefaultValue(1354) into MethodInvocation(3334) at 1", "Insert InfixExpression: ==(3341) into InfixExpression: &&(3343) at 0", "Insert SimpleName: removeGlobals(3342) into InfixExpression: &&(3343) at 1", "Update SimpleName: mayHaveSideEffects(1365) to canRemoveParameters", "Move SimpleName: mayHaveSideEffects(1365) into MethodInvocation(3346) at 0", "Update SimpleName: defaultValueRhs(1366) to parent", "Move SimpleName: defaultValueRhs(1366) into MethodInvocation(3346) at 1", "Insert MethodInvocation(3350) into ExpressionStatement(3351) at 0", "Insert MethodInvocation(3358) into ExpressionStatement(3359) at 0", "Insert PrefixExpression: !(3377) into InfixExpression: ||(3385) at 0", "Insert PrefixExpression: !(3384) into InfixExpression: ||(3385) at 1", "Insert SimpleName: IllegalStateException(3396) into SimpleType: IllegalStateException(3397) at 0", "Update SimpleName: getParent(1404) to nameNode", "Move SimpleName: getParent(1404) into MethodInvocation(3529) at 0", "Update SimpleName: isStringKey(1406) to isName", "Move SimpleName: isStringKey(1406) into MethodInvocation(3529) at 1", "Insert ThisExpression(3532) into FieldAccess(3534) at 0", "Insert SimpleName: removableNode(3533) into FieldAccess(3534) at 1", "Insert ThisExpression(3538) into FieldAccess(3540) at 0", "Insert SimpleName: nameNode(3539) into FieldAccess(3540) at 1", "Update SimpleName: toRemove(1424) to nameNode", "Move SimpleName: toRemove(1424) into MethodInvocation(3549) at 0", "Move SimpleName: getParent(1425) into MethodInvocation(3549) at 1", "Insert MethodInvocation(3563) into ExpressionStatement(3564) at 0", "Insert SimpleName: removableNode(3581) into MethodInvocation(3583) at 0", "Insert SimpleName: getParent(3582) into MethodInvocation(3583) at 1", "Insert MethodInvocation(3592) into ExpressionStatement(3593) at 0", "Insert SimpleName: removableNode(3595) into MethodInvocation(3597) at 0", "Insert SimpleName: isDefaultValue(3596) into MethodInvocation(3597) at 1", "Insert ExpressionStatement(3602) into Block(3603) at 0", "Move ExpressionStatement(2702) into Block(3657) at 0", "Insert IfStatement(3650) into Block(3657) at 1", "Move ExpressionStatement(2707) into Block(3657) at 2", "Insert SimpleName: n(791) into MethodInvocation(793) at 0", "Insert SimpleName: getFirstChild(792) into MethodInvocation(793) at 1", "Insert SimpleType: Node(800) into VariableDeclarationStatement(806) at 0", "Insert VariableDeclarationFragment(805) into VariableDeclarationStatement(806) at 1", "Insert Assignment: =(814) into ExpressionStatement(815) at 0", "Insert PrefixExpression: !(820) into IfStatement(848) at 0", "Insert Block(847) into IfStatement(848) at 2", "Insert MethodInvocation(852) into ExpressionStatement(853) at 0", "Insert SimpleName: n(863) into MethodInvocation(865) at 0", "Insert SimpleName: getFirstChild(864) into MethodInvocation(865) at 1", "Insert MethodInvocation(874) into ExpressionStatement(875) at 0", "Insert Assignment: =(883) into ExpressionStatement(884) at 0", "Insert MethodInvocation(893) into ExpressionStatement(894) at 0", "Insert SimpleName: n(904) into MethodInvocation(906) at 0", "Insert SimpleName: getLastChild(905) into MethodInvocation(906) at 1", "Insert SimpleName: c(917) into MethodInvocation(919) at 0", "Insert SimpleName: isName(918) into MethodInvocation(919) at 1", "Insert ExpressionStatement(924) into Block(944) at 0", "Insert ExpressionStatement(933) into Block(944) at 1", "Insert ExpressionStatement(943) into Block(944) at 2", "Insert SimpleName: Node(956) into SimpleType: Node(957) at 0", "Insert SimpleName: target(958) into VariableDeclarationFragment(962) at 0", "Insert MethodInvocation(961) into VariableDeclarationFragment(962) at 1", "Insert SimpleName: Node(964) into SimpleType: Node(965) at 0", "Insert SimpleName: value(966) into VariableDeclarationFragment(970) at 0", "Insert MethodInvocation(969) into VariableDeclarationFragment(970) at 1", "Insert MethodInvocation(975) into PrefixExpression: !(976) at 0", "Insert IfStatement(1006) into Block(1007) at 0", "Insert InfixExpression: &&(1016) into IfStatement(1039) at 0", "Insert Block(1038) into IfStatement(1039) at 1", "Insert SimpleName: Node(1051) into SimpleType: Node(1052) at 0", "Insert SimpleName: target(1053) into VariableDeclarationFragment(1057) at 0", "Insert MethodInvocation(1056) into VariableDeclarationFragment(1057) at 1", "Insert SimpleName: target(1059) into MethodInvocation(1061) at 0", "Insert SimpleName: isName(1060) into MethodInvocation(1061) at 1", "Insert ExpressionStatement(1070) into Block(1086) at 0", "Insert ExpressionStatement(1075) into Block(1086) at 1", "Insert ExpressionStatement(1085) into Block(1086) at 2", "Insert SimpleName: function(1529) into MethodInvocation(1531) at 0", "Insert SimpleName: getParent(1530) into MethodInvocation(1531) at 1", "Insert InfixExpression: !=(3004) into ConditionalExpression(3009) at 0", "Move MethodInvocation(2815) into ConditionalExpression(3009) at 1", "Insert NullLiteral(3008) into ConditionalExpression(3009) at 2", "Insert InfixExpression: !=(3017) into ConditionalExpression(3022) at 0", "Move MethodInvocation(3435) into ConditionalExpression(3022) at 1", "Insert NullLiteral(3021) into ConditionalExpression(3022) at 2", "Insert MethodInvocation(3040) into ExpressionStatement(3041) at 0", "Move MethodInvocation(2857) into InfixExpression: ||(3049) at 0", "Move MethodInvocation(2863) into InfixExpression: ||(3049) at 1", "Insert ExpressionStatement(3057) into Block(3058) at 0", "Move MethodInvocation(2883) into IfStatement(3233) at 0", "Insert SimpleName: parent(3260) into MethodInvocation(3262) at 0", "Insert SimpleName: getLastChild(3261) into MethodInvocation(3262) at 1", "Insert SimpleName: toRemove(3337) into InfixExpression: ==(3341) at 0", "Insert MethodInvocation(3340) into InfixExpression: ==(3341) at 1", "Insert SimpleName: toRemove(3348) into MethodInvocation(3350) at 0", "Insert SimpleName: detach(3349) into MethodInvocation(3350) at 1", "Insert SimpleName: toRemove(3353) into MethodInvocation(3358) at 0", "Insert SimpleName: replaceWith(3354) into MethodInvocation(3358) at 1", "Insert MethodInvocation(3357) into MethodInvocation(3358) at 2", "Insert MethodInvocation(3376) into PrefixExpression: !(3377) at 0", "Insert MethodInvocation(3383) into PrefixExpression: !(3384) at 0", "Insert SimpleName: checkState(3555) into MethodInvocation(3563) at 0", "Insert PrefixExpression: !(3562) into MethodInvocation(3563) at 1", "Insert SimpleName: removeRestNode(3589) into MethodInvocation(3592) at 0", "Insert SimpleName: removableNode(3590) into MethodInvocation(3592) at 1", "Insert SimpleName: removableParent(3591) into MethodInvocation(3592) at 2", "Insert MethodInvocation(3601) into ExpressionStatement(3602) at 0", "Insert MethodInvocation(3611) into IfStatement(3650) at 0", "Insert Block(3634) into IfStatement(3650) at 1", "Insert IfStatement(3649) into IfStatement(3650) at 2", "Update SimpleName: parent(3423) to assignNode", "Update SimpleName: replaceChild(3424) to replaceWith", "Insert SimpleName: Node(799) into SimpleType: Node(800) at 0", "Insert SimpleName: value(801) into VariableDeclarationFragment(805) at 0", "Insert MethodInvocation(804) into VariableDeclarationFragment(805) at 1", "Insert SimpleName: var(807) into Assignment: =(814) at 0", "Insert MethodInvocation(813) into Assignment: =(814) at 1", "Insert MethodInvocation(819) into PrefixExpression: !(820) at 0", "Insert ExpressionStatement(830) into Block(842) at 0", "Insert ExpressionStatement(840) into Block(842) at 1", "Insert ExpressionStatement(846) into Block(847) at 0", "Insert SimpleName: assignsByNode(849) into MethodInvocation(852) at 0", "Insert SimpleName: add(850) into MethodInvocation(852) at 1", "Insert SimpleName: target(851) into MethodInvocation(852) at 2", "Insert SimpleName: assignsByNode(871) into MethodInvocation(874) at 0", "Insert SimpleName: add(872) into MethodInvocation(874) at 1", "Insert SimpleName: target(873) into MethodInvocation(874) at 2", "Insert SimpleName: var(876) into Assignment: =(883) at 0", "Insert MethodInvocation(882) into Assignment: =(883) at 1", "Insert SimpleName: assignsByVar(885) into MethodInvocation(893) at 0", "Insert SimpleName: put(886) into MethodInvocation(893) at 1", "Insert SimpleName: var(887) into MethodInvocation(893) at 2", "Insert ClassInstanceCreation(892) into MethodInvocation(893) at 3", "Insert MethodInvocation(923) into ExpressionStatement(924) at 0", "Insert Assignment: =(932) into ExpressionStatement(933) at 0", "Insert MethodInvocation(942) into ExpressionStatement(943) at 0", "Insert SimpleName: n(959) into MethodInvocation(961) at 0", "Insert SimpleName: getLastChild(960) into MethodInvocation(961) at 1", "Insert SimpleName: n(967) into MethodInvocation(969) at 0", "Insert SimpleName: getFirstChild(968) into MethodInvocation(969) at 1", "Move SimpleName: NodeUtil(821) into MethodInvocation(975) at 0", "Update SimpleName: isNestedObjectPattern(822) to mayHaveSideEffects", "Move SimpleName: isNestedObjectPattern(822) into MethodInvocation(975) at 1", "Update SimpleName: n(823) to value", "Move SimpleName: n(823) into MethodInvocation(975) at 2", "Insert MethodInvocation(979) into IfStatement(1006) at 0", "Move Block(828) into IfStatement(1006) at 1", "Insert MethodInvocation(1010) into InfixExpression: &&(1016) at 0", "Insert MethodInvocation(1015) into InfixExpression: &&(1016) at 1", "Insert VariableDeclarationStatement(1024) into Block(1038) at 0", "Insert ExpressionStatement(1033) into Block(1038) at 1", "Insert ExpressionStatement(1037) into Block(1038) at 2", "Insert SimpleName: n(1054) into MethodInvocation(1056) at 0", "Insert SimpleName: getLastChild(1055) into MethodInvocation(1056) at 1", "Insert Assignment: =(1069) into ExpressionStatement(1070) at 0", "Insert MethodInvocation(1074) into ExpressionStatement(1075) at 0", "Insert MethodInvocation(1084) into ExpressionStatement(1085) at 0", "Insert MethodInvocation(1671) into MethodInvocation(1672) at 2", "Insert SimpleName: toRemove(3002) into InfixExpression: !=(3004) at 0", "Insert NullLiteral(3003) into InfixExpression: !=(3004) at 1", "Insert SimpleName: parent(3015) into InfixExpression: !=(3017) at 0", "Insert NullLiteral(3016) into InfixExpression: !=(3017) at 1", "Update SimpleName: grandParent(2844) to getParent", "Move SimpleName: grandParent(2844) into MethodInvocation(3020) at 1", "Update SimpleName: toRemove(2846) to checkState", "Move SimpleName: toRemove(2846) into MethodInvocation(3040) at 0", "Insert InfixExpression: ||(3039) into MethodInvocation(3040) at 1", "Update SimpleName: isDefaultValue(2856) to isStringKey", "Move SimpleName: toRemove(2860) into MethodInvocation(3048) at 0", "Update SimpleName: isFunction(2862) to isComputedProp", "Insert MethodInvocation(3056) into ExpressionStatement(3057) at 0", "Update SimpleName: patternElt(1359) to parent", "Move SimpleName: patternElt(1359) into MethodInvocation(3340) at 0", "Update SimpleName: getNext(1360) to getLastChild", "Move SimpleName: getNext(1360) into MethodInvocation(3340) at 1", "Update SimpleName: patternElt(1372) to name", "Move SimpleName: patternElt(1372) into MethodInvocation(3357) at 0", "Update SimpleName: getParent(1373) to detach", "Move SimpleName: getParent(1373) into MethodInvocation(3357) at 1", "Insert SimpleName: parent(3374) into MethodInvocation(3376) at 0", "Insert SimpleName: isComputedProp(3375) into MethodInvocation(3376) at 1", "Update SimpleName: fparamScope(1390) to NodeUtil", "Move SimpleName: fparamScope(1390) into MethodInvocation(3383) at 0", "Update SimpleName: getVar(1391) to mayHaveSideEffects", "Move SimpleName: getVar(1391) into MethodInvocation(3383) at 1", "Move MethodInvocation(1394) into MethodInvocation(3383) at 2", "Insert MethodInvocation(3561) into PrefixExpression: !(3562) at 0", "Insert SimpleName: removeDefaultValueNode(3598) into MethodInvocation(3601) at 0", "Insert SimpleName: removableNode(3599) into MethodInvocation(3601) at 1", "Insert SimpleName: removableParent(3600) into MethodInvocation(3601) at 2", "Insert SimpleName: removableNode(3606) into MethodInvocation(3607) at 2", "Insert SimpleName: removableParent(3609) into MethodInvocation(3611) at 0", "Insert SimpleName: isArrayPattern(3610) into MethodInvocation(3611) at 1", "Insert IfStatement(3633) into Block(3634) at 0", "Insert MethodInvocation(3637) into IfStatement(3649) at 0", "Insert Block(3642) into IfStatement(3649) at 1", "Insert Block(3648) into IfStatement(3649) at 2", "Update SimpleName: assign(2703) to NodeUtil", "Insert SimpleName: markFunctionsDeleted(3652) into MethodInvocation(3655) at 1", "Update SimpleName: remove(2704) to removableNode", "Update SimpleName: put(616) to add", "Insert SimpleName: n(802) into MethodInvocation(804) at 0", "Insert SimpleName: getLastChild(803) into MethodInvocation(804) at 1", "Insert SimpleName: scope(808) into MethodInvocation(813) at 0", "Insert SimpleName: getVar(809) into MethodInvocation(813) at 1", "Insert MethodInvocation(812) into MethodInvocation(813) at 2", "Move SimpleName: NodeUtil(802) into MethodInvocation(819) at 0", "Update SimpleName: isNestedArrayPattern(803) to mayHaveSideEffects", "Move SimpleName: isNestedArrayPattern(803) into MethodInvocation(819) at 1", "Update SimpleName: n(804) to value", "Move SimpleName: n(804) into MethodInvocation(819) at 2", "Insert MethodInvocation(829) into ExpressionStatement(830) at 0", "Insert MethodInvocation(839) into ExpressionStatement(840) at 0", "Insert MethodInvocation(845) into ExpressionStatement(846) at 0", "Insert SimpleName: scope(877) into MethodInvocation(882) at 0", "Insert SimpleName: getVar(878) into MethodInvocation(882) at 1", "Insert MethodInvocation(881) into MethodInvocation(882) at 2", "Insert SimpleType: DestructuringAssign(889) into ClassInstanceCreation(892) at 0", "Insert SimpleName: n(890) into ClassInstanceCreation(892) at 1", "Insert SimpleName: target(891) into ClassInstanceCreation(892) at 2", "Insert SimpleName: assignsByNode(920) into MethodInvocation(923) at 0", "Insert SimpleName: add(921) into MethodInvocation(923) at 1", "Insert SimpleName: c(922) into MethodInvocation(923) at 2", "Insert SimpleName: var(925) into Assignment: =(932) at 0", "Insert MethodInvocation(931) into Assignment: =(932) at 1", "Insert SimpleName: assignsByVar(934) into MethodInvocation(942) at 0", "Insert SimpleName: put(935) into MethodInvocation(942) at 1", "Insert SimpleName: var(936) into MethodInvocation(942) at 2", "Insert ClassInstanceCreation(941) into MethodInvocation(942) at 3", "Insert SimpleName: target(977) into MethodInvocation(979) at 0", "Insert SimpleName: isName(978) into MethodInvocation(979) at 1", "Insert ExpressionStatement(988) into Block(1005) at 0", "Insert ExpressionStatement(993) into Block(1005) at 1", "Insert ExpressionStatement(1003) into Block(1005) at 2", "Insert SimpleName: target(1008) into MethodInvocation(1010) at 0", "Insert SimpleName: isDefaultValue(1009) into MethodInvocation(1010) at 1", "Insert MethodInvocation(1013) into MethodInvocation(1015) at 0", "Insert SimpleName: isName(1014) into MethodInvocation(1015) at 1", "Insert SimpleType: Node(1018) into VariableDeclarationStatement(1024) at 0", "Insert VariableDeclarationFragment(1023) into VariableDeclarationStatement(1024) at 1", "Insert Assignment: =(1032) into ExpressionStatement(1033) at 0", "Insert MethodInvocation(1036) into ExpressionStatement(1037) at 0", "Insert SimpleName: var(1062) into Assignment: =(1069) at 0", "Insert MethodInvocation(1068) into Assignment: =(1069) at 1", "Insert SimpleName: assignsByNode(1071) into MethodInvocation(1074) at 0", "Insert SimpleName: add(1072) into MethodInvocation(1074) at 1", "Insert SimpleName: target(1073) into MethodInvocation(1074) at 2", "Insert SimpleName: assignsByVar(1076) into MethodInvocation(1084) at 0", "Insert SimpleName: put(1077) into MethodInvocation(1084) at 1", "Insert SimpleName: var(1078) into MethodInvocation(1084) at 2", "Insert ClassInstanceCreation(1083) into MethodInvocation(1084) at 3", "Insert SimpleName: lastArg(1669) into MethodInvocation(1671) at 0", "Update SimpleName: defaultValueSecondChild(1503) to getLastChild", "Move SimpleName: defaultValueSecondChild(1503) into MethodInvocation(1671) at 1", "Insert InfixExpression: ==(3035) into InfixExpression: ||(3039) at 0", "Insert InfixExpression: ==(3038) into InfixExpression: ||(3039) at 1", "Update SimpleName: NodeUtil(2869) to checkState", "Move SimpleName: NodeUtil(2869) into MethodInvocation(3056) at 0", "Insert InfixExpression: ==(3053) into MethodInvocation(3056) at 1", "Insert StringLiteral: \"unremoved destructuring \"(3054) into MethodInvocation(3056) at 2", "Move SimpleName: toRemove(2871) into MethodInvocation(3056) at 3", "Update SimpleName: patternElt(1392) to parent", "Update SimpleName: getString(1393) to getFirstChild", "Move SimpleName: NodeUtil(1429) into MethodInvocation(3561) at 0", "Update SimpleName: removeChild(1430) to mayHaveSideEffects", "Move SimpleName: removeChild(1430) into MethodInvocation(3561) at 1", "Move MethodInvocation(1433) into MethodInvocation(3561) at 2", "Insert InfixExpression: ==(3616) into IfStatement(3633) at 0", "Insert Block(3621) into IfStatement(3633) at 1", "Insert Block(3632) into IfStatement(3633) at 2", "Insert SimpleName: removableParent(3635) into MethodInvocation(3637) at 0", "Insert SimpleName: isObjectPattern(3636) into MethodInvocation(3637) at 1", "Insert ExpressionStatement(3641) into Block(3642) at 0", "Insert ThrowStatement(3647) into Block(3648) at 0", "Update SimpleName: grandparent(3441) to parent", "Update SimpleName: removeChild(3442) to detach", "Update SimpleName: parent(3453) to assignNode", "Update SimpleName: replaceChild(3454) to replaceWith", "Insert SimpleName: target(810) into MethodInvocation(812) at 0", "Insert SimpleName: getString(811) into MethodInvocation(812) at 1", "Insert SimpleName: continuations(821) into MethodInvocation(829) at 0", "Insert SimpleName: put(822) into MethodInvocation(829) at 1", "Insert SimpleName: var(823) into MethodInvocation(829) at 2", "Insert ClassInstanceCreation(828) into MethodInvocation(829) at 3", "Insert SimpleName: assignsByVar(831) into MethodInvocation(839) at 0", "Insert SimpleName: put(832) into MethodInvocation(839) at 1", "Insert SimpleName: var(833) into MethodInvocation(839) at 2", "Insert ClassInstanceCreation(838) into MethodInvocation(839) at 3", "Insert SimpleName: markReferencedVar(843) into MethodInvocation(845) at 0", "Insert SimpleName: var(844) into MethodInvocation(845) at 1", "Insert SimpleName: target(879) into MethodInvocation(881) at 0", "Insert SimpleName: getString(880) into MethodInvocation(881) at 1", "Insert SimpleName: DestructuringAssign(888) into SimpleType: DestructuringAssign(889) at 0", "Insert SimpleName: scope(926) into MethodInvocation(931) at 0", "Insert SimpleName: getVar(927) into MethodInvocation(931) at 1", "Insert MethodInvocation(930) into MethodInvocation(931) at 2", "Insert SimpleType: DestructuringAssign(938) into ClassInstanceCreation(941) at 0", "Insert SimpleName: c(939) into ClassInstanceCreation(941) at 1", "Insert SimpleName: c(940) into ClassInstanceCreation(941) at 2", "Insert Assignment: =(987) into ExpressionStatement(988) at 0", "Insert MethodInvocation(992) into ExpressionStatement(993) at 0", "Insert MethodInvocation(1002) into ExpressionStatement(1003) at 0", "Insert SimpleName: target(1011) into MethodInvocation(1013) at 0", "Insert SimpleName: getFirstChild(1012) into MethodInvocation(1013) at 1", "Insert SimpleName: Node(1017) into SimpleType: Node(1018) at 0", "Insert SimpleName: defaultTarget(1019) into VariableDeclarationFragment(1023) at 0", "Insert MethodInvocation(1022) into VariableDeclarationFragment(1023) at 1", "Insert SimpleName: var(1025) into Assignment: =(1032) at 0", "Insert MethodInvocation(1031) into Assignment: =(1032) at 1", "Insert SimpleName: markReferencedVar(1034) into MethodInvocation(1036) at 0", "Insert SimpleName: var(1035) into MethodInvocation(1036) at 1", "Insert SimpleName: scope(1063) into MethodInvocation(1068) at 0", "Insert SimpleName: getVar(1064) into MethodInvocation(1068) at 1", "Insert MethodInvocation(1067) into MethodInvocation(1068) at 2", "Insert SimpleType: DestructuringAssign(1080) into ClassInstanceCreation(1083) at 0", "Insert SimpleName: n(1081) into ClassInstanceCreation(1083) at 1", "Insert SimpleName: target(1082) into ClassInstanceCreation(1083) at 2", "Insert SimpleType: Removable(2778) into SingleVariableDeclaration(2780) at 0", "Insert SimpleName: removable(2779) into SingleVariableDeclaration(2780) at 1", "Insert IfStatement(2795) into Block(2833) at 0", "Insert VariableDeclarationStatement(2804) into Block(2833) at 1", "Insert SimpleName: parent(3033) into InfixExpression: ==(3035) at 0", "Insert NullLiteral(3034) into InfixExpression: ==(3035) at 1", "Insert SimpleName: grandParent(3036) into InfixExpression: ==(3038) at 0", "Insert NullLiteral(3037) into InfixExpression: ==(3038) at 1", "Insert SimpleName: parent(3051) into InfixExpression: ==(3053) at 0", "Insert NullLiteral(3052) into InfixExpression: ==(3053) at 1", "Update SimpleName: toRemove(1431) to parent", "Update SimpleName: getParent(1432) to getLastChild", "Insert SimpleName: removableNode(3612) into InfixExpression: ==(3616) at 0", "Insert MethodInvocation(3615) into InfixExpression: ==(3616) at 1", "Insert ExpressionStatement(3620) into Block(3621) at 0", "Insert ExpressionStatement(3631) into Block(3632) at 0", "Insert MethodInvocation(3640) into ExpressionStatement(3641) at 0", "Insert ClassInstanceCreation(3646) into ThrowStatement(3647) at 0", "Insert SimpleType: Continuation(825) into ClassInstanceCreation(828) at 0", "Insert SimpleName: n(826) into ClassInstanceCreation(828) at 1", "Insert SimpleName: scope(827) into ClassInstanceCreation(828) at 2", "Insert SimpleType: DestructuringAssign(835) into ClassInstanceCreation(838) at 0", "Insert SimpleName: n(836) into ClassInstanceCreation(838) at 1", "Insert SimpleName: target(837) into ClassInstanceCreation(838) at 2", "Insert SimpleName: c(928) into MethodInvocation(930) at 0", "Insert SimpleName: getString(929) into MethodInvocation(930) at 1", "Insert SimpleName: DestructuringAssign(937) into SimpleType: DestructuringAssign(938) at 0", "Insert SimpleName: var(980) into Assignment: =(987) at 0", "Insert MethodInvocation(986) into Assignment: =(987) at 1", "Insert SimpleName: assignsByNode(989) into MethodInvocation(992) at 0", "Insert SimpleName: add(990) into MethodInvocation(992) at 1", "Insert SimpleName: target(991) into MethodInvocation(992) at 2", "Insert SimpleName: assignsByVar(994) into MethodInvocation(1002) at 0", "Insert SimpleName: put(995) into MethodInvocation(1002) at 1", "Insert SimpleName: var(996) into MethodInvocation(1002) at 2", "Insert ClassInstanceCreation(1001) into MethodInvocation(1002) at 3", "Insert SimpleName: target(1020) into MethodInvocation(1022) at 0", "Insert SimpleName: getFirstChild(1021) into MethodInvocation(1022) at 1", "Insert SimpleName: scope(1026) into MethodInvocation(1031) at 0", "Insert SimpleName: getVar(1027) into MethodInvocation(1031) at 1", "Insert MethodInvocation(1030) into MethodInvocation(1031) at 2", "Insert SimpleName: target(1065) into MethodInvocation(1067) at 0", "Insert SimpleName: getString(1066) into MethodInvocation(1067) at 1", "Insert SimpleName: DestructuringAssign(1079) into SimpleType: DestructuringAssign(1080) at 0", "Insert SimpleName: Removable(2777) into SimpleType: Removable(2778) at 0", "Insert InstanceofExpression(2788) into IfStatement(2795) at 0", "Insert Block(2794) into IfStatement(2795) at 1", "Insert SimpleType: Assign(2797) into VariableDeclarationStatement(2804) at 0", "Insert VariableDeclarationFragment(2803) into VariableDeclarationStatement(2804) at 1", "Insert SimpleName: removableParent(3613) into MethodInvocation(3615) at 0", "Insert SimpleName: getLastChild(3614) into MethodInvocation(3615) at 1", "Insert MethodInvocation(3619) into ExpressionStatement(3620) at 0", "Insert MethodInvocation(3630) into ExpressionStatement(3631) at 0", "Insert SimpleName: removableNode(3638) into MethodInvocation(3640) at 0", "Insert SimpleName: detach(3639) into MethodInvocation(3640) at 1", "Insert SimpleType: IllegalStateException(3644) into ClassInstanceCreation(3646) at 0", "Insert StringLiteral: \"unexpected\"(3645) into ClassInstanceCreation(3646) at 1", "Insert SimpleName: Continuation(824) into SimpleType: Continuation(825) at 0", "Insert SimpleName: DestructuringAssign(834) into SimpleType: DestructuringAssign(835) at 0", "Insert SimpleName: scope(981) into MethodInvocation(986) at 0", "Insert SimpleName: getVar(982) into MethodInvocation(986) at 1", "Insert MethodInvocation(985) into MethodInvocation(986) at 2", "Insert SimpleType: DestructuringAssign(998) into ClassInstanceCreation(1001) at 0", "Insert SimpleName: n(999) into ClassInstanceCreation(1001) at 1", "Insert SimpleName: target(1000) into ClassInstanceCreation(1001) at 2", "Insert SimpleName: defaultTarget(1028) into MethodInvocation(1030) at 0", "Insert SimpleName: getString(1029) into MethodInvocation(1030) at 1", "Update SimpleName: containsKey(962) to contains", "Insert SimpleName: removable(2785) into InstanceofExpression(2788) at 0", "Insert SimpleType: DestructuringAssign(2787) into InstanceofExpression(2788) at 1", "Insert ExpressionStatement(2792) into Block(2794) at 0", "Insert ContinueStatement(2793) into Block(2794) at 1", "Insert SimpleName: Assign(2796) into SimpleType: Assign(2797) at 0", "Insert SimpleName: assign(2798) into VariableDeclarationFragment(2803) at 0", "Insert CastExpression(2802) into VariableDeclarationFragment(2803) at 1", "Insert SimpleName: removableNode(3617) into MethodInvocation(3619) at 0", "Insert SimpleName: detach(3618) into MethodInvocation(3619) at 1", "Insert SimpleName: removableNode(3622) into MethodInvocation(3630) at 0", "Insert SimpleName: replaceWith(3623) into MethodInvocation(3630) at 1", "Insert MethodInvocation(3629) into MethodInvocation(3630) at 2", "Insert SimpleName: IllegalStateException(3643) into SimpleType: IllegalStateException(3644) at 0", "Insert SimpleName: target(983) into MethodInvocation(985) at 0", "Insert SimpleName: getString(984) into MethodInvocation(985) at 1", "Insert SimpleName: DestructuringAssign(997) into SimpleType: DestructuringAssign(998) at 0", "Insert SimpleName: DestructuringAssign(2786) into SimpleType: DestructuringAssign(2787) at 0", "Insert Assignment: =(2791) into ExpressionStatement(2792) at 0", "Move SimpleType: Assign(2610) into CastExpression(2802) at 0", "Insert SimpleName: removable(2801) into CastExpression(2802) at 1", "Insert MethodInvocation(3626) into MethodInvocation(3629) at 0", "Insert SimpleName: srcref(3627) into MethodInvocation(3629) at 1", "Insert SimpleName: removableNode(3628) into MethodInvocation(3629) at 2", "Insert SimpleName: assignedToUnknownValue(2789) into Assignment: =(2791) at 0", "Insert BooleanLiteral: true(2790) into Assignment: =(2791) at 1", "Insert SimpleName: IR(3624) into MethodInvocation(3626) at 0", "Insert SimpleName: empty(3625) into MethodInvocation(3626) at 1", "Delete QualifiedName: com.google.common.collect.Lists(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: java.util.HashMap(26)", "Delete ImportDeclaration(27)", "Delete QualifiedName: java.util.Map(32)", "Delete ImportDeclaration(33)", "Delete SimpleName: Assign(203)", "Delete SimpleType: Assign(204)", "Delete SimpleName: maybeAssign(618)", "Delete MethodInvocation(805)", "Delete BreakStatement(806)", "Delete Block(807)", "Delete IfStatement(812)", "Delete MethodInvocation(824)", "Delete SimpleName: removeUnusedDestructuringNames(1289)", "Delete SimpleName: argList(1290)", "Delete SimpleName: fparamScope(1291)", "Delete MethodInvocation(1292)", "Delete ExpressionStatement(1293)", "Delete TextElement: Iterate through the parameters of the function and if they are destructuring parameters, remove(1310)", "Delete TextElement: any unreferenced variables from inside the destructuring pattern.(1311)", "Delete TagElement(1312)", "Delete Javadoc(1313)", "Delete SingleVariableDeclaration(1320)", "Delete SimpleName: Scope(1321)", "Delete SimpleType: Scope(1322)", "Delete SimpleName: fparamScope(1323)", "Delete SingleVariableDeclaration(1324)", "Delete SimpleName: List(1325)", "Delete SimpleType: List(1326)", "Delete ParameterizedType: List<Node>(1329)", "Delete SimpleName: destructuringDeclarations(1330)", "Delete MethodInvocation(1334)", "Delete VariableDeclarationFragment(1335)", "Delete VariableDeclarationStatement(1336)", "Delete SingleVariableDeclaration(1340)", "Delete MethodInvocation(1344)", "Delete VariableDeclarationStatement(1350)", "Delete MethodInvocation(1353)", "Delete MethodInvocation(1355)", "Delete SimpleName: defaultValueRhs(1358)", "Delete MethodInvocation(1361)", "Delete VariableDeclarationFragment(1362)", "Delete VariableDeclarationStatement(1363)", "Delete SimpleName: NodeUtil(1364)", "Delete MethodInvocation(1367)", "Delete IfStatement(1370)", "Delete Block(1377)", "Delete IfStatement(1378)", "Delete MethodInvocation(1381)", "Delete SimpleName: isParamList(1382)", "Delete MethodInvocation(1383)", "Delete IfStatement(1386)", "Delete SimpleName: Var(1387)", "Delete SimpleType: Var(1388)", "Delete SimpleName: var(1389)", "Delete MethodInvocation(1395)", "Delete VariableDeclarationFragment(1396)", "Delete VariableDeclarationStatement(1397)", "Delete MethodInvocation(1401)", "Delete PrefixExpression: !(1402)", "Delete MethodInvocation(1405)", "Delete MethodInvocation(1407)", "Delete Block(1414)", "Delete IfStatement(1415)", "Delete SimpleName: compiler(1422)", "Delete SimpleName: reportChangeToEnclosingScope(1423)", "Delete MethodInvocation(1426)", "Delete MethodInvocation(1427)", "Delete ExpressionStatement(1428)", "Delete Block(1437)", "Delete IfStatement(1438)", "Delete Block(1439)", "Delete EnhancedForStatement(1440)", "Delete Block(1441)", "Delete MethodDeclaration(1442)", "Delete SimpleName: defaultValueSecondChild(1495)", "Delete SimpleName: lValue(1496)", "Delete SimpleName: getNext(1497)", "Delete MethodInvocation(1498)", "Delete VariableDeclarationFragment(1499)", "Delete VariableDeclarationStatement(1500)", "Delete SimpleName: assign(2611)", "Delete SimpleName: parent(2812)", "Delete VariableDeclarationFragment(2816)", "Delete VariableDeclarationStatement(2817)", "Delete SimpleName: toRemove(2821)", "Delete SimpleName: getGrandparent(2822)", "Delete MethodInvocation(2823)", "Delete SimpleName: NodeUtil(2858)", "Delete SimpleName: getEnclosingScopeRoot(2859)", "Delete MethodInvocation(2861)", "Delete SimpleName: parent(2884)", "Delete SimpleName: isFunction(2885)", "Delete MethodInvocation(2886)", "Delete InfixExpression: &&(2887)", "Delete ParenthesizedExpression(2888)", "Delete SimpleName: NodeUtil(2892)", "Delete SimpleName: getEnclosingScopeRoot(2893)", "Delete SimpleName: toRemove(2894)", "Delete MethodInvocation(2895)", "Delete SimpleName: isFunction(2896)", "Delete MethodInvocation(2897)", "Delete InfixExpression: &&(2898)", "Delete ParenthesizedExpression(2899)", "Delete SimpleName: NodeUtil(2903)", "Delete SimpleName: getEnclosingScopeRoot(2904)", "Delete SimpleName: toRemove(2905)", "Delete MethodInvocation(2906)", "Delete SimpleName: isFunction(2907)", "Delete MethodInvocation(2908)", "Delete InfixExpression: &&(2909)", "Delete ParenthesizedExpression(2910)", "Delete InfixExpression: ||(2911)", "Delete SimpleName: checkState(2826)", "Delete SimpleName: NodeUtil(2827)", "Delete SimpleName: isNameDeclaration(2828)", "Delete SimpleName: toRemove(2829)", "Delete MethodInvocation(2830)", "Delete SimpleName: toRemove(2831)", "Delete SimpleName: isFunction(2832)", "Delete MethodInvocation(2833)", "Delete SimpleName: toRemove(2834)", "Delete SimpleName: isParamList(2835)", "Delete MethodInvocation(2836)", "Delete SimpleName: parent(2837)", "Delete SimpleName: isFunction(2838)", "Delete MethodInvocation(2839)", "Delete InfixExpression: &&(2840)", "Delete ParenthesizedExpression(2841)", "Delete SimpleName: isDestructuringDeclaration(2843)", "Delete MethodInvocation(2845)", "Delete SimpleName: isArrayPattern(2847)", "Delete MethodInvocation(2848)", "Delete SimpleName: parent(2849)", "Delete SimpleName: isObjectPattern(2850)", "Delete MethodInvocation(2851)", "Delete SimpleName: toRemove(2852)", "Delete SimpleName: isClass(2853)", "Delete MethodInvocation(2854)", "Delete InfixExpression: &&(2864)", "Delete ParenthesizedExpression(2865)", "Delete SimpleName: toRemove(2866)", "Delete SimpleName: isRest(2867)", "Delete MethodInvocation(2868)", "Delete SimpleName: getEnclosingScopeRoot(2870)", "Delete MethodInvocation(2872)", "Delete SimpleName: isFunction(2873)", "Delete MethodInvocation(2874)", "Delete InfixExpression: &&(2875)", "Delete ParenthesizedExpression(2876)", "Delete InfixExpression: ||(2877)", "Delete StringLiteral: \"We should only declare Vars and functions and function args and classes\"(2878)", "Delete MethodInvocation(2879)", "Delete ExpressionStatement(2880)", "Delete SimpleName: toRemove(1347)", "Delete SimpleName: patternElt(1348)", "Delete ContinueStatement(1368)", "Delete SimpleName: toRemove(1371)", "Delete MethodInvocation(1374)", "Delete Assignment: =(1375)", "Delete SimpleName: toRemove(1408)", "Delete SimpleName: toRemove(1409)", "Delete SimpleName: getParent(1410)", "Delete MethodInvocation(1411)", "Delete SimpleName: toRemove(1434)", "Delete MethodInvocation(1435)", "Delete QualifiedName: assign.assignNode(2700)", "Delete SingleVariableDeclaration(2693)", "Delete Block(2708)", "Delete EnhancedForStatement(2709)", "Delete Block(2710)", "Delete SimpleName: assignNode(3425)", "Delete SimpleName: grandparent(3432)", "Delete VariableDeclarationFragment(3436)", "Delete VariableDeclarationStatement(3437)", "Delete SimpleName: parent(3443)", "Delete SimpleName: assignNode(3455)"]}}], "commit_stats": [{"total_files": 2, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}