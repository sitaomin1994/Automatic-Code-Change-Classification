{"application": "apache-calcite", "csha": "a611d645ad754844a39f3d98f5f814f13dbd9404", "files": [{"SynchronizedJaninoCompiler_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.eigenbase.javac"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL TextElement: 'org.eigenbase.javac.SynchronizedJaninoCompiler';</code>", "DEL Modifier: public", "DEL TextElement: <code>alter system set \"javaCompilerClassName\" =", "DEL TextElement: more multi-threading bugs.  We hope never to have to use it, but", "DEL SimpleType: JaninoCompiler", "DEL MethodDeclaration", "DEL SimpleName: JaninoCompiler", "DEL SuperMethodInvocation", "DEL TextElement: if necessary:", "DEL Modifier: public", "DEL PrimitiveType: void", "DEL TypeLiteral", "DEL SynchronizedStatement", "DEL Block", "DEL TagElement", "DEL Block", "DEL SimpleType: SynchronizedJaninoCompiler", "DEL SimpleName: SynchronizedJaninoCompiler", "DEL Javadoc", "DEL TypeDeclaration: class", "DEL SimpleName: SynchronizedJaninoCompiler", "DEL SimpleName: compile", "DEL TextElement: SynchronizedJaninoCompiler exists as a fallback in case Janino has", "DEL SimpleName: compile", "DEL ExpressionStatement"]}]}}, {"SynchronizedJaninoCompiler_diff": {"operations": ["Delete QualifiedName: org.eigenbase.javac(0)", "Delete PackageDeclaration(1)", "Delete TextElement: SynchronizedJaninoCompiler exists as a fallback in case Janino has(2)", "Delete TextElement: more multi-threading bugs.  We hope never to have to use it, but(3)", "Delete TextElement: if necessary:(4)", "Delete TextElement: <code>alter system set \"javaCompilerClassName\" =(5)", "Delete TextElement: 'org.eigenbase.javac.SynchronizedJaninoCompiler';</code>(6)", "Delete TagElement(7)", "Delete Javadoc(8)", "Delete Modifier: public(9)", "Delete SimpleName: SynchronizedJaninoCompiler(10)", "Delete SimpleName: JaninoCompiler(11)", "Delete SimpleType: JaninoCompiler(12)", "Delete Modifier: public(13)", "Delete PrimitiveType: void(14)", "Delete SimpleName: compile(15)", "Delete SimpleName: SynchronizedJaninoCompiler(16)", "Delete SimpleType: SynchronizedJaninoCompiler(17)", "Delete TypeLiteral(18)", "Delete SimpleName: compile(19)", "Delete SuperMethodInvocation(20)", "Delete ExpressionStatement(21)", "Delete Block(22)", "Delete SynchronizedStatement(23)", "Delete Block(24)", "Delete MethodDeclaration(25)", "Delete TypeDeclaration: class(26)"]}}, {"package-info_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.jdbc4", "DEL PackageDeclaration", "DEL TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver", "DEL TextElement: implementation against JDK 1.5. For more information, see", "DEL TagElement", "DEL TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.", "DEL Javadoc"]}]}}, {"package-info_diff": {"operations": ["Delete TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver(0)", "Delete TextElement: implementation against JDK 1.5. For more information, see(1)", "Delete TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete QualifiedName: org.eigenbase.jdbc4(5)", "Delete PackageDeclaration(6)"]}}, {"package-info_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.jdbc4", "DEL PackageDeclaration", "DEL TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver", "DEL TextElement: implementation against JDK 1.5. For more information, see", "DEL TagElement", "DEL TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.", "DEL Javadoc"]}]}}, {"package-info_diff": {"operations": ["Delete TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver(0)", "Delete TextElement: implementation against JDK 1.5. For more information, see(1)", "Delete TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete QualifiedName: org.eigenbase.jdbc4(5)", "Delete PackageDeclaration(6)"]}}, {"package-info_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.jdbc4", "DEL PackageDeclaration", "DEL TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver", "DEL TextElement: implementation against JDK 1.5. For more information, see", "DEL TagElement", "DEL TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.", "DEL Javadoc"]}]}}, {"package-info_diff": {"operations": ["Delete TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver(0)", "Delete TextElement: implementation against JDK 1.5. For more information, see(1)", "Delete TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete QualifiedName: org.eigenbase.jdbc4(5)", "Delete PackageDeclaration(6)"]}}, {"SargBinding_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.rex", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL ReturnStatement", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleName: inputRef", "DEL SimpleName: expr", "DEL SimpleName: getExpr", "DEL TagElement: @link", "DEL Modifier: final", "DEL Block", "DEL ThisExpression", "DEL Modifier: public", "DEL SimpleType: RexInputRef", "DEL TypeDeclaration: class", "DEL Block", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: expr", "DEL SimpleType: RexInputRef", "DEL ThisExpression", "DEL SimpleName: SargExpr", "DEL SimpleType: RexInputRef", "DEL Javadoc", "DEL SimpleName: SargBinding", "DEL SimpleName: SargExpr", "DEL SimpleName: RexInputRef", "DEL TextElement: .", "DEL SimpleName: inputRef", "DEL FieldAccess", "DEL TagElement", "DEL Modifier: private", "DEL SimpleName: SargExpr", "DEL MethodDeclaration", "DEL SimpleType: SargExpr", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL SimpleName: RexInputRef", "DEL SimpleName: inputRef", "DEL ExpressionStatement", "DEL SimpleName: SargExpr", "DEL SimpleType: SargExpr", "DEL SimpleName: RexInputRef", "DEL SimpleName: RexInputRef", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Modifier: final", "DEL SimpleType: SargExpr", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleName: expr", "DEL SimpleName: inputRef", "DEL SimpleName: SargBinding", "DEL MethodDeclaration", "DEL SimpleName: expr", "DEL TextElement: SargBinding represents the binding of a ", "DEL TagElement: @link", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SimpleName: expr", "DEL TextElement:  to a particular", "DEL SimpleName: inputRef", "DEL FieldDeclaration", "DEL Modifier: public", "DEL SimpleName: getInputRef"]}]}}, {"SargBinding_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.eigenbase.rex(2)", "Delete ImportDeclaration(3)", "Delete TextElement: SargBinding represents the binding of a (4)", "Delete SimpleName: SargExpr(5)", "Delete TagElement: @link(6)", "Delete TextElement:  to a particular(7)", "Delete SimpleName: RexInputRef(8)", "Delete TagElement: @link(9)", "Delete TextElement: .(10)", "Delete TagElement(11)", "Delete Javadoc(12)", "Delete Modifier: public(13)", "Delete SimpleName: SargBinding(14)", "Delete Modifier: private(15)", "Delete Modifier: final(16)", "Delete SimpleName: SargExpr(17)", "Delete SimpleType: SargExpr(18)", "Delete SimpleName: expr(19)", "Delete VariableDeclarationFragment(20)", "Delete FieldDeclaration(21)", "Delete Modifier: private(22)", "Delete Modifier: final(23)", "Delete SimpleName: RexInputRef(24)", "Delete SimpleType: RexInputRef(25)", "Delete SimpleName: inputRef(26)", "Delete VariableDeclarationFragment(27)", "Delete FieldDeclaration(28)", "Delete Modifier: public(29)", "Delete SimpleName: SargBinding(30)", "Delete SimpleName: SargExpr(31)", "Delete SimpleType: SargExpr(32)", "Delete SimpleName: expr(33)", "Delete SingleVariableDeclaration(34)", "Delete SimpleName: RexInputRef(35)", "Delete SimpleType: RexInputRef(36)", "Delete SimpleName: inputRef(37)", "Delete SingleVariableDeclaration(38)", "Delete ThisExpression(39)", "Delete SimpleName: expr(40)", "Delete FieldAccess(41)", "Delete SimpleName: expr(42)", "Delete Assignment: =(43)", "Delete ExpressionStatement(44)", "Delete ThisExpression(45)", "Delete SimpleName: inputRef(46)", "Delete FieldAccess(47)", "Delete SimpleName: inputRef(48)", "Delete Assignment: =(49)", "Delete ExpressionStatement(50)", "Delete Block(51)", "Delete MethodDeclaration(52)", "Delete Modifier: public(53)", "Delete SimpleName: SargExpr(54)", "Delete SimpleType: SargExpr(55)", "Delete SimpleName: getExpr(56)", "Delete SimpleName: expr(57)", "Delete ReturnStatement(58)", "Delete Block(59)", "Delete MethodDeclaration(60)", "Delete Modifier: public(61)", "Delete SimpleName: RexInputRef(62)", "Delete SimpleType: RexInputRef(63)", "Delete SimpleName: getInputRef(64)", "Delete SimpleName: inputRef(65)", "Delete ReturnStatement(66)", "Delete Block(67)", "Delete MethodDeclaration(68)", "Delete TypeDeclaration: class(69)"]}}, {"SargBoundType_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL EnumDeclaration", "operations": ["DEL SimpleName: SargBoundType", "DEL Modifier: public", "DEL EnumDeclaration", "DEL TagElement", "DEL Javadoc", "DEL EnumConstantDeclaration", "DEL SimpleName: UPPER", "DEL EnumConstantDeclaration", "DEL SimpleName: LOWER", "DEL TextElement: SargBoundType defines the possible endpoint boundaries (upper or lower)."]}]}}, {"SargBoundType_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete TextElement: SargBoundType defines the possible endpoint boundaries (upper or lower).(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete Modifier: public(5)", "Delete SimpleName: SargBoundType(6)", "Delete SimpleName: LOWER(7)", "Delete EnumConstantDeclaration(8)", "Delete SimpleName: UPPER(9)", "Delete EnumConstantDeclaration(10)", "Delete EnumDeclaration(11)"]}}, {"SargEndpoint_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.eigenbase.sarg"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.math", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.reltype"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.rex", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.sql.type"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.util", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: net.hydromatic.avatica.ByteString", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: isNullLiteral", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleType: SargEndpoint", "DEL SimpleName: c", "DEL MethodDeclaration", "DEL TextElement:   bound type (upper/lower)", "DEL InfixExpression: ==", "DEL FieldDeclaration", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleType: RexLiteral", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: roundingCompensation", "DEL SimpleType: SargEndpoint", "DEL CastExpression", "DEL SimpleType: RexNode", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: coordinate", "DEL SimpleName: String", "DEL SimpleName: ByteString", "DEL QualifiedName: SargStrictness.OPEN", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: other", "DEL NumberLiteral: 0", "DEL SimpleName: RexDynamicParam", "DEL TextElement:  either -1 or +1", "DEL Javadoc", "DEL SimpleType: RexLiteral", "DEL SimpleName: getIndex", "DEL InfixExpression: ==", "DEL SimpleName: RexDynamicParam", "DEL SimpleName: sb", "DEL ReturnStatement", "DEL SimpleName: RexInputRef", "DEL TextElement: outside the package.", "DEL InfixExpression: >", "DEL Javadoc", "DEL SimpleName: BigDecimal", "DEL TextElement: , or null to", "DEL SimpleType: StringBuilder", "DEL TextElement:  boundary strictness", "DEL ReturnStatement", "DEL QualifiedName: SargStrictness.OPEN", "DEL SimpleName: ByteString", "DEL SimpleName: getCoordinate", "DEL SimpleName: roundingCompensation", "DEL SimpleName: sb", "DEL TextElement: , ", "DEL ReturnStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: SargFactory", "DEL CastExpression", "DEL ExpressionStatement", "DEL SimpleName: other", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: coord1", "DEL SimpleName: RexLiteral", "DEL QualifiedName: SargStrictness.CLOSED", "DEL InfixExpression: !=", "DEL SimpleName: factory", "DEL SimpleName: coordinate", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: value", "DEL IfStatement", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: SqlTypeUtil", "DEL SimpleName: truncated", "DEL Block", "DEL SimpleName: convertToTargetType", "DEL PrimitiveType: boolean", "DEL TagElement: @param", "DEL SimpleType: RexInputRef", "DEL SimpleType: BigDecimal", "DEL CastExpression", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: getStrictnessSign", "DEL SimpleType: RexLiteral", "DEL SimpleName: RexNode", "DEL IfStatement", "DEL InstanceofExpression", "DEL SimpleName: fixed", "DEL MemberRef", "DEL SimpleName: coordinate", "DEL TextElement: endpoint implies an open bound (negative infinity implies a lower bound,", "DEL SimpleName: roundingCompensation", "DEL StringLiteral: \">=\"", "DEL ParenthesizedExpression", "DEL SimpleName: getInfinitude", "DEL SimpleName: getBoundType", "DEL SimpleType: RexInputRef", "DEL Block", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SimpleName: substring", "DEL SimpleName: s", "DEL StringLiteral: \">\"", "DEL ReturnStatement", "DEL SimpleName: value", "DEL InfixExpression: !=", "DEL TextElement: Coordinate for this endpoint, constrained to be either ", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL QualifiedName: SargStrictness.CLOSED", "DEL Assignment: =", "DEL SimpleName: strictness", "DEL VariableDeclarationFragment", "DEL SimpleName: RexDynamicParam", "DEL SimpleType: RexLiteral", "DEL Block", "DEL SimpleName: compareTo", "DEL Assignment: =", "DEL SimpleName: coord2", "DEL Javadoc", "DEL Block", "DEL TextElement: boundType).", "DEL MethodInvocation", "DEL QualifiedName: SargBoundType.UPPER", "DEL ParenthesizedExpression", "DEL Modifier: public", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleName: other", "DEL SimpleName: rpad", "DEL SimpleName: p2", "DEL IfStatement", "DEL TextElement:  is provided for manipulation from", "DEL SimpleName: signum", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: strictness", "DEL SimpleName: RexLiteral", "DEL ReturnStatement", "DEL SimpleName: convertString", "DEL SimpleName: getValue", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleType: NlsString", "DEL SimpleName: Util", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: boundType", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL SimpleName: RexDynamicParam", "DEL InstanceofExpression", "DEL SimpleName: roundingCompensation", "DEL IfStatement", "DEL SimpleName: s", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: other", "DEL TextElement:  true if touching; false if discontinuous", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: trimmed", "DEL SimpleName: getCoordinate", "DEL Block", "DEL Modifier: private", "DEL InfixExpression: ||", "DEL SimpleName: BigDecimal", "DEL SingleVariableDeclaration", "DEL SimpleType: String", "DEL SimpleName: getStrictness", "DEL SimpleName: isFinite", "DEL Block", "DEL SimpleName: compareCoordinates", "DEL Assignment: =", "DEL SimpleName: RexInputRef", "DEL MethodInvocation", "DEL SimpleName: isFinite", "DEL InfixExpression: ||", "DEL SimpleName: getValue", "DEL TagElement", "DEL PrefixExpression: !", "DEL Modifier: public", "DEL ReturnStatement", "DEL InfixExpression: ||", "DEL VariableDeclarationFragment", "DEL SimpleName: isClosed", "DEL StringLiteral: \"-infinity\"", "DEL SimpleName: isFinite", "DEL SimpleName: getInfinitude", "DEL SimpleName: boundType", "DEL SimpleName: value", "DEL IfStatement", "DEL SimpleName: Util", "DEL TagElement: @link", "DEL Modifier: private", "DEL TagElement: @return", "DEL Block", "DEL SimpleName: SargMutableEndpoint", "DEL SimpleName: SargFactory", "DEL SimpleName: other", "DEL InfixExpression: ||", "DEL InfixExpression: ==", "DEL SimpleName: RexInputRef", "DEL SimpleName: append", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: lit2", "DEL SimpleName: SargStrictness", "DEL SimpleType: String", "DEL Modifier: final", "DEL CastExpression", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL InstanceofExpression", "DEL SimpleName: length", "DEL Block", "DEL TextElement:  SargStrictness of this bound", "DEL MethodDeclaration", "DEL SimpleName: convertString", "DEL InfixExpression: ==", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: getIndex", "DEL SimpleName: roundedValue", "DEL InfixExpression: >", "DEL SimpleType: RexDynamicParam", "DEL MethodInvocation", "DEL ReturnStatement", "DEL QualifiedName: SqlTypeName.CHAR", "DEL SimpleName: append", "DEL SingleVariableDeclaration", "DEL SimpleType: SargBoundType", "DEL VariableDeclarationFragment", "DEL ParenthesizedExpression", "DEL TextElement:  complement of SargStrictness of this bound", "DEL SimpleName: SargEndpoint", "DEL MethodDeclaration", "DEL Assignment: =", "DEL TextElement: represent infinity (positive or negative infinity is implied by", "DEL SimpleType: RexNode", "DEL SimpleName: strictness", "DEL NumberLiteral: 0", "DEL SimpleName: sb", "DEL TextElement: Tests whether this endpoint \"touches\" another one (not necessarily", "DEL SimpleName: append", "DEL Assignment: =", "DEL Block", "DEL SimpleName: lit1", "DEL SimpleName: RexLiteral", "DEL SimpleName: factory", "DEL SimpleType: RexLiteral", "DEL MethodInvocation", "DEL ReturnStatement", "DEL Javadoc", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: trimmed", "DEL ExpressionStatement", "DEL SimpleName: RexNode", "DEL SingleVariableDeclaration", "DEL SimpleName: other", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL ParenthesizedExpression", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: literal", "DEL Modifier: static", "DEL Block", "DEL Block", "DEL Block", "DEL SimpleName: makeExactLiteral", "DEL SimpleName: RelDataType", "DEL VariableDeclarationStatement", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0", "DEL ReturnStatement", "DEL SimpleType: RexLiteral", "DEL SimpleName: other", "DEL SimpleName: getRexBuilder", "DEL QualifiedName: SargBoundType.UPPER", "DEL Block", "DEL MethodDeclaration", "DEL AssertStatement", "DEL PrefixExpression: !", "DEL SimpleName: trimmed", "DEL InstanceofExpression", "DEL ReturnStatement", "DEL NumberLiteral: 0", "DEL QualifiedName: other.coordinate", "DEL SimpleType: ByteString", "DEL QualifiedName: RoundingMode.HALF_UP", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Block", "DEL SimpleType: RexLiteral", "DEL Modifier: protected", "DEL SimpleName: setScale", "DEL InfixExpression: ==", "DEL SimpleName: SargBoundType", "DEL FieldAccess", "DEL MethodInvocation", "DEL SimpleName: Object", "DEL BooleanLiteral: false", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL SimpleName: SargStrictness", "DEL IfStatement", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleName: value", "DEL ReturnStatement", "DEL SimpleName: coordinate", "DEL PrimitiveType: boolean", "DEL InfixExpression: ==", "DEL SimpleType: RexDynamicParam", "DEL VariableDeclarationStatement", "DEL Block", "DEL Block", "DEL InstanceofExpression", "DEL VariableDeclarationFragment", "DEL SimpleName: literal", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleName: boundType", "DEL VariableDeclarationStatement", "DEL Block", "DEL Block", "DEL SimpleType: RexLiteral", "DEL QualifiedName: SargStrictness.OPEN", "DEL ReturnStatement", "DEL IfStatement", "DEL ReturnStatement", "DEL SimpleName: RelDataType", "DEL TagElement", "DEL MethodInvocation", "DEL QualifiedName: SargBoundType.LOWER", "DEL BooleanLiteral: false", "DEL ParenthesizedExpression", "DEL SimpleName: isClosed", "DEL SimpleName: lit2", "DEL SimpleName: dataType", "DEL ClassInstanceCreation", "DEL Javadoc", "DEL Modifier: public", "DEL Modifier: private", "DEL FieldAccess", "DEL Block", "DEL SimpleName: strictness", "DEL VariableDeclarationFragment", "DEL PrimitiveType: int", "DEL InfixExpression: ==", "DEL SimpleName: RexDynamicParam", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL TextElement: SargEndpoint represents an endpoint of a (", "DEL SimpleName: isNull1", "DEL SimpleName: convertNumber", "DEL MethodInvocation", "DEL SimpleName: s", "DEL SimpleType: Object", "DEL Block", "DEL PrimitiveType: void", "DEL CastExpression", "DEL Block", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: c", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL VariableDeclarationStatement", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL PrefixExpression: !", "DEL IfStatement", "DEL TextElement: Datatype for endpoint value.", "DEL SimpleName: rtrim", "DEL TagElement: @link", "DEL Block", "DEL TextElement:  -1 for infinitesimally below (open upper bound, strictly less", "DEL SimpleName: isOpen", "DEL SimpleType: RexInputRef", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL StringLiteral: \"<\"", "DEL Block", "DEL SimpleName: SqlTypeUtil", "DEL NumberLiteral: 1", "DEL Block", "DEL SimpleName: compareTo", "DEL QualifiedName: SargBoundType.LOWER", "DEL MethodInvocation", "DEL SimpleName: RexDynamicParam", "DEL PrefixExpression: -", "DEL SimpleType: RexInputRef", "DEL Block", "DEL Modifier: public", "DEL Block", "DEL NullLiteral", "DEL SimpleName: value", "DEL IfStatement", "DEL SimpleType: RexInputRef", "DEL IfStatement", "DEL SimpleName: isFinite", "DEL SimpleName: toString", "DEL SimpleName: getRexBuilder", "DEL Block", "DEL SimpleType: RexNode", "DEL MethodDeclaration", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL SimpleName: isNull1", "DEL PrimitiveType: int", "DEL SimpleName: dataType", "DEL SimpleName: NlsString", "DEL IfStatement", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: BigDecimal", "DEL SimpleName: getCoordinate", "DEL IfStatement", "DEL SimpleType: RexDynamicParam", "DEL Block", "DEL SimpleName: getStrictness", "DEL SimpleName: roundingCompensation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: -", "DEL TagElement", "DEL Assignment: =", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: infinitude", "DEL Javadoc", "DEL SimpleName: SargEndpoint", "DEL Block", "DEL QualifiedName: other.coordinate", "DEL SimpleName: RexLiteral", "DEL AssertStatement", "DEL SimpleName: dataType", "DEL Block", "DEL TextElement: Sets a finite value for this endpoint.", "DEL Assignment: =", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: hashCode", "DEL SimpleType: ByteString", "DEL NumberLiteral: 0", "DEL SimpleName: coordinate", "DEL SimpleName: SargBoundType", "DEL QualifiedName: other.coordinate", "DEL Block", "DEL Block", "DEL CastExpression", "DEL Assignment: =", "DEL SimpleName: boundType", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: strictness", "DEL IfStatement", "DEL SimpleName: coord1", "DEL Modifier: protected", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL Modifier: public", "DEL SimpleName: isNullLiteral", "DEL SimpleName: setInfinity", "DEL SimpleName: isFinite", "DEL Assignment: =", "DEL SimpleName: compareTo", "DEL TagElement: @return", "DEL TagElement: @return", "DEL NumberLiteral: 1", "DEL SimpleType: SargBoundType", "DEL TagElement: @param", "DEL IfStatement", "DEL SimpleName: getSqlTypeName", "DEL SimpleName: strictness", "DEL SimpleName: strictness", "DEL SimpleName: RexLiteral", "DEL SimpleName: RexLiteral", "DEL SimpleName: NlsString", "DEL PrimitiveType: void", "DEL SimpleName: BigDecimal", "DEL IfStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL QualifiedName: SargStrictness.CLOSED", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL ParenthesizedExpression", "DEL SimpleName: roundedValue", "DEL InstanceofExpression", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: coordinate", "DEL SimpleType: ByteString", "DEL Block", "DEL Assignment: =", "DEL BooleanLiteral: false", "DEL InstanceofExpression", "DEL PrimitiveType: int", "DEL Block", "DEL SimpleName: c", "DEL Assignment: =", "DEL IfStatement", "DEL SimpleName: s", "DEL SimpleName: literal", "DEL TextElement:  -1 for negative infinity, +1 for positive infinity, 0 for a", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleName: append", "DEL Block", "DEL PrefixExpression: !", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: RexLiteral", "DEL SimpleType: RexDynamicParam", "DEL SimpleType: RexLiteral", "DEL SimpleName: factory", "DEL MethodDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: getDataType", "DEL ConditionalExpression", "DEL Modifier: final", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: coordinate", "DEL Block", "DEL SimpleName: factory", "DEL TagElement: @link", "DEL Block", "DEL Modifier: public", "DEL Block", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL NumberLiteral: 1", "DEL SimpleName: isNull2", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleName: other", "DEL ThisExpression", "DEL SimpleName: dataType", "DEL SimpleName: RexLiteral", "DEL SimpleName: infinitude", "DEL MethodInvocation", "DEL SimpleName: strictness", "DEL SimpleName: coordinate", "DEL TextElement:  opposite of isClosed", "DEL SimpleName: r1", "DEL PrefixExpression: !", "DEL SimpleName: RexLiteral", "DEL Javadoc", "DEL SimpleName: compareCoordinates", "DEL IfStatement", "DEL SimpleName: RexDynamicParam", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL TextElement: Subclass ", "DEL InfixExpression: >", "DEL SimpleName: getDataType", "DEL SimpleName: coordinate", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: other", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: value", "DEL SimpleName: newEndpoint", "DEL Block", "DEL SimpleName: coordinate", "DEL NumberLiteral: 0", "DEL Block", "DEL IfStatement", "DEL TextElement: , ", "DEL Javadoc", "DEL TagElement: @param", "DEL InstanceofExpression", "DEL Block", "DEL InstanceofExpression", "DEL MethodInvocation", "DEL TagElement: @param", "DEL FieldDeclaration", "DEL SimpleName: isClosed", "DEL MethodInvocation", "DEL Modifier: public", "DEL IfStatement", "DEL TagElement: @return", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: strictness", "DEL ExpressionStatement", "DEL SimpleName: coordinate", "DEL SimpleName: roundedValue", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL SimpleName: getStrictness", "DEL SimpleName: other", "DEL PrimitiveType: int", "DEL PrefixExpression: -", "DEL SimpleName: coord1", "DEL SimpleName: s", "DEL SimpleName: isNull", "DEL SimpleName: equals", "DEL ExpressionStatement", "DEL SimpleName: SargInterval", "DEL MethodDeclaration", "DEL SimpleName: coord2", "DEL VariableDeclarationStatement", "DEL InstanceofExpression", "DEL Block", "DEL Modifier: public", "DEL SimpleType: RelDataType", "DEL Assignment: =", "DEL SimpleName: infinitude", "DEL PrimitiveType: boolean", "DEL Assignment: =", "DEL PrefixExpression: !", "DEL IfStatement", "DEL SimpleName: RexLiteral", "DEL ReturnStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: boundType", "DEL MethodInvocation", "DEL SimpleName: ByteString", "DEL Block", "DEL Block", "DEL SimpleName: isNullLiteral", "DEL MethodInvocation", "DEL SimpleType: SargFactory", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL SimpleName: dataType", "DEL ReturnStatement", "DEL SimpleName: sb", "DEL SimpleName: coordinate", "DEL QualifiedName: SargStrictness.OPEN", "DEL SimpleName: literal", "DEL SimpleName: factory", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL NumberLiteral: 0", "DEL QualifiedName: SargBoundType.LOWER", "DEL ParenthesizedExpression", "DEL PrefixExpression: -", "DEL SimpleName: getInfinitude", "DEL QualifiedName: other.coordinate", "DEL SimpleName: boundType", "DEL SimpleName: SargEndpoint", "DEL IfStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: getCoordinate", "DEL TagElement: @link", "DEL IfStatement", "DEL SimpleName: RexInputRef", "DEL ParenthesizedExpression", "DEL SimpleName: getValue", "DEL SingleVariableDeclaration", "DEL SimpleName: other", "DEL SingleVariableDeclaration", "DEL SimpleName: isNull2", "DEL SimpleName: isFinite", "DEL Javadoc", "DEL QualifiedName: SargStrictness.OPEN", "DEL SimpleName: p1", "DEL Block", "DEL PrefixExpression: -", "DEL Javadoc", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SimpleType: RexDynamicParam", "DEL MethodInvocation", "DEL SimpleName: dataType", "DEL CastExpression", "DEL ReturnStatement", "DEL TextElement: (open lower bound, strictly greater than)", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: SargEndpoint", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleType: SargBoundType", "DEL SimpleName: SargStrictness", "DEL BooleanLiteral: false", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: coordinate", "DEL InfixExpression: >", "DEL SimpleName: NlsString", "DEL ReturnStatement", "DEL FieldDeclaration", "DEL NumberLiteral: 1", "DEL SimpleName: RexInputRef", "DEL SimpleName: literal", "DEL Block", "DEL SimpleName: r1", "DEL SimpleName: coord2", "DEL SimpleName: getStrictnessComplement", "DEL ThisExpression", "DEL SimpleType: RexLiteral", "DEL SimpleName: strictness", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL SimpleName: RexLiteral", "DEL IfStatement", "DEL MethodDeclaration", "DEL TagElement: @see", "DEL SimpleName: getPrecision", "DEL SimpleName: other", "DEL SimpleName: getCharsetName", "DEL QualifiedName: other.coordinate", "DEL SimpleName: SargEndpoint", "DEL SimpleName: sb", "DEL TextElement: while positive infinity implies an upper bound).", "DEL SimpleName: coordinate", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL Javadoc", "DEL InfixExpression: !=", "DEL SimpleName: other", "DEL SimpleName: value", "DEL SimpleName: value", "DEL TextElement: negative); true if a finite coordinate", "DEL Block", "DEL TagElement: @param", "DEL SimpleType: SargStrictness", "DEL IfStatement", "DEL SimpleName: getStrictnessSign", "DEL SimpleName: isNull2", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: RexLiteral", "DEL PrimitiveType: int", "DEL SimpleName: strictness", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: coordinate", "DEL SimpleName: getPrecision", "DEL TextElement: (10, 20).", "DEL AssertStatement", "DEL ExpressionStatement", "DEL SimpleName: value", "DEL Block", "DEL SimpleName: convertToTargetType", "DEL InfixExpression: ==", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: other", "DEL TextElement: <p>Instances of SargEndpoint are immutable from outside this package.", "DEL InfixExpression: ==", "DEL SimpleName: getIndex", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: p2", "DEL SimpleName: boundType", "DEL SimpleName: Comparable", "DEL SimpleName: getDataType", "DEL TextElement:  false if this endpoint represents infinity (either positive or", "DEL IfStatement", "DEL SimpleName: boundType", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL ExpressionStatement", "DEL AssertStatement", "DEL SimpleName: convertBytes", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL TextElement:  coordinate of this endpoint", "DEL SimpleName: RexLiteral", "DEL TagElement: @return", "DEL TagElement", "DEL ClassInstanceCreation", "DEL SimpleName: value", "DEL SimpleName: infinitude", "DEL Block", "DEL ExpressionStatement", "DEL SimpleType: RexInputRef", "DEL TagElement: @return", "DEL SimpleName: sb", "DEL SimpleName: getType", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL SimpleName: strictness", "DEL Javadoc", "DEL Modifier: public", "DEL Modifier: public", "DEL AssertStatement", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: s", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL IfStatement", "DEL NumberLiteral: 1", "DEL SimpleName: dataType", "DEL SimpleName: String", "DEL Block", "DEL CastExpression", "DEL Javadoc", "DEL Modifier: public", "DEL SimpleName: coordinate", "DEL SimpleName: RexLiteral", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: lit1", "DEL SimpleName: literal", "DEL MethodInvocation", "DEL PrimitiveType: int", "DEL VariableDeclarationStatement", "DEL SimpleType: RexLiteral", "DEL SimpleType: ByteString", "DEL Modifier: private", "DEL SimpleName: isApproximateNumeric", "DEL ParenthesizedExpression", "DEL SimpleName: isClosed", "DEL Block", "DEL SimpleName: RexInputRef", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleName: s", "DEL NullLiteral", "DEL SimpleName: RexLiteral", "DEL InfixExpression: ==", "DEL SimpleName: isClosed", "DEL Javadoc", "DEL InfixExpression: <=", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: getDataType", "DEL TextElement: Sets this endpoint to either negative or positive infinity. An infinite", "DEL SimpleName: boundType", "DEL TextElement:  boundary type this endpoint represents", "DEL SimpleName: sb", "DEL SingleVariableDeclaration", "DEL TextElement:  true if this endpoint represents a closed (exact) bound; false if", "DEL IfStatement", "DEL SimpleName: fixed", "DEL Block", "DEL BooleanLiteral: false", "DEL TypeDeclaration: class", "DEL ExpressionStatement", "DEL SimpleName: other", "DEL SimpleName: getPrecision", "DEL Javadoc", "DEL SimpleName: truncated", "DEL SimpleName: getInfinitude", "DEL Block", "DEL IfStatement", "DEL SimpleName: getIndex", "DEL SimpleName: RexNode", "DEL SimpleName: boundType", "DEL Javadoc", "DEL Javadoc", "DEL Block", "DEL NumberLiteral: 0", "DEL VariableDeclarationFragment", "DEL PrimitiveType: void", "DEL QualifiedName: SargStrictness.OPEN", "DEL TextElement: open (strict)", "DEL PrimitiveType: int", "DEL TextElement:  true if this endpoint has the null value for its coordinate", "DEL NumberLiteral: 1", "DEL SimpleType: RexNode", "DEL VariableDeclarationFragment", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: makeBinaryLiteral", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: coord2", "DEL MethodInvocation", "DEL SimpleName: dataType", "DEL ReturnStatement", "DEL SimpleName: value", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL TextElement: finite endpoint", "DEL SimpleName: value", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL SimpleName: boundType", "DEL NumberLiteral: 1", "DEL NumberLiteral: 0", "DEL Block", "DEL MemberRef", "DEL QualifiedName: SargStrictness.CLOSED", "DEL SimpleName: getStrictnessSign", "DEL ReturnStatement", "DEL PrimitiveType: boolean", "DEL Assignment: =", "DEL SimpleName: strictness", "DEL IfStatement", "DEL TagElement: @return", "DEL Modifier: protected", "DEL TextElement: Factory which produced this endpoint.", "DEL SimpleType: RexDynamicParam", "DEL MethodInvocation", "DEL SimpleType: RelDataType", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL QualifiedName: SargBoundType.LOWER", "DEL IfStatement", "DEL SimpleName: getScale", "DEL Block", "DEL SimpleName: value", "DEL SimpleName: setFinite", "DEL MethodInvocation", "DEL SimpleName: RexNode", "DEL SimpleName: dataType", "DEL IfStatement", "DEL SimpleName: getBoundType", "DEL SimpleType: SargEndpoint", "DEL MethodDeclaration", "DEL Modifier: protected", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: boundType", "DEL SimpleName: coordinate", "DEL ThisExpression", "DEL InfixExpression: <", "DEL ReturnStatement", "DEL SimpleName: RelDataType", "DEL InfixExpression: &&", "DEL IfStatement", "DEL SimpleName: coordinate", "DEL ParenthesizedExpression", "DEL PrimitiveType: int", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: dataType", "DEL SimpleName: coordinate", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: length", "DEL SimpleName: dataType", "DEL InstanceofExpression", "DEL ReturnStatement", "DEL SimpleType: RelDataType", "DEL SimpleName: makeCharLiteral", "DEL SimpleName: strictness", "DEL SimpleName: value", "DEL NullLiteral", "DEL SimpleName: dataType", "DEL SimpleName: SargEndpoint", "DEL TextElement: than), 0 for exact equality (closed bound), 1 for infinitesimally above", "DEL SimpleType: NlsString", "DEL SimpleName: hashCode", "DEL SimpleName: coord1", "DEL SimpleName: isFinite", "DEL StringLiteral: \"+infinity\"", "DEL SimpleType: SargStrictness", "DEL NumberLiteral: 0", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: coordinate", "DEL MethodInvocation", "DEL QualifiedName: SargStrictness.CLOSED", "DEL SimpleName: other", "DEL SimpleName: other", "DEL SimpleName: RexInputRef", "DEL QualifiedName: SargStrictness.OPEN", "DEL SimpleName: RexDynamicParam", "DEL AssertStatement", "DEL InstanceofExpression", "DEL AssertStatement", "DEL SimpleType: SargFactory", "DEL MemberRef", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL IfStatement", "DEL Block", "DEL TextElement:  endpoint position", "DEL BooleanLiteral: false", "DEL ExpressionStatement", "DEL SimpleName: r2", "DEL SimpleName: Comparable", "DEL TagElement: @return", "DEL PrefixExpression: -", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL SimpleName: length", "DEL StringLiteral: \"<=\"", "DEL NumberLiteral: 1", "DEL SimpleName: RexLiteral", "DEL ExpressionStatement", "DEL SimpleName: coordinate", "DEL SimpleName: value", "DEL MethodInvocation", "DEL SimpleName: isTouching", "DEL VariableDeclarationFragment", "DEL SimpleName: getPrecision", "DEL SimpleName: boundType", "DEL SimpleName: dataType", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: SargEndpoint", "DEL SimpleName: factory", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleType: BigDecimal", "DEL CastExpression", "DEL FieldAccess", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL TextElement: ).", "DEL VariableDeclarationFragment", "DEL TextElement:  target datatype for coordinate", "DEL SimpleName: substring", "DEL MethodInvocation", "DEL SimpleName: getPrecision", "DEL TextElement: overlapping). For example, the upper bound of the interval (1, 10)", "DEL VariableDeclarationFragment", "DEL TagElement: @return", "DEL SimpleName: compareTo", "DEL SimpleName: r2", "DEL Block", "DEL Javadoc", "DEL SimpleName: s", "DEL QualifiedName: other.coordinate", "DEL FieldDeclaration", "DEL SimpleType: SargEndpoint", "DEL VariableDeclarationStatement", "DEL InfixExpression: ||", "DEL SimpleName: convertBytes", "DEL SimpleName: getPrecision", "DEL InfixExpression: &&", "DEL SimpleName: SargFactory", "DEL SimpleName: isNull1", "DEL VariableDeclarationFragment", "DEL FieldAccess", "DEL InstanceofExpression", "DEL PrefixExpression: !", "DEL SimpleType: Comparable", "DEL InfixExpression: ==", "DEL SimpleName: fixed", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleName: strictness", "DEL FieldDeclaration", "DEL SimpleName: StringBuilder", "DEL SimpleName: s", "DEL SimpleName: RexLiteral", "DEL ReturnStatement", "DEL Modifier: public", "DEL SimpleName: getDataType", "DEL MethodInvocation", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: setInfinity", "DEL MethodInvocation", "DEL SimpleName: getBoundType", "DEL SimpleName: s", "DEL SimpleName: other", "DEL SimpleName: getCollation", "DEL Block", "DEL AssertStatement", "DEL SimpleType: Comparable", "DEL SimpleName: other", "DEL SimpleName: strictness", "DEL InfixExpression: !=", "DEL SimpleName: toString", "DEL SimpleType: RexDynamicParam", "DEL SimpleType: RexDynamicParam", "DEL SimpleType: RexInputRef", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL ReturnStatement", "DEL Block", "DEL IfStatement", "DEL SimpleName: dataType", "DEL SimpleName: setFinite", "DEL ExpressionStatement", "DEL SimpleType: RexLiteral", "DEL SimpleName: other", "DEL SimpleName: dataType", "DEL SimpleType: SargStrictness", "DEL CastExpression", "DEL TagElement", "DEL SimpleName: getValue", "DEL SimpleName: dataType", "DEL ParameterizedType: Comparable<SargEndpoint>", "DEL SimpleName: dataType", "DEL MethodInvocation", "DEL SimpleName: setInfinity", "DEL SimpleName: roundedValue", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL Block", "DEL TagElement: @link", "DEL SimpleName: isNullLiteral", "DEL ReturnStatement", "DEL StringLiteral: \" \"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: RexInputRef", "DEL Modifier: protected", "DEL Assignment: =", "DEL SimpleName: getRexBuilder", "DEL SimpleName: RexDynamicParam", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL Modifier: public", "DEL ThisExpression", "DEL SimpleName: getPrecision", "DEL Block", "DEL VariableDeclarationStatement", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleName: sb", "DEL InfixExpression: &&", "DEL Block", "DEL SimpleName: getInfinitude", "DEL SimpleName: Util", "DEL SimpleType: SargStrictness", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: boundType", "DEL ExpressionStatement", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: RexInputRef", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL Assignment: =", "DEL NumberLiteral: 1", "DEL SimpleName: SargBoundType", "DEL CastExpression", "DEL SimpleType: BigDecimal", "DEL Block", "DEL SimpleName: factory", "DEL NumberLiteral: 1", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL InfixExpression: -", "DEL ReturnStatement", "DEL SimpleName: convertNumber", "DEL Assignment: =", "DEL Block", "DEL TagElement: @see", "DEL SimpleName: p1", "DEL SimpleType: String", "DEL Block", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL Assignment: =", "DEL MethodDeclaration", "DEL SimpleName: rtrim", "DEL ThisExpression", "DEL MethodInvocation", "DEL SimpleName: compareCoordinates", "DEL SimpleType: RexInputRef", "DEL ReturnStatement", "DEL ParenthesizedExpression", "DEL SimpleName: NlsString", "DEL SimpleType: SargEndpoint", "DEL SimpleType: RexNode", "DEL SimpleName: roundedValue", "DEL SimpleName: infinitude", "DEL SimpleName: RexNode", "DEL SimpleName: roundingCompensation", "DEL MethodInvocation", "DEL QualifiedName: other.coordinate", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL InstanceofExpression", "DEL IfStatement", "DEL InfixExpression: !=", "DEL SimpleName: SargStrictness", "DEL SimpleName: value", "DEL ReturnStatement", "DEL BooleanLiteral: false", "DEL Modifier: public", "DEL SimpleName: s", "DEL SimpleName: roundingCompensation", "DEL CastExpression", "DEL SimpleType: NlsString", "DEL PrimitiveType: int", "DEL SimpleName: ByteString", "DEL SimpleType: SargEndpoint", "DEL SimpleType: RexDynamicParam", "DEL SimpleName: boundType", "DEL InfixExpression: !=", "DEL SimpleName: canAssignFrom", "DEL SimpleName: RexInputRef", "DEL SimpleName: getInfinitude", "DEL Modifier: public", "DEL TextElement:  the other endpoint to test", "DEL SimpleName: RexDynamicParam", "DEL SimpleName: precision", "DEL SimpleName: coordinate", "DEL SimpleName: copyFrom", "DEL IfStatement", "DEL SimpleName: SargEndpoint", "DEL NumberLiteral: 0", "DEL SimpleName: isNullLiteral", "DEL SimpleType: RexInputRef", "DEL SimpleName: isFinite", "DEL TagElement: @return", "DEL SimpleName: RexLiteral", "DEL TagElement: @see", "DEL PrefixExpression: !", "DEL TextElement: touches the lower bound of the interval [10, 20), but not of the interval", "DEL SimpleType: BigDecimal", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SimpleType: NlsString"]}]}}, {"SargEndpoint_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.math(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.eigenbase.reltype(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.eigenbase.rex(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.eigenbase.sql.type(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.eigenbase.util(10)", "Delete ImportDeclaration(11)", "Delete QualifiedName: net.hydromatic.avatica.ByteString(12)", "Delete ImportDeclaration(13)", "Delete TextElement: SargEndpoint represents an endpoint of a ((14)", "Delete SimpleName: SargInterval(15)", "Delete TagElement: @link(16)", "Delete TextElement: ).(17)", "Delete TextElement: <p>Instances of SargEndpoint are immutable from outside this package.(18)", "Delete TextElement: Subclass (19)", "Delete SimpleName: SargMutableEndpoint(20)", "Delete TagElement: @link(21)", "Delete TextElement:  is provided for manipulation from(22)", "Delete TextElement: outside the package.(23)", "Delete TagElement(24)", "Delete Javadoc(25)", "Delete Modifier: public(26)", "Delete SimpleName: SargEndpoint(27)", "Delete SimpleName: Comparable(28)", "Delete SimpleType: Comparable(29)", "Delete SimpleName: SargEndpoint(30)", "Delete SimpleType: SargEndpoint(31)", "Delete ParameterizedType: Comparable<SargEndpoint>(32)", "Delete TextElement: Factory which produced this endpoint.(33)", "Delete TagElement(34)", "Delete Javadoc(35)", "Delete Modifier: protected(36)", "Delete Modifier: final(37)", "Delete SimpleName: SargFactory(38)", "Delete SimpleType: SargFactory(39)", "Delete SimpleName: factory(40)", "Delete VariableDeclarationFragment(41)", "Delete FieldDeclaration(42)", "Delete TextElement: Datatype for endpoint value.(43)", "Delete TagElement(44)", "Delete Javadoc(45)", "Delete Modifier: protected(46)", "Delete Modifier: final(47)", "Delete SimpleName: RelDataType(48)", "Delete SimpleType: RelDataType(49)", "Delete SimpleName: dataType(50)", "Delete VariableDeclarationFragment(51)", "Delete FieldDeclaration(52)", "Delete TextElement: Coordinate for this endpoint, constrained to be either (53)", "Delete SimpleName: RexLiteral(54)", "Delete TagElement: @link(55)", "Delete TextElement: , (56)", "Delete SimpleName: RexInputRef(57)", "Delete TagElement: @link(58)", "Delete TextElement: , (59)", "Delete SimpleName: RexDynamicParam(60)", "Delete TagElement: @link(61)", "Delete TextElement: , or null to(62)", "Delete TextElement: represent infinity (positive or negative infinity is implied by(63)", "Delete TextElement: boundType).(64)", "Delete TagElement(65)", "Delete Javadoc(66)", "Delete Modifier: protected(67)", "Delete SimpleName: RexNode(68)", "Delete SimpleType: RexNode(69)", "Delete SimpleName: coordinate(70)", "Delete VariableDeclarationFragment(71)", "Delete FieldDeclaration(72)", "Delete SimpleName: getBoundType(73)", "Delete MemberRef(74)", "Delete TagElement: @see(75)", "Delete Javadoc(76)", "Delete Modifier: protected(77)", "Delete SimpleName: SargBoundType(78)", "Delete SimpleType: SargBoundType(79)", "Delete SimpleName: boundType(80)", "Delete VariableDeclarationFragment(81)", "Delete FieldDeclaration(82)", "Delete SimpleName: getStrictness(83)", "Delete MemberRef(84)", "Delete TagElement: @see(85)", "Delete Javadoc(86)", "Delete Modifier: protected(87)", "Delete SimpleName: SargStrictness(88)", "Delete SimpleType: SargStrictness(89)", "Delete SimpleName: strictness(90)", "Delete VariableDeclarationFragment(91)", "Delete FieldDeclaration(92)", "Delete SimpleName: SargFactory(93)", "Delete SimpleName: newEndpoint(94)", "Delete MemberRef(95)", "Delete TagElement: @see(96)", "Delete Javadoc(97)", "Delete SimpleName: SargEndpoint(98)", "Delete SimpleName: SargFactory(99)", "Delete SimpleType: SargFactory(100)", "Delete SimpleName: factory(101)", "Delete SingleVariableDeclaration(102)", "Delete SimpleName: RelDataType(103)", "Delete SimpleType: RelDataType(104)", "Delete SimpleName: dataType(105)", "Delete SingleVariableDeclaration(106)", "Delete ThisExpression(107)", "Delete SimpleName: factory(108)", "Delete FieldAccess(109)", "Delete SimpleName: factory(110)", "Delete Assignment: =(111)", "Delete ExpressionStatement(112)", "Delete ThisExpression(113)", "Delete SimpleName: dataType(114)", "Delete FieldAccess(115)", "Delete SimpleName: dataType(116)", "Delete Assignment: =(117)", "Delete ExpressionStatement(118)", "Delete SimpleName: boundType(119)", "Delete QualifiedName: SargBoundType.LOWER(120)", "Delete Assignment: =(121)", "Delete ExpressionStatement(122)", "Delete SimpleName: strictness(123)", "Delete QualifiedName: SargStrictness.OPEN(124)", "Delete Assignment: =(125)", "Delete ExpressionStatement(126)", "Delete Block(127)", "Delete MethodDeclaration(128)", "Delete PrimitiveType: void(129)", "Delete SimpleName: copyFrom(130)", "Delete SimpleName: SargEndpoint(131)", "Delete SimpleType: SargEndpoint(132)", "Delete SimpleName: other(133)", "Delete SingleVariableDeclaration(134)", "Delete SimpleName: getDataType(135)", "Delete MethodInvocation(136)", "Delete SimpleName: other(137)", "Delete SimpleName: getDataType(138)", "Delete MethodInvocation(139)", "Delete InfixExpression: ==(140)", "Delete AssertStatement(141)", "Delete SimpleName: other(142)", "Delete SimpleName: isFinite(143)", "Delete MethodInvocation(144)", "Delete SimpleName: setFinite(145)", "Delete SimpleName: other(146)", "Delete SimpleName: getBoundType(147)", "Delete MethodInvocation(148)", "Delete SimpleName: other(149)", "Delete SimpleName: getStrictness(150)", "Delete MethodInvocation(151)", "Delete SimpleName: other(152)", "Delete SimpleName: getCoordinate(153)", "Delete MethodInvocation(154)", "Delete MethodInvocation(155)", "Delete ExpressionStatement(156)", "Delete Block(157)", "Delete SimpleName: setInfinity(158)", "Delete SimpleName: other(159)", "Delete SimpleName: getInfinitude(160)", "Delete MethodInvocation(161)", "Delete MethodInvocation(162)", "Delete ExpressionStatement(163)", "Delete Block(164)", "Delete IfStatement(165)", "Delete Block(166)", "Delete MethodDeclaration(167)", "Delete TextElement: Sets this endpoint to either negative or positive infinity. An infinite(168)", "Delete TextElement: endpoint implies an open bound (negative infinity implies a lower bound,(169)", "Delete TextElement: while positive infinity implies an upper bound).(170)", "Delete TagElement(171)", "Delete SimpleName: infinitude(172)", "Delete TextElement:  either -1 or +1(173)", "Delete TagElement: @param(174)", "Delete Javadoc(175)", "Delete PrimitiveType: void(176)", "Delete SimpleName: setInfinity(177)", "Delete PrimitiveType: int(178)", "Delete SimpleName: infinitude(179)", "Delete SingleVariableDeclaration(180)", "Delete SimpleName: infinitude(181)", "Delete NumberLiteral: 1(182)", "Delete PrefixExpression: -(183)", "Delete InfixExpression: ==(184)", "Delete ParenthesizedExpression(185)", "Delete SimpleName: infinitude(186)", "Delete NumberLiteral: 1(187)", "Delete InfixExpression: ==(188)", "Delete ParenthesizedExpression(189)", "Delete InfixExpression: ||(190)", "Delete AssertStatement(191)", "Delete SimpleName: infinitude(192)", "Delete NumberLiteral: 1(193)", "Delete PrefixExpression: -(194)", "Delete InfixExpression: ==(195)", "Delete SimpleName: boundType(196)", "Delete QualifiedName: SargBoundType.LOWER(197)", "Delete Assignment: =(198)", "Delete ExpressionStatement(199)", "Delete Block(200)", "Delete SimpleName: boundType(201)", "Delete QualifiedName: SargBoundType.UPPER(202)", "Delete Assignment: =(203)", "Delete ExpressionStatement(204)", "Delete Block(205)", "Delete IfStatement(206)", "Delete SimpleName: strictness(207)", "Delete QualifiedName: SargStrictness.OPEN(208)", "Delete Assignment: =(209)", "Delete ExpressionStatement(210)", "Delete SimpleName: coordinate(211)", "Delete NullLiteral(212)", "Delete Assignment: =(213)", "Delete ExpressionStatement(214)", "Delete Block(215)", "Delete MethodDeclaration(216)", "Delete TextElement: Sets a finite value for this endpoint.(217)", "Delete TagElement(218)", "Delete SimpleName: boundType(219)", "Delete TextElement:   bound type (upper/lower)(220)", "Delete TagElement: @param(221)", "Delete SimpleName: strictness(222)", "Delete TextElement:  boundary strictness(223)", "Delete TagElement: @param(224)", "Delete SimpleName: coordinate(225)", "Delete TextElement:  endpoint position(226)", "Delete TagElement: @param(227)", "Delete Javadoc(228)", "Delete PrimitiveType: void(229)", "Delete SimpleName: setFinite(230)", "Delete SimpleName: SargBoundType(231)", "Delete SimpleType: SargBoundType(232)", "Delete SimpleName: boundType(233)", "Delete SingleVariableDeclaration(234)", "Delete SimpleName: SargStrictness(235)", "Delete SimpleType: SargStrictness(236)", "Delete SimpleName: strictness(237)", "Delete SingleVariableDeclaration(238)", "Delete SimpleName: RexNode(239)", "Delete SimpleType: RexNode(240)", "Delete SimpleName: coordinate(241)", "Delete SingleVariableDeclaration(242)", "Delete SimpleName: coordinate(243)", "Delete NullLiteral(244)", "Delete InfixExpression: !=(245)", "Delete AssertStatement(246)", "Delete SimpleName: coordinate(247)", "Delete SimpleName: RexDynamicParam(248)", "Delete SimpleType: RexDynamicParam(249)", "Delete InstanceofExpression(250)", "Delete ParenthesizedExpression(251)", "Delete PrefixExpression: !(252)", "Delete SimpleName: coordinate(253)", "Delete SimpleName: RexInputRef(254)", "Delete SimpleType: RexInputRef(255)", "Delete InstanceofExpression(256)", "Delete ParenthesizedExpression(257)", "Delete PrefixExpression: !(258)", "Delete InfixExpression: &&(259)", "Delete SimpleName: coordinate(260)", "Delete SimpleName: RexLiteral(261)", "Delete SimpleType: RexLiteral(262)", "Delete InstanceofExpression(263)", "Delete AssertStatement(264)", "Delete SimpleName: RexLiteral(265)", "Delete SimpleType: RexLiteral(266)", "Delete SimpleName: literal(267)", "Delete SimpleName: RexLiteral(268)", "Delete SimpleType: RexLiteral(269)", "Delete SimpleName: coordinate(270)", "Delete CastExpression(271)", "Delete VariableDeclarationFragment(272)", "Delete VariableDeclarationStatement(273)", "Delete SimpleName: RexLiteral(274)", "Delete SimpleName: isNullLiteral(275)", "Delete SimpleName: literal(276)", "Delete MethodInvocation(277)", "Delete PrefixExpression: !(278)", "Delete SimpleName: SqlTypeUtil(279)", "Delete SimpleName: canAssignFrom(280)", "Delete SimpleName: dataType(281)", "Delete SimpleName: literal(282)", "Delete SimpleName: getType(283)", "Delete MethodInvocation(284)", "Delete MethodInvocation(285)", "Delete AssertStatement(286)", "Delete Block(287)", "Delete IfStatement(288)", "Delete Block(289)", "Delete IfStatement(290)", "Delete ThisExpression(291)", "Delete SimpleName: boundType(292)", "Delete FieldAccess(293)", "Delete SimpleName: boundType(294)", "Delete Assignment: =(295)", "Delete ExpressionStatement(296)", "Delete ThisExpression(297)", "Delete SimpleName: coordinate(298)", "Delete FieldAccess(299)", "Delete SimpleName: coordinate(300)", "Delete Assignment: =(301)", "Delete ExpressionStatement(302)", "Delete ThisExpression(303)", "Delete SimpleName: strictness(304)", "Delete FieldAccess(305)", "Delete SimpleName: strictness(306)", "Delete Assignment: =(307)", "Delete ExpressionStatement(308)", "Delete SimpleName: convertToTargetType(309)", "Delete MethodInvocation(310)", "Delete ExpressionStatement(311)", "Delete Block(312)", "Delete MethodDeclaration(313)", "Delete Modifier: private(314)", "Delete PrimitiveType: void(315)", "Delete SimpleName: convertToTargetType(316)", "Delete SimpleName: coordinate(317)", "Delete SimpleName: RexLiteral(318)", "Delete SimpleType: RexLiteral(319)", "Delete InstanceofExpression(320)", "Delete ParenthesizedExpression(321)", "Delete PrefixExpression: !(322)", "Delete ReturnStatement(323)", "Delete Block(324)", "Delete IfStatement(325)", "Delete SimpleName: RexLiteral(326)", "Delete SimpleType: RexLiteral(327)", "Delete SimpleName: literal(328)", "Delete SimpleName: RexLiteral(329)", "Delete SimpleType: RexLiteral(330)", "Delete SimpleName: coordinate(331)", "Delete CastExpression(332)", "Delete VariableDeclarationFragment(333)", "Delete VariableDeclarationStatement(334)", "Delete SimpleName: RexLiteral(335)", "Delete SimpleName: isNullLiteral(336)", "Delete SimpleName: literal(337)", "Delete MethodInvocation(338)", "Delete ReturnStatement(339)", "Delete Block(340)", "Delete IfStatement(341)", "Delete SimpleName: Comparable(342)", "Delete SimpleType: Comparable(343)", "Delete SimpleName: value(344)", "Delete SimpleName: literal(345)", "Delete SimpleName: getValue(346)", "Delete MethodInvocation(347)", "Delete VariableDeclarationFragment(348)", "Delete VariableDeclarationStatement(349)", "Delete PrimitiveType: int(350)", "Delete SimpleName: roundingCompensation(351)", "Delete VariableDeclarationFragment(352)", "Delete VariableDeclarationStatement(353)", "Delete SimpleName: value(354)", "Delete SimpleName: BigDecimal(355)", "Delete SimpleType: BigDecimal(356)", "Delete InstanceofExpression(357)", "Delete SimpleName: roundingCompensation(358)", "Delete SimpleName: convertNumber(359)", "Delete SimpleName: BigDecimal(360)", "Delete SimpleType: BigDecimal(361)", "Delete SimpleName: value(362)", "Delete CastExpression(363)", "Delete MethodInvocation(364)", "Delete Assignment: =(365)", "Delete ExpressionStatement(366)", "Delete Block(367)", "Delete SimpleName: value(368)", "Delete SimpleName: NlsString(369)", "Delete SimpleType: NlsString(370)", "Delete InstanceofExpression(371)", "Delete SimpleName: roundingCompensation(372)", "Delete SimpleName: convertString(373)", "Delete SimpleName: NlsString(374)", "Delete SimpleType: NlsString(375)", "Delete SimpleName: value(376)", "Delete CastExpression(377)", "Delete MethodInvocation(378)", "Delete Assignment: =(379)", "Delete ExpressionStatement(380)", "Delete Block(381)", "Delete SimpleName: value(382)", "Delete SimpleName: ByteString(383)", "Delete SimpleType: ByteString(384)", "Delete InstanceofExpression(385)", "Delete SimpleName: roundingCompensation(386)", "Delete SimpleName: convertBytes(387)", "Delete SimpleName: ByteString(388)", "Delete SimpleType: ByteString(389)", "Delete SimpleName: value(390)", "Delete CastExpression(391)", "Delete MethodInvocation(392)", "Delete Assignment: =(393)", "Delete ExpressionStatement(394)", "Delete Block(395)", "Delete ReturnStatement(396)", "Delete Block(397)", "Delete IfStatement(398)", "Delete IfStatement(399)", "Delete IfStatement(400)", "Delete SimpleName: roundingCompensation(401)", "Delete NumberLiteral: 0(402)", "Delete InfixExpression: ==(403)", "Delete ReturnStatement(404)", "Delete Block(405)", "Delete IfStatement(406)", "Delete SimpleName: boundType(407)", "Delete QualifiedName: SargBoundType.LOWER(408)", "Delete InfixExpression: ==(409)", "Delete SimpleName: roundingCompensation(410)", "Delete NumberLiteral: 0(411)", "Delete InfixExpression: <(412)", "Delete SimpleName: strictness(413)", "Delete QualifiedName: SargStrictness.CLOSED(414)", "Delete Assignment: =(415)", "Delete ExpressionStatement(416)", "Delete Block(417)", "Delete SimpleName: strictness(418)", "Delete QualifiedName: SargStrictness.OPEN(419)", "Delete Assignment: =(420)", "Delete ExpressionStatement(421)", "Delete Block(422)", "Delete IfStatement(423)", "Delete Block(424)", "Delete SimpleName: boundType(425)", "Delete QualifiedName: SargBoundType.UPPER(426)", "Delete InfixExpression: ==(427)", "Delete SimpleName: roundingCompensation(428)", "Delete NumberLiteral: 0(429)", "Delete InfixExpression: >(430)", "Delete SimpleName: strictness(431)", "Delete QualifiedName: SargStrictness.CLOSED(432)", "Delete Assignment: =(433)", "Delete ExpressionStatement(434)", "Delete Block(435)", "Delete SimpleName: strictness(436)", "Delete QualifiedName: SargStrictness.OPEN(437)", "Delete Assignment: =(438)", "Delete ExpressionStatement(439)", "Delete Block(440)", "Delete IfStatement(441)", "Delete Block(442)", "Delete IfStatement(443)", "Delete IfStatement(444)", "Delete Block(445)", "Delete MethodDeclaration(446)", "Delete Modifier: private(447)", "Delete PrimitiveType: int(448)", "Delete SimpleName: convertString(449)", "Delete SimpleName: NlsString(450)", "Delete SimpleType: NlsString(451)", "Delete SimpleName: value(452)", "Delete SingleVariableDeclaration(453)", "Delete PrimitiveType: boolean(454)", "Delete SimpleName: fixed(455)", "Delete SimpleName: dataType(456)", "Delete SimpleName: getSqlTypeName(457)", "Delete MethodInvocation(458)", "Delete QualifiedName: SqlTypeName.CHAR(459)", "Delete InfixExpression: ==(460)", "Delete VariableDeclarationFragment(461)", "Delete VariableDeclarationStatement(462)", "Delete SimpleName: String(463)", "Delete SimpleType: String(464)", "Delete SimpleName: s(465)", "Delete SimpleName: value(466)", "Delete SimpleName: getValue(467)", "Delete MethodInvocation(468)", "Delete VariableDeclarationFragment(469)", "Delete VariableDeclarationStatement(470)", "Delete SimpleName: String(471)", "Delete SimpleType: String(472)", "Delete SimpleName: trimmed(473)", "Delete SimpleName: Util(474)", "Delete SimpleName: rtrim(475)", "Delete SimpleName: s(476)", "Delete MethodInvocation(477)", "Delete VariableDeclarationFragment(478)", "Delete VariableDeclarationStatement(479)", "Delete SimpleName: fixed(480)", "Delete SimpleName: s(481)", "Delete SimpleName: Util(482)", "Delete SimpleName: rpad(483)", "Delete SimpleName: s(484)", "Delete SimpleName: dataType(485)", "Delete SimpleName: getPrecision(486)", "Delete MethodInvocation(487)", "Delete MethodInvocation(488)", "Delete Assignment: =(489)", "Delete ExpressionStatement(490)", "Delete Block(491)", "Delete SimpleName: s(492)", "Delete SimpleName: trimmed(493)", "Delete Assignment: =(494)", "Delete ExpressionStatement(495)", "Delete Block(496)", "Delete IfStatement(497)", "Delete SimpleName: s(498)", "Delete SimpleName: length(499)", "Delete MethodInvocation(500)", "Delete SimpleName: dataType(501)", "Delete SimpleName: getPrecision(502)", "Delete MethodInvocation(503)", "Delete InfixExpression: >(504)", "Delete SimpleName: s(505)", "Delete SimpleName: s(506)", "Delete SimpleName: substring(507)", "Delete NumberLiteral: 0(508)", "Delete SimpleName: dataType(509)", "Delete SimpleName: getPrecision(510)", "Delete MethodInvocation(511)", "Delete MethodInvocation(512)", "Delete Assignment: =(513)", "Delete ExpressionStatement(514)", "Delete SimpleName: fixed(515)", "Delete PrefixExpression: !(516)", "Delete SimpleName: s(517)", "Delete SimpleName: Util(518)", "Delete SimpleName: rtrim(519)", "Delete SimpleName: s(520)", "Delete MethodInvocation(521)", "Delete Assignment: =(522)", "Delete ExpressionStatement(523)", "Delete Block(524)", "Delete IfStatement(525)", "Delete Block(526)", "Delete IfStatement(527)", "Delete SimpleName: coordinate(528)", "Delete SimpleName: factory(529)", "Delete SimpleName: getRexBuilder(530)", "Delete MethodInvocation(531)", "Delete SimpleName: makeCharLiteral(532)", "Delete SimpleName: NlsString(533)", "Delete SimpleType: NlsString(534)", "Delete SimpleName: s(535)", "Delete SimpleName: value(536)", "Delete SimpleName: getCharsetName(537)", "Delete MethodInvocation(538)", "Delete SimpleName: value(539)", "Delete SimpleName: getCollation(540)", "Delete MethodInvocation(541)", "Delete ClassInstanceCreation(542)", "Delete MethodInvocation(543)", "Delete Assignment: =(544)", "Delete ExpressionStatement(545)", "Delete SimpleName: trimmed(546)", "Delete SimpleName: length(547)", "Delete MethodInvocation(548)", "Delete SimpleName: dataType(549)", "Delete SimpleName: getPrecision(550)", "Delete MethodInvocation(551)", "Delete InfixExpression: >(552)", "Delete NumberLiteral: 1(553)", "Delete ReturnStatement(554)", "Delete Block(555)", "Delete NumberLiteral: 0(556)", "Delete ReturnStatement(557)", "Delete Block(558)", "Delete IfStatement(559)", "Delete Block(560)", "Delete MethodDeclaration(561)", "Delete Modifier: private(562)", "Delete PrimitiveType: int(563)", "Delete SimpleName: convertBytes(564)", "Delete SimpleName: ByteString(565)", "Delete SimpleType: ByteString(566)", "Delete SimpleName: value(567)", "Delete SingleVariableDeclaration(568)", "Delete SimpleName: value(569)", "Delete SimpleName: length(570)", "Delete MethodInvocation(571)", "Delete SimpleName: dataType(572)", "Delete SimpleName: getPrecision(573)", "Delete MethodInvocation(574)", "Delete InfixExpression: <=(575)", "Delete NumberLiteral: 0(576)", "Delete ReturnStatement(577)", "Delete Block(578)", "Delete IfStatement(579)", "Delete SimpleName: ByteString(580)", "Delete SimpleType: ByteString(581)", "Delete SimpleName: truncated(582)", "Delete SimpleName: value(583)", "Delete SimpleName: substring(584)", "Delete NumberLiteral: 0(585)", "Delete SimpleName: dataType(586)", "Delete SimpleName: getPrecision(587)", "Delete MethodInvocation(588)", "Delete MethodInvocation(589)", "Delete VariableDeclarationFragment(590)", "Delete VariableDeclarationStatement(591)", "Delete SimpleName: coordinate(592)", "Delete SimpleName: factory(593)", "Delete SimpleName: getRexBuilder(594)", "Delete MethodInvocation(595)", "Delete SimpleName: makeBinaryLiteral(596)", "Delete SimpleName: truncated(597)", "Delete MethodInvocation(598)", "Delete Assignment: =(599)", "Delete ExpressionStatement(600)", "Delete NumberLiteral: 1(601)", "Delete ReturnStatement(602)", "Delete Block(603)", "Delete MethodDeclaration(604)", "Delete Modifier: private(605)", "Delete PrimitiveType: int(606)", "Delete SimpleName: convertNumber(607)", "Delete SimpleName: BigDecimal(608)", "Delete SimpleType: BigDecimal(609)", "Delete SimpleName: value(610)", "Delete SingleVariableDeclaration(611)", "Delete SimpleName: SqlTypeUtil(612)", "Delete SimpleName: isApproximateNumeric(613)", "Delete SimpleName: dataType(614)", "Delete MethodInvocation(615)", "Delete NumberLiteral: 0(616)", "Delete ReturnStatement(617)", "Delete Block(618)", "Delete IfStatement(619)", "Delete SimpleName: BigDecimal(620)", "Delete SimpleType: BigDecimal(621)", "Delete SimpleName: roundedValue(622)", "Delete SimpleName: value(623)", "Delete SimpleName: setScale(624)", "Delete SimpleName: dataType(625)", "Delete SimpleName: getScale(626)", "Delete MethodInvocation(627)", "Delete QualifiedName: RoundingMode.HALF_UP(628)", "Delete MethodInvocation(629)", "Delete VariableDeclarationFragment(630)", "Delete VariableDeclarationStatement(631)", "Delete SimpleName: roundedValue(632)", "Delete SimpleName: precision(633)", "Delete MethodInvocation(634)", "Delete SimpleName: dataType(635)", "Delete SimpleName: getPrecision(636)", "Delete MethodInvocation(637)", "Delete InfixExpression: >(638)", "Delete SimpleName: setInfinity(639)", "Delete SimpleName: roundedValue(640)", "Delete SimpleName: signum(641)", "Delete MethodInvocation(642)", "Delete MethodInvocation(643)", "Delete ExpressionStatement(644)", "Delete NumberLiteral: 0(645)", "Delete ReturnStatement(646)", "Delete Block(647)", "Delete IfStatement(648)", "Delete SimpleName: coordinate(649)", "Delete SimpleName: factory(650)", "Delete SimpleName: getRexBuilder(651)", "Delete MethodInvocation(652)", "Delete SimpleName: makeExactLiteral(653)", "Delete SimpleName: roundedValue(654)", "Delete SimpleName: dataType(655)", "Delete MethodInvocation(656)", "Delete Assignment: =(657)", "Delete ExpressionStatement(658)", "Delete SimpleName: value(659)", "Delete SimpleName: compareTo(660)", "Delete SimpleName: roundedValue(661)", "Delete MethodInvocation(662)", "Delete ReturnStatement(663)", "Delete Block(664)", "Delete MethodDeclaration(665)", "Delete TextElement:  true if this endpoint represents a closed (exact) bound; false if(666)", "Delete TextElement: open (strict)(667)", "Delete TagElement: @return(668)", "Delete Javadoc(669)", "Delete Modifier: public(670)", "Delete PrimitiveType: boolean(671)", "Delete SimpleName: isClosed(672)", "Delete SimpleName: strictness(673)", "Delete QualifiedName: SargStrictness.CLOSED(674)", "Delete InfixExpression: ==(675)", "Delete ReturnStatement(676)", "Delete Block(677)", "Delete MethodDeclaration(678)", "Delete TextElement:  opposite of isClosed(679)", "Delete TagElement: @return(680)", "Delete Javadoc(681)", "Delete Modifier: public(682)", "Delete PrimitiveType: boolean(683)", "Delete SimpleName: isOpen(684)", "Delete SimpleName: strictness(685)", "Delete QualifiedName: SargStrictness.OPEN(686)", "Delete InfixExpression: ==(687)", "Delete ReturnStatement(688)", "Delete Block(689)", "Delete MethodDeclaration(690)", "Delete TextElement:  false if this endpoint represents infinity (either positive or(691)", "Delete TextElement: negative); true if a finite coordinate(692)", "Delete TagElement: @return(693)", "Delete Javadoc(694)", "Delete Modifier: public(695)", "Delete PrimitiveType: boolean(696)", "Delete SimpleName: isFinite(697)", "Delete SimpleName: coordinate(698)", "Delete NullLiteral(699)", "Delete InfixExpression: !=(700)", "Delete ReturnStatement(701)", "Delete Block(702)", "Delete MethodDeclaration(703)", "Delete TextElement:  -1 for negative infinity, +1 for positive infinity, 0 for a(704)", "Delete TextElement: finite endpoint(705)", "Delete TagElement: @return(706)", "Delete Javadoc(707)", "Delete Modifier: public(708)", "Delete PrimitiveType: int(709)", "Delete SimpleName: getInfinitude(710)", "Delete SimpleName: isFinite(711)", "Delete MethodInvocation(712)", "Delete PrefixExpression: !(713)", "Delete SimpleName: boundType(714)", "Delete QualifiedName: SargBoundType.LOWER(715)", "Delete InfixExpression: ==(716)", "Delete NumberLiteral: 1(717)", "Delete PrefixExpression: -(718)", "Delete ReturnStatement(719)", "Delete Block(720)", "Delete NumberLiteral: 1(721)", "Delete ReturnStatement(722)", "Delete Block(723)", "Delete IfStatement(724)", "Delete Block(725)", "Delete NumberLiteral: 0(726)", "Delete ReturnStatement(727)", "Delete Block(728)", "Delete IfStatement(729)", "Delete Block(730)", "Delete MethodDeclaration(731)", "Delete TextElement:  coordinate of this endpoint(732)", "Delete TagElement: @return(733)", "Delete Javadoc(734)", "Delete Modifier: public(735)", "Delete SimpleName: RexNode(736)", "Delete SimpleType: RexNode(737)", "Delete SimpleName: getCoordinate(738)", "Delete SimpleName: coordinate(739)", "Delete ReturnStatement(740)", "Delete Block(741)", "Delete MethodDeclaration(742)", "Delete TextElement:  true if this endpoint has the null value for its coordinate(743)", "Delete TagElement: @return(744)", "Delete Javadoc(745)", "Delete Modifier: public(746)", "Delete PrimitiveType: boolean(747)", "Delete SimpleName: isNull(748)", "Delete SimpleName: isFinite(749)", "Delete MethodInvocation(750)", "Delete PrefixExpression: !(751)", "Delete BooleanLiteral: false(752)", "Delete ReturnStatement(753)", "Delete Block(754)", "Delete IfStatement(755)", "Delete SimpleName: RexLiteral(756)", "Delete SimpleName: isNullLiteral(757)", "Delete SimpleName: coordinate(758)", "Delete MethodInvocation(759)", "Delete ReturnStatement(760)", "Delete Block(761)", "Delete MethodDeclaration(762)", "Delete TextElement:  target datatype for coordinate(763)", "Delete TagElement: @return(764)", "Delete Javadoc(765)", "Delete Modifier: public(766)", "Delete SimpleName: RelDataType(767)", "Delete SimpleType: RelDataType(768)", "Delete SimpleName: getDataType(769)", "Delete SimpleName: dataType(770)", "Delete ReturnStatement(771)", "Delete Block(772)", "Delete MethodDeclaration(773)", "Delete TextElement:  boundary type this endpoint represents(774)", "Delete TagElement: @return(775)", "Delete Javadoc(776)", "Delete Modifier: public(777)", "Delete SimpleName: SargBoundType(778)", "Delete SimpleType: SargBoundType(779)", "Delete SimpleName: getBoundType(780)", "Delete SimpleName: boundType(781)", "Delete ReturnStatement(782)", "Delete Block(783)", "Delete MethodDeclaration(784)", "Delete TextElement: Tests whether this endpoint \"touches\" another one (not necessarily(785)", "Delete TextElement: overlapping). For example, the upper bound of the interval (1, 10)(786)", "Delete TextElement: touches the lower bound of the interval [10, 20), but not of the interval(787)", "Delete TextElement: (10, 20).(788)", "Delete TagElement(789)", "Delete SimpleName: other(790)", "Delete TextElement:  the other endpoint to test(791)", "Delete TagElement: @param(792)", "Delete TextElement:  true if touching; false if discontinuous(793)", "Delete TagElement: @return(794)", "Delete Javadoc(795)", "Delete Modifier: public(796)", "Delete PrimitiveType: boolean(797)", "Delete SimpleName: isTouching(798)", "Delete SimpleName: SargEndpoint(799)", "Delete SimpleType: SargEndpoint(800)", "Delete SimpleName: other(801)", "Delete SingleVariableDeclaration(802)", "Delete SimpleName: getDataType(803)", "Delete MethodInvocation(804)", "Delete SimpleName: other(805)", "Delete SimpleName: getDataType(806)", "Delete MethodInvocation(807)", "Delete InfixExpression: ==(808)", "Delete AssertStatement(809)", "Delete SimpleName: isFinite(810)", "Delete MethodInvocation(811)", "Delete PrefixExpression: !(812)", "Delete SimpleName: other(813)", "Delete SimpleName: isFinite(814)", "Delete MethodInvocation(815)", "Delete PrefixExpression: !(816)", "Delete InfixExpression: ||(817)", "Delete BooleanLiteral: false(818)", "Delete ReturnStatement(819)", "Delete Block(820)", "Delete IfStatement(821)", "Delete SimpleName: coordinate(822)", "Delete SimpleName: RexDynamicParam(823)", "Delete SimpleType: RexDynamicParam(824)", "Delete InstanceofExpression(825)", "Delete ParenthesizedExpression(826)", "Delete QualifiedName: other.coordinate(827)", "Delete SimpleName: RexDynamicParam(828)", "Delete SimpleType: RexDynamicParam(829)", "Delete InstanceofExpression(830)", "Delete ParenthesizedExpression(831)", "Delete InfixExpression: ||(832)", "Delete SimpleName: coordinate(833)", "Delete SimpleName: RexDynamicParam(834)", "Delete SimpleType: RexDynamicParam(835)", "Delete InstanceofExpression(836)", "Delete ParenthesizedExpression(837)", "Delete QualifiedName: other.coordinate(838)", "Delete SimpleName: RexDynamicParam(839)", "Delete SimpleType: RexDynamicParam(840)", "Delete InstanceofExpression(841)", "Delete ParenthesizedExpression(842)", "Delete InfixExpression: &&(843)", "Delete SimpleName: RexDynamicParam(844)", "Delete SimpleType: RexDynamicParam(845)", "Delete SimpleName: p1(846)", "Delete SimpleName: RexDynamicParam(847)", "Delete SimpleType: RexDynamicParam(848)", "Delete SimpleName: coordinate(849)", "Delete CastExpression(850)", "Delete VariableDeclarationFragment(851)", "Delete VariableDeclarationStatement(852)", "Delete SimpleName: RexDynamicParam(853)", "Delete SimpleType: RexDynamicParam(854)", "Delete SimpleName: p2(855)", "Delete SimpleName: RexDynamicParam(856)", "Delete SimpleType: RexDynamicParam(857)", "Delete QualifiedName: other.coordinate(858)", "Delete CastExpression(859)", "Delete VariableDeclarationFragment(860)", "Delete VariableDeclarationStatement(861)", "Delete SimpleName: p1(862)", "Delete SimpleName: getIndex(863)", "Delete MethodInvocation(864)", "Delete SimpleName: p2(865)", "Delete SimpleName: getIndex(866)", "Delete MethodInvocation(867)", "Delete InfixExpression: !=(868)", "Delete BooleanLiteral: false(869)", "Delete ReturnStatement(870)", "Delete Block(871)", "Delete IfStatement(872)", "Delete Block(873)", "Delete BooleanLiteral: false(874)", "Delete ReturnStatement(875)", "Delete Block(876)", "Delete IfStatement(877)", "Delete Block(878)", "Delete SimpleName: coordinate(879)", "Delete SimpleName: RexInputRef(880)", "Delete SimpleType: RexInputRef(881)", "Delete InstanceofExpression(882)", "Delete ParenthesizedExpression(883)", "Delete QualifiedName: other.coordinate(884)", "Delete SimpleName: RexInputRef(885)", "Delete SimpleType: RexInputRef(886)", "Delete InstanceofExpression(887)", "Delete ParenthesizedExpression(888)", "Delete InfixExpression: ||(889)", "Delete SimpleName: coordinate(890)", "Delete SimpleName: RexInputRef(891)", "Delete SimpleType: RexInputRef(892)", "Delete InstanceofExpression(893)", "Delete ParenthesizedExpression(894)", "Delete QualifiedName: other.coordinate(895)", "Delete SimpleName: RexInputRef(896)", "Delete SimpleType: RexInputRef(897)", "Delete InstanceofExpression(898)", "Delete ParenthesizedExpression(899)", "Delete InfixExpression: &&(900)", "Delete SimpleName: RexInputRef(901)", "Delete SimpleType: RexInputRef(902)", "Delete SimpleName: r1(903)", "Delete SimpleName: RexInputRef(904)", "Delete SimpleType: RexInputRef(905)", "Delete SimpleName: coordinate(906)", "Delete CastExpression(907)", "Delete VariableDeclarationFragment(908)", "Delete VariableDeclarationStatement(909)", "Delete SimpleName: RexInputRef(910)", "Delete SimpleType: RexInputRef(911)", "Delete SimpleName: r2(912)", "Delete SimpleName: RexInputRef(913)", "Delete SimpleType: RexInputRef(914)", "Delete QualifiedName: other.coordinate(915)", "Delete CastExpression(916)", "Delete VariableDeclarationFragment(917)", "Delete VariableDeclarationStatement(918)", "Delete SimpleName: r1(919)", "Delete SimpleName: getIndex(920)", "Delete MethodInvocation(921)", "Delete SimpleName: r2(922)", "Delete SimpleName: getIndex(923)", "Delete MethodInvocation(924)", "Delete InfixExpression: !=(925)", "Delete BooleanLiteral: false(926)", "Delete ReturnStatement(927)", "Delete Block(928)", "Delete IfStatement(929)", "Delete Block(930)", "Delete BooleanLiteral: false(931)", "Delete ReturnStatement(932)", "Delete Block(933)", "Delete IfStatement(934)", "Delete Block(935)", "Delete SimpleName: compareCoordinates(936)", "Delete SimpleName: coordinate(937)", "Delete QualifiedName: other.coordinate(938)", "Delete MethodInvocation(939)", "Delete NumberLiteral: 0(940)", "Delete InfixExpression: !=(941)", "Delete BooleanLiteral: false(942)", "Delete ReturnStatement(943)", "Delete Block(944)", "Delete IfStatement(945)", "Delete IfStatement(946)", "Delete IfStatement(947)", "Delete SimpleName: isClosed(948)", "Delete MethodInvocation(949)", "Delete SimpleName: other(950)", "Delete SimpleName: isClosed(951)", "Delete MethodInvocation(952)", "Delete InfixExpression: ||(953)", "Delete ReturnStatement(954)", "Delete Block(955)", "Delete MethodDeclaration(956)", "Delete Modifier: static(957)", "Delete PrimitiveType: int(958)", "Delete SimpleName: compareCoordinates(959)", "Delete SimpleName: RexNode(960)", "Delete SimpleType: RexNode(961)", "Delete SimpleName: coord1(962)", "Delete SingleVariableDeclaration(963)", "Delete SimpleName: RexNode(964)", "Delete SimpleType: RexNode(965)", "Delete SimpleName: coord2(966)", "Delete SingleVariableDeclaration(967)", "Delete SimpleName: coord1(968)", "Delete SimpleName: RexLiteral(969)", "Delete SimpleType: RexLiteral(970)", "Delete InstanceofExpression(971)", "Delete AssertStatement(972)", "Delete SimpleName: coord2(973)", "Delete SimpleName: RexLiteral(974)", "Delete SimpleType: RexLiteral(975)", "Delete InstanceofExpression(976)", "Delete AssertStatement(977)", "Delete PrimitiveType: boolean(978)", "Delete SimpleName: isNull1(979)", "Delete SimpleName: RexLiteral(980)", "Delete SimpleName: isNullLiteral(981)", "Delete SimpleName: coord1(982)", "Delete MethodInvocation(983)", "Delete VariableDeclarationFragment(984)", "Delete VariableDeclarationStatement(985)", "Delete PrimitiveType: boolean(986)", "Delete SimpleName: isNull2(987)", "Delete SimpleName: RexLiteral(988)", "Delete SimpleName: isNullLiteral(989)", "Delete SimpleName: coord2(990)", "Delete MethodInvocation(991)", "Delete VariableDeclarationFragment(992)", "Delete VariableDeclarationStatement(993)", "Delete SimpleName: isNull1(994)", "Delete SimpleName: isNull2(995)", "Delete InfixExpression: &&(996)", "Delete NumberLiteral: 0(997)", "Delete ReturnStatement(998)", "Delete Block(999)", "Delete SimpleName: isNull1(1000)", "Delete NumberLiteral: 1(1001)", "Delete PrefixExpression: -(1002)", "Delete ReturnStatement(1003)", "Delete Block(1004)", "Delete SimpleName: isNull2(1005)", "Delete NumberLiteral: 1(1006)", "Delete ReturnStatement(1007)", "Delete Block(1008)", "Delete SimpleName: RexLiteral(1009)", "Delete SimpleType: RexLiteral(1010)", "Delete SimpleName: lit1(1011)", "Delete SimpleName: RexLiteral(1012)", "Delete SimpleType: RexLiteral(1013)", "Delete SimpleName: coord1(1014)", "Delete CastExpression(1015)", "Delete VariableDeclarationFragment(1016)", "Delete VariableDeclarationStatement(1017)", "Delete SimpleName: RexLiteral(1018)", "Delete SimpleType: RexLiteral(1019)", "Delete SimpleName: lit2(1020)", "Delete SimpleName: RexLiteral(1021)", "Delete SimpleType: RexLiteral(1022)", "Delete SimpleName: coord2(1023)", "Delete CastExpression(1024)", "Delete VariableDeclarationFragment(1025)", "Delete VariableDeclarationStatement(1026)", "Delete SimpleName: lit1(1027)", "Delete SimpleName: getValue(1028)", "Delete MethodInvocation(1029)", "Delete SimpleName: compareTo(1030)", "Delete SimpleName: lit2(1031)", "Delete SimpleName: getValue(1032)", "Delete MethodInvocation(1033)", "Delete MethodInvocation(1034)", "Delete ReturnStatement(1035)", "Delete Block(1036)", "Delete IfStatement(1037)", "Delete IfStatement(1038)", "Delete IfStatement(1039)", "Delete Block(1040)", "Delete MethodDeclaration(1041)", "Delete Modifier: public(1042)", "Delete SimpleName: String(1043)", "Delete SimpleType: String(1044)", "Delete SimpleName: toString(1045)", "Delete SimpleName: isFinite(1046)", "Delete MethodInvocation(1047)", "Delete PrefixExpression: !(1048)", "Delete SimpleName: boundType(1049)", "Delete QualifiedName: SargBoundType.LOWER(1050)", "Delete InfixExpression: ==(1051)", "Delete StringLiteral: \"-infinity\"(1052)", "Delete ReturnStatement(1053)", "Delete Block(1054)", "Delete StringLiteral: \"+infinity\"(1055)", "Delete ReturnStatement(1056)", "Delete Block(1057)", "Delete IfStatement(1058)", "Delete Block(1059)", "Delete IfStatement(1060)", "Delete SimpleName: StringBuilder(1061)", "Delete SimpleType: StringBuilder(1062)", "Delete SimpleName: sb(1063)", "Delete SimpleName: StringBuilder(1064)", "Delete SimpleType: StringBuilder(1065)", "Delete ClassInstanceCreation(1066)", "Delete VariableDeclarationFragment(1067)", "Delete VariableDeclarationStatement(1068)", "Delete SimpleName: boundType(1069)", "Delete QualifiedName: SargBoundType.LOWER(1070)", "Delete InfixExpression: ==(1071)", "Delete SimpleName: isClosed(1072)", "Delete MethodInvocation(1073)", "Delete SimpleName: sb(1074)", "Delete SimpleName: append(1075)", "Delete StringLiteral: \">=\"(1076)", "Delete MethodInvocation(1077)", "Delete ExpressionStatement(1078)", "Delete Block(1079)", "Delete SimpleName: sb(1080)", "Delete SimpleName: append(1081)", "Delete StringLiteral: \">\"(1082)", "Delete MethodInvocation(1083)", "Delete ExpressionStatement(1084)", "Delete Block(1085)", "Delete IfStatement(1086)", "Delete Block(1087)", "Delete SimpleName: isClosed(1088)", "Delete MethodInvocation(1089)", "Delete SimpleName: sb(1090)", "Delete SimpleName: append(1091)", "Delete StringLiteral: \"<=\"(1092)", "Delete MethodInvocation(1093)", "Delete ExpressionStatement(1094)", "Delete Block(1095)", "Delete SimpleName: sb(1096)", "Delete SimpleName: append(1097)", "Delete StringLiteral: \"<\"(1098)", "Delete MethodInvocation(1099)", "Delete ExpressionStatement(1100)", "Delete Block(1101)", "Delete IfStatement(1102)", "Delete Block(1103)", "Delete IfStatement(1104)", "Delete SimpleName: sb(1105)", "Delete SimpleName: append(1106)", "Delete StringLiteral: \" \"(1107)", "Delete MethodInvocation(1108)", "Delete ExpressionStatement(1109)", "Delete SimpleName: sb(1110)", "Delete SimpleName: append(1111)", "Delete SimpleName: coordinate(1112)", "Delete MethodInvocation(1113)", "Delete ExpressionStatement(1114)", "Delete SimpleName: sb(1115)", "Delete SimpleName: toString(1116)", "Delete MethodInvocation(1117)", "Delete ReturnStatement(1118)", "Delete Block(1119)", "Delete MethodDeclaration(1120)", "Delete Modifier: public(1121)", "Delete PrimitiveType: int(1122)", "Delete SimpleName: compareTo(1123)", "Delete SimpleName: SargEndpoint(1124)", "Delete SimpleType: SargEndpoint(1125)", "Delete SimpleName: other(1126)", "Delete SingleVariableDeclaration(1127)", "Delete SimpleName: getInfinitude(1128)", "Delete MethodInvocation(1129)", "Delete SimpleName: other(1130)", "Delete SimpleName: getInfinitude(1131)", "Delete MethodInvocation(1132)", "Delete InfixExpression: !=(1133)", "Delete SimpleName: getInfinitude(1134)", "Delete MethodInvocation(1135)", "Delete SimpleName: other(1136)", "Delete SimpleName: getInfinitude(1137)", "Delete MethodInvocation(1138)", "Delete InfixExpression: -(1139)", "Delete ReturnStatement(1140)", "Delete Block(1141)", "Delete IfStatement(1142)", "Delete SimpleName: isFinite(1143)", "Delete MethodInvocation(1144)", "Delete PrefixExpression: !(1145)", "Delete NumberLiteral: 0(1146)", "Delete ReturnStatement(1147)", "Delete Block(1148)", "Delete IfStatement(1149)", "Delete PrimitiveType: int(1150)", "Delete SimpleName: c(1151)", "Delete SimpleName: compareCoordinates(1152)", "Delete SimpleName: getCoordinate(1153)", "Delete MethodInvocation(1154)", "Delete SimpleName: other(1155)", "Delete SimpleName: getCoordinate(1156)", "Delete MethodInvocation(1157)", "Delete MethodInvocation(1158)", "Delete VariableDeclarationFragment(1159)", "Delete VariableDeclarationStatement(1160)", "Delete SimpleName: c(1161)", "Delete NumberLiteral: 0(1162)", "Delete InfixExpression: !=(1163)", "Delete SimpleName: c(1164)", "Delete ReturnStatement(1165)", "Delete Block(1166)", "Delete IfStatement(1167)", "Delete SimpleName: getStrictnessSign(1168)", "Delete MethodInvocation(1169)", "Delete SimpleName: other(1170)", "Delete SimpleName: getStrictnessSign(1171)", "Delete MethodInvocation(1172)", "Delete InfixExpression: -(1173)", "Delete ReturnStatement(1174)", "Delete Block(1175)", "Delete MethodDeclaration(1176)", "Delete TextElement:  SargStrictness of this bound(1177)", "Delete TagElement: @return(1178)", "Delete Javadoc(1179)", "Delete Modifier: public(1180)", "Delete SimpleName: SargStrictness(1181)", "Delete SimpleType: SargStrictness(1182)", "Delete SimpleName: getStrictness(1183)", "Delete SimpleName: strictness(1184)", "Delete ReturnStatement(1185)", "Delete Block(1186)", "Delete MethodDeclaration(1187)", "Delete TextElement:  complement of SargStrictness of this bound(1188)", "Delete TagElement: @return(1189)", "Delete Javadoc(1190)", "Delete Modifier: public(1191)", "Delete SimpleName: SargStrictness(1192)", "Delete SimpleType: SargStrictness(1193)", "Delete SimpleName: getStrictnessComplement(1194)", "Delete SimpleName: strictness(1195)", "Delete QualifiedName: SargStrictness.OPEN(1196)", "Delete InfixExpression: ==(1197)", "Delete ParenthesizedExpression(1198)", "Delete QualifiedName: SargStrictness.CLOSED(1199)", "Delete QualifiedName: SargStrictness.OPEN(1200)", "Delete ConditionalExpression(1201)", "Delete ReturnStatement(1202)", "Delete Block(1203)", "Delete MethodDeclaration(1204)", "Delete TextElement:  -1 for infinitesimally below (open upper bound, strictly less(1205)", "Delete TextElement: than), 0 for exact equality (closed bound), 1 for infinitesimally above(1206)", "Delete TextElement: (open lower bound, strictly greater than)(1207)", "Delete TagElement: @return(1208)", "Delete Javadoc(1209)", "Delete Modifier: public(1210)", "Delete PrimitiveType: int(1211)", "Delete SimpleName: getStrictnessSign(1212)", "Delete SimpleName: strictness(1213)", "Delete QualifiedName: SargStrictness.CLOSED(1214)", "Delete InfixExpression: ==(1215)", "Delete NumberLiteral: 0(1216)", "Delete ReturnStatement(1217)", "Delete Block(1218)", "Delete SimpleName: boundType(1219)", "Delete QualifiedName: SargBoundType.LOWER(1220)", "Delete InfixExpression: ==(1221)", "Delete NumberLiteral: 1(1222)", "Delete ReturnStatement(1223)", "Delete Block(1224)", "Delete NumberLiteral: 1(1225)", "Delete PrefixExpression: -(1226)", "Delete ReturnStatement(1227)", "Delete Block(1228)", "Delete IfStatement(1229)", "Delete Block(1230)", "Delete IfStatement(1231)", "Delete Block(1232)", "Delete MethodDeclaration(1233)", "Delete Modifier: public(1234)", "Delete PrimitiveType: boolean(1235)", "Delete SimpleName: equals(1236)", "Delete SimpleName: Object(1237)", "Delete SimpleType: Object(1238)", "Delete SimpleName: other(1239)", "Delete SingleVariableDeclaration(1240)", "Delete SimpleName: other(1241)", "Delete SimpleName: SargEndpoint(1242)", "Delete SimpleType: SargEndpoint(1243)", "Delete InstanceofExpression(1244)", "Delete ParenthesizedExpression(1245)", "Delete PrefixExpression: !(1246)", "Delete BooleanLiteral: false(1247)", "Delete ReturnStatement(1248)", "Delete Block(1249)", "Delete IfStatement(1250)", "Delete SimpleName: compareTo(1251)", "Delete SimpleName: SargEndpoint(1252)", "Delete SimpleType: SargEndpoint(1253)", "Delete SimpleName: other(1254)", "Delete CastExpression(1255)", "Delete MethodInvocation(1256)", "Delete NumberLiteral: 0(1257)", "Delete InfixExpression: ==(1258)", "Delete ReturnStatement(1259)", "Delete Block(1260)", "Delete MethodDeclaration(1261)", "Delete Modifier: public(1262)", "Delete PrimitiveType: int(1263)", "Delete SimpleName: hashCode(1264)", "Delete SimpleName: toString(1265)", "Delete MethodInvocation(1266)", "Delete SimpleName: hashCode(1267)", "Delete MethodInvocation(1268)", "Delete ReturnStatement(1269)", "Delete Block(1270)", "Delete MethodDeclaration(1271)", "Delete TypeDeclaration: class(1272)"]}}, {"SargExpr_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.reltype", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.rex"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL TextElement:  datatype for coordinates of search domain", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: SargIntervalSequence", "DEL MethodDeclaration", "DEL SimpleName: SargFactory", "DEL SimpleName: SargIntervalSequence", "DEL Modifier: public", "DEL SimpleType: SargFactory", "DEL TagElement: @param", "DEL TextElement: <p>TODO jvs 17-Jan-2006: add binding for dynamic params so they can be", "DEL TagElement: @return", "DEL TextElement:  immutable ordered sequence of disjoint intervals", "DEL TextElement: Resolves this expression into a fixed ", "DEL SimpleName: getFactory", "DEL SimpleType: String", "DEL TagElement: @return", "DEL SimpleName: RelDataType", "DEL TextElement: Resolves the complement of this expression into a fixed ", "DEL TextElement:  receives dynamic parameter references", "DEL SimpleName: SargIntervalSequence", "DEL TextElement: a RelNode digest.", "DEL SimpleName: SargExpr", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: dynamicParams", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL TextElement:  the factory which produced this expression", "DEL TextElement: Collects all dynamic parameters referenced by this expression.", "DEL TypeDeclaration: interface", "DEL TextElement: SargExpr represents an expression defining a possibly non-contiguous search", "DEL Javadoc", "DEL TagElement", "DEL TextElement: evaluated as well", "DEL SimpleType: RelDataType", "DEL TagElement", "DEL ParameterizedType: Set<RexDynamicParam>", "DEL TextElement:  immutable ordered sequence of disjoint intervals", "DEL TextElement: .", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: Set", "DEL SimpleName: String", "DEL SimpleName: RexDynamicParam", "DEL TagElement", "DEL SimpleName: dynamicParams", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleName: evaluate", "DEL PrimitiveType: void", "DEL TextElement: Overrides the default Object.toString. The result must be safe for use in", "DEL Javadoc", "DEL TextElement: .", "DEL SimpleName: collectDynamicParams", "DEL MethodDeclaration", "DEL Javadoc", "DEL Javadoc", "DEL SimpleType: RexDynamicParam", "DEL MethodDeclaration", "DEL SimpleName: SargIntervalSequence", "DEL TagElement: @return", "DEL Javadoc", "DEL SingleVariableDeclaration", "DEL SimpleName: evaluateComplemented", "DEL SimpleName: getDataType", "DEL MethodDeclaration", "DEL TagElement: @link", "DEL SimpleType: Set", "DEL TextElement: subset of a scalar domain of a given datatype.", "DEL MethodDeclaration", "DEL TagElement", "DEL SimpleName: toString"]}]}}, {"SargExpr_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.eigenbase.reltype(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.eigenbase.rex(6)", "Delete ImportDeclaration(7)", "Delete TextElement: SargExpr represents an expression defining a possibly non-contiguous search(8)", "Delete TextElement: subset of a scalar domain of a given datatype.(9)", "Delete TagElement(10)", "Delete Javadoc(11)", "Delete Modifier: public(12)", "Delete SimpleName: SargExpr(13)", "Delete TextElement: Overrides the default Object.toString. The result must be safe for use in(14)", "Delete TextElement: a RelNode digest.(15)", "Delete TagElement(16)", "Delete Javadoc(17)", "Delete SimpleName: String(18)", "Delete SimpleType: String(19)", "Delete SimpleName: toString(20)", "Delete MethodDeclaration(21)", "Delete TextElement:  datatype for coordinates of search domain(22)", "Delete TagElement: @return(23)", "Delete Javadoc(24)", "Delete SimpleName: RelDataType(25)", "Delete SimpleType: RelDataType(26)", "Delete SimpleName: getDataType(27)", "Delete MethodDeclaration(28)", "Delete TextElement: Resolves this expression into a fixed (29)", "Delete SimpleName: SargIntervalSequence(30)", "Delete TagElement: @link(31)", "Delete TextElement: .(32)", "Delete TextElement: <p>TODO jvs 17-Jan-2006: add binding for dynamic params so they can be(33)", "Delete TextElement: evaluated as well(34)", "Delete TagElement(35)", "Delete TextElement:  immutable ordered sequence of disjoint intervals(36)", "Delete TagElement: @return(37)", "Delete Javadoc(38)", "Delete SimpleName: SargIntervalSequence(39)", "Delete SimpleType: SargIntervalSequence(40)", "Delete SimpleName: evaluate(41)", "Delete MethodDeclaration(42)", "Delete TextElement: Resolves the complement of this expression into a fixed (43)", "Delete SimpleName: SargIntervalSequence(44)", "Delete TagElement: @link(45)", "Delete TextElement: .(46)", "Delete TagElement(47)", "Delete TextElement:  immutable ordered sequence of disjoint intervals(48)", "Delete TagElement: @return(49)", "Delete Javadoc(50)", "Delete SimpleName: SargIntervalSequence(51)", "Delete SimpleType: SargIntervalSequence(52)", "Delete SimpleName: evaluateComplemented(53)", "Delete MethodDeclaration(54)", "Delete TextElement:  the factory which produced this expression(55)", "Delete TagElement: @return(56)", "Delete Javadoc(57)", "Delete SimpleName: SargFactory(58)", "Delete SimpleType: SargFactory(59)", "Delete SimpleName: getFactory(60)", "Delete MethodDeclaration(61)", "Delete TextElement: Collects all dynamic parameters referenced by this expression.(62)", "Delete TagElement(63)", "Delete SimpleName: dynamicParams(64)", "Delete TextElement:  receives dynamic parameter references(65)", "Delete TagElement: @param(66)", "Delete Javadoc(67)", "Delete PrimitiveType: void(68)", "Delete SimpleName: collectDynamicParams(69)", "Delete SimpleName: Set(70)", "Delete SimpleType: Set(71)", "Delete SimpleName: RexDynamicParam(72)", "Delete SimpleType: RexDynamicParam(73)", "Delete ParameterizedType: Set<RexDynamicParam>(74)", "Delete SimpleName: dynamicParams(75)", "Delete SingleVariableDeclaration(76)", "Delete MethodDeclaration(77)", "Delete TypeDeclaration: interface(78)"]}}, {"SargFactory_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.reltype"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.rex", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sql", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL SimpleName: setOp", "DEL SingleVariableDeclaration", "DEL TextElement:  if true, the analyzer restricts the types of predicates", "DEL TextElement: the range [lowerRexInputIdx, upperRexInputIdx) as", "DEL ThisExpression", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: setOp", "DEL Modifier: public", "DEL TagElement: @param", "DEL SimpleName: SargSetExpr", "DEL SimpleName: dataType", "DEL TagElement: @param", "DEL TextElement:  new analyzer for rex expressions", "DEL SimpleName: dataType", "DEL ReturnStatement", "DEL SimpleName: dataType", "DEL SimpleName: rexNull", "DEL ClassInstanceCreation", "DEL TextElement: the same RexInputRef, more than one range predicate, and", "DEL SimpleType: RexNode", "DEL SimpleName: nullSemantics", "DEL TagElement: @return", "DEL SimpleName: dataType", "DEL ExpressionStatement", "DEL TextElement:  datatype for domain", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL Modifier: public", "DEL ReturnStatement", "DEL TextElement: SqlNullSemantics.NULL_MATCHES_NOTHING.", "DEL SimpleName: simpleMode", "DEL Block", "DEL SimpleName: RelDataType", "DEL SimpleName: RexBuilder", "DEL TagElement: @param", "DEL TextElement:  if &ge; 0, treat RexInputRefs whose index is within", "DEL SimpleName: dataType", "DEL TextElement:     set operator", "DEL SimpleName: SargMutableEndpoint", "DEL Modifier: public", "DEL SimpleName: lowerRexInputIdx", "DEL TextElement: recomposing sargs into equivalent rex trees", "DEL TextElement: the null value", "DEL SimpleName: rexNull", "DEL SimpleType: SargIntervalExpr", "DEL SimpleType: SargSetExpr", "DEL TextElement: Creates a new endpoint. Initially, the endpoint represents a lower bound", "DEL Modifier: private", "DEL TagElement: @link", "DEL SimpleName: RexNode", "DEL VariableDeclarationFragment", "DEL SimpleName: SqlNullSemantics", "DEL SimpleType: RexNode", "DEL TagElement", "DEL SimpleName: SargFactory", "DEL SimpleName: newRexAnalyzer", "DEL TagElement: @return", "DEL Block", "DEL TextElement:  RexBuilder used by this factory", "DEL SimpleType: RelDataType", "DEL SimpleName: dataType", "DEL ClassInstanceCreation", "DEL SimpleName: simpleMode", "DEL MethodDeclaration", "DEL TextElement: Creates a new interval expression. The interval starts out as unbounded", "DEL TagElement: @param", "DEL SimpleName: lowerRexInputIdx", "DEL SimpleName: rexNull", "DEL TextElement: (meaning it includes every non-null value of the datatype), with", "DEL SimpleType: SargMutableEndpoint", "DEL TagElement: @param", "DEL Modifier: public", "DEL TagElement: @return", "DEL SimpleType: SargIntervalExpr", "DEL SimpleType: SargRexAnalyzer", "DEL SimpleName: SargRexAnalyzer", "DEL SimpleName: newIntervalExpr", "DEL TagElement: @return", "DEL MethodDeclaration", "DEL SimpleName: upperRexInputIdx", "DEL SimpleName: newEndpoint", "DEL SimpleName: RelDataType", "DEL TagElement", "DEL TextElement: Creates a new unbounded interval expression with non-default null", "DEL TagElement", "DEL TextElement:  new analyzer for rex expressions", "DEL Block", "DEL SimpleName: SargSetOperator", "DEL PrimitiveType: boolean", "DEL SimpleName: rexBuilder", "DEL Javadoc", "DEL Modifier: public", "DEL ThisExpression", "DEL TextElement: the range [lowerRexInputIdx, upperRexInputIdx) as", "DEL ReturnStatement", "DEL TextElement: , needed", "DEL SimpleType: RexBuilder", "DEL SimpleName: nullSemantics", "DEL Block", "DEL SimpleName: newSetExpr", "DEL SimpleName: SargRexAnalyzer", "DEL SimpleType: RexBuilder", "DEL Modifier: public", "DEL ThisExpression", "DEL SimpleType: RelDataType", "DEL Block", "DEL TextElement: Creates a new set expression, initially with no children.", "DEL SimpleName: rexBuilder", "DEL SimpleName: SargRexAnalyzer", "DEL SimpleName: upperRexInputIdx", "DEL SingleVariableDeclaration", "DEL Modifier: final", "DEL TextElement: coordinates in expressions", "DEL SimpleType: SargSetOperator", "DEL TagElement: @param", "DEL BooleanLiteral: true", "DEL SimpleName: dataType", "DEL SimpleType: RexBuilder", "DEL SimpleName: dataType", "DEL SimpleName: SargIntervalExpr", "DEL Assignment: =", "DEL Javadoc", "DEL SimpleName: newRexAnalyzer", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleType: SargRexAnalyzer", "DEL SimpleType: SargMutableEndpoint", "DEL TextElement: SargFactory creates new instances of various sarg-related objects.", "DEL TagElement", "DEL TagElement: @param", "DEL FieldDeclaration", "DEL SimpleName: lowerRexInputIdx", "DEL SingleVariableDeclaration", "DEL TextElement:  new analyzer for rex expressions", "DEL SimpleName: newRexAnalyzer", "DEL MethodInvocation", "DEL Modifier: final", "DEL SingleVariableDeclaration", "DEL SimpleType: SargRexAnalyzer", "DEL SimpleName: getRexBuilder", "DEL PrimitiveType: int", "DEL TextElement:  datatype for domain", "DEL Javadoc", "DEL SimpleName: nullSemantics", "DEL SimpleName: SargRexAnalyzer", "DEL Modifier: public", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: SargFactory", "DEL Modifier: public", "DEL SimpleName: RelDataType", "DEL Block", "DEL Javadoc", "DEL ReturnStatement", "DEL SimpleName: rexBuilder", "DEL TextElement:  null semantics governing searches on this interval", "DEL SimpleName: RexBuilder", "DEL SimpleName: simpleMode", "DEL TextElement: internally in the sarg representation, and also for", "DEL SimpleType: SargSetExpr", "DEL Block", "DEL MethodInvocation", "DEL ThisExpression", "DEL Javadoc", "DEL Modifier: private", "DEL SimpleName: RexNode", "DEL ThisExpression", "DEL SimpleType: SqlNullSemantics", "DEL ReturnStatement", "DEL SimpleName: dataType", "DEL SimpleName: newIntervalExpr", "DEL MethodDeclaration", "DEL SimpleName: upperRexInputIdx", "DEL SimpleName: SargRexAnalyzer", "DEL TextElement:  if &ge; 0, treat RexInputRefs whose index is within", "DEL SimpleName: rexBuilder", "DEL TextElement: Creates a new SargFactory.", "DEL SimpleName: newIntervalExpr", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL ThisExpression", "DEL PrimitiveType: int", "DEL FieldAccess", "DEL TagElement", "DEL Javadoc", "DEL ClassInstanceCreation", "DEL SimpleType: RelDataType", "DEL ThisExpression", "DEL TextElement: coordinates in expressions", "DEL BooleanLiteral: false", "DEL SimpleName: SargSetExpr", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL Modifier: public", "DEL SimpleName: setOp", "DEL SimpleName: SargMutableEndpoint", "DEL ReturnStatement", "DEL SimpleName: SargRexAnalyzer", "DEL TextElement: it allows; the following are disallowed - conjuntions on", "DEL TextElement:       datatype for domain", "DEL MethodDeclaration", "DEL Javadoc", "DEL TextElement:  new endpoint", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: rexBuilder", "DEL Javadoc", "DEL SimpleName: constantNull", "DEL Block", "DEL SimpleType: SargRexAnalyzer", "DEL SingleVariableDeclaration", "DEL SimpleType: SargRexAnalyzer", "DEL SimpleType: RelDataType", "DEL TextElement: semantics.", "DEL SimpleName: rexBuilder", "DEL ReturnStatement", "DEL SimpleName: RexBuilder", "DEL ClassInstanceCreation", "DEL SimpleName: dataType", "DEL TextElement:  the null literal, which can be used to represent a range matching", "DEL ClassInstanceCreation", "DEL TagElement: @return", "DEL Javadoc", "DEL MethodDeclaration", "DEL TagElement: @param", "DEL MethodDeclaration", "DEL TextElement: of negative infinity.", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: SargIntervalExpr", "DEL TextElement: all disjunctions", "DEL TagElement", "DEL SimpleName: SargIntervalExpr", "DEL TagElement: @return", "DEL SimpleName: RexNode", "DEL SimpleName: dataType", "DEL SingleVariableDeclaration", "DEL SimpleName: newNullLiteral", "DEL TextElement:  factory for instances of ", "DEL TypeDeclaration: class", "DEL Assignment: =", "DEL TextElement:  datatype for domain", "DEL FieldDeclaration", "DEL QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING", "DEL SimpleName: RelDataType", "DEL SimpleType: SargIntervalExpr", "DEL Modifier: public", "DEL SimpleName: rexBuilder", "DEL SimpleName: dataType", "DEL SimpleType: SargRexAnalyzer"]}]}}, {"SargFactory_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.eigenbase.reltype(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.eigenbase.rex(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.eigenbase.sql(6)", "Delete ImportDeclaration(7)", "Delete TextElement: SargFactory creates new instances of various sarg-related objects.(8)", "Delete TagElement(9)", "Delete Javadoc(10)", "Delete Modifier: public(11)", "Delete SimpleName: SargFactory(12)", "Delete Modifier: private(13)", "Delete Modifier: final(14)", "Delete SimpleName: RexBuilder(15)", "Delete SimpleType: RexBuilder(16)", "Delete SimpleName: rexBuilder(17)", "Delete VariableDeclarationFragment(18)", "Delete FieldDeclaration(19)", "Delete Modifier: private(20)", "Delete Modifier: final(21)", "Delete SimpleName: RexNode(22)", "Delete SimpleType: RexNode(23)", "Delete SimpleName: rexNull(24)", "Delete VariableDeclarationFragment(25)", "Delete FieldDeclaration(26)", "Delete TextElement: Creates a new SargFactory.(27)", "Delete TagElement(28)", "Delete SimpleName: rexBuilder(29)", "Delete TextElement:  factory for instances of (30)", "Delete SimpleName: RexNode(31)", "Delete TagElement: @link(32)", "Delete TextElement: , needed(33)", "Delete TextElement: internally in the sarg representation, and also for(34)", "Delete TextElement: recomposing sargs into equivalent rex trees(35)", "Delete TagElement: @param(36)", "Delete Javadoc(37)", "Delete Modifier: public(38)", "Delete SimpleName: SargFactory(39)", "Delete SimpleName: RexBuilder(40)", "Delete SimpleType: RexBuilder(41)", "Delete SimpleName: rexBuilder(42)", "Delete SingleVariableDeclaration(43)", "Delete ThisExpression(44)", "Delete SimpleName: rexBuilder(45)", "Delete FieldAccess(46)", "Delete SimpleName: rexBuilder(47)", "Delete Assignment: =(48)", "Delete ExpressionStatement(49)", "Delete SimpleName: rexNull(50)", "Delete SimpleName: rexBuilder(51)", "Delete SimpleName: constantNull(52)", "Delete MethodInvocation(53)", "Delete Assignment: =(54)", "Delete ExpressionStatement(55)", "Delete Block(56)", "Delete MethodDeclaration(57)", "Delete TextElement: Creates a new endpoint. Initially, the endpoint represents a lower bound(58)", "Delete TextElement: of negative infinity.(59)", "Delete TagElement(60)", "Delete SimpleName: dataType(61)", "Delete TextElement:  datatype for domain(62)", "Delete TagElement: @param(63)", "Delete TextElement:  new endpoint(64)", "Delete TagElement: @return(65)", "Delete Javadoc(66)", "Delete Modifier: public(67)", "Delete SimpleName: SargMutableEndpoint(68)", "Delete SimpleType: SargMutableEndpoint(69)", "Delete SimpleName: newEndpoint(70)", "Delete SimpleName: RelDataType(71)", "Delete SimpleType: RelDataType(72)", "Delete SimpleName: dataType(73)", "Delete SingleVariableDeclaration(74)", "Delete SimpleName: SargMutableEndpoint(75)", "Delete SimpleType: SargMutableEndpoint(76)", "Delete ThisExpression(77)", "Delete SimpleName: dataType(78)", "Delete ClassInstanceCreation(79)", "Delete ReturnStatement(80)", "Delete Block(81)", "Delete MethodDeclaration(82)", "Delete TextElement: Creates a new interval expression. The interval starts out as unbounded(83)", "Delete TextElement: (meaning it includes every non-null value of the datatype), with(84)", "Delete TextElement: SqlNullSemantics.NULL_MATCHES_NOTHING.(85)", "Delete TagElement(86)", "Delete SimpleName: dataType(87)", "Delete TextElement:  datatype for domain(88)", "Delete TagElement: @param(89)", "Delete Javadoc(90)", "Delete Modifier: public(91)", "Delete SimpleName: SargIntervalExpr(92)", "Delete SimpleType: SargIntervalExpr(93)", "Delete SimpleName: newIntervalExpr(94)", "Delete SimpleName: RelDataType(95)", "Delete SimpleType: RelDataType(96)", "Delete SimpleName: dataType(97)", "Delete SingleVariableDeclaration(98)", "Delete SimpleName: newIntervalExpr(99)", "Delete SimpleName: dataType(100)", "Delete QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING(101)", "Delete MethodInvocation(102)", "Delete ReturnStatement(103)", "Delete Block(104)", "Delete MethodDeclaration(105)", "Delete TextElement: Creates a new unbounded interval expression with non-default null(106)", "Delete TextElement: semantics.(107)", "Delete TagElement(108)", "Delete SimpleName: dataType(109)", "Delete TextElement:       datatype for domain(110)", "Delete TagElement: @param(111)", "Delete SimpleName: nullSemantics(112)", "Delete TextElement:  null semantics governing searches on this interval(113)", "Delete TagElement: @param(114)", "Delete Javadoc(115)", "Delete Modifier: public(116)", "Delete SimpleName: SargIntervalExpr(117)", "Delete SimpleType: SargIntervalExpr(118)", "Delete SimpleName: newIntervalExpr(119)", "Delete SimpleName: RelDataType(120)", "Delete SimpleType: RelDataType(121)", "Delete SimpleName: dataType(122)", "Delete SingleVariableDeclaration(123)", "Delete SimpleName: SqlNullSemantics(124)", "Delete SimpleType: SqlNullSemantics(125)", "Delete SimpleName: nullSemantics(126)", "Delete SingleVariableDeclaration(127)", "Delete SimpleName: SargIntervalExpr(128)", "Delete SimpleType: SargIntervalExpr(129)", "Delete ThisExpression(130)", "Delete SimpleName: dataType(131)", "Delete SimpleName: nullSemantics(132)", "Delete ClassInstanceCreation(133)", "Delete ReturnStatement(134)", "Delete Block(135)", "Delete MethodDeclaration(136)", "Delete TextElement: Creates a new set expression, initially with no children.(137)", "Delete TagElement(138)", "Delete SimpleName: dataType(139)", "Delete TextElement:  datatype for domain(140)", "Delete TagElement: @param(141)", "Delete SimpleName: setOp(142)", "Delete TextElement:     set operator(143)", "Delete TagElement: @param(144)", "Delete Javadoc(145)", "Delete Modifier: public(146)", "Delete SimpleName: SargSetExpr(147)", "Delete SimpleType: SargSetExpr(148)", "Delete SimpleName: newSetExpr(149)", "Delete SimpleName: RelDataType(150)", "Delete SimpleType: RelDataType(151)", "Delete SimpleName: dataType(152)", "Delete SingleVariableDeclaration(153)", "Delete SimpleName: SargSetOperator(154)", "Delete SimpleType: SargSetOperator(155)", "Delete SimpleName: setOp(156)", "Delete SingleVariableDeclaration(157)", "Delete SimpleName: SargSetExpr(158)", "Delete SimpleType: SargSetExpr(159)", "Delete ThisExpression(160)", "Delete SimpleName: dataType(161)", "Delete SimpleName: setOp(162)", "Delete ClassInstanceCreation(163)", "Delete ReturnStatement(164)", "Delete Block(165)", "Delete MethodDeclaration(166)", "Delete TextElement:  new analyzer for rex expressions(167)", "Delete TagElement: @return(168)", "Delete Javadoc(169)", "Delete Modifier: public(170)", "Delete SimpleName: SargRexAnalyzer(171)", "Delete SimpleType: SargRexAnalyzer(172)", "Delete SimpleName: newRexAnalyzer(173)", "Delete SimpleName: SargRexAnalyzer(174)", "Delete SimpleType: SargRexAnalyzer(175)", "Delete ThisExpression(176)", "Delete BooleanLiteral: false(177)", "Delete ClassInstanceCreation(178)", "Delete ReturnStatement(179)", "Delete Block(180)", "Delete MethodDeclaration(181)", "Delete SimpleName: simpleMode(182)", "Delete TextElement:  if true, the analyzer restricts the types of predicates(183)", "Delete TextElement: it allows; the following are disallowed - conjuntions on(184)", "Delete TextElement: the same RexInputRef, more than one range predicate, and(185)", "Delete TextElement: all disjunctions(186)", "Delete TagElement: @param(187)", "Delete TextElement:  new analyzer for rex expressions(188)", "Delete TagElement: @return(189)", "Delete Javadoc(190)", "Delete Modifier: public(191)", "Delete SimpleName: SargRexAnalyzer(192)", "Delete SimpleType: SargRexAnalyzer(193)", "Delete SimpleName: newRexAnalyzer(194)", "Delete PrimitiveType: boolean(195)", "Delete SimpleName: simpleMode(196)", "Delete SingleVariableDeclaration(197)", "Delete SimpleName: SargRexAnalyzer(198)", "Delete SimpleType: SargRexAnalyzer(199)", "Delete ThisExpression(200)", "Delete SimpleName: simpleMode(201)", "Delete ClassInstanceCreation(202)", "Delete ReturnStatement(203)", "Delete Block(204)", "Delete MethodDeclaration(205)", "Delete SimpleName: lowerRexInputIdx(206)", "Delete TextElement:  if &ge; 0, treat RexInputRefs whose index is within(207)", "Delete TextElement: the range [lowerRexInputIdx, upperRexInputIdx) as(208)", "Delete TextElement: coordinates in expressions(209)", "Delete TagElement: @param(210)", "Delete SimpleName: upperRexInputIdx(211)", "Delete TextElement:  if &ge; 0, treat RexInputRefs whose index is within(212)", "Delete TextElement: the range [lowerRexInputIdx, upperRexInputIdx) as(213)", "Delete TextElement: coordinates in expressions(214)", "Delete TagElement: @param(215)", "Delete TextElement:  new analyzer for rex expressions(216)", "Delete TagElement: @return(217)", "Delete Javadoc(218)", "Delete Modifier: public(219)", "Delete SimpleName: SargRexAnalyzer(220)", "Delete SimpleType: SargRexAnalyzer(221)", "Delete SimpleName: newRexAnalyzer(222)", "Delete PrimitiveType: int(223)", "Delete SimpleName: lowerRexInputIdx(224)", "Delete SingleVariableDeclaration(225)", "Delete PrimitiveType: int(226)", "Delete SimpleName: upperRexInputIdx(227)", "Delete SingleVariableDeclaration(228)", "Delete SimpleName: SargRexAnalyzer(229)", "Delete SimpleType: SargRexAnalyzer(230)", "Delete ThisExpression(231)", "Delete BooleanLiteral: true(232)", "Delete SimpleName: lowerRexInputIdx(233)", "Delete SimpleName: upperRexInputIdx(234)", "Delete ClassInstanceCreation(235)", "Delete ReturnStatement(236)", "Delete Block(237)", "Delete MethodDeclaration(238)", "Delete TextElement:  the null literal, which can be used to represent a range matching(239)", "Delete TextElement: the null value(240)", "Delete TagElement: @return(241)", "Delete Javadoc(242)", "Delete Modifier: public(243)", "Delete SimpleName: RexNode(244)", "Delete SimpleType: RexNode(245)", "Delete SimpleName: newNullLiteral(246)", "Delete SimpleName: rexNull(247)", "Delete ReturnStatement(248)", "Delete Block(249)", "Delete MethodDeclaration(250)", "Delete TextElement:  RexBuilder used by this factory(251)", "Delete TagElement: @return(252)", "Delete Javadoc(253)", "Delete Modifier: public(254)", "Delete SimpleName: RexBuilder(255)", "Delete SimpleType: RexBuilder(256)", "Delete SimpleName: getRexBuilder(257)", "Delete SimpleName: rexBuilder(258)", "Delete ReturnStatement(259)", "Delete Block(260)", "Delete MethodDeclaration(261)", "Delete TypeDeclaration: class(262)"]}}, {"SargInterval_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.eigenbase.sarg"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.reltype"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL SimpleName: getLowerBound", "DEL TagElement", "DEL SimpleName: getDataType", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleType: SargIntervalBase", "DEL TextElement: Creates a SargInterval.", "DEL BooleanLiteral: false", "DEL SimpleType: SargInterval", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: lowerBound", "DEL TextElement: open with the same value (the null value, but it doesn't really matter).", "DEL MethodInvocation", "DEL TextElement: . An empty interval is represented by setting both bounds to be", "DEL TextElement: <li>[3,5] represents all values between 3 and 5 inclusive", "DEL SimpleName: factory", "DEL InfixExpression: ==", "DEL TextElement: </ul>", "DEL MethodInvocation", "DEL SimpleName: RelDataType", "DEL SimpleName: other", "DEL SimpleName: copyFrom", "DEL SimpleName: getLowerBound", "DEL SimpleName: getLowerBound", "DEL TextElement: case of a single point. The endpoints are represented via instances of ", "DEL Block", "DEL Javadoc", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: SargInterval", "DEL TagElement: @link", "DEL SimpleName: compareTo", "DEL SimpleName: getDataType", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: SargInterval", "DEL TextElement: domain of a given datatype (including null values). It consists of two", "DEL SimpleName: other", "DEL SimpleName: contains", "DEL SimpleName: SargIntervalBase", "DEL TextElement: <li>(-infinity,5] represents all values less than or equal to 5", "DEL TextElement: <li>(3,5] represents all values greater than 3 and less than or equal to 5", "DEL TextElement: <li>[3,5) represents all values greatern than or equal to 3 and less than 5", "DEL SimpleType: RelDataType", "DEL Block", "DEL SimpleName: SargInterval", "DEL InfixExpression: ==", "DEL MethodInvocation", "DEL SimpleName: other", "DEL SimpleName: copyFrom", "DEL SimpleName: getUpperBound", "DEL MethodInvocation", "DEL SimpleName: upperBound", "DEL ReturnStatement", "DEL AssertStatement", "DEL SimpleName: factory", "DEL TextElement: <p>Instances of SargInterval are immutable after construction.", "DEL InfixExpression: <", "DEL SimpleType: SargIntervalBase", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL SingleVariableDeclaration", "DEL SimpleName: compareTo", "DEL SimpleName: getUpperBound", "DEL TextElement: -infinity. So the interval [null,7) would include the null value and any", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: SargEndpoint", "DEL Block", "DEL TextElement: for closed bounds, e.g.", "DEL TextElement: <p>For string representation, we use the standard mathematical bracketed", "DEL PrimitiveType: void", "DEL TextElement: <li>[5,5] represents the single point with coordinate 5", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL PrimitiveType: boolean", "DEL ReturnStatement", "DEL SimpleName: other", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: getDataType", "DEL TypeDeclaration: class", "DEL SimpleName: SargFactory", "DEL SuperConstructorInvocation", "DEL SimpleName: other", "DEL NumberLiteral: 0", "DEL TextElement: <li>(3,+infinity) represents all values greater than 3", "DEL SimpleName: other", "DEL SimpleName: copyFrom", "DEL ExpressionStatement", "DEL BooleanLiteral: true", "DEL TextElement: <li>(3,5) represents all values between 3 and 5 exclusive", "DEL TextElement: SargInterval represents a single contiguous search interval over a scalar", "DEL SimpleName: getUpperBound", "DEL AssertStatement", "DEL ReturnStatement", "DEL SimpleName: SargIntervalBase", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: other", "DEL SimpleName: dataType", "DEL TextElement: <p>Null values are ordered lower than any non-null value but higher than", "DEL TextElement: <ul>", "DEL SimpleName: getDataType", "DEL SimpleName: other", "DEL TextElement: endpoints: a lower bound and an upper bound, which may be the same for the", "DEL SimpleType: SargFactory", "DEL SimpleName: dataType", "DEL TextElement: non-null value less than 7.", "DEL TextElement: bounds pair notation, with round brackets for open bounds and square brackets", "DEL Modifier: public", "DEL SingleVariableDeclaration"]}]}}, {"SargInterval_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.eigenbase.reltype(2)", "Delete ImportDeclaration(3)", "Delete TextElement: SargInterval represents a single contiguous search interval over a scalar(4)", "Delete TextElement: domain of a given datatype (including null values). It consists of two(5)", "Delete TextElement: endpoints: a lower bound and an upper bound, which may be the same for the(6)", "Delete TextElement: case of a single point. The endpoints are represented via instances of (7)", "Delete SimpleName: SargEndpoint(8)", "Delete TagElement: @link(9)", "Delete TextElement: . An empty interval is represented by setting both bounds to be(10)", "Delete TextElement: open with the same value (the null value, but it doesn't really matter).(11)", "Delete TextElement: <p>Instances of SargInterval are immutable after construction.(12)", "Delete TextElement: <p>For string representation, we use the standard mathematical bracketed(13)", "Delete TextElement: bounds pair notation, with round brackets for open bounds and square brackets(14)", "Delete TextElement: for closed bounds, e.g.(15)", "Delete TextElement: <ul>(16)", "Delete TextElement: <li>[3,5] represents all values between 3 and 5 inclusive(17)", "Delete TextElement: <li>(3,5] represents all values greater than 3 and less than or equal to 5(18)", "Delete TextElement: <li>[3,5) represents all values greatern than or equal to 3 and less than 5(19)", "Delete TextElement: <li>(3,5) represents all values between 3 and 5 exclusive(20)", "Delete TextElement: <li>(3,+infinity) represents all values greater than 3(21)", "Delete TextElement: <li>(-infinity,5] represents all values less than or equal to 5(22)", "Delete TextElement: <li>[5,5] represents the single point with coordinate 5(23)", "Delete TextElement: </ul>(24)", "Delete TextElement: <p>Null values are ordered lower than any non-null value but higher than(25)", "Delete TextElement: -infinity. So the interval [null,7) would include the null value and any(26)", "Delete TextElement: non-null value less than 7.(27)", "Delete TagElement(28)", "Delete Javadoc(29)", "Delete Modifier: public(30)", "Delete SimpleName: SargInterval(31)", "Delete SimpleName: SargIntervalBase(32)", "Delete SimpleType: SargIntervalBase(33)", "Delete TextElement: Creates a SargInterval.(34)", "Delete TagElement(35)", "Delete Javadoc(36)", "Delete SimpleName: SargInterval(37)", "Delete SimpleName: SargFactory(38)", "Delete SimpleType: SargFactory(39)", "Delete SimpleName: factory(40)", "Delete SingleVariableDeclaration(41)", "Delete SimpleName: RelDataType(42)", "Delete SimpleType: RelDataType(43)", "Delete SimpleName: dataType(44)", "Delete SingleVariableDeclaration(45)", "Delete SimpleName: factory(46)", "Delete SimpleName: dataType(47)", "Delete SuperConstructorInvocation(48)", "Delete Block(49)", "Delete MethodDeclaration(50)", "Delete PrimitiveType: void(51)", "Delete SimpleName: copyFrom(52)", "Delete SimpleName: SargIntervalBase(53)", "Delete SimpleType: SargIntervalBase(54)", "Delete SimpleName: other(55)", "Delete SingleVariableDeclaration(56)", "Delete SimpleName: getDataType(57)", "Delete MethodInvocation(58)", "Delete SimpleName: other(59)", "Delete SimpleName: getDataType(60)", "Delete MethodInvocation(61)", "Delete InfixExpression: ==(62)", "Delete AssertStatement(63)", "Delete SimpleName: lowerBound(64)", "Delete SimpleName: copyFrom(65)", "Delete SimpleName: other(66)", "Delete SimpleName: getLowerBound(67)", "Delete MethodInvocation(68)", "Delete MethodInvocation(69)", "Delete ExpressionStatement(70)", "Delete SimpleName: upperBound(71)", "Delete SimpleName: copyFrom(72)", "Delete SimpleName: other(73)", "Delete SimpleName: getUpperBound(74)", "Delete MethodInvocation(75)", "Delete MethodInvocation(76)", "Delete ExpressionStatement(77)", "Delete Block(78)", "Delete MethodDeclaration(79)", "Delete PrimitiveType: boolean(80)", "Delete SimpleName: contains(81)", "Delete SimpleName: SargInterval(82)", "Delete SimpleType: SargInterval(83)", "Delete SimpleName: other(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: getDataType(86)", "Delete MethodInvocation(87)", "Delete SimpleName: other(88)", "Delete SimpleName: getDataType(89)", "Delete MethodInvocation(90)", "Delete InfixExpression: ==(91)", "Delete AssertStatement(92)", "Delete SimpleName: getLowerBound(93)", "Delete MethodInvocation(94)", "Delete SimpleName: compareTo(95)", "Delete SimpleName: other(96)", "Delete SimpleName: getLowerBound(97)", "Delete MethodInvocation(98)", "Delete MethodInvocation(99)", "Delete NumberLiteral: 0(100)", "Delete InfixExpression: >(101)", "Delete BooleanLiteral: false(102)", "Delete ReturnStatement(103)", "Delete Block(104)", "Delete IfStatement(105)", "Delete SimpleName: getUpperBound(106)", "Delete MethodInvocation(107)", "Delete SimpleName: compareTo(108)", "Delete SimpleName: other(109)", "Delete SimpleName: getUpperBound(110)", "Delete MethodInvocation(111)", "Delete MethodInvocation(112)", "Delete NumberLiteral: 0(113)", "Delete InfixExpression: <(114)", "Delete BooleanLiteral: false(115)", "Delete ReturnStatement(116)", "Delete Block(117)", "Delete IfStatement(118)", "Delete BooleanLiteral: true(119)", "Delete ReturnStatement(120)", "Delete Block(121)", "Delete MethodDeclaration(122)", "Delete TypeDeclaration: class(123)"]}}, {"SargIntervalBase_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.eigenbase.sarg"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.reltype", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.rex"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: strictness", "DEL MethodInvocation", "DEL SimpleName: strictness", "DEL SingleVariableDeclaration", "DEL SimpleName: lowerBound", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL SimpleName: setLower", "DEL MethodInvocation", "DEL Assignment: =", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: upperBound", "DEL Javadoc", "DEL Javadoc", "DEL SimpleName: coordinate", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: upperBound", "DEL TextElement:  strictness", "DEL SimpleName: setUnconstrained", "DEL SimpleName: getDataType", "DEL TagElement: @return", "DEL SimpleName: newIntervalExpr", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement: Sets this interval to unconstrained (matching everything, including", "DEL Javadoc", "DEL ThisExpression", "DEL TagElement: @link", "DEL SimpleName: coordinate", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: RelDataType", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: newEndpoint", "DEL Modifier: abstract", "DEL MethodInvocation", "DEL QualifiedName: SargStrictness.CLOSED", "DEL SimpleName: StringBuilder", "DEL TypeDeclaration: class", "DEL QualifiedName: SargStrictness.OPEN", "DEL SimpleName: upperBound", "DEL SimpleName: isClosed", "DEL TextElement:  coordinate of point to set, or null for the null value", "DEL SimpleType: StringBuilder", "DEL ReturnStatement", "DEL SimpleType: SargMutableEndpoint", "DEL QualifiedName: SargStrictness.CLOSED", "DEL PrefixExpression: !", "DEL SimpleName: lowerBound", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: getDataType", "DEL SimpleType: StringBuilder", "DEL TextElement: interval's lower bound", "DEL TagElement: @link", "DEL IfStatement", "DEL MethodInvocation", "DEL TagElement: @see", "DEL ExpressionStatement", "DEL TagElement: @param", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Javadoc", "DEL SimpleName: getUpperBound", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL InfixExpression: &&", "DEL TagElement", "DEL MethodInvocation", "DEL SimpleType: RexNode", "DEL SimpleName: dataType", "DEL ExpressionStatement", "DEL SimpleName: endpoint", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: setFinite", "DEL SimpleName: isEmpty", "DEL SimpleName: setPoint", "DEL MethodDeclaration", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: isClosed", "DEL MethodDeclaration", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleName: SargMutableEndpoint", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: upperBound", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL TagElement: @return", "DEL FieldAccess", "DEL Block", "DEL StringLiteral: \"(\"", "DEL ExpressionStatement", "DEL SimpleName: setEmpty", "DEL SimpleName: SargEndpoint", "DEL SimpleName: newEndpoint", "DEL SimpleName: strictness", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL Javadoc", "DEL TagElement: @return", "DEL SimpleName: sb", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL ReturnStatement", "DEL SimpleName: endpoint", "DEL MethodDeclaration", "DEL SimpleName: setNull", "DEL Block", "DEL SimpleName: sb", "DEL TagElement: @return", "DEL TextElement: Sets this interval to represent a single point (possibly the null value).", "DEL MethodInvocation", "DEL SimpleName: append", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: factory", "DEL QualifiedName: SargBoundType.UPPER", "DEL IfStatement", "DEL SimpleName: lowerBound", "DEL MethodInvocation", "DEL SimpleName: upperBound", "DEL SimpleName: lowerBound", "DEL Javadoc", "DEL SimpleType: StringBuilder", "DEL SimpleName: SargStrictness", "DEL SimpleName: SargFactory", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL Block", "DEL SimpleName: RexNode", "DEL SimpleName: SargFactory", "DEL Block", "DEL SimpleName: isClosed", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: isNull", "DEL SimpleType: SargEndpoint", "DEL TagElement", "DEL SimpleName: setUpper", "DEL SimpleName: RexNode", "DEL SimpleName: sb", "DEL SimpleName: dataType", "DEL ReturnStatement", "DEL SimpleName: strictness", "DEL SimpleName: factory", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL VariableDeclarationFragment", "DEL TextElement: Sets this interval to represent a single point matching the null value.", "DEL SimpleName: isFinite", "DEL Javadoc", "DEL SimpleName: isClosed", "DEL Modifier: public", "DEL Block", "DEL Javadoc", "DEL TextElement:  an immutable reference to the endpoint representing this", "DEL SimpleName: toString", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleType: RexNode", "DEL PrimitiveType: void", "DEL SimpleName: coordinate", "DEL TextElement: Sets this interval to empty (matching nothing at all).", "DEL SimpleName: sb", "DEL TextElement: null).", "DEL TextElement:  the factory which produced this expression", "DEL SimpleType: RexNode", "DEL SimpleName: isUnconstrained", "DEL TagElement", "DEL SimpleName: factory", "DEL SimpleName: setPoint", "DEL TagElement: @param", "DEL ReturnStatement", "DEL StringLiteral: \"]\"", "DEL Modifier: public", "DEL SimpleName: SargIntervalExpr", "DEL SimpleName: sb", "DEL TextElement:  whether this represents a single point", "DEL MethodInvocation", "DEL SimpleName: upperBound", "DEL SimpleName: SargInterval", "DEL MethodInvocation", "DEL SimpleName: upperBound", "DEL TextElement:  whether this represents the universal set", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: setUpper", "DEL MethodDeclaration", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: append", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Assignment: =", "DEL SimpleName: isNull", "DEL SimpleName: upperBound", "DEL SimpleName: isPoint", "DEL Modifier: public", "DEL SimpleName: isClosed", "DEL SimpleName: unsetLower", "DEL SimpleName: sb", "DEL SimpleType: SargEndpoint", "DEL ExpressionStatement", "DEL SimpleType: SargMutableEndpoint", "DEL Block", "DEL SimpleName: unsetUpper", "DEL SimpleName: sb", "DEL SingleVariableDeclaration", "DEL MemberRef", "DEL SimpleName: SargFactory", "DEL PrefixExpression: -", "DEL SimpleName: upperBound", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL ExpressionStatement", "DEL TagElement", "DEL Modifier: public", "DEL SimpleName: factory", "DEL Assignment: =", "DEL QualifiedName: SargStrictness.OPEN", "DEL Modifier: public", "DEL TagElement: @return", "DEL Modifier: protected", "DEL SimpleName: SargMutableEndpoint", "DEL SimpleName: StringBuilder", "DEL SimpleName: endpoint", "DEL SimpleName: isEmpty", "DEL PrimitiveType: boolean", "DEL Block", "DEL SimpleName: RelDataType", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: SargStrictness", "DEL MethodInvocation", "DEL TagElement: @param", "DEL Modifier: final", "DEL StringLiteral: \", \"", "DEL SimpleName: isFinite", "DEL TextElement:  boundary strictness", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: SargEndpoint", "DEL ExpressionStatement", "DEL TextElement:  whether this represents a (non-empty, non-point) range interval", "DEL SimpleName: SargStrictness", "DEL SimpleName: strictness", "DEL PrimitiveType: void", "DEL SimpleName: getFactory", "DEL Block", "DEL TextElement: Removes the upper bound for this interval, setting it to +infinity.", "DEL SimpleName: unsetLower", "DEL MethodInvocation", "DEL TextElement: .", "DEL ReturnStatement", "DEL SimpleName: lowerBound", "DEL ExpressionStatement", "DEL SimpleName: coordinate", "DEL PrimitiveType: void", "DEL TextElement: Removes the lower bound for this interval, setting it to -infinity.", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Javadoc", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: getLowerBound", "DEL Modifier: public", "DEL SimpleName: unsetLower", "DEL SimpleName: lowerBound", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL TagElement: @return", "DEL SimpleName: setLower", "DEL FieldDeclaration", "DEL Modifier: protected", "DEL SimpleType: SargEndpoint", "DEL Block", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: isClosed", "DEL SimpleName: lowerBound", "DEL SimpleName: sb", "DEL Block", "DEL Javadoc", "DEL SimpleName: coordinate", "DEL SimpleName: RexNode", "DEL SimpleName: coordinate", "DEL SimpleName: dataType", "DEL SimpleType: SargFactory", "DEL Block", "DEL TextElement: Sets the upper bound for this interval.", "DEL Javadoc", "DEL PrimitiveType: void", "DEL InfixExpression: &&", "DEL MethodDeclaration", "DEL SimpleName: printBound", "DEL SimpleName: factory", "DEL MethodInvocation", "DEL Modifier: final", "DEL Javadoc", "DEL MethodInvocation", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: printBound", "DEL SimpleName: setUpper", "DEL VariableDeclarationFragment", "DEL SimpleName: unsetUpper", "DEL SimpleName: lowerBound", "DEL StringLiteral: \")\"", "DEL ExpressionStatement", "DEL SimpleName: isEmpty", "DEL TagElement", "DEL MethodDeclaration", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleType: SargFactory", "DEL SimpleName: strictness", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL SimpleType: SargStrictness", "DEL InfixExpression: &&", "DEL SimpleName: lowerBound", "DEL SimpleName: factory", "DEL PrefixExpression: !", "DEL PrimitiveType: boolean", "DEL TextElement:  an immutable reference to the endpoint representing this", "DEL SimpleName: factory", "DEL SimpleName: factory", "DEL SimpleName: lowerBound", "DEL Block", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: toString", "DEL TextElement: interval's upper bound", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: newNullLiteral", "DEL SimpleName: SargEndpoint", "DEL Modifier: final", "DEL MethodDeclaration", "DEL SimpleName: append", "DEL SimpleName: sb", "DEL PrimitiveType: void", "DEL SimpleName: setInfinity", "DEL SimpleName: coordinate", "DEL SimpleName: lowerBound", "DEL MethodInvocation", "DEL SimpleName: isTouching", "DEL Javadoc", "DEL SimpleName: setLower", "DEL TextElement:  and ", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL Javadoc", "DEL TagElement", "DEL SimpleName: lowerBound", "DEL PrefixExpression: !", "DEL SimpleName: newNullLiteral", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: append", "DEL SimpleType: RelDataType", "DEL SimpleName: upperBound", "DEL TextElement:  whether this represents the empty interval", "DEL SimpleName: setInfinity", "DEL SimpleName: SargIntervalBase", "DEL MethodInvocation", "DEL TagElement", "DEL StringLiteral: \"[\"", "DEL SimpleName: upperBound", "DEL SimpleName: SargIntervalBase", "DEL TagElement", "DEL TextElement:  coordinate of point to set", "DEL SimpleType: String", "DEL SimpleName: sb", "DEL TextElement:  coordinate of point to set, must not be null", "DEL TextElement: Sets the lower bound for this interval.", "DEL Block", "DEL SimpleName: getCoordinate", "DEL PrimitiveType: void", "DEL SimpleName: isRange", "DEL PrimitiveType: void", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL Javadoc", "DEL MethodInvocation", "DEL TextElement: SargIntervalBase is a common base for ", "DEL SimpleName: SargFactory", "DEL Block", "DEL SimpleName: toString", "DEL SimpleName: lowerBound", "DEL SimpleName: coordinate", "DEL IfStatement", "DEL SimpleName: factory", "DEL SimpleName: isPoint", "DEL PrefixExpression: !", "DEL SimpleType: RelDataType", "DEL MethodInvocation", "DEL SimpleName: newNullLiteral", "DEL FieldDeclaration", "DEL TagElement: @param", "DEL MethodInvocation", "DEL TagElement: @return", "DEL SimpleName: coordinate", "DEL MethodInvocation", "DEL SimpleName: unsetUpper", "DEL NumberLiteral: 1", "DEL SimpleName: factory", "DEL ExpressionStatement", "DEL PrimitiveType: void", "DEL TagElement: @param", "DEL SimpleName: append", "DEL Block", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: printBound", "DEL SimpleType: SargFactory", "DEL IfStatement", "DEL MethodInvocation", "DEL TagElement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: upperBound", "DEL SimpleName: isPoint", "DEL SimpleName: endpoint", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SimpleName: setFinite", "DEL ReturnStatement", "DEL SimpleName: isFinite", "DEL SimpleName: sb", "DEL Modifier: protected"]}]}}, {"SargIntervalBase_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.eigenbase.reltype(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.eigenbase.rex(4)", "Delete ImportDeclaration(5)", "Delete TextElement: SargIntervalBase is a common base for (6)", "Delete SimpleName: SargInterval(7)", "Delete TagElement: @link(8)", "Delete TextElement:  and (9)", "Delete SimpleName: SargIntervalExpr(10)", "Delete TagElement: @link(11)", "Delete TextElement: .(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete Modifier: public(15)", "Delete Modifier: abstract(16)", "Delete SimpleName: SargIntervalBase(17)", "Delete Modifier: protected(18)", "Delete Modifier: final(19)", "Delete SimpleName: SargFactory(20)", "Delete SimpleType: SargFactory(21)", "Delete SimpleName: factory(22)", "Delete VariableDeclarationFragment(23)", "Delete FieldDeclaration(24)", "Delete Modifier: protected(25)", "Delete Modifier: final(26)", "Delete SimpleName: SargMutableEndpoint(27)", "Delete SimpleType: SargMutableEndpoint(28)", "Delete SimpleName: lowerBound(29)", "Delete VariableDeclarationFragment(30)", "Delete FieldDeclaration(31)", "Delete Modifier: protected(32)", "Delete Modifier: final(33)", "Delete SimpleName: SargMutableEndpoint(34)", "Delete SimpleType: SargMutableEndpoint(35)", "Delete SimpleName: upperBound(36)", "Delete VariableDeclarationFragment(37)", "Delete FieldDeclaration(38)", "Delete SimpleName: SargFactory(39)", "Delete SimpleName: newIntervalExpr(40)", "Delete MemberRef(41)", "Delete TagElement: @see(42)", "Delete Javadoc(43)", "Delete SimpleName: SargIntervalBase(44)", "Delete SimpleName: SargFactory(45)", "Delete SimpleType: SargFactory(46)", "Delete SimpleName: factory(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: RelDataType(49)", "Delete SimpleType: RelDataType(50)", "Delete SimpleName: dataType(51)", "Delete SingleVariableDeclaration(52)", "Delete ThisExpression(53)", "Delete SimpleName: factory(54)", "Delete FieldAccess(55)", "Delete SimpleName: factory(56)", "Delete Assignment: =(57)", "Delete ExpressionStatement(58)", "Delete SimpleName: lowerBound(59)", "Delete SimpleName: factory(60)", "Delete SimpleName: newEndpoint(61)", "Delete SimpleName: dataType(62)", "Delete MethodInvocation(63)", "Delete Assignment: =(64)", "Delete ExpressionStatement(65)", "Delete SimpleName: upperBound(66)", "Delete SimpleName: factory(67)", "Delete SimpleName: newEndpoint(68)", "Delete SimpleName: dataType(69)", "Delete MethodInvocation(70)", "Delete Assignment: =(71)", "Delete ExpressionStatement(72)", "Delete SimpleName: unsetLower(73)", "Delete MethodInvocation(74)", "Delete ExpressionStatement(75)", "Delete SimpleName: unsetUpper(76)", "Delete MethodInvocation(77)", "Delete ExpressionStatement(78)", "Delete Block(79)", "Delete MethodDeclaration(80)", "Delete TextElement:  an immutable reference to the endpoint representing this(81)", "Delete TextElement: interval's lower bound(82)", "Delete TagElement: @return(83)", "Delete Javadoc(84)", "Delete Modifier: public(85)", "Delete SimpleName: SargEndpoint(86)", "Delete SimpleType: SargEndpoint(87)", "Delete SimpleName: getLowerBound(88)", "Delete SimpleName: lowerBound(89)", "Delete ReturnStatement(90)", "Delete Block(91)", "Delete MethodDeclaration(92)", "Delete TextElement:  an immutable reference to the endpoint representing this(93)", "Delete TextElement: interval's upper bound(94)", "Delete TagElement: @return(95)", "Delete Javadoc(96)", "Delete Modifier: public(97)", "Delete SimpleName: SargEndpoint(98)", "Delete SimpleType: SargEndpoint(99)", "Delete SimpleName: getUpperBound(100)", "Delete SimpleName: upperBound(101)", "Delete ReturnStatement(102)", "Delete Block(103)", "Delete MethodDeclaration(104)", "Delete TextElement:  whether this represents a single point(105)", "Delete TagElement: @return(106)", "Delete Javadoc(107)", "Delete Modifier: public(108)", "Delete PrimitiveType: boolean(109)", "Delete SimpleName: isPoint(110)", "Delete SimpleName: lowerBound(111)", "Delete SimpleName: isClosed(112)", "Delete MethodInvocation(113)", "Delete SimpleName: upperBound(114)", "Delete SimpleName: isClosed(115)", "Delete MethodInvocation(116)", "Delete SimpleName: lowerBound(117)", "Delete SimpleName: isTouching(118)", "Delete SimpleName: upperBound(119)", "Delete MethodInvocation(120)", "Delete InfixExpression: &&(121)", "Delete ReturnStatement(122)", "Delete Block(123)", "Delete MethodDeclaration(124)", "Delete TextElement:  whether this represents the empty interval(125)", "Delete TagElement: @return(126)", "Delete Javadoc(127)", "Delete Modifier: public(128)", "Delete PrimitiveType: boolean(129)", "Delete SimpleName: isEmpty(130)", "Delete SimpleName: lowerBound(131)", "Delete SimpleName: isClosed(132)", "Delete MethodInvocation(133)", "Delete PrefixExpression: !(134)", "Delete SimpleName: upperBound(135)", "Delete SimpleName: isClosed(136)", "Delete MethodInvocation(137)", "Delete PrefixExpression: !(138)", "Delete SimpleName: lowerBound(139)", "Delete SimpleName: isNull(140)", "Delete MethodInvocation(141)", "Delete SimpleName: upperBound(142)", "Delete SimpleName: isNull(143)", "Delete MethodInvocation(144)", "Delete InfixExpression: &&(145)", "Delete ReturnStatement(146)", "Delete Block(147)", "Delete MethodDeclaration(148)", "Delete TextElement:  whether this represents a (non-empty, non-point) range interval(149)", "Delete TagElement: @return(150)", "Delete Javadoc(151)", "Delete Modifier: public(152)", "Delete PrimitiveType: boolean(153)", "Delete SimpleName: isRange(154)", "Delete SimpleName: isPoint(155)", "Delete MethodInvocation(156)", "Delete PrefixExpression: !(157)", "Delete SimpleName: isEmpty(158)", "Delete MethodInvocation(159)", "Delete PrefixExpression: !(160)", "Delete InfixExpression: &&(161)", "Delete ReturnStatement(162)", "Delete Block(163)", "Delete MethodDeclaration(164)", "Delete TextElement:  whether this represents the universal set(165)", "Delete TagElement: @return(166)", "Delete Javadoc(167)", "Delete Modifier: public(168)", "Delete PrimitiveType: boolean(169)", "Delete SimpleName: isUnconstrained(170)", "Delete SimpleName: lowerBound(171)", "Delete SimpleName: isFinite(172)", "Delete MethodInvocation(173)", "Delete PrefixExpression: !(174)", "Delete SimpleName: upperBound(175)", "Delete SimpleName: isFinite(176)", "Delete MethodInvocation(177)", "Delete PrefixExpression: !(178)", "Delete InfixExpression: &&(179)", "Delete ReturnStatement(180)", "Delete Block(181)", "Delete MethodDeclaration(182)", "Delete TextElement:  the factory which produced this expression(183)", "Delete TagElement: @return(184)", "Delete Javadoc(185)", "Delete Modifier: public(186)", "Delete SimpleName: SargFactory(187)", "Delete SimpleType: SargFactory(188)", "Delete SimpleName: getFactory(189)", "Delete SimpleName: factory(190)", "Delete ReturnStatement(191)", "Delete Block(192)", "Delete MethodDeclaration(193)", "Delete TextElement: Sets this interval to represent a single point (possibly the null value).(194)", "Delete TagElement(195)", "Delete SimpleName: coordinate(196)", "Delete TextElement:  coordinate of point to set, or null for the null value(197)", "Delete TagElement: @param(198)", "Delete Javadoc(199)", "Delete PrimitiveType: void(200)", "Delete SimpleName: setPoint(201)", "Delete SimpleName: RexNode(202)", "Delete SimpleType: RexNode(203)", "Delete SimpleName: coordinate(204)", "Delete SingleVariableDeclaration(205)", "Delete SimpleName: setLower(206)", "Delete SimpleName: coordinate(207)", "Delete QualifiedName: SargStrictness.CLOSED(208)", "Delete MethodInvocation(209)", "Delete ExpressionStatement(210)", "Delete SimpleName: setUpper(211)", "Delete SimpleName: coordinate(212)", "Delete QualifiedName: SargStrictness.CLOSED(213)", "Delete MethodInvocation(214)", "Delete ExpressionStatement(215)", "Delete Block(216)", "Delete MethodDeclaration(217)", "Delete TextElement: Sets this interval to represent a single point matching the null value.(218)", "Delete TagElement(219)", "Delete Javadoc(220)", "Delete PrimitiveType: void(221)", "Delete SimpleName: setNull(222)", "Delete SimpleName: setPoint(223)", "Delete SimpleName: factory(224)", "Delete SimpleName: newNullLiteral(225)", "Delete MethodInvocation(226)", "Delete MethodInvocation(227)", "Delete ExpressionStatement(228)", "Delete Block(229)", "Delete MethodDeclaration(230)", "Delete TextElement: Sets the lower bound for this interval.(231)", "Delete TagElement(232)", "Delete SimpleName: coordinate(233)", "Delete TextElement:  coordinate of point to set, must not be null(234)", "Delete TagElement: @param(235)", "Delete SimpleName: strictness(236)", "Delete TextElement:  strictness(237)", "Delete TagElement: @param(238)", "Delete Javadoc(239)", "Delete PrimitiveType: void(240)", "Delete SimpleName: setLower(241)", "Delete SimpleName: RexNode(242)", "Delete SimpleType: RexNode(243)", "Delete SimpleName: coordinate(244)", "Delete SingleVariableDeclaration(245)", "Delete SimpleName: SargStrictness(246)", "Delete SimpleType: SargStrictness(247)", "Delete SimpleName: strictness(248)", "Delete SingleVariableDeclaration(249)", "Delete SimpleName: lowerBound(250)", "Delete SimpleName: setFinite(251)", "Delete QualifiedName: SargBoundType.LOWER(252)", "Delete SimpleName: strictness(253)", "Delete SimpleName: coordinate(254)", "Delete MethodInvocation(255)", "Delete ExpressionStatement(256)", "Delete Block(257)", "Delete MethodDeclaration(258)", "Delete TextElement: Sets the upper bound for this interval.(259)", "Delete TagElement(260)", "Delete SimpleName: coordinate(261)", "Delete TextElement:  coordinate of point to set(262)", "Delete TagElement: @param(263)", "Delete SimpleName: strictness(264)", "Delete TextElement:  boundary strictness(265)", "Delete TagElement: @param(266)", "Delete Javadoc(267)", "Delete PrimitiveType: void(268)", "Delete SimpleName: setUpper(269)", "Delete SimpleName: RexNode(270)", "Delete SimpleType: RexNode(271)", "Delete SimpleName: coordinate(272)", "Delete SingleVariableDeclaration(273)", "Delete SimpleName: SargStrictness(274)", "Delete SimpleType: SargStrictness(275)", "Delete SimpleName: strictness(276)", "Delete SingleVariableDeclaration(277)", "Delete SimpleName: upperBound(278)", "Delete SimpleName: setFinite(279)", "Delete QualifiedName: SargBoundType.UPPER(280)", "Delete SimpleName: strictness(281)", "Delete SimpleName: coordinate(282)", "Delete MethodInvocation(283)", "Delete ExpressionStatement(284)", "Delete Block(285)", "Delete MethodDeclaration(286)", "Delete TextElement: Removes the lower bound for this interval, setting it to -infinity.(287)", "Delete TagElement(288)", "Delete Javadoc(289)", "Delete PrimitiveType: void(290)", "Delete SimpleName: unsetLower(291)", "Delete SimpleName: lowerBound(292)", "Delete SimpleName: setInfinity(293)", "Delete NumberLiteral: 1(294)", "Delete PrefixExpression: -(295)", "Delete MethodInvocation(296)", "Delete ExpressionStatement(297)", "Delete Block(298)", "Delete MethodDeclaration(299)", "Delete TextElement: Removes the upper bound for this interval, setting it to +infinity.(300)", "Delete TagElement(301)", "Delete Javadoc(302)", "Delete PrimitiveType: void(303)", "Delete SimpleName: unsetUpper(304)", "Delete SimpleName: upperBound(305)", "Delete SimpleName: setInfinity(306)", "Delete NumberLiteral: 1(307)", "Delete MethodInvocation(308)", "Delete ExpressionStatement(309)", "Delete Block(310)", "Delete MethodDeclaration(311)", "Delete TextElement: Sets this interval to unconstrained (matching everything, including(312)", "Delete TextElement: null).(313)", "Delete TagElement(314)", "Delete Javadoc(315)", "Delete PrimitiveType: void(316)", "Delete SimpleName: setUnconstrained(317)", "Delete SimpleName: unsetLower(318)", "Delete MethodInvocation(319)", "Delete ExpressionStatement(320)", "Delete SimpleName: unsetUpper(321)", "Delete MethodInvocation(322)", "Delete ExpressionStatement(323)", "Delete Block(324)", "Delete MethodDeclaration(325)", "Delete TextElement: Sets this interval to empty (matching nothing at all).(326)", "Delete TagElement(327)", "Delete Javadoc(328)", "Delete PrimitiveType: void(329)", "Delete SimpleName: setEmpty(330)", "Delete SimpleName: setLower(331)", "Delete SimpleName: factory(332)", "Delete SimpleName: newNullLiteral(333)", "Delete MethodInvocation(334)", "Delete QualifiedName: SargStrictness.OPEN(335)", "Delete MethodInvocation(336)", "Delete ExpressionStatement(337)", "Delete SimpleName: setUpper(338)", "Delete SimpleName: factory(339)", "Delete SimpleName: newNullLiteral(340)", "Delete MethodInvocation(341)", "Delete QualifiedName: SargStrictness.OPEN(342)", "Delete MethodInvocation(343)", "Delete ExpressionStatement(344)", "Delete Block(345)", "Delete MethodDeclaration(346)", "Delete Modifier: public(347)", "Delete SimpleName: RelDataType(348)", "Delete SimpleType: RelDataType(349)", "Delete SimpleName: getDataType(350)", "Delete SimpleName: lowerBound(351)", "Delete SimpleName: getDataType(352)", "Delete MethodInvocation(353)", "Delete ReturnStatement(354)", "Delete Block(355)", "Delete MethodDeclaration(356)", "Delete Modifier: public(357)", "Delete SimpleName: String(358)", "Delete SimpleType: String(359)", "Delete SimpleName: toString(360)", "Delete SimpleName: StringBuilder(361)", "Delete SimpleType: StringBuilder(362)", "Delete SimpleName: sb(363)", "Delete SimpleName: StringBuilder(364)", "Delete SimpleType: StringBuilder(365)", "Delete ClassInstanceCreation(366)", "Delete VariableDeclarationFragment(367)", "Delete VariableDeclarationStatement(368)", "Delete SimpleName: lowerBound(369)", "Delete SimpleName: isClosed(370)", "Delete MethodInvocation(371)", "Delete SimpleName: sb(372)", "Delete SimpleName: append(373)", "Delete StringLiteral: \"[\"(374)", "Delete MethodInvocation(375)", "Delete ExpressionStatement(376)", "Delete Block(377)", "Delete SimpleName: sb(378)", "Delete SimpleName: append(379)", "Delete StringLiteral: \"(\"(380)", "Delete MethodInvocation(381)", "Delete ExpressionStatement(382)", "Delete Block(383)", "Delete IfStatement(384)", "Delete SimpleName: isEmpty(385)", "Delete MethodInvocation(386)", "Delete PrefixExpression: !(387)", "Delete SimpleName: printBound(388)", "Delete SimpleName: sb(389)", "Delete SimpleName: lowerBound(390)", "Delete MethodInvocation(391)", "Delete ExpressionStatement(392)", "Delete SimpleName: isPoint(393)", "Delete MethodInvocation(394)", "Delete Block(395)", "Delete SimpleName: sb(396)", "Delete SimpleName: append(397)", "Delete StringLiteral: \", \"(398)", "Delete MethodInvocation(399)", "Delete ExpressionStatement(400)", "Delete SimpleName: printBound(401)", "Delete SimpleName: sb(402)", "Delete SimpleName: upperBound(403)", "Delete MethodInvocation(404)", "Delete ExpressionStatement(405)", "Delete Block(406)", "Delete IfStatement(407)", "Delete Block(408)", "Delete IfStatement(409)", "Delete SimpleName: upperBound(410)", "Delete SimpleName: isClosed(411)", "Delete MethodInvocation(412)", "Delete SimpleName: sb(413)", "Delete SimpleName: append(414)", "Delete StringLiteral: \"]\"(415)", "Delete MethodInvocation(416)", "Delete ExpressionStatement(417)", "Delete Block(418)", "Delete SimpleName: sb(419)", "Delete SimpleName: append(420)", "Delete StringLiteral: \")\"(421)", "Delete MethodInvocation(422)", "Delete ExpressionStatement(423)", "Delete Block(424)", "Delete IfStatement(425)", "Delete SimpleName: sb(426)", "Delete SimpleName: toString(427)", "Delete MethodInvocation(428)", "Delete ReturnStatement(429)", "Delete Block(430)", "Delete MethodDeclaration(431)", "Delete Modifier: private(432)", "Delete PrimitiveType: void(433)", "Delete SimpleName: printBound(434)", "Delete SimpleName: StringBuilder(435)", "Delete SimpleType: StringBuilder(436)", "Delete SimpleName: sb(437)", "Delete SingleVariableDeclaration(438)", "Delete SimpleName: SargEndpoint(439)", "Delete SimpleType: SargEndpoint(440)", "Delete SimpleName: endpoint(441)", "Delete SingleVariableDeclaration(442)", "Delete SimpleName: endpoint(443)", "Delete SimpleName: isFinite(444)", "Delete MethodInvocation(445)", "Delete SimpleName: sb(446)", "Delete SimpleName: append(447)", "Delete SimpleName: endpoint(448)", "Delete SimpleName: getCoordinate(449)", "Delete MethodInvocation(450)", "Delete SimpleName: toString(451)", "Delete MethodInvocation(452)", "Delete MethodInvocation(453)", "Delete ExpressionStatement(454)", "Delete Block(455)", "Delete SimpleName: sb(456)", "Delete SimpleName: append(457)", "Delete SimpleName: endpoint(458)", "Delete MethodInvocation(459)", "Delete ExpressionStatement(460)", "Delete Block(461)", "Delete IfStatement(462)", "Delete Block(463)", "Delete MethodDeclaration(464)", "Delete TypeDeclaration: class(465)"]}}, {"SargIntervalExpr_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.eigenbase.sarg"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.reltype", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.rex"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sql", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL MethodInvocation", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: setLower", "DEL SimpleName: lowerBound", "DEL SimpleName: getCoordinate", "DEL SimpleName: seq", "DEL SimpleName: lowerBound", "DEL Modifier: public", "DEL SimpleName: originalInterval", "DEL SimpleName: isNull", "DEL Modifier: public", "DEL SuperMethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: nullSemantics", "DEL MethodDeclaration", "DEL SimpleName: strictness", "DEL Block", "DEL SimpleName: setEmpty", "DEL SimpleName: isFinite", "DEL MethodInvocation", "DEL Modifier: public", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: factory", "DEL SimpleName: SargIntervalSequence", "DEL ClassInstanceCreation", "DEL SimpleName: interval", "DEL ReturnStatement", "DEL SimpleName: originalInterval", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: seq", "DEL PrimitiveType: void", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: getDataType", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL ReturnStatement", "DEL SimpleName: getList", "DEL SimpleName: SargInterval", "DEL SimpleName: originalInterval", "DEL SimpleType: RelDataType", "DEL Modifier: public", "DEL SimpleName: nullSemantics", "DEL MemberRef", "DEL SimpleName: RexDynamicParam", "DEL SimpleType: SargInterval", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: SargIntervalBase", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL InstanceofExpression", "DEL SimpleName: isFinite", "DEL SimpleName: coordinate", "DEL MethodInvocation", "DEL SimpleName: isNull", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: upperBound", "DEL SimpleName: getLowerBound", "DEL MethodInvocation", "DEL SimpleName: getStrictnessComplement", "DEL InfixExpression: ||", "DEL SimpleName: isFinite", "DEL MethodInvocation", "DEL SimpleName: SqlNullSemantics", "DEL SimpleName: getNullSemantics", "DEL QualifiedName: SqlNullSemantics.NULL_MATCHES_ANYTHING", "DEL NumberLiteral: 0", "DEL SimpleName: setUpper", "DEL SimpleName: SargInterval", "DEL ClassInstanceCreation", "DEL TagElement: @link", "DEL SimpleName: originalInterval", "DEL SimpleType: RexDynamicParam", "DEL SimpleName: interval", "DEL SimpleName: upperBound", "DEL MethodInvocation", "DEL SimpleName: addInterval", "DEL SimpleName: seq", "DEL MethodDeclaration", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: interval", "DEL SimpleName: getList", "DEL ExpressionStatement", "DEL SimpleName: originalInterval", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: SargFactory", "DEL SimpleName: SqlNullSemantics", "DEL VariableDeclarationFragment", "DEL SimpleName: SargExpr", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: SargInterval", "DEL VariableDeclarationFragment", "DEL InfixExpression: ==", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: getLowerBound", "DEL SimpleName: SargIntervalExpr", "DEL SimpleName: unsetLower", "DEL SimpleName: setUpper", "DEL ExpressionStatement", "DEL SimpleName: getLowerBound", "DEL SimpleName: dynamicParams", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: getLowerBound", "DEL Block", "DEL SimpleName: collectDynamicParams", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL Block", "DEL SimpleName: nullSemantics", "DEL IfStatement", "DEL TextElement: <p>Null values require special treatment in expressions. Normally, for", "DEL SimpleName: SargFactory", "DEL MethodInvocation", "DEL SimpleName: addInterval", "DEL SimpleName: SargInterval", "DEL Block", "DEL SimpleName: unsetUpper", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: nullSemantics", "DEL MethodInvocation", "DEL SimpleName: SargIntervalExpr", "DEL VariableDeclarationFragment", "DEL SimpleName: String", "DEL MethodInvocation", "DEL SimpleName: add", "DEL SuperMethodInvocation", "DEL SimpleType: SargFactory", "DEL MethodInvocation", "DEL ThisExpression", "DEL SimpleName: seq", "DEL InstanceofExpression", "DEL SimpleName: dynamicParams", "DEL SingleVariableDeclaration", "DEL TagElement: @link", "DEL SimpleType: RexDynamicParam", "DEL SimpleName: getLowerBound", "DEL SimpleType: SargIntervalBase", "DEL SimpleName: factory", "DEL TextElement: search values. This behavior can be modified by setting the ", "DEL SimpleName: RexNode", "DEL SimpleName: unsetUpper", "DEL InfixExpression: ||", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL PrimitiveType: void", "DEL SimpleName: unsetLower", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: getBoundType", "DEL TextElement:  to a value other than the default. This happens implicitly", "DEL SimpleName: size", "DEL Block", "DEL SimpleName: seq", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: originalInterval", "DEL SimpleName: getCoordinate", "DEL SimpleType: SargIntervalSequence", "DEL Block", "DEL SimpleName: getBoundType", "DEL Modifier: public", "DEL SimpleName: originalSeq", "DEL ParenthesizedExpression", "DEL SimpleName: seq", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: getCoordinate", "DEL SimpleName: getLowerBound", "DEL SuperMethodInvocation", "DEL MethodInvocation", "DEL SimpleName: RexDynamicParam", "DEL SimpleName: isNullable", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: SargInterval", "DEL Block", "DEL IfStatement", "DEL QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING", "DEL FieldDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: interval", "DEL SimpleName: setUpper", "DEL MethodInvocation", "DEL SimpleName: nullSemantics", "DEL SimpleName: addInterval", "DEL SimpleName: RexDynamicParam", "DEL Block", "DEL InfixExpression: &&", "DEL SimpleName: SargIntervalSequence", "DEL Modifier: public", "DEL SimpleName: interval", "DEL SimpleName: setUpper", "DEL SimpleName: interval", "DEL SimpleName: originalSeq", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleName: lowerBound", "DEL SimpleName: factory", "DEL TextElement: SargIntervalExpr represents an expression which can be resolved to a fixed", "DEL PrimitiveType: void", "DEL TagElement: @return", "DEL SimpleName: setLower", "DEL MethodInvocation", "DEL PrimitiveType: void", "DEL SimpleType: SargInterval", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleName: originalInterval", "DEL Block", "DEL PrimitiveType: void", "DEL SimpleName: strictness", "DEL InfixExpression: ||", "DEL SimpleType: SqlNullSemantics", "DEL QualifiedName: SargBoundType.UPPER", "DEL SimpleName: originalSeq", "DEL SimpleName: getUpperBound", "DEL TextElement: are considered to be part of the domain, the ordering is defined as for", "DEL SimpleName: isNullLiteral", "DEL SimpleName: newIntervalExpr", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL SimpleType: SargStrictness", "DEL SimpleName: setUnconstrained", "DEL SimpleName: dataType", "DEL Javadoc", "DEL MethodInvocation", "DEL Block", "DEL PrefixExpression: !", "DEL SimpleName: upperBound", "DEL MethodDeclaration", "DEL SimpleType: SargInterval", "DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: RexNode", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleName: getLowerBound", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL SimpleName: interval", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL Block", "DEL MethodInvocation", "DEL InfixExpression: ||", "DEL PrefixExpression: !", "DEL SimpleName: getUpperBound", "DEL SimpleName: isFinite", "DEL QualifiedName: SqlNullSemantics.NULL_MATCHES_NULL", "DEL SimpleName: seq", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleType: SargInterval", "DEL MethodInvocation", "DEL SimpleName: getDataType", "DEL SimpleName: upperBound", "DEL AssertStatement", "DEL SimpleName: RelDataType", "DEL SimpleName: seq", "DEL SimpleName: seq", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL TagElement: @link", "DEL SimpleType: String", "DEL SimpleName: originalInterval", "DEL SimpleName: coordinate", "DEL SimpleName: isNull", "DEL Assignment: =", "DEL SimpleType: RexDynamicParam", "DEL IfStatement", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: setUnconstrained", "DEL SimpleName: interval", "DEL MethodDeclaration", "DEL SimpleName: originalInterval", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL SimpleName: seq", "DEL SuperMethodInvocation", "DEL SimpleName: getCoordinate", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL AssertStatement", "DEL IfStatement", "DEL SimpleName: getLowerBound", "DEL SimpleName: addInterval", "DEL SuperMethodInvocation", "DEL SimpleName: toString", "DEL SimpleName: originalSeq", "DEL SimpleName: newNullLiteral", "DEL SimpleName: RexNode", "DEL SimpleName: s", "DEL MethodInvocation", "DEL QualifiedName: SargStrictness.OPEN", "DEL SimpleName: originalInterval", "DEL SimpleName: setUnconstrained", "DEL SimpleName: coordinate", "DEL SimpleName: interval", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: SargInterval", "DEL PrefixExpression: !", "DEL SimpleName: interval", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL ParameterizedType: Set<RexDynamicParam>", "DEL SimpleName: SargInterval", "DEL ExpressionStatement", "DEL IfStatement", "DEL TextElement: when a point interval is created matching the null value. When null values", "DEL SimpleName: coordinate", "DEL Modifier: private", "DEL SimpleName: getList", "DEL SimpleName: setNull", "DEL MethodInvocation", "DEL SimpleName: lowerBound", "DEL SimpleType: RexNode", "DEL SimpleName: interval", "DEL SimpleType: RexDynamicParam", "DEL SimpleName: isFinite", "DEL SimpleName: RexDynamicParam", "DEL SimpleName: RexDynamicParam", "DEL ReturnStatement", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: interval", "DEL VariableDeclarationStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: nullSemantics", "DEL SimpleName: factory", "DEL SimpleName: SqlNullSemantics", "DEL SimpleName: newNullLiteral", "DEL ExpressionStatement", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleName: SargInterval", "DEL SimpleName: factory", "DEL SimpleType: RexDynamicParam", "DEL SimpleType: SargInterval", "DEL InfixExpression: !=", "DEL SimpleName: upperBound", "DEL Block", "DEL ClassInstanceCreation", "DEL Modifier: public", "DEL SimpleName: coordinate", "DEL Block", "DEL SimpleName: strictness", "DEL SimpleName: strictness", "DEL ThisExpression", "DEL SimpleName: nullSemantics", "DEL SimpleName: SargIntervalSequence", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL SimpleName: coordinate", "DEL SimpleName: interval", "DEL Javadoc", "DEL SimpleName: addInterval", "DEL SimpleName: getCoordinate", "DEL SimpleName: getUpperBound", "DEL SimpleName: getDataType", "DEL Block", "DEL SimpleType: SargIntervalSequence", "DEL InfixExpression: ||", "DEL MethodInvocation", "DEL SimpleName: getCoordinate", "DEL SimpleName: originalInterval", "DEL SimpleName: SqlNullSemantics", "DEL SimpleName: RexNode", "DEL MethodDeclaration", "DEL SuperMethodInvocation", "DEL SimpleName: setLower", "DEL SimpleType: SargStrictness", "DEL TextElement:  null semantics which apply for searches on this interval", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: getUpperBound", "DEL QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING", "DEL SimpleName: String", "DEL MethodDeclaration", "DEL SimpleName: setNull", "DEL CastExpression", "DEL IfStatement", "DEL SimpleName: setLower", "DEL MethodInvocation", "DEL SimpleName: isFinite", "DEL TextElement: .", "DEL SimpleName: isFinite", "DEL SimpleName: SargStrictness", "DEL SimpleName: upperBound", "DEL StringLiteral: \" \"", "DEL SimpleName: factory", "DEL SimpleName: interval", "DEL SimpleName: setPoint", "DEL SimpleName: interval", "DEL MethodDeclaration", "DEL SimpleName: setPoint", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: factory", "DEL SimpleType: SargIntervalSequence", "DEL QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: originalInterval", "DEL SimpleName: getCoordinate", "DEL SimpleType: SqlNullSemantics", "DEL SimpleName: isNull", "DEL SimpleName: Set", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL ParenthesizedExpression", "DEL SimpleType: SqlNullSemantics", "DEL TypeDeclaration: class", "DEL SuperConstructorInvocation", "DEL IfStatement", "DEL SimpleName: isNull", "DEL TextElement: intervals of any kind, nulls are not considered to be within the domain of", "DEL SuperMethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: nullSemantics", "DEL MethodInvocation", "DEL SimpleName: getStrictnessComplement", "DEL SimpleName: s", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: lowerBound", "DEL SimpleName: evaluate", "DEL SimpleName: seq", "DEL SimpleType: RexNode", "DEL SimpleName: isNull", "DEL VariableDeclarationStatement", "DEL SingleVariableDeclaration", "DEL Block", "DEL Block", "DEL SimpleName: setEmpty", "DEL SimpleName: seq", "DEL Block", "DEL QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING", "DEL SimpleName: getStrictnessComplement", "DEL Block", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: nullSemantics", "DEL SimpleName: getUpperBound", "DEL MethodInvocation", "DEL SimpleName: copyFrom", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleType: Set", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: seq", "DEL SimpleName: add", "DEL TextElement: .", "DEL ReturnStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: setLower", "DEL PrimitiveType: void", "DEL ParenthesizedExpression", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleType: SargInterval", "DEL SimpleName: isNull", "DEL IfStatement", "DEL SimpleName: nullSemantics", "DEL TagElement: @see", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL Block", "DEL SimpleName: nullSemantics", "DEL VariableDeclarationStatement", "DEL SimpleName: evaluateComplemented", "DEL SimpleName: nullSemantics", "DEL Block", "DEL Modifier: public", "DEL SimpleName: s", "DEL SimpleName: originalInterval", "DEL SimpleName: getDataType", "DEL MethodInvocation", "DEL SimpleName: isUnconstrained", "DEL SuperMethodInvocation", "DEL MethodInvocation", "DEL SimpleName: SargStrictness", "DEL SimpleName: originalInterval", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: originalInterval", "DEL Modifier: public", "DEL SimpleType: SargIntervalSequence", "DEL ExpressionStatement", "DEL SimpleType: SargExpr", "DEL SimpleName: SargIntervalSequence", "DEL CastExpression", "DEL SimpleName: interval", "DEL Block", "DEL SimpleName: lowerBound", "DEL Block", "DEL PrimitiveType: void", "DEL ReturnStatement", "DEL InfixExpression: +", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: seq", "DEL SimpleName: lowerBound", "DEL Modifier: public", "DEL SimpleName: getStrictnessComplement", "DEL Modifier: public", "DEL ClassInstanceCreation", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL SimpleName: SargInterval", "DEL SimpleName: factory", "DEL SimpleName: isFinite", "DEL VariableDeclarationFragment", "DEL Block", "DEL Modifier: public", "DEL QualifiedName: SargStrictness.OPEN", "DEL SimpleName: setLower", "DEL Assignment: =", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: addInterval", "DEL SimpleName: originalInterval", "DEL SimpleName: isEmpty", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL SimpleName: dynamicParams", "DEL MethodInvocation", "DEL TagElement", "DEL SimpleType: SargIntervalSequence", "DEL MethodInvocation", "DEL SimpleName: RexLiteral", "DEL SimpleType: SargInterval", "DEL MethodInvocation", "DEL SimpleName: getUpperBound", "DEL SimpleName: getDataType", "DEL SimpleName: lowerBound", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL SimpleName: dataType", "DEL SimpleType: String", "DEL ExpressionStatement", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: evaluate", "DEL SimpleName: getCoordinate", "DEL Block", "DEL InfixExpression: ==", "DEL Javadoc", "DEL SimpleName: lowerBound", "DEL MethodDeclaration", "DEL IfStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SuperMethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL MethodInvocation"]}]}}, {"SargIntervalExpr_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.eigenbase.reltype(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.eigenbase.rex(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.eigenbase.sql(8)", "Delete ImportDeclaration(9)", "Delete TextElement: SargIntervalExpr represents an expression which can be resolved to a fixed(10)", "Delete SimpleName: SargInterval(11)", "Delete TagElement: @link(12)", "Delete TextElement: .(13)", "Delete TextElement: <p>Null values require special treatment in expressions. Normally, for(14)", "Delete TextElement: intervals of any kind, nulls are not considered to be within the domain of(15)", "Delete TextElement: search values. This behavior can be modified by setting the (16)", "Delete SimpleName: SqlNullSemantics(17)", "Delete TagElement: @link(18)", "Delete TextElement:  to a value other than the default. This happens implicitly(19)", "Delete TextElement: when a point interval is created matching the null value. When null values(20)", "Delete TextElement: are considered to be part of the domain, the ordering is defined as for(21)", "Delete SimpleName: SargInterval(22)", "Delete TagElement: @link(23)", "Delete TextElement: .(24)", "Delete TagElement(25)", "Delete Javadoc(26)", "Delete Modifier: public(27)", "Delete SimpleName: SargIntervalExpr(28)", "Delete SimpleName: SargIntervalBase(29)", "Delete SimpleType: SargIntervalBase(30)", "Delete SimpleName: SargExpr(31)", "Delete SimpleType: SargExpr(32)", "Delete Modifier: private(33)", "Delete SimpleName: SqlNullSemantics(34)", "Delete SimpleType: SqlNullSemantics(35)", "Delete SimpleName: nullSemantics(36)", "Delete VariableDeclarationFragment(37)", "Delete FieldDeclaration(38)", "Delete SimpleName: SargFactory(39)", "Delete SimpleName: newIntervalExpr(40)", "Delete MemberRef(41)", "Delete TagElement: @see(42)", "Delete Javadoc(43)", "Delete SimpleName: SargIntervalExpr(44)", "Delete SimpleName: SargFactory(45)", "Delete SimpleType: SargFactory(46)", "Delete SimpleName: factory(47)", "Delete SingleVariableDeclaration(48)", "Delete SimpleName: RelDataType(49)", "Delete SimpleType: RelDataType(50)", "Delete SimpleName: dataType(51)", "Delete SingleVariableDeclaration(52)", "Delete SimpleName: SqlNullSemantics(53)", "Delete SimpleType: SqlNullSemantics(54)", "Delete SimpleName: nullSemantics(55)", "Delete SingleVariableDeclaration(56)", "Delete SimpleName: factory(57)", "Delete SimpleName: dataType(58)", "Delete SuperConstructorInvocation(59)", "Delete ThisExpression(60)", "Delete SimpleName: nullSemantics(61)", "Delete FieldAccess(62)", "Delete SimpleName: nullSemantics(63)", "Delete Assignment: =(64)", "Delete ExpressionStatement(65)", "Delete Block(66)", "Delete MethodDeclaration(67)", "Delete TextElement:  null semantics which apply for searches on this interval(68)", "Delete TagElement: @return(69)", "Delete Javadoc(70)", "Delete Modifier: public(71)", "Delete SimpleName: SqlNullSemantics(72)", "Delete SimpleType: SqlNullSemantics(73)", "Delete SimpleName: getNullSemantics(74)", "Delete SimpleName: nullSemantics(75)", "Delete ReturnStatement(76)", "Delete Block(77)", "Delete MethodDeclaration(78)", "Delete Modifier: public(79)", "Delete PrimitiveType: void(80)", "Delete SimpleName: setPoint(81)", "Delete SimpleName: RexNode(82)", "Delete SimpleType: RexNode(83)", "Delete SimpleName: coordinate(84)", "Delete SingleVariableDeclaration(85)", "Delete SimpleName: setPoint(86)", "Delete SimpleName: coordinate(87)", "Delete SuperMethodInvocation(88)", "Delete ExpressionStatement(89)", "Delete SimpleName: RexLiteral(90)", "Delete SimpleName: isNullLiteral(91)", "Delete SimpleName: coordinate(92)", "Delete MethodInvocation(93)", "Delete SimpleName: nullSemantics(94)", "Delete QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING(95)", "Delete InfixExpression: ==(96)", "Delete SimpleName: nullSemantics(97)", "Delete QualifiedName: SqlNullSemantics.NULL_MATCHES_NULL(98)", "Delete Assignment: =(99)", "Delete ExpressionStatement(100)", "Delete Block(101)", "Delete IfStatement(102)", "Delete Block(103)", "Delete IfStatement(104)", "Delete Block(105)", "Delete MethodDeclaration(106)", "Delete Modifier: public(107)", "Delete PrimitiveType: void(108)", "Delete SimpleName: setNull(109)", "Delete SimpleName: setNull(110)", "Delete SuperMethodInvocation(111)", "Delete ExpressionStatement(112)", "Delete Block(113)", "Delete MethodDeclaration(114)", "Delete Modifier: public(115)", "Delete PrimitiveType: void(116)", "Delete SimpleName: setLower(117)", "Delete SimpleName: RexNode(118)", "Delete SimpleType: RexNode(119)", "Delete SimpleName: coordinate(120)", "Delete SingleVariableDeclaration(121)", "Delete SimpleName: SargStrictness(122)", "Delete SimpleType: SargStrictness(123)", "Delete SimpleName: strictness(124)", "Delete SingleVariableDeclaration(125)", "Delete SimpleName: setLower(126)", "Delete SimpleName: coordinate(127)", "Delete SimpleName: strictness(128)", "Delete SuperMethodInvocation(129)", "Delete ExpressionStatement(130)", "Delete Block(131)", "Delete MethodDeclaration(132)", "Delete Modifier: public(133)", "Delete PrimitiveType: void(134)", "Delete SimpleName: setUpper(135)", "Delete SimpleName: RexNode(136)", "Delete SimpleType: RexNode(137)", "Delete SimpleName: coordinate(138)", "Delete SingleVariableDeclaration(139)", "Delete SimpleName: SargStrictness(140)", "Delete SimpleType: SargStrictness(141)", "Delete SimpleName: strictness(142)", "Delete SingleVariableDeclaration(143)", "Delete SimpleName: setUpper(144)", "Delete SimpleName: coordinate(145)", "Delete SimpleName: strictness(146)", "Delete SuperMethodInvocation(147)", "Delete ExpressionStatement(148)", "Delete Block(149)", "Delete MethodDeclaration(150)", "Delete Modifier: public(151)", "Delete PrimitiveType: void(152)", "Delete SimpleName: unsetLower(153)", "Delete SimpleName: unsetLower(154)", "Delete SuperMethodInvocation(155)", "Delete ExpressionStatement(156)", "Delete Block(157)", "Delete MethodDeclaration(158)", "Delete Modifier: public(159)", "Delete PrimitiveType: void(160)", "Delete SimpleName: unsetUpper(161)", "Delete SimpleName: unsetUpper(162)", "Delete SuperMethodInvocation(163)", "Delete ExpressionStatement(164)", "Delete Block(165)", "Delete MethodDeclaration(166)", "Delete Modifier: public(167)", "Delete PrimitiveType: void(168)", "Delete SimpleName: setUnconstrained(169)", "Delete SimpleName: setUnconstrained(170)", "Delete SuperMethodInvocation(171)", "Delete ExpressionStatement(172)", "Delete Block(173)", "Delete MethodDeclaration(174)", "Delete Modifier: public(175)", "Delete PrimitiveType: void(176)", "Delete SimpleName: setEmpty(177)", "Delete SimpleName: setEmpty(178)", "Delete SuperMethodInvocation(179)", "Delete ExpressionStatement(180)", "Delete Block(181)", "Delete MethodDeclaration(182)", "Delete Modifier: public(183)", "Delete SimpleName: String(184)", "Delete SimpleType: String(185)", "Delete SimpleName: toString(186)", "Delete SimpleName: String(187)", "Delete SimpleType: String(188)", "Delete SimpleName: s(189)", "Delete SimpleName: toString(190)", "Delete SuperMethodInvocation(191)", "Delete VariableDeclarationFragment(192)", "Delete VariableDeclarationStatement(193)", "Delete SimpleName: nullSemantics(194)", "Delete QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING(195)", "Delete InfixExpression: ==(196)", "Delete SimpleName: s(197)", "Delete ReturnStatement(198)", "Delete Block(199)", "Delete SimpleName: s(200)", "Delete StringLiteral: \" \"(201)", "Delete SimpleName: nullSemantics(202)", "Delete InfixExpression: +(203)", "Delete ReturnStatement(204)", "Delete Block(205)", "Delete IfStatement(206)", "Delete Block(207)", "Delete MethodDeclaration(208)", "Delete Modifier: public(209)", "Delete SimpleName: SargIntervalSequence(210)", "Delete SimpleType: SargIntervalSequence(211)", "Delete SimpleName: evaluate(212)", "Delete SimpleName: SargIntervalSequence(213)", "Delete SimpleType: SargIntervalSequence(214)", "Delete SimpleName: seq(215)", "Delete SimpleName: SargIntervalSequence(216)", "Delete SimpleType: SargIntervalSequence(217)", "Delete ClassInstanceCreation(218)", "Delete VariableDeclarationFragment(219)", "Delete VariableDeclarationStatement(220)", "Delete SimpleName: lowerBound(221)", "Delete SimpleName: getBoundType(222)", "Delete MethodInvocation(223)", "Delete QualifiedName: SargBoundType.LOWER(224)", "Delete InfixExpression: !=(225)", "Delete ParenthesizedExpression(226)", "Delete SimpleName: upperBound(227)", "Delete SimpleName: getBoundType(228)", "Delete MethodInvocation(229)", "Delete QualifiedName: SargBoundType.UPPER(230)", "Delete InfixExpression: !=(231)", "Delete ParenthesizedExpression(232)", "Delete InfixExpression: ||(233)", "Delete SimpleName: seq(234)", "Delete ReturnStatement(235)", "Delete Block(236)", "Delete IfStatement(237)", "Delete SimpleName: nullSemantics(238)", "Delete QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING(239)", "Delete InfixExpression: ==(240)", "Delete ParenthesizedExpression(241)", "Delete SimpleName: lowerBound(242)", "Delete SimpleName: isNull(243)", "Delete MethodInvocation(244)", "Delete SimpleName: upperBound(245)", "Delete SimpleName: isNull(246)", "Delete MethodInvocation(247)", "Delete InfixExpression: ||(248)", "Delete ParenthesizedExpression(249)", "Delete InfixExpression: &&(250)", "Delete SimpleName: seq(251)", "Delete ReturnStatement(252)", "Delete Block(253)", "Delete IfStatement(254)", "Delete SimpleName: SargInterval(255)", "Delete SimpleType: SargInterval(256)", "Delete SimpleName: interval(257)", "Delete SimpleName: SargInterval(258)", "Delete SimpleType: SargInterval(259)", "Delete SimpleName: factory(260)", "Delete SimpleName: getDataType(261)", "Delete MethodInvocation(262)", "Delete ClassInstanceCreation(263)", "Delete VariableDeclarationFragment(264)", "Delete VariableDeclarationStatement(265)", "Delete SimpleName: interval(266)", "Delete SimpleName: copyFrom(267)", "Delete ThisExpression(268)", "Delete MethodInvocation(269)", "Delete ExpressionStatement(270)", "Delete SimpleName: nullSemantics(271)", "Delete QualifiedName: SqlNullSemantics.NULL_MATCHES_NOTHING(272)", "Delete InfixExpression: ==(273)", "Delete ParenthesizedExpression(274)", "Delete SimpleName: getDataType(275)", "Delete MethodInvocation(276)", "Delete SimpleName: isNullable(277)", "Delete MethodInvocation(278)", "Delete SimpleName: lowerBound(279)", "Delete SimpleName: isFinite(280)", "Delete MethodInvocation(281)", "Delete SimpleName: upperBound(282)", "Delete SimpleName: isFinite(283)", "Delete MethodInvocation(284)", "Delete InfixExpression: ||(285)", "Delete ParenthesizedExpression(286)", "Delete SimpleName: lowerBound(287)", "Delete SimpleName: isFinite(288)", "Delete MethodInvocation(289)", "Delete PrefixExpression: !(290)", "Delete SimpleName: lowerBound(291)", "Delete SimpleName: isNull(292)", "Delete MethodInvocation(293)", "Delete InfixExpression: ||(294)", "Delete ParenthesizedExpression(295)", "Delete InfixExpression: &&(296)", "Delete SimpleName: interval(297)", "Delete SimpleName: setLower(298)", "Delete SimpleName: factory(299)", "Delete SimpleName: newNullLiteral(300)", "Delete MethodInvocation(301)", "Delete QualifiedName: SargStrictness.OPEN(302)", "Delete MethodInvocation(303)", "Delete ExpressionStatement(304)", "Delete Block(305)", "Delete SimpleName: nullSemantics(306)", "Delete QualifiedName: SqlNullSemantics.NULL_MATCHES_ANYTHING(307)", "Delete InfixExpression: ==(308)", "Delete SimpleName: lowerBound(309)", "Delete SimpleName: isFinite(310)", "Delete MethodInvocation(311)", "Delete PrefixExpression: !(312)", "Delete SimpleName: lowerBound(313)", "Delete SimpleName: isNull(314)", "Delete MethodInvocation(315)", "Delete SimpleName: upperBound(316)", "Delete SimpleName: isNull(317)", "Delete MethodInvocation(318)", "Delete InfixExpression: ||(319)", "Delete SimpleName: interval(320)", "Delete SimpleName: setUnconstrained(321)", "Delete MethodInvocation(322)", "Delete ExpressionStatement(323)", "Delete Block(324)", "Delete IfStatement(325)", "Delete Block(326)", "Delete IfStatement(327)", "Delete IfStatement(328)", "Delete SimpleName: seq(329)", "Delete SimpleName: addInterval(330)", "Delete SimpleName: interval(331)", "Delete MethodInvocation(332)", "Delete ExpressionStatement(333)", "Delete SimpleName: seq(334)", "Delete ReturnStatement(335)", "Delete Block(336)", "Delete MethodDeclaration(337)", "Delete Modifier: public(338)", "Delete PrimitiveType: void(339)", "Delete SimpleName: collectDynamicParams(340)", "Delete SimpleName: Set(341)", "Delete SimpleType: Set(342)", "Delete SimpleName: RexDynamicParam(343)", "Delete SimpleType: RexDynamicParam(344)", "Delete ParameterizedType: Set<RexDynamicParam>(345)", "Delete SimpleName: dynamicParams(346)", "Delete SingleVariableDeclaration(347)", "Delete SimpleName: lowerBound(348)", "Delete SimpleName: getCoordinate(349)", "Delete MethodInvocation(350)", "Delete SimpleName: RexDynamicParam(351)", "Delete SimpleType: RexDynamicParam(352)", "Delete InstanceofExpression(353)", "Delete SimpleName: dynamicParams(354)", "Delete SimpleName: add(355)", "Delete SimpleName: RexDynamicParam(356)", "Delete SimpleType: RexDynamicParam(357)", "Delete SimpleName: lowerBound(358)", "Delete SimpleName: getCoordinate(359)", "Delete MethodInvocation(360)", "Delete CastExpression(361)", "Delete MethodInvocation(362)", "Delete ExpressionStatement(363)", "Delete Block(364)", "Delete IfStatement(365)", "Delete SimpleName: upperBound(366)", "Delete SimpleName: getCoordinate(367)", "Delete MethodInvocation(368)", "Delete SimpleName: RexDynamicParam(369)", "Delete SimpleType: RexDynamicParam(370)", "Delete InstanceofExpression(371)", "Delete SimpleName: dynamicParams(372)", "Delete SimpleName: add(373)", "Delete SimpleName: RexDynamicParam(374)", "Delete SimpleType: RexDynamicParam(375)", "Delete SimpleName: upperBound(376)", "Delete SimpleName: getCoordinate(377)", "Delete MethodInvocation(378)", "Delete CastExpression(379)", "Delete MethodInvocation(380)", "Delete ExpressionStatement(381)", "Delete Block(382)", "Delete IfStatement(383)", "Delete Block(384)", "Delete MethodDeclaration(385)", "Delete Modifier: public(386)", "Delete SimpleName: SargIntervalSequence(387)", "Delete SimpleType: SargIntervalSequence(388)", "Delete SimpleName: evaluateComplemented(389)", "Delete SimpleName: SargIntervalSequence(390)", "Delete SimpleType: SargIntervalSequence(391)", "Delete SimpleName: originalSeq(392)", "Delete SimpleName: evaluate(393)", "Delete MethodInvocation(394)", "Delete VariableDeclarationFragment(395)", "Delete VariableDeclarationStatement(396)", "Delete SimpleName: SargIntervalSequence(397)", "Delete SimpleType: SargIntervalSequence(398)", "Delete SimpleName: seq(399)", "Delete SimpleName: SargIntervalSequence(400)", "Delete SimpleType: SargIntervalSequence(401)", "Delete ClassInstanceCreation(402)", "Delete VariableDeclarationFragment(403)", "Delete VariableDeclarationStatement(404)", "Delete SimpleName: originalSeq(405)", "Delete SimpleName: getList(406)", "Delete MethodInvocation(407)", "Delete SimpleName: isEmpty(408)", "Delete MethodInvocation(409)", "Delete SimpleName: seq(410)", "Delete SimpleName: addInterval(411)", "Delete SimpleName: SargInterval(412)", "Delete SimpleType: SargInterval(413)", "Delete SimpleName: factory(414)", "Delete SimpleName: getDataType(415)", "Delete MethodInvocation(416)", "Delete ClassInstanceCreation(417)", "Delete MethodInvocation(418)", "Delete ExpressionStatement(419)", "Delete SimpleName: seq(420)", "Delete ReturnStatement(421)", "Delete Block(422)", "Delete IfStatement(423)", "Delete SimpleName: originalSeq(424)", "Delete SimpleName: getList(425)", "Delete MethodInvocation(426)", "Delete SimpleName: size(427)", "Delete MethodInvocation(428)", "Delete NumberLiteral: 1(429)", "Delete InfixExpression: ==(430)", "Delete AssertStatement(431)", "Delete SimpleName: SargInterval(432)", "Delete SimpleType: SargInterval(433)", "Delete SimpleName: originalInterval(434)", "Delete SimpleName: originalSeq(435)", "Delete SimpleName: getList(436)", "Delete MethodInvocation(437)", "Delete SimpleName: get(438)", "Delete NumberLiteral: 0(439)", "Delete MethodInvocation(440)", "Delete VariableDeclarationFragment(441)", "Delete VariableDeclarationStatement(442)", "Delete SimpleName: originalInterval(443)", "Delete SimpleName: isUnconstrained(444)", "Delete MethodInvocation(445)", "Delete SimpleName: seq(446)", "Delete ReturnStatement(447)", "Delete Block(448)", "Delete IfStatement(449)", "Delete SimpleName: SargInterval(450)", "Delete SimpleType: SargInterval(451)", "Delete SimpleName: interval(452)", "Delete SimpleName: SargInterval(453)", "Delete SimpleType: SargInterval(454)", "Delete SimpleName: factory(455)", "Delete SimpleName: getDataType(456)", "Delete MethodInvocation(457)", "Delete ClassInstanceCreation(458)", "Delete VariableDeclarationFragment(459)", "Delete VariableDeclarationStatement(460)", "Delete SimpleName: interval(461)", "Delete SimpleName: setLower(462)", "Delete SimpleName: factory(463)", "Delete SimpleName: newNullLiteral(464)", "Delete MethodInvocation(465)", "Delete QualifiedName: SargStrictness.OPEN(466)", "Delete MethodInvocation(467)", "Delete ExpressionStatement(468)", "Delete SimpleName: originalInterval(469)", "Delete SimpleName: getUpperBound(470)", "Delete MethodInvocation(471)", "Delete SimpleName: isFinite(472)", "Delete MethodInvocation(473)", "Delete SimpleName: originalInterval(474)", "Delete SimpleName: getLowerBound(475)", "Delete MethodInvocation(476)", "Delete SimpleName: isFinite(477)", "Delete MethodInvocation(478)", "Delete InfixExpression: &&(479)", "Delete SimpleName: interval(480)", "Delete SimpleName: setUpper(481)", "Delete SimpleName: originalInterval(482)", "Delete SimpleName: getLowerBound(483)", "Delete MethodInvocation(484)", "Delete SimpleName: getCoordinate(485)", "Delete MethodInvocation(486)", "Delete SimpleName: originalInterval(487)", "Delete SimpleName: getLowerBound(488)", "Delete MethodInvocation(489)", "Delete SimpleName: getStrictnessComplement(490)", "Delete MethodInvocation(491)", "Delete MethodInvocation(492)", "Delete ExpressionStatement(493)", "Delete SimpleName: originalInterval(494)", "Delete SimpleName: getLowerBound(495)", "Delete MethodInvocation(496)", "Delete SimpleName: isNull(497)", "Delete MethodInvocation(498)", "Delete PrefixExpression: !(499)", "Delete SimpleName: seq(500)", "Delete SimpleName: addInterval(501)", "Delete SimpleName: interval(502)", "Delete MethodInvocation(503)", "Delete ExpressionStatement(504)", "Delete Block(505)", "Delete Block(506)", "Delete IfStatement(507)", "Delete SimpleName: interval(508)", "Delete SimpleName: SargInterval(509)", "Delete SimpleType: SargInterval(510)", "Delete SimpleName: factory(511)", "Delete SimpleName: getDataType(512)", "Delete MethodInvocation(513)", "Delete ClassInstanceCreation(514)", "Delete Assignment: =(515)", "Delete ExpressionStatement(516)", "Delete SimpleName: interval(517)", "Delete SimpleName: setLower(518)", "Delete SimpleName: originalInterval(519)", "Delete SimpleName: getUpperBound(520)", "Delete MethodInvocation(521)", "Delete SimpleName: getCoordinate(522)", "Delete MethodInvocation(523)", "Delete SimpleName: originalInterval(524)", "Delete SimpleName: getUpperBound(525)", "Delete MethodInvocation(526)", "Delete SimpleName: getStrictnessComplement(527)", "Delete MethodInvocation(528)", "Delete MethodInvocation(529)", "Delete ExpressionStatement(530)", "Delete SimpleName: seq(531)", "Delete SimpleName: addInterval(532)", "Delete SimpleName: interval(533)", "Delete MethodInvocation(534)", "Delete ExpressionStatement(535)", "Delete Block(536)", "Delete SimpleName: originalInterval(537)", "Delete SimpleName: getLowerBound(538)", "Delete MethodInvocation(539)", "Delete SimpleName: isFinite(540)", "Delete MethodInvocation(541)", "Delete SimpleName: interval(542)", "Delete SimpleName: setUpper(543)", "Delete SimpleName: originalInterval(544)", "Delete SimpleName: getLowerBound(545)", "Delete MethodInvocation(546)", "Delete SimpleName: getCoordinate(547)", "Delete MethodInvocation(548)", "Delete SimpleName: originalInterval(549)", "Delete SimpleName: getLowerBound(550)", "Delete MethodInvocation(551)", "Delete SimpleName: getStrictnessComplement(552)", "Delete MethodInvocation(553)", "Delete MethodInvocation(554)", "Delete ExpressionStatement(555)", "Delete SimpleName: originalInterval(556)", "Delete SimpleName: getLowerBound(557)", "Delete MethodInvocation(558)", "Delete SimpleName: isNull(559)", "Delete MethodInvocation(560)", "Delete PrefixExpression: !(561)", "Delete SimpleName: seq(562)", "Delete SimpleName: addInterval(563)", "Delete SimpleName: interval(564)", "Delete MethodInvocation(565)", "Delete ExpressionStatement(566)", "Delete Block(567)", "Delete Block(568)", "Delete IfStatement(569)", "Delete Block(570)", "Delete SimpleName: originalInterval(571)", "Delete SimpleName: getUpperBound(572)", "Delete MethodInvocation(573)", "Delete SimpleName: isFinite(574)", "Delete MethodInvocation(575)", "Delete AssertStatement(576)", "Delete SimpleName: interval(577)", "Delete SimpleName: setLower(578)", "Delete SimpleName: originalInterval(579)", "Delete SimpleName: getUpperBound(580)", "Delete MethodInvocation(581)", "Delete SimpleName: getCoordinate(582)", "Delete MethodInvocation(583)", "Delete SimpleName: originalInterval(584)", "Delete SimpleName: getUpperBound(585)", "Delete MethodInvocation(586)", "Delete SimpleName: getStrictnessComplement(587)", "Delete MethodInvocation(588)", "Delete MethodInvocation(589)", "Delete ExpressionStatement(590)", "Delete SimpleName: seq(591)", "Delete SimpleName: addInterval(592)", "Delete SimpleName: interval(593)", "Delete MethodInvocation(594)", "Delete ExpressionStatement(595)", "Delete Block(596)", "Delete IfStatement(597)", "Delete IfStatement(598)", "Delete SimpleName: seq(599)", "Delete ReturnStatement(600)", "Delete Block(601)", "Delete MethodDeclaration(602)", "Delete TypeDeclaration: class(603)"]}}, {"SargIntervalSequence_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: java.util", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.ImmutableList"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Block", "DEL MethodInvocation", "DEL SimpleName: isRange", "DEL InfixExpression: &&", "DEL NumberLiteral: 0", "DEL SimpleName: isEmpty", "DEL PrimitiveType: boolean", "DEL TextElement:  true if this sequence represents an empty range.", "DEL MethodDeclaration", "DEL InfixExpression: ==", "DEL SimpleName: List", "DEL ParameterizedType: List<SargInterval>", "DEL TagElement: @return", "DEL ExpressionStatement", "DEL EnhancedForStatement", "DEL SimpleName: toString", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleType: String", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleName: StringBuilder", "DEL SimpleName: append", "DEL SimpleName: SargIntervalSequence", "DEL ParenthesizedExpression", "DEL ExpressionStatement", "DEL TagElement: @return", "DEL SimpleType: SargInterval", "DEL SimpleType: ArrayList", "DEL SimpleName: SargInterval", "DEL SimpleName: append", "DEL NumberLiteral: 1", "DEL SimpleName: get", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: list", "DEL SimpleName: String", "DEL Modifier: public", "DEL SimpleName: list", "DEL Javadoc", "DEL SimpleType: SargInterval", "DEL StringLiteral: \"()\"", "DEL NumberLiteral: 0", "DEL NumberLiteral: 0", "DEL SimpleType: SargInterval", "DEL ParameterizedType: List<SargInterval>", "DEL SimpleName: toString", "DEL ReturnStatement", "DEL Block", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL InfixExpression: ==", "DEL StringLiteral: \" )\"", "DEL ReturnStatement", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL SimpleName: interval", "DEL SimpleType: SargInterval", "DEL SimpleType: SargInterval", "DEL SimpleName: list", "DEL ReturnStatement", "DEL SimpleName: append", "DEL StringLiteral: \" \"", "DEL TextElement: SargIntervalSequence represents the union of a set of disjoint ", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL InfixExpression: ||", "DEL ClassInstanceCreation", "DEL SimpleName: SargInterval", "DEL SimpleName: interval", "DEL MethodInvocation", "DEL SimpleName: isEmpty", "DEL Modifier: public", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleName: List", "DEL SimpleName: size", "DEL SimpleName: toString", "DEL QualifiedName: SargSetOperator.UNION", "DEL SimpleName: ArrayList", "DEL SimpleName: isPoint", "DEL MethodDeclaration", "DEL SimpleName: interval", "DEL SimpleName: list", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: get", "DEL MethodDeclaration", "DEL SimpleName: size", "DEL Modifier: public", "DEL VariableDeclarationFragment", "DEL SimpleName: isPoint", "DEL SimpleName: list", "DEL SimpleName: SargInterval", "DEL TagElement: @return", "DEL Assignment: =", "DEL SimpleName: size", "DEL TypeDeclaration: class", "DEL FieldDeclaration", "DEL SimpleName: sb", "DEL SimpleType: List", "DEL Block", "DEL PrimitiveType: boolean", "DEL SimpleName: sb", "DEL PrimitiveType: void", "DEL Block", "DEL SimpleName: addInterval", "DEL MethodDeclaration", "DEL PrimitiveType: boolean", "DEL Block", "DEL ReturnStatement", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL VariableDeclarationStatement", "DEL SimpleName: list", "DEL MethodInvocation", "DEL Javadoc", "DEL TextElement: would have been combined into one bigger one before creation of the", "DEL SimpleName: list", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Javadoc", "DEL SimpleName: list", "DEL SimpleName: append", "DEL TextElement:  true if this sequence represents a non-point, non-empty range.", "DEL SimpleName: get", "DEL SimpleName: getList", "DEL SimpleName: interval", "DEL SimpleName: list", "DEL SimpleName: size", "DEL ParenthesizedExpression", "DEL ReturnStatement", "DEL ParameterizedType: ArrayList<SargInterval>", "DEL SimpleName: add", "DEL SimpleName: ImmutableList", "DEL NumberLiteral: 1", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL InfixExpression: &&", "DEL SimpleName: SargInterval", "DEL SimpleName: list", "DEL TagElement: @return", "DEL SimpleName: isRange", "DEL StringLiteral: \"(\"", "DEL TextElement:  instances. (If any adjacent intervals weren't disjoint, they", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL SimpleType: List", "DEL MethodInvocation", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL Block", "DEL SimpleName: sb", "DEL TagElement", "DEL Block", "DEL SimpleName: StringBuilder", "DEL MethodDeclaration", "DEL SimpleName: append", "DEL TextElement: sequence.) Intervals are maintained in coordinate order.", "DEL Modifier: public", "DEL Javadoc", "DEL NumberLiteral: 1", "DEL ExpressionStatement", "DEL SimpleName: list", "DEL Modifier: final", "DEL SimpleName: get", "DEL SimpleName: list", "DEL SimpleName: SargInterval", "DEL ExpressionStatement", "DEL Modifier: public", "DEL ParenthesizedExpression", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL TextElement:  unmodifiable list representing this sequence", "DEL SimpleName: copyOf", "DEL SimpleName: size", "DEL Modifier: public", "DEL MethodInvocation", "DEL TextElement:  true if this sequence represents a point range.", "DEL MethodInvocation", "DEL TagElement: @link", "DEL SimpleName: list", "DEL MethodInvocation", "DEL Javadoc", "DEL SimpleName: sb", "DEL SimpleName: SargInterval", "DEL SimpleName: sb", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL Block", "DEL SimpleName: sb", "DEL SimpleName: list", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL SimpleName: list", "DEL SimpleName: isEmpty", "DEL SimpleName: SargIntervalSequence", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL ExpressionStatement"]}]}}, {"SargIntervalSequence_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: com.google.common.collect.ImmutableList(4)", "Delete ImportDeclaration(5)", "Delete TextElement: SargIntervalSequence represents the union of a set of disjoint (6)", "Delete SimpleName: SargInterval(7)", "Delete TagElement: @link(8)", "Delete TextElement:  instances. (If any adjacent intervals weren't disjoint, they(9)", "Delete TextElement: would have been combined into one bigger one before creation of the(10)", "Delete TextElement: sequence.) Intervals are maintained in coordinate order.(11)", "Delete TagElement(12)", "Delete Javadoc(13)", "Delete Modifier: public(14)", "Delete SimpleName: SargIntervalSequence(15)", "Delete Modifier: final(16)", "Delete SimpleName: List(17)", "Delete SimpleType: List(18)", "Delete SimpleName: SargInterval(19)", "Delete SimpleType: SargInterval(20)", "Delete ParameterizedType: List<SargInterval>(21)", "Delete SimpleName: list(22)", "Delete VariableDeclarationFragment(23)", "Delete FieldDeclaration(24)", "Delete SimpleName: SargIntervalSequence(25)", "Delete SimpleName: list(26)", "Delete SimpleName: ArrayList(27)", "Delete SimpleType: ArrayList(28)", "Delete SimpleName: SargInterval(29)", "Delete SimpleType: SargInterval(30)", "Delete ParameterizedType: ArrayList<SargInterval>(31)", "Delete ClassInstanceCreation(32)", "Delete Assignment: =(33)", "Delete ExpressionStatement(34)", "Delete Block(35)", "Delete MethodDeclaration(36)", "Delete TextElement:  true if this sequence represents a point range.(37)", "Delete TagElement: @return(38)", "Delete Javadoc(39)", "Delete Modifier: public(40)", "Delete PrimitiveType: boolean(41)", "Delete SimpleName: isPoint(42)", "Delete SimpleName: list(43)", "Delete SimpleName: size(44)", "Delete MethodInvocation(45)", "Delete NumberLiteral: 1(46)", "Delete InfixExpression: ==(47)", "Delete ParenthesizedExpression(48)", "Delete SimpleName: list(49)", "Delete SimpleName: get(50)", "Delete NumberLiteral: 0(51)", "Delete MethodInvocation(52)", "Delete SimpleName: isPoint(53)", "Delete MethodInvocation(54)", "Delete InfixExpression: &&(55)", "Delete ReturnStatement(56)", "Delete Block(57)", "Delete MethodDeclaration(58)", "Delete TextElement:  true if this sequence represents an empty range.(59)", "Delete TagElement: @return(60)", "Delete Javadoc(61)", "Delete Modifier: public(62)", "Delete PrimitiveType: boolean(63)", "Delete SimpleName: isEmpty(64)", "Delete SimpleName: list(65)", "Delete SimpleName: size(66)", "Delete MethodInvocation(67)", "Delete NumberLiteral: 1(68)", "Delete InfixExpression: ==(69)", "Delete ParenthesizedExpression(70)", "Delete SimpleName: list(71)", "Delete SimpleName: get(72)", "Delete NumberLiteral: 0(73)", "Delete MethodInvocation(74)", "Delete SimpleName: isEmpty(75)", "Delete MethodInvocation(76)", "Delete InfixExpression: &&(77)", "Delete ReturnStatement(78)", "Delete Block(79)", "Delete MethodDeclaration(80)", "Delete TextElement:  true if this sequence represents a non-point, non-empty range.(81)", "Delete TagElement: @return(82)", "Delete Javadoc(83)", "Delete Modifier: public(84)", "Delete PrimitiveType: boolean(85)", "Delete SimpleName: isRange(86)", "Delete SimpleName: list(87)", "Delete SimpleName: size(88)", "Delete MethodInvocation(89)", "Delete NumberLiteral: 1(90)", "Delete InfixExpression: >(91)", "Delete SimpleName: list(92)", "Delete SimpleName: size(93)", "Delete MethodInvocation(94)", "Delete NumberLiteral: 1(95)", "Delete InfixExpression: ==(96)", "Delete SimpleName: list(97)", "Delete SimpleName: get(98)", "Delete NumberLiteral: 0(99)", "Delete MethodInvocation(100)", "Delete SimpleName: isRange(101)", "Delete MethodInvocation(102)", "Delete InfixExpression: &&(103)", "Delete ParenthesizedExpression(104)", "Delete InfixExpression: ||(105)", "Delete ReturnStatement(106)", "Delete Block(107)", "Delete MethodDeclaration(108)", "Delete TextElement:  unmodifiable list representing this sequence(109)", "Delete TagElement: @return(110)", "Delete Javadoc(111)", "Delete Modifier: public(112)", "Delete SimpleName: List(113)", "Delete SimpleType: List(114)", "Delete SimpleName: SargInterval(115)", "Delete SimpleType: SargInterval(116)", "Delete ParameterizedType: List<SargInterval>(117)", "Delete SimpleName: getList(118)", "Delete SimpleName: ImmutableList(119)", "Delete SimpleName: copyOf(120)", "Delete SimpleName: list(121)", "Delete MethodInvocation(122)", "Delete ReturnStatement(123)", "Delete Block(124)", "Delete MethodDeclaration(125)", "Delete PrimitiveType: void(126)", "Delete SimpleName: addInterval(127)", "Delete SimpleName: SargInterval(128)", "Delete SimpleType: SargInterval(129)", "Delete SimpleName: interval(130)", "Delete SingleVariableDeclaration(131)", "Delete SimpleName: list(132)", "Delete SimpleName: add(133)", "Delete SimpleName: interval(134)", "Delete MethodInvocation(135)", "Delete ExpressionStatement(136)", "Delete Block(137)", "Delete MethodDeclaration(138)", "Delete Modifier: public(139)", "Delete SimpleName: String(140)", "Delete SimpleType: String(141)", "Delete SimpleName: toString(142)", "Delete SimpleName: list(143)", "Delete SimpleName: isEmpty(144)", "Delete MethodInvocation(145)", "Delete StringLiteral: \"()\"(146)", "Delete ReturnStatement(147)", "Delete Block(148)", "Delete IfStatement(149)", "Delete SimpleName: list(150)", "Delete SimpleName: size(151)", "Delete MethodInvocation(152)", "Delete NumberLiteral: 1(153)", "Delete InfixExpression: ==(154)", "Delete SimpleName: list(155)", "Delete SimpleName: get(156)", "Delete NumberLiteral: 0(157)", "Delete MethodInvocation(158)", "Delete SimpleName: toString(159)", "Delete MethodInvocation(160)", "Delete ReturnStatement(161)", "Delete Block(162)", "Delete IfStatement(163)", "Delete SimpleName: StringBuilder(164)", "Delete SimpleType: StringBuilder(165)", "Delete SimpleName: sb(166)", "Delete SimpleName: StringBuilder(167)", "Delete SimpleType: StringBuilder(168)", "Delete ClassInstanceCreation(169)", "Delete VariableDeclarationFragment(170)", "Delete VariableDeclarationStatement(171)", "Delete SimpleName: sb(172)", "Delete SimpleName: append(173)", "Delete QualifiedName: SargSetOperator.UNION(174)", "Delete MethodInvocation(175)", "Delete ExpressionStatement(176)", "Delete SimpleName: sb(177)", "Delete SimpleName: append(178)", "Delete StringLiteral: \"(\"(179)", "Delete MethodInvocation(180)", "Delete ExpressionStatement(181)", "Delete SimpleName: SargInterval(182)", "Delete SimpleType: SargInterval(183)", "Delete SimpleName: interval(184)", "Delete SingleVariableDeclaration(185)", "Delete SimpleName: list(186)", "Delete SimpleName: sb(187)", "Delete SimpleName: append(188)", "Delete StringLiteral: \" \"(189)", "Delete MethodInvocation(190)", "Delete ExpressionStatement(191)", "Delete SimpleName: sb(192)", "Delete SimpleName: append(193)", "Delete SimpleName: interval(194)", "Delete MethodInvocation(195)", "Delete ExpressionStatement(196)", "Delete Block(197)", "Delete EnhancedForStatement(198)", "Delete SimpleName: sb(199)", "Delete SimpleName: append(200)", "Delete StringLiteral: \" )\"(201)", "Delete MethodInvocation(202)", "Delete ExpressionStatement(203)", "Delete SimpleName: sb(204)", "Delete SimpleName: toString(205)", "Delete MethodInvocation(206)", "Delete ReturnStatement(207)", "Delete Block(208)", "Delete MethodDeclaration(209)", "Delete TypeDeclaration: class(210)"]}}, {"SargMutableEndpoint_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.reltype", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.rex", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL Javadoc", "DEL TextElement: SargMutableEndpoint exposes methods for modifying a ", "DEL Block", "DEL SimpleName: boundType", "DEL Modifier: public", "DEL SimpleName: newEndpoint", "DEL SingleVariableDeclaration", "DEL PrimitiveType: void", "DEL SimpleType: SargStrictness", "DEL SimpleName: SargFactory", "DEL SimpleName: RelDataType", "DEL SimpleName: setInfinity", "DEL MemberRef", "DEL SimpleName: setFinite", "DEL TagElement: @link", "DEL Block", "DEL Modifier: public", "DEL SimpleName: SargEndpoint", "DEL SuperConstructorInvocation", "DEL SimpleName: SargStrictness", "DEL SimpleName: dataType", "DEL SimpleName: setInfinity", "DEL SimpleName: strictness", "DEL SimpleName: SargBoundType", "DEL Javadoc", "DEL ExpressionStatement", "DEL SimpleType: SargBoundType", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL SimpleType: SargFactory", "DEL SimpleType: SargEndpoint", "DEL SimpleName: boundType", "DEL SingleVariableDeclaration", "DEL Modifier: public", "DEL SingleVariableDeclaration", "DEL SimpleType: RexNode", "DEL SimpleName: SargEndpoint", "DEL SingleVariableDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: factory", "DEL PrimitiveType: int", "DEL SimpleName: factory", "DEL SingleVariableDeclaration", "DEL SimpleName: SargMutableEndpoint", "DEL SimpleName: SargMutableEndpoint", "DEL SimpleName: RexNode", "DEL SimpleName: infinitude", "DEL SuperMethodInvocation", "DEL SimpleName: strictness", "DEL SimpleName: setFinite", "DEL SimpleName: dataType", "DEL TagElement: @see", "DEL Block", "DEL SimpleType: RelDataType", "DEL SimpleName: coordinate", "DEL SimpleName: infinitude", "DEL SimpleName: SargFactory", "DEL MethodDeclaration", "DEL TagElement", "DEL MethodDeclaration", "DEL SimpleName: coordinate", "DEL TypeDeclaration: class", "DEL PrimitiveType: void", "DEL SuperMethodInvocation", "DEL TextElement: ."]}]}}, {"SargMutableEndpoint_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.eigenbase.reltype(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.eigenbase.rex(4)", "Delete ImportDeclaration(5)", "Delete TextElement: SargMutableEndpoint exposes methods for modifying a (6)", "Delete SimpleName: SargEndpoint(7)", "Delete TagElement: @link(8)", "Delete TextElement: .(9)", "Delete TagElement(10)", "Delete Javadoc(11)", "Delete Modifier: public(12)", "Delete SimpleName: SargMutableEndpoint(13)", "Delete SimpleName: SargEndpoint(14)", "Delete SimpleType: SargEndpoint(15)", "Delete SimpleName: SargFactory(16)", "Delete SimpleName: newEndpoint(17)", "Delete MemberRef(18)", "Delete TagElement: @see(19)", "Delete Javadoc(20)", "Delete SimpleName: SargMutableEndpoint(21)", "Delete SimpleName: SargFactory(22)", "Delete SimpleType: SargFactory(23)", "Delete SimpleName: factory(24)", "Delete SingleVariableDeclaration(25)", "Delete SimpleName: RelDataType(26)", "Delete SimpleType: RelDataType(27)", "Delete SimpleName: dataType(28)", "Delete SingleVariableDeclaration(29)", "Delete SimpleName: factory(30)", "Delete SimpleName: dataType(31)", "Delete SuperConstructorInvocation(32)", "Delete Block(33)", "Delete MethodDeclaration(34)", "Delete Modifier: public(35)", "Delete PrimitiveType: void(36)", "Delete SimpleName: setInfinity(37)", "Delete PrimitiveType: int(38)", "Delete SimpleName: infinitude(39)", "Delete SingleVariableDeclaration(40)", "Delete SimpleName: setInfinity(41)", "Delete SimpleName: infinitude(42)", "Delete SuperMethodInvocation(43)", "Delete ExpressionStatement(44)", "Delete Block(45)", "Delete MethodDeclaration(46)", "Delete Modifier: public(47)", "Delete PrimitiveType: void(48)", "Delete SimpleName: setFinite(49)", "Delete SimpleName: SargBoundType(50)", "Delete SimpleType: SargBoundType(51)", "Delete SimpleName: boundType(52)", "Delete SingleVariableDeclaration(53)", "Delete SimpleName: SargStrictness(54)", "Delete SimpleType: SargStrictness(55)", "Delete SimpleName: strictness(56)", "Delete SingleVariableDeclaration(57)", "Delete SimpleName: RexNode(58)", "Delete SimpleType: RexNode(59)", "Delete SimpleName: coordinate(60)", "Delete SingleVariableDeclaration(61)", "Delete SimpleName: setFinite(62)", "Delete SimpleName: boundType(63)", "Delete SimpleName: strictness(64)", "Delete SimpleName: coordinate(65)", "Delete SuperMethodInvocation(66)", "Delete ExpressionStatement(67)", "Delete Block(68)", "Delete MethodDeclaration(69)", "Delete TypeDeclaration: class(70)"]}}, {"SargRexAnalyzer_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.relopt"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.rex", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.sql"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sql.fun", "DEL ImportDeclaration"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleType: HashMap", "DEL SimpleName: ComparisonConvertlet", "DEL SimpleName: actualBound", "DEL SimpleName: SargBinding", "DEL SimpleName: SargBinding", "DEL SimpleName: sargBindingList", "DEL SimpleName: nextSargExpr", "DEL VariableDeclarationFragment", "DEL SingleVariableDeclaration", "DEL BooleanLiteral: true", "DEL SimpleName: Void", "DEL MethodInvocation", "DEL SimpleName: getIndex", "DEL SimpleName: iter", "DEL SimpleName: nOperands", "DEL ReturnStatement", "DEL Assignment: =", "DEL MethodDeclaration", "DEL TextElement: Reconstructs a rex predicate from the non-sargable filter predicates", "DEL NullLiteral", "DEL SimpleName: clearLeaf", "DEL SimpleName: failed", "DEL Block", "DEL NullLiteral", "DEL SimpleName: add", "DEL MethodInvocation", "DEL SimpleName: ComparisonConvertlet", "DEL SimpleName: nextSargExpr", "DEL BooleanLiteral: true", "DEL InfixExpression: <", "DEL Block", "DEL SimpleType: HashSet", "DEL SimpleName: newAndNode", "DEL ThisExpression", "DEL Block", "DEL SimpleName: RexNode", "DEL NullLiteral", "DEL SimpleType: ArrayList", "DEL SimpleName: getExpr", "DEL SimpleName: idx", "DEL ClassInstanceCreation", "DEL IfStatement", "DEL SimpleName: SargBinding", "DEL ExpressionStatement", "DEL SimpleName: actualBound", "DEL MethodInvocation", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: add", "DEL TextElement:  list of SargBindings to be converted.", "DEL SimpleType: RexNode", "DEL SimpleType: Void", "DEL TextElement: Analyzes a rex predicate.", "DEL SimpleType: RexNode", "DEL SimpleType: Map", "DEL SimpleName: convertletMap", "DEL Assignment: =", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: getNonSargFilterRexNode", "DEL SimpleType: ComparisonConvertlet", "DEL PrimitiveType: boolean", "DEL SimpleName: get", "DEL SimpleName: failed", "DEL SimpleName: RexCall", "DEL SimpleName: sargBinding", "DEL SimpleName: sargBindingList", "DEL ReturnStatement", "DEL InfixExpression: !=", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: size", "DEL SimpleName: boundInputRef", "DEL SimpleType: SargBinding", "DEL SimpleName: coordinate", "DEL SimpleName: nOperands", "DEL InfixExpression: <", "DEL SimpleType: RexNode", "DEL Modifier: private", "DEL Modifier: public", "DEL SimpleName: nonSargFilterList", "DEL SimpleName: ListIterator", "DEL ThisExpression", "DEL SimpleName: RexNode", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL SimpleName: SargSetExpr", "DEL SimpleName: SargBinding", "DEL SimpleName: SargExpr", "DEL FieldDeclaration", "DEL SimpleName: i", "DEL MethodDeclaration", "DEL SimpleName: sargBindingList", "DEL Block", "DEL SimpleName: getExpr", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: Void", "DEL SimpleName: sarg2RexMap", "DEL SimpleName: sargBindingList", "DEL TypeDeclaration: class", "DEL IfStatement", "DEL SimpleName: convertlet", "DEL SimpleName: put", "DEL SimpleName: registerConvertlet", "DEL SimpleName: exprStack", "DEL ParenthesizedExpression", "DEL Block", "DEL SimpleName: expr", "DEL SimpleName: HashSet", "DEL SimpleName: add", "DEL SimpleName: collectDynamicParams", "DEL ClassInstanceCreation", "DEL SimpleType: CallConvertlet", "DEL VariableDeclarationFragment", "DEL SimpleType: RexNode", "DEL TextElement: Tests whether we can support the usage of dynamic parameters in a given", "DEL TagElement: @return", "DEL NullLiteral", "DEL ReturnStatement", "DEL SimpleName: factory", "DEL SimpleType: RexCall", "DEL SimpleName: setOp", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL SimpleName: convertlet", "DEL FieldAccess", "DEL SimpleName: ComparisonConvertlet", "DEL SimpleName: sargBindingList", "DEL SimpleName: iter", "DEL VariableDeclarationStatement", "DEL FieldDeclaration", "DEL BooleanLiteral: true", "DEL SimpleName: ComparisonConvertlet", "DEL ExpressionStatement", "DEL InfixExpression: ==", "DEL Block", "DEL VariableDeclarationStatement", "DEL InstanceofExpression", "DEL SimpleName: strictness", "DEL IfStatement", "DEL Javadoc", "DEL QualifiedName: SargSetOperator.INTERSECTION", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL BooleanLiteral: false", "DEL Assignment: =", "DEL QualifiedName: SargStrictness.CLOSED", "DEL SimpleName: remove", "DEL MethodInvocation", "DEL SimpleName: testDynamicParamSupport", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: simpleMode", "DEL Block", "DEL SimpleName: NodeVisitor", "DEL SimpleName: sargBindingList", "DEL SimpleName: variableSeen", "DEL Modifier: final", "DEL SimpleName: sargBindingList", "DEL SimpleType: RexNode", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL SimpleName: i", "DEL SimpleName: boundRefList", "DEL InfixExpression: !=", "DEL SimpleName: failed", "DEL MethodInvocation", "DEL SimpleName: BooleanConvertlet", "DEL SimpleName: i", "DEL Assignment: =", "DEL ParameterizedType: List<Integer>", "DEL TagElement: @param", "DEL QualifiedName: SargStrictness.CLOSED", "DEL SimpleName: getRexBuilder", "DEL MethodInvocation", "DEL SimpleType: SargSetExpr", "DEL Block", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL TypeDeclaration: class", "DEL VariableDeclarationStatement", "DEL Block", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: factory", "DEL SimpleName: List", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL SimpleName: List", "DEL SimpleName: registerConvertlet", "DEL NullLiteral", "DEL ParameterizedType: List<RexNode>", "DEL QualifiedName: SargStrictness.CLOSED", "DEL FieldDeclaration", "DEL Assignment: =", "DEL Modifier: public", "DEL NullLiteral", "DEL SingleVariableDeclaration", "DEL SimpleName: IS_FALSE", "DEL SingleVariableDeclaration", "DEL SimpleName: ComparisonConvertlet", "DEL NullLiteral", "DEL Block", "DEL SimpleName: boundType", "DEL SimpleName: get", "DEL SimpleType: RexNode", "DEL SuperMethodInvocation", "DEL NullLiteral", "DEL MethodDeclaration", "DEL SimpleType: RexCall", "DEL SimpleType: NodeVisitor", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL QualifiedName: SargSetOperator.INTERSECTION", "DEL ReturnStatement", "DEL SimpleName: visitRangeRef", "DEL VariableDeclarationFragment", "DEL SimpleName: factory", "DEL Block", "DEL SimpleName: sargBindingList", "DEL SimpleType: RexInputRef", "DEL SimpleName: getRexBuilder", "DEL NumberLiteral: 0", "DEL SimpleName: strictness", "DEL MethodDeclaration", "DEL VariableDeclarationFragment", "DEL SimpleName: get", "DEL Block", "DEL SimpleName: residualSargList", "DEL SimpleName: exprStack", "DEL SimpleName: convertletMap", "DEL SimpleName: SargBinding", "DEL SimpleName: getOperator", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleName: nextNode", "DEL SimpleName: listIterator", "DEL SimpleType: Void", "DEL VariableDeclarationFragment", "DEL SimpleType: RexNode", "DEL ExpressionStatement", "DEL SimpleName: getExpr", "DEL SimpleName: RelOptUtil", "DEL Block", "DEL VariableDeclarationFragment", "DEL Block", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL SimpleName: RexInputRef", "DEL IfStatement", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL SimpleName: getExpr", "DEL Javadoc", "DEL SimpleName: size", "DEL BooleanLiteral: true", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SwitchCase", "DEL SimpleName: rexPredicate", "DEL SimpleName: SargBinding", "DEL SimpleName: RexInputRef", "DEL SimpleType: RexInputRef", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: false", "DEL ContinueStatement", "DEL SimpleName: isRange", "DEL SimpleName: sarg2RexMap", "DEL SimpleName: inputRef", "DEL SimpleName: lowerRexInputIdx", "DEL SimpleName: SargStrictness", "DEL IfStatement", "DEL Assignment: =", "DEL NullLiteral", "DEL SimpleName: failed", "DEL SimpleName: getOperands", "DEL SimpleName: analyze", "DEL ExpressionStatement", "DEL SimpleType: SargSetExpr", "DEL SimpleName: SargBinding", "DEL SimpleName: nonSargFilterList", "DEL SimpleType: ArrayList", "DEL SimpleName: variableSeen", "DEL SimpleName: sargBinding", "DEL BooleanLiteral: true", "DEL FieldDeclaration", "DEL SimpleName: rexPredicate", "DEL NullLiteral", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL SimpleName: add", "DEL ParameterizedType: List<SargBinding>", "DEL SimpleName: sargBinding", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: NodeVisitor", "DEL SimpleName: newBinding", "DEL SimpleType: BooleanConvertlet", "DEL Modifier: final", "DEL SimpleName: SargRexAnalyzer", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: visitCorrelVariable", "DEL FieldDeclaration", "DEL QualifiedName: SargBoundType.UPPER", "DEL SimpleName: nextSargExpr", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: Map", "DEL VariableDeclarationStatement", "DEL SimpleName: simpleMode", "DEL SimpleType: Void", "DEL Block", "DEL SimpleName: failed", "DEL ParameterizedType: ArrayList<SargBinding>", "DEL SimpleType: ComparisonConvertlet", "DEL SimpleType: RexNode", "DEL SimpleType: List", "DEL VariableDeclarationStatement", "DEL SimpleName: factory", "DEL SimpleName: clearLeaf", "DEL SimpleName: Integer", "DEL Block", "DEL VariableDeclarationFragment", "DEL SimpleName: upperRexInputIdx", "DEL InfixExpression: ==", "DEL SimpleName: currSargExpr", "DEL BreakStatement", "DEL SimpleName: registerConvertlet", "DEL SimpleName: registerConvertlet", "DEL Assignment: =", "DEL SimpleName: Void", "DEL SimpleName: sargBindingList", "DEL TagElement: @return", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: sarg2RexMap", "DEL SimpleName: next", "DEL ClassInstanceCreation", "DEL InfixExpression: >=", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ParameterizedType: HashMap<SargExpr,RexNode>", "DEL SimpleName: ArrayList", "DEL NullLiteral", "DEL SimpleName: RexDynamicParam", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL IfStatement", "DEL TextElement:  use ", "DEL SimpleType: RexNode", "DEL SimpleName: Integer", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: HashMap", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: recomp", "DEL SimpleName: IS_NULL", "DEL SimpleName: sarg2RexMap", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL SimpleName: boundType", "DEL IfStatement", "DEL PrefixExpression: !", "DEL VariableDeclarationFragment", "DEL SimpleName: factory", "DEL SimpleName: expr", "DEL Block", "DEL SimpleName: getExpr", "DEL VariableDeclarationFragment", "DEL SimpleName: rexPredicate", "DEL SimpleName: i", "DEL BooleanLiteral: true", "DEL SimpleName: currAndNode", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL ParameterizedType: ListIterator<SargBinding>", "DEL SimpleName: SargExpr", "DEL BooleanLiteral: true", "DEL Block", "DEL PrimitiveType: int", "DEL TextElement: If >= 0, treat RexInputRefs whose index is within the range", "DEL SimpleType: RexNode", "DEL SimpleType: SargBinding", "DEL SimpleName: SargBinding", "DEL PrimitiveType: int", "DEL SimpleName: sargBindingList", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL SimpleName: i", "DEL ThisExpression", "DEL SimpleName: nonSargFilterList", "DEL SimpleName: nonSargFilterList", "DEL VariableDeclarationExpression", "DEL SingleVariableDeclaration", "DEL SimpleName: rangeFound", "DEL SimpleType: ComparisonConvertlet", "DEL Block", "DEL SimpleName: failed", "DEL Block", "DEL Assignment: =", "DEL SimpleName: SargBinding", "DEL SimpleName: setOp", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: failed", "DEL SimpleName: dynamicParams", "DEL SimpleName: coordinate", "DEL SimpleType: SargExpr", "DEL ExpressionStatement", "DEL SimpleName: variableSeen", "DEL TextElement: SargExpr.", "DEL SimpleName: listIterator", "DEL Modifier: public", "DEL ContinueStatement", "DEL Javadoc", "DEL SimpleName: remove", "DEL SimpleName: visitCall", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: recomp", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL SimpleName: setOp", "DEL Block", "DEL ExpressionStatement", "DEL Block", "DEL Block", "DEL SimpleName: failed", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: visitor", "DEL SimpleType: SargExpr", "DEL Assignment: =", "DEL SimpleName: i", "DEL MethodInvocation", "DEL ThisExpression", "DEL Modifier: final", "DEL SimpleName: recomposeConjunction", "DEL SimpleName: boundInputRef", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: sargSeq", "DEL Assignment: =", "DEL SimpleName: nextBinding", "DEL SimpleName: visitCall", "DEL ReturnStatement", "DEL SimpleName: setOp", "DEL SimpleType: SargIntervalExpr", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleType: RexNode", "DEL Modifier: private", "DEL ExpressionStatement", "DEL SimpleName: exprStack", "DEL InfixExpression: &&", "DEL InfixExpression: <", "DEL Assignment: =", "DEL SimpleName: hasNext", "DEL PrimitiveType: boolean", "DEL SimpleName: failed", "DEL MethodDeclaration", "DEL SimpleName: sarg2RexMap", "DEL SimpleName: nextRef", "DEL SimpleType: SargBinding", "DEL NullLiteral", "DEL SimpleType: SargBinding", "DEL SingleVariableDeclaration", "DEL SimpleName: RexVisitorImpl", "DEL SimpleType: CallConvertlet", "DEL ReturnStatement", "DEL SimpleName: boundType", "DEL SimpleName: Map", "DEL Block", "DEL FieldAccess", "DEL Assignment: =", "DEL Modifier: private", "DEL SimpleName: analyzeAll", "DEL WhileStatement", "DEL SimpleName: expr", "DEL ReturnStatement", "DEL SimpleName: convert", "DEL SimpleName: boundInputRef", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL SimpleName: boundInputRef", "DEL IfStatement", "DEL SimpleType: SargBinding", "DEL SimpleName: ArrayList", "DEL SimpleName: rexPred", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL Block", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleName: currSargExpr", "DEL MethodInvocation", "DEL InfixExpression: <", "DEL SimpleName: SargIntervalExpr", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL Modifier: abstract", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleName: SqlOperator", "DEL SimpleName: iter", "DEL SimpleName: get", "DEL SimpleName: factory", "DEL SimpleType: RexInputRef", "DEL MethodInvocation", "DEL SimpleName: sarg2RexMap", "DEL SimpleType: CallConvertlet", "DEL SimpleType: RexDynamicParam", "DEL SimpleName: Set", "DEL SimpleName: sargExpr", "DEL VariableDeclarationFragment", "DEL SimpleType: Set", "DEL ParameterizedType: ArrayList<Integer>", "DEL SimpleName: SargBinding", "DEL InfixExpression: ==", "DEL SwitchCase", "DEL BooleanLiteral: true", "DEL Assignment: =", "DEL SimpleName: List", "DEL SimpleType: SargExpr", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: boundInputRef", "DEL MethodInvocation", "DEL SimpleName: add", "DEL MethodDeclaration", "DEL SimpleType: SqlOperator", "DEL IfStatement", "DEL SimpleName: RexNode", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: isRealRexInputRef", "DEL SimpleName: coordinate", "DEL Modifier: private", "DEL Block", "DEL SimpleType: RexFieldAccess", "DEL SimpleName: getNonSargFilterRexNode", "DEL SimpleName: newAndNode", "DEL SingleVariableDeclaration", "DEL SimpleType: RexNode", "DEL MethodInvocation", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL Block", "DEL SimpleName: visitCoordinate", "DEL Modifier: private", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: visitCoordinate", "DEL SimpleName: rexPred", "DEL TagElement", "DEL SimpleName: dynamicParams", "DEL PostfixExpression: ++", "DEL TagElement", "DEL SimpleType: ListIterator", "DEL InfixExpression: ==", "DEL SimpleName: clearLeaf", "DEL SimpleName: RexNode", "DEL SimpleName: visitCoordinate", "DEL PrefixExpression: !", "DEL VariableDeclarationFragment", "DEL SimpleType: RexNode", "DEL Modifier: private", "DEL SimpleName: failed", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: registerConvertlet", "DEL MethodInvocation", "DEL TextElement: Reconstructs a rex predicate from a list of SargBindings which are AND'ed", "DEL NumberLiteral: 0", "DEL SimpleName: rexPred", "DEL SimpleName: RexNode", "DEL QualifiedName: SqlStdOperatorTable.OR", "DEL ExpressionStatement", "DEL SimpleType: Void", "DEL TextElement: Reconstructs a rex predicate from a list of SargExprs which will be", "DEL SimpleName: sargBindingList", "DEL SimpleName: sarg2RexMap", "DEL SimpleName: currRef", "DEL Assignment: =", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: call", "DEL SimpleName: sargBinding", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: nonSargFilterList", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: remove", "DEL SimpleName: i", "DEL SimpleName: RexOver", "DEL SimpleName: setPoint", "DEL SimpleName: variableSeen", "DEL TextElement: SargRexAnalyzer attempts to translate a rex predicate into a ", "DEL SimpleName: op", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleType: RexNode", "DEL SimpleType: Void", "DEL SimpleName: nextRef", "DEL Modifier: private", "DEL SimpleName: iter", "DEL Modifier: private", "DEL SimpleName: HashMap", "DEL SimpleName: coordinate", "DEL ExpressionStatement", "DEL SimpleName: SargSetOperator", "DEL SimpleType: RexCorrelVariable", "DEL MethodDeclaration", "DEL SimpleName: RexInputRef", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: SargExpr", "DEL SimpleName: RexNode", "DEL ReturnStatement", "DEL TextElement: [lowerRexInputIdx, upperRexInputIdx) as coordinates in expressions", "DEL Modifier: final", "DEL SimpleName: simpleMode", "DEL SingleVariableDeclaration", "DEL SimpleName: nextSargExpr", "DEL ReturnStatement", "DEL Javadoc", "DEL SimpleName: idx", "DEL MethodInvocation", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL SimpleName: boundInputRef", "DEL SimpleName: newAndNode", "DEL SimpleName: iter", "DEL ClassInstanceCreation", "DEL FieldAccess", "DEL SimpleName: convert", "DEL SimpleName: convertletMap", "DEL Modifier: private", "DEL SimpleName: sarg2RexMap", "DEL Block", "DEL SimpleType: RexCall", "DEL VariableDeclarationExpression", "DEL PrimitiveType: int", "DEL ExpressionStatement", "DEL MethodDeclaration", "DEL Modifier: private", "DEL SimpleType: RexNode", "DEL SimpleName: getIndex", "DEL SimpleName: sarg2RexMap", "DEL SimpleName: expr", "DEL Block", "DEL InfixExpression: +", "DEL SimpleType: RexInputRef", "DEL SimpleName: ArrayList", "DEL SimpleName: sargExpr", "DEL PrimitiveType: void", "DEL VariableDeclarationStatement", "DEL SimpleName: sargBinding", "DEL NumberLiteral: 1", "DEL ClassInstanceCreation", "DEL ParameterizedType: HashSet<RexDynamicParam>", "DEL SimpleName: Void", "DEL Block", "DEL SimpleName: correlVariable", "DEL ForStatement", "DEL MethodInvocation", "DEL SimpleName: size", "DEL MethodInvocation", "DEL SimpleName: SargFactory", "DEL SimpleName: sargBindingList", "DEL SimpleName: dynamicParam", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL Block", "DEL NullLiteral", "DEL SimpleType: SargBinding", "DEL SimpleName: analyze", "DEL SimpleType: SargBoundType", "DEL Block", "DEL ReturnStatement", "DEL SimpleName: newIntervalExpr", "DEL BooleanLiteral: true", "DEL PrimitiveType: int", "DEL BooleanLiteral: false", "DEL SimpleName: currSargExpr", "DEL ExpressionStatement", "DEL SimpleName: ComparisonConvertlet", "DEL SingleVariableDeclaration", "DEL SimpleName: add", "DEL SimpleName: ComparisonConvertlet", "DEL ContinueStatement", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL TextElement:  the rex predicate reconstructed from the non-sargable predicates.", "DEL SimpleType: NodeVisitor", "DEL InfixExpression: ==", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: getInputRef", "DEL InfixExpression: -", "DEL SimpleName: CallConvertlet", "DEL SimpleName: List", "DEL SimpleName: registerConvertlet", "DEL SimpleName: iter", "DEL TagElement", "DEL SimpleName: RexRangeRef", "DEL Modifier: private", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: over", "DEL VariableDeclarationFragment", "DEL SimpleName: makeLiteral", "DEL SimpleType: List", "DEL SimpleName: node", "DEL SimpleName: failed", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL SimpleName: isEmpty", "DEL ParameterizedType: Map<SargExpr,RexNode>", "DEL SimpleName: registerConvertlet", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL SimpleName: factory", "DEL Block", "DEL SimpleName: BooleanConvertlet", "DEL SimpleName: newSetExpr", "DEL MethodInvocation", "DEL SimpleType: Void", "DEL SimpleName: BooleanConvertlet", "DEL SimpleName: getSargBindingListToRexNode", "DEL SimpleName: coordinate", "DEL Modifier: final", "DEL SimpleName: registerConvertlet", "DEL SimpleName: makeCall", "DEL ExpressionStatement", "DEL SimpleType: SargFactory", "DEL ExpressionStatement", "DEL SimpleName: simpleMode", "DEL SimpleName: testDynamicParamSupport", "DEL ExpressionStatement", "DEL SimpleName: getExpr", "DEL SimpleType: CallConvertlet", "DEL SimpleName: expr", "DEL SimpleName: boundInputRef", "DEL SimpleName: BooleanConvertlet", "DEL SingleVariableDeclaration", "DEL SimpleName: recomposeConjunction", "DEL SimpleName: currAndNode", "DEL PrimitiveType: boolean", "DEL SimpleName: simpleMode", "DEL SimpleName: SargFactory", "DEL SimpleType: Void", "DEL SimpleName: boundType", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: List", "DEL WhileStatement", "DEL SimpleName: i", "DEL Block", "DEL SimpleName: sargBindingList", "DEL InfixExpression: >=", "DEL InfixExpression: ==", "DEL SimpleName: expr", "DEL TagElement: @param", "DEL SimpleName: newAndNode", "DEL SimpleName: lowerRexInputIdx", "DEL SimpleName: testDynamicParamSupport", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleType: SargBinding", "DEL Javadoc", "DEL SimpleType: Void", "DEL SimpleName: SqlOperator", "DEL SimpleName: next", "DEL ExpressionStatement", "DEL SimpleName: contains", "DEL Modifier: private", "DEL TextElement: well-formed.", "DEL SimpleType: HashMap", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL Modifier: public", "DEL SimpleName: SargExpr", "DEL SimpleName: upperRexInputRef", "DEL SimpleName: convertlet", "DEL SimpleName: CallConvertlet", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL AssertStatement", "DEL InfixExpression: <", "DEL ExpressionStatement", "DEL SimpleName: visitFieldAccess", "DEL ClassInstanceCreation", "DEL SimpleName: convert", "DEL SimpleName: i", "DEL ClassInstanceCreation", "DEL SimpleType: ComparisonConvertlet", "DEL SimpleName: size", "DEL MethodDeclaration", "DEL SimpleName: ComparisonConvertlet", "DEL MethodDeclaration", "DEL SimpleName: makeCall", "DEL Assignment: =", "DEL Modifier: public", "DEL SimpleName: factory", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL NumberLiteral: 0", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL ForStatement", "DEL Javadoc", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Modifier: private", "DEL ParameterizedType: ArrayList<SargExpr>", "DEL InfixExpression: ==", "DEL SimpleName: ListIterator", "DEL BreakStatement", "DEL Assignment: =", "DEL TagElement: @deprecated", "DEL FieldDeclaration", "DEL IfStatement", "DEL SimpleName: failed", "DEL Modifier: public", "DEL SimpleType: CallConvertlet", "DEL SimpleName: rexPredicate", "DEL VariableDeclarationFragment", "DEL SimpleName: fieldAccess", "DEL SuperConstructorInvocation", "DEL SimpleName: literal", "DEL InfixExpression: >=", "DEL ParameterizedType: RexVisitorImpl<Void>", "DEL SimpleName: upperRexInputIdx", "DEL NullLiteral", "DEL SimpleName: lowerRexInputRef", "DEL MethodInvocation", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: SargSetExpr", "DEL PrimitiveType: boolean", "DEL Assignment: =", "DEL InfixExpression: ||", "DEL ParameterizedType: List<SargBinding>", "DEL SimpleName: rexPred", "DEL SimpleType: RexNode", "DEL SimpleName: isEmpty", "DEL SimpleName: nonSargFilterList", "DEL MethodInvocation", "DEL SimpleName: factory", "DEL SimpleName: op", "DEL SimpleName: expr", "DEL SimpleName: call", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL Modifier: private", "DEL SimpleName: i", "DEL ExpressionStatement", "DEL SimpleType: ArrayList", "DEL SimpleName: nextBinding", "DEL Modifier: private", "DEL MethodInvocation", "DEL SimpleName: factory", "DEL SingleVariableDeclaration", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: SargBoundType", "DEL ExpressionStatement", "DEL SimpleName: RexCorrelVariable", "DEL VariableDeclarationStatement", "DEL SwitchCase", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL QualifiedName: SqlStdOperatorTable.GREATER_THAN", "DEL SimpleName: nextNode", "DEL QualifiedName: SargStrictness.CLOSED", "DEL MethodDeclaration", "DEL SimpleType: RexVisitorImpl", "DEL MethodInvocation", "DEL SimpleName: convertletMap", "DEL TagElement", "DEL SimpleName: RexNode", "DEL TextElement: Analyzes a rex predicate.", "DEL SimpleName: iter", "DEL SimpleName: currRef", "DEL TagElement: @param", "DEL SimpleType: RexLiteral", "DEL VariableDeclarationStatement", "DEL Assignment: =", "DEL SimpleName: List", "DEL PrimitiveType: boolean", "DEL FieldAccess", "DEL SimpleName: remove", "DEL SimpleName: currRef", "DEL SimpleName: put", "DEL SimpleName: i", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: literal", "DEL SimpleName: nonSargFilterList", "DEL NumberLiteral: 0", "DEL ParameterizedType: HashMap<SqlOperator,CallConvertlet>", "DEL SimpleName: SargBinding", "DEL TextElement:  use ", "DEL Block", "DEL MethodDeclaration", "DEL SimpleName: inputRef", "DEL Block", "DEL FieldDeclaration", "DEL MethodRefParameter", "DEL SimpleName: size", "DEL SimpleName: rexPredicate", "DEL BooleanLiteral: true", "DEL SimpleName: makeCall", "DEL SimpleName: inputRef", "DEL SimpleName: RexInputRef", "DEL PrimitiveType: void", "DEL ReturnStatement", "DEL SimpleName: exprStack", "DEL ExpressionStatement", "DEL PrefixExpression: -", "DEL MethodInvocation", "DEL SimpleType: Integer", "DEL SimpleName: coordinate", "DEL QualifiedName: SargStrictness.CLOSED", "DEL VariableDeclarationFragment", "DEL SimpleName: RexInputRef", "DEL IfStatement", "DEL Modifier: final", "DEL SimpleName: variableSeen", "DEL ExpressionStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL BooleanLiteral: false", "DEL SimpleName: expr", "DEL SimpleName: newBinding", "DEL SimpleName: getInputRef", "DEL SimpleName: makeLiteral", "DEL SimpleName: currSargExpr", "DEL ReturnStatement", "DEL SingleVariableDeclaration", "DEL SimpleType: SargBinding", "DEL SimpleName: visitOver", "DEL QualifiedName: SargStrictness.OPEN", "DEL SimpleName: SargRexAnalyzer", "DEL SimpleName: actualBound", "DEL ExpressionStatement", "DEL SimpleType: SargIntervalExpr", "DEL VariableDeclarationFragment", "DEL SimpleType: SargBinding", "DEL FieldDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: factory", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleType: RexCall", "DEL SimpleType: List", "DEL SimpleName: RexNode", "DEL SimpleName: call", "DEL SimpleName: RexNode", "DEL SimpleName: currBinding", "DEL TextElement: If true, conjuntions on the same input reference are disallowed, as well", "DEL SimpleName: size", "DEL EnhancedForStatement", "DEL SimpleName: inputRef", "DEL ExpressionStatement", "DEL SimpleName: nonSargFilterList", "DEL SimpleName: sargBindingList", "DEL SimpleName: failed", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: RexNode", "DEL SimpleName: CallConvertlet", "DEL SimpleName: i", "DEL MethodInvocation", "DEL SimpleName: getIndex", "DEL SimpleType: SargExpr", "DEL SimpleType: SargExpr", "DEL SimpleType: ComparisonConvertlet", "DEL ExpressionStatement", "DEL SimpleName: SargExpr", "DEL ExpressionStatement", "DEL SimpleName: getRexBuilder", "DEL SimpleName: addChild", "DEL BooleanLiteral: true", "DEL SimpleName: getResidualSargRexNode", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL ReturnStatement", "DEL NullLiteral", "DEL SimpleType: ArrayList", "DEL MethodInvocation", "DEL Assignment: =", "DEL PrimitiveType: void", "DEL SimpleName: clearLeaf", "DEL ForStatement", "DEL SimpleName: SargBoundType", "DEL Block", "DEL SimpleName: SargStrictness", "DEL SimpleName: RexNode", "DEL SimpleName: sargExpr", "DEL VariableDeclarationFragment", "DEL SimpleName: SargExpr", "DEL ReturnStatement", "DEL ExpressionStatement", "DEL Assignment: =", "DEL VariableDeclarationFragment", "DEL VariableDeclarationFragment", "DEL SimpleName: add", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: SargExpr", "DEL ExpressionStatement", "DEL TagElement", "DEL Block", "DEL SimpleName: List", "DEL InfixExpression: &&", "DEL MethodInvocation", "DEL SimpleType: SargBinding", "DEL SimpleName: exprStack", "DEL ExpressionStatement", "DEL ParameterizedType: List<SargBinding>", "DEL SimpleName: inputRef", "DEL SingleVariableDeclaration", "DEL SimpleName: boundInputRef", "DEL MethodDeclaration", "DEL Block", "DEL SimpleName: ComparisonConvertlet", "DEL ExpressionStatement", "DEL SimpleName: currAndNode", "DEL QualifiedName: SqlStdOperatorTable.AND", "DEL SimpleType: SargBinding", "DEL SimpleType: ComparisonConvertlet", "DEL VariableDeclarationFragment", "DEL SimpleName: call", "DEL Block", "DEL SimpleName: getRexBuilder", "DEL BooleanLiteral: false", "DEL NumberLiteral: 1", "DEL Block", "DEL SingleVariableDeclaration", "DEL SimpleName: SargBinding", "DEL SimpleName: RexCall", "DEL TextElement: AND'ed together.", "DEL TagElement: @return", "DEL SimpleName: simpleMode", "DEL ReturnStatement", "DEL Modifier: public", "DEL MethodInvocation", "DEL SimpleName: coordinate", "DEL InfixExpression: <", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL QualifiedName: SargStrictness.OPEN", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL IfStatement", "DEL Javadoc", "DEL MethodInvocation", "DEL SimpleName: sargBindingList", "DEL QualifiedName: SargBoundType.UPPER", "DEL InfixExpression: <", "DEL SimpleType: CallConvertlet", "DEL MethodInvocation", "DEL InfixExpression: !=", "DEL SimpleType: Integer", "DEL SimpleName: nextBinding", "DEL MethodDeclaration", "DEL TypeDeclaration: class", "DEL NullLiteral", "DEL Javadoc", "DEL MethodInvocation", "DEL MethodInvocation", "DEL PostfixExpression: ++", "DEL MethodInvocation", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL Block", "DEL BooleanLiteral: true", "DEL SimpleName: ComparisonConvertlet", "DEL SimpleName: nOperands", "DEL SimpleName: getIndex", "DEL TypeDeclaration: class", "DEL Assignment: =", "DEL SimpleType: SargExpr", "DEL VariableDeclarationStatement", "DEL SimpleType: RexDynamicParam", "DEL SimpleName: boundType", "DEL ExpressionStatement", "DEL SimpleType: RexDynamicParam", "DEL ExpressionStatement", "DEL SimpleName: upperRexInputIdx", "DEL SimpleName: getIndex", "DEL SimpleName: getIndex", "DEL ClassInstanceCreation", "DEL ThisExpression", "DEL ParameterizedType: Set<RexDynamicParam>", "DEL Modifier: private", "DEL SimpleName: op", "DEL SimpleName: expr", "DEL SimpleName: failed", "DEL MethodInvocation", "DEL SimpleName: dynamicParam", "DEL TagElement", "DEL ExpressionStatement", "DEL PrefixExpression: -", "DEL NullLiteral", "DEL SimpleName: convertlet", "DEL ReturnStatement", "DEL QualifiedName: SargSetOperator.COMPLEMENT", "DEL SimpleName: visitor", "DEL BooleanLiteral: true", "DEL SimpleName: RexNode", "DEL SimpleName: rexPredicate", "DEL SimpleName: currAndNode", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: rangeFound", "DEL SingleVariableDeclaration", "DEL SimpleName: RexNode", "DEL Assignment: =", "DEL TextElement:  corresponding bound sarg expression, or null if analysis failed", "DEL SimpleName: get", "DEL MethodInvocation", "DEL SimpleName: registerConvertlet", "DEL SimpleName: simpleMode", "DEL SimpleName: addChild", "DEL VariableDeclarationFragment", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: remove", "DEL IfStatement", "DEL ClassInstanceCreation", "DEL SimpleName: i", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: IS_TRUE", "DEL SimpleName: getRexBuilder", "DEL BooleanLiteral: true", "DEL MethodInvocation", "DEL SimpleName: upperRexInputIdx", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL SimpleType: List", "DEL TagElement", "DEL PrimitiveType: boolean", "DEL SimpleType: SargSetOperator", "DEL Block", "DEL SimpleName: call", "DEL SimpleType: ComparisonConvertlet", "DEL Assignment: =", "DEL SimpleType: ListIterator", "DEL SimpleName: factory", "DEL SimpleType: SqlOperator", "DEL Modifier: private", "DEL SimpleName: simpleMode", "DEL TagElement: @link", "DEL SimpleName: failed", "DEL IfStatement", "DEL QualifiedName: SqlStdOperatorTable.LESS_THAN", "DEL Block", "DEL SimpleName: variableSeen", "DEL SimpleName: List", "DEL FieldDeclaration", "DEL Modifier: final", "DEL SimpleName: call", "DEL SimpleName: RexNode", "DEL NullLiteral", "DEL SimpleName: sargBindingList", "DEL Assignment: =", "DEL AssertStatement", "DEL BooleanLiteral: true", "DEL TextElement: If >= 0, treat RexInputRefs whose index is within the range", "DEL SimpleName: exprStack", "DEL ExpressionStatement", "DEL PrimitiveType: int", "DEL Assignment: =", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: get", "DEL InfixExpression: ||", "DEL Block", "DEL SimpleType: SargExpr", "DEL MethodInvocation", "DEL TagElement: @return", "DEL IfStatement", "DEL SwitchStatement", "DEL SimpleName: reverse", "DEL IfStatement", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: Void", "DEL ParameterizedType: Map<SqlOperator,CallConvertlet>", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: remove", "DEL SimpleName: lowerRexInputRef", "DEL MethodInvocation", "DEL SimpleName: sargExpr", "DEL SimpleName: expr", "DEL MethodInvocation", "DEL SimpleName: rexPred", "DEL SimpleType: RexNode", "DEL QualifiedName: SqlStdOperatorTable.IS_UNKNOWN", "DEL SimpleType: ComparisonConvertlet", "DEL SimpleName: strictness", "DEL BooleanLiteral: true", "DEL SimpleType: List", "DEL SimpleName: getSargBindingListToRexNode", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL NumberLiteral: 1", "DEL SimpleName: failed", "DEL TextElement:  a list of SargBindings contained in the input rex predicate", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: getIndex", "DEL Javadoc", "DEL MethodInvocation", "DEL TagElement", "DEL SingleVariableDeclaration", "DEL SimpleName: exprStack", "DEL SimpleName: inputRef", "DEL SimpleName: RexCall", "DEL SimpleName: visitLiteral", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL TagElement", "DEL Block", "DEL Assignment: =", "DEL ParameterizedType: List<SargExpr>", "DEL TextElement: which are AND'ed together.", "DEL SimpleName: call", "DEL PrimitiveType: int", "DEL SimpleName: get", "DEL SimpleName: CallConvertlet", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: RexCall", "DEL VariableDeclarationFragment", "DEL QualifiedName: SqlStdOperatorTable.IS_TRUE", "DEL VariableDeclarationFragment", "DEL Modifier: public", "DEL FieldDeclaration", "DEL SimpleName: boundInputRef", "DEL SimpleName: isEmpty", "DEL SimpleName: NodeVisitor", "DEL SimpleName: hasNext", "DEL ExpressionStatement", "DEL SimpleName: constantNull", "DEL ParameterizedType: ListIterator<SargExpr>", "DEL ExpressionStatement", "DEL SimpleName: currSargExpr", "DEL VariableDeclarationStatement", "DEL SimpleName: put", "DEL TextElement:  true if supported", "DEL NullLiteral", "DEL SimpleName: Void", "DEL MethodInvocation", "DEL SimpleName: RexInputRef", "DEL ThisExpression", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: upperRexInputIdx", "DEL Block", "DEL SimpleName: RexDynamicParam", "DEL SimpleName: SargExpr", "DEL SimpleName: convert", "DEL SimpleName: registerConvertlet", "DEL SimpleName: newAndNode", "DEL NullLiteral", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: currSargExpr", "DEL VariableDeclarationFragment", "DEL SimpleName: newAndNode", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL Block", "DEL QualifiedName: SargStrictness.CLOSED", "DEL SimpleName: size", "DEL SimpleName: lowerRexInputIdx", "DEL SimpleName: exprStack", "DEL SimpleName: reverse", "DEL MethodInvocation", "DEL TagElement: @deprecated", "DEL IfStatement", "DEL SimpleName: exprStack", "DEL SimpleName: nonSargFilterList", "DEL SimpleName: expr", "DEL PrimitiveType: void", "DEL MethodInvocation", "DEL NumberLiteral: 1", "DEL SimpleName: upperRexInputIdx", "DEL Modifier: public", "DEL QualifiedName: SargBoundType.UPPER", "DEL SimpleName: strictness", "DEL ReturnStatement", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: call", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL NumberLiteral: 1", "DEL SimpleName: rexPred", "DEL QualifiedName: SqlStdOperatorTable.EQUALS", "DEL Block", "DEL FieldDeclaration", "DEL SimpleName: RexNode", "DEL SimpleType: BooleanConvertlet", "DEL SimpleName: factory", "DEL SimpleName: inputRef", "DEL SimpleName: RexNode", "DEL SimpleName: reverse", "DEL SimpleType: BooleanConvertlet", "DEL PrimitiveType: boolean", "DEL MethodInvocation", "DEL Modifier: final", "DEL ExpressionStatement", "DEL SimpleName: boundInputRef", "DEL SimpleName: SargFactory", "DEL SimpleName: rexCFList", "DEL SimpleName: rangeFound", "DEL SimpleName: SqlOperator", "DEL SimpleName: CallConvertlet", "DEL MethodInvocation", "DEL SimpleName: boundRefList", "DEL SimpleType: SargExpr", "DEL ReturnStatement", "DEL TextElement: [lowerRexInputIdx, upperRexInputIdx) as coordinates in expressions", "DEL SimpleName: getNonSargFilterRexNode", "DEL FieldDeclaration", "DEL InfixExpression: <", "DEL SimpleName: strictness", "DEL BooleanLiteral: true", "DEL PrimitiveType: void", "DEL SimpleName: node", "DEL Modifier: private", "DEL SimpleName: getSargBindingListToRexNode", "DEL SimpleName: visitCoordinate", "DEL SimpleName: SargBoundType", "DEL ExpressionStatement", "DEL SimpleName: convertlet", "DEL IfStatement", "DEL Modifier: public", "DEL NullLiteral", "DEL SimpleName: failed", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: lowerRexInputIdx", "DEL QualifiedName: SargBoundType.LOWER", "DEL MethodInvocation", "DEL SimpleName: visitDynamicParam", "DEL FieldAccess", "DEL Block", "DEL SimpleName: add", "DEL MethodRef", "DEL PrefixExpression: !", "DEL PrefixExpression: !", "DEL Modifier: private", "DEL SimpleName: registerConvertlet", "DEL VariableDeclarationFragment", "DEL BooleanLiteral: false", "DEL ParenthesizedExpression", "DEL PrimitiveType: boolean", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: failed", "DEL SimpleType: SargBinding", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: iter", "DEL SimpleName: visitInputRef", "DEL Assignment: =", "DEL SimpleName: recomp", "DEL QualifiedName: SargBoundType.LOWER", "DEL SimpleName: addChild", "DEL Modifier: public", "DEL ReturnStatement", "DEL IfStatement", "DEL MethodDeclaration", "DEL SimpleName: registerConvertlet", "DEL ReturnStatement", "DEL SimpleName: idx", "DEL SimpleType: SqlOperator", "DEL SimpleName: newAndNode", "DEL ExpressionStatement", "DEL SimpleName: rexCFList", "DEL SimpleName: currSargExpr", "DEL QualifiedName: SqlStdOperatorTable.IS_NULL", "DEL Modifier: private", "DEL NullLiteral", "DEL SimpleName: get", "DEL BooleanLiteral: true", "DEL NullLiteral", "DEL Modifier: public", "DEL NullLiteral", "DEL SimpleName: boundType", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleType: RexInputRef", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: sargBinding", "DEL SimpleType: SargStrictness", "DEL Modifier: final", "DEL NullLiteral", "DEL PostfixExpression: ++", "DEL SimpleName: strictness", "DEL ExpressionStatement", "DEL SimpleName: isRealRexInputRef", "DEL MethodDeclaration", "DEL Block", "DEL AssertStatement", "DEL SimpleName: sargSeq", "DEL TextElement:  expression to test", "DEL SimpleName: setUpper", "DEL SimpleType: SargBinding", "DEL SimpleType: SargStrictness", "DEL NullLiteral", "DEL Javadoc", "DEL SimpleName: Map", "DEL SimpleName: expr", "DEL SimpleName: sarg2RexMap", "DEL TextElement: as all disjunctions. Also, only a single range predicate is allowed.", "DEL MethodInvocation", "DEL SimpleName: evaluate", "DEL SimpleName: get", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL BreakStatement", "DEL SimpleName: registerConvertlet", "DEL SimpleName: List", "DEL Modifier: public", "DEL QualifiedName: SqlStdOperatorTable.NOT", "DEL IfStatement", "DEL IfStatement", "DEL QualifiedName: SqlStdOperatorTable.LESS_THAN_OR_EQUAL", "DEL VariableDeclarationFragment", "DEL ClassInstanceCreation", "DEL ConstructorInvocation", "DEL SimpleType: SargBoundType", "DEL MethodInvocation", "DEL SimpleName: Void", "DEL SimpleType: RexRangeRef", "DEL MethodInvocation", "DEL Modifier: private", "DEL SimpleName: SargExpr", "DEL SimpleName: reverse", "DEL SimpleName: RexLiteral", "DEL ReturnStatement", "DEL IfStatement", "DEL SimpleName: currBinding", "DEL SimpleType: RexOver", "DEL Assignment: =", "DEL ExpressionStatement", "DEL SimpleName: expr", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: op", "DEL SimpleType: SargExpr", "DEL Block", "DEL ExpressionStatement", "DEL PrimitiveType: boolean", "DEL Block", "DEL TextElement:  predicate to be analyzed", "DEL SimpleName: expr", "DEL PrimitiveType: void", "DEL Assignment: =", "DEL SimpleName: getType", "DEL ReturnStatement", "DEL FieldAccess", "DEL ExpressionStatement", "DEL SimpleName: currSargExpr", "DEL Modifier: public", "DEL SimpleName: getDataType", "DEL MethodDeclaration", "DEL SimpleName: simpleMode", "DEL MethodInvocation", "DEL SimpleName: getKind", "DEL ClassInstanceCreation", "DEL ExpressionStatement", "DEL Modifier: final", "DEL VariableDeclarationStatement", "DEL MethodInvocation", "DEL SimpleName: get", "DEL SimpleName: currSargExpr", "DEL TagElement: @param", "DEL SimpleType: ComparisonConvertlet", "DEL SimpleName: expr", "DEL QualifiedName: SqlStdOperatorTable.AND", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: RexNode", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: ComparisonConvertlet", "DEL QualifiedName: SqlStdOperatorTable.AND", "DEL ExpressionStatement", "DEL Javadoc", "DEL VariableDeclarationFragment", "DEL SimpleName: Void", "DEL ClassInstanceCreation", "DEL SimpleName: ArrayList", "DEL SimpleName: inputRef", "DEL SwitchCase", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ParameterizedType: List<SargBinding>", "DEL SimpleName: BooleanConvertlet", "DEL InfixExpression: !=", "DEL SimpleName: currBinding", "DEL Block", "DEL SimpleName: SargSetOperator", "DEL SimpleName: RexDynamicParam", "DEL MethodDeclaration", "DEL SimpleName: rangeRef", "DEL SimpleType: SargSetOperator", "DEL Modifier: private", "DEL Assignment: =", "DEL VariableDeclarationStatement", "DEL SimpleName: lowerRexInputIdx", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL SimpleName: call", "DEL NullLiteral", "DEL TagElement: @return", "DEL TextElement: together.", "DEL Modifier: abstract", "DEL SimpleName: SargIntervalExpr", "DEL SimpleName: CallConvertlet", "DEL SimpleType: SqlOperator", "DEL VariableDeclarationFragment", "DEL SimpleName: lowerRexInputIdx", "DEL VariableDeclarationFragment", "DEL SimpleName: List", "DEL Block", "DEL SimpleName: i", "DEL SimpleName: exprStack", "DEL ExpressionStatement", "DEL NullLiteral", "DEL TextElement:  predicate to be analyzed", "DEL MethodInvocation", "DEL SimpleName: actualBound", "DEL Assignment: =", "DEL SimpleType: List", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: setOp", "DEL SimpleName: getInputRef", "DEL IfStatement", "DEL SimpleName: getOperator", "DEL SimpleName: RexFieldAccess", "DEL Modifier: final", "DEL InfixExpression: &&", "DEL SimpleName: SargBinding", "DEL SimpleName: NodeVisitor", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: actualBound", "DEL NullLiteral", "DEL SimpleName: add", "DEL SimpleName: RexNode", "DEL InfixExpression: ==", "DEL FieldDeclaration", "DEL SimpleName: SargIntervalSequence", "DEL ParameterizedType: ArrayList<RexNode>", "DEL Modifier: public", "DEL SimpleName: CallConvertlet", "DEL TagElement: @link", "DEL SimpleName: boundRefList", "DEL SimpleName: factory", "DEL ParenthesizedExpression", "DEL TextElement:  the rex predicate reconstructed from the list of SargBindings.", "DEL NumberLiteral: 1", "DEL SimpleName: coordinate", "DEL MethodInvocation", "DEL SimpleName: getRexBuilder", "DEL QualifiedName: SqlStdOperatorTable.IS_FALSE", "DEL FieldDeclaration", "DEL Modifier: private", "DEL TagElement: @link", "DEL SimpleName: nonSargFilterList", "DEL MethodInvocation", "DEL InfixExpression: >=", "DEL ExpressionStatement", "DEL SimpleName: SqlOperator", "DEL SimpleName: dynamicParams", "DEL IfStatement", "DEL SimpleType: Void", "DEL ExpressionStatement", "DEL Modifier: public", "DEL MethodDeclaration", "DEL ExpressionStatement", "DEL SimpleName: accept", "DEL SimpleName: isEmpty", "DEL Assignment: =", "DEL ReturnStatement", "DEL Assignment: =", "DEL Block", "DEL IfStatement", "DEL SimpleName: currAndNode", "DEL BooleanLiteral: true", "DEL SimpleType: SargFactory", "DEL SingleVariableDeclaration", "DEL VariableDeclarationFragment", "DEL IfStatement", "DEL IfStatement", "DEL SimpleName: i", "DEL SimpleName: recomp", "DEL SimpleType: List", "DEL SimpleName: RexNode", "DEL SimpleName: simpleMode", "DEL SimpleName: coordinate", "DEL SimpleType: SargBoundType", "DEL MethodRef", "DEL FieldDeclaration", "DEL SimpleName: factory", "DEL NullLiteral", "DEL Assignment: =", "DEL Assignment: =", "DEL SimpleName: newSetExpr", "DEL VariableDeclarationStatement", "DEL TextElement: . It assumes that the predicate expression is already", "DEL ThisExpression", "DEL SimpleName: conjunctions", "DEL FieldDeclaration", "DEL ClassInstanceCreation", "DEL Modifier: private", "DEL SimpleName: coordinate", "DEL QualifiedName: SargSetOperator.UNION", "DEL VariableDeclarationFragment", "DEL SimpleName: inputRef", "DEL VariableDeclarationStatement", "DEL SimpleName: residualSargList", "DEL Assignment: =", "DEL ParameterizedType: List<RexNode>", "DEL VariableDeclarationExpression", "DEL SimpleName: setLower", "DEL PrimitiveType: void", "DEL QualifiedName: SqlStdOperatorTable.AND", "DEL MethodInvocation", "DEL SimpleType: RexInputRef", "DEL Block", "DEL IfStatement", "DEL InfixExpression: ==", "DEL Block", "DEL InfixExpression: ||", "DEL ReturnStatement", "DEL SimpleName: coordinate", "DEL VariableDeclarationFragment", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: SargBinding", "DEL SimpleName: getPostFilterRexNode", "DEL BooleanLiteral: false", "DEL VariableDeclarationFragment", "DEL PrimitiveType: boolean", "DEL QualifiedName: SargStrictness.CLOSED", "DEL SimpleName: SargRexAnalyzer", "DEL SimpleName: i", "DEL QualifiedName: SqlStdOperatorTable.GREATER_THAN_OR_EQUAL", "DEL SimpleName: newAndNode", "DEL SimpleName: Void", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: upperRexInputRef", "DEL SimpleName: failed", "DEL ExpressionStatement", "DEL SimpleName: getType", "DEL AssertStatement", "DEL VariableDeclarationStatement", "DEL NullLiteral", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Modifier: private", "DEL Block", "DEL TagElement", "DEL ExpressionStatement", "DEL SimpleName: inputRef", "DEL SimpleType: SargFactory", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SimpleName: failed"]}]}}, {"SargRexAnalyzer_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.eigenbase.relopt(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.eigenbase.rex(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.eigenbase.sql(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: org.eigenbase.sql.fun(10)", "Delete ImportDeclaration(11)", "Delete TextElement: SargRexAnalyzer attempts to translate a rex predicate into a (12)", "Delete SimpleName: SargBinding(13)", "Delete TagElement: @link(14)", "Delete TextElement: . It assumes that the predicate expression is already(15)", "Delete TextElement: well-formed.(16)", "Delete TagElement(17)", "Delete Javadoc(18)", "Delete Modifier: public(19)", "Delete SimpleName: SargRexAnalyzer(20)", "Delete Modifier: private(21)", "Delete Modifier: final(22)", "Delete SimpleName: SargFactory(23)", "Delete SimpleType: SargFactory(24)", "Delete SimpleName: factory(25)", "Delete VariableDeclarationFragment(26)", "Delete FieldDeclaration(27)", "Delete TextElement: If true, conjuntions on the same input reference are disallowed, as well(28)", "Delete TextElement: as all disjunctions. Also, only a single range predicate is allowed.(29)", "Delete TagElement(30)", "Delete Javadoc(31)", "Delete Modifier: private(32)", "Delete Modifier: final(33)", "Delete PrimitiveType: boolean(34)", "Delete SimpleName: simpleMode(35)", "Delete VariableDeclarationFragment(36)", "Delete FieldDeclaration(37)", "Delete Modifier: private(38)", "Delete Modifier: final(39)", "Delete SimpleName: Map(40)", "Delete SimpleType: Map(41)", "Delete SimpleName: SqlOperator(42)", "Delete SimpleType: SqlOperator(43)", "Delete SimpleName: CallConvertlet(44)", "Delete SimpleType: CallConvertlet(45)", "Delete ParameterizedType: Map<SqlOperator,CallConvertlet>(46)", "Delete SimpleName: convertletMap(47)", "Delete VariableDeclarationFragment(48)", "Delete FieldDeclaration(49)", "Delete Modifier: private(50)", "Delete PrimitiveType: boolean(51)", "Delete SimpleName: failed(52)", "Delete VariableDeclarationFragment(53)", "Delete FieldDeclaration(54)", "Delete Modifier: private(55)", "Delete SimpleName: RexInputRef(56)", "Delete SimpleType: RexInputRef(57)", "Delete SimpleName: boundInputRef(58)", "Delete VariableDeclarationFragment(59)", "Delete FieldDeclaration(60)", "Delete Modifier: private(61)", "Delete SimpleName: RexNode(62)", "Delete SimpleType: RexNode(63)", "Delete SimpleName: coordinate(64)", "Delete VariableDeclarationFragment(65)", "Delete FieldDeclaration(66)", "Delete Modifier: private(67)", "Delete PrimitiveType: boolean(68)", "Delete SimpleName: variableSeen(69)", "Delete VariableDeclarationFragment(70)", "Delete FieldDeclaration(71)", "Delete Modifier: private(72)", "Delete PrimitiveType: boolean(73)", "Delete SimpleName: reverse(74)", "Delete VariableDeclarationFragment(75)", "Delete FieldDeclaration(76)", "Delete Modifier: private(77)", "Delete SimpleName: List(78)", "Delete SimpleType: List(79)", "Delete SimpleName: SargExpr(80)", "Delete SimpleType: SargExpr(81)", "Delete ParameterizedType: List<SargExpr>(82)", "Delete SimpleName: exprStack(83)", "Delete VariableDeclarationFragment(84)", "Delete FieldDeclaration(85)", "Delete Modifier: private(86)", "Delete SimpleName: List(87)", "Delete SimpleType: List(88)", "Delete SimpleName: RexNode(89)", "Delete SimpleType: RexNode(90)", "Delete ParameterizedType: List<RexNode>(91)", "Delete SimpleName: nonSargFilterList(92)", "Delete VariableDeclarationFragment(93)", "Delete FieldDeclaration(94)", "Delete Modifier: private(95)", "Delete SimpleName: List(96)", "Delete SimpleType: List(97)", "Delete SimpleName: SargBinding(98)", "Delete SimpleType: SargBinding(99)", "Delete ParameterizedType: List<SargBinding>(100)", "Delete SimpleName: sargBindingList(101)", "Delete VariableDeclarationFragment(102)", "Delete FieldDeclaration(103)", "Delete Modifier: private(104)", "Delete SimpleName: Map(105)", "Delete SimpleType: Map(106)", "Delete SimpleName: SargExpr(107)", "Delete SimpleType: SargExpr(108)", "Delete SimpleName: RexNode(109)", "Delete SimpleType: RexNode(110)", "Delete ParameterizedType: Map<SargExpr,RexNode>(111)", "Delete SimpleName: sarg2RexMap(112)", "Delete VariableDeclarationFragment(113)", "Delete FieldDeclaration(114)", "Delete TextElement: If >= 0, treat RexInputRefs whose index is within the range(115)", "Delete TextElement: [lowerRexInputIdx, upperRexInputIdx) as coordinates in expressions(116)", "Delete TagElement(117)", "Delete Javadoc(118)", "Delete Modifier: private(119)", "Delete PrimitiveType: int(120)", "Delete SimpleName: lowerRexInputIdx(121)", "Delete VariableDeclarationFragment(122)", "Delete FieldDeclaration(123)", "Delete TextElement: If >= 0, treat RexInputRefs whose index is within the range(124)", "Delete TextElement: [lowerRexInputIdx, upperRexInputIdx) as coordinates in expressions(125)", "Delete TagElement(126)", "Delete Javadoc(127)", "Delete Modifier: private(128)", "Delete PrimitiveType: int(129)", "Delete SimpleName: upperRexInputIdx(130)", "Delete VariableDeclarationFragment(131)", "Delete FieldDeclaration(132)", "Delete SimpleName: SargRexAnalyzer(133)", "Delete SimpleName: SargFactory(134)", "Delete SimpleType: SargFactory(135)", "Delete SimpleName: factory(136)", "Delete SingleVariableDeclaration(137)", "Delete PrimitiveType: boolean(138)", "Delete SimpleName: simpleMode(139)", "Delete SingleVariableDeclaration(140)", "Delete SimpleName: factory(141)", "Delete SimpleName: simpleMode(142)", "Delete NumberLiteral: 1(143)", "Delete PrefixExpression: -(144)", "Delete NumberLiteral: 1(145)", "Delete PrefixExpression: -(146)", "Delete ConstructorInvocation(147)", "Delete Block(148)", "Delete MethodDeclaration(149)", "Delete SimpleName: SargRexAnalyzer(150)", "Delete SimpleName: SargFactory(151)", "Delete SimpleType: SargFactory(152)", "Delete SimpleName: factory(153)", "Delete SingleVariableDeclaration(154)", "Delete PrimitiveType: boolean(155)", "Delete SimpleName: simpleMode(156)", "Delete SingleVariableDeclaration(157)", "Delete PrimitiveType: int(158)", "Delete SimpleName: lowerRexInputRef(159)", "Delete SingleVariableDeclaration(160)", "Delete PrimitiveType: int(161)", "Delete SimpleName: upperRexInputRef(162)", "Delete SingleVariableDeclaration(163)", "Delete ThisExpression(164)", "Delete SimpleName: factory(165)", "Delete FieldAccess(166)", "Delete SimpleName: factory(167)", "Delete Assignment: =(168)", "Delete ExpressionStatement(169)", "Delete ThisExpression(170)", "Delete SimpleName: simpleMode(171)", "Delete FieldAccess(172)", "Delete SimpleName: simpleMode(173)", "Delete Assignment: =(174)", "Delete ExpressionStatement(175)", "Delete ThisExpression(176)", "Delete SimpleName: lowerRexInputIdx(177)", "Delete FieldAccess(178)", "Delete SimpleName: lowerRexInputRef(179)", "Delete Assignment: =(180)", "Delete ExpressionStatement(181)", "Delete ThisExpression(182)", "Delete SimpleName: upperRexInputIdx(183)", "Delete FieldAccess(184)", "Delete SimpleName: upperRexInputRef(185)", "Delete Assignment: =(186)", "Delete ExpressionStatement(187)", "Delete SimpleName: lowerRexInputIdx(188)", "Delete NumberLiteral: 0(189)", "Delete InfixExpression: <(190)", "Delete SimpleName: upperRexInputIdx(191)", "Delete NumberLiteral: 0(192)", "Delete InfixExpression: <(193)", "Delete InfixExpression: &&(194)", "Delete ParenthesizedExpression(195)", "Delete SimpleName: lowerRexInputIdx(196)", "Delete NumberLiteral: 0(197)", "Delete InfixExpression: >=(198)", "Delete SimpleName: upperRexInputIdx(199)", "Delete NumberLiteral: 0(200)", "Delete InfixExpression: >=(201)", "Delete InfixExpression: &&(202)", "Delete ParenthesizedExpression(203)", "Delete InfixExpression: ||(204)", "Delete AssertStatement(205)", "Delete SimpleName: convertletMap(206)", "Delete SimpleName: HashMap(207)", "Delete SimpleType: HashMap(208)", "Delete SimpleName: SqlOperator(209)", "Delete SimpleType: SqlOperator(210)", "Delete SimpleName: CallConvertlet(211)", "Delete SimpleType: CallConvertlet(212)", "Delete ParameterizedType: HashMap<SqlOperator,CallConvertlet>(213)", "Delete ClassInstanceCreation(214)", "Delete Assignment: =(215)", "Delete ExpressionStatement(216)", "Delete SimpleName: registerConvertlet(217)", "Delete QualifiedName: SqlStdOperatorTable.EQUALS(218)", "Delete SimpleName: ComparisonConvertlet(219)", "Delete SimpleType: ComparisonConvertlet(220)", "Delete NullLiteral(221)", "Delete QualifiedName: SargStrictness.CLOSED(222)", "Delete ClassInstanceCreation(223)", "Delete MethodInvocation(224)", "Delete ExpressionStatement(225)", "Delete SimpleName: registerConvertlet(226)", "Delete QualifiedName: SqlStdOperatorTable.IS_NULL(227)", "Delete SimpleName: ComparisonConvertlet(228)", "Delete SimpleType: ComparisonConvertlet(229)", "Delete NullLiteral(230)", "Delete QualifiedName: SargStrictness.CLOSED(231)", "Delete ClassInstanceCreation(232)", "Delete MethodInvocation(233)", "Delete ExpressionStatement(234)", "Delete SimpleName: registerConvertlet(235)", "Delete QualifiedName: SqlStdOperatorTable.IS_TRUE(236)", "Delete SimpleName: ComparisonConvertlet(237)", "Delete SimpleType: ComparisonConvertlet(238)", "Delete NullLiteral(239)", "Delete QualifiedName: SargStrictness.CLOSED(240)", "Delete ClassInstanceCreation(241)", "Delete MethodInvocation(242)", "Delete ExpressionStatement(243)", "Delete SimpleName: registerConvertlet(244)", "Delete QualifiedName: SqlStdOperatorTable.IS_FALSE(245)", "Delete SimpleName: ComparisonConvertlet(246)", "Delete SimpleType: ComparisonConvertlet(247)", "Delete NullLiteral(248)", "Delete QualifiedName: SargStrictness.CLOSED(249)", "Delete ClassInstanceCreation(250)", "Delete MethodInvocation(251)", "Delete ExpressionStatement(252)", "Delete SimpleName: registerConvertlet(253)", "Delete QualifiedName: SqlStdOperatorTable.IS_UNKNOWN(254)", "Delete SimpleName: ComparisonConvertlet(255)", "Delete SimpleType: ComparisonConvertlet(256)", "Delete NullLiteral(257)", "Delete QualifiedName: SargStrictness.CLOSED(258)", "Delete ClassInstanceCreation(259)", "Delete MethodInvocation(260)", "Delete ExpressionStatement(261)", "Delete SimpleName: registerConvertlet(262)", "Delete QualifiedName: SqlStdOperatorTable.LESS_THAN(263)", "Delete SimpleName: ComparisonConvertlet(264)", "Delete SimpleType: ComparisonConvertlet(265)", "Delete QualifiedName: SargBoundType.UPPER(266)", "Delete QualifiedName: SargStrictness.OPEN(267)", "Delete ClassInstanceCreation(268)", "Delete MethodInvocation(269)", "Delete ExpressionStatement(270)", "Delete SimpleName: registerConvertlet(271)", "Delete QualifiedName: SqlStdOperatorTable.LESS_THAN_OR_EQUAL(272)", "Delete SimpleName: ComparisonConvertlet(273)", "Delete SimpleType: ComparisonConvertlet(274)", "Delete QualifiedName: SargBoundType.UPPER(275)", "Delete QualifiedName: SargStrictness.CLOSED(276)", "Delete ClassInstanceCreation(277)", "Delete MethodInvocation(278)", "Delete ExpressionStatement(279)", "Delete SimpleName: registerConvertlet(280)", "Delete QualifiedName: SqlStdOperatorTable.GREATER_THAN(281)", "Delete SimpleName: ComparisonConvertlet(282)", "Delete SimpleType: ComparisonConvertlet(283)", "Delete QualifiedName: SargBoundType.LOWER(284)", "Delete QualifiedName: SargStrictness.OPEN(285)", "Delete ClassInstanceCreation(286)", "Delete MethodInvocation(287)", "Delete ExpressionStatement(288)", "Delete SimpleName: registerConvertlet(289)", "Delete QualifiedName: SqlStdOperatorTable.GREATER_THAN_OR_EQUAL(290)", "Delete SimpleName: ComparisonConvertlet(291)", "Delete SimpleType: ComparisonConvertlet(292)", "Delete QualifiedName: SargBoundType.LOWER(293)", "Delete QualifiedName: SargStrictness.CLOSED(294)", "Delete ClassInstanceCreation(295)", "Delete MethodInvocation(296)", "Delete ExpressionStatement(297)", "Delete SimpleName: registerConvertlet(298)", "Delete QualifiedName: SqlStdOperatorTable.AND(299)", "Delete SimpleName: BooleanConvertlet(300)", "Delete SimpleType: BooleanConvertlet(301)", "Delete QualifiedName: SargSetOperator.INTERSECTION(302)", "Delete ClassInstanceCreation(303)", "Delete MethodInvocation(304)", "Delete ExpressionStatement(305)", "Delete SimpleName: simpleMode(306)", "Delete PrefixExpression: !(307)", "Delete SimpleName: registerConvertlet(308)", "Delete QualifiedName: SqlStdOperatorTable.OR(309)", "Delete SimpleName: BooleanConvertlet(310)", "Delete SimpleType: BooleanConvertlet(311)", "Delete QualifiedName: SargSetOperator.UNION(312)", "Delete ClassInstanceCreation(313)", "Delete MethodInvocation(314)", "Delete ExpressionStatement(315)", "Delete Block(316)", "Delete IfStatement(317)", "Delete SimpleName: registerConvertlet(318)", "Delete QualifiedName: SqlStdOperatorTable.NOT(319)", "Delete SimpleName: BooleanConvertlet(320)", "Delete SimpleType: BooleanConvertlet(321)", "Delete QualifiedName: SargSetOperator.COMPLEMENT(322)", "Delete ClassInstanceCreation(323)", "Delete MethodInvocation(324)", "Delete ExpressionStatement(325)", "Delete Block(326)", "Delete MethodDeclaration(327)", "Delete Modifier: private(328)", "Delete PrimitiveType: void(329)", "Delete SimpleName: registerConvertlet(330)", "Delete SimpleName: SqlOperator(331)", "Delete SimpleType: SqlOperator(332)", "Delete SimpleName: op(333)", "Delete SingleVariableDeclaration(334)", "Delete SimpleName: CallConvertlet(335)", "Delete SimpleType: CallConvertlet(336)", "Delete SimpleName: convertlet(337)", "Delete SingleVariableDeclaration(338)", "Delete SimpleName: convertletMap(339)", "Delete SimpleName: put(340)", "Delete SimpleName: op(341)", "Delete SimpleName: convertlet(342)", "Delete MethodInvocation(343)", "Delete ExpressionStatement(344)", "Delete Block(345)", "Delete MethodDeclaration(346)", "Delete TextElement: Reconstructs a rex predicate from a list of SargExprs which will be(347)", "Delete TextElement: AND'ed together.(348)", "Delete TagElement(349)", "Delete Javadoc(350)", "Delete Modifier: private(351)", "Delete PrimitiveType: void(352)", "Delete SimpleName: recomposeConjunction(353)", "Delete PrimitiveType: int(354)", "Delete SimpleName: i(355)", "Delete NumberLiteral: 0(356)", "Delete VariableDeclarationFragment(357)", "Delete VariableDeclarationExpression(358)", "Delete SimpleName: i(359)", "Delete SimpleName: sargBindingList(360)", "Delete SimpleName: size(361)", "Delete MethodInvocation(362)", "Delete InfixExpression: <(363)", "Delete SimpleName: i(364)", "Delete PostfixExpression: ++(365)", "Delete Modifier: final(366)", "Delete SimpleName: SargBinding(367)", "Delete SimpleType: SargBinding(368)", "Delete SimpleName: currBinding(369)", "Delete SimpleName: sargBindingList(370)", "Delete SimpleName: get(371)", "Delete SimpleName: i(372)", "Delete MethodInvocation(373)", "Delete VariableDeclarationFragment(374)", "Delete VariableDeclarationStatement(375)", "Delete Modifier: final(376)", "Delete SimpleName: RexInputRef(377)", "Delete SimpleType: RexInputRef(378)", "Delete SimpleName: currRef(379)", "Delete SimpleName: currBinding(380)", "Delete SimpleName: getInputRef(381)", "Delete MethodInvocation(382)", "Delete VariableDeclarationFragment(383)", "Delete VariableDeclarationStatement(384)", "Delete SimpleName: SargExpr(385)", "Delete SimpleType: SargExpr(386)", "Delete SimpleName: currSargExpr(387)", "Delete SimpleName: currBinding(388)", "Delete SimpleName: getExpr(389)", "Delete MethodInvocation(390)", "Delete VariableDeclarationFragment(391)", "Delete VariableDeclarationStatement(392)", "Delete SimpleName: RexNode(393)", "Delete SimpleType: RexNode(394)", "Delete SimpleName: currAndNode(395)", "Delete SimpleName: sarg2RexMap(396)", "Delete SimpleName: get(397)", "Delete SimpleName: currSargExpr(398)", "Delete MethodInvocation(399)", "Delete VariableDeclarationFragment(400)", "Delete VariableDeclarationStatement(401)", "Delete SimpleName: sarg2RexMap(402)", "Delete SimpleName: remove(403)", "Delete SimpleName: currSargExpr(404)", "Delete MethodInvocation(405)", "Delete ExpressionStatement(406)", "Delete PrimitiveType: boolean(407)", "Delete SimpleName: recomp(408)", "Delete BooleanLiteral: false(409)", "Delete VariableDeclarationFragment(410)", "Delete VariableDeclarationStatement(411)", "Delete SimpleName: ListIterator(412)", "Delete SimpleType: ListIterator(413)", "Delete SimpleName: SargBinding(414)", "Delete SimpleType: SargBinding(415)", "Delete ParameterizedType: ListIterator<SargBinding>(416)", "Delete SimpleName: iter(417)", "Delete SimpleName: sargBindingList(418)", "Delete SimpleName: listIterator(419)", "Delete SimpleName: i(420)", "Delete NumberLiteral: 1(421)", "Delete InfixExpression: +(422)", "Delete MethodInvocation(423)", "Delete VariableDeclarationFragment(424)", "Delete VariableDeclarationStatement(425)", "Delete SimpleName: iter(426)", "Delete SimpleName: hasNext(427)", "Delete MethodInvocation(428)", "Delete Modifier: final(429)", "Delete SimpleName: SargBinding(430)", "Delete SimpleType: SargBinding(431)", "Delete SimpleName: nextBinding(432)", "Delete SimpleName: iter(433)", "Delete SimpleName: next(434)", "Delete MethodInvocation(435)", "Delete VariableDeclarationFragment(436)", "Delete VariableDeclarationStatement(437)", "Delete Modifier: final(438)", "Delete SimpleName: RexInputRef(439)", "Delete SimpleType: RexInputRef(440)", "Delete SimpleName: nextRef(441)", "Delete SimpleName: nextBinding(442)", "Delete SimpleName: getInputRef(443)", "Delete MethodInvocation(444)", "Delete VariableDeclarationFragment(445)", "Delete VariableDeclarationStatement(446)", "Delete Modifier: final(447)", "Delete SimpleName: SargExpr(448)", "Delete SimpleType: SargExpr(449)", "Delete SimpleName: nextSargExpr(450)", "Delete SimpleName: nextBinding(451)", "Delete SimpleName: getExpr(452)", "Delete MethodInvocation(453)", "Delete VariableDeclarationFragment(454)", "Delete VariableDeclarationStatement(455)", "Delete SimpleName: nextRef(456)", "Delete SimpleName: getIndex(457)", "Delete MethodInvocation(458)", "Delete SimpleName: currRef(459)", "Delete SimpleName: getIndex(460)", "Delete MethodInvocation(461)", "Delete InfixExpression: ==(462)", "Delete SimpleName: SargSetExpr(463)", "Delete SimpleType: SargSetExpr(464)", "Delete SimpleName: expr(465)", "Delete SimpleName: factory(466)", "Delete SimpleName: newSetExpr(467)", "Delete SimpleName: currSargExpr(468)", "Delete SimpleName: getDataType(469)", "Delete MethodInvocation(470)", "Delete QualifiedName: SargSetOperator.INTERSECTION(471)", "Delete MethodInvocation(472)", "Delete VariableDeclarationFragment(473)", "Delete VariableDeclarationStatement(474)", "Delete SimpleName: expr(475)", "Delete SimpleName: addChild(476)", "Delete SimpleName: currSargExpr(477)", "Delete MethodInvocation(478)", "Delete ExpressionStatement(479)", "Delete SimpleName: expr(480)", "Delete SimpleName: addChild(481)", "Delete SimpleName: nextSargExpr(482)", "Delete MethodInvocation(483)", "Delete ExpressionStatement(484)", "Delete SimpleName: currAndNode(485)", "Delete SimpleName: factory(486)", "Delete SimpleName: getRexBuilder(487)", "Delete MethodInvocation(488)", "Delete SimpleName: makeCall(489)", "Delete QualifiedName: SqlStdOperatorTable.AND(490)", "Delete SimpleName: currAndNode(491)", "Delete SimpleName: sarg2RexMap(492)", "Delete SimpleName: get(493)", "Delete SimpleName: nextSargExpr(494)", "Delete MethodInvocation(495)", "Delete MethodInvocation(496)", "Delete Assignment: =(497)", "Delete ExpressionStatement(498)", "Delete SimpleName: currSargExpr(499)", "Delete SimpleName: expr(500)", "Delete Assignment: =(501)", "Delete ExpressionStatement(502)", "Delete SimpleName: sarg2RexMap(503)", "Delete SimpleName: remove(504)", "Delete SimpleName: nextSargExpr(505)", "Delete MethodInvocation(506)", "Delete ExpressionStatement(507)", "Delete SimpleName: iter(508)", "Delete SimpleName: remove(509)", "Delete MethodInvocation(510)", "Delete ExpressionStatement(511)", "Delete SimpleName: recomp(512)", "Delete BooleanLiteral: true(513)", "Delete Assignment: =(514)", "Delete ExpressionStatement(515)", "Delete Block(516)", "Delete IfStatement(517)", "Delete Block(518)", "Delete WhileStatement(519)", "Delete SimpleName: recomp(520)", "Delete SimpleName: simpleMode(521)", "Delete PrefixExpression: !(522)", "Delete AssertStatement(523)", "Delete SimpleName: testDynamicParamSupport(524)", "Delete SimpleName: currSargExpr(525)", "Delete MethodInvocation(526)", "Delete PrefixExpression: !(527)", "Delete SimpleName: nonSargFilterList(528)", "Delete SimpleName: add(529)", "Delete SimpleName: currAndNode(530)", "Delete MethodInvocation(531)", "Delete ExpressionStatement(532)", "Delete SimpleName: sargBindingList(533)", "Delete SimpleName: remove(534)", "Delete SimpleName: i(535)", "Delete MethodInvocation(536)", "Delete ExpressionStatement(537)", "Delete ContinueStatement(538)", "Delete Block(539)", "Delete IfStatement(540)", "Delete Block(541)", "Delete IfStatement(542)", "Delete SimpleName: recomp(543)", "Delete SimpleName: SargBinding(544)", "Delete SimpleType: SargBinding(545)", "Delete SimpleName: newBinding(546)", "Delete SimpleName: SargBinding(547)", "Delete SimpleType: SargBinding(548)", "Delete SimpleName: currSargExpr(549)", "Delete SimpleName: currRef(550)", "Delete ClassInstanceCreation(551)", "Delete VariableDeclarationFragment(552)", "Delete VariableDeclarationStatement(553)", "Delete SimpleName: sargBindingList(554)", "Delete SimpleName: remove(555)", "Delete SimpleName: i(556)", "Delete MethodInvocation(557)", "Delete ExpressionStatement(558)", "Delete SimpleName: sargBindingList(559)", "Delete SimpleName: add(560)", "Delete SimpleName: i(561)", "Delete SimpleName: newBinding(562)", "Delete MethodInvocation(563)", "Delete ExpressionStatement(564)", "Delete Block(565)", "Delete IfStatement(566)", "Delete SimpleName: sarg2RexMap(567)", "Delete SimpleName: put(568)", "Delete SimpleName: currSargExpr(569)", "Delete SimpleName: currAndNode(570)", "Delete MethodInvocation(571)", "Delete ExpressionStatement(572)", "Delete Block(573)", "Delete ForStatement(574)", "Delete Block(575)", "Delete MethodDeclaration(576)", "Delete TextElement: Analyzes a rex predicate.(577)", "Delete TagElement(578)", "Delete SimpleName: rexPredicate(579)", "Delete TextElement:  predicate to be analyzed(580)", "Delete TagElement: @param(581)", "Delete TextElement:  a list of SargBindings contained in the input rex predicate(582)", "Delete TagElement: @return(583)", "Delete Javadoc(584)", "Delete Modifier: public(585)", "Delete SimpleName: List(586)", "Delete SimpleType: List(587)", "Delete SimpleName: SargBinding(588)", "Delete SimpleType: SargBinding(589)", "Delete ParameterizedType: List<SargBinding>(590)", "Delete SimpleName: analyzeAll(591)", "Delete SimpleName: RexNode(592)", "Delete SimpleType: RexNode(593)", "Delete SimpleName: rexPredicate(594)", "Delete SingleVariableDeclaration(595)", "Delete SimpleName: sargBindingList(596)", "Delete SimpleName: ArrayList(597)", "Delete SimpleType: ArrayList(598)", "Delete SimpleName: SargBinding(599)", "Delete SimpleType: SargBinding(600)", "Delete ParameterizedType: ArrayList<SargBinding>(601)", "Delete ClassInstanceCreation(602)", "Delete Assignment: =(603)", "Delete ExpressionStatement(604)", "Delete SimpleName: sarg2RexMap(605)", "Delete SimpleName: HashMap(606)", "Delete SimpleType: HashMap(607)", "Delete SimpleName: SargExpr(608)", "Delete SimpleType: SargExpr(609)", "Delete SimpleName: RexNode(610)", "Delete SimpleType: RexNode(611)", "Delete ParameterizedType: HashMap<SargExpr,RexNode>(612)", "Delete ClassInstanceCreation(613)", "Delete Assignment: =(614)", "Delete ExpressionStatement(615)", "Delete SimpleName: nonSargFilterList(616)", "Delete SimpleName: ArrayList(617)", "Delete SimpleType: ArrayList(618)", "Delete SimpleName: RexNode(619)", "Delete SimpleType: RexNode(620)", "Delete ParameterizedType: ArrayList<RexNode>(621)", "Delete ClassInstanceCreation(622)", "Delete Assignment: =(623)", "Delete ExpressionStatement(624)", "Delete Modifier: final(625)", "Delete SimpleName: List(626)", "Delete SimpleType: List(627)", "Delete SimpleName: RexNode(628)", "Delete SimpleType: RexNode(629)", "Delete ParameterizedType: List<RexNode>(630)", "Delete SimpleName: rexCFList(631)", "Delete SimpleName: RelOptUtil(632)", "Delete SimpleName: conjunctions(633)", "Delete SimpleName: rexPredicate(634)", "Delete MethodInvocation(635)", "Delete VariableDeclarationFragment(636)", "Delete VariableDeclarationStatement(637)", "Delete SimpleName: List(638)", "Delete SimpleType: List(639)", "Delete SimpleName: Integer(640)", "Delete SimpleType: Integer(641)", "Delete ParameterizedType: List<Integer>(642)", "Delete SimpleName: boundRefList(643)", "Delete SimpleName: ArrayList(644)", "Delete SimpleType: ArrayList(645)", "Delete SimpleName: Integer(646)", "Delete SimpleType: Integer(647)", "Delete ParameterizedType: ArrayList<Integer>(648)", "Delete ClassInstanceCreation(649)", "Delete VariableDeclarationFragment(650)", "Delete VariableDeclarationStatement(651)", "Delete PrimitiveType: boolean(652)", "Delete SimpleName: rangeFound(653)", "Delete BooleanLiteral: false(654)", "Delete VariableDeclarationFragment(655)", "Delete VariableDeclarationStatement(656)", "Delete SimpleName: RexNode(657)", "Delete SimpleType: RexNode(658)", "Delete SimpleName: rexPred(659)", "Delete SingleVariableDeclaration(660)", "Delete SimpleName: rexCFList(661)", "Delete Modifier: final(662)", "Delete SimpleName: SargBinding(663)", "Delete SimpleType: SargBinding(664)", "Delete SimpleName: sargBinding(665)", "Delete SimpleName: analyze(666)", "Delete SimpleName: rexPred(667)", "Delete MethodInvocation(668)", "Delete VariableDeclarationFragment(669)", "Delete VariableDeclarationStatement(670)", "Delete SimpleName: sargBinding(671)", "Delete NullLiteral(672)", "Delete InfixExpression: !=(673)", "Delete SimpleName: simpleMode(674)", "Delete SimpleName: RexInputRef(675)", "Delete SimpleType: RexInputRef(676)", "Delete SimpleName: inputRef(677)", "Delete SimpleName: sargBinding(678)", "Delete SimpleName: getInputRef(679)", "Delete MethodInvocation(680)", "Delete VariableDeclarationFragment(681)", "Delete VariableDeclarationStatement(682)", "Delete SimpleName: boundRefList(683)", "Delete SimpleName: contains(684)", "Delete SimpleName: inputRef(685)", "Delete SimpleName: getIndex(686)", "Delete MethodInvocation(687)", "Delete MethodInvocation(688)", "Delete SimpleName: nonSargFilterList(689)", "Delete SimpleName: add(690)", "Delete SimpleName: rexPred(691)", "Delete MethodInvocation(692)", "Delete ExpressionStatement(693)", "Delete ContinueStatement(694)", "Delete Block(695)", "Delete SimpleName: boundRefList(696)", "Delete SimpleName: add(697)", "Delete SimpleName: inputRef(698)", "Delete SimpleName: getIndex(699)", "Delete MethodInvocation(700)", "Delete MethodInvocation(701)", "Delete ExpressionStatement(702)", "Delete Block(703)", "Delete IfStatement(704)", "Delete SimpleName: SargIntervalSequence(705)", "Delete SimpleType: SargIntervalSequence(706)", "Delete SimpleName: sargSeq(707)", "Delete SimpleName: sargBinding(708)", "Delete SimpleName: getExpr(709)", "Delete MethodInvocation(710)", "Delete SimpleName: evaluate(711)", "Delete MethodInvocation(712)", "Delete VariableDeclarationFragment(713)", "Delete VariableDeclarationStatement(714)", "Delete SimpleName: sargSeq(715)", "Delete SimpleName: isRange(716)", "Delete MethodInvocation(717)", "Delete SimpleName: rangeFound(718)", "Delete SimpleName: nonSargFilterList(719)", "Delete SimpleName: add(720)", "Delete SimpleName: rexPred(721)", "Delete MethodInvocation(722)", "Delete ExpressionStatement(723)", "Delete ContinueStatement(724)", "Delete Block(725)", "Delete SimpleName: rangeFound(726)", "Delete BooleanLiteral: true(727)", "Delete Assignment: =(728)", "Delete ExpressionStatement(729)", "Delete Block(730)", "Delete IfStatement(731)", "Delete Block(732)", "Delete IfStatement(733)", "Delete Block(734)", "Delete IfStatement(735)", "Delete SimpleName: sargBindingList(736)", "Delete SimpleName: add(737)", "Delete SimpleName: sargBinding(738)", "Delete MethodInvocation(739)", "Delete ExpressionStatement(740)", "Delete SimpleName: sarg2RexMap(741)", "Delete SimpleName: put(742)", "Delete SimpleName: sargBinding(743)", "Delete SimpleName: getExpr(744)", "Delete MethodInvocation(745)", "Delete SimpleName: rexPred(746)", "Delete MethodInvocation(747)", "Delete ExpressionStatement(748)", "Delete Block(749)", "Delete SimpleName: nonSargFilterList(750)", "Delete SimpleName: add(751)", "Delete SimpleName: rexPred(752)", "Delete MethodInvocation(753)", "Delete ExpressionStatement(754)", "Delete Block(755)", "Delete IfStatement(756)", "Delete Block(757)", "Delete EnhancedForStatement(758)", "Delete SimpleName: failed(759)", "Delete BooleanLiteral: false(760)", "Delete Assignment: =(761)", "Delete ExpressionStatement(762)", "Delete SimpleName: boundInputRef(763)", "Delete NullLiteral(764)", "Delete Assignment: =(765)", "Delete ExpressionStatement(766)", "Delete SimpleName: clearLeaf(767)", "Delete MethodInvocation(768)", "Delete ExpressionStatement(769)", "Delete SimpleName: recomposeConjunction(770)", "Delete MethodInvocation(771)", "Delete ExpressionStatement(772)", "Delete SimpleName: sargBindingList(773)", "Delete ReturnStatement(774)", "Delete Block(775)", "Delete MethodDeclaration(776)", "Delete TextElement: Tests whether we can support the usage of dynamic parameters in a given(777)", "Delete TextElement: SargExpr.(778)", "Delete TagElement(779)", "Delete SimpleName: sargExpr(780)", "Delete TextElement:  expression to test(781)", "Delete TagElement: @param(782)", "Delete TextElement:  true if supported(783)", "Delete TagElement: @return(784)", "Delete Javadoc(785)", "Delete Modifier: private(786)", "Delete PrimitiveType: boolean(787)", "Delete SimpleName: testDynamicParamSupport(788)", "Delete SimpleName: SargExpr(789)", "Delete SimpleType: SargExpr(790)", "Delete SimpleName: sargExpr(791)", "Delete SingleVariableDeclaration(792)", "Delete SimpleName: Set(793)", "Delete SimpleType: Set(794)", "Delete SimpleName: RexDynamicParam(795)", "Delete SimpleType: RexDynamicParam(796)", "Delete ParameterizedType: Set<RexDynamicParam>(797)", "Delete SimpleName: dynamicParams(798)", "Delete SimpleName: HashSet(799)", "Delete SimpleType: HashSet(800)", "Delete SimpleName: RexDynamicParam(801)", "Delete SimpleType: RexDynamicParam(802)", "Delete ParameterizedType: HashSet<RexDynamicParam>(803)", "Delete ClassInstanceCreation(804)", "Delete VariableDeclarationFragment(805)", "Delete VariableDeclarationStatement(806)", "Delete SimpleName: sargExpr(807)", "Delete SimpleName: collectDynamicParams(808)", "Delete SimpleName: dynamicParams(809)", "Delete MethodInvocation(810)", "Delete ExpressionStatement(811)", "Delete SimpleName: dynamicParams(812)", "Delete SimpleName: isEmpty(813)", "Delete MethodInvocation(814)", "Delete BooleanLiteral: true(815)", "Delete ReturnStatement(816)", "Delete Block(817)", "Delete IfStatement(818)", "Delete SimpleName: sargExpr(819)", "Delete SimpleName: SargIntervalExpr(820)", "Delete SimpleType: SargIntervalExpr(821)", "Delete InstanceofExpression(822)", "Delete BooleanLiteral: true(823)", "Delete ReturnStatement(824)", "Delete Block(825)", "Delete IfStatement(826)", "Delete BooleanLiteral: false(827)", "Delete ReturnStatement(828)", "Delete Block(829)", "Delete MethodDeclaration(830)", "Delete TextElement: Reconstructs a rex predicate from the non-sargable filter predicates(831)", "Delete TextElement: which are AND'ed together.(832)", "Delete TagElement(833)", "Delete TextElement:  the rex predicate reconstructed from the non-sargable predicates.(834)", "Delete TagElement: @return(835)", "Delete Javadoc(836)", "Delete Modifier: public(837)", "Delete SimpleName: RexNode(838)", "Delete SimpleType: RexNode(839)", "Delete SimpleName: getNonSargFilterRexNode(840)", "Delete SimpleName: nonSargFilterList(841)", "Delete SimpleName: isEmpty(842)", "Delete MethodInvocation(843)", "Delete NullLiteral(844)", "Delete ReturnStatement(845)", "Delete Block(846)", "Delete IfStatement(847)", "Delete SimpleName: RexNode(848)", "Delete SimpleType: RexNode(849)", "Delete SimpleName: newAndNode(850)", "Delete SimpleName: nonSargFilterList(851)", "Delete SimpleName: get(852)", "Delete NumberLiteral: 0(853)", "Delete MethodInvocation(854)", "Delete VariableDeclarationFragment(855)", "Delete VariableDeclarationStatement(856)", "Delete PrimitiveType: int(857)", "Delete SimpleName: i(858)", "Delete NumberLiteral: 1(859)", "Delete VariableDeclarationFragment(860)", "Delete VariableDeclarationExpression(861)", "Delete SimpleName: i(862)", "Delete SimpleName: nonSargFilterList(863)", "Delete SimpleName: size(864)", "Delete MethodInvocation(865)", "Delete InfixExpression: <(866)", "Delete SimpleName: i(867)", "Delete PostfixExpression: ++(868)", "Delete SimpleName: newAndNode(869)", "Delete SimpleName: factory(870)", "Delete SimpleName: getRexBuilder(871)", "Delete MethodInvocation(872)", "Delete SimpleName: makeCall(873)", "Delete QualifiedName: SqlStdOperatorTable.AND(874)", "Delete SimpleName: newAndNode(875)", "Delete SimpleName: nonSargFilterList(876)", "Delete SimpleName: get(877)", "Delete SimpleName: i(878)", "Delete MethodInvocation(879)", "Delete MethodInvocation(880)", "Delete Assignment: =(881)", "Delete ExpressionStatement(882)", "Delete Block(883)", "Delete ForStatement(884)", "Delete SimpleName: newAndNode(885)", "Delete ReturnStatement(886)", "Delete Block(887)", "Delete MethodDeclaration(888)", "Delete TextElement:  use (889)", "Delete SimpleName: getNonSargFilterRexNode(890)", "Delete MethodRef(891)", "Delete TagElement: @link(892)", "Delete TagElement: @deprecated(893)", "Delete Javadoc(894)", "Delete Modifier: public(895)", "Delete SimpleName: RexNode(896)", "Delete SimpleType: RexNode(897)", "Delete SimpleName: getPostFilterRexNode(898)", "Delete SimpleName: getNonSargFilterRexNode(899)", "Delete MethodInvocation(900)", "Delete ReturnStatement(901)", "Delete Block(902)", "Delete MethodDeclaration(903)", "Delete TextElement: Reconstructs a rex predicate from a list of SargBindings which are AND'ed(904)", "Delete TextElement: together.(905)", "Delete TagElement(906)", "Delete SimpleName: sargBindingList(907)", "Delete TextElement:  list of SargBindings to be converted.(908)", "Delete TagElement: @param(909)", "Delete TextElement:  the rex predicate reconstructed from the list of SargBindings.(910)", "Delete TagElement: @return(911)", "Delete Javadoc(912)", "Delete Modifier: public(913)", "Delete SimpleName: RexNode(914)", "Delete SimpleType: RexNode(915)", "Delete SimpleName: getSargBindingListToRexNode(916)", "Delete SimpleName: List(917)", "Delete SimpleType: List(918)", "Delete SimpleName: SargBinding(919)", "Delete SimpleType: SargBinding(920)", "Delete ParameterizedType: List<SargBinding>(921)", "Delete SimpleName: sargBindingList(922)", "Delete SingleVariableDeclaration(923)", "Delete SimpleName: sargBindingList(924)", "Delete SimpleName: isEmpty(925)", "Delete MethodInvocation(926)", "Delete NullLiteral(927)", "Delete ReturnStatement(928)", "Delete Block(929)", "Delete IfStatement(930)", "Delete SimpleName: RexNode(931)", "Delete SimpleType: RexNode(932)", "Delete SimpleName: newAndNode(933)", "Delete SimpleName: sarg2RexMap(934)", "Delete SimpleName: get(935)", "Delete SimpleName: sargBindingList(936)", "Delete SimpleName: get(937)", "Delete NumberLiteral: 0(938)", "Delete MethodInvocation(939)", "Delete SimpleName: getExpr(940)", "Delete MethodInvocation(941)", "Delete MethodInvocation(942)", "Delete VariableDeclarationFragment(943)", "Delete VariableDeclarationStatement(944)", "Delete PrimitiveType: int(945)", "Delete SimpleName: i(946)", "Delete NumberLiteral: 1(947)", "Delete VariableDeclarationFragment(948)", "Delete VariableDeclarationExpression(949)", "Delete SimpleName: i(950)", "Delete SimpleName: sargBindingList(951)", "Delete SimpleName: size(952)", "Delete MethodInvocation(953)", "Delete InfixExpression: <(954)", "Delete SimpleName: i(955)", "Delete PostfixExpression: ++(956)", "Delete SimpleName: RexNode(957)", "Delete SimpleType: RexNode(958)", "Delete SimpleName: nextNode(959)", "Delete SimpleName: sarg2RexMap(960)", "Delete SimpleName: get(961)", "Delete SimpleName: sargBindingList(962)", "Delete SimpleName: get(963)", "Delete SimpleName: i(964)", "Delete MethodInvocation(965)", "Delete SimpleName: getExpr(966)", "Delete MethodInvocation(967)", "Delete MethodInvocation(968)", "Delete VariableDeclarationFragment(969)", "Delete VariableDeclarationStatement(970)", "Delete SimpleName: newAndNode(971)", "Delete SimpleName: factory(972)", "Delete SimpleName: getRexBuilder(973)", "Delete MethodInvocation(974)", "Delete SimpleName: makeCall(975)", "Delete QualifiedName: SqlStdOperatorTable.AND(976)", "Delete SimpleName: newAndNode(977)", "Delete SimpleName: nextNode(978)", "Delete MethodInvocation(979)", "Delete Assignment: =(980)", "Delete ExpressionStatement(981)", "Delete Block(982)", "Delete ForStatement(983)", "Delete SimpleName: newAndNode(984)", "Delete ReturnStatement(985)", "Delete Block(986)", "Delete MethodDeclaration(987)", "Delete TextElement:  use (988)", "Delete SimpleName: getSargBindingListToRexNode(989)", "Delete SimpleName: List(990)", "Delete SimpleType: List(991)", "Delete MethodRefParameter(992)", "Delete MethodRef(993)", "Delete TagElement: @link(994)", "Delete TagElement: @deprecated(995)", "Delete Javadoc(996)", "Delete Modifier: public(997)", "Delete SimpleName: RexNode(998)", "Delete SimpleType: RexNode(999)", "Delete SimpleName: getResidualSargRexNode(1000)", "Delete SimpleName: List(1001)", "Delete SimpleType: List(1002)", "Delete SimpleName: SargBinding(1003)", "Delete SimpleType: SargBinding(1004)", "Delete ParameterizedType: List<SargBinding>(1005)", "Delete SimpleName: residualSargList(1006)", "Delete SingleVariableDeclaration(1007)", "Delete SimpleName: getSargBindingListToRexNode(1008)", "Delete SimpleName: residualSargList(1009)", "Delete MethodInvocation(1010)", "Delete ReturnStatement(1011)", "Delete Block(1012)", "Delete MethodDeclaration(1013)", "Delete TextElement: Analyzes a rex predicate.(1014)", "Delete TagElement(1015)", "Delete SimpleName: rexPredicate(1016)", "Delete TextElement:  predicate to be analyzed(1017)", "Delete TagElement: @param(1018)", "Delete TextElement:  corresponding bound sarg expression, or null if analysis failed(1019)", "Delete TagElement: @return(1020)", "Delete Javadoc(1021)", "Delete Modifier: public(1022)", "Delete SimpleName: SargBinding(1023)", "Delete SimpleType: SargBinding(1024)", "Delete SimpleName: analyze(1025)", "Delete SimpleName: RexNode(1026)", "Delete SimpleType: RexNode(1027)", "Delete SimpleName: rexPredicate(1028)", "Delete SingleVariableDeclaration(1029)", "Delete SimpleName: NodeVisitor(1030)", "Delete SimpleType: NodeVisitor(1031)", "Delete SimpleName: visitor(1032)", "Delete SimpleName: NodeVisitor(1033)", "Delete SimpleType: NodeVisitor(1034)", "Delete ClassInstanceCreation(1035)", "Delete VariableDeclarationFragment(1036)", "Delete VariableDeclarationStatement(1037)", "Delete SimpleName: exprStack(1038)", "Delete SimpleName: ArrayList(1039)", "Delete SimpleType: ArrayList(1040)", "Delete SimpleName: SargExpr(1041)", "Delete SimpleType: SargExpr(1042)", "Delete ParameterizedType: ArrayList<SargExpr>(1043)", "Delete ClassInstanceCreation(1044)", "Delete Assignment: =(1045)", "Delete ExpressionStatement(1046)", "Delete SimpleName: failed(1047)", "Delete BooleanLiteral: false(1048)", "Delete Assignment: =(1049)", "Delete ExpressionStatement(1050)", "Delete SimpleName: boundInputRef(1051)", "Delete NullLiteral(1052)", "Delete Assignment: =(1053)", "Delete ExpressionStatement(1054)", "Delete SimpleName: clearLeaf(1055)", "Delete MethodInvocation(1056)", "Delete ExpressionStatement(1057)", "Delete SimpleName: rexPredicate(1058)", "Delete SimpleName: accept(1059)", "Delete SimpleName: visitor(1060)", "Delete MethodInvocation(1061)", "Delete ExpressionStatement(1062)", "Delete SimpleName: boundInputRef(1063)", "Delete NullLiteral(1064)", "Delete InfixExpression: ==(1065)", "Delete SimpleName: failed(1066)", "Delete BooleanLiteral: true(1067)", "Delete Assignment: =(1068)", "Delete ExpressionStatement(1069)", "Delete Block(1070)", "Delete IfStatement(1071)", "Delete SimpleName: exprStack(1072)", "Delete SimpleName: isEmpty(1073)", "Delete MethodInvocation(1074)", "Delete SimpleName: failed(1075)", "Delete BooleanLiteral: true(1076)", "Delete Assignment: =(1077)", "Delete ExpressionStatement(1078)", "Delete Block(1079)", "Delete IfStatement(1080)", "Delete SimpleName: failed(1081)", "Delete NullLiteral(1082)", "Delete ReturnStatement(1083)", "Delete Block(1084)", "Delete IfStatement(1085)", "Delete SimpleName: exprStack(1086)", "Delete SimpleName: size(1087)", "Delete MethodInvocation(1088)", "Delete NumberLiteral: 1(1089)", "Delete InfixExpression: ==(1090)", "Delete AssertStatement(1091)", "Delete SimpleName: SargExpr(1092)", "Delete SimpleType: SargExpr(1093)", "Delete SimpleName: expr(1094)", "Delete SimpleName: exprStack(1095)", "Delete SimpleName: get(1096)", "Delete NumberLiteral: 0(1097)", "Delete MethodInvocation(1098)", "Delete VariableDeclarationFragment(1099)", "Delete VariableDeclarationStatement(1100)", "Delete SimpleName: testDynamicParamSupport(1101)", "Delete SimpleName: expr(1102)", "Delete MethodInvocation(1103)", "Delete PrefixExpression: !(1104)", "Delete SimpleName: failed(1105)", "Delete BooleanLiteral: true(1106)", "Delete Assignment: =(1107)", "Delete ExpressionStatement(1108)", "Delete NullLiteral(1109)", "Delete ReturnStatement(1110)", "Delete Block(1111)", "Delete IfStatement(1112)", "Delete SimpleName: SargBinding(1113)", "Delete SimpleType: SargBinding(1114)", "Delete SimpleName: expr(1115)", "Delete SimpleName: boundInputRef(1116)", "Delete ClassInstanceCreation(1117)", "Delete ReturnStatement(1118)", "Delete Block(1119)", "Delete MethodDeclaration(1120)", "Delete Modifier: private(1121)", "Delete PrimitiveType: void(1122)", "Delete SimpleName: clearLeaf(1123)", "Delete SimpleName: coordinate(1124)", "Delete NullLiteral(1125)", "Delete Assignment: =(1126)", "Delete ExpressionStatement(1127)", "Delete SimpleName: variableSeen(1128)", "Delete BooleanLiteral: false(1129)", "Delete Assignment: =(1130)", "Delete ExpressionStatement(1131)", "Delete SimpleName: reverse(1132)", "Delete BooleanLiteral: false(1133)", "Delete Assignment: =(1134)", "Delete ExpressionStatement(1135)", "Delete Block(1136)", "Delete MethodDeclaration(1137)", "Delete Modifier: private(1138)", "Delete Modifier: abstract(1139)", "Delete SimpleName: CallConvertlet(1140)", "Delete Modifier: public(1141)", "Delete Modifier: abstract(1142)", "Delete PrimitiveType: void(1143)", "Delete SimpleName: convert(1144)", "Delete SimpleName: RexCall(1145)", "Delete SimpleType: RexCall(1146)", "Delete SimpleName: call(1147)", "Delete SingleVariableDeclaration(1148)", "Delete MethodDeclaration(1149)", "Delete TypeDeclaration: class(1150)", "Delete Modifier: private(1151)", "Delete SimpleName: ComparisonConvertlet(1152)", "Delete SimpleName: CallConvertlet(1153)", "Delete SimpleType: CallConvertlet(1154)", "Delete Modifier: private(1155)", "Delete Modifier: final(1156)", "Delete SimpleName: SargBoundType(1157)", "Delete SimpleType: SargBoundType(1158)", "Delete SimpleName: boundType(1159)", "Delete VariableDeclarationFragment(1160)", "Delete FieldDeclaration(1161)", "Delete Modifier: private(1162)", "Delete Modifier: final(1163)", "Delete SimpleName: SargStrictness(1164)", "Delete SimpleType: SargStrictness(1165)", "Delete SimpleName: strictness(1166)", "Delete VariableDeclarationFragment(1167)", "Delete FieldDeclaration(1168)", "Delete SimpleName: ComparisonConvertlet(1169)", "Delete SimpleName: SargBoundType(1170)", "Delete SimpleType: SargBoundType(1171)", "Delete SimpleName: boundType(1172)", "Delete SingleVariableDeclaration(1173)", "Delete SimpleName: SargStrictness(1174)", "Delete SimpleType: SargStrictness(1175)", "Delete SimpleName: strictness(1176)", "Delete SingleVariableDeclaration(1177)", "Delete ThisExpression(1178)", "Delete SimpleName: boundType(1179)", "Delete FieldAccess(1180)", "Delete SimpleName: boundType(1181)", "Delete Assignment: =(1182)", "Delete ExpressionStatement(1183)", "Delete ThisExpression(1184)", "Delete SimpleName: strictness(1185)", "Delete FieldAccess(1186)", "Delete SimpleName: strictness(1187)", "Delete Assignment: =(1188)", "Delete ExpressionStatement(1189)", "Delete Block(1190)", "Delete MethodDeclaration(1191)", "Delete Modifier: public(1192)", "Delete PrimitiveType: void(1193)", "Delete SimpleName: convert(1194)", "Delete SimpleName: RexCall(1195)", "Delete SimpleType: RexCall(1196)", "Delete SimpleName: call(1197)", "Delete SingleVariableDeclaration(1198)", "Delete SimpleName: variableSeen(1199)", "Delete PrefixExpression: !(1200)", "Delete SimpleName: failed(1201)", "Delete BooleanLiteral: true(1202)", "Delete Assignment: =(1203)", "Delete ExpressionStatement(1204)", "Delete Block(1205)", "Delete IfStatement(1206)", "Delete SimpleName: SqlOperator(1207)", "Delete SimpleType: SqlOperator(1208)", "Delete SimpleName: op(1209)", "Delete SimpleName: call(1210)", "Delete SimpleName: getOperator(1211)", "Delete MethodInvocation(1212)", "Delete VariableDeclarationFragment(1213)", "Delete VariableDeclarationStatement(1214)", "Delete SimpleName: op(1215)", "Delete SimpleName: getKind(1216)", "Delete MethodInvocation(1217)", "Delete SimpleName: IS_NULL(1218)", "Delete SwitchCase(1219)", "Delete SimpleName: coordinate(1220)", "Delete SimpleName: factory(1221)", "Delete SimpleName: getRexBuilder(1222)", "Delete MethodInvocation(1223)", "Delete SimpleName: constantNull(1224)", "Delete MethodInvocation(1225)", "Delete Assignment: =(1226)", "Delete ExpressionStatement(1227)", "Delete BreakStatement(1228)", "Delete SimpleName: IS_TRUE(1229)", "Delete SwitchCase(1230)", "Delete SimpleName: coordinate(1231)", "Delete SimpleName: factory(1232)", "Delete SimpleName: getRexBuilder(1233)", "Delete MethodInvocation(1234)", "Delete SimpleName: makeLiteral(1235)", "Delete BooleanLiteral: true(1236)", "Delete MethodInvocation(1237)", "Delete Assignment: =(1238)", "Delete ExpressionStatement(1239)", "Delete BreakStatement(1240)", "Delete SimpleName: IS_FALSE(1241)", "Delete SwitchCase(1242)", "Delete SimpleName: coordinate(1243)", "Delete SimpleName: factory(1244)", "Delete SimpleName: getRexBuilder(1245)", "Delete MethodInvocation(1246)", "Delete SimpleName: makeLiteral(1247)", "Delete BooleanLiteral: false(1248)", "Delete MethodInvocation(1249)", "Delete Assignment: =(1250)", "Delete ExpressionStatement(1251)", "Delete BreakStatement(1252)", "Delete SwitchCase(1253)", "Delete SimpleName: coordinate(1254)", "Delete NullLiteral(1255)", "Delete InfixExpression: ==(1256)", "Delete SimpleName: failed(1257)", "Delete BooleanLiteral: true(1258)", "Delete Assignment: =(1259)", "Delete ExpressionStatement(1260)", "Delete Block(1261)", "Delete IfStatement(1262)", "Delete SwitchStatement(1263)", "Delete SimpleName: failed(1264)", "Delete ReturnStatement(1265)", "Delete Block(1266)", "Delete IfStatement(1267)", "Delete SimpleName: SargIntervalExpr(1268)", "Delete SimpleType: SargIntervalExpr(1269)", "Delete SimpleName: expr(1270)", "Delete SimpleName: factory(1271)", "Delete SimpleName: newIntervalExpr(1272)", "Delete SimpleName: boundInputRef(1273)", "Delete SimpleName: getType(1274)", "Delete MethodInvocation(1275)", "Delete MethodInvocation(1276)", "Delete VariableDeclarationFragment(1277)", "Delete VariableDeclarationStatement(1278)", "Delete SimpleName: boundType(1279)", "Delete NullLiteral(1280)", "Delete InfixExpression: ==(1281)", "Delete SimpleName: expr(1282)", "Delete SimpleName: setPoint(1283)", "Delete SimpleName: coordinate(1284)", "Delete MethodInvocation(1285)", "Delete ExpressionStatement(1286)", "Delete Block(1287)", "Delete SimpleName: SargBoundType(1288)", "Delete SimpleType: SargBoundType(1289)", "Delete SimpleName: actualBound(1290)", "Delete SimpleName: boundType(1291)", "Delete VariableDeclarationFragment(1292)", "Delete VariableDeclarationStatement(1293)", "Delete SimpleName: reverse(1294)", "Delete SimpleName: actualBound(1295)", "Delete QualifiedName: SargBoundType.LOWER(1296)", "Delete InfixExpression: ==(1297)", "Delete SimpleName: actualBound(1298)", "Delete QualifiedName: SargBoundType.UPPER(1299)", "Delete Assignment: =(1300)", "Delete ExpressionStatement(1301)", "Delete Block(1302)", "Delete SimpleName: actualBound(1303)", "Delete QualifiedName: SargBoundType.LOWER(1304)", "Delete Assignment: =(1305)", "Delete ExpressionStatement(1306)", "Delete Block(1307)", "Delete IfStatement(1308)", "Delete Block(1309)", "Delete IfStatement(1310)", "Delete SimpleName: actualBound(1311)", "Delete QualifiedName: SargBoundType.LOWER(1312)", "Delete InfixExpression: ==(1313)", "Delete SimpleName: expr(1314)", "Delete SimpleName: setLower(1315)", "Delete SimpleName: coordinate(1316)", "Delete SimpleName: strictness(1317)", "Delete MethodInvocation(1318)", "Delete ExpressionStatement(1319)", "Delete Block(1320)", "Delete SimpleName: expr(1321)", "Delete SimpleName: setUpper(1322)", "Delete SimpleName: coordinate(1323)", "Delete SimpleName: strictness(1324)", "Delete MethodInvocation(1325)", "Delete ExpressionStatement(1326)", "Delete Block(1327)", "Delete IfStatement(1328)", "Delete Block(1329)", "Delete IfStatement(1330)", "Delete SimpleName: exprStack(1331)", "Delete SimpleName: add(1332)", "Delete SimpleName: expr(1333)", "Delete MethodInvocation(1334)", "Delete ExpressionStatement(1335)", "Delete SimpleName: clearLeaf(1336)", "Delete MethodInvocation(1337)", "Delete ExpressionStatement(1338)", "Delete Block(1339)", "Delete MethodDeclaration(1340)", "Delete TypeDeclaration: class(1341)", "Delete Modifier: private(1342)", "Delete SimpleName: BooleanConvertlet(1343)", "Delete SimpleName: CallConvertlet(1344)", "Delete SimpleType: CallConvertlet(1345)", "Delete Modifier: private(1346)", "Delete Modifier: final(1347)", "Delete SimpleName: SargSetOperator(1348)", "Delete SimpleType: SargSetOperator(1349)", "Delete SimpleName: setOp(1350)", "Delete VariableDeclarationFragment(1351)", "Delete FieldDeclaration(1352)", "Delete SimpleName: BooleanConvertlet(1353)", "Delete SimpleName: SargSetOperator(1354)", "Delete SimpleType: SargSetOperator(1355)", "Delete SimpleName: setOp(1356)", "Delete SingleVariableDeclaration(1357)", "Delete ThisExpression(1358)", "Delete SimpleName: setOp(1359)", "Delete FieldAccess(1360)", "Delete SimpleName: setOp(1361)", "Delete Assignment: =(1362)", "Delete ExpressionStatement(1363)", "Delete Block(1364)", "Delete MethodDeclaration(1365)", "Delete Modifier: public(1366)", "Delete PrimitiveType: void(1367)", "Delete SimpleName: convert(1368)", "Delete SimpleName: RexCall(1369)", "Delete SimpleType: RexCall(1370)", "Delete SimpleName: call(1371)", "Delete SingleVariableDeclaration(1372)", "Delete SimpleName: variableSeen(1373)", "Delete SimpleName: coordinate(1374)", "Delete NullLiteral(1375)", "Delete InfixExpression: !=(1376)", "Delete ParenthesizedExpression(1377)", "Delete InfixExpression: ||(1378)", "Delete SimpleName: failed(1379)", "Delete BooleanLiteral: true(1380)", "Delete Assignment: =(1381)", "Delete ExpressionStatement(1382)", "Delete Block(1383)", "Delete IfStatement(1384)", "Delete SimpleName: failed(1385)", "Delete ReturnStatement(1386)", "Delete Block(1387)", "Delete IfStatement(1388)", "Delete PrimitiveType: int(1389)", "Delete SimpleName: nOperands(1390)", "Delete SimpleName: call(1391)", "Delete SimpleName: getOperands(1392)", "Delete MethodInvocation(1393)", "Delete SimpleName: size(1394)", "Delete MethodInvocation(1395)", "Delete VariableDeclarationFragment(1396)", "Delete VariableDeclarationStatement(1397)", "Delete SimpleName: exprStack(1398)", "Delete SimpleName: size(1399)", "Delete MethodInvocation(1400)", "Delete SimpleName: nOperands(1401)", "Delete InfixExpression: >=(1402)", "Delete AssertStatement(1403)", "Delete SimpleName: SargSetExpr(1404)", "Delete SimpleType: SargSetExpr(1405)", "Delete SimpleName: expr(1406)", "Delete SimpleName: factory(1407)", "Delete SimpleName: newSetExpr(1408)", "Delete SimpleName: boundInputRef(1409)", "Delete SimpleName: getType(1410)", "Delete MethodInvocation(1411)", "Delete SimpleName: setOp(1412)", "Delete MethodInvocation(1413)", "Delete VariableDeclarationFragment(1414)", "Delete VariableDeclarationStatement(1415)", "Delete SimpleName: ListIterator(1416)", "Delete SimpleType: ListIterator(1417)", "Delete SimpleName: SargExpr(1418)", "Delete SimpleType: SargExpr(1419)", "Delete ParameterizedType: ListIterator<SargExpr>(1420)", "Delete SimpleName: iter(1421)", "Delete SimpleName: exprStack(1422)", "Delete SimpleName: listIterator(1423)", "Delete SimpleName: exprStack(1424)", "Delete SimpleName: size(1425)", "Delete MethodInvocation(1426)", "Delete SimpleName: nOperands(1427)", "Delete InfixExpression: -(1428)", "Delete MethodInvocation(1429)", "Delete VariableDeclarationFragment(1430)", "Delete VariableDeclarationStatement(1431)", "Delete SimpleName: iter(1432)", "Delete SimpleName: hasNext(1433)", "Delete MethodInvocation(1434)", "Delete SimpleName: expr(1435)", "Delete SimpleName: addChild(1436)", "Delete SimpleName: iter(1437)", "Delete SimpleName: next(1438)", "Delete MethodInvocation(1439)", "Delete MethodInvocation(1440)", "Delete ExpressionStatement(1441)", "Delete SimpleName: iter(1442)", "Delete SimpleName: remove(1443)", "Delete MethodInvocation(1444)", "Delete ExpressionStatement(1445)", "Delete Block(1446)", "Delete WhileStatement(1447)", "Delete SimpleName: exprStack(1448)", "Delete SimpleName: add(1449)", "Delete SimpleName: expr(1450)", "Delete MethodInvocation(1451)", "Delete ExpressionStatement(1452)", "Delete Block(1453)", "Delete MethodDeclaration(1454)", "Delete TypeDeclaration: class(1455)", "Delete Modifier: private(1456)", "Delete SimpleName: NodeVisitor(1457)", "Delete SimpleName: RexVisitorImpl(1458)", "Delete SimpleType: RexVisitorImpl(1459)", "Delete SimpleName: Void(1460)", "Delete SimpleType: Void(1461)", "Delete ParameterizedType: RexVisitorImpl<Void>(1462)", "Delete SimpleName: NodeVisitor(1463)", "Delete BooleanLiteral: true(1464)", "Delete SuperConstructorInvocation(1465)", "Delete Block(1466)", "Delete MethodDeclaration(1467)", "Delete Modifier: public(1468)", "Delete SimpleName: Void(1469)", "Delete SimpleType: Void(1470)", "Delete SimpleName: visitInputRef(1471)", "Delete SimpleName: RexInputRef(1472)", "Delete SimpleType: RexInputRef(1473)", "Delete SimpleName: inputRef(1474)", "Delete SingleVariableDeclaration(1475)", "Delete PrimitiveType: boolean(1476)", "Delete SimpleName: coordinate(1477)", "Delete SimpleName: isRealRexInputRef(1478)", "Delete SimpleName: inputRef(1479)", "Delete MethodInvocation(1480)", "Delete PrefixExpression: !(1481)", "Delete VariableDeclarationFragment(1482)", "Delete VariableDeclarationStatement(1483)", "Delete SimpleName: coordinate(1484)", "Delete SimpleName: visitCoordinate(1485)", "Delete SimpleName: inputRef(1486)", "Delete MethodInvocation(1487)", "Delete ExpressionStatement(1488)", "Delete NullLiteral(1489)", "Delete ReturnStatement(1490)", "Delete Block(1491)", "Delete IfStatement(1492)", "Delete SimpleName: variableSeen(1493)", "Delete BooleanLiteral: true(1494)", "Delete Assignment: =(1495)", "Delete ExpressionStatement(1496)", "Delete SimpleName: boundInputRef(1497)", "Delete NullLiteral(1498)", "Delete InfixExpression: ==(1499)", "Delete SimpleName: boundInputRef(1500)", "Delete SimpleName: inputRef(1501)", "Delete Assignment: =(1502)", "Delete ExpressionStatement(1503)", "Delete NullLiteral(1504)", "Delete ReturnStatement(1505)", "Delete Block(1506)", "Delete IfStatement(1507)", "Delete SimpleName: inputRef(1508)", "Delete SimpleName: getIndex(1509)", "Delete MethodInvocation(1510)", "Delete SimpleName: boundInputRef(1511)", "Delete SimpleName: getIndex(1512)", "Delete MethodInvocation(1513)", "Delete InfixExpression: !=(1514)", "Delete SimpleName: failed(1515)", "Delete BooleanLiteral: true(1516)", "Delete Assignment: =(1517)", "Delete ExpressionStatement(1518)", "Delete NullLiteral(1519)", "Delete ReturnStatement(1520)", "Delete Block(1521)", "Delete IfStatement(1522)", "Delete NullLiteral(1523)", "Delete ReturnStatement(1524)", "Delete Block(1525)", "Delete MethodDeclaration(1526)", "Delete Modifier: private(1527)", "Delete PrimitiveType: boolean(1528)", "Delete SimpleName: isRealRexInputRef(1529)", "Delete SimpleName: RexInputRef(1530)", "Delete SimpleType: RexInputRef(1531)", "Delete SimpleName: inputRef(1532)", "Delete SingleVariableDeclaration(1533)", "Delete SimpleName: lowerRexInputIdx(1534)", "Delete NumberLiteral: 0(1535)", "Delete InfixExpression: <(1536)", "Delete SimpleName: upperRexInputIdx(1537)", "Delete NumberLiteral: 0(1538)", "Delete InfixExpression: <(1539)", "Delete InfixExpression: &&(1540)", "Delete BooleanLiteral: true(1541)", "Delete ReturnStatement(1542)", "Delete Block(1543)", "Delete IfStatement(1544)", "Delete PrimitiveType: int(1545)", "Delete SimpleName: idx(1546)", "Delete SimpleName: inputRef(1547)", "Delete SimpleName: getIndex(1548)", "Delete MethodInvocation(1549)", "Delete VariableDeclarationFragment(1550)", "Delete VariableDeclarationStatement(1551)", "Delete SimpleName: idx(1552)", "Delete SimpleName: lowerRexInputIdx(1553)", "Delete InfixExpression: <(1554)", "Delete SimpleName: idx(1555)", "Delete SimpleName: upperRexInputIdx(1556)", "Delete InfixExpression: >=(1557)", "Delete InfixExpression: ||(1558)", "Delete ReturnStatement(1559)", "Delete Block(1560)", "Delete MethodDeclaration(1561)", "Delete Modifier: public(1562)", "Delete SimpleName: Void(1563)", "Delete SimpleType: Void(1564)", "Delete SimpleName: visitLiteral(1565)", "Delete SimpleName: RexLiteral(1566)", "Delete SimpleType: RexLiteral(1567)", "Delete SimpleName: literal(1568)", "Delete SingleVariableDeclaration(1569)", "Delete SimpleName: visitCoordinate(1570)", "Delete SimpleName: literal(1571)", "Delete MethodInvocation(1572)", "Delete ExpressionStatement(1573)", "Delete NullLiteral(1574)", "Delete ReturnStatement(1575)", "Delete Block(1576)", "Delete MethodDeclaration(1577)", "Delete Modifier: public(1578)", "Delete SimpleName: Void(1579)", "Delete SimpleType: Void(1580)", "Delete SimpleName: visitOver(1581)", "Delete SimpleName: RexOver(1582)", "Delete SimpleType: RexOver(1583)", "Delete SimpleName: over(1584)", "Delete SingleVariableDeclaration(1585)", "Delete SimpleName: failed(1586)", "Delete BooleanLiteral: true(1587)", "Delete Assignment: =(1588)", "Delete ExpressionStatement(1589)", "Delete NullLiteral(1590)", "Delete ReturnStatement(1591)", "Delete Block(1592)", "Delete MethodDeclaration(1593)", "Delete Modifier: public(1594)", "Delete SimpleName: Void(1595)", "Delete SimpleType: Void(1596)", "Delete SimpleName: visitCorrelVariable(1597)", "Delete SimpleName: RexCorrelVariable(1598)", "Delete SimpleType: RexCorrelVariable(1599)", "Delete SimpleName: correlVariable(1600)", "Delete SingleVariableDeclaration(1601)", "Delete SimpleName: failed(1602)", "Delete BooleanLiteral: true(1603)", "Delete Assignment: =(1604)", "Delete ExpressionStatement(1605)", "Delete NullLiteral(1606)", "Delete ReturnStatement(1607)", "Delete Block(1608)", "Delete MethodDeclaration(1609)", "Delete Modifier: public(1610)", "Delete SimpleName: Void(1611)", "Delete SimpleType: Void(1612)", "Delete SimpleName: visitCall(1613)", "Delete SimpleName: RexCall(1614)", "Delete SimpleType: RexCall(1615)", "Delete SimpleName: call(1616)", "Delete SingleVariableDeclaration(1617)", "Delete SimpleName: CallConvertlet(1618)", "Delete SimpleType: CallConvertlet(1619)", "Delete SimpleName: convertlet(1620)", "Delete SimpleName: convertletMap(1621)", "Delete SimpleName: get(1622)", "Delete SimpleName: call(1623)", "Delete SimpleName: getOperator(1624)", "Delete MethodInvocation(1625)", "Delete MethodInvocation(1626)", "Delete VariableDeclarationFragment(1627)", "Delete VariableDeclarationStatement(1628)", "Delete SimpleName: convertlet(1629)", "Delete NullLiteral(1630)", "Delete InfixExpression: ==(1631)", "Delete SimpleName: failed(1632)", "Delete BooleanLiteral: true(1633)", "Delete Assignment: =(1634)", "Delete ExpressionStatement(1635)", "Delete NullLiteral(1636)", "Delete ReturnStatement(1637)", "Delete Block(1638)", "Delete IfStatement(1639)", "Delete SimpleName: visitCall(1640)", "Delete SimpleName: call(1641)", "Delete SuperMethodInvocation(1642)", "Delete ExpressionStatement(1643)", "Delete SimpleName: convertlet(1644)", "Delete SimpleName: convert(1645)", "Delete SimpleName: call(1646)", "Delete MethodInvocation(1647)", "Delete ExpressionStatement(1648)", "Delete NullLiteral(1649)", "Delete ReturnStatement(1650)", "Delete Block(1651)", "Delete MethodDeclaration(1652)", "Delete Modifier: public(1653)", "Delete SimpleName: Void(1654)", "Delete SimpleType: Void(1655)", "Delete SimpleName: visitDynamicParam(1656)", "Delete SimpleName: RexDynamicParam(1657)", "Delete SimpleType: RexDynamicParam(1658)", "Delete SimpleName: dynamicParam(1659)", "Delete SingleVariableDeclaration(1660)", "Delete SimpleName: simpleMode(1661)", "Delete SimpleName: failed(1662)", "Delete BooleanLiteral: true(1663)", "Delete Assignment: =(1664)", "Delete ExpressionStatement(1665)", "Delete Block(1666)", "Delete SimpleName: visitCoordinate(1667)", "Delete SimpleName: dynamicParam(1668)", "Delete MethodInvocation(1669)", "Delete ExpressionStatement(1670)", "Delete Block(1671)", "Delete IfStatement(1672)", "Delete NullLiteral(1673)", "Delete ReturnStatement(1674)", "Delete Block(1675)", "Delete MethodDeclaration(1676)", "Delete Modifier: private(1677)", "Delete PrimitiveType: void(1678)", "Delete SimpleName: visitCoordinate(1679)", "Delete SimpleName: RexNode(1680)", "Delete SimpleType: RexNode(1681)", "Delete SimpleName: node(1682)", "Delete SingleVariableDeclaration(1683)", "Delete SimpleName: variableSeen(1684)", "Delete PrefixExpression: !(1685)", "Delete SimpleName: reverse(1686)", "Delete BooleanLiteral: true(1687)", "Delete Assignment: =(1688)", "Delete ExpressionStatement(1689)", "Delete Block(1690)", "Delete IfStatement(1691)", "Delete SimpleName: coordinate(1692)", "Delete NullLiteral(1693)", "Delete InfixExpression: !=(1694)", "Delete SimpleName: failed(1695)", "Delete BooleanLiteral: true(1696)", "Delete Assignment: =(1697)", "Delete ExpressionStatement(1698)", "Delete ReturnStatement(1699)", "Delete Block(1700)", "Delete IfStatement(1701)", "Delete SimpleName: coordinate(1702)", "Delete SimpleName: node(1703)", "Delete Assignment: =(1704)", "Delete ExpressionStatement(1705)", "Delete Block(1706)", "Delete MethodDeclaration(1707)", "Delete Modifier: public(1708)", "Delete SimpleName: Void(1709)", "Delete SimpleType: Void(1710)", "Delete SimpleName: visitRangeRef(1711)", "Delete SimpleName: RexRangeRef(1712)", "Delete SimpleType: RexRangeRef(1713)", "Delete SimpleName: rangeRef(1714)", "Delete SingleVariableDeclaration(1715)", "Delete SimpleName: failed(1716)", "Delete BooleanLiteral: true(1717)", "Delete Assignment: =(1718)", "Delete ExpressionStatement(1719)", "Delete NullLiteral(1720)", "Delete ReturnStatement(1721)", "Delete Block(1722)", "Delete MethodDeclaration(1723)", "Delete Modifier: public(1724)", "Delete SimpleName: Void(1725)", "Delete SimpleType: Void(1726)", "Delete SimpleName: visitFieldAccess(1727)", "Delete SimpleName: RexFieldAccess(1728)", "Delete SimpleType: RexFieldAccess(1729)", "Delete SimpleName: fieldAccess(1730)", "Delete SingleVariableDeclaration(1731)", "Delete SimpleName: failed(1732)", "Delete BooleanLiteral: true(1733)", "Delete Assignment: =(1734)", "Delete ExpressionStatement(1735)", "Delete NullLiteral(1736)", "Delete ReturnStatement(1737)", "Delete Block(1738)", "Delete MethodDeclaration(1739)", "Delete TypeDeclaration: class(1740)", "Delete TypeDeclaration: class(1741)"]}}, {"SargSetExpr_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: java.util"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.reltype", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.rex"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.util", "DEL ImportDeclaration"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.common.collect.ImmutableList"]}, {"root": "DEL TypeDeclaration: class", "operations": ["DEL SimpleName: SargIntervalSequence", "DEL TextElement: operator", "DEL SimpleName: setOp", "DEL FieldAccess", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 1", "DEL SimpleType: SargInterval", "DEL IfStatement", "DEL Block", "DEL InfixExpression: ==", "DEL MethodDeclaration", "DEL Assignment: =", "DEL Block", "DEL SimpleName: targetIter", "DEL SimpleName: seq", "DEL PrimitiveType: int", "DEL TagElement", "DEL SimpleType: ArrayList", "DEL Modifier: private", "DEL SimpleName: getUpperBound", "DEL Block", "DEL Modifier: private", "DEL IfStatement", "DEL SimpleName: targetSeq", "DEL SimpleName: newSeq", "DEL NullLiteral", "DEL SimpleType: IntervalComparator", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL MethodInvocation", "DEL ReturnStatement", "DEL SimpleType: SargSetOperator", "DEL SimpleName: newTarget", "DEL SimpleName: next", "DEL Block", "DEL ReturnStatement", "DEL SimpleType: SargInterval", "DEL SimpleName: c", "DEL Assignment: =", "DEL MethodInvocation", "DEL SimpleName: next", "DEL TextElement: .", "DEL Modifier: static", "DEL SimpleName: accumulator", "DEL SimpleName: sourceIter", "DEL ReturnStatement", "DEL SimpleName: SargIntervalSequence", "DEL ExpressionStatement", "DEL Modifier: public", "DEL SimpleName: interval", "DEL SimpleName: sb", "DEL SimpleName: SargInterval", "DEL SimpleName: evaluateComplemented", "DEL SimpleName: accumulator", "DEL InfixExpression: <", "DEL ForStatement", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: hasNext", "DEL SimpleName: next", "DEL SimpleName: children", "DEL AssertStatement", "DEL Assignment: =", "DEL ForStatement", "DEL SimpleName: children", "DEL Modifier: final", "DEL SimpleType: SargInterval", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: List", "DEL MethodInvocation", "DEL Modifier: private", "DEL SingleVariableDeclaration", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: IntervalComparator", "DEL Modifier: final", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: SargSetOperator", "DEL MethodInvocation", "DEL SimpleName: seq", "DEL SimpleName: getUpperBound", "DEL VariableDeclarationStatement", "DEL Block", "DEL SimpleName: targetIter", "DEL SimpleName: target", "DEL SingleVariableDeclaration", "DEL SimpleName: interval", "DEL Modifier: public", "DEL ThisExpression", "DEL VariableDeclarationStatement", "DEL MethodDeclaration", "DEL NumberLiteral: 0", "DEL SimpleName: newSeq", "DEL ParameterizedType: List<SargIntervalSequence>", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL TextElement:  a read-only list of this expression's children (the returned", "DEL SimpleName: getLowerBound", "DEL SimpleName: setOp", "DEL SimpleName: getUpperBound", "DEL VariableDeclarationFragment", "DEL Assignment: =", "DEL SimpleName: List", "DEL TextElement: Adds a child to this expression.", "DEL SimpleName: targetIter", "DEL Block", "DEL ContinueStatement", "DEL Javadoc", "DEL PrimitiveType: void", "DEL Assignment: =", "DEL ClassInstanceCreation", "DEL SimpleName: listIterator", "DEL ExpressionStatement", "DEL SimpleName: target", "DEL Block", "DEL SimpleName: SargInterval", "DEL Block", "DEL SimpleType: SargInterval", "DEL NumberLiteral: 0", "DEL Block", "DEL BreakStatement", "DEL ReturnStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: hasNext", "DEL Block", "DEL SimpleType: SargInterval", "DEL SimpleName: getCoordinate", "DEL PrimitiveType: int", "DEL ClassInstanceCreation", "DEL TextElement: Comparator used in evaluateUnionOp. Intervals collate based on", "DEL SimpleName: seq", "DEL SimpleName: List", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL Block", "DEL SimpleName: i2", "DEL SimpleType: RelDataType", "DEL SimpleName: evaluateIntersection", "DEL TextElement:  child to add", "DEL SimpleName: evaluateComplemented", "DEL SimpleName: targetIter", "DEL SimpleName: getDataType", "DEL ReturnStatement", "DEL SimpleName: getCoordinate", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL Javadoc", "DEL MethodInvocation", "DEL Block", "DEL ClassInstanceCreation", "DEL SimpleName: SargExpr", "DEL MethodInvocation", "DEL SimpleName: accumulator", "DEL BreakStatement", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: sourceIter", "DEL SimpleName: source", "DEL MethodInvocation", "DEL SimpleName: source", "DEL SingleVariableDeclaration", "DEL FieldAccess", "DEL SimpleName: factory", "DEL SimpleName: intersectSequences", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: SargInterval", "DEL Assignment: =", "DEL ParameterizedType: ArrayList<SargIntervalSequence>", "DEL SimpleName: source", "DEL IfStatement", "DEL SimpleName: List", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: SargInterval", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL SimpleName: target", "DEL SimpleName: Util", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleName: setExpr", "DEL SimpleName: newSeq", "DEL ParameterizedType: List<SargExpr>", "DEL SimpleName: SargInterval", "DEL MethodDeclaration", "DEL SimpleName: c", "DEL SimpleType: StringBuilder", "DEL MethodInvocation", "DEL VariableDeclarationStatement", "DEL ExpressionStatement", "DEL SingleVariableDeclaration", "DEL SimpleName: seq", "DEL SimpleName: i1", "DEL SimpleName: children", "DEL SimpleName: list", "DEL MethodInvocation", "DEL SimpleName: evaluateUnion", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: next", "DEL MethodInvocation", "DEL SimpleName: getDataType", "DEL MethodInvocation", "DEL SimpleName: addAll", "DEL VariableDeclarationStatement", "DEL ParameterizedType: List<SargIntervalSequence>", "DEL SimpleName: append", "DEL QualifiedName: accumulator.upperBound", "DEL SimpleName: next", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: collectDynamicParams", "DEL Javadoc", "DEL VariableDeclarationStatement", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: getDataType", "DEL SimpleName: setOp", "DEL SimpleType: SargInterval", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: getCoordinate", "DEL ReturnStatement", "DEL SimpleName: SargIntervalSequence", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: SargExpr", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: i1", "DEL SimpleName: list", "DEL MethodInvocation", "DEL SimpleName: child", "DEL SimpleName: accumulator", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: evaluateComplemented", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL MethodDeclaration", "DEL SimpleType: IntervalComparator", "DEL SimpleName: SargInterval", "DEL Modifier: public", "DEL SimpleName: newSetExpr", "DEL SimpleName: list", "DEL SimpleName: StringBuilder", "DEL SimpleName: target", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: remove", "DEL InfixExpression: ==", "DEL ParameterizedType: ArrayList<SargIntervalSequence>", "DEL SimpleName: source", "DEL SimpleName: evaluateUnion", "DEL SimpleName: i2", "DEL SimpleName: child", "DEL ReturnStatement", "DEL SimpleName: IntervalComparator", "DEL IfStatement", "DEL SimpleName: INSTANCE", "DEL SimpleName: interval", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: newSeq", "DEL SimpleName: SargIntervalSequence", "DEL Block", "DEL VariableDeclarationStatement", "DEL SimpleName: SargInterval", "DEL VariableDeclarationFragment", "DEL NumberLiteral: 0", "DEL MethodDeclaration", "DEL SimpleType: SargExpr", "DEL SimpleName: SargExpr", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: collectDynamicParams", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL SimpleName: SargSetExpr", "DEL MethodInvocation", "DEL SimpleName: children", "DEL MethodInvocation", "DEL SimpleName: setUpper", "DEL SimpleName: intersectSequences", "DEL MethodInvocation", "DEL SimpleName: sourceIter", "DEL SimpleName: sb", "DEL NumberLiteral: 0", "DEL TagElement: @see", "DEL SimpleName: List", "DEL SimpleName: next", "DEL SimpleName: getUpperBound", "DEL InfixExpression: >", "DEL IfStatement", "DEL PrimitiveType: int", "DEL SimpleType: ArrayList", "DEL MethodInvocation", "DEL SimpleName: SargSetOperator", "DEL SimpleName: children", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: sb", "DEL SimpleName: seq", "DEL NumberLiteral: 0", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL ParameterizedType: TreeSet<SargInterval>", "DEL SimpleName: getDataType", "DEL MethodDeclaration", "DEL SimpleType: SargIntervalSequence", "DEL SimpleType: SargInterval", "DEL BreakStatement", "DEL TagElement: @link", "DEL TextElement:  set", "DEL ContinueStatement", "DEL Assignment: =", "DEL SimpleName: hasNext", "DEL SimpleName: append", "DEL SimpleName: isTouching", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: seq", "DEL MethodInvocation", "DEL TextElement: SargSetExpr represents the application of a ", "DEL MethodInvocation", "DEL SimpleType: SargIntervalSequence", "DEL SingleVariableDeclaration", "DEL SimpleName: Set", "DEL SimpleName: getLowerBound", "DEL MethodInvocation", "DEL SimpleName: INTERSECTION", "DEL Block", "DEL SimpleType: SortedSet", "DEL Modifier: private", "DEL SimpleName: list", "DEL SimpleName: addInterval", "DEL SimpleName: getUpperBound", "DEL TagElement: @param", "DEL SimpleName: String", "DEL Assignment: =", "DEL SimpleName: list", "DEL SimpleName: target", "DEL SimpleName: list", "DEL SimpleName: ListIterator", "DEL Block", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SwitchCase", "DEL ExpressionStatement", "DEL IfStatement", "DEL TextElement:  sarg expressions", "DEL NullLiteral", "DEL SimpleName: compareTo", "DEL SimpleName: source", "DEL SimpleName: setOp", "DEL MethodInvocation", "DEL FieldDeclaration", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: SargInterval", "DEL VariableDeclarationStatement", "DEL Block", "DEL Block", "DEL PrefixExpression: !", "DEL IfStatement", "DEL NullLiteral", "DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleType: String", "DEL SimpleName: list", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleType: SargInterval", "DEL TypeDeclaration: class", "DEL SimpleType: StringBuilder", "DEL SimpleName: IntervalComparator", "DEL ExpressionStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: accumulator", "DEL VariableDeclarationStatement", "DEL SimpleName: sourceIter", "DEL TypeDeclaration: class", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: SargExpr", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: getLowerBound", "DEL SimpleType: SargInterval", "DEL SimpleType: SargExpr", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: getStrictness", "DEL MethodInvocation", "DEL SimpleName: targetIter", "DEL SimpleName: newSeq", "DEL SimpleName: append", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL ExpressionStatement", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL QualifiedName: SargSetOperator.COMPLEMENT", "DEL TextElement:  to zero or more child ", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: List", "DEL SimpleType: List", "DEL TextElement: {lowerBound, upperBound}.", "DEL Block", "DEL NumberLiteral: 0", "DEL SimpleName: newInternal", "DEL ReturnStatement", "DEL MethodInvocation", "DEL SimpleName: seq", "DEL SimpleName: evaluateIntersection", "DEL MethodInvocation", "DEL SimpleName: children", "DEL SimpleName: targetIter", "DEL ExpressionStatement", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: list", "DEL InfixExpression: >", "DEL SimpleName: SargSetOperator", "DEL ParameterizedType: Comparator<SargInterval>", "DEL SimpleName: add", "DEL SimpleName: hasNext", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Modifier: final", "DEL SimpleName: Util", "DEL MethodInvocation", "DEL Block", "DEL IfStatement", "DEL SimpleType: SargInterval", "DEL Block", "DEL SimpleName: factory", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: intervals", "DEL SimpleName: source", "DEL SwitchStatement", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: evaluateChildren", "DEL SwitchCase", "DEL SimpleName: sb", "DEL SimpleName: c", "DEL Modifier: private", "DEL SimpleType: ListIterator", "DEL ParameterizedType: ArrayList<SargExpr>", "DEL ReturnStatement", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleName: child", "DEL SimpleName: evaluate", "DEL VariableDeclarationStatement", "DEL ParameterizedType: SortedSet<SargInterval>", "DEL SimpleName: dataType", "DEL Block", "DEL QualifiedName: SargSetOperator.COMPLEMENT", "DEL SimpleName: next", "DEL SimpleName: ImmutableList", "DEL VariableDeclarationStatement", "DEL SimpleName: accumulator", "DEL SimpleName: children", "DEL InfixExpression: >", "DEL MethodInvocation", "DEL SimpleName: StringBuilder", "DEL BreakStatement", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: evaluate", "DEL SimpleName: getLowerBound", "DEL SimpleName: dataType", "DEL SimpleName: getUpperBound", "DEL SimpleName: child", "DEL SimpleName: List", "DEL SimpleName: targetIter", "DEL NumberLiteral: 1", "DEL SimpleName: targetIter", "DEL MemberRef", "DEL NumberLiteral: 0", "DEL SimpleType: SargIntervalSequence", "DEL IfStatement", "DEL SimpleName: getCoordinate", "DEL ExpressionStatement", "DEL IfStatement", "DEL SimpleName: SargIntervalSequence", "DEL MethodInvocation", "DEL SimpleName: toString", "DEL QualifiedName: setExpr.children", "DEL SingleVariableDeclaration", "DEL SimpleName: sb", "DEL SimpleName: child", "DEL SimpleName: SargExpr", "DEL SimpleName: c", "DEL SimpleName: clear", "DEL Modifier: public", "DEL SimpleName: children", "DEL Block", "DEL SwitchCase", "DEL ContinueStatement", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: factory", "DEL Block", "DEL Block", "DEL SimpleName: target", "DEL SimpleName: hasNext", "DEL SimpleName: SargFactory", "DEL ReturnStatement", "DEL SimpleName: SargExpr", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL VariableDeclarationStatement", "DEL SimpleName: isEmpty", "DEL ExpressionStatement", "DEL PrefixExpression: !", "DEL SimpleName: TreeSet", "DEL SimpleName: setOp", "DEL SimpleName: newTarget", "DEL SimpleName: listIterator", "DEL MethodInvocation", "DEL SimpleName: source", "DEL VariableDeclarationStatement", "DEL SimpleName: SargExpr", "DEL SimpleName: c", "DEL SimpleName: previous", "DEL SimpleName: hasNext", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: list", "DEL MethodDeclaration", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: getUpperBound", "DEL SimpleName: getChildren", "DEL EnhancedForStatement", "DEL SimpleName: get", "DEL SimpleName: SargExpr", "DEL SimpleName: SargIntervalSequence", "DEL Modifier: public", "DEL SimpleName: IntervalComparator", "DEL SimpleName: interval", "DEL SimpleName: SargFactory", "DEL VariableDeclarationStatement", "DEL SimpleName: getList", "DEL SimpleName: compareTo", "DEL SimpleName: SargIntervalSequence", "DEL IfStatement", "DEL SimpleName: newTarget", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: RelDataType", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: c", "DEL SimpleName: accumulator", "DEL ClassInstanceCreation", "DEL SimpleName: child", "DEL SimpleName: setLower", "DEL SimpleName: child", "DEL Block", "DEL ParameterizedType: ListIterator<SargInterval>", "DEL QualifiedName: sourceSeq.list", "DEL VariableDeclarationFragment", "DEL SimpleName: source", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: target", "DEL ExpressionStatement", "DEL SimpleName: getStrictness", "DEL SimpleName: children", "DEL SimpleType: RelDataType", "DEL ExpressionStatement", "DEL NullLiteral", "DEL StringLiteral: \" )\"", "DEL Assignment: =", "DEL SimpleType: SargExpr", "DEL Block", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: copyFrom", "DEL MethodInvocation", "DEL SimpleName: interval", "DEL SingleVariableDeclaration", "DEL SimpleName: source", "DEL ContinueStatement", "DEL SimpleName: accumulator", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: ArrayList", "DEL Block", "DEL SwitchCase", "DEL SingleVariableDeclaration", "DEL ExpressionStatement", "DEL SimpleName: toString", "DEL SimpleType: SargExpr", "DEL SimpleName: dynamicParams", "DEL ParameterizedType: Set<RexDynamicParam>", "DEL SimpleName: getLowerBound", "DEL SimpleName: factory", "DEL SimpleName: evaluateUnion", "DEL Modifier: public", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: hasNext", "DEL SimpleName: source", "DEL SimpleName: dataType", "DEL SimpleName: compareTo", "DEL SimpleName: SargInterval", "DEL SimpleName: copyFrom", "DEL SimpleName: getLowerBound", "DEL VariableDeclarationStatement", "DEL IfStatement", "DEL SwitchCase", "DEL IfStatement", "DEL PrefixExpression: !", "DEL SimpleName: target", "DEL SimpleName: size", "DEL ReturnStatement", "DEL SimpleName: i1", "DEL SimpleName: child", "DEL SimpleType: SargExpr", "DEL SimpleName: children", "DEL PrimitiveType: int", "DEL ParameterizedType: ListIterator<SargInterval>", "DEL SingleVariableDeclaration", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL SimpleName: isEmpty", "DEL MethodInvocation", "DEL Assignment: =", "DEL Block", "DEL IfStatement", "DEL MethodDeclaration", "DEL PrimitiveType: void", "DEL SingleVariableDeclaration", "DEL SimpleName: setOp", "DEL MethodInvocation", "DEL SimpleName: child", "DEL VariableDeclarationStatement", "DEL SimpleName: getUpperBound", "DEL NumberLiteral: 0", "DEL FieldAccess", "DEL SimpleName: SargExpr", "DEL ExpressionStatement", "DEL SimpleName: target", "DEL ReturnStatement", "DEL SimpleName: setLower", "DEL SimpleType: SargSetOperator", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleType: List", "DEL SimpleName: SargExpr", "DEL SimpleName: getFactory", "DEL SimpleName: sb", "DEL VariableDeclarationStatement", "DEL SimpleName: accumulator", "DEL SimpleName: source", "DEL SimpleName: SargSetExpr", "DEL MethodInvocation", "DEL InfixExpression: ==", "DEL SimpleName: RexDynamicParam", "DEL ParameterizedType: List<SargIntervalSequence>", "DEL AssertStatement", "DEL SimpleName: INTERSECTION", "DEL SimpleName: getDataType", "DEL Modifier: final", "DEL ExpressionStatement", "DEL InfixExpression: <=", "DEL SimpleName: toString", "DEL Javadoc", "DEL SimpleName: copyFrom", "DEL MethodInvocation", "DEL VariableDeclarationFragment", "DEL SimpleName: i2", "DEL VariableDeclarationFragment", "DEL QualifiedName: targetSeq.list", "DEL SimpleName: targetIter", "DEL IfStatement", "DEL SimpleName: sourceIter", "DEL SimpleName: evaluateIntersection", "DEL ExpressionStatement", "DEL SimpleName: list", "DEL Modifier: public", "DEL ExpressionStatement", "DEL SimpleName: isFinite", "DEL VariableDeclarationFragment", "DEL ReturnStatement", "DEL Block", "DEL SimpleName: getUpperBound", "DEL SimpleName: source", "DEL TagElement: @link", "DEL SimpleName: dataType", "DEL MethodInvocation", "DEL SimpleName: newTarget", "DEL SimpleName: SargInterval", "DEL IfStatement", "DEL SimpleType: SargExpr", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: factory", "DEL SimpleName: newInternal", "DEL SimpleName: newSeq", "DEL SimpleName: compareTo", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleType: SargFactory", "DEL AssertStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: seq", "DEL SimpleName: getLowerBound", "DEL SingleVariableDeclaration", "DEL Modifier: private", "DEL IfStatement", "DEL ThisExpression", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: addChild", "DEL SimpleName: sourceIter", "DEL SimpleName: child", "DEL SimpleName: child", "DEL SimpleType: SargIntervalSequence", "DEL InfixExpression: ==", "DEL ThisExpression", "DEL ExpressionStatement", "DEL SimpleName: getUpperBound", "DEL SimpleName: factory", "DEL MethodDeclaration", "DEL SimpleName: addInterval", "DEL SimpleName: seq", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: getUpperBound", "DEL SimpleType: RelDataType", "DEL MethodInvocation", "DEL SimpleName: isEmpty", "DEL SimpleName: contains", "DEL SimpleType: SargExpr", "DEL SimpleName: dataType", "DEL ParameterizedType: List<SargIntervalSequence>", "DEL PrefixExpression: -", "DEL FieldDeclaration", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleType: Set", "DEL SimpleName: compareTo", "DEL SimpleType: List", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: dataType", "DEL SimpleName: sourceIter", "DEL SimpleType: List", "DEL SimpleName: evaluateChildren", "DEL VariableDeclarationFragment", "DEL InfixExpression: <", "DEL ThisExpression", "DEL SimpleName: childSeq", "DEL SimpleName: SargInterval", "DEL SimpleName: child", "DEL SimpleName: setUpper", "DEL SimpleName: next", "DEL MethodInvocation", "DEL QualifiedName: SargSetOperator.COMPLEMENT", "DEL SingleVariableDeclaration", "DEL ContinueStatement", "DEL VariableDeclarationFragment", "DEL SimpleName: setOp", "DEL SimpleName: compareTo", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: sourceIter", "DEL Block", "DEL SimpleName: source", "DEL SimpleType: TreeSet", "DEL SingleVariableDeclaration", "DEL SwitchCase", "DEL SingleVariableDeclaration", "DEL SimpleType: SargInterval", "DEL SimpleName: sourceSeq", "DEL SimpleType: SargFactory", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: UNION", "DEL MethodInvocation", "DEL SimpleName: intervals", "DEL SimpleName: target", "DEL VariableDeclarationStatement", "DEL SimpleName: target", "DEL ExpressionStatement", "DEL SimpleName: getStrictness", "DEL SimpleName: next", "DEL SimpleName: list", "DEL SimpleType: Comparator", "DEL ClassInstanceCreation", "DEL SimpleName: Comparator", "DEL SimpleName: toString", "DEL MethodInvocation", "DEL Block", "DEL Block", "DEL SimpleName: ListIterator", "DEL Modifier: public", "DEL Assignment: =", "DEL InfixExpression: !=", "DEL PrefixExpression: !", "DEL SimpleType: ArrayList", "DEL SimpleType: SargExpr", "DEL PrefixExpression: !", "DEL TagElement: @return", "DEL Modifier: private", "DEL SimpleName: compareTo", "DEL ReturnStatement", "DEL MethodInvocation", "DEL Assignment: =", "DEL SimpleName: SargInterval", "DEL IfStatement", "DEL Modifier: private", "DEL Assignment: =", "DEL NumberLiteral: 0", "DEL SimpleName: getUpperBound", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: setOp", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: evaluate", "DEL SimpleName: targetIter", "DEL ThrowStatement", "DEL IfStatement", "DEL SimpleName: SargFactory", "DEL MethodInvocation", "DEL SimpleName: setOp", "DEL SimpleName: setOp", "DEL SimpleName: targetIter", "DEL ReturnStatement", "DEL AssertStatement", "DEL Block", "DEL SimpleName: c", "DEL ExpressionStatement", "DEL TagElement", "DEL SimpleName: list", "DEL SimpleName: get", "DEL MethodInvocation", "DEL MethodDeclaration", "DEL SimpleType: List", "DEL SimpleName: interval", "DEL MethodInvocation", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: accumulator", "DEL MethodInvocation", "DEL SimpleName: children", "DEL SingleVariableDeclaration", "DEL SwitchStatement", "DEL ExpressionStatement", "DEL SimpleName: compare", "DEL Block", "DEL SimpleName: SargFactory", "DEL IfStatement", "DEL SimpleType: SargIntervalSequence", "DEL EnhancedForStatement", "DEL ExpressionStatement", "DEL SimpleType: SargSetExpr", "DEL SimpleName: SargIntervalSequence", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: getUpperBound", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: addInterval", "DEL ClassInstanceCreation", "DEL SimpleName: SortedSet", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: targetIter", "DEL PrimitiveType: void", "DEL SimpleName: target", "DEL FieldDeclaration", "DEL MethodDeclaration", "DEL SimpleName: factory", "DEL SimpleType: SargIntervalSequence", "DEL IfStatement", "DEL SimpleType: SargExpr", "DEL VariableDeclarationFragment", "DEL Block", "DEL SimpleName: seq", "DEL SimpleType: ListIterator", "DEL MethodInvocation", "DEL SimpleName: childSeq", "DEL SimpleName: source", "DEL SimpleName: getLowerBound", "DEL VariableDeclarationFragment", "DEL SimpleName: accumulator", "DEL SimpleName: UNION", "DEL SimpleName: SargIntervalSequence", "DEL SimpleName: getLowerBound", "DEL Modifier: static", "DEL SimpleName: interval", "DEL SimpleType: SargIntervalSequence", "DEL SimpleType: SargIntervalSequence", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SingleVariableDeclaration", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleType: SargIntervalSequence", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL SimpleName: list", "DEL SimpleType: RexDynamicParam", "DEL SimpleName: SargInterval", "DEL ParameterizedType: List<SargIntervalSequence>", "DEL SimpleName: getUpperBound", "DEL ClassInstanceCreation", "DEL Modifier: final", "DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleType: SargIntervalSequence", "DEL EnhancedForStatement", "DEL Modifier: public", "DEL Modifier: public", "DEL InfixExpression: ==", "DEL SimpleName: next", "DEL SimpleName: seq", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: hasNext", "DEL ReturnStatement", "DEL SimpleType: SargInterval", "DEL SimpleName: c", "DEL SimpleName: target", "DEL SimpleName: factory", "DEL SimpleName: getStrictnessComplement", "DEL Javadoc", "DEL AssertStatement", "DEL SimpleName: add", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: interval", "DEL Assignment: =", "DEL SimpleName: dataType", "DEL Modifier: public", "DEL InfixExpression: ==", "DEL SimpleName: target", "DEL VariableDeclarationFragment", "DEL SimpleName: remove", "DEL SimpleName: copyOf", "DEL SimpleName: RelDataType", "DEL SimpleName: ArrayList", "DEL SimpleName: add", "DEL SimpleType: SargInterval", "DEL ExpressionStatement", "DEL VariableDeclarationStatement", "DEL InfixExpression: ==", "DEL SimpleName: SargSetExpr", "DEL InfixExpression: <", "DEL TextElement: children themselves are modifiable)", "DEL Block", "DEL EnhancedForStatement", "DEL MethodInvocation", "DEL QualifiedName: IntervalComparator.INSTANCE", "DEL SimpleName: newSeq", "DEL SimpleName: add", "DEL SimpleName: sb", "DEL VariableDeclarationFragment", "DEL SimpleName: sourceIter", "DEL SimpleName: child", "DEL SimpleName: child", "DEL SimpleName: intervals", "DEL SimpleName: append", "DEL VariableDeclarationStatement", "DEL SimpleName: List", "DEL SimpleName: setOp", "DEL SimpleType: SargInterval", "DEL Modifier: private", "DEL ClassInstanceCreation", "DEL SimpleName: list", "DEL VariableDeclarationFragment", "DEL MethodInvocation", "DEL SimpleName: targetIter", "DEL Block", "DEL SimpleName: hasNext", "DEL SimpleName: getUpperBound", "DEL SimpleName: seq", "DEL SimpleType: SargIntervalSequence", "DEL SimpleType: SargFactory", "DEL SimpleName: SargIntervalSequence", "DEL SimpleType: SargIntervalSequence", "DEL SimpleName: getLowerBound", "DEL ReturnStatement", "DEL IfStatement", "DEL SingleVariableDeclaration", "DEL ReturnStatement", "DEL SimpleName: targetIter", "DEL SimpleName: target", "DEL SimpleName: setOp", "DEL MethodInvocation", "DEL SimpleName: list", "DEL MethodInvocation", "DEL MethodInvocation", "DEL NumberLiteral: 0", "DEL SimpleName: factory", "DEL StringLiteral: \"(\"", "DEL ParameterizedType: List<SargExpr>", "DEL Block", "DEL SimpleName: targetIter", "DEL SimpleType: SargExpr", "DEL MethodInvocation", "DEL SimpleName: ArrayList", "DEL ThrowStatement", "DEL SimpleName: c", "DEL ParameterizedType: List<SargIntervalSequence>", "DEL Block", "DEL SimpleName: SargInterval", "DEL Block", "DEL Block", "DEL Block", "DEL ExpressionStatement", "DEL ReturnStatement", "DEL SimpleName: RelDataType", "DEL SimpleType: SargInterval", "DEL SimpleName: SargIntervalSequence", "DEL MethodDeclaration", "DEL SimpleType: List", "DEL QualifiedName: targetSeq.list", "DEL TagElement", "DEL SimpleType: SargInterval", "DEL MethodInvocation", "DEL SimpleName: dynamicParams", "DEL ExpressionStatement", "DEL SimpleName: List", "DEL SimpleName: targetIter", "DEL SimpleName: SargExpr", "DEL StringLiteral: \" \"", "DEL MethodDeclaration", "DEL SimpleName: getUpperBound", "DEL SingleVariableDeclaration", "DEL SimpleName: SargInterval", "DEL Block", "DEL MethodInvocation", "DEL ReturnStatement", "DEL ReturnStatement", "DEL Assignment: =", "DEL SimpleName: SargInterval", "DEL Modifier: private", "DEL VariableDeclarationFragment"]}]}}, {"SargSetExpr_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: java.util(2)", "Delete ImportDeclaration(3)", "Delete QualifiedName: org.eigenbase.reltype(4)", "Delete ImportDeclaration(5)", "Delete QualifiedName: org.eigenbase.rex(6)", "Delete ImportDeclaration(7)", "Delete QualifiedName: org.eigenbase.util(8)", "Delete ImportDeclaration(9)", "Delete QualifiedName: com.google.common.collect.ImmutableList(10)", "Delete ImportDeclaration(11)", "Delete TextElement: SargSetExpr represents the application of a (12)", "Delete SimpleName: SargSetOperator(13)", "Delete TextElement:  set(14)", "Delete TextElement: operator(15)", "Delete TagElement: @link(16)", "Delete TextElement:  to zero or more child (17)", "Delete SimpleName: SargExpr(18)", "Delete TextElement:  sarg expressions(19)", "Delete TagElement: @link(20)", "Delete TextElement: .(21)", "Delete TagElement(22)", "Delete Javadoc(23)", "Delete Modifier: public(24)", "Delete SimpleName: SargSetExpr(25)", "Delete SimpleName: SargExpr(26)", "Delete SimpleType: SargExpr(27)", "Delete Modifier: private(28)", "Delete Modifier: final(29)", "Delete SimpleName: SargFactory(30)", "Delete SimpleType: SargFactory(31)", "Delete SimpleName: factory(32)", "Delete VariableDeclarationFragment(33)", "Delete FieldDeclaration(34)", "Delete Modifier: private(35)", "Delete Modifier: final(36)", "Delete SimpleName: RelDataType(37)", "Delete SimpleType: RelDataType(38)", "Delete SimpleName: dataType(39)", "Delete VariableDeclarationFragment(40)", "Delete FieldDeclaration(41)", "Delete Modifier: private(42)", "Delete Modifier: final(43)", "Delete SimpleName: SargSetOperator(44)", "Delete SimpleType: SargSetOperator(45)", "Delete SimpleName: setOp(46)", "Delete VariableDeclarationFragment(47)", "Delete FieldDeclaration(48)", "Delete Modifier: private(49)", "Delete Modifier: final(50)", "Delete SimpleName: List(51)", "Delete SimpleType: List(52)", "Delete SimpleName: SargExpr(53)", "Delete SimpleType: SargExpr(54)", "Delete ParameterizedType: List<SargExpr>(55)", "Delete SimpleName: children(56)", "Delete VariableDeclarationFragment(57)", "Delete FieldDeclaration(58)", "Delete SimpleName: SargFactory(59)", "Delete SimpleName: newSetExpr(60)", "Delete MemberRef(61)", "Delete TagElement: @see(62)", "Delete Javadoc(63)", "Delete SimpleName: SargSetExpr(64)", "Delete SimpleName: SargFactory(65)", "Delete SimpleType: SargFactory(66)", "Delete SimpleName: factory(67)", "Delete SingleVariableDeclaration(68)", "Delete SimpleName: RelDataType(69)", "Delete SimpleType: RelDataType(70)", "Delete SimpleName: dataType(71)", "Delete SingleVariableDeclaration(72)", "Delete SimpleName: SargSetOperator(73)", "Delete SimpleType: SargSetOperator(74)", "Delete SimpleName: setOp(75)", "Delete SingleVariableDeclaration(76)", "Delete ThisExpression(77)", "Delete SimpleName: factory(78)", "Delete FieldAccess(79)", "Delete SimpleName: factory(80)", "Delete Assignment: =(81)", "Delete ExpressionStatement(82)", "Delete ThisExpression(83)", "Delete SimpleName: dataType(84)", "Delete FieldAccess(85)", "Delete SimpleName: dataType(86)", "Delete Assignment: =(87)", "Delete ExpressionStatement(88)", "Delete ThisExpression(89)", "Delete SimpleName: setOp(90)", "Delete FieldAccess(91)", "Delete SimpleName: setOp(92)", "Delete Assignment: =(93)", "Delete ExpressionStatement(94)", "Delete SimpleName: children(95)", "Delete SimpleName: ArrayList(96)", "Delete SimpleType: ArrayList(97)", "Delete SimpleName: SargExpr(98)", "Delete SimpleType: SargExpr(99)", "Delete ParameterizedType: ArrayList<SargExpr>(100)", "Delete ClassInstanceCreation(101)", "Delete Assignment: =(102)", "Delete ExpressionStatement(103)", "Delete Block(104)", "Delete MethodDeclaration(105)", "Delete TextElement:  a read-only list of this expression's children (the returned(106)", "Delete TextElement: children themselves are modifiable)(107)", "Delete TagElement: @return(108)", "Delete Javadoc(109)", "Delete Modifier: public(110)", "Delete SimpleName: List(111)", "Delete SimpleType: List(112)", "Delete SimpleName: SargExpr(113)", "Delete SimpleType: SargExpr(114)", "Delete ParameterizedType: List<SargExpr>(115)", "Delete SimpleName: getChildren(116)", "Delete SimpleName: ImmutableList(117)", "Delete SimpleName: copyOf(118)", "Delete SimpleName: children(119)", "Delete MethodInvocation(120)", "Delete ReturnStatement(121)", "Delete Block(122)", "Delete MethodDeclaration(123)", "Delete TextElement: Adds a child to this expression.(124)", "Delete TagElement(125)", "Delete SimpleName: child(126)", "Delete TextElement:  child to add(127)", "Delete TagElement: @param(128)", "Delete Javadoc(129)", "Delete Modifier: public(130)", "Delete PrimitiveType: void(131)", "Delete SimpleName: addChild(132)", "Delete SimpleName: SargExpr(133)", "Delete SimpleType: SargExpr(134)", "Delete SimpleName: child(135)", "Delete SingleVariableDeclaration(136)", "Delete SimpleName: child(137)", "Delete SimpleName: getDataType(138)", "Delete MethodInvocation(139)", "Delete SimpleName: dataType(140)", "Delete InfixExpression: ==(141)", "Delete AssertStatement(142)", "Delete SimpleName: setOp(143)", "Delete QualifiedName: SargSetOperator.COMPLEMENT(144)", "Delete InfixExpression: ==(145)", "Delete SimpleName: children(146)", "Delete SimpleName: isEmpty(147)", "Delete MethodInvocation(148)", "Delete AssertStatement(149)", "Delete Block(150)", "Delete IfStatement(151)", "Delete SimpleName: children(152)", "Delete SimpleName: add(153)", "Delete SimpleName: child(154)", "Delete MethodInvocation(155)", "Delete ExpressionStatement(156)", "Delete Block(157)", "Delete MethodDeclaration(158)", "Delete Modifier: public(159)", "Delete SimpleName: SargFactory(160)", "Delete SimpleType: SargFactory(161)", "Delete SimpleName: getFactory(162)", "Delete SimpleName: factory(163)", "Delete ReturnStatement(164)", "Delete Block(165)", "Delete MethodDeclaration(166)", "Delete Modifier: public(167)", "Delete SimpleName: RelDataType(168)", "Delete SimpleType: RelDataType(169)", "Delete SimpleName: getDataType(170)", "Delete SimpleName: dataType(171)", "Delete ReturnStatement(172)", "Delete Block(173)", "Delete MethodDeclaration(174)", "Delete Modifier: public(175)", "Delete SimpleName: String(176)", "Delete SimpleType: String(177)", "Delete SimpleName: toString(178)", "Delete SimpleName: StringBuilder(179)", "Delete SimpleType: StringBuilder(180)", "Delete SimpleName: sb(181)", "Delete SimpleName: StringBuilder(182)", "Delete SimpleType: StringBuilder(183)", "Delete ClassInstanceCreation(184)", "Delete VariableDeclarationFragment(185)", "Delete VariableDeclarationStatement(186)", "Delete SimpleName: sb(187)", "Delete SimpleName: append(188)", "Delete SimpleName: setOp(189)", "Delete MethodInvocation(190)", "Delete ExpressionStatement(191)", "Delete SimpleName: sb(192)", "Delete SimpleName: append(193)", "Delete StringLiteral: \"(\"(194)", "Delete MethodInvocation(195)", "Delete ExpressionStatement(196)", "Delete SimpleName: SargExpr(197)", "Delete SimpleType: SargExpr(198)", "Delete SimpleName: child(199)", "Delete SingleVariableDeclaration(200)", "Delete SimpleName: children(201)", "Delete SimpleName: sb(202)", "Delete SimpleName: append(203)", "Delete StringLiteral: \" \"(204)", "Delete MethodInvocation(205)", "Delete ExpressionStatement(206)", "Delete SimpleName: sb(207)", "Delete SimpleName: append(208)", "Delete SimpleName: child(209)", "Delete MethodInvocation(210)", "Delete ExpressionStatement(211)", "Delete Block(212)", "Delete EnhancedForStatement(213)", "Delete SimpleName: sb(214)", "Delete SimpleName: append(215)", "Delete StringLiteral: \" )\"(216)", "Delete MethodInvocation(217)", "Delete ExpressionStatement(218)", "Delete SimpleName: sb(219)", "Delete SimpleName: toString(220)", "Delete MethodInvocation(221)", "Delete ReturnStatement(222)", "Delete Block(223)", "Delete MethodDeclaration(224)", "Delete Modifier: public(225)", "Delete SimpleName: SargIntervalSequence(226)", "Delete SimpleType: SargIntervalSequence(227)", "Delete SimpleName: evaluate(228)", "Delete SimpleName: setOp(229)", "Delete QualifiedName: SargSetOperator.COMPLEMENT(230)", "Delete InfixExpression: ==(231)", "Delete SimpleName: children(232)", "Delete SimpleName: size(233)", "Delete MethodInvocation(234)", "Delete NumberLiteral: 1(235)", "Delete InfixExpression: ==(236)", "Delete AssertStatement(237)", "Delete SimpleName: SargExpr(238)", "Delete SimpleType: SargExpr(239)", "Delete SimpleName: child(240)", "Delete SimpleName: children(241)", "Delete SimpleName: get(242)", "Delete NumberLiteral: 0(243)", "Delete MethodInvocation(244)", "Delete VariableDeclarationFragment(245)", "Delete VariableDeclarationStatement(246)", "Delete SimpleName: child(247)", "Delete SimpleName: evaluateComplemented(248)", "Delete MethodInvocation(249)", "Delete ReturnStatement(250)", "Delete Block(251)", "Delete IfStatement(252)", "Delete SimpleName: List(253)", "Delete SimpleType: List(254)", "Delete SimpleName: SargIntervalSequence(255)", "Delete SimpleType: SargIntervalSequence(256)", "Delete ParameterizedType: List<SargIntervalSequence>(257)", "Delete SimpleName: list(258)", "Delete SimpleName: evaluateChildren(259)", "Delete ThisExpression(260)", "Delete MethodInvocation(261)", "Delete VariableDeclarationFragment(262)", "Delete VariableDeclarationStatement(263)", "Delete SimpleName: setOp(264)", "Delete SimpleName: UNION(265)", "Delete SwitchCase(266)", "Delete SimpleName: evaluateUnion(267)", "Delete SimpleName: list(268)", "Delete MethodInvocation(269)", "Delete ReturnStatement(270)", "Delete SimpleName: INTERSECTION(271)", "Delete SwitchCase(272)", "Delete SimpleName: evaluateIntersection(273)", "Delete SimpleName: list(274)", "Delete MethodInvocation(275)", "Delete ReturnStatement(276)", "Delete SwitchCase(277)", "Delete SimpleName: Util(278)", "Delete SimpleName: newInternal(279)", "Delete SimpleName: setOp(280)", "Delete SimpleName: toString(281)", "Delete MethodInvocation(282)", "Delete MethodInvocation(283)", "Delete ThrowStatement(284)", "Delete SwitchStatement(285)", "Delete Block(286)", "Delete MethodDeclaration(287)", "Delete Modifier: private(288)", "Delete SimpleName: List(289)", "Delete SimpleType: List(290)", "Delete SimpleName: SargIntervalSequence(291)", "Delete SimpleType: SargIntervalSequence(292)", "Delete ParameterizedType: List<SargIntervalSequence>(293)", "Delete SimpleName: evaluateChildren(294)", "Delete SimpleName: SargSetExpr(295)", "Delete SimpleType: SargSetExpr(296)", "Delete SimpleName: setExpr(297)", "Delete SingleVariableDeclaration(298)", "Delete SimpleName: List(299)", "Delete SimpleType: List(300)", "Delete SimpleName: SargIntervalSequence(301)", "Delete SimpleType: SargIntervalSequence(302)", "Delete ParameterizedType: List<SargIntervalSequence>(303)", "Delete SimpleName: list(304)", "Delete SimpleName: ArrayList(305)", "Delete SimpleType: ArrayList(306)", "Delete SimpleName: SargIntervalSequence(307)", "Delete SimpleType: SargIntervalSequence(308)", "Delete ParameterizedType: ArrayList<SargIntervalSequence>(309)", "Delete ClassInstanceCreation(310)", "Delete VariableDeclarationFragment(311)", "Delete VariableDeclarationStatement(312)", "Delete SimpleName: SargExpr(313)", "Delete SimpleType: SargExpr(314)", "Delete SimpleName: child(315)", "Delete SingleVariableDeclaration(316)", "Delete QualifiedName: setExpr.children(317)", "Delete SimpleName: SargIntervalSequence(318)", "Delete SimpleType: SargIntervalSequence(319)", "Delete SimpleName: newSeq(320)", "Delete SimpleName: child(321)", "Delete SimpleName: evaluate(322)", "Delete MethodInvocation(323)", "Delete VariableDeclarationFragment(324)", "Delete VariableDeclarationStatement(325)", "Delete SimpleName: list(326)", "Delete SimpleName: add(327)", "Delete SimpleName: newSeq(328)", "Delete MethodInvocation(329)", "Delete ExpressionStatement(330)", "Delete Block(331)", "Delete EnhancedForStatement(332)", "Delete SimpleName: list(333)", "Delete ReturnStatement(334)", "Delete Block(335)", "Delete MethodDeclaration(336)", "Delete Modifier: public(337)", "Delete PrimitiveType: void(338)", "Delete SimpleName: collectDynamicParams(339)", "Delete SimpleName: Set(340)", "Delete SimpleType: Set(341)", "Delete SimpleName: RexDynamicParam(342)", "Delete SimpleType: RexDynamicParam(343)", "Delete ParameterizedType: Set<RexDynamicParam>(344)", "Delete SimpleName: dynamicParams(345)", "Delete SingleVariableDeclaration(346)", "Delete SimpleName: SargExpr(347)", "Delete SimpleType: SargExpr(348)", "Delete SimpleName: child(349)", "Delete SingleVariableDeclaration(350)", "Delete SimpleName: children(351)", "Delete SimpleName: child(352)", "Delete SimpleName: collectDynamicParams(353)", "Delete SimpleName: dynamicParams(354)", "Delete MethodInvocation(355)", "Delete ExpressionStatement(356)", "Delete Block(357)", "Delete EnhancedForStatement(358)", "Delete Block(359)", "Delete MethodDeclaration(360)", "Delete Modifier: private(361)", "Delete SimpleName: SargIntervalSequence(362)", "Delete SimpleType: SargIntervalSequence(363)", "Delete SimpleName: evaluateUnion(364)", "Delete SimpleName: List(365)", "Delete SimpleType: List(366)", "Delete SimpleName: SargIntervalSequence(367)", "Delete SimpleType: SargIntervalSequence(368)", "Delete ParameterizedType: List<SargIntervalSequence>(369)", "Delete SimpleName: list(370)", "Delete SingleVariableDeclaration(371)", "Delete SimpleName: SargIntervalSequence(372)", "Delete SimpleType: SargIntervalSequence(373)", "Delete SimpleName: seq(374)", "Delete SimpleName: SargIntervalSequence(375)", "Delete SimpleType: SargIntervalSequence(376)", "Delete ClassInstanceCreation(377)", "Delete VariableDeclarationFragment(378)", "Delete VariableDeclarationStatement(379)", "Delete SimpleName: SortedSet(380)", "Delete SimpleType: SortedSet(381)", "Delete SimpleName: SargInterval(382)", "Delete SimpleType: SargInterval(383)", "Delete ParameterizedType: SortedSet<SargInterval>(384)", "Delete SimpleName: intervals(385)", "Delete SimpleName: TreeSet(386)", "Delete SimpleType: TreeSet(387)", "Delete SimpleName: SargInterval(388)", "Delete SimpleType: SargInterval(389)", "Delete ParameterizedType: TreeSet<SargInterval>(390)", "Delete QualifiedName: IntervalComparator.INSTANCE(391)", "Delete ClassInstanceCreation(392)", "Delete VariableDeclarationFragment(393)", "Delete VariableDeclarationStatement(394)", "Delete SimpleName: SargIntervalSequence(395)", "Delete SimpleType: SargIntervalSequence(396)", "Delete SimpleName: childSeq(397)", "Delete SingleVariableDeclaration(398)", "Delete SimpleName: list(399)", "Delete SimpleName: intervals(400)", "Delete SimpleName: addAll(401)", "Delete SimpleName: childSeq(402)", "Delete SimpleName: getList(403)", "Delete MethodInvocation(404)", "Delete MethodInvocation(405)", "Delete ExpressionStatement(406)", "Delete Block(407)", "Delete EnhancedForStatement(408)", "Delete SimpleName: SargInterval(409)", "Delete SimpleType: SargInterval(410)", "Delete SimpleName: accumulator(411)", "Delete NullLiteral(412)", "Delete VariableDeclarationFragment(413)", "Delete VariableDeclarationStatement(414)", "Delete SimpleName: SargInterval(415)", "Delete SimpleType: SargInterval(416)", "Delete SimpleName: interval(417)", "Delete SingleVariableDeclaration(418)", "Delete SimpleName: intervals(419)", "Delete SimpleName: interval(420)", "Delete SimpleName: isEmpty(421)", "Delete MethodInvocation(422)", "Delete PrefixExpression: !(423)", "Delete AssertStatement(424)", "Delete SimpleName: accumulator(425)", "Delete NullLiteral(426)", "Delete InfixExpression: ==(427)", "Delete SimpleName: accumulator(428)", "Delete SimpleName: SargInterval(429)", "Delete SimpleType: SargInterval(430)", "Delete SimpleName: factory(431)", "Delete SimpleName: getDataType(432)", "Delete MethodInvocation(433)", "Delete ClassInstanceCreation(434)", "Delete Assignment: =(435)", "Delete ExpressionStatement(436)", "Delete SimpleName: accumulator(437)", "Delete SimpleName: copyFrom(438)", "Delete SimpleName: interval(439)", "Delete MethodInvocation(440)", "Delete ExpressionStatement(441)", "Delete SimpleName: seq(442)", "Delete SimpleName: addInterval(443)", "Delete SimpleName: accumulator(444)", "Delete MethodInvocation(445)", "Delete ExpressionStatement(446)", "Delete ContinueStatement(447)", "Delete Block(448)", "Delete IfStatement(449)", "Delete SimpleName: accumulator(450)", "Delete SimpleName: contains(451)", "Delete SimpleName: interval(452)", "Delete MethodInvocation(453)", "Delete ContinueStatement(454)", "Delete Block(455)", "Delete IfStatement(456)", "Delete PrimitiveType: int(457)", "Delete SimpleName: c(458)", "Delete SimpleName: interval(459)", "Delete SimpleName: getLowerBound(460)", "Delete MethodInvocation(461)", "Delete SimpleName: compareTo(462)", "Delete SimpleName: accumulator(463)", "Delete SimpleName: getUpperBound(464)", "Delete MethodInvocation(465)", "Delete MethodInvocation(466)", "Delete VariableDeclarationFragment(467)", "Delete VariableDeclarationStatement(468)", "Delete SimpleName: c(469)", "Delete NumberLiteral: 0(470)", "Delete InfixExpression: >(471)", "Delete SimpleName: interval(472)", "Delete SimpleName: getLowerBound(473)", "Delete MethodInvocation(474)", "Delete SimpleName: isTouching(475)", "Delete SimpleName: accumulator(476)", "Delete SimpleName: getUpperBound(477)", "Delete MethodInvocation(478)", "Delete MethodInvocation(479)", "Delete SimpleName: c(480)", "Delete NumberLiteral: 1(481)", "Delete PrefixExpression: -(482)", "Delete Assignment: =(483)", "Delete ExpressionStatement(484)", "Delete Block(485)", "Delete IfStatement(486)", "Delete Block(487)", "Delete IfStatement(488)", "Delete SimpleName: c(489)", "Delete NumberLiteral: 0(490)", "Delete InfixExpression: <=(491)", "Delete QualifiedName: accumulator.upperBound(492)", "Delete SimpleName: copyFrom(493)", "Delete SimpleName: interval(494)", "Delete SimpleName: getUpperBound(495)", "Delete MethodInvocation(496)", "Delete MethodInvocation(497)", "Delete ExpressionStatement(498)", "Delete Block(499)", "Delete SimpleName: accumulator(500)", "Delete SimpleName: SargInterval(501)", "Delete SimpleType: SargInterval(502)", "Delete SimpleName: factory(503)", "Delete SimpleName: getDataType(504)", "Delete MethodInvocation(505)", "Delete ClassInstanceCreation(506)", "Delete Assignment: =(507)", "Delete ExpressionStatement(508)", "Delete SimpleName: accumulator(509)", "Delete SimpleName: copyFrom(510)", "Delete SimpleName: interval(511)", "Delete MethodInvocation(512)", "Delete ExpressionStatement(513)", "Delete SimpleName: seq(514)", "Delete SimpleName: addInterval(515)", "Delete SimpleName: accumulator(516)", "Delete MethodInvocation(517)", "Delete ExpressionStatement(518)", "Delete Block(519)", "Delete IfStatement(520)", "Delete Block(521)", "Delete EnhancedForStatement(522)", "Delete SimpleName: seq(523)", "Delete ReturnStatement(524)", "Delete Block(525)", "Delete MethodDeclaration(526)", "Delete Modifier: private(527)", "Delete SimpleName: SargIntervalSequence(528)", "Delete SimpleType: SargIntervalSequence(529)", "Delete SimpleName: evaluateIntersection(530)", "Delete SimpleName: List(531)", "Delete SimpleType: List(532)", "Delete SimpleName: SargIntervalSequence(533)", "Delete SimpleType: SargIntervalSequence(534)", "Delete ParameterizedType: List<SargIntervalSequence>(535)", "Delete SimpleName: list(536)", "Delete SingleVariableDeclaration(537)", "Delete SimpleName: SargIntervalSequence(538)", "Delete SimpleType: SargIntervalSequence(539)", "Delete SimpleName: seq(540)", "Delete NullLiteral(541)", "Delete VariableDeclarationFragment(542)", "Delete VariableDeclarationStatement(543)", "Delete SimpleName: list(544)", "Delete SimpleName: isEmpty(545)", "Delete MethodInvocation(546)", "Delete SimpleName: seq(547)", "Delete SimpleName: SargIntervalSequence(548)", "Delete SimpleType: SargIntervalSequence(549)", "Delete ClassInstanceCreation(550)", "Delete Assignment: =(551)", "Delete ExpressionStatement(552)", "Delete SimpleName: seq(553)", "Delete SimpleName: addInterval(554)", "Delete SimpleName: SargInterval(555)", "Delete SimpleType: SargInterval(556)", "Delete SimpleName: factory(557)", "Delete SimpleName: getDataType(558)", "Delete MethodInvocation(559)", "Delete ClassInstanceCreation(560)", "Delete MethodInvocation(561)", "Delete ExpressionStatement(562)", "Delete SimpleName: seq(563)", "Delete ReturnStatement(564)", "Delete Block(565)", "Delete IfStatement(566)", "Delete SimpleName: SargIntervalSequence(567)", "Delete SimpleType: SargIntervalSequence(568)", "Delete SimpleName: newSeq(569)", "Delete SingleVariableDeclaration(570)", "Delete SimpleName: list(571)", "Delete SimpleName: seq(572)", "Delete NullLiteral(573)", "Delete InfixExpression: ==(574)", "Delete SimpleName: seq(575)", "Delete SimpleName: newSeq(576)", "Delete Assignment: =(577)", "Delete ExpressionStatement(578)", "Delete ContinueStatement(579)", "Delete Block(580)", "Delete IfStatement(581)", "Delete SimpleName: intersectSequences(582)", "Delete SimpleName: seq(583)", "Delete SimpleName: newSeq(584)", "Delete MethodInvocation(585)", "Delete ExpressionStatement(586)", "Delete Block(587)", "Delete EnhancedForStatement(588)", "Delete SimpleName: seq(589)", "Delete ReturnStatement(590)", "Delete Block(591)", "Delete MethodDeclaration(592)", "Delete Modifier: private(593)", "Delete PrimitiveType: void(594)", "Delete SimpleName: intersectSequences(595)", "Delete SimpleName: SargIntervalSequence(596)", "Delete SimpleType: SargIntervalSequence(597)", "Delete SimpleName: targetSeq(598)", "Delete SingleVariableDeclaration(599)", "Delete SimpleName: SargIntervalSequence(600)", "Delete SimpleType: SargIntervalSequence(601)", "Delete SimpleName: sourceSeq(602)", "Delete SingleVariableDeclaration(603)", "Delete SimpleName: ListIterator(604)", "Delete SimpleType: ListIterator(605)", "Delete SimpleName: SargInterval(606)", "Delete SimpleType: SargInterval(607)", "Delete ParameterizedType: ListIterator<SargInterval>(608)", "Delete SimpleName: targetIter(609)", "Delete QualifiedName: targetSeq.list(610)", "Delete SimpleName: listIterator(611)", "Delete MethodInvocation(612)", "Delete VariableDeclarationFragment(613)", "Delete VariableDeclarationStatement(614)", "Delete SimpleName: targetIter(615)", "Delete SimpleName: hasNext(616)", "Delete MethodInvocation(617)", "Delete PrefixExpression: !(618)", "Delete ReturnStatement(619)", "Delete Block(620)", "Delete IfStatement(621)", "Delete SimpleName: ListIterator(622)", "Delete SimpleType: ListIterator(623)", "Delete SimpleName: SargInterval(624)", "Delete SimpleType: SargInterval(625)", "Delete ParameterizedType: ListIterator<SargInterval>(626)", "Delete SimpleName: sourceIter(627)", "Delete QualifiedName: sourceSeq.list(628)", "Delete SimpleName: listIterator(629)", "Delete MethodInvocation(630)", "Delete VariableDeclarationFragment(631)", "Delete VariableDeclarationStatement(632)", "Delete SimpleName: sourceIter(633)", "Delete SimpleName: hasNext(634)", "Delete MethodInvocation(635)", "Delete PrefixExpression: !(636)", "Delete QualifiedName: targetSeq.list(637)", "Delete SimpleName: clear(638)", "Delete MethodInvocation(639)", "Delete ExpressionStatement(640)", "Delete ReturnStatement(641)", "Delete Block(642)", "Delete IfStatement(643)", "Delete SimpleName: SargInterval(644)", "Delete SimpleType: SargInterval(645)", "Delete SimpleName: target(646)", "Delete SimpleName: targetIter(647)", "Delete SimpleName: next(648)", "Delete MethodInvocation(649)", "Delete VariableDeclarationFragment(650)", "Delete VariableDeclarationStatement(651)", "Delete SimpleName: SargInterval(652)", "Delete SimpleType: SargInterval(653)", "Delete SimpleName: source(654)", "Delete SimpleName: sourceIter(655)", "Delete SimpleName: next(656)", "Delete MethodInvocation(657)", "Delete VariableDeclarationFragment(658)", "Delete VariableDeclarationStatement(659)", "Delete SimpleName: source(660)", "Delete SimpleName: getUpperBound(661)", "Delete MethodInvocation(662)", "Delete SimpleName: compareTo(663)", "Delete SimpleName: target(664)", "Delete SimpleName: getLowerBound(665)", "Delete MethodInvocation(666)", "Delete MethodInvocation(667)", "Delete NumberLiteral: 0(668)", "Delete InfixExpression: <(669)", "Delete SimpleName: sourceIter(670)", "Delete SimpleName: hasNext(671)", "Delete MethodInvocation(672)", "Delete PrefixExpression: !(673)", "Delete BreakStatement(674)", "Delete Block(675)", "Delete IfStatement(676)", "Delete SimpleName: source(677)", "Delete SimpleName: sourceIter(678)", "Delete SimpleName: next(679)", "Delete MethodInvocation(680)", "Delete Assignment: =(681)", "Delete ExpressionStatement(682)", "Delete ContinueStatement(683)", "Delete Block(684)", "Delete IfStatement(685)", "Delete SimpleName: target(686)", "Delete SimpleName: getUpperBound(687)", "Delete MethodInvocation(688)", "Delete SimpleName: compareTo(689)", "Delete SimpleName: source(690)", "Delete SimpleName: getLowerBound(691)", "Delete MethodInvocation(692)", "Delete MethodInvocation(693)", "Delete NumberLiteral: 0(694)", "Delete InfixExpression: <(695)", "Delete SimpleName: targetIter(696)", "Delete SimpleName: remove(697)", "Delete MethodInvocation(698)", "Delete ExpressionStatement(699)", "Delete SimpleName: targetIter(700)", "Delete SimpleName: hasNext(701)", "Delete MethodInvocation(702)", "Delete PrefixExpression: !(703)", "Delete ReturnStatement(704)", "Delete Block(705)", "Delete IfStatement(706)", "Delete SimpleName: target(707)", "Delete SimpleName: targetIter(708)", "Delete SimpleName: next(709)", "Delete MethodInvocation(710)", "Delete Assignment: =(711)", "Delete ExpressionStatement(712)", "Delete ContinueStatement(713)", "Delete Block(714)", "Delete IfStatement(715)", "Delete SimpleName: source(716)", "Delete SimpleName: getLowerBound(717)", "Delete MethodInvocation(718)", "Delete SimpleName: compareTo(719)", "Delete SimpleName: target(720)", "Delete SimpleName: getLowerBound(721)", "Delete MethodInvocation(722)", "Delete MethodInvocation(723)", "Delete NumberLiteral: 0(724)", "Delete InfixExpression: >(725)", "Delete SimpleName: target(726)", "Delete SimpleName: setLower(727)", "Delete SimpleName: source(728)", "Delete SimpleName: getLowerBound(729)", "Delete MethodInvocation(730)", "Delete SimpleName: getCoordinate(731)", "Delete MethodInvocation(732)", "Delete SimpleName: source(733)", "Delete SimpleName: getLowerBound(734)", "Delete MethodInvocation(735)", "Delete SimpleName: getStrictness(736)", "Delete MethodInvocation(737)", "Delete MethodInvocation(738)", "Delete ExpressionStatement(739)", "Delete Block(740)", "Delete IfStatement(741)", "Delete PrimitiveType: int(742)", "Delete SimpleName: c(743)", "Delete SimpleName: source(744)", "Delete SimpleName: getUpperBound(745)", "Delete MethodInvocation(746)", "Delete SimpleName: compareTo(747)", "Delete SimpleName: target(748)", "Delete SimpleName: getUpperBound(749)", "Delete MethodInvocation(750)", "Delete MethodInvocation(751)", "Delete VariableDeclarationFragment(752)", "Delete VariableDeclarationStatement(753)", "Delete SimpleName: c(754)", "Delete NumberLiteral: 0(755)", "Delete InfixExpression: <(756)", "Delete SimpleName: SargInterval(757)", "Delete SimpleType: SargInterval(758)", "Delete SimpleName: newTarget(759)", "Delete SimpleName: SargInterval(760)", "Delete SimpleType: SargInterval(761)", "Delete SimpleName: factory(762)", "Delete SimpleName: dataType(763)", "Delete ClassInstanceCreation(764)", "Delete VariableDeclarationFragment(765)", "Delete VariableDeclarationStatement(766)", "Delete SimpleName: newTarget(767)", "Delete SimpleName: setLower(768)", "Delete SimpleName: source(769)", "Delete SimpleName: getUpperBound(770)", "Delete MethodInvocation(771)", "Delete SimpleName: getCoordinate(772)", "Delete MethodInvocation(773)", "Delete SimpleName: source(774)", "Delete SimpleName: getUpperBound(775)", "Delete MethodInvocation(776)", "Delete SimpleName: getStrictnessComplement(777)", "Delete MethodInvocation(778)", "Delete MethodInvocation(779)", "Delete ExpressionStatement(780)", "Delete SimpleName: target(781)", "Delete SimpleName: getUpperBound(782)", "Delete MethodInvocation(783)", "Delete SimpleName: isFinite(784)", "Delete MethodInvocation(785)", "Delete SimpleName: newTarget(786)", "Delete SimpleName: setUpper(787)", "Delete SimpleName: target(788)", "Delete SimpleName: getUpperBound(789)", "Delete MethodInvocation(790)", "Delete SimpleName: getCoordinate(791)", "Delete MethodInvocation(792)", "Delete SimpleName: target(793)", "Delete SimpleName: getUpperBound(794)", "Delete MethodInvocation(795)", "Delete SimpleName: getStrictness(796)", "Delete MethodInvocation(797)", "Delete MethodInvocation(798)", "Delete ExpressionStatement(799)", "Delete Block(800)", "Delete IfStatement(801)", "Delete SimpleName: target(802)", "Delete SimpleName: setUpper(803)", "Delete SimpleName: source(804)", "Delete SimpleName: getUpperBound(805)", "Delete MethodInvocation(806)", "Delete SimpleName: getCoordinate(807)", "Delete MethodInvocation(808)", "Delete SimpleName: source(809)", "Delete SimpleName: getUpperBound(810)", "Delete MethodInvocation(811)", "Delete SimpleName: getStrictness(812)", "Delete MethodInvocation(813)", "Delete MethodInvocation(814)", "Delete ExpressionStatement(815)", "Delete SimpleName: targetIter(816)", "Delete SimpleName: add(817)", "Delete SimpleName: newTarget(818)", "Delete MethodInvocation(819)", "Delete ExpressionStatement(820)", "Delete SimpleName: target(821)", "Delete SimpleName: targetIter(822)", "Delete SimpleName: previous(823)", "Delete MethodInvocation(824)", "Delete Assignment: =(825)", "Delete ExpressionStatement(826)", "Delete SimpleName: target(827)", "Delete SimpleName: targetIter(828)", "Delete SimpleName: next(829)", "Delete MethodInvocation(830)", "Delete Assignment: =(831)", "Delete ExpressionStatement(832)", "Delete SimpleName: sourceIter(833)", "Delete SimpleName: hasNext(834)", "Delete MethodInvocation(835)", "Delete PrefixExpression: !(836)", "Delete BreakStatement(837)", "Delete Block(838)", "Delete IfStatement(839)", "Delete SimpleName: source(840)", "Delete SimpleName: sourceIter(841)", "Delete SimpleName: next(842)", "Delete MethodInvocation(843)", "Delete Assignment: =(844)", "Delete ExpressionStatement(845)", "Delete Block(846)", "Delete SimpleName: c(847)", "Delete NumberLiteral: 0(848)", "Delete InfixExpression: ==(849)", "Delete SimpleName: targetIter(850)", "Delete SimpleName: hasNext(851)", "Delete MethodInvocation(852)", "Delete PrefixExpression: !(853)", "Delete ReturnStatement(854)", "Delete Block(855)", "Delete IfStatement(856)", "Delete SimpleName: target(857)", "Delete SimpleName: targetIter(858)", "Delete SimpleName: next(859)", "Delete MethodInvocation(860)", "Delete Assignment: =(861)", "Delete ExpressionStatement(862)", "Delete SimpleName: sourceIter(863)", "Delete SimpleName: hasNext(864)", "Delete MethodInvocation(865)", "Delete PrefixExpression: !(866)", "Delete BreakStatement(867)", "Delete Block(868)", "Delete IfStatement(869)", "Delete SimpleName: source(870)", "Delete SimpleName: sourceIter(871)", "Delete SimpleName: next(872)", "Delete MethodInvocation(873)", "Delete Assignment: =(874)", "Delete ExpressionStatement(875)", "Delete Block(876)", "Delete SimpleName: c(877)", "Delete NumberLiteral: 0(878)", "Delete InfixExpression: >(879)", "Delete AssertStatement(880)", "Delete SimpleName: targetIter(881)", "Delete SimpleName: hasNext(882)", "Delete MethodInvocation(883)", "Delete PrefixExpression: !(884)", "Delete ReturnStatement(885)", "Delete Block(886)", "Delete IfStatement(887)", "Delete SimpleName: target(888)", "Delete SimpleName: targetIter(889)", "Delete SimpleName: next(890)", "Delete MethodInvocation(891)", "Delete Assignment: =(892)", "Delete ExpressionStatement(893)", "Delete Block(894)", "Delete IfStatement(895)", "Delete IfStatement(896)", "Delete Block(897)", "Delete ForStatement(898)", "Delete SimpleName: targetIter(899)", "Delete SimpleName: remove(900)", "Delete MethodInvocation(901)", "Delete ExpressionStatement(902)", "Delete SimpleName: targetIter(903)", "Delete SimpleName: hasNext(904)", "Delete MethodInvocation(905)", "Delete PrefixExpression: !(906)", "Delete BreakStatement(907)", "Delete Block(908)", "Delete IfStatement(909)", "Delete SimpleName: targetIter(910)", "Delete SimpleName: next(911)", "Delete MethodInvocation(912)", "Delete ExpressionStatement(913)", "Delete Block(914)", "Delete ForStatement(915)", "Delete Block(916)", "Delete MethodDeclaration(917)", "Delete Modifier: public(918)", "Delete SimpleName: SargIntervalSequence(919)", "Delete SimpleType: SargIntervalSequence(920)", "Delete SimpleName: evaluateComplemented(921)", "Delete SimpleName: setOp(922)", "Delete QualifiedName: SargSetOperator.COMPLEMENT(923)", "Delete InfixExpression: ==(924)", "Delete SimpleName: children(925)", "Delete SimpleName: get(926)", "Delete NumberLiteral: 0(927)", "Delete MethodInvocation(928)", "Delete SimpleName: evaluate(929)", "Delete MethodInvocation(930)", "Delete ReturnStatement(931)", "Delete Block(932)", "Delete IfStatement(933)", "Delete SimpleName: List(934)", "Delete SimpleType: List(935)", "Delete SimpleName: SargIntervalSequence(936)", "Delete SimpleType: SargIntervalSequence(937)", "Delete ParameterizedType: List<SargIntervalSequence>(938)", "Delete SimpleName: list(939)", "Delete SimpleName: ArrayList(940)", "Delete SimpleType: ArrayList(941)", "Delete SimpleName: SargIntervalSequence(942)", "Delete SimpleType: SargIntervalSequence(943)", "Delete ParameterizedType: ArrayList<SargIntervalSequence>(944)", "Delete ClassInstanceCreation(945)", "Delete VariableDeclarationFragment(946)", "Delete VariableDeclarationStatement(947)", "Delete SimpleName: SargExpr(948)", "Delete SimpleType: SargExpr(949)", "Delete SimpleName: child(950)", "Delete SingleVariableDeclaration(951)", "Delete SimpleName: children(952)", "Delete SimpleName: SargIntervalSequence(953)", "Delete SimpleType: SargIntervalSequence(954)", "Delete SimpleName: newSeq(955)", "Delete SimpleName: child(956)", "Delete SimpleName: evaluateComplemented(957)", "Delete MethodInvocation(958)", "Delete VariableDeclarationFragment(959)", "Delete VariableDeclarationStatement(960)", "Delete SimpleName: list(961)", "Delete SimpleName: add(962)", "Delete SimpleName: newSeq(963)", "Delete MethodInvocation(964)", "Delete ExpressionStatement(965)", "Delete Block(966)", "Delete EnhancedForStatement(967)", "Delete SimpleName: setOp(968)", "Delete SimpleName: INTERSECTION(969)", "Delete SwitchCase(970)", "Delete SimpleName: evaluateUnion(971)", "Delete SimpleName: list(972)", "Delete MethodInvocation(973)", "Delete ReturnStatement(974)", "Delete SimpleName: UNION(975)", "Delete SwitchCase(976)", "Delete SimpleName: evaluateIntersection(977)", "Delete SimpleName: list(978)", "Delete MethodInvocation(979)", "Delete ReturnStatement(980)", "Delete SwitchCase(981)", "Delete SimpleName: Util(982)", "Delete SimpleName: newInternal(983)", "Delete SimpleName: setOp(984)", "Delete SimpleName: toString(985)", "Delete MethodInvocation(986)", "Delete MethodInvocation(987)", "Delete ThrowStatement(988)", "Delete SwitchStatement(989)", "Delete Block(990)", "Delete MethodDeclaration(991)", "Delete TextElement: Comparator used in evaluateUnionOp. Intervals collate based on(992)", "Delete TextElement: {lowerBound, upperBound}.(993)", "Delete TagElement(994)", "Delete Javadoc(995)", "Delete Modifier: private(996)", "Delete Modifier: static(997)", "Delete SimpleName: IntervalComparator(998)", "Delete SimpleName: Comparator(999)", "Delete SimpleType: Comparator(1000)", "Delete SimpleName: SargInterval(1001)", "Delete SimpleType: SargInterval(1002)", "Delete ParameterizedType: Comparator<SargInterval>(1003)", "Delete Modifier: public(1004)", "Delete Modifier: static(1005)", "Delete Modifier: final(1006)", "Delete SimpleName: IntervalComparator(1007)", "Delete SimpleType: IntervalComparator(1008)", "Delete SimpleName: INSTANCE(1009)", "Delete SimpleName: IntervalComparator(1010)", "Delete SimpleType: IntervalComparator(1011)", "Delete ClassInstanceCreation(1012)", "Delete VariableDeclarationFragment(1013)", "Delete FieldDeclaration(1014)", "Delete Modifier: private(1015)", "Delete SimpleName: IntervalComparator(1016)", "Delete Block(1017)", "Delete MethodDeclaration(1018)", "Delete Modifier: public(1019)", "Delete PrimitiveType: int(1020)", "Delete SimpleName: compare(1021)", "Delete SimpleName: SargInterval(1022)", "Delete SimpleType: SargInterval(1023)", "Delete SimpleName: i1(1024)", "Delete SingleVariableDeclaration(1025)", "Delete SimpleName: SargInterval(1026)", "Delete SimpleType: SargInterval(1027)", "Delete SimpleName: i2(1028)", "Delete SingleVariableDeclaration(1029)", "Delete PrimitiveType: int(1030)", "Delete SimpleName: c(1031)", "Delete SimpleName: i1(1032)", "Delete SimpleName: getLowerBound(1033)", "Delete MethodInvocation(1034)", "Delete SimpleName: compareTo(1035)", "Delete SimpleName: i2(1036)", "Delete SimpleName: getLowerBound(1037)", "Delete MethodInvocation(1038)", "Delete MethodInvocation(1039)", "Delete VariableDeclarationFragment(1040)", "Delete VariableDeclarationStatement(1041)", "Delete SimpleName: c(1042)", "Delete NumberLiteral: 0(1043)", "Delete InfixExpression: !=(1044)", "Delete SimpleName: c(1045)", "Delete ReturnStatement(1046)", "Delete Block(1047)", "Delete IfStatement(1048)", "Delete SimpleName: i1(1049)", "Delete SimpleName: getUpperBound(1050)", "Delete MethodInvocation(1051)", "Delete SimpleName: compareTo(1052)", "Delete SimpleName: i2(1053)", "Delete SimpleName: getUpperBound(1054)", "Delete MethodInvocation(1055)", "Delete MethodInvocation(1056)", "Delete ReturnStatement(1057)", "Delete Block(1058)", "Delete MethodDeclaration(1059)", "Delete TypeDeclaration: class(1060)", "Delete TypeDeclaration: class(1061)"]}}, {"SargSetOperator_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL EnumDeclaration", "operations": ["DEL EnumConstantDeclaration", "DEL Javadoc", "DEL Javadoc", "DEL TextElement: set).", "DEL SimpleName: COMPLEMENT", "DEL TagElement: @link", "DEL TagElement", "DEL TextElement: Set complement over exactly one child.", "DEL EnumConstantDeclaration", "DEL TagElement", "DEL Javadoc", "DEL Javadoc", "DEL TextElement: .", "DEL TagElement", "DEL EnumDeclaration", "DEL TextElement: combine instances of ", "DEL TagElement", "DEL SimpleName: UNION", "DEL TextElement: Set intersection over any number of children (no children &rarr; universal", "DEL SimpleName: INTERSECTION", "DEL TextElement: Set union over any number of children (no children &rarr; empty set).", "DEL TextElement: SargSetOperator defines the supported set operators which can be used to", "DEL SimpleName: SargSetOperator", "DEL EnumConstantDeclaration", "DEL Modifier: public", "DEL SimpleName: SargExpr"]}]}}, {"SargSetOperator_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete TextElement: SargSetOperator defines the supported set operators which can be used to(2)", "Delete TextElement: combine instances of (3)", "Delete SimpleName: SargExpr(4)", "Delete TagElement: @link(5)", "Delete TextElement: .(6)", "Delete TagElement(7)", "Delete Javadoc(8)", "Delete Modifier: public(9)", "Delete SimpleName: SargSetOperator(10)", "Delete TextElement: Set intersection over any number of children (no children &rarr; universal(11)", "Delete TextElement: set).(12)", "Delete TagElement(13)", "Delete Javadoc(14)", "Delete SimpleName: INTERSECTION(15)", "Delete EnumConstantDeclaration(16)", "Delete TextElement: Set union over any number of children (no children &rarr; empty set).(17)", "Delete TagElement(18)", "Delete Javadoc(19)", "Delete SimpleName: UNION(20)", "Delete EnumConstantDeclaration(21)", "Delete TextElement: Set complement over exactly one child.(22)", "Delete TagElement(23)", "Delete Javadoc(24)", "Delete SimpleName: COMPLEMENT(25)", "Delete EnumConstantDeclaration(26)", "Delete EnumDeclaration(27)"]}}, {"SargStrictness_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.sarg", "DEL PackageDeclaration"]}, {"root": "DEL EnumDeclaration", "operations": ["DEL EnumDeclaration", "DEL EnumConstantDeclaration", "DEL TextElement: less than or greater than) or closed (exactly equal).", "DEL TextElement: Defines the boundary strictness of an endpoint: either open (either strictly", "DEL SimpleName: OPEN", "DEL EnumConstantDeclaration", "DEL Javadoc", "DEL SimpleName: CLOSED", "DEL Modifier: public", "DEL SimpleName: SargStrictness", "DEL TagElement"]}]}}, {"SargStrictness_diff": {"operations": ["Delete QualifiedName: org.eigenbase.sarg(0)", "Delete PackageDeclaration(1)", "Delete TextElement: Defines the boundary strictness of an endpoint: either open (either strictly(2)", "Delete TextElement: less than or greater than) or closed (exactly equal).(3)", "Delete TagElement(4)", "Delete Javadoc(5)", "Delete Modifier: public(6)", "Delete SimpleName: SargStrictness(7)", "Delete SimpleName: OPEN(8)", "Delete EnumConstantDeclaration(9)", "Delete SimpleName: CLOSED(10)", "Delete EnumConstantDeclaration(11)", "Delete EnumDeclaration(12)"]}}, {"package-info_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.jdbc4", "DEL PackageDeclaration", "DEL TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver", "DEL TextElement: implementation against JDK 1.5. For more information, see", "DEL TagElement", "DEL TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.", "DEL Javadoc"]}]}}, {"package-info_diff": {"operations": ["Delete TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver(0)", "Delete TextElement: implementation against JDK 1.5. For more information, see(1)", "Delete TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete QualifiedName: org.eigenbase.jdbc4(5)", "Delete PackageDeclaration(6)"]}}, {"RelStatColumnStatistics_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.eigenbase.stat"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL TextElement: column.", "DEL TextElement: Estimates the number of distinct values returned from a relational", "DEL TextElement:  an estimated percentage from 0.0 to 1.0 or null if no reliable", "DEL TextElement: summarize the results of applying a predicate to a column of a relational", "DEL Modifier: public", "DEL SimpleName: getSelectivity", "DEL MemberRef", "DEL SimpleType: Double", "DEL SimpleName: Double", "DEL TextElement: expression that satisfy a given condition.", "DEL TextElement: reliable estimate can be determined", "DEL Javadoc", "DEL TypeDeclaration: interface", "DEL TextElement: a given condition. This corresponds to the metadata query ", "DEL TextElement: This interface provides results based on column statistics. It may be used to", "DEL TagElement: @link", "DEL TagElement", "DEL SimpleName: getSelectivity", "DEL TextElement:  an estimate of the distinct values of a predicate or null if no", "DEL TextElement: .", "DEL SimpleType: Double", "DEL QualifiedName: org.eigenbase.rel.metadata.RelMetadataQuery", "DEL SimpleName: RelStatColumnStatistics", "DEL TagElement: @return", "DEL Javadoc", "DEL TextElement: expression. Alternatively, it may be used to summarize aspects of the entire", "DEL TagElement: @return", "DEL TagElement", "DEL Javadoc", "DEL TextElement: estimate can be determined", "DEL MethodDeclaration", "DEL MethodDeclaration", "DEL TagElement", "DEL TextElement: Estimates the percentage of a relational expression's rows which satisfy", "DEL SimpleName: getCardinality", "DEL SimpleName: Double"]}]}}, {"RelStatColumnStatistics_diff": {"operations": ["Delete QualifiedName: org.eigenbase.stat(0)", "Delete PackageDeclaration(1)", "Delete TextElement: This interface provides results based on column statistics. It may be used to(2)", "Delete TextElement: summarize the results of applying a predicate to a column of a relational(3)", "Delete TextElement: expression. Alternatively, it may be used to summarize aspects of the entire(4)", "Delete TextElement: column.(5)", "Delete TagElement(6)", "Delete Javadoc(7)", "Delete Modifier: public(8)", "Delete SimpleName: RelStatColumnStatistics(9)", "Delete TextElement: Estimates the percentage of a relational expression's rows which satisfy(10)", "Delete TextElement: a given condition. This corresponds to the metadata query (11)", "Delete QualifiedName: org.eigenbase.rel.metadata.RelMetadataQuery(12)", "Delete SimpleName: getSelectivity(13)", "Delete MemberRef(14)", "Delete TagElement: @link(15)", "Delete TextElement: .(16)", "Delete TagElement(17)", "Delete TextElement:  an estimated percentage from 0.0 to 1.0 or null if no reliable(18)", "Delete TextElement: estimate can be determined(19)", "Delete TagElement: @return(20)", "Delete Javadoc(21)", "Delete SimpleName: Double(22)", "Delete SimpleType: Double(23)", "Delete SimpleName: getSelectivity(24)", "Delete MethodDeclaration(25)", "Delete TextElement: Estimates the number of distinct values returned from a relational(26)", "Delete TextElement: expression that satisfy a given condition.(27)", "Delete TagElement(28)", "Delete TextElement:  an estimate of the distinct values of a predicate or null if no(29)", "Delete TextElement: reliable estimate can be determined(30)", "Delete TagElement: @return(31)", "Delete Javadoc(32)", "Delete SimpleName: Double(33)", "Delete SimpleType: Double(34)", "Delete SimpleName: getCardinality(35)", "Delete MethodDeclaration(36)", "Delete TypeDeclaration: interface(37)"]}}, {"RelStatSource_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL PackageDeclaration", "DEL QualifiedName: org.eigenbase.stat"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: org.eigenbase.sarg"]}, {"root": "DEL TypeDeclaration: interface", "operations": ["DEL TextElement:  a row count, or null if one could not be determined", "DEL SimpleName: ordinal", "DEL MethodDeclaration", "DEL SimpleType: RelStatColumnStatistics", "DEL SimpleType: SargIntervalSequence", "DEL Javadoc", "DEL TypeDeclaration: interface", "DEL MethodDeclaration", "DEL SingleVariableDeclaration", "DEL TagElement: @param", "DEL SingleVariableDeclaration", "DEL PrimitiveType: int", "DEL TagElement: @return", "DEL Javadoc", "DEL SimpleName: RelStatSource", "DEL SimpleName: Double", "DEL SimpleName: predicate", "DEL TextElement:  filtered column statistics, or null if they could not be obtained", "DEL TextElement:  associated predicates(s), evaluated as intervals", "DEL TagElement: @param", "DEL TextElement: ordinal and the sargable predicates associated with that column. The", "DEL TextElement: column.", "DEL TagElement: @return", "DEL TextElement: Returns the number of rows in a relation, as determined by statistics", "DEL TextElement: second argument can be null if there are no sargable predicates on the", "DEL TextElement: Returns statistics pertaining to a column specified by the 0-based", "DEL Javadoc", "DEL TextElement: This class encapsulates statistics for a RelNode", "DEL TagElement", "DEL SimpleName: getColumnStatistics", "DEL TagElement", "DEL TagElement", "DEL SimpleName: ordinal", "DEL SimpleName: predicate", "DEL Modifier: public", "DEL SimpleName: RelStatColumnStatistics", "DEL TextElement:    zero based column ordinal", "DEL SimpleName: getRowCount", "DEL SimpleType: Double", "DEL SimpleName: SargIntervalSequence"]}]}}, {"RelStatSource_diff": {"operations": ["Delete QualifiedName: org.eigenbase.stat(0)", "Delete PackageDeclaration(1)", "Delete QualifiedName: org.eigenbase.sarg(2)", "Delete ImportDeclaration(3)", "Delete TextElement: This class encapsulates statistics for a RelNode(4)", "Delete TagElement(5)", "Delete Javadoc(6)", "Delete Modifier: public(7)", "Delete SimpleName: RelStatSource(8)", "Delete TextElement: Returns the number of rows in a relation, as determined by statistics(9)", "Delete TagElement(10)", "Delete TextElement:  a row count, or null if one could not be determined(11)", "Delete TagElement: @return(12)", "Delete Javadoc(13)", "Delete SimpleName: Double(14)", "Delete SimpleType: Double(15)", "Delete SimpleName: getRowCount(16)", "Delete MethodDeclaration(17)", "Delete TextElement: Returns statistics pertaining to a column specified by the 0-based(18)", "Delete TextElement: ordinal and the sargable predicates associated with that column. The(19)", "Delete TextElement: second argument can be null if there are no sargable predicates on the(20)", "Delete TextElement: column.(21)", "Delete TagElement(22)", "Delete SimpleName: ordinal(23)", "Delete TextElement:    zero based column ordinal(24)", "Delete TagElement: @param(25)", "Delete SimpleName: predicate(26)", "Delete TextElement:  associated predicates(s), evaluated as intervals(27)", "Delete TagElement: @param(28)", "Delete TextElement:  filtered column statistics, or null if they could not be obtained(29)", "Delete TagElement: @return(30)", "Delete Javadoc(31)", "Delete SimpleName: RelStatColumnStatistics(32)", "Delete SimpleType: RelStatColumnStatistics(33)", "Delete SimpleName: getColumnStatistics(34)", "Delete PrimitiveType: int(35)", "Delete SimpleName: ordinal(36)", "Delete SingleVariableDeclaration(37)", "Delete SimpleName: SargIntervalSequence(38)", "Delete SimpleType: SargIntervalSequence(39)", "Delete SimpleName: predicate(40)", "Delete SingleVariableDeclaration(41)", "Delete MethodDeclaration(42)", "Delete TypeDeclaration: interface(43)"]}}, {"package-info_cluster": {"actions": [{"root": "DEL PackageDeclaration", "operations": ["DEL QualifiedName: org.eigenbase.jdbc4", "DEL PackageDeclaration", "DEL TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver", "DEL TextElement: implementation against JDK 1.5. For more information, see", "DEL TagElement", "DEL TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.", "DEL Javadoc"]}]}}, {"package-info_diff": {"operations": ["Delete TextElement: Provides source compatibility gunk when building a JDBC 4.0 driver(0)", "Delete TextElement: implementation against JDK 1.5. For more information, see(1)", "Delete TextElement: <a href=\"http://pub.eigenbase.org/wiki/Jdbc4Transition\">Eigenpedia</a>.(2)", "Delete TagElement(3)", "Delete Javadoc(4)", "Delete QualifiedName: org.eigenbase.jdbc4(5)", "Delete PackageDeclaration(6)"]}}], "commit_stats": [{"total_files": 1198, "deleted_files": 1198, "testing": "True", "maintenance": "True", "build": "False"}]}