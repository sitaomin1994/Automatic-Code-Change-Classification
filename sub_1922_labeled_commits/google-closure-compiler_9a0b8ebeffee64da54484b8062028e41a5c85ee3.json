{"application": "google-closure-compiler", "csha": "9a0b8ebeffee64da54484b8062028e41a5c85ee3", "files": [{"Node_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 1", "operations": ["INS QualifiedName: com.google.common.base.Preconditions.checkArgument to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 1"]}, {"root": "INS ImportDeclaration to CompilationUnit at 2", "operations": ["INS ImportDeclaration to CompilationUnit at 2", "INS QualifiedName: com.google.common.base.Preconditions.checkNotNull to ImportDeclaration at 0"]}, {"root": "UPDATE from com.google.common.base.Preconditions to com.google.common.base.Preconditions.checkState", "operations": ["UPD QualifiedName: com.google.common.base.Preconditions from com.google.common.base.Preconditions to com.google.common.base.Preconditions.checkState"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS MarkerAnnotation to FieldDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "MOVE from FieldDeclaration", "operations": ["MOV SimpleType: Node to FieldDeclaration at 1"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to FieldDeclaration at 0"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to FieldDeclaration at 0"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to FieldDeclaration at 1"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to FieldDeclaration at 0"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS MarkerAnnotation to FieldDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 2", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 2"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 2", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 2"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 1"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: PropListItem to MethodDeclaration at 1"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: PropListItem to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS MarkerAnnotation to FieldDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: PropListItem to MethodDeclaration at 4"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 1", "operations": ["INS MarkerAnnotation to MethodDeclaration at 1", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SimpleType: PropListItem to MethodDeclaration at 3"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to FieldDeclaration at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to FieldDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to FieldDeclaration at 0"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS NullLiteral to ReturnStatement at 0", "INS ReturnStatement to Block at 3"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "MOVE from SingleVariableDeclaration", "operations": ["MOV SimpleType: PropListItem to SingleVariableDeclaration at 1"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS SimpleName: Nullable to MarkerAnnotation at 0", "INS MarkerAnnotation to SingleVariableDeclaration at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "UPDATE from Add all children after 'node'. to Add all children after 'node'. ", "operations": ["UPD TextElement: Add all children after 'node'. from Add all children after 'node'. to Add all children after 'node'. "]}, {"root": "UPDATE from Detach a child from its parent and siblings. to Detach a child from its parent and siblings. ", "operations": ["UPD TextElement: Detach a child from its parent and siblings. from Detach a child from its parent and siblings. to Detach a child from its parent and siblings. "]}, {"root": "UPDATE from Detaches child from Node and replaces it with newChild. to Detaches child from Node and replaces it with newChild. ", "operations": ["UPD TextElement: Detaches child from Node and replaces it with newChild. from Detaches child from Node and replaces it with newChild. to Detaches child from Node and replaces it with newChild. "]}, {"root": "UPDATE from  The replacement list if the property was removed, or to  The replacement list if the property was removed, or 'item' otherwise.", "operations": ["UPD TextElement:  The replacement list if the property was removed, or from  The replacement list if the property was removed, or to  The replacement list if the property was removed, or 'item' otherwise."]}, {"root": "UPDATE from Returns the syntactical type specified on this node. Not to be confused to Returns the syntactical type specified on this node. Not to be confused with ", "operations": ["UPD TextElement: Returns the syntactical type specified on this node. Not to be confused from Returns the syntactical type specified on this node. Not to be confused to Returns the syntactical type specified on this node. Not to be confused with "]}, {"root": "UPDATE from Linked list of properties. Since vast majority of nodes would have to Linked list of properties. Since vast majority of nodes would have no more then 2 properties,", "operations": ["UPD TextElement: Linked list of properties. Since vast majority of nodes would have from Linked list of properties. Since vast majority of nodes would have to Linked list of properties. Since vast majority of nodes would have no more then 2 properties,"]}, {"root": "UPDATE from fast lookup. If this does not holds, propListHead can be replaced to linked list saves memory and provides fast lookup. If this does not holds, propListHead can be", "operations": ["UPD TextElement: fast lookup. If this does not holds, propListHead can be replaced from fast lookup. If this does not holds, propListHead can be replaced to linked list saves memory and provides fast lookup. If this does not holds, propListHead can be"]}, {"root": "UPDATE from by UintMap. to replaced by UintMap.", "operations": ["UPD TextElement: by UintMap. from by UintMap. to replaced by UintMap."]}, {"root": "UPDATE from Returns the source file associated with this input. May be null  to Returns the source file associated with this input. ", "operations": ["UPD TextElement: Returns the source file associated with this input. May be null  from Returns the source file associated with this input. May be null  to Returns the source file associated with this input. "]}, {"root": "UPDATE from  The Id of the CompilerInput associated with this Node. to  The Id of the CompilerInput associated with this Node. ", "operations": ["UPD TextElement:  The Id of the CompilerInput associated with this Node. from  The Id of the CompilerInput associated with this Node. to  The Id of the CompilerInput associated with this Node. "]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: n to VariableDeclarationFragment at 0", "INS SimpleName: current to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 2"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS ReturnStatement to Block at 3", "INS SimpleName: n to ReturnStatement at 0"]}, {"root": "UPDATE from Checks if the subtree under this node is the same as another subtree. to Checks if the subtree under this node is the same as another subtree. Returns null if it's", "operations": ["UPD TextElement: Checks if the subtree under this node is the same as another subtree. from Checks if the subtree under this node is the same as another subtree. to Checks if the subtree under this node is the same as another subtree. Returns null if it's", "UPD TextElement: Checks if the subtree under this node is the same as another subtree. from Checks if the subtree under this node is the same as another subtree. to Checks if the subtree under this node is the same as another subtree. Returns null if it's"]}, {"root": "UPDATE from Returns null if it's equal, or a message describing the differences. to equal, or a message describing the differences. Should be called with ", "operations": ["UPD TextElement: Returns null if it's equal, or a message describing the differences. from Returns null if it's equal, or a message describing the differences. to equal, or a message describing the differences. Should be called with "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 2"]}, {"root": "INS TextElement:  as the to TagElement at 3", "operations": ["INS TextElement:  as the to TagElement at 3"]}, {"root": "UPDATE from  as the \"expected\" node and to \"expected\" node and ", "operations": ["UPD TextElement:  as the \"expected\" node and from  as the \"expected\" node and to \"expected\" node and "]}, {"root": "UPDATE from Returns null if it's equal, or a message describing the differences. to equal, or a message describing the differences. Considers two nodes to be unequal if their", "operations": ["UPD TextElement: Returns null if it's equal, or a message describing the differences. from Returns null if it's equal, or a message describing the differences. to equal, or a message describing the differences. Considers two nodes to be unequal if their"]}, {"root": "UPDATE from Should be called with  to JSDocInfo doesn't match. Should be called with ", "operations": ["UPD TextElement: Should be called with  from Should be called with  to JSDocInfo doesn't match. Should be called with "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 4", "MOV TextElement: Should be called with  to TagElement: @code at 0"]}, {"root": "UPDATE from  as the \"expected\" node and to  as the \"expected\" node and ", "operations": ["UPD TextElement:  as the \"expected\" node and from  as the \"expected\" node and to  as the \"expected\" node and ", "UPD TextElement:  as the from  as the to  as the \"expected\" node and "]}, {"root": "UPDATE from Compare this node to the given node recursively and return the first pair of nodes to Compare this node to the given node recursively and return the first pair of nodes that differs", "operations": ["UPD TextElement: Compare this node to the given node recursively and return the first pair of nodes from Compare this node to the given node recursively and return the first pair of nodes to Compare this node to the given node recursively and return the first pair of nodes that differs", "UPD TextElement: Compare this node to the given node recursively and return the first pair of nodes from Compare this node to the given node recursively and return the first pair of nodes to Compare this node to the given node recursively and return the first pair of nodes that differs"]}, {"root": "UPDATE from that differs doing a preorder depth-first traversal. Package private for to doing a preorder depth-first traversal. Package private for testing. Returns null if the nodes", "operations": ["UPD TextElement: that differs doing a preorder depth-first traversal. Package private for from that differs doing a preorder depth-first traversal. Package private for to doing a preorder depth-first traversal. Package private for testing. Returns null if the nodes"]}, {"root": "UPDATE from testing. Returns null if the nodes are equivalent. Should be called with  to are equivalent. Should be called with ", "operations": ["UPD TextElement: testing. Returns null if the nodes are equivalent. Should be called with  from testing. Returns null if the nodes are equivalent. Should be called with  to are equivalent. Should be called with "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 5"]}, {"root": "UPDATE from \"expected\" node and  to  as", "operations": ["UPD TextElement: \"expected\" node and  from \"expected\" node and  to  as"]}, {"root": "UPDATE from  as the \"actual\" node. to the \"actual\" node.", "operations": ["UPD TextElement:  as the \"actual\" node. from  as the \"actual\" node. to the \"actual\" node."]}, {"root": "UPDATE from that differs doing a preorder depth-first traversal. Should be called with  to doing a preorder depth-first traversal. Should be called with ", "operations": ["UPD TextElement: that differs doing a preorder depth-first traversal. Should be called with  from that differs doing a preorder depth-first traversal. Should be called with  to doing a preorder depth-first traversal. Should be called with "]}, {"root": "UPDATE from  as the to  as the \"expected\"", "operations": ["UPD TextElement:  as the from  as the to  as the \"expected\""]}, {"root": "UPDATE from \"expected\" node and  to node and ", "operations": ["UPD TextElement: \"expected\" node and  from \"expected\" node and  to node and "]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @code to TagElement at 5"]}, {"root": "UPDATE from This function takes a set of GETPROP nodes and produces a string that is to This function takes a set of GETPROP nodes and produces a string that is each property", "operations": ["UPD TextElement: This function takes a set of GETPROP nodes and produces a string that is from This function takes a set of GETPROP nodes and produces a string that is to This function takes a set of GETPROP nodes and produces a string that is each property", "UPD TextElement: This function takes a set of GETPROP nodes and produces a string that is from This function takes a set of GETPROP nodes and produces a string that is to This function takes a set of GETPROP nodes and produces a string that is each property"]}, {"root": "UPDATE from each property separated by dots. If the node ultimately under the left to separated by dots. If the node ultimately under the left sub-tree is not a simple name, this is", "operations": ["UPD TextElement: each property separated by dots. If the node ultimately under the left from each property separated by dots. If the node ultimately under the left to separated by dots. If the node ultimately under the left sub-tree is not a simple name, this is", "UPD TextElement: each property separated by dots. If the node ultimately under the left from each property separated by dots. If the node ultimately under the left to separated by dots. If the node ultimately under the left sub-tree is not a simple name, this is"]}, {"root": "UPDATE from sub-tree is not a simple name, this is not a valid qualified name. to not a valid qualified name.", "operations": ["UPD TextElement: sub-tree is not a simple name, this is not a valid qualified name. from sub-tree is not a simple name, this is not a valid qualified name. to not a valid qualified name."]}, {"root": "UPDATE from  a null if this is not a qualified name, or a dot-separated string to  a null if this is not a qualified name, or a dot-separated string of the name and", "operations": ["UPD TextElement:  a null if this is not a qualified name, or a dot-separated string from  a null if this is not a qualified name, or a dot-separated string to  a null if this is not a qualified name, or a dot-separated string of the name and", "UPD TextElement:  a null if this is not a qualified name, or a dot-separated string from  a null if this is not a qualified name, or a dot-separated string to  a null if this is not a qualified name, or a dot-separated string of the name and"]}, {"root": "UPDATE from of the name and properties. to properties.", "operations": ["UPD TextElement: of the name and properties. from of the name and properties. to properties.", "UPD TextElement: of the name and properties. from of the name and properties. to properties."]}, {"root": "UPDATE from method returns the original name of each segment rather than the renamed to not a valid qualified name. This method returns the original name of each segment rather than", "operations": ["UPD TextElement: method returns the original name of each segment rather than the renamed from method returns the original name of each segment rather than the renamed to not a valid qualified name. This method returns the original name of each segment rather than"]}, {"root": "UPDATE from version. to the renamed version.", "operations": ["UPD TextElement: version. from version. to the renamed version."]}, {"root": "UPDATE from Returns whether a node matches a simple or a qualified name, such as to Returns whether a node matches a simple or a qualified name, such as <code>x</code> or <code>", "operations": ["UPD TextElement: Returns whether a node matches a simple or a qualified name, such as from Returns whether a node matches a simple or a qualified name, such as to Returns whether a node matches a simple or a qualified name, such as <code>x</code> or <code>"]}, {"root": "UPDATE from <code>x</code> or <code>a.b.c</code> or <code>this.a</code>. to a.b.c</code> or <code>this.a</code>.", "operations": ["UPD TextElement: <code>x</code> or <code>a.b.c</code> or <code>this.a</code>. from <code>x</code> or <code>a.b.c</code> or <code>this.a</code>. to a.b.c</code> or <code>this.a</code>."]}, {"root": "UPDATE from Removes the first child of Node. Equivalent to: to Removes the first child of Node. Equivalent to: node.removeChild(node.getFirstChild());", "operations": ["UPD TextElement: Removes the first child of Node. Equivalent to: from Removes the first child of Node. Equivalent to: to Removes the first child of Node. Equivalent to: node.removeChild(node.getFirstChild());"]}, {"root": "UPDATE from  A Node that is the head of the list of children. to  A Node that is the head of the list of children. ", "operations": ["UPD TextElement:  A Node that is the head of the list of children. from  A Node that is the head of the list of children. to  A Node that is the head of the list of children. "]}, {"root": "UPDATE from Returns the compiled inferred type on this node. Not to be confused to Returns the compiled inferred type on this node. Not to be confused with ", "operations": ["UPD TextElement: Returns the compiled inferred type on this node. Not to be confused from Returns the compiled inferred type on this node. Not to be confused to Returns the compiled inferred type on this node. Not to be confused with "]}, {"root": "UPDATE from  which returns the syntactically to  which returns the syntactically specified type.", "operations": ["UPD TextElement:  which returns the syntactically from  which returns the syntactically to  which returns the syntactically specified type."]}, {"root": "UPDATE from  associated with this node if any, and null otherwise.<p> to  associated with this node if any, and null otherwise.", "operations": ["UPD TextElement:  associated with this node if any, and null otherwise.<p> from  associated with this node if any, and null otherwise.<p> to  associated with this node if any, and null otherwise."]}, {"root": "UPDATE from NTI and OTI don't annotate the exact same AST nodes with types. (For example, OTI to <p>NTI and OTI don't annotate the exact same AST nodes with types. (For example, OTI doesn't", "operations": ["UPD TextElement: NTI and OTI don't annotate the exact same AST nodes with types. (For example, OTI from NTI and OTI don't annotate the exact same AST nodes with types. (For example, OTI to <p>NTI and OTI don't annotate the exact same AST nodes with types. (For example, OTI doesn't"]}, {"root": "UPDATE from doesn't annotate dead code.) When OTI runs after NTI, the checks that use type to annotate dead code.) When OTI runs after NTI, the checks that use type information must only", "operations": ["UPD TextElement: doesn't annotate dead code.) When OTI runs after NTI, the checks that use type from doesn't annotate dead code.) When OTI runs after NTI, the checks that use type to annotate dead code.) When OTI runs after NTI, the checks that use type information must only"]}, {"root": "UPDATE from information must only see the old types. They can call this method to avoid getting to see the old types. They can call this method to avoid getting a new type for an AST node where", "operations": ["UPD TextElement: information must only see the old types. They can call this method to avoid getting from information must only see the old types. They can call this method to avoid getting to see the old types. They can call this method to avoid getting a new type for an AST node where"]}, {"root": "UPDATE from Calls to this method are intended to be temporary. As we migrate passes to support to OTI did not add a type. Calls to this method are intended to be temporary. As we migrate passes", "operations": ["UPD TextElement: Calls to this method are intended to be temporary. As we migrate passes to support from Calls to this method are intended to be temporary. As we migrate passes to support to OTI did not add a type. Calls to this method are intended to be temporary. As we migrate passes"]}, {"root": "UPDATE from NTI natively, we will be replacing calls to this method with calls to getTypeI. to to support NTI natively, we will be replacing calls to this method with calls to getTypeI.", "operations": ["UPD TextElement: NTI natively, we will be replacing calls to this method with calls to getTypeI. from NTI natively, we will be replacing calls to this method with calls to getTypeI. to to support NTI natively, we will be replacing calls to this method with calls to getTypeI."]}, {"root": "UPDATE from  if no JSDoc is attached to this to  if no JSDoc is attached to this node", "operations": ["UPD TextElement:  if no JSDoc is attached to this from  if no JSDoc is attached to this to  if no JSDoc is attached to this node"]}, {"root": "UPDATE from Returns the set of ES5 directives for this node. to Returns the set of ES5 directives for this node. ", "operations": ["UPD TextElement: Returns the set of ES5 directives for this node. from Returns the set of ES5 directives for this node. to Returns the set of ES5 directives for this node. "]}, {"root": "INS MarkerAnnotation to SingleVariableDeclaration at 0", "operations": ["INS MarkerAnnotation to SingleVariableDeclaration at 0", "INS SimpleName: Nullable to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV InfixExpression: == to MethodInvocation at 2"]}, {"root": "UPDATE from checkArgument to checkNotNull", "operations": ["UPD SimpleName: checkArgument from checkArgument to checkNotNull", "UPD SimpleName: checkArgument from checkArgument to checkNotNull", "UPD SimpleName: checkState from checkState to checkNotNull", "UPD SimpleName: checkArgument from checkArgument to checkNotNull", "UPD SimpleName: checkState from checkState to checkNotNull", "UPD SimpleName: checkState from checkState to checkNotNull", "UPD SimpleName: checkArgument from checkArgument to checkNotNull"]}, {"root": "INS QualifiedName: children.previous to MethodInvocation at 2", "operations": ["INS QualifiedName: children.previous to MethodInvocation at 2"]}, {"root": "INS QualifiedName: child.previous to MethodInvocation at 2", "operations": ["INS QualifiedName: child.previous to MethodInvocation at 2"]}, {"root": "INS QualifiedName: prevChild.next to MethodInvocation at 2", "operations": ["INS QualifiedName: prevChild.next to MethodInvocation at 2"]}, {"root": "UPDATE from \"prev is doesn't have a sibling to replace.\" to \"prev doesn't have a sibling to replace.\"", "operations": ["UPD StringLiteral: \"prev is doesn't have a sibling to replace.\" from \"prev is doesn't have a sibling to replace.\" to \"prev doesn't have a sibling to replace.\""]}, {"root": "INS SimpleName: target to MethodInvocation at 2", "operations": ["INS SimpleName: target to MethodInvocation at 2"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Node to VariableDeclarationStatement at 0"]}, {"root": "INS MethodInvocation to ClassInstanceCreation at 1", "operations": ["INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleName: checkNotNull to MethodInvocation at 0"]}, {"root": "UPDATE from Should be called with  to  this", "operations": ["UPD TextElement: Should be called with  from Should be called with  to  this"]}, {"root": "UPDATE from  actual to actual", "operations": ["UPD TextElement:  actual from  actual to actual"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: res to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from firstChild to first", "operations": ["UPD SimpleName: firstChild from firstChild to first", "UPD SimpleName: firstChild from firstChild to first", "UPD SimpleName: firstChild from firstChild to first"]}, {"root": "INS SimpleName: parent to MethodInvocation at 2", "operations": ["INS SimpleName: parent to MethodInvocation at 2"]}, {"root": "INS SimpleName: target to MethodInvocation at 2", "operations": ["INS SimpleName: target to MethodInvocation at 2"]}, {"root": "INS SimpleName: target to MethodInvocation at 2", "operations": ["INS SimpleName: target to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: NodeMismatch to VariableDeclarationStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL InfixExpression: &&", "operations": ["DEL SimpleName: node", "DEL NullLiteral", "DEL InfixExpression: !=", "DEL InfixExpression: &&"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL InfixExpression: !=", "DEL NullLiteral", "DEL QualifiedName: children.previous"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL QualifiedName: child.previous", "DEL InfixExpression: !=", "DEL NullLiteral"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL QualifiedName: prevChild.next", "DEL NullLiteral", "DEL InfixExpression: !="]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL NullLiteral", "DEL InfixExpression: !=", "DEL SimpleName: target"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL TextElement: 'item' otherwise.", "operations": ["DEL TextElement: 'item' otherwise."]}, {"root": "DEL TextElement: with ", "operations": ["DEL TextElement: with "]}, {"root": "DEL TextElement: no more then 2 properties, linked list saves memory and provides", "operations": ["DEL TextElement: no more then 2 properties, linked list saves memory and provides"]}, {"root": "DEL TryStatement", "operations": ["DEL Block", "DEL Block", "DEL ReturnStatement", "DEL TryStatement", "DEL SimpleName: current"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL TextElement: Considers two nodes to be unequal if their JSDocInfo doesn't match.", "operations": ["DEL TextElement: Considers two nodes to be unequal if their JSDocInfo doesn't match."]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: res", "DEL NullLiteral", "DEL VariableDeclarationFragment"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement", "DEL Assignment: =", "DEL SimpleName: res"]}, {"root": "DEL ReturnStatement", "operations": ["DEL ReturnStatement", "DEL SimpleName: res"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationFragment", "DEL SimpleName: firstChild", "DEL SimpleName: getFirstChild", "DEL VariableDeclarationStatement", "DEL MethodInvocation"]}, {"root": "DEL TextElement: sub-tree is not a simple name, this is not a valid qualified name. This", "operations": ["DEL TextElement: sub-tree is not a simple name, this is not a valid qualified name. This"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL NullLiteral", "DEL SimpleName: parent", "DEL InfixExpression: !="]}, {"root": "DEL TextElement: node.removeChild(node.getFirstChild());", "operations": ["DEL TextElement: node.removeChild(node.getFirstChild());"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL SimpleName: target", "DEL NullLiteral", "DEL InfixExpression: !="]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL InfixExpression: !=", "operations": ["DEL SimpleName: target", "DEL NullLiteral", "DEL InfixExpression: !="]}, {"root": "DEL TextElement: with ", "operations": ["DEL TextElement: with "]}, {"root": "DEL TextElement: specified type.", "operations": ["DEL TextElement: specified type."]}, {"root": "DEL TextElement: a new type for an AST node where OTI did not add a type.", "operations": ["DEL TextElement: a new type for an AST node where OTI did not add a type."]}, {"root": "DEL TextElement: node", "operations": ["DEL TextElement: node"]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}, {"root": "DEL SingleMemberAnnotation", "operations": ["DEL SimpleName: SuppressWarnings", "DEL SingleMemberAnnotation", "DEL StringLiteral: \"unchecked\""]}, {"root": "DEL SimpleName: Preconditions", "operations": ["DEL SimpleName: Preconditions"]}]}}, {"Node_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(9761) at 1", "Insert ImportDeclaration(3) into CompilationUnit(9761) at 1", "Insert ImportDeclaration(5) into CompilationUnit(9761) at 2", "Insert QualifiedName: com.google.common.base.Preconditions.checkArgument(2) into ImportDeclaration(3) at 0", "Insert QualifiedName: com.google.common.base.Preconditions.checkNotNull(4) into ImportDeclaration(5) at 0", "Update QualifiedName: com.google.common.base.Preconditions(6) to com.google.common.base.Preconditions.checkState", "Insert MarkerAnnotation(2010) into MethodDeclaration(2018) at 0", "Insert MarkerAnnotation(2025) into MethodDeclaration(2033) at 1", "Insert MarkerAnnotation(2035) into MethodDeclaration(2043) at 0", "Insert MarkerAnnotation(2045) into MethodDeclaration(2058) at 0", "Insert MarkerAnnotation(2060) into MethodDeclaration(2069) at 0", "Insert MarkerAnnotation(2071) into MethodDeclaration(2085) at 0", "Insert MarkerAnnotation(2087) into MethodDeclaration(2106) at 0", "Insert MarkerAnnotation(2108) into MethodDeclaration(2123) at 0", "Insert MarkerAnnotation(2967) into MethodDeclaration(3000) at 1", "Insert MarkerAnnotation(3083) into MethodDeclaration(3143) at 1", "Insert MarkerAnnotation(3145) into MethodDeclaration(3173) at 0", "Insert MarkerAnnotation(3356) into MethodDeclaration(3369) at 1", "Insert MarkerAnnotation(3424) into MethodDeclaration(3436) at 1", "Insert MarkerAnnotation(3438) into MethodDeclaration(3451) at 0", "Insert MarkerAnnotation(4075) into FieldDeclaration(4080) at 0", "Move SimpleType: Node(6111) into FieldDeclaration(4080) at 1", "Insert MarkerAnnotation(4082) into FieldDeclaration(4087) at 0", "Insert MarkerAnnotation(4089) into FieldDeclaration(4094) at 0", "Insert MarkerAnnotation(4101) into FieldDeclaration(4107) at 1", "Insert MarkerAnnotation(4175) into FieldDeclaration(4181) at 0", "Insert MarkerAnnotation(4183) into FieldDeclaration(4189) at 0", "Insert MarkerAnnotation(4230) into MethodDeclaration(4252) at 0", "Insert MarkerAnnotation(4257) into MethodDeclaration(4272) at 1", "Insert MarkerAnnotation(4295) into MethodDeclaration(4310) at 1", "Insert MarkerAnnotation(4315) into MethodDeclaration(4329) at 1", "Insert MarkerAnnotation(4913) into MethodDeclaration(4920) at 0", "Insert MarkerAnnotation(4938) into MethodDeclaration(4946) at 0", "Insert MarkerAnnotation(4948) into MethodDeclaration(4961) at 0", "Insert MarkerAnnotation(4969) into MethodDeclaration(5008) at 1", "Insert MarkerAnnotation(5333) into MethodDeclaration(5377) at 2", "Insert MarkerAnnotation(5399) into MethodDeclaration(5500) at 2", "Insert MarkerAnnotation(5514) into MethodDeclaration(5528) at 1", "Insert MarkerAnnotation(5544) into MethodDeclaration(5611) at 1", "Insert MarkerAnnotation(6056) into MethodDeclaration(6110) at 1", "Insert MarkerAnnotation(6128) into MethodDeclaration(6220) at 1", "Insert MarkerAnnotation(6231) into MethodDeclaration(6334) at 1", "Insert MarkerAnnotation(6708) into MethodDeclaration(6731) at 1", "Insert MarkerAnnotation(6736) into MethodDeclaration(6772) at 1", "Insert MarkerAnnotation(7422) into MethodDeclaration(7439) at 1", "Insert MarkerAnnotation(7458) into MethodDeclaration(7466) at 0", "Insert MarkerAnnotation(7496) into MethodDeclaration(7510) at 1", "Insert MarkerAnnotation(7523) into MethodDeclaration(7536) at 1", "Insert MarkerAnnotation(7767) into MethodDeclaration(7786) at 1", "Insert MarkerAnnotation(1005) into MethodDeclaration(1009) at 0", "Move SimpleType: PropListItem(1005) into MethodDeclaration(1009) at 1", "Move SimpleType: PropListItem(1008) into MethodDeclaration(1019) at 0", "Insert MarkerAnnotation(1045) into FieldDeclaration(1052) at 0", "Move MarkerAnnotation(1091) into MethodDeclaration(1103) at 0", "Insert MarkerAnnotation(1095) into MethodDeclaration(1103) at 1", "Move SimpleType: PropListItem(1095) into MethodDeclaration(1103) at 4", "Move MarkerAnnotation(1081) into MethodDeclaration(1117) at 0", "Move SimpleType: PropListItem(1084) into MethodDeclaration(1117) at 3", "Insert SimpleName: Nullable(2009) into MarkerAnnotation(2010) at 0", "Insert SimpleName: Nullable(2024) into MarkerAnnotation(2025) at 0", "Insert SimpleName: Nullable(2034) into MarkerAnnotation(2035) at 0", "Insert SimpleName: Nullable(2044) into MarkerAnnotation(2045) at 0", "Insert SimpleName: Nullable(2059) into MarkerAnnotation(2060) at 0", "Insert SimpleName: Nullable(2070) into MarkerAnnotation(2071) at 0", "Insert SimpleName: Nullable(2086) into MarkerAnnotation(2087) at 0", "Insert MarkerAnnotation(2093) into SingleVariableDeclaration(2097) at 0", "Insert SimpleName: Nullable(2107) into MarkerAnnotation(2108) at 0", "Insert MarkerAnnotation(2555) into SingleVariableDeclaration(2559) at 0", "Insert MarkerAnnotation(2561) into SingleVariableDeclaration(2565) at 0", "Insert SimpleName: Nullable(2966) into MarkerAnnotation(2967) at 0", "Insert SimpleName: Nullable(3082) into MarkerAnnotation(3083) at 0", "Insert MarkerAnnotation(3089) into SingleVariableDeclaration(3093) at 0", "Insert SimpleName: Nullable(3144) into MarkerAnnotation(3145) at 0", "Insert MarkerAnnotation(3258) into SingleVariableDeclaration(3262) at 0", "Insert SimpleName: Nullable(3355) into MarkerAnnotation(3356) at 0", "Insert MarkerAnnotation(3381) into SingleVariableDeclaration(3385) at 0", "Insert MarkerAnnotation(3405) into SingleVariableDeclaration(3409) at 0", "Insert SimpleName: Nullable(3423) into MarkerAnnotation(3424) at 0", "Insert SimpleName: Nullable(3437) into MarkerAnnotation(3438) at 0", "Insert SimpleName: Nullable(4074) into MarkerAnnotation(4075) at 0", "Insert SimpleName: Nullable(4081) into MarkerAnnotation(4082) at 0", "Insert SimpleName: Nullable(4088) into MarkerAnnotation(4089) at 0", "Insert SimpleName: Nullable(4100) into MarkerAnnotation(4101) at 0", "Insert SimpleName: Nullable(4174) into MarkerAnnotation(4175) at 0", "Insert SimpleName: Nullable(4182) into MarkerAnnotation(4183) at 0", "Insert MarkerAnnotation(4194) into SingleVariableDeclaration(4198) at 0", "Insert SimpleName: Nullable(4229) into MarkerAnnotation(4230) at 0", "Insert SimpleName: Nullable(4256) into MarkerAnnotation(4257) at 0", "Insert SimpleName: Nullable(4294) into MarkerAnnotation(4295) at 0", "Insert SimpleName: Nullable(4314) into MarkerAnnotation(4315) at 0", "Insert MarkerAnnotation(4791) into FieldDeclaration(4797) at 0", "Insert SimpleName: Nullable(4912) into MarkerAnnotation(4913) at 0", "Insert MarkerAnnotation(4924) into SingleVariableDeclaration(4928) at 0", "Insert SimpleName: Nullable(4937) into MarkerAnnotation(4938) at 0", "Insert SimpleName: Nullable(4947) into MarkerAnnotation(4948) at 0", "Insert SimpleName: Nullable(4968) into MarkerAnnotation(4969) at 0", "Insert MarkerAnnotation(5039) into FieldDeclaration(5045) at 0", "Insert SimpleName: Nullable(5332) into MarkerAnnotation(5333) at 0", "Insert SimpleName: Nullable(5398) into MarkerAnnotation(5399) at 0", "Insert SimpleName: Nullable(5513) into MarkerAnnotation(5514) at 0", "Insert SimpleName: Nullable(5543) into MarkerAnnotation(5544) at 0", "Insert ReturnStatement(5609) into Block(5610) at 2", "Insert SimpleName: Nullable(6055) into MarkerAnnotation(6056) at 0", "Insert SimpleName: Nullable(6127) into MarkerAnnotation(6128) at 0", "Insert SimpleName: Nullable(6230) into MarkerAnnotation(6231) at 0", "Insert SimpleName: Nullable(6707) into MarkerAnnotation(6708) at 0", "Insert SimpleName: Nullable(6735) into MarkerAnnotation(6736) at 0", "Insert SimpleName: Nullable(7421) into MarkerAnnotation(7422) at 0", "Insert MarkerAnnotation(7444) into SingleVariableDeclaration(7448) at 0", "Insert SimpleName: Nullable(7457) into MarkerAnnotation(7458) at 0", "Insert MarkerAnnotation(7471) into SingleVariableDeclaration(7475) at 0", "Insert SimpleName: Nullable(7495) into MarkerAnnotation(7496) at 0", "Insert SimpleName: Nullable(7522) into MarkerAnnotation(7523) at 0", "Insert SimpleName: Nullable(7766) into MarkerAnnotation(7767) at 0", "Insert SimpleName: Nullable(1004) into MarkerAnnotation(1005) at 0", "Insert MarkerAnnotation(1014) into SingleVariableDeclaration(1018) at 0", "Move SimpleType: PropListItem(1001) into SingleVariableDeclaration(1018) at 1", "Insert SimpleName: Nullable(1044) into MarkerAnnotation(1045) at 0", "Insert MarkerAnnotation(1064) into SingleVariableDeclaration(1068) at 0", "Insert SimpleName: Nullable(1094) into MarkerAnnotation(1095) at 0", "Insert MarkerAnnotation(1112) into SingleVariableDeclaration(1116) at 0", "Insert MarkerAnnotation(1148) into SingleVariableDeclaration(1152) at 0", "Insert MarkerAnnotation(1205) into SingleVariableDeclaration(1209) at 0", "Insert MarkerAnnotation(1247) into SingleVariableDeclaration(1251) at 0", "Insert MarkerAnnotation(1304) into SingleVariableDeclaration(1308) at 0", "Insert SimpleName: Nullable(2092) into MarkerAnnotation(2093) at 0", "Update TextElement: Add all children after 'node'.(2553) to Add all children after 'node'. ", "Insert SimpleName: Nullable(2554) into MarkerAnnotation(2555) at 0", "Insert SimpleName: Nullable(2560) into MarkerAnnotation(2561) at 0", "Update TextElement: Detach a child from its parent and siblings.(2666) to Detach a child from its parent and siblings. ", "Update TextElement: Detaches child from Node and replaces it with newChild.(2780) to Detaches child from Node and replaces it with newChild. ", "Update TextElement:  The replacement list if the property was removed, or(3098) to  The replacement list if the property was removed, or 'item' otherwise.", "Insert SimpleName: Nullable(3088) into MarkerAnnotation(3089) at 0", "Insert SimpleName: Nullable(3257) into MarkerAnnotation(3258) at 0", "Update TextElement: Returns the syntactical type specified on this node. Not to be confused(3360) to Returns the syntactical type specified on this node. Not to be confused with ", "Insert SimpleName: Nullable(3380) into MarkerAnnotation(3381) at 0", "Insert SimpleName: Nullable(3404) into MarkerAnnotation(3405) at 0", "Update TextElement: Linked list of properties. Since vast majority of nodes would have(4092) to Linked list of properties. Since vast majority of nodes would have no more then 2 properties,", "Update TextElement: fast lookup. If this does not holds, propListHead can be replaced(4094) to linked list saves memory and provides fast lookup. If this does not holds, propListHead can be", "Update TextElement: by UintMap.(4095) to replaced by UintMap.", "Insert SimpleName: Nullable(4193) into MarkerAnnotation(4194) at 0", "Update TextElement: Returns the source file associated with this input. May be null (4241) to Returns the source file associated with this input. ", "Update TextElement:  The Id of the CompilerInput associated with this Node.(4277) to  The Id of the CompilerInput associated with this Node. ", "Insert SimpleName: Nullable(4790) into MarkerAnnotation(4791) at 0", "Insert VariableDeclarationStatement(4889) into Block(4898) at 1", "Move ExpressionStatement(4872) into Block(4898) at 2", "Insert ReturnStatement(4897) into Block(4898) at 3", "Insert SimpleName: Nullable(4923) into MarkerAnnotation(4924) at 0", "Insert SimpleName: Nullable(5038) into MarkerAnnotation(5039) at 0", "Update TextElement: Checks if the subtree under this node is the same as another subtree.(5283) to Checks if the subtree under this node is the same as another subtree. Returns null if it's", "Update TextElement: Returns null if it's equal, or a message describing the differences.(5284) to equal, or a message describing the differences. Should be called with ", "Move TagElement: @code(5345) into TagElement(5328) at 2", "Insert TextElement:  as the(5323) into TagElement(5328) at 3", "Update TextElement:  as the \"expected\" node and(5288) to \"expected\" node and ", "Update TextElement: Checks if the subtree under this node is the same as another subtree.(5340) to Checks if the subtree under this node is the same as another subtree. Returns null if it's", "Update TextElement: Returns null if it's equal, or a message describing the differences.(5341) to equal, or a message describing the differences. Considers two nodes to be unequal if their", "Update TextElement: Should be called with (5343) to JSDocInfo doesn't match. Should be called with ", "Move TagElement: @code(5287) into TagElement(5387) at 4", "Update TextElement:  as the \"expected\" node and(5346) to  as the \"expected\" node and ", "Update TextElement: Compare this node to the given node recursively and return the first pair of nodes(5462) to Compare this node to the given node recursively and return the first pair of nodes that differs", "Update TextElement: that differs doing a preorder depth-first traversal. Package private for(5463) to doing a preorder depth-first traversal. Package private for testing. Returns null if the nodes", "Update TextElement: testing. Returns null if the nodes are equivalent. Should be called with (5464) to are equivalent. Should be called with ", "Update TextElement:  as the(5467) to  as the \"expected\" node and ", "Move TagElement: @code(5495) into TagElement(5511) at 5", "Update TextElement: \"expected\" node and (5468) to  as", "Update TextElement:  as the \"actual\" node.(5471) to the \"actual\" node.", "Update TextElement: Compare this node to the given node recursively and return the first pair of nodes(5488) to Compare this node to the given node recursively and return the first pair of nodes that differs", "Update TextElement: that differs doing a preorder depth-first traversal. Should be called with (5489) to doing a preorder depth-first traversal. Should be called with ", "Update TextElement:  as the(5492) to  as the \"expected\"", "Update TextElement: \"expected\" node and (5493) to node and ", "Move TagElement: @code(5470) into TagElement(5538) at 5", "Insert NullLiteral(5608) into ReturnStatement(5609) at 0", "Update TextElement: This function takes a set of GETPROP nodes and produces a string that is(6008) to This function takes a set of GETPROP nodes and produces a string that is each property", "Update TextElement: each property separated by dots. If the node ultimately under the left(6009) to separated by dots. If the node ultimately under the left sub-tree is not a simple name, this is", "Update TextElement: sub-tree is not a simple name, this is not a valid qualified name.(6010) to not a valid qualified name.", "Update TextElement:  a null if this is not a qualified name, or a dot-separated string(6012) to  a null if this is not a qualified name, or a dot-separated string of the name and", "Update TextElement: of the name and properties.(6013) to properties.", "Update TextElement: This function takes a set of GETPROP nodes and produces a string that is(6185) to This function takes a set of GETPROP nodes and produces a string that is each property", "Update TextElement: each property separated by dots. If the node ultimately under the left(6186) to separated by dots. If the node ultimately under the left sub-tree is not a simple name, this is", "Update TextElement: method returns the original name of each segment rather than the renamed(6188) to not a valid qualified name. This method returns the original name of each segment rather than", "Update TextElement: version.(6189) to the renamed version.", "Update TextElement:  a null if this is not a qualified name, or a dot-separated string(6191) to  a null if this is not a qualified name, or a dot-separated string of the name and", "Update TextElement: of the name and properties.(6192) to properties.", "Update TextElement: Returns whether a node matches a simple or a qualified name, such as(6498) to Returns whether a node matches a simple or a qualified name, such as <code>x</code> or <code>", "Update TextElement: <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.(6499) to a.b.c</code> or <code>this.a</code>.", "Update TextElement: Removes the first child of Node. Equivalent to:(6668) to Removes the first child of Node. Equivalent to: node.removeChild(node.getFirstChild());", "Update TextElement:  A Node that is the head of the list of children.(6697) to  A Node that is the head of the list of children. ", "Update TextElement: Returns the compiled inferred type on this node. Not to be confused(7384) to Returns the compiled inferred type on this node. Not to be confused with ", "Update TextElement:  which returns the syntactically(7389) to  which returns the syntactically specified type.", "Insert SimpleName: Nullable(7443) into MarkerAnnotation(7444) at 0", "Insert SimpleName: Nullable(7470) into MarkerAnnotation(7471) at 0", "Update TextElement:  associated with this node if any, and null otherwise.<p>(7451) to  associated with this node if any, and null otherwise.", "Update TextElement: NTI and OTI don't annotate the exact same AST nodes with types. (For example, OTI(7452) to <p>NTI and OTI don't annotate the exact same AST nodes with types. (For example, OTI doesn't", "Update TextElement: doesn't annotate dead code.) When OTI runs after NTI, the checks that use type(7453) to annotate dead code.) When OTI runs after NTI, the checks that use type information must only", "Update TextElement: information must only see the old types. They can call this method to avoid getting(7454) to see the old types. They can call this method to avoid getting a new type for an AST node where", "Update TextElement: Calls to this method are intended to be temporary. As we migrate passes to support(7456) to OTI did not add a type. Calls to this method are intended to be temporary. As we migrate passes", "Update TextElement: NTI natively, we will be replacing calls to this method with calls to getTypeI.(7457) to to support NTI natively, we will be replacing calls to this method with calls to getTypeI.", "Update TextElement:  if no JSDoc is attached to this(7482) to  if no JSDoc is attached to this node", "Update TextElement: Returns the set of ES5 directives for this node.(7726) to Returns the set of ES5 directives for this node. ", "Insert MarkerAnnotation(8686) into SingleVariableDeclaration(8690) at 0", "Insert SimpleName: Nullable(1013) into MarkerAnnotation(1014) at 0", "Insert SimpleName: Nullable(1063) into MarkerAnnotation(1064) at 0", "Insert SimpleName: Nullable(1111) into MarkerAnnotation(1112) at 0", "Insert SimpleName: Nullable(1147) into MarkerAnnotation(1148) at 0", "Insert SimpleName: Nullable(1204) into MarkerAnnotation(1205) at 0", "Insert SimpleName: Nullable(1246) into MarkerAnnotation(1247) at 0", "Insert SimpleName: Nullable(1303) into MarkerAnnotation(1304) at 0", "Move InfixExpression: ==(2444) into MethodInvocation(2447) at 2", "Update SimpleName: checkState(2585) to checkNotNull", "Insert QualifiedName: children.previous(2583) into MethodInvocation(2584) at 1", "Update SimpleName: checkState(2684) to checkNotNull", "Insert QualifiedName: child.previous(2677) into MethodInvocation(2678) at 1", "Update SimpleName: checkArgument(2928) to checkNotNull", "Insert QualifiedName: prevChild.next(2914) into MethodInvocation(2916) at 1", "Update StringLiteral: \"prev is doesn't have a sibling to replace.\"(2932) to \"prev doesn't have a sibling to replace.\"", "Update SimpleName: checkArgument(2970) to checkNotNull", "Insert SimpleName: target(2953) into MethodInvocation(2955) at 1", "Move SimpleType: Node(4078) into VariableDeclarationStatement(4889) at 0", "Insert VariableDeclarationFragment(4888) into VariableDeclarationStatement(4889) at 1", "Insert SimpleName: n(4896) into ReturnStatement(4897) at 0", "Insert MethodInvocation(5022) into ClassInstanceCreation(5023) at 1", "Update TextElement:  actual(5347) to actual", "Insert VariableDeclarationStatement(5598) into Block(5606) at 0", "Update SimpleName: firstChild(6122) to first", "Update SimpleName: checkState(6653) to checkNotNull", "Insert SimpleName: parent(6690) into MethodInvocation(6691) at 1", "Update SimpleName: checkArgument(6797) to checkNotNull", "Insert SimpleName: target(6834) into MethodInvocation(6836) at 1", "Update SimpleName: checkArgument(6849) to checkNotNull", "Insert SimpleName: target(6882) into MethodInvocation(6884) at 1", "Insert SimpleName: Nullable(8685) into MarkerAnnotation(8686) at 0", "Insert SimpleName: n(4886) into VariableDeclarationFragment(4888) at 0", "Insert SimpleName: current(4887) into VariableDeclarationFragment(4888) at 1", "Insert SimpleName: checkNotNull(5018) into MethodInvocation(5022) at 0", "Move MethodInvocation(4988) into MethodInvocation(5022) at 1", "Move SimpleType: NodeMismatch(5529) into VariableDeclarationStatement(5598) at 0", "Insert VariableDeclarationFragment(5597) into VariableDeclarationStatement(5598) at 1", "Insert SimpleName: res(5591) into VariableDeclarationFragment(5597) at 0", "Move MethodInvocation(5557) into VariableDeclarationFragment(5597) at 1", "Update SimpleName: firstChild(6126) to first", "Update SimpleName: firstChild(6143) to first", "Delete SimpleName: Preconditions(1327)", "Delete SimpleName: Preconditions(1335)", "Delete SimpleName: Preconditions(1343)", "Delete SimpleName: Preconditions(1396)", "Delete SimpleName: Preconditions(1404)", "Delete SimpleName: Preconditions(1412)", "Delete SimpleName: Preconditions(1420)", "Delete SimpleName: Preconditions(1428)", "Delete SimpleName: Preconditions(1436)", "Delete SimpleName: Preconditions(1505)", "Delete SimpleName: Preconditions(1512)", "Delete SimpleName: Preconditions(1519)", "Delete SimpleName: Preconditions(1526)", "Delete SimpleName: Preconditions(1533)", "Delete SimpleName: Preconditions(1540)", "Delete SimpleName: Preconditions(1547)", "Delete SimpleName: Preconditions(1554)", "Delete SimpleName: Preconditions(1561)", "Delete SimpleName: Preconditions(1644)", "Delete SimpleName: Preconditions(1651)", "Delete SimpleName: Preconditions(1658)", "Delete SimpleName: Preconditions(1665)", "Delete SimpleName: Preconditions(1672)", "Delete SimpleName: Preconditions(1679)", "Delete SimpleName: Preconditions(1686)", "Delete SimpleName: Preconditions(1693)", "Delete SimpleName: Preconditions(1700)", "Delete SimpleName: Preconditions(1707)", "Delete SimpleName: Preconditions(1714)", "Delete SimpleName: Preconditions(1721)", "Delete SimpleName: Preconditions(2206)", "Delete SimpleName: Preconditions(2213)", "Delete SimpleName: Preconditions(2220)", "Delete SimpleName: Preconditions(2276)", "Delete SimpleName: Preconditions(2283)", "Delete SimpleName: Preconditions(2290)", "Delete SimpleName: Preconditions(2360)", "Delete SimpleName: Preconditions(2437)", "Delete SimpleName: node(2439)", "Delete NullLiteral(2440)", "Delete InfixExpression: !=(2441)", "Delete InfixExpression: &&(2445)", "Delete SimpleName: Preconditions(2449)", "Delete SimpleName: Preconditions(2457)", "Delete SimpleName: Preconditions(2465)", "Delete SimpleName: Preconditions(2526)", "Delete SimpleName: Preconditions(2534)", "Delete SimpleName: Preconditions(2573)", "Delete SimpleName: Preconditions(2584)", "Delete QualifiedName: children.previous(2586)", "Delete NullLiteral(2587)", "Delete InfixExpression: !=(2588)", "Delete SimpleName: Preconditions(2613)", "Delete SimpleName: Preconditions(2676)", "Delete SimpleName: Preconditions(2683)", "Delete QualifiedName: child.previous(2685)", "Delete NullLiteral(2686)", "Delete InfixExpression: !=(2687)", "Delete SimpleName: Preconditions(2794)", "Delete SimpleName: Preconditions(2802)", "Delete SimpleName: Preconditions(2810)", "Delete SimpleName: Preconditions(2818)", "Delete SimpleName: Preconditions(2927)", "Delete QualifiedName: prevChild.next(2929)", "Delete NullLiteral(2930)", "Delete InfixExpression: !=(2931)", "Delete SimpleName: Preconditions(2969)", "Delete SimpleName: target(2971)", "Delete NullLiteral(2972)", "Delete InfixExpression: !=(2973)", "Delete SimpleName: Preconditions(3037)", "Delete TextElement: 'item' otherwise.(3099)", "Delete TextElement: with (3361)", "Delete TextElement: no more then 2 properties, linked list saves memory and provides(4093)", "Delete SimpleName: current(4864)", "Delete ReturnStatement(4865)", "Delete Block(4866)", "Delete Block(4873)", "Delete TryStatement(4874)", "Delete SimpleName: Preconditions(4944)", "Delete TextElement: Considers two nodes to be unequal if their JSDocInfo doesn't match.(5342)", "Delete SimpleName: res(5530)", "Delete NullLiteral(5531)", "Delete VariableDeclarationFragment(5532)", "Delete VariableDeclarationStatement(5533)", "Delete SimpleName: res(5552)", "Delete Assignment: =(5558)", "Delete ExpressionStatement(5559)", "Delete SimpleName: res(5569)", "Delete ReturnStatement(5570)", "Delete SimpleName: firstChild(6112)", "Delete SimpleName: getFirstChild(6113)", "Delete MethodInvocation(6114)", "Delete VariableDeclarationFragment(6115)", "Delete VariableDeclarationStatement(6116)", "Delete TextElement: sub-tree is not a simple name, this is not a valid qualified name. This(6187)", "Delete SimpleName: Preconditions(6652)", "Delete SimpleName: parent(6654)", "Delete NullLiteral(6655)", "Delete InfixExpression: !=(6656)", "Delete TextElement: node.removeChild(node.getFirstChild());(6669)", "Delete SimpleName: Preconditions(6796)", "Delete SimpleName: target(6798)", "Delete NullLiteral(6799)", "Delete InfixExpression: !=(6800)", "Delete SimpleName: Preconditions(6825)", "Delete SimpleName: Preconditions(6848)", "Delete SimpleName: target(6850)", "Delete NullLiteral(6851)", "Delete InfixExpression: !=(6852)", "Delete TextElement: with (7385)", "Delete TextElement: specified type.(7390)", "Delete TextElement: a new type for an AST node where OTI did not add a type.(7455)", "Delete TextElement: node(7483)", "Delete SimpleName: Preconditions(7679)", "Delete SimpleName: SuppressWarnings(7729)", "Delete StringLiteral: \"unchecked\"(7730)", "Delete SingleMemberAnnotation(7731)", "Delete SimpleName: Preconditions(8156)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}