{"application": "apache-zookeeper", "csha": "a4414196b310dbe62ee9e6e7e0c2a91fcd85c465", "files": [{"DataTree_cluster": {"actions": [{"root": "INS MethodDeclaration to TypeDeclaration: class at 69", "operations": ["INS NumberLiteral: 1 to InfixExpression: + at 1", "INS SimpleName: endsWith to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS Block to SynchronizedStatement at 1", "INS TagElement: @throws to Javadoc at 3", "INS SimpleType: DataNode to VariableDeclarationStatement at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS InfixExpression: - to MethodInvocation at 3", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleType: KeeperException.NoNodeException to ClassInstanceCreation at 0", "INS TextElement: not found. to TagElement at 3", "INS QualifiedName: KeeperException.NoNodeException to TagElement: @throws at 0", "INS IfStatement to Block at 0", "INS TagElement: @param to Javadoc at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: path to MethodInvocation at 0", "INS MethodDeclaration to TypeDeclaration: class at 69", "INS SimpleName: nodes to MethodInvocation at 0", "INS Block to MethodDeclaration at 7", "INS VariableDeclarationStatement to Block at 1", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: String to SingleVariableDeclaration at 0", "INS Assignment: = to ExpressionStatement at 0", "INS IfStatement to Block at 2", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: KeeperException.NoNodeException to MethodDeclaration at 6", "INS SimpleName: node to VariableDeclarationFragment at 0", "INS Block to IfStatement at 1", "INS QualifiedName: KeeperException.NoNodeException to SimpleType: KeeperException.NoNodeException at 0", "INS TextElement: If the znode for the specified path is found, then this method to TagElement at 0", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: path to Assignment: = at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS ExpressionStatement to Block at 1", "INS SynchronizedStatement to Block at 3", "INS NumberLiteral: 1 to InfixExpression: - at 1", "INS Modifier: public to MethodDeclaration at 1", "INS SimpleName: zxid to TagElement: @param at 0", "INS SimpleName: length to MethodInvocation at 1", "INS SimpleName: zxid to SingleVariableDeclaration at 1", "INS SimpleName: substring to MethodInvocation at 1", "INS ThrowStatement to Block at 0", "INS TextElement: increments the cversion and sets its pzxid to the zxid passed to TagElement at 1", "INS TagElement: @param to Javadoc at 1", "INS MethodInvocation to IfStatement at 0", "INS MethodInvocation to InfixExpression: + at 0", "INS PrimitiveType: void to MethodDeclaration at 2", "INS TextElement: in the second argument. A NoNodeException is thrown if the znode is to TagElement at 2", "INS QualifiedName: node.stat to MethodInvocation at 0", "INS SimpleName: setCversion to MethodInvocation at 1", "INS QualifiedName: node.stat to MethodInvocation at 0", "INS SimpleName: path to ClassInstanceCreation at 1", "INS TextElement: Value to be assigned to pzxid to TagElement: @param at 1", "INS QualifiedName: KeeperException.NoNodeException to SimpleType: KeeperException.NoNodeException at 0", "INS SimpleName: zxid to MethodInvocation at 2", "INS SimpleName: incrementCversion to MethodDeclaration at 3", "INS SimpleName: node to SynchronizedStatement at 0", "INS TextElement: Full path to the znode whose cversion needs to be incremented. to TagElement: @param at 1", "INS SimpleName: path to MethodInvocation at 0", "INS SimpleName: path to TagElement: @param at 0", "INS SimpleName: path to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS SimpleName: DataNode to SimpleType: DataNode at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: node to InfixExpression: == at 0", "INS NullLiteral to InfixExpression: == at 1", "INS SimpleName: path to MethodInvocation at 2", "INS QualifiedName: node.stat to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS StringLiteral: \"/\" to MethodInvocation at 2", "INS TextElement: A \"/\" at the end of the path is ignored. to TagElement: @param at 2", "INS TagElement to Javadoc at 0", "INS SimpleName: path to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: - at 0", "INS PrimitiveType: long to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: getCversion to MethodInvocation at 1", "INS SimpleName: setPzxid to MethodInvocation at 1", "INS Javadoc to MethodDeclaration at 0", "INS TextElement: If znode not found. to TagElement: @throws at 1"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 6"]}, {"root": "INS Block to CatchClause at 1", "operations": ["INS MethodInvocation to Assignment: = at 1", "INS ExpressionStatement to Block at 1", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: rc.err to Assignment: = at 0", "INS Block to CatchClause at 1", "INS SimpleName: intValue to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to SwitchStatement at 10", "operations": ["INS ExpressionStatement to SwitchStatement at 10", "INS QualifiedName: rc.path to Assignment: = at 0", "INS SimpleName: getPath to MethodInvocation at 1", "INS Assignment: = to ExpressionStatement at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: deleteTxn to MethodInvocation at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "UPDATE from warn to debug", "operations": ["UPD SimpleName: warn from warn to debug"]}, {"root": "UPDATE from \"Failed:\" to \"Failed: \"", "operations": ["UPD StringLiteral: \"Failed:\" from \"Failed:\" to \"Failed: \""]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 0"]}, {"root": "DEL Block", "operations": ["DEL InfixExpression: ||", "DEL QualifiedName: Code.NODEEXISTS", "DEL SimpleName: code", "DEL InfixExpression: !=", "DEL Block", "DEL Block", "DEL ParenthesizedExpression", "DEL SimpleName: e", "DEL InfixExpression: !=", "DEL InfixExpression: &&", "DEL SimpleName: initialized", "DEL IfStatement", "DEL MethodInvocation", "DEL QualifiedName: Code.NONODE"]}]}}, {"DataTree_diff": {"operations": ["Insert MethodDeclaration(4642) into TypeDeclaration: class(4643) at 69", "Insert Javadoc(4574) into MethodDeclaration(4642) at 0", "Insert Modifier: public(4575) into MethodDeclaration(4642) at 1", "Insert PrimitiveType: void(4576) into MethodDeclaration(4642) at 2", "Insert SimpleName: incrementCversion(4577) into MethodDeclaration(4642) at 3", "Insert SingleVariableDeclaration(4581) into MethodDeclaration(4642) at 4", "Insert SingleVariableDeclaration(4584) into MethodDeclaration(4642) at 5", "Insert SimpleType: KeeperException.NoNodeException(4586) into MethodDeclaration(4642) at 6", "Insert Block(4641) into MethodDeclaration(4642) at 7", "Insert TagElement(4563) into Javadoc(4574) at 0", "Insert TagElement: @param(4567) into Javadoc(4574) at 1", "Insert TagElement: @param(4570) into Javadoc(4574) at 2", "Insert TagElement: @throws(4573) into Javadoc(4574) at 3", "Insert SimpleType: String(4579) into SingleVariableDeclaration(4581) at 0", "Insert SimpleName: path(4580) into SingleVariableDeclaration(4581) at 1", "Insert PrimitiveType: long(4582) into SingleVariableDeclaration(4584) at 0", "Insert SimpleName: zxid(4583) into SingleVariableDeclaration(4584) at 1", "Insert QualifiedName: KeeperException.NoNodeException(4585) into SimpleType: KeeperException.NoNodeException(4586) at 0", "Insert IfStatement(4604) into Block(4641) at 0", "Insert VariableDeclarationStatement(4613) into Block(4641) at 1", "Insert IfStatement(4623) into Block(4641) at 2", "Insert SynchronizedStatement(4640) into Block(4641) at 3", "Insert TextElement: If the znode for the specified path is found, then this method(4559) into TagElement(4563) at 0", "Insert TextElement: increments the cversion and sets its pzxid to the zxid passed(4560) into TagElement(4563) at 1", "Insert TextElement: in the second argument. A NoNodeException is thrown if the znode is(4561) into TagElement(4563) at 2", "Insert TextElement: not found.(4562) into TagElement(4563) at 3", "Insert SimpleName: path(4564) into TagElement: @param(4567) at 0", "Insert TextElement: Full path to the znode whose cversion needs to be incremented.(4565) into TagElement: @param(4567) at 1", "Insert TextElement: A \"/\" at the end of the path is ignored.(4566) into TagElement: @param(4567) at 2", "Insert SimpleName: zxid(4568) into TagElement: @param(4570) at 0", "Insert TextElement: Value to be assigned to pzxid(4569) into TagElement: @param(4570) at 1", "Insert QualifiedName: KeeperException.NoNodeException(4571) into TagElement: @throws(4573) at 0", "Insert TextElement: If znode not found.(4572) into TagElement: @throws(4573) at 1", "Insert SimpleName: String(4578) into SimpleType: String(4579) at 0", "Insert MethodInvocation(4590) into IfStatement(4604) at 0", "Insert Block(4603) into IfStatement(4604) at 1", "Insert SimpleType: DataNode(4606) into VariableDeclarationStatement(4613) at 0", "Insert VariableDeclarationFragment(4612) into VariableDeclarationStatement(4613) at 1", "Insert InfixExpression: ==(4616) into IfStatement(4623) at 0", "Insert Block(4622) into IfStatement(4623) at 1", "Insert SimpleName: node(4624) into SynchronizedStatement(4640) at 0", "Insert Block(4639) into SynchronizedStatement(4640) at 1", "Move ExpressionStatement(2870) into SwitchStatement(3017) at 6", "Insert Block(3039) into CatchClause(3040) at 1", "Insert SimpleName: path(4587) into MethodInvocation(4590) at 0", "Insert SimpleName: endsWith(4588) into MethodInvocation(4590) at 1", "Insert StringLiteral: \"/\"(4589) into MethodInvocation(4590) at 2", "Insert ExpressionStatement(4602) into Block(4603) at 0", "Insert SimpleName: DataNode(4605) into SimpleType: DataNode(4606) at 0", "Insert SimpleName: node(4607) into VariableDeclarationFragment(4612) at 0", "Insert MethodInvocation(4611) into VariableDeclarationFragment(4612) at 1", "Insert SimpleName: node(4614) into InfixExpression: ==(4616) at 0", "Insert NullLiteral(4615) into InfixExpression: ==(4616) at 1", "Insert ThrowStatement(4621) into Block(4622) at 0", "Insert ExpressionStatement(4633) into Block(4639) at 0", "Insert ExpressionStatement(4638) into Block(4639) at 1", "Insert ExpressionStatement(2902) into SwitchStatement(3017) at 10", "Move ExpressionStatement(3038) into Block(3039) at 0", "Insert ExpressionStatement(3038) into Block(3039) at 1", "Insert Assignment: =(4601) into ExpressionStatement(4602) at 0", "Insert SimpleName: nodes(4608) into MethodInvocation(4611) at 0", "Insert SimpleName: get(4609) into MethodInvocation(4611) at 1", "Insert SimpleName: path(4610) into MethodInvocation(4611) at 2", "Insert ClassInstanceCreation(4620) into ThrowStatement(4621) at 0", "Insert MethodInvocation(4632) into ExpressionStatement(4633) at 0", "Insert MethodInvocation(4637) into ExpressionStatement(4638) at 0", "Insert Assignment: =(2901) into ExpressionStatement(2902) at 0", "Insert Assignment: =(3037) into ExpressionStatement(3038) at 0", "Insert SimpleName: path(4591) into Assignment: =(4601) at 0", "Insert MethodInvocation(4600) into Assignment: =(4601) at 1", "Insert SimpleType: KeeperException.NoNodeException(4618) into ClassInstanceCreation(4620) at 0", "Insert SimpleName: path(4619) into ClassInstanceCreation(4620) at 1", "Insert QualifiedName: node.stat(4625) into MethodInvocation(4632) at 0", "Insert SimpleName: setCversion(4626) into MethodInvocation(4632) at 1", "Insert InfixExpression: +(4631) into MethodInvocation(4632) at 2", "Insert QualifiedName: node.stat(4634) into MethodInvocation(4637) at 0", "Insert SimpleName: setPzxid(4635) into MethodInvocation(4637) at 1", "Insert SimpleName: zxid(4636) into MethodInvocation(4637) at 2", "Insert QualifiedName: rc.path(2897) into Assignment: =(2901) at 0", "Insert MethodInvocation(2900) into Assignment: =(2901) at 1", "Update SimpleName: warn(3032) to debug", "Insert QualifiedName: rc.err(3031) into Assignment: =(3037) at 0", "Insert MethodInvocation(3036) into Assignment: =(3037) at 1", "Insert SimpleName: path(4592) into MethodInvocation(4600) at 0", "Insert SimpleName: substring(4593) into MethodInvocation(4600) at 1", "Insert NumberLiteral: 0(4594) into MethodInvocation(4600) at 2", "Insert InfixExpression: -(4599) into MethodInvocation(4600) at 3", "Insert QualifiedName: KeeperException.NoNodeException(4617) into SimpleType: KeeperException.NoNodeException(4618) at 0", "Insert MethodInvocation(4629) into InfixExpression: +(4631) at 0", "Insert NumberLiteral: 1(4630) into InfixExpression: +(4631) at 1", "Insert SimpleName: deleteTxn(2898) into MethodInvocation(2900) at 0", "Insert SimpleName: getPath(2899) into MethodInvocation(2900) at 1", "Update StringLiteral: \"Failed:\"(3033) to \"Failed: \"", "Move MethodInvocation(3025) into MethodInvocation(3036) at 0", "Insert SimpleName: intValue(3035) into MethodInvocation(3036) at 1", "Insert MethodInvocation(4597) into InfixExpression: -(4599) at 0", "Insert NumberLiteral: 1(4598) into InfixExpression: -(4599) at 1", "Insert QualifiedName: node.stat(4627) into MethodInvocation(4629) at 0", "Insert SimpleName: getCversion(4628) into MethodInvocation(4629) at 1", "Insert SimpleName: path(4595) into MethodInvocation(4597) at 0", "Insert SimpleName: length(4596) into MethodInvocation(4597) at 1", "Delete SimpleName: initialized(3017)", "Delete SimpleName: e(3018)", "Delete SimpleName: code(3019)", "Delete MethodInvocation(3020)", "Delete QualifiedName: Code.NONODE(3021)", "Delete InfixExpression: !=(3022)", "Delete QualifiedName: Code.NODEEXISTS(3026)", "Delete InfixExpression: !=(3027)", "Delete InfixExpression: &&(3028)", "Delete ParenthesizedExpression(3029)", "Delete InfixExpression: ||(3030)", "Delete Block(3039)", "Delete IfStatement(3040)", "Delete Block(3041)"]}}, {"FileTxnSnapLog_cluster": {"actions": [{"root": "INS ImportDeclaration to CompilationUnit at 16", "operations": ["INS QualifiedName: org.apache.zookeeper.KeeperException.Code to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 16"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: org.apache.zookeeper.KeeperException.NoNodeException to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 18", "operations": ["INS QualifiedName: org.apache.zookeeper.server.DataTree.ProcessTxnResult to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 18"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS ImportDeclaration to CompilationUnit at 19", "INS QualifiedName: org.apache.zookeeper.KeeperException.NoNodeException to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 20", "operations": ["INS QualifiedName: org.apache.zookeeper.KeeperException to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 20"]}, {"root": "UPDATE from private to public", "operations": ["UPD Modifier: private from private to public"]}, {"root": "INS SimpleType: KeeperException.NoNodeException to MethodDeclaration at 8", "operations": ["INS QualifiedName: KeeperException.NoNodeException to SimpleType: KeeperException.NoNodeException at 0", "INS SimpleType: KeeperException.NoNodeException to MethodDeclaration at 8"]}, {"root": "INS Block to MethodDeclaration at 9", "operations": ["INS SimpleName: intValue to MethodInvocation at 1", "INS SimpleName: substring to MethodInvocation at 1", "INS IfStatement to Block at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS QualifiedName: rc.err to InfixExpression: + at 3", "INS Block to TryStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS ThrowStatement to Block at 1", "INS MethodInvocation to InfixExpression: == at 1", "INS SimpleName: lastSlash to VariableDeclarationFragment at 0", "INS InfixExpression: == to InfixExpression: && at 1", "INS QualifiedName: rc.path to MethodInvocation at 0", "INS SimpleType: KeeperException.NoNodeException to SingleVariableDeclaration at 0", "INS MethodInvocation to InfixExpression: == at 1", "INS QualifiedName: Code.OK to MethodInvocation at 0", "INS SimpleName: e to MethodInvocation at 3", "INS QualifiedName: OpCode.delete to InfixExpression: == at 1", "INS SimpleName: hdr to MethodInvocation at 0", "INS QualifiedName: rc.err to InfixExpression: + at 5", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: intValue to MethodInvocation at 1", "INS SimpleName: lastSlash to MethodInvocation at 3", "INS StringLiteral: \"Ignoring processTxn failure hdr: \" to InfixExpression: + at 0", "INS ParenthesizedExpression to InfixExpression: || at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS StringLiteral: \"Failed Txn: \" to InfixExpression: + at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS SimpleName: parentName to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS SimpleName: getZxid to MethodInvocation at 1", "INS SimpleName: getType to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: hdr to MethodInvocation at 0", "INS SimpleName: intValue to MethodInvocation at 1", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS SimpleName: LOG to MethodInvocation at 0", "INS MethodInvocation to MethodInvocation at 3", "INS SimpleName: error to MethodInvocation at 1", "INS QualifiedName: rc.path to MethodInvocation at 0", "INS CharacterLiteral: '/' to MethodInvocation at 2", "INS InfixExpression: != to IfStatement at 0", "INS Block to MethodDeclaration at 9", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS SimpleName: e to ThrowStatement at 0", "INS MethodInvocation to InfixExpression: != at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS QualifiedName: rc.path to InfixExpression: + at 3", "INS TryStatement to Block at 3", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: getType to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: dt to MethodInvocation at 0", "INS Block to CatchClause at 1", "INS InfixExpression: == to InfixExpression: && at 1", "INS SingleVariableDeclaration to CatchClause at 0", "INS SimpleName: incrementCversion to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS VariableDeclarationStatement to Block at 1", "INS InfixExpression: + to MethodInvocation at 2", "INS SimpleName: parentName to InfixExpression: + at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: hdr to MethodInvocation at 0", "INS SimpleName: hdr to MethodInvocation at 0", "INS SimpleName: hdr to MethodInvocation at 0", "INS SimpleType: ProcessTxnResult to VariableDeclarationStatement at 0", "INS MethodInvocation to InfixExpression: == at 0", "INS StringLiteral: \"Failed to increment parent cversion for: \" to InfixExpression: + at 0", "INS IfStatement to IfStatement at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: rc to VariableDeclarationFragment at 0", "INS InfixExpression: == to InfixExpression: && at 0", "INS NumberLiteral: 0 to MethodInvocation at 2", "INS QualifiedName: rc.err to InfixExpression: == at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS ExpressionStatement to Block at 0", "INS QualifiedName: KeeperException.NoNodeException to SimpleType: KeeperException.NoNodeException at 0", "INS QualifiedName: Code.NONODE to MethodInvocation at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to InfixExpression: + at 1", "INS SimpleName: LOG to MethodInvocation at 0", "INS QualifiedName: OpCode.create to InfixExpression: == at 1", "INS QualifiedName: rc.err to InfixExpression: != at 0", "INS SimpleName: getType to MethodInvocation at 1", "INS InfixExpression: == to InfixExpression: && at 0", "INS VariableDeclarationStatement to Block at 2", "INS ExpressionStatement to Block at 0", "INS QualifiedName: Code.NODEEXISTS to MethodInvocation at 0", "INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \" path:\" to InfixExpression: + at 2", "INS SimpleName: parentName to VariableDeclarationFragment at 0", "INS SimpleName: ProcessTxnResult to SimpleType: ProcessTxnResult at 0", "INS StringLiteral: \" : error: \" to InfixExpression: + at 2", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS QualifiedName: rc.err to InfixExpression: == at 0", "INS SimpleName: debug to MethodInvocation at 1", "INS StringLiteral: \" err: \" to InfixExpression: + at 4", "INS InfixExpression: || to IfStatement at 0", "INS SimpleName: lastIndexOf to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV SwitchStatement to Block at 1"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 4", "MOV ExpressionStatement to SwitchStatement at 9", "MOV ExpressionStatement to SwitchStatement at 12"]}, {"root": "INS TryStatement to Block at 3", "operations": ["INS Block to CatchClause at 1", "INS SimpleName: getType to MethodInvocation at 1", "INS StringLiteral: \"Failed to process transaction type: \" to InfixExpression: + at 0", "INS MethodInvocation to InfixExpression: + at 3", "INS ClassInstanceCreation to ThrowStatement at 0", "INS SimpleName: e to MethodInvocation at 0", "INS SingleVariableDeclaration to CatchClause at 0", "INS QualifiedName: KeeperException.NoNodeException to SimpleType: KeeperException.NoNodeException at 0", "INS SimpleName: IOException to SimpleType: IOException at 0", "INS SimpleName: e to SingleVariableDeclaration at 1", "INS ThrowStatement to Block at 0", "INS InfixExpression: + to ClassInstanceCreation at 1", "INS TryStatement to Block at 3", "INS MethodInvocation to InfixExpression: + at 1", "INS StringLiteral: \" error: \" to InfixExpression: + at 2", "INS SimpleType: KeeperException.NoNodeException to SingleVariableDeclaration at 0", "INS Block to TryStatement at 0", "INS SimpleType: IOException to ClassInstanceCreation at 0", "INS SimpleName: getMessage to MethodInvocation at 1", "INS CatchClause to TryStatement at 1", "INS SimpleName: hdr to MethodInvocation at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: rc to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS SimpleName: rc to Assignment: = at 0", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "INS Assignment: = to ExpressionStatement at 0", "operations": ["INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: rc to Assignment: = at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "DEL Block", "operations": ["DEL Block"]}]}}, {"FileTxnSnapLog_diff": {"operations": ["Insert ImportDeclaration(48) into CompilationUnit(1012) at 16", "Insert ImportDeclaration(50) into CompilationUnit(1012) at 17", "Insert ImportDeclaration(52) into CompilationUnit(1012) at 18", "Insert ImportDeclaration(54) into CompilationUnit(1012) at 19", "Insert ImportDeclaration(56) into CompilationUnit(1012) at 20", "Insert QualifiedName: org.apache.zookeeper.KeeperException.Code(47) into ImportDeclaration(48) at 0", "Insert QualifiedName: org.apache.zookeeper.KeeperException.NoNodeException(49) into ImportDeclaration(50) at 0", "Insert QualifiedName: org.apache.zookeeper.server.DataTree.ProcessTxnResult(51) into ImportDeclaration(52) at 0", "Insert QualifiedName: org.apache.zookeeper.KeeperException.NoNodeException(53) into ImportDeclaration(54) at 0", "Insert QualifiedName: org.apache.zookeeper.KeeperException(55) into ImportDeclaration(56) at 0", "Update Modifier: private(442) to public", "Insert SimpleType: KeeperException.NoNodeException(498) into MethodDeclaration(709) at 8", "Insert Block(708) into MethodDeclaration(709) at 9", "Insert QualifiedName: KeeperException.NoNodeException(497) into SimpleType: KeeperException.NoNodeException(498) at 0", "Insert VariableDeclarationStatement(503) into Block(708) at 0", "Move SwitchStatement(561) into Block(708) at 1", "Move ExpressionStatement(517) into SwitchStatement(605) at 12", "Move ExpressionStatement(552) into SwitchStatement(605) at 4", "Move ExpressionStatement(560) into SwitchStatement(605) at 9", "Insert IfStatement(707) into Block(708) at 2", "Insert SimpleType: ProcessTxnResult(500) into VariableDeclarationStatement(503) at 0", "Insert VariableDeclarationFragment(502) into VariableDeclarationStatement(503) at 1", "Insert InfixExpression: ||(630) into IfStatement(707) at 0", "Insert Block(688) into IfStatement(707) at 1", "Insert IfStatement(706) into IfStatement(707) at 2", "Insert TryStatement(437) into Block(452) at 3", "Insert SimpleName: ProcessTxnResult(499) into SimpleType: ProcessTxnResult(500) at 0", "Insert SimpleName: rc(501) into VariableDeclarationFragment(502) at 0", "Insert Assignment: =(556) into ExpressionStatement(557) at 0", "Insert Assignment: =(593) into ExpressionStatement(594) at 0", "Insert Assignment: =(603) into ExpressionStatement(604) at 0", "Insert ParenthesizedExpression(617) into InfixExpression: ||(630) at 0", "Insert ParenthesizedExpression(629) into InfixExpression: ||(630) at 1", "Insert ExpressionStatement(643) into Block(688) at 0", "Insert VariableDeclarationStatement(651) into Block(688) at 1", "Insert VariableDeclarationStatement(661) into Block(688) at 2", "Insert TryStatement(687) into Block(688) at 3", "Insert InfixExpression: !=(693) into IfStatement(706) at 0", "Insert Block(705) into IfStatement(706) at 1", "Insert Block(417) into TryStatement(437) at 0", "Insert CatchClause(436) into TryStatement(437) at 1", "Insert SimpleName: rc(550) into Assignment: =(556) at 0", "Move MethodInvocation(551) into Assignment: =(556) at 1", "Insert SimpleName: rc(587) into Assignment: =(593) at 0", "Move MethodInvocation(559) into Assignment: =(593) at 1", "Insert SimpleName: rc(597) into Assignment: =(603) at 0", "Move MethodInvocation(516) into Assignment: =(603) at 1", "Insert InfixExpression: &&(616) into ParenthesizedExpression(617) at 0", "Insert InfixExpression: &&(628) into ParenthesizedExpression(629) at 0", "Insert MethodInvocation(642) into ExpressionStatement(643) at 0", "Insert PrimitiveType: int(644) into VariableDeclarationStatement(651) at 0", "Insert VariableDeclarationFragment(650) into VariableDeclarationStatement(651) at 1", "Insert SimpleType: String(653) into VariableDeclarationStatement(661) at 0", "Insert VariableDeclarationFragment(660) into VariableDeclarationStatement(661) at 1", "Insert Block(670) into TryStatement(687) at 0", "Insert CatchClause(686) into TryStatement(687) at 1", "Insert QualifiedName: rc.err(689) into InfixExpression: !=(693) at 0", "Insert MethodInvocation(692) into InfixExpression: !=(693) at 1", "Insert ExpressionStatement(704) into Block(705) at 0", "Move ExpressionStatement(406) into Block(417) at 0", "Insert SingleVariableDeclaration(421) into CatchClause(436) at 0", "Insert Block(435) into CatchClause(436) at 1", "Insert InfixExpression: ==(610) into InfixExpression: &&(616) at 0", "Insert InfixExpression: ==(615) into InfixExpression: &&(616) at 1", "Insert InfixExpression: ==(622) into InfixExpression: &&(628) at 0", "Insert InfixExpression: ==(627) into InfixExpression: &&(628) at 1", "Insert SimpleName: LOG(631) into MethodInvocation(642) at 0", "Insert SimpleName: debug(632) into MethodInvocation(642) at 1", "Insert InfixExpression: +(641) into MethodInvocation(642) at 2", "Insert SimpleName: lastSlash(645) into VariableDeclarationFragment(650) at 0", "Insert MethodInvocation(649) into VariableDeclarationFragment(650) at 1", "Insert SimpleName: String(652) into SimpleType: String(653) at 0", "Insert SimpleName: parentName(654) into VariableDeclarationFragment(660) at 0", "Insert MethodInvocation(659) into VariableDeclarationFragment(660) at 1", "Insert ExpressionStatement(669) into Block(670) at 0", "Insert SingleVariableDeclaration(674) into CatchClause(686) at 0", "Insert Block(685) into CatchClause(686) at 1", "Insert QualifiedName: Code.OK(690) into MethodInvocation(692) at 0", "Insert SimpleName: intValue(691) into MethodInvocation(692) at 1", "Insert MethodInvocation(703) into ExpressionStatement(704) at 0", "Insert SimpleType: KeeperException.NoNodeException(419) into SingleVariableDeclaration(421) at 0", "Insert SimpleName: e(420) into SingleVariableDeclaration(421) at 1", "Insert ThrowStatement(434) into Block(435) at 0", "Insert MethodInvocation(608) into InfixExpression: ==(610) at 0", "Insert QualifiedName: OpCode.delete(609) into InfixExpression: ==(610) at 1", "Insert QualifiedName: rc.err(611) into InfixExpression: ==(615) at 0", "Insert MethodInvocation(614) into InfixExpression: ==(615) at 1", "Insert MethodInvocation(620) into InfixExpression: ==(622) at 0", "Insert QualifiedName: OpCode.create(621) into InfixExpression: ==(622) at 1", "Insert QualifiedName: rc.err(623) into InfixExpression: ==(627) at 0", "Insert MethodInvocation(626) into InfixExpression: ==(627) at 1", "Insert StringLiteral: \"Failed Txn: \"(633) into InfixExpression: +(641) at 0", "Insert MethodInvocation(636) into InfixExpression: +(641) at 1", "Insert StringLiteral: \" path:\"(637) into InfixExpression: +(641) at 2", "Insert QualifiedName: rc.path(638) into InfixExpression: +(641) at 3", "Insert StringLiteral: \" err: \"(639) into InfixExpression: +(641) at 4", "Insert QualifiedName: rc.err(640) into InfixExpression: +(641) at 5", "Insert QualifiedName: rc.path(646) into MethodInvocation(649) at 0", "Insert SimpleName: lastIndexOf(647) into MethodInvocation(649) at 1", "Insert CharacterLiteral: '/'(648) into MethodInvocation(649) at 2", "Insert QualifiedName: rc.path(655) into MethodInvocation(659) at 0", "Insert SimpleName: substring(656) into MethodInvocation(659) at 1", "Insert NumberLiteral: 0(657) into MethodInvocation(659) at 2", "Insert SimpleName: lastSlash(658) into MethodInvocation(659) at 3", "Insert MethodInvocation(668) into ExpressionStatement(669) at 0", "Insert SimpleType: KeeperException.NoNodeException(672) into SingleVariableDeclaration(674) at 0", "Insert SimpleName: e(673) into SingleVariableDeclaration(674) at 1", "Insert ExpressionStatement(682) into Block(685) at 0", "Insert ThrowStatement(684) into Block(685) at 1", "Insert SimpleName: LOG(694) into MethodInvocation(703) at 0", "Insert SimpleName: debug(695) into MethodInvocation(703) at 1", "Insert InfixExpression: +(702) into MethodInvocation(703) at 2", "Insert QualifiedName: KeeperException.NoNodeException(418) into SimpleType: KeeperException.NoNodeException(419) at 0", "Insert ClassInstanceCreation(433) into ThrowStatement(434) at 0", "Insert SimpleName: hdr(606) into MethodInvocation(608) at 0", "Insert SimpleName: getType(607) into MethodInvocation(608) at 1", "Insert QualifiedName: Code.NONODE(612) into MethodInvocation(614) at 0", "Insert SimpleName: intValue(613) into MethodInvocation(614) at 1", "Insert SimpleName: hdr(618) into MethodInvocation(620) at 0", "Insert SimpleName: getType(619) into MethodInvocation(620) at 1", "Insert QualifiedName: Code.NODEEXISTS(624) into MethodInvocation(626) at 0", "Insert SimpleName: intValue(625) into MethodInvocation(626) at 1", "Insert SimpleName: hdr(634) into MethodInvocation(636) at 0", "Insert SimpleName: getType(635) into MethodInvocation(636) at 1", "Insert SimpleName: dt(662) into MethodInvocation(668) at 0", "Insert SimpleName: incrementCversion(663) into MethodInvocation(668) at 1", "Insert SimpleName: parentName(664) into MethodInvocation(668) at 2", "Insert MethodInvocation(667) into MethodInvocation(668) at 3", "Insert QualifiedName: KeeperException.NoNodeException(671) into SimpleType: KeeperException.NoNodeException(672) at 0", "Insert MethodInvocation(681) into ExpressionStatement(682) at 0", "Insert SimpleName: e(683) into ThrowStatement(684) at 0", "Insert StringLiteral: \"Ignoring processTxn failure hdr: \"(696) into InfixExpression: +(702) at 0", "Insert MethodInvocation(699) into InfixExpression: +(702) at 1", "Insert StringLiteral: \" : error: \"(700) into InfixExpression: +(702) at 2", "Insert QualifiedName: rc.err(701) into InfixExpression: +(702) at 3", "Insert SimpleType: IOException(423) into ClassInstanceCreation(433) at 0", "Insert InfixExpression: +(432) into ClassInstanceCreation(433) at 1", "Insert SimpleName: hdr(665) into MethodInvocation(667) at 0", "Insert SimpleName: getZxid(666) into MethodInvocation(667) at 1", "Insert SimpleName: LOG(675) into MethodInvocation(681) at 0", "Insert SimpleName: error(676) into MethodInvocation(681) at 1", "Insert InfixExpression: +(679) into MethodInvocation(681) at 2", "Insert SimpleName: e(680) into MethodInvocation(681) at 3", "Insert SimpleName: hdr(697) into MethodInvocation(699) at 0", "Insert SimpleName: getType(698) into MethodInvocation(699) at 1", "Insert SimpleName: IOException(422) into SimpleType: IOException(423) at 0", "Insert StringLiteral: \"Failed to process transaction type: \"(424) into InfixExpression: +(432) at 0", "Insert MethodInvocation(427) into InfixExpression: +(432) at 1", "Insert StringLiteral: \" error: \"(428) into InfixExpression: +(432) at 2", "Insert MethodInvocation(431) into InfixExpression: +(432) at 3", "Insert StringLiteral: \"Failed to increment parent cversion for: \"(677) into InfixExpression: +(679) at 0", "Insert SimpleName: parentName(678) into InfixExpression: +(679) at 1", "Insert SimpleName: hdr(425) into MethodInvocation(427) at 0", "Insert SimpleName: getType(426) into MethodInvocation(427) at 1", "Insert SimpleName: e(429) into MethodInvocation(431) at 0", "Insert SimpleName: getMessage(430) into MethodInvocation(431) at 1", "Delete Block(562)"]}}], "commit_stats": [{"total_files": 5, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}