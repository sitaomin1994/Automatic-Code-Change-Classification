{"application": "apache-commons-codec", "csha": "7e8c20bd1b0593c3496a168be573aed40609a433", "files": [{"QuotedPrintableCodec_cluster": {"actions": [{"root": "INS Javadoc to TypeDeclaration: class at 0", "operations": ["INS TagElement to Javadoc at 0", "INS Javadoc to TypeDeclaration: class at 0"]}, {"root": "INS Modifier: public to TypeDeclaration: class at 1", "operations": ["INS Modifier: public to TypeDeclaration: class at 1"]}, {"root": "INS SimpleName: QuotedPrintableCodec to TypeDeclaration: class at 2", "operations": ["INS SimpleName: QuotedPrintableCodec to TypeDeclaration: class at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 15", "operations": ["INS SimpleName: CR to VariableDeclarationFragment at 0", "INS NumberLiteral: 13 to VariableDeclarationFragment at 1", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: static to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS Modifier: final to FieldDeclaration at 2", "INS PrimitiveType: byte to FieldDeclaration at 3", "INS FieldDeclaration to TypeDeclaration: class at 15"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 16", "operations": ["INS PrimitiveType: byte to FieldDeclaration at 3", "INS VariableDeclarationFragment to FieldDeclaration at 4", "INS NumberLiteral: 10 to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 1", "INS SimpleName: LF to VariableDeclarationFragment at 0", "INS FieldDeclaration to TypeDeclaration: class at 16", "INS Modifier: private to FieldDeclaration at 0", "INS Modifier: final to FieldDeclaration at 2"]}, {"root": "INS FieldDeclaration to TypeDeclaration: class at 17", "operations": ["INS PrimitiveType: int to FieldDeclaration at 4", "INS Modifier: final to FieldDeclaration at 3", "INS NumberLiteral: 73 to VariableDeclarationFragment at 1", "INS Modifier: static to FieldDeclaration at 2", "INS TagElement to Javadoc at 0", "INS SimpleName: SAFE_LENGTH to VariableDeclarationFragment at 0", "INS Modifier: private to FieldDeclaration at 1", "INS VariableDeclarationFragment to FieldDeclaration at 5", "INS Javadoc to FieldDeclaration at 0", "INS FieldDeclaration to TypeDeclaration: class at 17"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 22", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 6", "INS Javadoc to MethodDeclaration at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS TagElement to Javadoc at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrimitiveType: int to MethodDeclaration at 3", "INS Modifier: static to MethodDeclaration at 2", "INS TagElement: @param to Javadoc at 2", "INS VariableDeclarationStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS Dimension to ArrayType: byte[] at 1", "INS PrimitiveType: byte to ArrayType: byte[] at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: index to SingleVariableDeclaration at 2", "INS SimpleName: index to ArrayAccess at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: b to ReturnStatement at 0", "INS ArrayAccess to VariableDeclarationFragment at 1", "INS SimpleName: b to VariableDeclarationFragment at 0", "INS TextElement: the byte array to TagElement: @param at 1", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: getUnsignedOctet to MethodDeclaration at 4", "INS SimpleName: bytes to ArrayAccess at 0", "INS SimpleName: bytes to TagElement: @param at 0", "INS TagElement: @return to Javadoc at 3", "INS Modifier: final to SingleVariableDeclaration at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to TypeDeclaration: class at 22", "INS Modifier: private to MethodDeclaration at 1", "INS ArrayType: byte[] to SingleVariableDeclaration at 1", "INS SimpleName: bytes to SingleVariableDeclaration at 2", "INS Block to MethodDeclaration at 7", "INS SimpleName: index to TagElement: @param at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 23", "operations": ["INS IfStatement to Block at 0", "INS TagElement: @param to Javadoc at 2", "INS SimpleType: ByteArrayOutputStream to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: buffer to SingleVariableDeclaration at 2", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS ExpressionStatement to Block at 0", "INS Block to MethodDeclaration at 8", "INS PrimitiveType: boolean to SingleVariableDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 23", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: encode to SingleVariableDeclaration at 2", "INS SimpleName: b to MethodInvocation at 2", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: encode to IfStatement at 0", "INS NumberLiteral: 1 to ReturnStatement at 0", "INS TagElement: @param to Javadoc at 3", "INS Modifier: final to SingleVariableDeclaration at 0", "INS PrimitiveType: int to MethodDeclaration at 3", "INS Modifier: private to MethodDeclaration at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: encodeByte to MethodDeclaration at 4", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: b to TagElement: @param at 0", "INS Modifier: static to MethodDeclaration at 2", "INS ReturnStatement to Block at 1", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: b to SingleVariableDeclaration at 2", "INS SimpleName: ByteArrayOutputStream to SimpleType: ByteArrayOutputStream at 0", "INS SimpleName: encode to TagElement: @param at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: buffer to TagElement: @param at 0", "INS Block to IfStatement at 2", "INS SimpleName: buffer to MethodInvocation at 0", "INS Javadoc to MethodDeclaration at 0", "INS Modifier: final to SingleVariableDeclaration at 0", "INS TextElement: byte to write to TagElement: @param at 1", "INS TagElement to Javadoc at 0", "INS TagElement: @return to Javadoc at 4"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 24", "operations": ["INS TagElement to Javadoc at 0", "INS PrimitiveType: int to SingleVariableDeclaration at 1", "INS SimpleName: TAB to InfixExpression: == at 1", "INS Modifier: static to MethodDeclaration at 2", "INS TextElement: byte to be checked to TagElement: @param at 1", "INS Modifier: final to SingleVariableDeclaration at 0", "INS SimpleName: b to SingleVariableDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 24", "INS SimpleName: b to TagElement: @param at 0", "INS InfixExpression: == to InfixExpression: || at 1", "INS Javadoc to MethodDeclaration at 0", "INS SimpleName: SPACE to InfixExpression: == at 1", "INS PrimitiveType: boolean to MethodDeclaration at 3", "INS InfixExpression: == to InfixExpression: || at 0", "INS TagElement: @return to Javadoc at 2", "INS InfixExpression: || to ReturnStatement at 0", "INS Block to MethodDeclaration at 6", "INS TagElement: @param to Javadoc at 1", "INS SimpleName: b to InfixExpression: == at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: b to InfixExpression: == at 0", "INS TextElement:  <code>true</code> if the byte is either a space or tab character to TagElement: @return at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: isWhitespace to MethodDeclaration at 4", "INS Modifier: private to MethodDeclaration at 1", "INS TextElement: Checks whether the given byte is whitespace. to TagElement at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @see to Javadoc at 1", "MOV TagElement: @since to Javadoc at 3", "MOV TagElement: @author to Javadoc at 2", "MOV TagElement: @version to Javadoc at 4"]}, {"root": "UPDATE from void to int", "operations": ["UPD PrimitiveType: void from void to int"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement: unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the to TagElement at 6", "MOV TextElement: for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec. to TagElement: @param at 1", "MOV TextElement: </p> to TagElement at 10", "MOV TextElement: gateway. to TagElement at 9", "MOV TextElement: <p> to TagElement at 0", "MOV TextElement: to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping to TagElement at 8", "MOV TextElement: Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>. to TagElement at 1", "MOV TextElement: Note: to TagElement at 0", "MOV TextElement: <p> to TagElement: @param at 1", "MOV TextElement: <p> to TagElement at 0", "MOV TextElement: </p> to TagElement at 2", "MOV TextElement: printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are to TagElement at 5", "MOV TextElement: data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable to TagElement at 7", "MOV TextElement: </p> to TagElement at 1", "MOV TextElement: </p> to TagElement: @return at 0", "MOV TextElement: Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet because the complete quoted-printable spec to TagElement: @return at 0", "MOV TextElement: <p> to TagElement at 3", "MOV TextElement: The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to to TagElement at 4", "MOV TextElement: does not lend itself well into the byte[] oriented codec framework. Complete the codec once the streamable codec to TagElement at 0", "MOV TextElement: framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy to TagElement: @param at 1"]}, {"root": "INS TagElement: @return to Javadoc at 3", "operations": ["INS TagElement: @return to Javadoc at 3", "INS TextElement:  The number of bytes written to the <code>buffer</code> to TagElement: @return at 0"]}, {"root": "INS ReturnStatement to Block at 5", "operations": ["INS NumberLiteral: 3 to ReturnStatement at 0", "INS ReturnStatement to Block at 5"]}, {"root": "MOVE from Block", "operations": ["MOV IfStatement to Block at 1", "MOV VariableDeclarationStatement to Block at 5", "MOV IfStatement to Block at 8"]}, {"root": "INS VariableDeclarationStatement to Block at 3", "operations": ["INS NumberLiteral: 1 to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: pos to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 3", "INS PrimitiveType: int to VariableDeclarationStatement at 0"]}, {"root": "INS ForStatement to Block at 4", "operations": ["INS InfixExpression: < to ForStatement at 1", "INS InfixExpression: - to InfixExpression: < at 1", "INS MethodInvocation to InfixExpression: || at 1", "INS Block to ForStatement at 3", "INS IfStatement to Block at 1", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS PrimitiveType: int to VariableDeclarationStatement at 0", "INS PrefixExpression: ! to MethodInvocation at 2", "INS NumberLiteral: 3 to InfixExpression: - at 1", "INS SimpleName: b to MethodInvocation at 1", "INS SimpleName: pos to Assignment: += at 0", "INS SimpleName: b to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: LF to MethodInvocation at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: encodeByte to MethodInvocation at 0", "INS SimpleName: b to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS MethodInvocation to Assignment: += at 1", "INS SimpleName: pos to Assignment: = at 0", "INS SimpleName: buffer to MethodInvocation at 3", "INS SimpleName: b to MethodInvocation at 1", "INS ForStatement to Block at 4", "INS SimpleName: b to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS Assignment: += to ExpressionStatement at 0", "INS PostfixExpression: ++ to ForStatement at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS ExpressionStatement to Block at 3", "INS SimpleName: buffer to MethodInvocation at 0", "INS SimpleName: SAFE_LENGTH to InfixExpression: < at 1", "INS SimpleName: buffer to MethodInvocation at 0", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: bytes to MethodInvocation at 2", "INS QualifiedName: bytes.length to InfixExpression: - at 0", "INS SimpleName: buffer to MethodInvocation at 3", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: getUnsignedOctet to MethodInvocation at 0", "INS VariableDeclarationExpression to ForStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: get to MethodInvocation at 1", "INS NumberLiteral: 1 to Assignment: = at 1", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS Block to IfStatement at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: ESCAPE_CHAR to MethodInvocation at 2", "INS ExpressionStatement to Block at 4", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: pos to InfixExpression: < at 0", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: encodeByte to MethodInvocation at 0", "INS SimpleName: i to InfixExpression: < at 0", "INS NumberLiteral: 0 to VariableDeclarationFragment at 1", "INS SimpleName: CR to MethodInvocation at 2", "INS SimpleName: printable to MethodInvocation at 0", "INS SimpleName: buffer to MethodInvocation at 0", "INS SimpleName: isWhitespace to MethodInvocation at 0", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: i to MethodInvocation at 1", "INS InfixExpression: || to MethodInvocation at 2", "INS InfixExpression: < to IfStatement at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS Block to IfStatement at 2", "INS PrefixExpression: ! to InfixExpression: || at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 6", "operations": ["INS VariableDeclarationStatement to Block at 6", "INS SimpleName: encode to VariableDeclarationFragment at 0", "INS InfixExpression: > to InfixExpression: && at 1", "INS SimpleName: printable to MethodInvocation at 0", "INS NumberLiteral: 5 to InfixExpression: - at 1", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS MethodInvocation to InfixExpression: && at 0", "INS InfixExpression: || to VariableDeclarationFragment at 1", "INS MethodInvocation to PrefixExpression: ! at 0", "INS SimpleName: get to MethodInvocation at 1", "INS InfixExpression: - to InfixExpression: > at 1", "INS PrefixExpression: ! to InfixExpression: || at 0", "INS SimpleName: pos to InfixExpression: > at 0", "INS SimpleName: SAFE_LENGTH to InfixExpression: - at 0", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS SimpleName: isWhitespace to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: b to MethodInvocation at 2", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: b to MethodInvocation at 1"]}, {"root": "INS ExpressionStatement to Block at 7", "operations": ["INS ExpressionStatement to Block at 7", "INS SimpleName: pos to Assignment: += at 0", "INS SimpleName: b to MethodInvocation at 1", "INS SimpleName: buffer to MethodInvocation at 3", "INS SimpleName: encodeByte to MethodInvocation at 0", "INS Assignment: += to ExpressionStatement at 0", "INS SimpleName: encode to MethodInvocation at 2", "INS MethodInvocation to Assignment: += at 1"]}, {"root": "INS ForStatement to Block at 9", "operations": ["INS Block to ForStatement at 3", "INS ExpressionStatement to Block at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: getUnsignedOctet to MethodInvocation at 0", "INS InfixExpression: > to InfixExpression: && at 0", "INS SimpleName: encode to Assignment: = at 0", "INS InfixExpression: < to ForStatement at 1", "INS InfixExpression: && to ParenthesizedExpression at 0", "INS ParenthesizedExpression to InfixExpression: || at 1", "INS InfixExpression: - to InfixExpression: > at 1", "INS ExpressionStatement to Block at 0", "INS NumberLiteral: 2 to InfixExpression: - at 1", "INS Assignment: = to ExpressionStatement at 0", "INS QualifiedName: bytes.length to InfixExpression: - at 0", "INS NumberLiteral: 2 to InfixExpression: - at 1", "INS SimpleName: b to MethodInvocation at 1", "INS SimpleName: printable to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: isWhitespace to MethodInvocation at 0", "INS ForStatement to Block at 9", "INS VariableDeclarationExpression to ForStatement at 0", "INS MethodInvocation to PrefixExpression: ! at 0", "INS QualifiedName: bytes.length to InfixExpression: - at 0", "INS InfixExpression: - to VariableDeclarationFragment at 1", "INS SimpleName: b to MethodInvocation at 1", "INS PostfixExpression: ++ to ForStatement at 2", "INS InfixExpression: || to Assignment: = at 1", "INS SimpleName: i to InfixExpression: > at 0", "INS SimpleName: buffer to MethodInvocation at 3", "INS ExpressionStatement to Block at 2", "INS SimpleName: b to Assignment: = at 0", "INS SimpleName: encode to MethodInvocation at 2", "INS PrefixExpression: ! to InfixExpression: || at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: b to MethodInvocation at 2", "INS SimpleName: i to InfixExpression: < at 0", "INS SimpleName: i to PostfixExpression: ++ at 0", "INS SimpleName: encodeByte to MethodInvocation at 0", "INS QualifiedName: bytes.length to InfixExpression: < at 1", "INS SimpleName: bytes to MethodInvocation at 2", "INS SimpleName: i to VariableDeclarationFragment at 0", "INS PrimitiveType: int to VariableDeclarationExpression at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: i to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationExpression at 1", "INS Assignment: = to ExpressionStatement at 0"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1", "MOV TagElement: @throws to Javadoc at 3", "MOV TagElement: @return to Javadoc at 2"]}, {"root": "MOVE from Javadoc", "operations": ["MOV TagElement: @param to Javadoc at 1", "MOV TagElement: @throws to Javadoc at 3", "MOV TagElement: @return to Javadoc at 2"]}, {"root": "UPDATE from <p> to Safe line length for quoted printable encoded text. ", "operations": ["UPD TextElement: <p> from <p> to Safe line length for quoted printable encoded text. "]}, {"root": "UPDATE from Note: to Return the byte at position <code>index</code> of the byte array and", "operations": ["UPD TextElement: Note: from Note: to Return the byte at position <code>index</code> of the byte array and"]}, {"root": "UPDATE from </p> to make sure it is unsigned.", "operations": ["UPD TextElement: </p> from </p> to make sure it is unsigned."]}, {"root": "UPDATE from <p> to position in the array", "operations": ["UPD TextElement: <p> from <p> to position in the array"]}, {"root": "UPDATE from Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet because the complete quoted-printable spec to  the unsigned octet at position <code>index</code> from the array", "operations": ["UPD TextElement: Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet because the complete quoted-printable spec from Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet because the complete quoted-printable spec to  the unsigned octet at position <code>index</code> from the array"]}, {"root": "UPDATE from does not lend itself well into the byte[] oriented codec framework. Complete the codec once the streamable codec to Write a byte to the buffer.", "operations": ["UPD TextElement: does not lend itself well into the byte[] oriented codec framework. Complete the codec once the streamable codec from does not lend itself well into the byte[] oriented codec framework. Complete the codec once the streamable codec to Write a byte to the buffer."]}, {"root": "UPDATE from framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy to indicates whether the octet shall be encoded", "operations": ["UPD TextElement: framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy from framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy to indicates whether the octet shall be encoded"]}, {"root": "UPDATE from for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec. to the buffer to write to", "operations": ["UPD TextElement: for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec. from for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec. to the buffer to write to"]}, {"root": "UPDATE from </p> to  the number of bytes that have been written to the buffer", "operations": ["UPD TextElement: </p> from </p> to  the number of bytes that have been written to the buffer"]}, {"root": "MOVE from PrefixExpression: !", "operations": ["MOV MethodInvocation to PrefixExpression: ! at 0", "MOV Block to IfStatement at 1", "MOV Block to IfStatement at 1"]}, {"root": "UPDATE from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)", "operations": ["UPD TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)", "UPD TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)"]}, {"root": "UPDATE from RFC 1521 and is suitable for encoding binary data and unformatted text. to as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.", "operations": ["UPD TextElement: RFC 1521 and is suitable for encoding binary data and unformatted text. from RFC 1521 and is suitable for encoding binary data and unformatted text. to as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.", "UPD TextElement: RFC 1521 and is suitable for encoding binary data and unformatted text. from RFC 1521 and is suitable for encoding binary data and unformatted text. to as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.", "UPD TextElement: RFC 1521 and is suitable for encoding binary data and unformatted text. from RFC 1521 and is suitable for encoding binary data and unformatted text. to as defined in RFC 1521 and is suitable for encoding binary data and unformatted text."]}, {"root": "INS InfixExpression: > to IfStatement at 0", "operations": ["INS NumberLiteral: 2 to InfixExpression: - at 1", "INS InfixExpression: - to InfixExpression: > at 1", "INS SimpleName: pos to InfixExpression: > at 0", "INS SimpleName: SAFE_LENGTH to InfixExpression: - at 0", "INS InfixExpression: > to IfStatement at 0"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS ExpressionStatement to Block at 2", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: buffer to MethodInvocation at 0", "INS SimpleName: ESCAPE_CHAR to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: buffer to MethodInvocation at 0", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: write to MethodInvocation at 1", "INS SimpleName: write to MethodInvocation at 1", "INS MethodInvocation to ExpressionStatement at 0", "INS SimpleName: buffer to MethodInvocation at 0", "INS ExpressionStatement to Block at 0", "INS ExpressionStatement to Block at 1", "INS SimpleName: LF to MethodInvocation at 2", "INS SimpleName: CR to MethodInvocation at 2"]}, {"root": "UPDATE from Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted to Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are", "operations": ["UPD TextElement: Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted from Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted to Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are"]}, {"root": "UPDATE from back to their original representation. to converted back to their original representation.", "operations": ["UPD TextElement: back to their original representation. from back to their original representation. to converted back to their original representation."]}, {"root": "UPDATE from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #5) as", "operations": ["UPD TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #5) as"]}, {"root": "UPDATE from RFC 1521. to defined in RFC 1521.", "operations": ["UPD TextElement: RFC 1521. from RFC 1521. to defined in RFC 1521."]}, {"root": "UPDATE from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)", "operations": ["UPD TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)", "UPD TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)", "UPD TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in from This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in to This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)"]}, {"root": "UPDATE from RFC 1521. to as defined in RFC 1521.", "operations": ["UPD TextElement: RFC 1521. from RFC 1521. to as defined in RFC 1521."]}, {"root": "UPDATE from RFC 1521 and is suitable for encoding binary data. to as defined in RFC 1521 and is suitable for encoding binary data.", "operations": ["UPD TextElement: RFC 1521 and is suitable for encoding binary data. from RFC 1521 and is suitable for encoding binary data. to as defined in RFC 1521 and is suitable for encoding binary data."]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0"]}, {"root": "INS MethodInvocation to VariableDeclarationFragment at 1", "operations": ["INS InfixExpression: - to MethodInvocation at 1", "INS QualifiedName: bytes.length to InfixExpression: - at 0", "INS NumberLiteral: 3 to InfixExpression: - at 1", "INS SimpleName: getUnsignedOctet to MethodInvocation at 0", "INS SimpleName: bytes to MethodInvocation at 2", "INS MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "INS Modifier: final to VariableDeclarationStatement at 0", "operations": ["INS Modifier: final to VariableDeclarationStatement at 0"]}, {"root": "INS IfStatement to IfStatement at 2", "operations": ["INS SimpleName: b to InfixExpression: != at 0", "INS SimpleName: LF to InfixExpression: != at 1", "INS SimpleName: CR to InfixExpression: != at 1", "INS IfStatement to IfStatement at 2", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: b to InfixExpression: != at 0", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: != to InfixExpression: && at 1"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS ContinueStatement to Block at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS InfixExpression: == to IfStatement at 0", "INS SimpleName: CR to InfixExpression: == at 1"]}, {"root": "MOVE from InfixExpression: ==", "operations": ["MOV ArrayAccess to InfixExpression: == at 0"]}, {"root": "INS ArrayAccess to MethodInvocation at 2", "operations": ["INS SimpleName: i to ArrayAccess at 1", "INS SimpleName: bytes to ArrayAccess at 0", "INS ArrayAccess to MethodInvocation at 2"]}, {"root": "DEL Javadoc", "operations": ["DEL TagElement", "DEL Javadoc"]}, {"root": "DEL Modifier: public", "operations": ["DEL Modifier: public"]}, {"root": "DEL SimpleName: QuotedPrintableCodec", "operations": ["DEL SimpleName: QuotedPrintableCodec"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL ExpressionStatement"]}, {"root": "DEL SimpleName: c", "operations": ["DEL SimpleName: c"]}, {"root": "DEL EnhancedForStatement", "operations": ["DEL SingleVariableDeclaration", "DEL PrimitiveType: byte", "DEL Block", "DEL SimpleName: c", "DEL SimpleName: bytes", "DEL EnhancedForStatement"]}, {"root": "DEL Block", "operations": ["DEL Block", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: write", "DEL SimpleName: buffer", "DEL SimpleName: b"]}]}}, {"QuotedPrintableCodec_diff": {"operations": [" *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>(45) to TextElement:  <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:", " *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>(36)", "Insert Javadoc(44) into TypeDeclaration: class(1240) at 0", "Insert Modifier: public(45) into TypeDeclaration: class(1240) at 1", "Insert SimpleName: QuotedPrintableCodec(46) into TypeDeclaration: class(1240) at 2", "Insert FieldDeclaration(111) into TypeDeclaration: class(1240) at 12", "Insert FieldDeclaration(119) into TypeDeclaration: class(1240) at 13", "Insert FieldDeclaration(130) into TypeDeclaration: class(1240) at 14", "Insert MethodDeclaration(328) into TypeDeclaration: class(1240) at 19", "Insert MethodDeclaration(377) into TypeDeclaration: class(1240) at 20", "Insert MethodDeclaration(403) into TypeDeclaration: class(1240) at 21", "Insert TagElement(35) into Javadoc(44) at 0", "Move TagElement: @see(46) into Javadoc(44) at 1", "Move TagElement: @author(48) into Javadoc(44) at 2", "Move TagElement: @since(50) into Javadoc(44) at 3", "Move TagElement: @version(52) into Javadoc(44) at 4", "Insert Modifier: private(104) into FieldDeclaration(111) at 0", "Insert Modifier: static(105) into FieldDeclaration(111) at 1", "Insert Modifier: final(106) into FieldDeclaration(111) at 2", "Insert PrimitiveType: byte(107) into FieldDeclaration(111) at 3", "Insert VariableDeclarationFragment(110) into FieldDeclaration(111) at 4", "Insert Modifier: private(112) into FieldDeclaration(119) at 0", "Insert Modifier: static(113) into FieldDeclaration(119) at 1", "Insert Modifier: final(114) into FieldDeclaration(119) at 2", "Insert PrimitiveType: byte(115) into FieldDeclaration(119) at 3", "Insert VariableDeclarationFragment(118) into FieldDeclaration(119) at 4", "Insert Javadoc(122) into FieldDeclaration(130) at 0", "Insert Modifier: private(123) into FieldDeclaration(130) at 1", "Insert Modifier: static(124) into FieldDeclaration(130) at 2", "Insert Modifier: final(125) into FieldDeclaration(130) at 3", "Insert PrimitiveType: int(126) into FieldDeclaration(130) at 4", "Insert VariableDeclarationFragment(129) into FieldDeclaration(130) at 5", "Update PrimitiveType: void(202) to int", "Insert Javadoc(292) into MethodDeclaration(328) at 0", "Insert Modifier: private(293) into MethodDeclaration(328) at 1", "Insert Modifier: static(294) into MethodDeclaration(328) at 2", "Insert PrimitiveType: int(295) into MethodDeclaration(328) at 3", "Insert SimpleName: getUnsignedOctet(296) into MethodDeclaration(328) at 4", "Insert SingleVariableDeclaration(300) into MethodDeclaration(328) at 5", "Insert SingleVariableDeclaration(306) into MethodDeclaration(328) at 6", "Insert Block(327) into MethodDeclaration(328) at 7", "Insert Javadoc(342) into MethodDeclaration(377) at 0", "Insert Modifier: private(343) into MethodDeclaration(377) at 1", "Insert Modifier: static(344) into MethodDeclaration(377) at 2", "Insert PrimitiveType: int(345) into MethodDeclaration(377) at 3", "Insert SimpleName: encodeByte(346) into MethodDeclaration(377) at 4", "Insert SingleVariableDeclaration(350) into MethodDeclaration(377) at 5", "Insert SingleVariableDeclaration(354) into MethodDeclaration(377) at 6", "Insert SingleVariableDeclaration(359) into MethodDeclaration(377) at 7", "Insert Block(376) into MethodDeclaration(377) at 8", "Insert Javadoc(385) into MethodDeclaration(403) at 0", "Insert Modifier: private(386) into MethodDeclaration(403) at 1", "Insert Modifier: static(387) into MethodDeclaration(403) at 2", "Insert PrimitiveType: boolean(388) into MethodDeclaration(403) at 3", "Insert SimpleName: isWhitespace(389) into MethodDeclaration(403) at 4", "Insert SingleVariableDeclaration(393) into MethodDeclaration(403) at 5", "Insert Block(402) into MethodDeclaration(403) at 6", "Move TextElement: <p>(24) into TagElement(35) at 0", "Move TextElement: Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.(25) into TagElement(35) at 1", "Move TextElement: </p>(26) into TagElement(35) at 2", "Move TextElement: <p>(27) into TagElement(35) at 3", "Move TextElement: The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to(28) into TagElement(35) at 4", "Move TextElement: printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are(29) into TagElement(35) at 5", "Move TextElement: unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the(30) into TagElement(35) at 6", "Move TextElement: data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable(31) into TagElement(35) at 7", "Move TextElement: to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping(32) into TagElement(35) at 8", "Move TextElement: gateway.(33) into TagElement(35) at 9", "Move TextElement: </p>(34) into TagElement(35) at 10", "Insert SimpleName: CR(108) into VariableDeclarationFragment(110) at 0", "Insert NumberLiteral: 13(109) into VariableDeclarationFragment(110) at 1", "Insert SimpleName: LF(116) into VariableDeclarationFragment(118) at 0", "Insert NumberLiteral: 10(117) into VariableDeclarationFragment(118) at 1", "Insert TagElement(121) into Javadoc(122) at 0", "Insert SimpleName: SAFE_LENGTH(127) into VariableDeclarationFragment(129) at 0", "Insert NumberLiteral: 73(128) into VariableDeclarationFragment(129) at 1", "Insert TagElement: @return(217) into Javadoc(218) at 3", "Insert ReturnStatement(278) into Block(279) at 5", "Insert TagElement(283) into Javadoc(292) at 0", "Insert TagElement: @param(286) into Javadoc(292) at 1", "Insert TagElement: @param(289) into Javadoc(292) at 2", "Insert TagElement: @return(291) into Javadoc(292) at 3", "Insert Modifier: final(297) into SingleVariableDeclaration(300) at 0", "Insert PrimitiveType: int(298) into SingleVariableDeclaration(300) at 1", "Insert SimpleName: index(299) into SingleVariableDeclaration(300) at 2", "Insert Modifier: final(301) into SingleVariableDeclaration(306) at 0", "Insert ArrayType: byte[](304) into SingleVariableDeclaration(306) at 1", "Insert SimpleName: bytes(305) into SingleVariableDeclaration(306) at 2", "Insert VariableDeclarationStatement(313) into Block(327) at 0", "Move IfStatement(333) into Block(327) at 1", "Insert ReturnStatement(326) into Block(327) at 2", "Insert TagElement(330) into Javadoc(342) at 0", "Insert TagElement: @param(333) into Javadoc(342) at 1", "Insert TagElement: @param(336) into Javadoc(342) at 2", "Insert TagElement: @param(339) into Javadoc(342) at 3", "Insert TagElement: @return(341) into Javadoc(342) at 4", "Insert Modifier: final(347) into SingleVariableDeclaration(350) at 0", "Insert PrimitiveType: int(348) into SingleVariableDeclaration(350) at 1", "Insert SimpleName: b(349) into SingleVariableDeclaration(350) at 2", "Insert Modifier: final(351) into SingleVariableDeclaration(354) at 0", "Insert PrimitiveType: boolean(352) into SingleVariableDeclaration(354) at 1", "Insert SimpleName: encode(353) into SingleVariableDeclaration(354) at 2", "Insert Modifier: final(355) into SingleVariableDeclaration(359) at 0", "Insert SimpleType: ByteArrayOutputStream(357) into SingleVariableDeclaration(359) at 1", "Insert SimpleName: buffer(358) into SingleVariableDeclaration(359) at 2", "Insert IfStatement(375) into Block(376) at 0", "Insert TagElement(379) into Javadoc(385) at 0", "Insert TagElement: @param(382) into Javadoc(385) at 1", "Insert TagElement: @return(384) into Javadoc(385) at 2", "Insert Modifier: final(390) into SingleVariableDeclaration(393) at 0", "Insert PrimitiveType: int(391) into SingleVariableDeclaration(393) at 1", "Insert SimpleName: b(392) into SingleVariableDeclaration(393) at 2", "Insert ReturnStatement(401) into Block(402) at 0", "Insert VariableDeclarationStatement(463) into Block(647) at 3", "Insert ForStatement(536) into Block(647) at 4", "Move VariableDeclarationStatement(322) into Block(647) at 5", "Insert VariableDeclarationStatement(566) into Block(647) at 6", "Insert ExpressionStatement(574) into Block(647) at 7", "Move IfStatement(350) into Block(647) at 8", "Insert ForStatement(642) into Block(647) at 9", "Move TagElement: @param(527) into Javadoc(664) at 1", "Move TagElement: @return(529) into Javadoc(664) at 2", "Move TagElement: @throws(532) into Javadoc(664) at 3", "Move TagElement: @param(368) into Javadoc(840) at 1", "Move TagElement: @return(370) into Javadoc(840) at 2", "Move TagElement: @throws(373) into Javadoc(840) at 3", "Update TextElement: <p>(35) to Safe line length for quoted printable encoded text. ", "Move TextElement: <p>(35) into TagElement(121) at 0", "Insert TextElement:  The number of bytes written to the <code>buffer</code>(216) into TagElement: @return(217) at 0", "Insert NumberLiteral: 3(277) into ReturnStatement(278) at 0", "Update TextElement: Note:(36) to Return the byte at position <code>index</code> of the byte array and", "Move TextElement: Note:(36) into TagElement(283) at 0", "Update TextElement: </p>(37) to make sure it is unsigned.", "Move TextElement: </p>(37) into TagElement(283) at 1", "Insert SimpleName: index(284) into TagElement: @param(286) at 0", "Update TextElement: <p>(38) to position in the array", "Move TextElement: <p>(38) into TagElement: @param(286) at 1", "Insert SimpleName: bytes(287) into TagElement: @param(289) at 0", "Insert TextElement: the byte array(288) into TagElement: @param(289) at 1", "Update TextElement: Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet because the complete quoted-printable spec(39) to  the unsigned octet at position <code>index</code> from the array", "Move TextElement: Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet because the complete quoted-printable spec(39) into TagElement: @return(291) at 0", "Insert PrimitiveType: byte(302) into ArrayType: byte[](304) at 0", "Insert Dimension(303) into ArrayType: byte[](304) at 1", "Insert PrimitiveType: int(307) into VariableDeclarationStatement(313) at 0", "Insert VariableDeclarationFragment(312) into VariableDeclarationStatement(313) at 1", "Insert SimpleName: b(325) into ReturnStatement(326) at 0", "Update TextElement: does not lend itself well into the byte[] oriented codec framework. Complete the codec once the streamable codec(40) to Write a byte to the buffer.", "Move TextElement: does not lend itself well into the byte[] oriented codec framework. Complete the codec once the streamable codec(40) into TagElement(330) at 0", "Insert SimpleName: b(331) into TagElement: @param(333) at 0", "Insert TextElement: byte to write(332) into TagElement: @param(333) at 1", "Insert SimpleName: encode(334) into TagElement: @param(336) at 0", "Update TextElement: framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy(41) to indicates whether the octet shall be encoded", "Move TextElement: framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy(41) into TagElement: @param(336) at 1", "Insert SimpleName: buffer(337) into TagElement: @param(339) at 0", "Update TextElement: for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec.(42) to the buffer to write to", "Move TextElement: for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec.(42) into TagElement: @param(339) at 1", "Update TextElement: </p>(43) to  the number of bytes that have been written to the buffer", "Move TextElement: </p>(43) into TagElement: @return(341) at 0", "Insert SimpleName: ByteArrayOutputStream(356) into SimpleType: ByteArrayOutputStream(357) at 0", "Insert SimpleName: encode(360) into IfStatement(375) at 0", "Move Block(349) into IfStatement(375) at 1", "Insert Block(374) into IfStatement(375) at 2", "Insert TextElement: Checks whether the given byte is whitespace.(378) into TagElement(379) at 0", "Insert SimpleName: b(380) into TagElement: @param(382) at 0", "Insert TextElement: byte to be checked(381) into TagElement: @param(382) at 1", "Insert TextElement:  <code>true</code> if the byte is either a space or tab character(383) into TagElement: @return(384) at 0", "Insert InfixExpression: ||(400) into ReturnStatement(401) at 0", "Update TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in(261) to This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)", "Update TextElement: RFC 1521 and is suitable for encoding binary data and unformatted text.(262) to as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.", "Insert PrimitiveType: int(459) into VariableDeclarationStatement(463) at 0", "Insert VariableDeclarationFragment(462) into VariableDeclarationStatement(463) at 1", "Insert VariableDeclarationExpression(468) into ForStatement(536) at 0", "Insert InfixExpression: <(473) into ForStatement(536) at 1", "Insert PostfixExpression: ++(475) into ForStatement(536) at 2", "Insert Block(535) into ForStatement(536) at 3", "Insert PrimitiveType: boolean(547) into VariableDeclarationStatement(566) at 0", "Insert VariableDeclarationFragment(565) into VariableDeclarationStatement(566) at 1", "Insert Assignment: +=(573) into ExpressionStatement(574) at 0", "Insert InfixExpression: >(579) into IfStatement(596) at 0", "Insert Block(595) into IfStatement(596) at 1", "Insert VariableDeclarationExpression(603) into ForStatement(642) at 0", "Insert InfixExpression: <(606) into ForStatement(642) at 1", "Insert PostfixExpression: ++(608) into ForStatement(642) at 2", "Insert Block(641) into ForStatement(642) at 3", "Update TextElement: Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted(359) to Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are", "Update TextElement: back to their original representation.(360) to converted back to their original representation.", "Update TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in(362) to This function fully implements the quoted-printable encoding specification (rule #1 through rule #5) as", "Update TextElement: RFC 1521.(363) to defined in RFC 1521.", "Update TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in(491) to This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)", "Update TextElement: RFC 1521 and is suitable for encoding binary data and unformatted text.(492) to as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.", "Update TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in(521) to This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)", "Update TextElement: RFC 1521.(522) to as defined in RFC 1521.", "Update TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in(554) to This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)", "Update TextElement: RFC 1521 and is suitable for encoding binary data.(555) to as defined in RFC 1521 and is suitable for encoding binary data.", "Update TextElement: This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in(884) to This function fully implements the quoted-printable encoding specification (rule #1 through rule #2)", "Update TextElement: RFC 1521 and is suitable for encoding binary data and unformatted text.(885) to as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.", "Insert SimpleName: b(308) into VariableDeclarationFragment(312) at 0", "Insert ArrayAccess(311) into VariableDeclarationFragment(312) at 1", "Insert ReturnStatement(365) into Block(366) at 0", "Insert ExpressionStatement(371) into Block(374) at 0", "Insert ReturnStatement(373) into Block(374) at 1", "Insert InfixExpression: ==(396) into InfixExpression: ||(400) at 0", "Insert InfixExpression: ==(399) into InfixExpression: ||(400) at 1", "Insert SimpleName: pos(460) into VariableDeclarationFragment(462) at 0", "Insert NumberLiteral: 1(461) into VariableDeclarationFragment(462) at 1", "Insert PrimitiveType: int(464) into VariableDeclarationExpression(468) at 0", "Insert VariableDeclarationFragment(467) into VariableDeclarationExpression(468) at 1", "Insert SimpleName: i(469) into InfixExpression: <(473) at 0", "Insert InfixExpression: -(472) into InfixExpression: <(473) at 1", "Insert SimpleName: i(474) into PostfixExpression: ++(475) at 0", "Insert VariableDeclarationStatement(483) into Block(535) at 0", "Insert IfStatement(534) into Block(535) at 1", "Insert MethodInvocation(544) into VariableDeclarationFragment(545) at 1", "Insert SimpleName: encode(548) into VariableDeclarationFragment(565) at 0", "Insert InfixExpression: ||(564) into VariableDeclarationFragment(565) at 1", "Insert SimpleName: pos(567) into Assignment: +=(573) at 0", "Insert MethodInvocation(572) into Assignment: +=(573) at 1", "Insert SimpleName: pos(575) into InfixExpression: >(579) at 0", "Insert InfixExpression: -(578) into InfixExpression: >(579) at 1", "Insert ExpressionStatement(584) into Block(595) at 0", "Insert ExpressionStatement(589) into Block(595) at 1", "Insert ExpressionStatement(594) into Block(595) at 2", "Insert PrimitiveType: int(597) into VariableDeclarationExpression(603) at 0", "Insert VariableDeclarationFragment(602) into VariableDeclarationExpression(603) at 1", "Insert SimpleName: i(604) into InfixExpression: <(606) at 0", "Insert QualifiedName: bytes.length(605) into InfixExpression: <(606) at 1", "Insert SimpleName: i(607) into PostfixExpression: ++(608) at 0", "Insert ExpressionStatement(615) into Block(641) at 0", "Insert ExpressionStatement(634) into Block(641) at 1", "Insert ExpressionStatement(640) into Block(641) at 2", "Insert SimpleName: bytes(309) into ArrayAccess(311) at 0", "Insert SimpleName: index(310) into ArrayAccess(311) at 1", "Move MethodInvocation(347) into ReturnStatement(365) at 0", "Insert MethodInvocation(370) into ExpressionStatement(371) at 0", "Insert NumberLiteral: 1(372) into ReturnStatement(373) at 0", "Insert SimpleName: b(394) into InfixExpression: ==(396) at 0", "Insert SimpleName: SPACE(395) into InfixExpression: ==(396) at 1", "Insert SimpleName: b(397) into InfixExpression: ==(399) at 0", "Insert SimpleName: TAB(398) into InfixExpression: ==(399) at 1", "Insert SimpleName: i(465) into VariableDeclarationFragment(467) at 0", "Insert NumberLiteral: 0(466) into VariableDeclarationFragment(467) at 1", "Insert QualifiedName: bytes.length(470) into InfixExpression: -(472) at 0", "Insert NumberLiteral: 3(471) into InfixExpression: -(472) at 1", "Insert PrimitiveType: int(476) into VariableDeclarationStatement(483) at 0", "Insert VariableDeclarationFragment(482) into VariableDeclarationStatement(483) at 1", "Insert InfixExpression: <(486) into IfStatement(534) at 0", "Insert Block(499) into IfStatement(534) at 1", "Insert Block(533) into IfStatement(534) at 2", "Insert SimpleName: getUnsignedOctet(539) into MethodInvocation(544) at 0", "Insert InfixExpression: -(542) into MethodInvocation(544) at 1", "Insert SimpleName: bytes(543) into MethodInvocation(544) at 2", "Insert PrefixExpression: !(553) into InfixExpression: ||(564) at 0", "Insert ParenthesizedExpression(563) into InfixExpression: ||(564) at 1", "Insert SimpleName: encodeByte(568) into MethodInvocation(572) at 0", "Insert SimpleName: b(569) into MethodInvocation(572) at 1", "Insert SimpleName: encode(570) into MethodInvocation(572) at 2", "Insert SimpleName: buffer(571) into MethodInvocation(572) at 3", "Insert SimpleName: SAFE_LENGTH(576) into InfixExpression: -(578) at 0", "Insert NumberLiteral: 2(577) into InfixExpression: -(578) at 1", "Insert MethodInvocation(583) into ExpressionStatement(584) at 0", "Insert MethodInvocation(588) into ExpressionStatement(589) at 0", "Insert MethodInvocation(593) into ExpressionStatement(594) at 0", "Insert SimpleName: i(598) into VariableDeclarationFragment(602) at 0", "Insert InfixExpression: -(601) into VariableDeclarationFragment(602) at 1", "Insert Assignment: =(614) into ExpressionStatement(615) at 0", "Insert Assignment: =(633) into ExpressionStatement(634) at 0", "Insert MethodInvocation(639) into ExpressionStatement(640) at 0", "Insert Modifier: final(704) into VariableDeclarationStatement(711) at 0", "Insert IfStatement(786) into IfStatement(787) at 2", "Insert SimpleName: buffer(367) into MethodInvocation(370) at 0", "Insert SimpleName: write(368) into MethodInvocation(370) at 1", "Insert SimpleName: b(369) into MethodInvocation(370) at 2", "Insert SimpleName: b(477) into VariableDeclarationFragment(482) at 0", "Insert MethodInvocation(481) into VariableDeclarationFragment(482) at 1", "Insert SimpleName: pos(484) into InfixExpression: <(486) at 0", "Insert SimpleName: SAFE_LENGTH(485) into InfixExpression: <(486) at 1", "Insert ExpressionStatement(498) into Block(499) at 0", "Insert ExpressionStatement(513) into Block(533) at 0", "Insert ExpressionStatement(518) into Block(533) at 1", "Insert ExpressionStatement(523) into Block(533) at 2", "Insert ExpressionStatement(528) into Block(533) at 3", "Insert ExpressionStatement(532) into Block(533) at 4", "Insert QualifiedName: bytes.length(540) into InfixExpression: -(542) at 0", "Insert NumberLiteral: 3(541) into InfixExpression: -(542) at 1", "Insert MethodInvocation(552) into PrefixExpression: !(553) at 0", "Insert InfixExpression: &&(562) into ParenthesizedExpression(563) at 0", "Insert SimpleName: buffer(580) into MethodInvocation(583) at 0", "Insert SimpleName: write(581) into MethodInvocation(583) at 1", "Insert SimpleName: ESCAPE_CHAR(582) into MethodInvocation(583) at 2", "Insert SimpleName: buffer(585) into MethodInvocation(588) at 0", "Insert SimpleName: write(586) into MethodInvocation(588) at 1", "Insert SimpleName: CR(587) into MethodInvocation(588) at 2", "Insert SimpleName: buffer(590) into MethodInvocation(593) at 0", "Insert SimpleName: write(591) into MethodInvocation(593) at 1", "Insert SimpleName: LF(592) into MethodInvocation(593) at 2", "Insert QualifiedName: bytes.length(599) into InfixExpression: -(601) at 0", "Insert NumberLiteral: 2(600) into InfixExpression: -(601) at 1", "Insert SimpleName: b(609) into Assignment: =(614) at 0", "Insert MethodInvocation(613) into Assignment: =(614) at 1", "Insert SimpleName: encode(616) into Assignment: =(633) at 0", "Insert InfixExpression: ||(632) into Assignment: =(633) at 1", "Insert SimpleName: encodeByte(635) into MethodInvocation(639) at 0", "Insert SimpleName: b(636) into MethodInvocation(639) at 1", "Insert SimpleName: encode(637) into MethodInvocation(639) at 2", "Insert SimpleName: buffer(638) into MethodInvocation(639) at 3", "Insert InfixExpression: &&(779) into IfStatement(786) at 0", "Move Block(343) into IfStatement(786) at 1", "Insert SimpleName: getUnsignedOctet(478) into MethodInvocation(481) at 0", "Insert SimpleName: i(479) into MethodInvocation(481) at 1", "Insert SimpleName: bytes(480) into MethodInvocation(481) at 2", "Insert Assignment: +=(497) into ExpressionStatement(498) at 0", "Insert MethodInvocation(512) into ExpressionStatement(513) at 0", "Insert MethodInvocation(517) into ExpressionStatement(518) at 0", "Insert MethodInvocation(522) into ExpressionStatement(523) at 0", "Insert MethodInvocation(527) into ExpressionStatement(528) at 0", "Insert Assignment: =(531) into ExpressionStatement(532) at 0", "Insert SimpleName: printable(549) into MethodInvocation(552) at 0", "Insert SimpleName: get(550) into MethodInvocation(552) at 1", "Insert SimpleName: b(551) into MethodInvocation(552) at 2", "Insert MethodInvocation(556) into InfixExpression: &&(562) at 0", "Insert InfixExpression: >(561) into InfixExpression: &&(562) at 1", "Insert SimpleName: getUnsignedOctet(610) into MethodInvocation(613) at 0", "Insert SimpleName: i(611) into MethodInvocation(613) at 1", "Insert SimpleName: bytes(612) into MethodInvocation(613) at 2", "Insert PrefixExpression: !(621) into InfixExpression: ||(632) at 0", "Insert ParenthesizedExpression(631) into InfixExpression: ||(632) at 1", "Insert InfixExpression: !=(775) into InfixExpression: &&(779) at 0", "Insert InfixExpression: !=(778) into InfixExpression: &&(779) at 1", "Insert SimpleName: pos(487) into Assignment: +=(497) at 0", "Insert MethodInvocation(496) into Assignment: +=(497) at 1", "Insert SimpleName: encodeByte(500) into MethodInvocation(512) at 0", "Insert SimpleName: b(501) into MethodInvocation(512) at 1", "Insert InfixExpression: ||(510) into MethodInvocation(512) at 2", "Insert SimpleName: buffer(511) into MethodInvocation(512) at 3", "Insert SimpleName: buffer(514) into MethodInvocation(517) at 0", "Insert SimpleName: write(515) into MethodInvocation(517) at 1", "Insert SimpleName: ESCAPE_CHAR(516) into MethodInvocation(517) at 2", "Insert SimpleName: buffer(519) into MethodInvocation(522) at 0", "Insert SimpleName: write(520) into MethodInvocation(522) at 1", "Insert SimpleName: CR(521) into MethodInvocation(522) at 2", "Insert SimpleName: buffer(524) into MethodInvocation(527) at 0", "Insert SimpleName: write(525) into MethodInvocation(527) at 1", "Insert SimpleName: LF(526) into MethodInvocation(527) at 2", "Insert SimpleName: pos(529) into Assignment: =(531) at 0", "Insert NumberLiteral: 1(530) into Assignment: =(531) at 1", "Insert SimpleName: isWhitespace(554) into MethodInvocation(556) at 0", "Insert SimpleName: b(555) into MethodInvocation(556) at 1", "Insert SimpleName: pos(557) into InfixExpression: >(561) at 0", "Insert InfixExpression: -(560) into InfixExpression: >(561) at 1", "Insert MethodInvocation(620) into PrefixExpression: !(621) at 0", "Insert InfixExpression: &&(630) into ParenthesizedExpression(631) at 0", "Insert IfStatement(723) into Block(758) at 0", "Insert SimpleName: b(773) into InfixExpression: !=(775) at 0", "Insert SimpleName: CR(774) into InfixExpression: !=(775) at 1", "Insert SimpleName: b(776) into InfixExpression: !=(778) at 0", "Insert SimpleName: LF(777) into InfixExpression: !=(778) at 1", "Insert SimpleName: encodeByte(488) into MethodInvocation(496) at 0", "Insert SimpleName: b(489) into MethodInvocation(496) at 1", "Insert PrefixExpression: !(494) into MethodInvocation(496) at 2", "Insert SimpleName: buffer(495) into MethodInvocation(496) at 3", "Insert PrefixExpression: !(506) into InfixExpression: ||(510) at 0", "Insert MethodInvocation(509) into InfixExpression: ||(510) at 1", "Insert SimpleName: SAFE_LENGTH(558) into InfixExpression: -(560) at 0", "Insert NumberLiteral: 5(559) into InfixExpression: -(560) at 1", "Insert SimpleName: printable(617) into MethodInvocation(620) at 0", "Insert SimpleName: get(618) into MethodInvocation(620) at 1", "Insert SimpleName: b(619) into MethodInvocation(620) at 2", "Insert InfixExpression: >(626) into InfixExpression: &&(630) at 0", "Insert MethodInvocation(629) into InfixExpression: &&(630) at 1", "Insert InfixExpression: ==(720) into IfStatement(723) at 0", "Insert Block(722) into IfStatement(723) at 1", "Move MethodInvocation(337) into PrefixExpression: !(494) at 0", "Insert MethodInvocation(505) into PrefixExpression: !(506) at 0", "Insert SimpleName: isWhitespace(507) into MethodInvocation(509) at 0", "Insert SimpleName: b(508) into MethodInvocation(509) at 1", "Insert SimpleName: i(622) into InfixExpression: >(626) at 0", "Insert InfixExpression: -(625) into InfixExpression: >(626) at 1", "Insert SimpleName: isWhitespace(627) into MethodInvocation(629) at 0", "Insert SimpleName: b(628) into MethodInvocation(629) at 1", "Move ArrayAccess(431) into InfixExpression: ==(720) at 0", "Insert SimpleName: CR(719) into InfixExpression: ==(720) at 1", "Insert ContinueStatement(721) into Block(722) at 0", "Insert SimpleName: printable(502) into MethodInvocation(505) at 0", "Insert SimpleName: get(503) into MethodInvocation(505) at 1", "Insert SimpleName: b(504) into MethodInvocation(505) at 2", "Insert QualifiedName: bytes.length(623) into InfixExpression: -(625) at 0", "Insert NumberLiteral: 2(624) into InfixExpression: -(625) at 1", "Insert ArrayAccess(730) into MethodInvocation(731) at 2", "Insert SimpleName: bytes(728) into ArrayAccess(730) at 0", "Insert SimpleName: i(729) into ArrayAccess(730) at 1", "Delete TagElement(44)", "Delete Javadoc(53)", "Delete Modifier: public(54)", "Delete SimpleName: QuotedPrintableCodec(55)", "Delete ExpressionStatement(348)", "Delete SimpleName: c(320)", "Delete PrimitiveType: byte(314)", "Delete SimpleName: c(315)", "Delete SingleVariableDeclaration(316)", "Delete SimpleName: bytes(317)", "Delete Block(351)", "Delete EnhancedForStatement(352)", "Delete SimpleName: buffer(474)", "Delete SimpleName: write(475)", "Delete SimpleName: b(476)", "Delete MethodInvocation(477)", "Delete ExpressionStatement(478)", "Delete Block(479)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}