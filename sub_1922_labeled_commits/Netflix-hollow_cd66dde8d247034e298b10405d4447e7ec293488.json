{"application": "Netflix-hollow", "csha": "cd66dde8d247034e298b10405d4447e7ec293488", "files": [{"HollowObjectDelegateCachedImplGenerator_cluster": {"actions": [{"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 11", "MOV ExpressionStatement to SwitchStatement at 10", "MOV ExpressionStatement to SwitchStatement at 15", "MOV ExpressionStatement to SwitchStatement at 2", "MOV ExpressionStatement to SwitchStatement at 2"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 5", "MOV ExpressionStatement to SwitchStatement at 9", "MOV ExpressionStatement to SwitchStatement at 4", "MOV ExpressionStatement to SwitchStatement at 14", "MOV ExpressionStatement to SwitchStatement at 2", "MOV ExpressionStatement to SwitchStatement at 64", "MOV ExpressionStatement to SwitchStatement at 7", "MOV ExpressionStatement to SwitchStatement at 3"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 18", "MOV ExpressionStatement to SwitchStatement at 21", "MOV ExpressionStatement to SwitchStatement at 15", "MOV ExpressionStatement to SwitchStatement at 19", "MOV ExpressionStatement to SwitchStatement at 20", "MOV ExpressionStatement to SwitchStatement at 23", "MOV ExpressionStatement to SwitchStatement at 47", "MOV ExpressionStatement to SwitchStatement at 35"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 46", "MOV ExpressionStatement to SwitchStatement at 34", "MOV ExpressionStatement to SwitchStatement at 29", "MOV ExpressionStatement to SwitchStatement at 32", "MOV ExpressionStatement to SwitchStatement at 22", "MOV ExpressionStatement to SwitchStatement at 31", "MOV ExpressionStatement to SwitchStatement at 30", "MOV ExpressionStatement to SwitchStatement at 55"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 40", "MOV ExpressionStatement to SwitchStatement at 36", "MOV ExpressionStatement to SwitchStatement at 41", "MOV ExpressionStatement to SwitchStatement at 45", "MOV ExpressionStatement to SwitchStatement at 57", "MOV ExpressionStatement to SwitchStatement at 58", "MOV ExpressionStatement to SwitchStatement at 42", "MOV ExpressionStatement to SwitchStatement at 43"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 54", "MOV ExpressionStatement to SwitchStatement at 56", "MOV ExpressionStatement to SwitchStatement at 69", "MOV ExpressionStatement to SwitchStatement at 52", "MOV ExpressionStatement to SwitchStatement at 63", "MOV ExpressionStatement to SwitchStatement at 44", "MOV ExpressionStatement to SwitchStatement at 53", "MOV ExpressionStatement to SwitchStatement at 51"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: restrictApiToFieldType"]}, {"root": "DEL SimpleName: restrictApiToFieldType", "operations": ["DEL SimpleName: restrictApiToFieldType"]}, {"root": "DEL BooleanLiteral: true", "operations": ["DEL BooleanLiteral: true"]}, {"root": "DEL BooleanLiteral: false", "operations": ["DEL BooleanLiteral: false"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: reference"]}, {"root": "DEL IfStatement", "operations": ["DEL PrefixExpression: !", "DEL MethodInvocation", "DEL StringLiteral: \"    }\\n\\n\"", "DEL SimpleName: fieldName", "DEL SimpleName: uppercase", "DEL SimpleName: reference", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL StringLiteral: \"    public Boolean get\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL StringLiteral: \"            return false;\\n\"", "DEL MethodInvocation", "DEL StringLiteral: \"        if(\"", "DEL StringLiteral: \" == null)\\n\"", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: fieldName", "DEL SimpleName: append", "DEL MethodInvocation", "DEL StringLiteral: \"        return \"", "DEL Block", "DEL ExpressionStatement", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL SimpleName: append", "DEL IfStatement", "DEL StringLiteral: \".booleanValue();\\n\"", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: uppercase", "DEL StringLiteral: \";\\n\"", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: append", "DEL MethodInvocation", "DEL Block", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL StringLiteral: \"    }\\n\\n\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL SimpleName: fieldName", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: fieldName", "DEL SimpleName: restrictApiToFieldType", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL StringLiteral: \"        return \"", "DEL SimpleName: fieldName", "DEL Block", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL StringLiteral: \"    public boolean get\"", "DEL IfStatement", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: append", "DEL StringLiteral: \" == null)\\n\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL StringLiteral: \"            return Double.NaN;\\n\"", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL SimpleName: fieldName", "DEL MethodInvocation", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: append", "DEL StringLiteral: \"        if(\"", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"    public double get\"", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL SimpleName: fieldName", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: uppercase", "DEL MethodInvocation", "DEL SimpleName: fieldName", "DEL ExpressionStatement", "DEL StringLiteral: \";\\n\"", "DEL StringLiteral: \"        return \"", "DEL StringLiteral: \"    }\\n\\n\"", "DEL SimpleName: append", "DEL SimpleName: uppercase", "DEL SimpleName: restrictApiToFieldType", "DEL SimpleName: builder", "DEL StringLiteral: \"    public Double get\"", "DEL SimpleName: reference", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL Block", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL StringLiteral: \"        return \"", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL Block", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: fieldName", "DEL IfStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL PrefixExpression: !", "DEL StringLiteral: \"    }\\n\\n\"", "DEL MethodInvocation", "DEL StringLiteral: \".doubleValue();\\n\"", "DEL SimpleName: fieldName", "DEL MethodInvocation"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL PrefixExpression: !", "DEL SimpleName: fieldName", "DEL MethodInvocation", "DEL SimpleName: fieldName", "DEL StringLiteral: \"    public Float get\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: fieldName", "DEL SimpleName: append", "DEL StringLiteral: \"        if(\"", "DEL StringLiteral: \"            return Float.NaN;\\n\"", "DEL SimpleName: uppercase", "DEL StringLiteral: \"    }\\n\\n\"", "DEL MethodInvocation", "DEL StringLiteral: \"        return \"", "DEL StringLiteral: \".floatValue();\\n\"", "DEL SimpleName: uppercase", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL StringLiteral: \"        return \"", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL StringLiteral: \"    }\\n\\n\"", "DEL SimpleName: builder", "DEL StringLiteral: \";\\n\"", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL StringLiteral: \"    public float get\"", "DEL IfStatement", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleName: fieldName", "DEL Block", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: restrictApiToFieldType", "DEL StringLiteral: \" == null)\\n\"", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: fieldName", "DEL ExpressionStatement", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL SimpleName: append", "DEL SimpleName: reference"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: fieldName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL StringLiteral: \"            return Integer.MIN_VALUE;\\n\"", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: fieldName", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: append", "DEL IfStatement", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL StringLiteral: \";\\n\"", "DEL SimpleName: append", "DEL SimpleName: uppercase", "DEL StringLiteral: \"        return \"", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL Block", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL Block", "DEL StringLiteral: \"    }\\n\\n\"", "DEL SimpleName: fieldName", "DEL StringLiteral: \" == null)\\n\"", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: restrictApiToFieldType", "DEL SimpleName: builder", "DEL StringLiteral: \"        if(\"", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL SimpleName: fieldName", "DEL StringLiteral: \"    public int get\"", "DEL SimpleName: append", "DEL SimpleName: fieldName", "DEL MethodInvocation", "DEL SimpleName: reference", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL Block", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: builder", "DEL StringLiteral: \"    }\\n\\n\"", "DEL SimpleName: uppercase", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL StringLiteral: \".intValue();\\n\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Block", "DEL StringLiteral: \"    public Integer get\"", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL MethodInvocation", "DEL StringLiteral: \"        return \""]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL StringLiteral: \" == null)\\n\"", "DEL SimpleName: append", "DEL StringLiteral: \";\\n\"", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: uppercase", "DEL SimpleName: fieldName", "DEL SimpleName: append", "DEL SimpleName: append", "DEL Block", "DEL Block", "DEL SimpleName: append", "DEL Block", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL SimpleName: fieldName", "DEL SimpleName: uppercase", "DEL MethodInvocation", "DEL StringLiteral: \"        if(\"", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL StringLiteral: \"        return \"", "DEL ExpressionStatement", "DEL SimpleName: append", "DEL StringLiteral: \"    }\\n\\n\"", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL StringLiteral: \"        return \"", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \"    public long get\"", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL SimpleName: builder", "DEL ExpressionStatement", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL IfStatement", "DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: fieldName", "DEL StringLiteral: \"    public Long get\"", "DEL MethodInvocation", "DEL StringLiteral: \"    }\\n\\n\"", "DEL SimpleName: fieldName", "DEL SimpleName: restrictApiToFieldType", "DEL SimpleName: builder", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: fieldName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL StringLiteral: \".longValue();\\n\"", "DEL MethodInvocation", "DEL StringLiteral: \"            return Long.MIN_VALUE;\\n\"", "DEL MethodInvocation", "DEL MethodInvocation", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: append", "DEL SimpleName: reference"]}]}}, {"HollowObjectDelegateCachedImplGenerator_diff": {"operations": ["Move ExpressionStatement(1168) into SwitchStatement(1474) at 2", "Move ExpressionStatement(1173) into SwitchStatement(1474) at 2", "Move ExpressionStatement(1840) into SwitchStatement(1474) at 10", "Move ExpressionStatement(1845) into SwitchStatement(1474) at 11", "Move ExpressionStatement(1890) into SwitchStatement(1474) at 15", "Move ExpressionStatement(1078) into SwitchStatement(1474) at 2", "Move ExpressionStatement(1089) into SwitchStatement(1474) at 3", "Move ExpressionStatement(1094) into SwitchStatement(1474) at 4", "Move ExpressionStatement(1105) into SwitchStatement(1474) at 5", "Move ExpressionStatement(1123) into SwitchStatement(1474) at 7", "Move ExpressionStatement(1139) into SwitchStatement(1474) at 9", "Move ExpressionStatement(1134) into SwitchStatement(1474) at 14", "Move ExpressionStatement(1331) into SwitchStatement(1474) at 15", "Move ExpressionStatement(1270) into SwitchStatement(1474) at 18", "Move ExpressionStatement(1281) into SwitchStatement(1474) at 19", "Move ExpressionStatement(1286) into SwitchStatement(1474) at 20", "Move ExpressionStatement(1297) into SwitchStatement(1474) at 21", "Move ExpressionStatement(1491) into SwitchStatement(1474) at 22", "Move ExpressionStatement(1315) into SwitchStatement(1474) at 23", "Move ExpressionStatement(1430) into SwitchStatement(1474) at 29", "Move ExpressionStatement(1441) into SwitchStatement(1474) at 30", "Move ExpressionStatement(1446) into SwitchStatement(1474) at 31", "Move ExpressionStatement(1457) into SwitchStatement(1474) at 32", "Move ExpressionStatement(1475) into SwitchStatement(1474) at 34", "Move ExpressionStatement(1326) into SwitchStatement(1474) at 35", "Move ExpressionStatement(1651) into SwitchStatement(1474) at 36", "Move ExpressionStatement(1590) into SwitchStatement(1474) at 40", "Move ExpressionStatement(1601) into SwitchStatement(1474) at 41", "Move ExpressionStatement(1606) into SwitchStatement(1474) at 42", "Move ExpressionStatement(1617) into SwitchStatement(1474) at 43", "Move ExpressionStatement(1811) into SwitchStatement(1474) at 44", "Move ExpressionStatement(1635) into SwitchStatement(1474) at 45", "Move ExpressionStatement(1486) into SwitchStatement(1474) at 46", "Move ExpressionStatement(1302) into SwitchStatement(1474) at 47", "Move ExpressionStatement(1750) into SwitchStatement(1474) at 51", "Move ExpressionStatement(1761) into SwitchStatement(1474) at 52", "Move ExpressionStatement(1766) into SwitchStatement(1474) at 53", "Move ExpressionStatement(1777) into SwitchStatement(1474) at 54", "Move ExpressionStatement(1462) into SwitchStatement(1474) at 55", "Move ExpressionStatement(1795) into SwitchStatement(1474) at 56", "Move ExpressionStatement(1646) into SwitchStatement(1474) at 57", "Move ExpressionStatement(1622) into SwitchStatement(1474) at 58", "Move ExpressionStatement(1806) into SwitchStatement(1474) at 63", "Move ExpressionStatement(1110) into SwitchStatement(1474) at 64", "Move ExpressionStatement(1782) into SwitchStatement(1474) at 69", "Delete PrimitiveType: boolean(66)", "Delete SimpleName: restrictApiToFieldType(67)", "Delete SingleVariableDeclaration(68)", "Delete SimpleName: restrictApiToFieldType(74)", "Delete BooleanLiteral: true(818)", "Delete BooleanLiteral: false(856)", "Delete PrimitiveType: boolean(979)", "Delete SimpleName: reference(980)", "Delete SingleVariableDeclaration(981)", "Delete SimpleName: restrictApiToFieldType(985)", "Delete SimpleName: reference(986)", "Delete PrefixExpression: !(987)", "Delete SimpleName: builder(988)", "Delete SimpleName: append(989)", "Delete StringLiteral: \"    public boolean get\"(990)", "Delete MethodInvocation(991)", "Delete SimpleName: append(992)", "Delete SimpleName: uppercase(993)", "Delete SimpleName: fieldName(994)", "Delete MethodInvocation(995)", "Delete MethodInvocation(996)", "Delete SimpleName: append(997)", "Delete StringLiteral: \"(int ordinal) {\\n\"(998)", "Delete MethodInvocation(999)", "Delete ExpressionStatement(1000)", "Delete SimpleName: builder(1001)", "Delete SimpleName: append(1002)", "Delete StringLiteral: \"        if(\"(1003)", "Delete MethodInvocation(1004)", "Delete SimpleName: append(1005)", "Delete SimpleName: fieldName(1006)", "Delete MethodInvocation(1007)", "Delete SimpleName: append(1008)", "Delete StringLiteral: \" == null)\\n\"(1009)", "Delete MethodInvocation(1010)", "Delete ExpressionStatement(1011)", "Delete SimpleName: builder(1012)", "Delete SimpleName: append(1013)", "Delete StringLiteral: \"            return false;\\n\"(1014)", "Delete MethodInvocation(1015)", "Delete ExpressionStatement(1016)", "Delete SimpleName: builder(1017)", "Delete SimpleName: append(1018)", "Delete StringLiteral: \"        return \"(1019)", "Delete MethodInvocation(1020)", "Delete SimpleName: append(1021)", "Delete SimpleName: fieldName(1022)", "Delete MethodInvocation(1023)", "Delete SimpleName: append(1024)", "Delete StringLiteral: \".booleanValue();\\n\"(1025)", "Delete MethodInvocation(1026)", "Delete ExpressionStatement(1027)", "Delete SimpleName: builder(1028)", "Delete SimpleName: append(1029)", "Delete StringLiteral: \"    }\\n\\n\"(1030)", "Delete MethodInvocation(1031)", "Delete ExpressionStatement(1032)", "Delete Block(1033)", "Delete SimpleName: builder(1034)", "Delete SimpleName: append(1035)", "Delete StringLiteral: \"    public Boolean get\"(1036)", "Delete MethodInvocation(1037)", "Delete SimpleName: append(1038)", "Delete SimpleName: uppercase(1039)", "Delete SimpleName: fieldName(1040)", "Delete MethodInvocation(1041)", "Delete MethodInvocation(1042)", "Delete SimpleName: append(1043)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1044)", "Delete MethodInvocation(1045)", "Delete ExpressionStatement(1046)", "Delete SimpleName: builder(1047)", "Delete SimpleName: append(1048)", "Delete StringLiteral: \"        return \"(1049)", "Delete MethodInvocation(1050)", "Delete SimpleName: append(1051)", "Delete SimpleName: fieldName(1052)", "Delete MethodInvocation(1053)", "Delete SimpleName: append(1054)", "Delete StringLiteral: \";\\n\"(1055)", "Delete MethodInvocation(1056)", "Delete ExpressionStatement(1057)", "Delete SimpleName: builder(1058)", "Delete SimpleName: append(1059)", "Delete StringLiteral: \"    }\\n\\n\"(1060)", "Delete MethodInvocation(1061)", "Delete ExpressionStatement(1062)", "Delete Block(1063)", "Delete IfStatement(1064)", "Delete Block(1065)", "Delete Block(1140)", "Delete IfStatement(1141)", "Delete SimpleName: restrictApiToFieldType(1177)", "Delete SimpleName: reference(1178)", "Delete PrefixExpression: !(1179)", "Delete SimpleName: builder(1180)", "Delete SimpleName: append(1181)", "Delete StringLiteral: \"    public double get\"(1182)", "Delete MethodInvocation(1183)", "Delete SimpleName: append(1184)", "Delete SimpleName: uppercase(1185)", "Delete SimpleName: fieldName(1186)", "Delete MethodInvocation(1187)", "Delete MethodInvocation(1188)", "Delete SimpleName: append(1189)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1190)", "Delete MethodInvocation(1191)", "Delete ExpressionStatement(1192)", "Delete SimpleName: builder(1193)", "Delete SimpleName: append(1194)", "Delete StringLiteral: \"        if(\"(1195)", "Delete MethodInvocation(1196)", "Delete SimpleName: append(1197)", "Delete SimpleName: fieldName(1198)", "Delete MethodInvocation(1199)", "Delete SimpleName: append(1200)", "Delete StringLiteral: \" == null)\\n\"(1201)", "Delete MethodInvocation(1202)", "Delete ExpressionStatement(1203)", "Delete SimpleName: builder(1204)", "Delete SimpleName: append(1205)", "Delete StringLiteral: \"            return Double.NaN;\\n\"(1206)", "Delete MethodInvocation(1207)", "Delete ExpressionStatement(1208)", "Delete SimpleName: builder(1209)", "Delete SimpleName: append(1210)", "Delete StringLiteral: \"        return \"(1211)", "Delete MethodInvocation(1212)", "Delete SimpleName: append(1213)", "Delete SimpleName: fieldName(1214)", "Delete MethodInvocation(1215)", "Delete SimpleName: append(1216)", "Delete StringLiteral: \".doubleValue();\\n\"(1217)", "Delete MethodInvocation(1218)", "Delete ExpressionStatement(1219)", "Delete SimpleName: builder(1220)", "Delete SimpleName: append(1221)", "Delete StringLiteral: \"    }\\n\\n\"(1222)", "Delete MethodInvocation(1223)", "Delete ExpressionStatement(1224)", "Delete Block(1225)", "Delete SimpleName: builder(1226)", "Delete SimpleName: append(1227)", "Delete StringLiteral: \"    public Double get\"(1228)", "Delete MethodInvocation(1229)", "Delete SimpleName: append(1230)", "Delete SimpleName: uppercase(1231)", "Delete SimpleName: fieldName(1232)", "Delete MethodInvocation(1233)", "Delete MethodInvocation(1234)", "Delete SimpleName: append(1235)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1236)", "Delete MethodInvocation(1237)", "Delete ExpressionStatement(1238)", "Delete SimpleName: builder(1239)", "Delete SimpleName: append(1240)", "Delete StringLiteral: \"        return \"(1241)", "Delete MethodInvocation(1242)", "Delete SimpleName: append(1243)", "Delete SimpleName: fieldName(1244)", "Delete MethodInvocation(1245)", "Delete SimpleName: append(1246)", "Delete StringLiteral: \";\\n\"(1247)", "Delete MethodInvocation(1248)", "Delete ExpressionStatement(1249)", "Delete SimpleName: builder(1250)", "Delete SimpleName: append(1251)", "Delete StringLiteral: \"    }\\n\\n\"(1252)", "Delete MethodInvocation(1253)", "Delete ExpressionStatement(1254)", "Delete Block(1255)", "Delete IfStatement(1256)", "Delete Block(1257)", "Delete Block(1332)", "Delete IfStatement(1333)", "Delete SimpleName: restrictApiToFieldType(1337)", "Delete SimpleName: reference(1338)", "Delete PrefixExpression: !(1339)", "Delete SimpleName: builder(1340)", "Delete SimpleName: append(1341)", "Delete StringLiteral: \"    public float get\"(1342)", "Delete MethodInvocation(1343)", "Delete SimpleName: append(1344)", "Delete SimpleName: uppercase(1345)", "Delete SimpleName: fieldName(1346)", "Delete MethodInvocation(1347)", "Delete MethodInvocation(1348)", "Delete SimpleName: append(1349)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1350)", "Delete MethodInvocation(1351)", "Delete ExpressionStatement(1352)", "Delete SimpleName: builder(1353)", "Delete SimpleName: append(1354)", "Delete StringLiteral: \"        if(\"(1355)", "Delete MethodInvocation(1356)", "Delete SimpleName: append(1357)", "Delete SimpleName: fieldName(1358)", "Delete MethodInvocation(1359)", "Delete SimpleName: append(1360)", "Delete StringLiteral: \" == null)\\n\"(1361)", "Delete MethodInvocation(1362)", "Delete ExpressionStatement(1363)", "Delete SimpleName: builder(1364)", "Delete SimpleName: append(1365)", "Delete StringLiteral: \"            return Float.NaN;\\n\"(1366)", "Delete MethodInvocation(1367)", "Delete ExpressionStatement(1368)", "Delete SimpleName: builder(1369)", "Delete SimpleName: append(1370)", "Delete StringLiteral: \"        return \"(1371)", "Delete MethodInvocation(1372)", "Delete SimpleName: append(1373)", "Delete SimpleName: fieldName(1374)", "Delete MethodInvocation(1375)", "Delete SimpleName: append(1376)", "Delete StringLiteral: \".floatValue();\\n\"(1377)", "Delete MethodInvocation(1378)", "Delete ExpressionStatement(1379)", "Delete SimpleName: builder(1380)", "Delete SimpleName: append(1381)", "Delete StringLiteral: \"    }\\n\\n\"(1382)", "Delete MethodInvocation(1383)", "Delete ExpressionStatement(1384)", "Delete Block(1385)", "Delete SimpleName: builder(1386)", "Delete SimpleName: append(1387)", "Delete StringLiteral: \"    public Float get\"(1388)", "Delete MethodInvocation(1389)", "Delete SimpleName: append(1390)", "Delete SimpleName: uppercase(1391)", "Delete SimpleName: fieldName(1392)", "Delete MethodInvocation(1393)", "Delete MethodInvocation(1394)", "Delete SimpleName: append(1395)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1396)", "Delete MethodInvocation(1397)", "Delete ExpressionStatement(1398)", "Delete SimpleName: builder(1399)", "Delete SimpleName: append(1400)", "Delete StringLiteral: \"        return \"(1401)", "Delete MethodInvocation(1402)", "Delete SimpleName: append(1403)", "Delete SimpleName: fieldName(1404)", "Delete MethodInvocation(1405)", "Delete SimpleName: append(1406)", "Delete StringLiteral: \";\\n\"(1407)", "Delete MethodInvocation(1408)", "Delete ExpressionStatement(1409)", "Delete SimpleName: builder(1410)", "Delete SimpleName: append(1411)", "Delete StringLiteral: \"    }\\n\\n\"(1412)", "Delete MethodInvocation(1413)", "Delete ExpressionStatement(1414)", "Delete Block(1415)", "Delete IfStatement(1416)", "Delete Block(1417)", "Delete Block(1492)", "Delete IfStatement(1493)", "Delete SimpleName: restrictApiToFieldType(1497)", "Delete SimpleName: reference(1498)", "Delete PrefixExpression: !(1499)", "Delete SimpleName: builder(1500)", "Delete SimpleName: append(1501)", "Delete StringLiteral: \"    public int get\"(1502)", "Delete MethodInvocation(1503)", "Delete SimpleName: append(1504)", "Delete SimpleName: uppercase(1505)", "Delete SimpleName: fieldName(1506)", "Delete MethodInvocation(1507)", "Delete MethodInvocation(1508)", "Delete SimpleName: append(1509)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1510)", "Delete MethodInvocation(1511)", "Delete ExpressionStatement(1512)", "Delete SimpleName: builder(1513)", "Delete SimpleName: append(1514)", "Delete StringLiteral: \"        if(\"(1515)", "Delete MethodInvocation(1516)", "Delete SimpleName: append(1517)", "Delete SimpleName: fieldName(1518)", "Delete MethodInvocation(1519)", "Delete SimpleName: append(1520)", "Delete StringLiteral: \" == null)\\n\"(1521)", "Delete MethodInvocation(1522)", "Delete ExpressionStatement(1523)", "Delete SimpleName: builder(1524)", "Delete SimpleName: append(1525)", "Delete StringLiteral: \"            return Integer.MIN_VALUE;\\n\"(1526)", "Delete MethodInvocation(1527)", "Delete ExpressionStatement(1528)", "Delete SimpleName: builder(1529)", "Delete SimpleName: append(1530)", "Delete StringLiteral: \"        return \"(1531)", "Delete MethodInvocation(1532)", "Delete SimpleName: append(1533)", "Delete SimpleName: fieldName(1534)", "Delete MethodInvocation(1535)", "Delete SimpleName: append(1536)", "Delete StringLiteral: \".intValue();\\n\"(1537)", "Delete MethodInvocation(1538)", "Delete ExpressionStatement(1539)", "Delete SimpleName: builder(1540)", "Delete SimpleName: append(1541)", "Delete StringLiteral: \"    }\\n\\n\"(1542)", "Delete MethodInvocation(1543)", "Delete ExpressionStatement(1544)", "Delete Block(1545)", "Delete SimpleName: builder(1546)", "Delete SimpleName: append(1547)", "Delete StringLiteral: \"    public Integer get\"(1548)", "Delete MethodInvocation(1549)", "Delete SimpleName: append(1550)", "Delete SimpleName: uppercase(1551)", "Delete SimpleName: fieldName(1552)", "Delete MethodInvocation(1553)", "Delete MethodInvocation(1554)", "Delete SimpleName: append(1555)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1556)", "Delete MethodInvocation(1557)", "Delete ExpressionStatement(1558)", "Delete SimpleName: builder(1559)", "Delete SimpleName: append(1560)", "Delete StringLiteral: \"        return \"(1561)", "Delete MethodInvocation(1562)", "Delete SimpleName: append(1563)", "Delete SimpleName: fieldName(1564)", "Delete MethodInvocation(1565)", "Delete SimpleName: append(1566)", "Delete StringLiteral: \";\\n\"(1567)", "Delete MethodInvocation(1568)", "Delete ExpressionStatement(1569)", "Delete SimpleName: builder(1570)", "Delete SimpleName: append(1571)", "Delete StringLiteral: \"    }\\n\\n\"(1572)", "Delete MethodInvocation(1573)", "Delete ExpressionStatement(1574)", "Delete Block(1575)", "Delete IfStatement(1576)", "Delete Block(1577)", "Delete Block(1652)", "Delete IfStatement(1653)", "Delete SimpleName: restrictApiToFieldType(1657)", "Delete SimpleName: reference(1658)", "Delete PrefixExpression: !(1659)", "Delete SimpleName: builder(1660)", "Delete SimpleName: append(1661)", "Delete StringLiteral: \"    public long get\"(1662)", "Delete MethodInvocation(1663)", "Delete SimpleName: append(1664)", "Delete SimpleName: uppercase(1665)", "Delete SimpleName: fieldName(1666)", "Delete MethodInvocation(1667)", "Delete MethodInvocation(1668)", "Delete SimpleName: append(1669)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1670)", "Delete MethodInvocation(1671)", "Delete ExpressionStatement(1672)", "Delete SimpleName: builder(1673)", "Delete SimpleName: append(1674)", "Delete StringLiteral: \"        if(\"(1675)", "Delete MethodInvocation(1676)", "Delete SimpleName: append(1677)", "Delete SimpleName: fieldName(1678)", "Delete MethodInvocation(1679)", "Delete SimpleName: append(1680)", "Delete StringLiteral: \" == null)\\n\"(1681)", "Delete MethodInvocation(1682)", "Delete ExpressionStatement(1683)", "Delete SimpleName: builder(1684)", "Delete SimpleName: append(1685)", "Delete StringLiteral: \"            return Long.MIN_VALUE;\\n\"(1686)", "Delete MethodInvocation(1687)", "Delete ExpressionStatement(1688)", "Delete SimpleName: builder(1689)", "Delete SimpleName: append(1690)", "Delete StringLiteral: \"        return \"(1691)", "Delete MethodInvocation(1692)", "Delete SimpleName: append(1693)", "Delete SimpleName: fieldName(1694)", "Delete MethodInvocation(1695)", "Delete SimpleName: append(1696)", "Delete StringLiteral: \".longValue();\\n\"(1697)", "Delete MethodInvocation(1698)", "Delete ExpressionStatement(1699)", "Delete SimpleName: builder(1700)", "Delete SimpleName: append(1701)", "Delete StringLiteral: \"    }\\n\\n\"(1702)", "Delete MethodInvocation(1703)", "Delete ExpressionStatement(1704)", "Delete Block(1705)", "Delete SimpleName: builder(1706)", "Delete SimpleName: append(1707)", "Delete StringLiteral: \"    public Long get\"(1708)", "Delete MethodInvocation(1709)", "Delete SimpleName: append(1710)", "Delete SimpleName: uppercase(1711)", "Delete SimpleName: fieldName(1712)", "Delete MethodInvocation(1713)", "Delete MethodInvocation(1714)", "Delete SimpleName: append(1715)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1716)", "Delete MethodInvocation(1717)", "Delete ExpressionStatement(1718)", "Delete SimpleName: builder(1719)", "Delete SimpleName: append(1720)", "Delete StringLiteral: \"        return \"(1721)", "Delete MethodInvocation(1722)", "Delete SimpleName: append(1723)", "Delete SimpleName: fieldName(1724)", "Delete MethodInvocation(1725)", "Delete SimpleName: append(1726)", "Delete StringLiteral: \";\\n\"(1727)", "Delete MethodInvocation(1728)", "Delete ExpressionStatement(1729)", "Delete SimpleName: builder(1730)", "Delete SimpleName: append(1731)", "Delete StringLiteral: \"    }\\n\\n\"(1732)", "Delete MethodInvocation(1733)", "Delete ExpressionStatement(1734)", "Delete Block(1735)", "Delete IfStatement(1736)", "Delete Block(1737)", "Delete Block(1812)", "Delete IfStatement(1813)"]}}, {"HollowObjectDelegateGenerator_cluster": {"actions": [{"root": "DEL FieldDeclaration", "operations": ["DEL Modifier: protected", "DEL VariableDeclarationFragment", "DEL FieldDeclaration", "DEL SimpleName: restrictApiToFieldType", "DEL PrimitiveType: boolean", "DEL Modifier: final"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: restrictApiToFieldType", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL FieldAccess", "DEL Assignment: =", "DEL SimpleName: restrictApiToFieldType", "DEL ExpressionStatement", "DEL ThisExpression", "DEL SimpleName: restrictApiToFieldType"]}]}}, {"HollowObjectDelegateGenerator_diff": {"operations": ["Delete Modifier: protected(36)", "Delete Modifier: final(37)", "Delete PrimitiveType: boolean(38)", "Delete SimpleName: restrictApiToFieldType(39)", "Delete VariableDeclarationFragment(40)", "Delete FieldDeclaration(41)", "Delete PrimitiveType: boolean(62)", "Delete SimpleName: restrictApiToFieldType(63)", "Delete SingleVariableDeclaration(64)", "Delete ThisExpression(82)", "Delete SimpleName: restrictApiToFieldType(83)", "Delete FieldAccess(84)", "Delete SimpleName: restrictApiToFieldType(85)", "Delete Assignment: =(86)", "Delete ExpressionStatement(87)"]}}, {"HollowObjectDelegateInterfaceGenerator_cluster": {"actions": [{"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 3"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 11"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 16"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 21"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 26"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 6", "MOV ExpressionStatement to SwitchStatement at 7"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL SimpleName: restrictApiToFieldType", "DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration"]}, {"root": "DEL SimpleName: restrictApiToFieldType", "operations": ["DEL SimpleName: restrictApiToFieldType"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL Block", "DEL SimpleName: restrictApiToFieldType", "DEL PrefixExpression: !"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: restrictApiToFieldType", "DEL IfStatement", "DEL PrefixExpression: !", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: restrictApiToFieldType", "DEL Block", "DEL PrefixExpression: !"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL PrefixExpression: !", "DEL SimpleName: restrictApiToFieldType", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL PrefixExpression: !", "DEL Block", "DEL IfStatement", "DEL SimpleName: restrictApiToFieldType"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: methodFieldName", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: HollowCodeGenerationUtils", "DEL MethodInvocation", "DEL SimpleName: restrictApiToFieldType", "DEL SimpleName: append", "DEL SimpleName: getType", "DEL MethodInvocation", "DEL StringLiteral: \" get\"", "DEL MethodInvocation", "DEL StringLiteral: \"(int ordinal);\\n\\n\"", "DEL SimpleName: getJavaBoxedType", "DEL StringLiteral: \"    public \"", "DEL MethodInvocation", "DEL InfixExpression: +", "DEL SimpleName: append", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: classBuilder", "DEL SimpleName: shortcut", "DEL Block"]}]}}, {"HollowObjectDelegateInterfaceGenerator_diff": {"operations": ["Move ExpressionStatement(181) into SwitchStatement(447) at 3", "Move ExpressionStatement(224) into SwitchStatement(447) at 11", "Move ExpressionStatement(253) into SwitchStatement(447) at 16", "Move ExpressionStatement(282) into SwitchStatement(447) at 21", "Move ExpressionStatement(311) into SwitchStatement(447) at 26", "Move ExpressionStatement(389) into SwitchStatement(407) at 6", "Move ExpressionStatement(408) into SwitchStatement(407) at 7", "Delete PrimitiveType: boolean(56)", "Delete SimpleName: restrictApiToFieldType(57)", "Delete SingleVariableDeclaration(58)", "Delete SimpleName: restrictApiToFieldType(64)", "Delete SimpleName: restrictApiToFieldType(169)", "Delete PrefixExpression: !(170)", "Delete Block(182)", "Delete IfStatement(183)", "Delete SimpleName: restrictApiToFieldType(212)", "Delete PrefixExpression: !(213)", "Delete Block(225)", "Delete IfStatement(226)", "Delete SimpleName: restrictApiToFieldType(241)", "Delete PrefixExpression: !(242)", "Delete Block(254)", "Delete IfStatement(255)", "Delete SimpleName: restrictApiToFieldType(270)", "Delete PrefixExpression: !(271)", "Delete Block(283)", "Delete IfStatement(284)", "Delete SimpleName: restrictApiToFieldType(299)", "Delete PrefixExpression: !(300)", "Delete Block(312)", "Delete IfStatement(313)", "Delete SimpleName: restrictApiToFieldType(350)", "Delete SimpleName: classBuilder(351)", "Delete SimpleName: append(352)", "Delete StringLiteral: \"    public \"(353)", "Delete SimpleName: HollowCodeGenerationUtils(354)", "Delete SimpleName: getJavaBoxedType(355)", "Delete SimpleName: shortcut(356)", "Delete SimpleName: getType(357)", "Delete MethodInvocation(358)", "Delete MethodInvocation(359)", "Delete StringLiteral: \" get\"(360)", "Delete InfixExpression: +(361)", "Delete MethodInvocation(362)", "Delete SimpleName: append(363)", "Delete SimpleName: methodFieldName(364)", "Delete MethodInvocation(365)", "Delete SimpleName: append(366)", "Delete StringLiteral: \"(int ordinal);\\n\\n\"(367)", "Delete MethodInvocation(368)", "Delete ExpressionStatement(369)", "Delete Block(370)", "Delete Block(409)", "Delete IfStatement(410)"]}}, {"HollowObjectDelegateLookupImplGenerator_cluster": {"actions": [{"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 12", "MOV SwitchCase to SwitchStatement at 27", "MOV ExpressionStatement to SwitchStatement at 54", "MOV ExpressionStatement to SwitchStatement at 54", "MOV SwitchCase to SwitchStatement at 54", "MOV SwitchCase to SwitchStatement at 14", "MOV ExpressionStatement to SwitchStatement at 25", "MOV BreakStatement to SwitchStatement at 14", "MOV ExpressionStatement to SwitchStatement at 14", "MOV SwitchCase to SwitchStatement at 41", "MOV ExpressionStatement to SwitchStatement at 51", "MOV SwitchCase to SwitchStatement at 21", "MOV BreakStatement to SwitchStatement at 21", "MOV ExpressionStatement to SwitchStatement at 54", "MOV ExpressionStatement to SwitchStatement at 19", "MOV BreakStatement to SwitchStatement at 27", "MOV BreakStatement to SwitchStatement at 41", "MOV BreakStatement to SwitchStatement at 53", "MOV BreakStatement to SwitchStatement at 54", "MOV ExpressionStatement to SwitchStatement at 54", "MOV SwitchCase to SwitchStatement at 53", "MOV ExpressionStatement to SwitchStatement at 54"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 29", "MOV ExpressionStatement to SwitchStatement at 8", "MOV ExpressionStatement to SwitchStatement at 6", "MOV ExpressionStatement to SwitchStatement at 80", "MOV ExpressionStatement to SwitchStatement at 81", "MOV ExpressionStatement to SwitchStatement at 2"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 29", "MOV ExpressionStatement to SwitchStatement at 23", "MOV ExpressionStatement to SwitchStatement at 31", "MOV ExpressionStatement to SwitchStatement at 27", "MOV ExpressionStatement to SwitchStatement at 33", "MOV ExpressionStatement to SwitchStatement at 30"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 42", "MOV ExpressionStatement to SwitchStatement at 75", "MOV ExpressionStatement to SwitchStatement at 78", "MOV ExpressionStatement to SwitchStatement at 36", "MOV ExpressionStatement to SwitchStatement at 40", "MOV ExpressionStatement to SwitchStatement at 76"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 55", "MOV ExpressionStatement to SwitchStatement at 53", "MOV ExpressionStatement to SwitchStatement at 50", "MOV ExpressionStatement to SwitchStatement at 63", "MOV ExpressionStatement to SwitchStatement at 66", "MOV ExpressionStatement to SwitchStatement at 64"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 67", "MOV ExpressionStatement to SwitchStatement at 69", "MOV ExpressionStatement to SwitchStatement at 71", "MOV ExpressionStatement to SwitchStatement at 68", "MOV ExpressionStatement to SwitchStatement at 62", "MOV ExpressionStatement to SwitchStatement at 65"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 83", "MOV ExpressionStatement to SwitchStatement at 19", "MOV ExpressionStatement to SwitchStatement at 20"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 38", "MOV ExpressionStatement to SwitchStatement at 35", "MOV ExpressionStatement to SwitchStatement at 31", "MOV BreakStatement to SwitchStatement at 45", "MOV SwitchCase to SwitchStatement at 35", "MOV ExpressionStatement to SwitchStatement at 37", "MOV ExpressionStatement to SwitchStatement at 42", "MOV ExpressionStatement to SwitchStatement at 35", "MOV ExpressionStatement to SwitchStatement at 16", "MOV BreakStatement to SwitchStatement at 38", "MOV SwitchCase to SwitchStatement at 29", "MOV ExpressionStatement to SwitchStatement at 29"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 7", "MOV ExpressionStatement to SwitchStatement at 5", "MOV ExpressionStatement to SwitchStatement at 6"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 65", "MOV ExpressionStatement to SwitchStatement at 31", "MOV ExpressionStatement to SwitchStatement at 30"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 40", "MOV ExpressionStatement to SwitchStatement at 39", "MOV ExpressionStatement to SwitchStatement at 58"]}, {"root": "MOVE from SwitchStatement", "operations": ["MOV ExpressionStatement to SwitchStatement at 49", "MOV ExpressionStatement to SwitchStatement at 50", "MOV ExpressionStatement to SwitchStatement at 48"]}, {"root": "INS BreakStatement to SwitchStatement at 66", "operations": ["INS BreakStatement to SwitchStatement at 66"]}, {"root": "DEL SingleVariableDeclaration", "operations": ["DEL PrimitiveType: boolean", "DEL SingleVariableDeclaration", "DEL SimpleName: restrictApiToFieldType"]}, {"root": "DEL SimpleName: restrictApiToFieldType", "operations": ["DEL SimpleName: restrictApiToFieldType"]}, {"root": "DEL IfStatement", "operations": ["DEL PrefixExpression: !", "DEL Block", "DEL SimpleName: restrictApiToFieldType", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL IfStatement", "DEL SimpleName: restrictApiToFieldType", "DEL PrefixExpression: !"]}, {"root": "DEL IfStatement", "operations": ["DEL IfStatement", "DEL SimpleName: restrictApiToFieldType", "DEL PrefixExpression: !", "DEL Block"]}, {"root": "DEL BreakStatement", "operations": ["DEL BreakStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL SimpleName: restrictApiToFieldType", "DEL PrefixExpression: !", "DEL IfStatement"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: restrictApiToFieldType", "DEL IfStatement", "DEL Block", "DEL PrefixExpression: !"]}, {"root": "DEL IfStatement", "operations": ["DEL Block", "DEL MethodInvocation", "DEL SimpleName: append", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL ExpressionStatement", "DEL SimpleName: methodFieldName", "DEL SimpleName: restrictApiToFieldType", "DEL Block", "DEL MethodInvocation", "DEL IfStatement", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL SimpleName: append", "DEL StringLiteral: \"    public Boolean get\""]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL Block", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL SimpleName: append", "DEL IfStatement", "DEL MethodInvocation", "DEL SimpleName: restrictApiToFieldType", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL StringLiteral: \"    public Double get\"", "DEL Block", "DEL SimpleName: methodFieldName", "DEL MethodInvocation", "DEL SimpleName: append"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: append", "DEL SimpleName: append", "DEL StringLiteral: \"    public Float get\"", "DEL IfStatement", "DEL ExpressionStatement", "DEL SimpleName: restrictApiToFieldType", "DEL Block", "DEL MethodInvocation", "DEL Block", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL SimpleName: methodFieldName", "DEL SimpleName: builder", "DEL MethodInvocation", "DEL SimpleName: append"]}, {"root": "DEL IfStatement", "operations": ["DEL SimpleName: restrictApiToFieldType", "DEL SimpleName: append", "DEL SimpleName: append", "DEL SimpleName: builder", "DEL StringLiteral: \"    public Integer get\"", "DEL IfStatement", "DEL SimpleName: append", "DEL ExpressionStatement", "DEL MethodInvocation", "DEL PrefixExpression: !", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL SimpleName: methodFieldName", "DEL MethodInvocation", "DEL MethodInvocation", "DEL Block", "DEL Block"]}, {"root": "DEL IfStatement", "operations": ["DEL ExpressionStatement", "DEL SimpleName: append", "DEL IfStatement", "DEL StringLiteral: \"    public Long get\"", "DEL SimpleName: restrictApiToFieldType", "DEL MethodInvocation", "DEL StringLiteral: \"(int ordinal) {\\n\"", "DEL SimpleName: append", "DEL Block", "DEL SimpleName: append", "DEL PrefixExpression: !", "DEL SimpleName: methodFieldName", "DEL Block", "DEL MethodInvocation", "DEL SimpleName: builder", "DEL MethodInvocation"]}]}}, {"HollowObjectDelegateLookupImplGenerator_diff": {"operations": ["Move ExpressionStatement(933) into SwitchStatement(1429) at 12", "Move BreakStatement(939) into SwitchStatement(1429) at 14", "Move SwitchCase(941) into SwitchStatement(1429) at 14", "Move ExpressionStatement(952) into SwitchStatement(1429) at 14", "Move ExpressionStatement(982) into SwitchStatement(1429) at 19", "Move BreakStatement(988) into SwitchStatement(1429) at 21", "Move SwitchCase(990) into SwitchStatement(1429) at 21", "Move ExpressionStatement(1093) into SwitchStatement(1429) at 54", "Move BreakStatement(1099) into SwitchStatement(1429) at 27", "Move SwitchCase(1101) into SwitchStatement(1429) at 27", "Move ExpressionStatement(1204) into SwitchStatement(1429) at 25", "Move BreakStatement(1210) into SwitchStatement(1429) at 41", "Move SwitchCase(1212) into SwitchStatement(1429) at 41", "Move ExpressionStatement(1315) into SwitchStatement(1429) at 51", "Move BreakStatement(1321) into SwitchStatement(1429) at 53", "Move SwitchCase(1323) into SwitchStatement(1429) at 53", "Move BreakStatement(1432) into SwitchStatement(1429) at 54", "Move SwitchCase(1434) into SwitchStatement(1429) at 54", "Move ExpressionStatement(1445) into SwitchStatement(1429) at 54", "Move ExpressionStatement(1475) into SwitchStatement(1429) at 54", "Move ExpressionStatement(1491) into SwitchStatement(1429) at 54", "Move ExpressionStatement(1521) into SwitchStatement(1429) at 54", "Move ExpressionStatement(843) into SwitchStatement(1429) at 2", "Move ExpressionStatement(873) into SwitchStatement(1429) at 6", "Move ExpressionStatement(889) into SwitchStatement(1429) at 8", "Move ExpressionStatement(1003) into SwitchStatement(1429) at 23", "Move ExpressionStatement(1033) into SwitchStatement(1429) at 27", "Move ExpressionStatement(1049) into SwitchStatement(1429) at 29", "Move ExpressionStatement(1014) into SwitchStatement(1429) at 30", "Move ExpressionStatement(1019) into SwitchStatement(1429) at 31", "Move ExpressionStatement(1038) into SwitchStatement(1429) at 33", "Move ExpressionStatement(1114) into SwitchStatement(1429) at 36", "Move ExpressionStatement(1144) into SwitchStatement(1429) at 40", "Move ExpressionStatement(1160) into SwitchStatement(1429) at 42", "Move ExpressionStatement(1225) into SwitchStatement(1429) at 50", "Move ExpressionStatement(1255) into SwitchStatement(1429) at 53", "Move ExpressionStatement(1271) into SwitchStatement(1429) at 55", "Move ExpressionStatement(1336) into SwitchStatement(1429) at 62", "Move ExpressionStatement(1236) into SwitchStatement(1429) at 63", "Move ExpressionStatement(1241) into SwitchStatement(1429) at 64", "Move ExpressionStatement(1366) into SwitchStatement(1429) at 65", "Move ExpressionStatement(1260) into SwitchStatement(1429) at 66", "Move ExpressionStatement(1382) into SwitchStatement(1429) at 67", "Move ExpressionStatement(1347) into SwitchStatement(1429) at 68", "Move ExpressionStatement(1352) into SwitchStatement(1429) at 69", "Move ExpressionStatement(1371) into SwitchStatement(1429) at 71", "Move ExpressionStatement(1125) into SwitchStatement(1429) at 75", "Move ExpressionStatement(1130) into SwitchStatement(1429) at 76", "Move ExpressionStatement(1149) into SwitchStatement(1429) at 78", "Move ExpressionStatement(854) into SwitchStatement(1429) at 80", "Move ExpressionStatement(859) into SwitchStatement(1429) at 81", "Move ExpressionStatement(392) into SwitchStatement(1429) at 83", "Move ExpressionStatement(419) into SwitchStatement(670) at 38", "Move ExpressionStatement(424) into SwitchStatement(670) at 16", "Move SwitchCase(458) into SwitchStatement(670) at 29", "Move ExpressionStatement(469) into SwitchStatement(670) at 29", "Move SwitchCase(519) into SwitchStatement(670) at 35", "Move ExpressionStatement(530) into SwitchStatement(670) at 35", "Move ExpressionStatement(602) into SwitchStatement(670) at 35", "Move ExpressionStatement(607) into SwitchStatement(670) at 31", "Move ExpressionStatement(634) into SwitchStatement(670) at 37", "Move BreakStatement(635) into SwitchStatement(670) at 38", "Move ExpressionStatement(692) into SwitchStatement(670) at 42", "Move BreakStatement(693) into SwitchStatement(670) at 45", "Move ExpressionStatement(285) into SwitchStatement(670) at 5", "Move ExpressionStatement(296) into SwitchStatement(670) at 6", "Move ExpressionStatement(301) into SwitchStatement(670) at 7", "Move ExpressionStatement(376) into SwitchStatement(670) at 19", "Move ExpressionStatement(387) into SwitchStatement(670) at 20", "Move ExpressionStatement(878) into SwitchStatement(670) at 29", "Move ExpressionStatement(437) into SwitchStatement(670) at 30", "Move ExpressionStatement(448) into SwitchStatement(670) at 31", "Move ExpressionStatement(498) into SwitchStatement(670) at 39", "Move ExpressionStatement(509) into SwitchStatement(670) at 40", "Move ExpressionStatement(559) into SwitchStatement(670) at 48", "Move ExpressionStatement(570) into SwitchStatement(670) at 49", "Move ExpressionStatement(575) into SwitchStatement(670) at 50", "Move ExpressionStatement(514) into SwitchStatement(670) at 58", "Move ExpressionStatement(453) into SwitchStatement(670) at 65", "Insert BreakStatement(669) into SwitchStatement(670) at 60", "Delete PrimitiveType: boolean(58)", "Delete SimpleName: restrictApiToFieldType(59)", "Delete SingleVariableDeclaration(60)", "Delete SimpleName: restrictApiToFieldType(66)", "Delete SimpleName: restrictApiToFieldType(273)", "Delete PrefixExpression: !(274)", "Delete Block(302)", "Delete IfStatement(303)", "Delete SimpleName: restrictApiToFieldType(364)", "Delete PrefixExpression: !(365)", "Delete Block(393)", "Delete IfStatement(394)", "Delete SimpleName: restrictApiToFieldType(425)", "Delete PrefixExpression: !(426)", "Delete Block(454)", "Delete IfStatement(455)", "Delete BreakStatement(456)", "Delete SimpleName: restrictApiToFieldType(486)", "Delete PrefixExpression: !(487)", "Delete Block(515)", "Delete IfStatement(516)", "Delete SimpleName: restrictApiToFieldType(547)", "Delete PrefixExpression: !(548)", "Delete Block(576)", "Delete IfStatement(577)", "Delete SimpleName: restrictApiToFieldType(831)", "Delete PrefixExpression: !(832)", "Delete Block(890)", "Delete SimpleName: builder(891)", "Delete SimpleName: append(892)", "Delete StringLiteral: \"    public Boolean get\"(893)", "Delete MethodInvocation(894)", "Delete SimpleName: append(895)", "Delete SimpleName: methodFieldName(896)", "Delete MethodInvocation(897)", "Delete SimpleName: append(898)", "Delete StringLiteral: \"(int ordinal) {\\n\"(899)", "Delete MethodInvocation(900)", "Delete ExpressionStatement(901)", "Delete Block(902)", "Delete IfStatement(903)", "Delete SimpleName: restrictApiToFieldType(991)", "Delete PrefixExpression: !(992)", "Delete Block(1050)", "Delete SimpleName: builder(1051)", "Delete SimpleName: append(1052)", "Delete StringLiteral: \"    public Double get\"(1053)", "Delete MethodInvocation(1054)", "Delete SimpleName: append(1055)", "Delete SimpleName: methodFieldName(1056)", "Delete MethodInvocation(1057)", "Delete SimpleName: append(1058)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1059)", "Delete MethodInvocation(1060)", "Delete ExpressionStatement(1061)", "Delete Block(1062)", "Delete IfStatement(1063)", "Delete SimpleName: restrictApiToFieldType(1102)", "Delete PrefixExpression: !(1103)", "Delete Block(1161)", "Delete SimpleName: builder(1162)", "Delete SimpleName: append(1163)", "Delete StringLiteral: \"    public Float get\"(1164)", "Delete MethodInvocation(1165)", "Delete SimpleName: append(1166)", "Delete SimpleName: methodFieldName(1167)", "Delete MethodInvocation(1168)", "Delete SimpleName: append(1169)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1170)", "Delete MethodInvocation(1171)", "Delete ExpressionStatement(1172)", "Delete Block(1173)", "Delete IfStatement(1174)", "Delete SimpleName: restrictApiToFieldType(1213)", "Delete PrefixExpression: !(1214)", "Delete Block(1272)", "Delete SimpleName: builder(1273)", "Delete SimpleName: append(1274)", "Delete StringLiteral: \"    public Integer get\"(1275)", "Delete MethodInvocation(1276)", "Delete SimpleName: append(1277)", "Delete SimpleName: methodFieldName(1278)", "Delete MethodInvocation(1279)", "Delete SimpleName: append(1280)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1281)", "Delete MethodInvocation(1282)", "Delete ExpressionStatement(1283)", "Delete Block(1284)", "Delete IfStatement(1285)", "Delete SimpleName: restrictApiToFieldType(1324)", "Delete PrefixExpression: !(1325)", "Delete Block(1383)", "Delete SimpleName: builder(1384)", "Delete SimpleName: append(1385)", "Delete StringLiteral: \"    public Long get\"(1386)", "Delete MethodInvocation(1387)", "Delete SimpleName: append(1388)", "Delete SimpleName: methodFieldName(1389)", "Delete MethodInvocation(1390)", "Delete SimpleName: append(1391)", "Delete StringLiteral: \"(int ordinal) {\\n\"(1392)", "Delete MethodInvocation(1393)", "Delete ExpressionStatement(1394)", "Delete Block(1395)", "Delete IfStatement(1396)"]}}], "commit_stats": [{"total_files": 4, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}