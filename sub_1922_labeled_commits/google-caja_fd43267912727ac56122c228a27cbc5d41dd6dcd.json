{"application": "google-caja", "csha": "fd43267912727ac56122c228a27cbc5d41dd6dcd", "files": [{"CssCompiler_cluster": {"actions": [{"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from \".emitCss___(@cssParts.join(\" to \".emitCss___(@cssParts./*@synthetic*/join(\"", "operations": ["UPD StringLiteral: \".emitCss___(@cssParts.join(\" from \".emitCss___(@cssParts.join(\" to \".emitCss___(@cssParts./*@synthetic*/join(\""]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.SyntheticNodes.s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}]}}, {"CssCompiler_diff": {"operations": ["Move ClassInstanceCreation(564) into VariableDeclarationFragment(556) at 1", "Update StringLiteral: \".emitCss___(@cssParts.join(\"(585) to \".emitCss___(@cssParts./*@synthetic*/join(\"", "Move ClassInstanceCreation(336) into VariableDeclarationFragment(334) at 1", "Move ClassInstanceCreation(350) into VariableDeclarationFragment(346) at 1", "Move ClassInstanceCreation(365) into VariableDeclarationFragment(359) at 1", "Delete QualifiedName: com.google.caja.parser.SyntheticNodes.s(34)", "Delete ImportDeclaration(35)", "Delete SimpleName: s(331)", "Delete MethodInvocation(337)", "Delete SimpleName: s(343)", "Delete MethodInvocation(351)", "Delete SimpleName: s(357)", "Delete MethodInvocation(366)", "Delete SimpleName: s(560)", "Delete MethodInvocation(565)"]}}, {"DomProcessingEvents_cluster": {"actions": [{"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from s to block", "operations": ["UPD SimpleName: s from s to block"]}, {"root": "INS SimpleName: appendChild to MethodInvocation at 1", "operations": ["INS SimpleName: appendChild to MethodInvocation at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.SyntheticNodes.s", "DEL ImportDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: appendChild", "DEL SimpleName: block", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}]}}, {"DomProcessingEvents_diff": {"operations": ["Move MethodInvocation(1661) into Assignment: =(1657) at 1", "Move MethodInvocation(1559) into ExpressionStatement(1557) at 0", "Update SimpleName: s(1554) to block", "Insert SimpleName: appendChild(1551) into MethodInvocation(1556) at 1", "Delete QualifiedName: com.google.caja.parser.SyntheticNodes.s(22)", "Delete ImportDeclaration(23)", "Delete SimpleName: block(1552)", "Delete SimpleName: appendChild(1553)", "Delete MethodInvocation(1560)", "Delete SimpleName: s(1651)", "Delete MethodInvocation(1662)"]}}, {"GxpCompiler_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 39"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes.s from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Block to VariableDeclarationStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "UPDATE from s to bindings", "operations": ["UPD SimpleName: s from s to bindings", "UPD SimpleName: s from s to bindings", "UPD SimpleName: s from s to bindings"]}, {"root": "INS SimpleName: put to MethodInvocation at 1", "operations": ["INS SimpleName: put to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"assignedNameRef\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"assignedNameRef\" to MethodInvocation at 2"]}, {"root": "INS SimpleName: put to MethodInvocation at 1", "operations": ["INS SimpleName: put to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"bufferNameFormal\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"bufferNameFormal\" to MethodInvocation at 2"]}, {"root": "INS SimpleName: put to MethodInvocation at 1", "operations": ["INS SimpleName: put to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"bufferNameRef\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"bufferNameRef\" to MethodInvocation at 2"]}, {"root": "INS ClassInstanceCreation to VariableDeclarationFragment at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Block to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Block to ClassInstanceCreation at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 8"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 13"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 5", "MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ClassInstanceCreation to Assignment: = at 1", "operations": ["INS ClassInstanceCreation to Assignment: = at 1"]}, {"root": "INS SimpleName: Operation to MethodInvocation at 0", "operations": ["INS SimpleName: Operation to MethodInvocation at 0"]}, {"root": "INS SimpleName: create to MethodInvocation at 1", "operations": ["INS SimpleName: create to MethodInvocation at 1"]}, {"root": "INS QualifiedName: Operator.ADDITION to MethodInvocation at 2", "operations": ["INS QualifiedName: Operator.ADDITION to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Block to ClassInstanceCreation at 0"]}, {"root": "UPDATE from s to stringLiteral", "operations": ["UPD SimpleName: s from s to stringLiteral"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: s to MethodInvocation at 1"]}, {"root": "UPDATE from Statement to Block", "operations": ["UPD SimpleName: Statement from Statement to Block"]}, {"root": "MOVE from SimpleType: Block", "operations": ["MOV SimpleName: Statement to SimpleType: Block at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from s to b", "operations": ["UPD SimpleName: s from s to b"]}, {"root": "INS SimpleName: insertBefore to MethodInvocation at 1", "operations": ["INS SimpleName: insertBefore to MethodInvocation at 1"]}, {"root": "INS NullLiteral to MethodInvocation at 3", "operations": ["INS NullLiteral to MethodInvocation at 3"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ClassInstanceCreation to ClassInstanceCreation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL ClassInstanceCreation", "DEL MethodInvocation", "DEL SimpleName: emptyList", "DEL SimpleName: Statement", "DEL SimpleName: s", "DEL SimpleName: Collections", "DEL MethodInvocation", "DEL SimpleType: Statement"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: bindings", "DEL MethodInvocation", "DEL StringLiteral: \"assignedNameRef\"", "DEL SimpleName: put"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: bindings", "DEL StringLiteral: \"bufferNameFormal\"", "DEL MethodInvocation", "DEL SimpleName: put"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: bindings", "DEL SimpleName: put", "DEL MethodInvocation", "DEL StringLiteral: \"bufferNameRef\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: insertBefore", "DEL MethodInvocation", "DEL NullLiteral", "DEL SimpleName: b"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation", "DEL SimpleType: Statement", "DEL SimpleName: emptyList", "DEL MethodInvocation", "DEL ClassInstanceCreation", "DEL SimpleName: Collections"]}, {"root": "DEL MethodInvocation", "operations": ["DEL ClassInstanceCreation", "DEL SimpleType: Statement", "DEL SimpleName: emptyList", "DEL MethodInvocation", "DEL SimpleName: Statement", "DEL SimpleName: s", "DEL SimpleName: Collections", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation", "DEL SimpleName: create", "DEL MethodInvocation", "DEL QualifiedName: Operator.ADDITION", "DEL SimpleName: Operation"]}]}}, {"GxpCompiler_diff": {"operations": ["Move ImportDeclaration(41) into CompilationUnit(5571) at 39", "Update QualifiedName: com.google.caja.parser.SyntheticNodes(40) to com.google.caja.parser.js.SyntheticNodes", "Update QualifiedName: com.google.caja.parser.SyntheticNodes.s(122) to com.google.caja.parser.js.SyntheticNodes.s", "Move SimpleType: Block(819) into VariableDeclarationStatement(817) at 0", "Move MethodInvocation(911) into ExpressionStatement(900) at 0", "Move MethodInvocation(948) into ExpressionStatement(935) at 0", "Move MethodInvocation(959) into ExpressionStatement(944) at 0", "Insert ClassInstanceCreation(815) into VariableDeclarationFragment(816) at 1", "Update SimpleName: s(906) to bindings", "Insert SimpleName: put(893) into MethodInvocation(899) at 1", "Insert StringLiteral: \"assignedNameRef\"(894) into MethodInvocation(899) at 2", "Update SimpleName: s(943) to bindings", "Insert SimpleName: put(928) into MethodInvocation(934) at 1", "Insert StringLiteral: \"bufferNameFormal\"(929) into MethodInvocation(934) at 2", "Update SimpleName: s(954) to bindings", "Insert SimpleName: put(937) into MethodInvocation(943) at 1", "Insert StringLiteral: \"bufferNameRef\"(938) into MethodInvocation(943) at 2", "Insert ClassInstanceCreation(3051) into VariableDeclarationFragment(3052) at 1", "Move ClassInstanceCreation(3113) into VariableDeclarationFragment(3076) at 1", "Move MethodInvocation(4091) into VariableDeclarationFragment(4048) at 1", "Move SimpleType: Block(815) into ClassInstanceCreation(815) at 0", "Move SimpleType: Block(3061) into ClassInstanceCreation(3051) at 0", "Move ClassInstanceCreation(760) into VariableDeclarationFragment(760) at 1", "Move ClassInstanceCreation(783) into VariableDeclarationFragment(781) at 1", "Move ClassInstanceCreation(3418) into MethodInvocation(3403) at 8", "Move ClassInstanceCreation(3437) into MethodInvocation(3403) at 13", "Move MethodInvocation(5489) into VariableDeclarationFragment(5450) at 1", "Insert ClassInstanceCreation(3038) into Assignment: =(3039) at 1", "Insert SimpleName: Operation(5417) into MethodInvocation(5449) at 0", "Insert SimpleName: create(5418) into MethodInvocation(5449) at 1", "Insert QualifiedName: Operator.ADDITION(5419) into MethodInvocation(5449) at 2", "Move MethodInvocation(5496) into MethodInvocation(5449) at 5", "Move SimpleType: Block(3081) into ClassInstanceCreation(3038) at 0", "Update SimpleName: s(5466) to stringLiteral", "Move SimpleName: s(5466) into MethodInvocation(5448) at 1", "Move MethodInvocation(2055) into ExpressionStatement(2037) at 0", "Update SimpleName: s(2035) to b", "Insert SimpleName: insertBefore(2017) into MethodInvocation(2036) at 1", "Insert NullLiteral(2035) into MethodInvocation(2036) at 3", "Move ClassInstanceCreation(2052) into ClassInstanceCreation(2034) at 2", "Move ClassInstanceCreation(2112) into MethodInvocation(2091) at 3", "Delete SimpleName: s(756)", "Delete MethodInvocation(761)", "Delete SimpleName: s(779)", "Delete MethodInvocation(784)", "Delete SimpleName: s(817)", "Delete SimpleName: Collections(820)", "Delete SimpleName: Statement(821)", "Delete SimpleType: Statement(822)", "Delete SimpleName: emptyList(823)", "Delete MethodInvocation(824)", "Delete ClassInstanceCreation(825)", "Delete MethodInvocation(826)", "Delete SimpleName: bindings(903)", "Delete SimpleName: put(904)", "Delete StringLiteral: \"assignedNameRef\"(905)", "Delete MethodInvocation(912)", "Delete SimpleName: bindings(940)", "Delete SimpleName: put(941)", "Delete StringLiteral: \"bufferNameFormal\"(942)", "Delete MethodInvocation(949)", "Delete SimpleName: bindings(951)", "Delete SimpleName: put(952)", "Delete StringLiteral: \"bufferNameRef\"(953)", "Delete MethodInvocation(960)", "Delete SimpleName: s(2044)", "Delete MethodInvocation(2053)", "Delete SimpleName: b(2033)", "Delete SimpleName: insertBefore(2034)", "Delete NullLiteral(2056)", "Delete MethodInvocation(2057)", "Delete SimpleName: s(2108)", "Delete MethodInvocation(2113)", "Delete SimpleName: s(3059)", "Delete SimpleName: Collections(3062)", "Delete SimpleType: Statement(3064)", "Delete SimpleName: emptyList(3065)", "Delete MethodInvocation(3066)", "Delete ClassInstanceCreation(3067)", "Delete MethodInvocation(3068)", "Delete SimpleName: s(3079)", "Delete SimpleName: Collections(3082)", "Delete SimpleName: Statement(3083)", "Delete SimpleType: Statement(3084)", "Delete SimpleName: emptyList(3085)", "Delete MethodInvocation(3086)", "Delete ClassInstanceCreation(3087)", "Delete MethodInvocation(3088)", "Delete SimpleName: s(3094)", "Delete MethodInvocation(3114)", "Delete SimpleName: s(3409)", "Delete MethodInvocation(3419)", "Delete SimpleName: s(3428)", "Delete MethodInvocation(3438)", "Delete SimpleName: s(4086)", "Delete MethodInvocation(4092)", "Delete SimpleName: s(5462)", "Delete SimpleName: Operation(5463)", "Delete SimpleName: create(5464)", "Delete QualifiedName: Operator.ADDITION(5465)", "Delete MethodInvocation(5497)", "Delete MethodInvocation(5498)"]}}, {"HtmlCompiler_cluster": {"actions": [{"root": "UPDATE from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes.s from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 5", "MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: Operation to MethodInvocation at 0", "operations": ["INS SimpleName: Operation to MethodInvocation at 0"]}, {"root": "INS SimpleName: create to MethodInvocation at 1", "operations": ["INS SimpleName: create to MethodInvocation at 1"]}, {"root": "INS QualifiedName: Operator.ADDITION to MethodInvocation at 2", "operations": ["INS QualifiedName: Operator.ADDITION to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL QualifiedName: Operator.ADDITION", "DEL MethodInvocation", "DEL SimpleName: create", "DEL SimpleName: s", "DEL SimpleName: Operation"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: r", "DEL SimpleName: s", "DEL ExpressionStatement", "DEL MethodInvocation"]}]}}, {"HtmlCompiler_diff": {"operations": ["Update QualifiedName: com.google.caja.parser.SyntheticNodes.s(88) to com.google.caja.parser.js.SyntheticNodes.s", "Move ClassInstanceCreation(277) into VariableDeclarationFragment(277) at 1", "Move MethodInvocation(1200) into Assignment: =(1198) at 1", "Move MethodInvocation(2110) into VariableDeclarationFragment(2108) at 1", "Insert SimpleName: Operation(2075) into MethodInvocation(2107) at 0", "Insert SimpleName: create(2076) into MethodInvocation(2107) at 1", "Insert QualifiedName: Operator.ADDITION(2077) into MethodInvocation(2107) at 2", "Move MethodInvocation(2117) into MethodInvocation(2107) at 5", "Move ClassInstanceCreation(2023) into MethodInvocation(2028) at 2", "Move ClassInstanceCreation(2034) into MethodInvocation(2028) at 3", "Delete SimpleName: s(269)", "Delete MethodInvocation(278)", "Delete SimpleName: s(1194)", "Delete MethodInvocation(1201)", "Delete SimpleName: s(2014)", "Delete MethodInvocation(2024)", "Delete SimpleName: s(2025)", "Delete MethodInvocation(2035)", "Delete SimpleName: s(2083)", "Delete SimpleName: Operation(2084)", "Delete SimpleName: create(2085)", "Delete QualifiedName: Operator.ADDITION(2086)", "Delete MethodInvocation(2118)", "Delete MethodInvocation(2119)", "Delete SimpleName: s(2406)", "Delete SimpleName: r(2407)", "Delete MethodInvocation(2408)", "Delete ExpressionStatement(2409)"]}}, {"JsWriter_cluster": {"actions": [{"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from s to JsWriter", "operations": ["UPD SimpleName: s from s to JsWriter", "UPD SimpleName: s from s to JsWriter"]}, {"root": "INS SimpleName: append to MethodInvocation at 1", "operations": ["INS SimpleName: append to MethodInvocation at 1"]}, {"root": "INS SimpleName: tgtChain to MethodInvocation at 3", "operations": ["INS SimpleName: tgtChain to MethodInvocation at 3"]}, {"root": "INS SimpleName: b to MethodInvocation at 4", "operations": ["INS SimpleName: b to MethodInvocation at 4"]}, {"root": "INS SimpleName: append to MethodInvocation at 1", "operations": ["INS SimpleName: append to MethodInvocation at 1"]}, {"root": "INS SimpleName: tgtChain to MethodInvocation at 3", "operations": ["INS SimpleName: tgtChain to MethodInvocation at 3"]}, {"root": "INS SimpleName: b to MethodInvocation at 4", "operations": ["INS SimpleName: b to MethodInvocation at 4"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "UPDATE from s to b", "operations": ["UPD SimpleName: s from s to b"]}, {"root": "INS SimpleName: insertBefore to MethodInvocation at 1", "operations": ["INS SimpleName: insertBefore to MethodInvocation at 1"]}, {"root": "INS NullLiteral to MethodInvocation at 3", "operations": ["INS NullLiteral to MethodInvocation at 3"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV MethodInvocation to Assignment: = at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.SyntheticNodes.s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: b", "DEL NullLiteral", "DEL SimpleName: insertBefore"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: append", "DEL MethodInvocation", "DEL SimpleName: b", "DEL SimpleName: tgtChain", "DEL SimpleName: JsWriter"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: append", "DEL SimpleName: b", "DEL SimpleName: tgtChain", "DEL SimpleName: JsWriter"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}]}}, {"JsWriter_diff": {"operations": ["Move MethodInvocation(330) into ExpressionStatement(324) at 0", "Move MethodInvocation(383) into ExpressionStatement(375) at 0", "Update SimpleName: s(322) to JsWriter", "Insert SimpleName: append(313) into MethodInvocation(323) at 1", "Insert SimpleName: tgtChain(321) into MethodInvocation(323) at 3", "Insert SimpleName: b(322) into MethodInvocation(323) at 4", "Update SimpleName: s(368) to JsWriter", "Insert SimpleName: append(357) into MethodInvocation(374) at 1", "Insert SimpleName: tgtChain(372) into MethodInvocation(374) at 3", "Insert SimpleName: b(373) into MethodInvocation(374) at 4", "Move MethodInvocation(209) into ExpressionStatement(206) at 0", "Move MethodInvocation(198) into Assignment: =(196) at 1", "Update SimpleName: s(204) to b", "Insert SimpleName: insertBefore(199) into MethodInvocation(205) at 1", "Insert NullLiteral(204) into MethodInvocation(205) at 3", "Move MethodInvocation(601) into Assignment: =(589) at 1", "Move ClassInstanceCreation(277) into VariableDeclarationFragment(271) at 1", "Delete QualifiedName: com.google.caja.parser.SyntheticNodes.s(36)", "Delete ImportDeclaration(37)", "Delete SimpleName: s(193)", "Delete MethodInvocation(199)", "Delete SimpleName: b(202)", "Delete SimpleName: insertBefore(203)", "Delete NullLiteral(210)", "Delete MethodInvocation(211)", "Delete SimpleName: s(256)", "Delete MethodInvocation(278)", "Delete SimpleName: JsWriter(320)", "Delete SimpleName: append(321)", "Delete SimpleName: tgtChain(331)", "Delete SimpleName: b(332)", "Delete MethodInvocation(333)", "Delete SimpleName: JsWriter(366)", "Delete SimpleName: append(367)", "Delete SimpleName: tgtChain(384)", "Delete SimpleName: b(385)", "Delete MethodInvocation(386)", "Delete SimpleName: s(589)", "Delete MethodInvocation(602)"]}}, {"TreeConstruction_cluster": {"actions": [{"root": "UPDATE from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes.s from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV MethodInvocation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "MOVE from ExpressionStatement", "operations": ["MOV MethodInvocation to ExpressionStatement at 0"]}, {"root": "UPDATE from s to params", "operations": ["UPD SimpleName: s from s to params"]}, {"root": "INS SimpleName: add to MethodInvocation at 1", "operations": ["INS SimpleName: add to MethodInvocation at 1"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: params", "DEL MethodInvocation", "DEL SimpleName: add"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}]}}, {"TreeConstruction_diff": {"operations": ["Update QualifiedName: com.google.caja.parser.SyntheticNodes.s(22) to com.google.caja.parser.js.SyntheticNodes.s", "Move MethodInvocation(64) into ReturnStatement(64) at 0", "Move MethodInvocation(88) into ReturnStatement(86) at 0", "Move ClassInstanceCreation(162) into ReturnStatement(156) at 0", "Move ClassInstanceCreation(191) into ReturnStatement(181) at 0", "Move ClassInstanceCreation(218) into ReturnStatement(206) at 0", "Move MethodInvocation(189) into ClassInstanceCreation(180) at 1", "Move MethodInvocation(146) into ExpressionStatement(142) at 0", "Update SimpleName: s(136) to params", "Insert SimpleName: add(131) into MethodInvocation(141) at 1", "Delete SimpleName: s(54)", "Delete MethodInvocation(65)", "Delete SimpleName: s(83)", "Delete MethodInvocation(89)", "Delete SimpleName: params(134)", "Delete SimpleName: add(135)", "Delete MethodInvocation(147)", "Delete SimpleName: s(151)", "Delete MethodInvocation(163)", "Delete SimpleName: s(183)", "Delete MethodInvocation(190)", "Delete SimpleName: s(180)", "Delete MethodInvocation(192)", "Delete SimpleName: s(209)", "Delete MethodInvocation(219)"]}}, {"ExpressionLanguageStage_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 8"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}]}}, {"ExpressionLanguageStage_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(353) at 8", "Update QualifiedName: com.google.caja.parser.SyntheticNodes(6) to com.google.caja.parser.js.SyntheticNodes"]}}, {"Parser_cluster": {"actions": [{"root": "INS InstanceofExpression to InfixExpression: || at 2", "operations": ["INS SimpleType: WithStmt to InstanceofExpression at 1", "INS SimpleName: s to InstanceofExpression at 0", "INS SimpleName: WithStmt to SimpleType: WithStmt at 0", "INS InstanceofExpression to InfixExpression: || at 2"]}]}}, {"Parser_diff": {"operations": ["Insert InstanceofExpression(4133) into InfixExpression: ||(4134) at 2", "Insert SimpleName: s(4130) into InstanceofExpression(4133) at 0", "Insert SimpleType: WithStmt(4132) into InstanceofExpression(4133) at 1", "Insert SimpleName: WithStmt(4131) into SimpleType: WithStmt(4132) at 0"]}}, {"DefaultCajaRewriter_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 34"]}, {"root": "INS ImportDeclaration to CompilationUnit at 17", "operations": ["INS ImportDeclaration to CompilationUnit at 17", "INS QualifiedName: com.google.caja.parser.js.FormalParam to ImportDeclaration at 0"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes.s from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 1", "operations": ["INS SimpleName: Reference to SimpleType: Reference at 0", "INS SimpleName: node to ReturnStatement at 0", "INS SimpleName: matches to MemberValuePair at 0", "INS IfStatement to Block at 1", "INS Block to IfStatement at 1", "INS SimpleName: name to MemberValuePair at 0", "INS SimpleName: node to CastExpression at 1", "INS ClassInstanceCreation to ArrayInitializer at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS MemberValuePair to NormalAnnotation at 1", "INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: synopsis to MemberValuePair at 0", "INS SimpleName: ref to MethodInvocation at 0", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS StringLiteral: \"syntheticReferemce\" to MemberValuePair at 1", "INS ReturnStatement to Block at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS StringLiteral: \"A synthetic method may not be marked callable.\" to MemberValuePair at 1", "INS SimpleName: getIdentifier to MethodInvocation at 1", "INS SimpleName: ref to VariableDeclarationFragment at 0", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS MethodInvocation to MethodInvocation at 1", "INS StringLiteral: \"Pass through calls where the method name is synthetic.\" to MemberValuePair at 1", "INS SimpleName: isSynthetic to MethodInvocation at 0", "INS SimpleName: fire to MethodDeclaration at 4", "INS SimpleName: reason to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 2", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: node to InstanceofExpression at 0", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NormalAnnotation to MethodDeclaration at 1", "INS Block to MethodDeclaration at 8", "INS MemberValuePair to NormalAnnotation at 4", "INS MemberValuePair to NormalAnnotation at 5", "INS SimpleType: Reference to InstanceofExpression at 1", "INS SimpleType: Reference to VariableDeclarationStatement at 0", "INS StringLiteral: \"/* synthetic */ @ref\" to MemberValuePair at 1", "INS SimpleName: substitutes to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS Modifier: public to MethodDeclaration at 2", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: Reference to CastExpression at 0"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 2", "operations": ["INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \"m\" to MethodInvocation at 2", "INS SimpleName: isSynthetic to MethodInvocation at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: String to ParameterizedType: Map<String,ParseTreeNode> at 1", "INS NormalAnnotation to MethodDeclaration at 1", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS SimpleName: bindings to VariableDeclarationFragment at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ClassInstanceCreation to ArrayInitializer at 2", "INS IfStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS StringLiteral: \"Pass through calls where the method name is synthetic.\" to MemberValuePair at 1", "INS SimpleName: match to MethodInvocation at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "INS MemberValuePair to NormalAnnotation at 4", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS ParameterizedType: Map<String,ParseTreeNode> to VariableDeclarationStatement at 0", "INS SimpleName: substitutes to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 2", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS VariableDeclarationStatement to Block at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleType: Map to ParameterizedType: Map<String,ParseTreeNode> at 0", "INS StringLiteral: \"A synthetic method may not be marked callable.\" to MemberValuePair at 1", "INS SimpleType: Rule to ClassInstanceCreation at 0", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS MethodInvocation to CastExpression at 1", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: reason to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 1", "INS SimpleName: synopsis to MemberValuePair at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS Block to MethodDeclaration at 8", "INS ThisExpression to MethodInvocation at 0", "INS StringLiteral: \"/* synthetic */ @o.@m(@as*)\" to MemberValuePair at 1", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS SimpleName: name to MemberValuePair at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: fire to MethodDeclaration at 4", "INS SimpleName: matches to MemberValuePair at 0", "INS CastExpression to MethodInvocation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: Rule to SimpleType: Rule at 0", "INS SimpleName: bindings to InfixExpression: != at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: bindings to MethodInvocation at 0", "INS SimpleType: ParseTreeNode to ParameterizedType: Map<String,ParseTreeNode> at 2", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: NONE to ReturnStatement at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS StringLiteral: \"syntheticCalls\" to MemberValuePair at 1", "INS SimpleType: Reference to CastExpression at 0"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 3", "operations": ["INS ReturnStatement to Block at 0", "INS MemberValuePair to NormalAnnotation at 1", "INS SimpleName: Rule to SimpleType: Rule at 0", "INS SimpleType: Reference to CastExpression at 0", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS SimpleName: node to MethodInvocation at 2", "INS CastExpression to MethodInvocation at 1", "INS StringLiteral: \"syntheticDeletes\" to MemberValuePair at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: fire to MethodDeclaration at 4", "INS SimpleType: Map to ParameterizedType: Map<String,ParseTreeNode> at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS Block to IfStatement at 1", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "INS SimpleName: NONE to ReturnStatement at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: synopsis to MemberValuePair at 0", "INS SimpleType: String to ParameterizedType: Map<String,ParseTreeNode> at 1", "INS SimpleName: expandAll to MethodInvocation at 0", "INS ClassInstanceCreation to ArrayInitializer at 3", "INS StringLiteral: \"m\" to MethodInvocation at 2", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: bindings to VariableDeclarationFragment at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS IfStatement to Block at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS StringLiteral: \"/* synthetic */ delete @o.@m\" to MemberValuePair at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: get to MethodInvocation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS StringLiteral: \"A synthetic member may not be marked deletable.\" to MemberValuePair at 1", "INS SimpleName: substitutes to MemberValuePair at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: ParseTreeNode to ParameterizedType: Map<String,ParseTreeNode> at 2", "INS SimpleName: bindings to MethodInvocation at 0", "INS SimpleName: matches to MemberValuePair at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS MemberValuePair to NormalAnnotation at 3", "INS ReturnStatement to Block at 2", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS SimpleType: Rule to ClassInstanceCreation at 0", "INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS ThisExpression to MethodInvocation at 0", "INS SimpleName: name to MemberValuePair at 0", "INS SimpleName: scope to MethodInvocation at 2", "INS StringLiteral: \"Pass through reads of synthetic members.\" to MemberValuePair at 1", "INS ParameterizedType: Map<String,ParseTreeNode> to VariableDeclarationStatement at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: isSynthetic to MethodInvocation at 0", "INS SimpleName: reason to MemberValuePair at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: match to MethodInvocation at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS MemberValuePair to NormalAnnotation at 2", "INS InfixExpression: && to IfStatement at 0", "INS SimpleName: mq to MethodInvocation at 3", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS NormalAnnotation to MethodDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS MemberValuePair to NormalAnnotation at 4", "INS SimpleName: bindings to InfixExpression: != at 0"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 5", "operations": ["INS SimpleName: expandAll to MethodInvocation at 0", "INS SimpleName: scope to MethodInvocation at 2", "INS MemberValuePair to NormalAnnotation at 5", "INS StringLiteral: \"syntheticSetMember\" to MemberValuePair at 1", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 1", "INS SimpleType: String to ParameterizedType: Map<String,ParseTreeNode> at 1", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS Block to IfStatement at 1", "INS SimpleName: match to MethodInvocation at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleName: matches to MemberValuePair at 0", "INS SimpleName: NONE to ReturnStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "INS SimpleType: Map to ParameterizedType: Map<String,ParseTreeNode> at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS ThisExpression to MethodInvocation at 0", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS SimpleName: substitutes to MemberValuePair at 0", "INS ReturnStatement to Block at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS Block to MethodDeclaration at 8", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleType: ParseTreeNode to ParameterizedType: Map<String,ParseTreeNode> at 2", "INS SimpleName: bindings to VariableDeclarationFragment at 0", "INS MemberValuePair to NormalAnnotation at 4", "INS MemberValuePair to NormalAnnotation at 2", "INS SimpleType: Rule to ClassInstanceCreation at 0", "INS SimpleName: reason to MemberValuePair at 0", "INS SimpleName: name to MemberValuePair at 0", "INS NormalAnnotation to MethodDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS StringLiteral: \"A synthetic member may not be marked writable.\" to MemberValuePair at 1", "INS StringLiteral: \"/* synthetic */ @o.@m = @v\" to MemberValuePair at 1", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: Rule to SimpleType: Rule at 0", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS StringLiteral: \"Pass through sets of synthetic members.\" to MemberValuePair at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS ClassInstanceCreation to ArrayInitializer at 5", "INS SimpleName: synopsis to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS IfStatement to Block at 1", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS MethodInvocation to ReturnStatement at 0", "INS ParameterizedType: Map<String,ParseTreeNode> to VariableDeclarationStatement at 0", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 6", "operations": ["INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS MethodInvocation to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: Identifier to CastExpression at 0", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: node to MethodInvocation at 2", "INS MethodInvocation to CastExpression at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: bindings to VariableDeclarationFragment at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: match to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: bindings to MethodInvocation at 0", "INS SimpleType: Map to ParameterizedType: Map<String,ParseTreeNode> at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS CastExpression to MethodInvocation at 1", "INS StringLiteral: \"lhs\" to MethodInvocation at 2", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "INS StringLiteral: \"Pass through set of synthetic vars.\" to MemberValuePair at 1", "INS ClassInstanceCreation to ArrayInitializer at 6", "INS StringLiteral: \"/* synthetic */ @lhs___ = @rhs\" to MemberValuePair at 1", "INS NormalAnnotation to MethodDeclaration at 1", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: scope to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS IfStatement to Block at 0", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS ThisExpression to MethodInvocation at 0", "INS SimpleName: substitutes to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS InfixExpression: != to IfStatement at 0", "INS MemberValuePair to NormalAnnotation at 4", "INS SimpleName: isSynthetic to MethodInvocation at 0", "INS StringLiteral: \"syntheticSetVar\" to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: bindings to InfixExpression: != at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: NONE to ReturnStatement at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: synopsis to MemberValuePair at 0", "INS StringLiteral: \"A local variable might not be mentionable otherwise.\" to MemberValuePair at 1", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS ReturnStatement to Block at 2", "INS ParameterizedType: Map<String,ParseTreeNode> to VariableDeclarationStatement at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: Rule to SimpleType: Rule at 0", "INS SimpleName: expandAll to MethodInvocation at 0", "INS MemberValuePair to NormalAnnotation at 2", "INS SimpleName: matches to MemberValuePair at 0", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: name to MemberValuePair at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS Block to IfStatement at 1", "INS SimpleType: ParseTreeNode to ParameterizedType: Map<String,ParseTreeNode> at 2", "INS MemberValuePair to NormalAnnotation at 5", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: reason to MemberValuePair at 0", "INS SimpleType: Rule to ClassInstanceCreation at 0", "INS SimpleType: String to ParameterizedType: Map<String,ParseTreeNode> at 1", "INS SimpleName: get to MethodInvocation at 1", "INS MarkerAnnotation to MethodDeclaration at 0", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: mq to MethodInvocation at 3", "INS SimpleName: fire to MethodDeclaration at 4", "INS IfStatement to Block at 1"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 7", "operations": ["INS CastExpression to MethodInvocation at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS NullLiteral to InfixExpression: != at 1", "INS ParameterizedType: Map<String,ParseTreeNode> to VariableDeclarationStatement at 0", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS SimpleName: substitutes to MemberValuePair at 0", "INS SimpleName: fire to MethodDeclaration at 4", "INS SimpleType: String to ParameterizedType: Map<String,ParseTreeNode> at 1", "INS SimpleName: expandAll to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: matches to MemberValuePair at 0", "INS MemberValuePair to NormalAnnotation at 4", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS MethodInvocation to CastExpression at 1", "INS StringLiteral: \"/* synthetic */ var @v___ = @initial?;\" to MemberValuePair at 1", "INS SimpleType: Identifier to CastExpression at 0", "INS ClassInstanceCreation to ArrayInitializer at 7", "INS SimpleType: ParseTreeNode to ParameterizedType: Map<String,ParseTreeNode> at 2", "INS ReturnStatement to Block at 0", "INS NormalAnnotation to MethodDeclaration at 1", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: scope to MethodInvocation at 2", "INS SimpleName: reason to MemberValuePair at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Override to MarkerAnnotation at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: String to SimpleType: String at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 8", "INS MemberValuePair to NormalAnnotation at 2", "INS StringLiteral: \"Pass through synthetic variables which are unmentionable.\" to MemberValuePair at 1", "INS SimpleType: Map to ParameterizedType: Map<String,ParseTreeNode> at 0", "INS SimpleName: bindings to VariableDeclarationFragment at 0", "INS SimpleName: synopsis to MemberValuePair at 0", "INS Block to IfStatement at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: Rule to SimpleType: Rule at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS IfStatement to Block at 1", "INS ReturnStatement to Block at 2", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: isSynthetic to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS MemberValuePair to NormalAnnotation at 1", "INS SimpleName: bindings to MethodInvocation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleName: mq to MethodInvocation at 3", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: bindings to InfixExpression: != at 0", "INS InfixExpression: && to IfStatement at 0", "INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "INS SimpleType: Rule to ClassInstanceCreation at 0", "INS ThisExpression to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS MemberValuePair to NormalAnnotation at 3", "INS StringLiteral: \"syntheticDeclaration\" to MemberValuePair at 1", "INS SimpleName: get to MethodInvocation at 1", "INS StringLiteral: \"Synthetic code might need local variables for safe-keeping.\" to MemberValuePair at 1", "INS StringLiteral: \"v\" to MethodInvocation at 2", "INS SimpleName: NONE to ReturnStatement at 0", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS SimpleName: match to MethodInvocation at 1", "INS SimpleName: name to MemberValuePair at 0"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 8", "operations": ["INS StringLiteral: \"/* synthetic */ function @i?(@actuals*) { @body* }\" to MemberValuePair at 1", "INS SimpleName: FunctionConstructor to SimpleType: FunctionConstructor at 0", "INS SimpleName: node to CastExpression at 1", "INS MemberValuePair to NormalAnnotation at 2", "INS SimpleName: scope to MethodInvocation at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: substitutes to MemberValuePair at 0", "INS SimpleName: name to MemberValuePair at 0", "INS ParenthesizedExpression to MethodInvocation at 0", "INS ReturnStatement to Block at 2", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: node to MethodInvocation at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: synopsis to MemberValuePair at 0", "INS SimpleType: FunctionConstructor to CastExpression at 0", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS VariableDeclarationStatement to Block at 0", "INS StringLiteral: \" unnecessary scopes.\" to InfixExpression: + at 1", "INS SimpleName: node to CastExpression at 1", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleName: FunctionDeclaration to SimpleType: FunctionDeclaration at 0", "INS SimpleName: NONE to ReturnStatement at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS NormalAnnotation to MethodDeclaration at 1", "INS SimpleName: reason to MemberValuePair at 0", "INS ClassInstanceCreation to ArrayInitializer at 8", "INS InstanceofExpression to ConditionalExpression at 0", "INS SimpleName: ctor to VariableDeclarationFragment at 0", "INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS SimpleName: mq to MethodInvocation at 3", "INS SimpleType: FunctionConstructor to VariableDeclarationStatement at 0", "INS SimpleName: expandAll to MethodInvocation at 0", "INS CastExpression to ParenthesizedExpression at 0", "INS Block to IfStatement at 1", "INS StringLiteral: \"Allow declaration of synthetic functions.\" to MemberValuePair at 1", "INS MemberValuePair to NormalAnnotation at 4", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Rule to SimpleType: Rule at 0", "INS StringLiteral: \"Synthetic functions allow generated code to avoid introducing\" to InfixExpression: + at 0", "INS ReturnStatement to Block at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: ctor to MethodInvocation at 1", "INS SimpleType: Rule to ClassInstanceCreation at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS MethodInvocation to ConditionalExpression at 1", "INS ConditionalExpression to VariableDeclarationFragment at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleType: FunctionDeclaration to CastExpression at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS CastExpression to ConditionalExpression at 2", "INS MemberValuePair to NormalAnnotation at 5", "INS SimpleName: isSynthetic to MethodInvocation at 0", "INS SimpleName: node to InstanceofExpression at 0", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS SimpleName: FunctionConstructor to SimpleType: FunctionConstructor at 0", "INS StringLiteral: \"syntheticFnDeclaration\" to MemberValuePair at 1", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: fire to MethodDeclaration at 4", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS SimpleName: FunctionDeclaration to SimpleType: FunctionDeclaration at 0", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS InfixExpression: + to MemberValuePair at 1", "INS SimpleType: FunctionDeclaration to InstanceofExpression at 1", "INS IfStatement to Block at 1", "INS SimpleName: matches to MemberValuePair at 0", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS MethodInvocation to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS MemberValuePair to NormalAnnotation at 1"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 9", "operations": ["INS SingleVariableDeclaration to MethodDeclaration at 5", "INS VariableDeclarationStatement to Block at 0", "INS MethodInvocation to CastExpression at 1", "INS Block to IfStatement at 1", "INS SimpleName: bindings to MethodInvocation at 0", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS SimpleName: ex to VariableDeclarationFragment at 0", "INS ClassInstanceCreation to ArrayInitializer at 9", "INS SimpleName: Declaration to SimpleType: Declaration at 0", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS SimpleType: Declaration to CastExpression at 0", "INS StringLiteral: \"try { @body* } catch (/* synthetic */ @ex___) { @handler*; }\" to ParenthesizedExpression at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS IfStatement to Block at 1", "INS SimpleName: synopsis to MemberValuePair at 0", "INS SimpleName: NONE to ReturnStatement at 0", "INS IfStatement to Block at 1", "INS MethodInvocation to MethodInvocation at 1", "INS MemberValuePair to NormalAnnotation at 4", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleType: Map to ParameterizedType: Map<String,ParseTreeNode> at 0", "INS SimpleName: bindings to VariableDeclarationFragment at 0", "INS SimpleType: String to ParameterizedType: Map<String,ParseTreeNode> at 1", "INS SimpleName: fire to MethodDeclaration at 4", "INS SimpleName: reason to MemberValuePair at 0", "INS SimpleName: bindings to InfixExpression: != at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS SimpleName: ex to MethodInvocation at 0", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS SimpleName: Rule to SimpleType: Rule at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: match to MethodInvocation at 1", "INS ParenthesizedExpression to MemberValuePair at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: Declaration to SimpleType: Declaration at 0", "INS StringLiteral: \"Pass through synthetic variables which are unmentionable.\" to MemberValuePair at 1", "INS SimpleType: ParseTreeNode to ParameterizedType: Map<String,ParseTreeNode> at 2", "INS SimpleType: Declaration to VariableDeclarationStatement at 0", "INS Block to MethodDeclaration at 8", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS MethodInvocation to IfStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS MemberValuePair to NormalAnnotation at 2", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: substitutes to MemberValuePair at 0", "INS Modifier: public to MethodDeclaration at 2", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS NullLiteral to InfixExpression: != at 1", "INS MemberValuePair to NormalAnnotation at 1", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "INS MemberValuePair to NormalAnnotation at 5", "INS MarkerAnnotation to MethodDeclaration at 0", "INS InfixExpression: != to IfStatement at 0", "INS Block to IfStatement at 1", "INS NormalAnnotation to MethodDeclaration at 1", "INS ReturnStatement to Block at 2", "INS ParameterizedType: Map<String,ParseTreeNode> to VariableDeclarationStatement at 0", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS SimpleName: isSynthetic to MethodInvocation at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS SimpleType: Rule to ClassInstanceCreation at 0", "INS StringLiteral: \"Catching unmentionable exceptions helps maintain invariants.\" to MemberValuePair at 1", "INS StringLiteral: \"syntheticCatches1\" to MemberValuePair at 1", "INS StringLiteral: \"ex\" to MethodInvocation at 2", "INS SimpleName: name to MemberValuePair at 0", "INS SimpleName: matches to MemberValuePair at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS SimpleName: getIdentifier to MethodInvocation at 1"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 10", "operations": ["INS SimpleType: Declaration to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: node to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Scope to SimpleType: Scope at 0", "INS IfStatement to Block at 1", "INS SimpleName: mq to MethodInvocation at 3", "INS ReturnStatement to Block at 0", "INS StringLiteral: \"try { @body* } catch (/* synthetic */ @ex___) { @handler*; }\" to InfixExpression: + at 0", "INS Block to MethodDeclaration at 8", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS Block to IfStatement at 1", "INS SimpleName: ex to MethodInvocation at 0", "INS SimpleName: match to MethodInvocation at 1", "INS SimpleName: Declaration to SimpleType: Declaration at 0", "INS NormalAnnotation to MethodDeclaration at 1", "INS SimpleName: fire to MethodDeclaration at 4", "INS SimpleName: bindings to VariableDeclarationFragment at 0", "INS SimpleName: bindings to InfixExpression: != at 0", "INS ReturnStatement to Block at 2", "INS SimpleType: String to ParameterizedType: Map<String,ParseTreeNode> at 1", "INS InfixExpression: + to ParenthesizedExpression at 0", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: Rule to SimpleType: Rule at 0", "INS SimpleName: Override to MarkerAnnotation at 0", "INS SimpleName: getIdentifier to MethodInvocation at 1", "INS ClassInstanceCreation to ArrayInitializer at 10", "INS IfStatement to Block at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleType: Rule to ClassInstanceCreation at 0", "INS SimpleName: expandAll to MethodInvocation at 0", "INS MemberValuePair to NormalAnnotation at 5", "INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: Declaration to SimpleType: Declaration at 0", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleType: Declaration to CastExpression at 0", "INS SimpleName: name to MemberValuePair at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5", "INS SimpleName: isSynthetic to MethodInvocation at 0", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: NONE to ReturnStatement at 0", "INS NullLiteral to InfixExpression: != at 1", "INS ThisExpression to MethodInvocation at 0", "INS ParenthesizedExpression to MemberValuePair at 1", "INS StringLiteral: \"ex\" to MethodInvocation at 2", "INS SimpleName: Map to SimpleType: Map at 0", "INS MemberValuePair to NormalAnnotation at 2", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleType: ParseTreeNode to ParameterizedType: Map<String,ParseTreeNode> at 2", "INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS ParameterizedType: Map<String,ParseTreeNode> to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS StringLiteral: \"Catching unmentionable exceptions helps maintain invariants.\" to MemberValuePair at 1", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS StringLiteral: \"syntheticCatches2\" to MemberValuePair at 1", "INS StringLiteral: \"<expanded>\" to MemberValuePair at 1", "INS SimpleName: synopsis to MemberValuePair at 0", "INS SimpleName: RuleDescription to NormalAnnotation at 0", "INS MemberValuePair to NormalAnnotation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: matches to MemberValuePair at 0", "INS SimpleName: ex to VariableDeclarationFragment at 0", "INS MemberValuePair to NormalAnnotation at 3", "INS SimpleName: scope to MethodInvocation at 2", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SingleVariableDeclaration to MethodDeclaration at 7", "INS MemberValuePair to NormalAnnotation at 4", "INS SimpleName: reason to MemberValuePair at 0", "INS SimpleName: node to MethodInvocation at 2", "INS Block to IfStatement at 1", "INS SimpleName: substitutes to MemberValuePair at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: bindings to MethodInvocation at 0", "INS StringLiteral: \"Pass through synthetic variables which are unmentionable.\" to MemberValuePair at 1", "INS MethodInvocation to ReturnStatement at 0", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleType: Map to ParameterizedType: Map<String,ParseTreeNode> at 0", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS StringLiteral: \" finally { @cleanup* }\" to InfixExpression: + at 1", "INS MethodInvocation to MethodInvocation at 1", "INS InfixExpression: != to IfStatement at 0"]}, {"root": "INS ClassInstanceCreation to ArrayInitializer at 21", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS MethodDeclaration to AnonymousClassDeclaration at 0", "INS IfStatement to Block at 0", "INS MethodInvocation to IfStatement at 0", "INS SimpleType: Identifier to VariableDeclarationStatement at 0", "INS ClassInstanceCreation to ArrayInitializer at 21", "INS Modifier: public to MethodDeclaration at 2", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS Block to IfStatement at 1", "INS SimpleName: name to VariableDeclarationFragment at 0", "INS AnonymousClassDeclaration to ClassInstanceCreation at 1", "INS StringLiteral: \"__\" to MethodInvocation at 2", "INS Block to MethodDeclaration at 8", "INS SimpleName: fire to MethodDeclaration at 4", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS VariableDeclarationStatement to Block at 0", "INS IfStatement to Block at 1", "INS SimpleName: name to MethodInvocation at 0", "INS SimpleName: endsWith to MethodInvocation at 1"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Rule to ClassInstanceCreation at 0"]}, {"root": "INS SimpleType: Rule to ClassInstanceCreation at 0", "operations": ["INS SimpleType: Rule to ClassInstanceCreation at 0", "INS SimpleName: Rule to SimpleType: Rule at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Rule to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV SimpleType: ParseTreeNode to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV MarkerAnnotation to MethodDeclaration at 0"]}, {"root": "INS MarkerAnnotation to MethodDeclaration at 0", "operations": ["INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "INS SimpleType: ParseTreeNode to MethodDeclaration at 3", "operations": ["INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleType: ParseTreeNode to MethodDeclaration at 3"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 5", "operations": ["INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS SingleVariableDeclaration to MethodDeclaration at 5"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 6", "operations": ["INS SimpleType: Scope to SingleVariableDeclaration at 0", "INS SimpleName: scope to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 6", "INS SimpleName: Scope to SimpleType: Scope at 0"]}, {"root": "INS SingleVariableDeclaration to MethodDeclaration at 7", "operations": ["INS SimpleType: MessageQueue to SingleVariableDeclaration at 0", "INS SimpleName: MessageQueue to SimpleType: MessageQueue at 0", "INS SimpleName: mq to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 7"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV NormalAnnotation to MethodDeclaration at 1", "MOV SimpleType: ParseTreeNode to MethodDeclaration at 3", "MOV SingleVariableDeclaration to MethodDeclaration at 5", "MOV MarkerAnnotation to MethodDeclaration at 0", "MOV SingleVariableDeclaration to MethodDeclaration at 6", "MOV SingleVariableDeclaration to MethodDeclaration at 7", "MOV Modifier: public to MethodDeclaration at 2", "MOV SimpleName: fire to MethodDeclaration at 4"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS SimpleName: bindings to VariableDeclarationFragment at 0", "INS SimpleType: String to ParameterizedType: Map<String,ParseTreeNode> at 1", "INS ParameterizedType: Map<String,ParseTreeNode> to VariableDeclarationStatement at 0", "INS SimpleName: Map to SimpleType: Map at 0", "INS SimpleName: match to MethodInvocation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Map to ParameterizedType: Map<String,ParseTreeNode> at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: String to SimpleType: String at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS ThisExpression to MethodInvocation at 0", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleType: ParseTreeNode to ParameterizedType: Map<String,ParseTreeNode> at 2", "INS SimpleName: node to MethodInvocation at 2"]}, {"root": "INS ReturnStatement to Block at 2", "operations": ["INS ReturnStatement to Block at 2", "INS SimpleName: NONE to ReturnStatement at 0"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "UPDATE from \"synthetic\" to \"syntheticReads\"", "operations": ["UPD StringLiteral: \"synthetic\" from \"synthetic\" to \"syntheticReads\""]}, {"root": "UPDATE from \"Pass through synthetic nodes.\" to \"Pass through reads of synthetic members.\"", "operations": ["UPD StringLiteral: \"Pass through synthetic nodes.\" from \"Pass through synthetic nodes.\" to \"Pass through reads of synthetic members.\""]}, {"root": "INS StringLiteral: \"A synthetic member may not be marked readable.\" to MemberValuePair at 1", "operations": ["INS StringLiteral: \"A synthetic member may not be marked readable.\" to MemberValuePair at 1"]}, {"root": "UPDATE from \"<@synthetic>\" to \"/* synthetic */ @o.@m\"", "operations": ["UPD StringLiteral: \"<@synthetic>\" from \"<@synthetic>\" to \"/* synthetic */ @o.@m\""]}, {"root": "UPDATE from \"<@synthetic>\" to \"<expanded>\"", "operations": ["UPD StringLiteral: \"<@synthetic>\" from \"<@synthetic>\" to \"<expanded>\""]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS MethodInvocation to CastExpression at 1", "INS SimpleName: bindings to InfixExpression: != at 0", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS StringLiteral: \"m\" to MethodInvocation at 2", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleType: Reference to CastExpression at 0", "INS CastExpression to MethodInvocation at 1", "INS SimpleName: get to MethodInvocation at 1", "INS SimpleName: bindings to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: && at 1", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "INS Block to IfStatement at 1", "operations": ["INS Block to IfStatement at 1", "INS SimpleName: mq to MethodInvocation at 3", "INS ReturnStatement to Block at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: scope to MethodInvocation at 2", "INS SimpleName: expandAll to MethodInvocation at 0", "INS SimpleName: node to MethodInvocation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InfixExpression: && to IfStatement at 0", "MOV Block to IfStatement at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV InstanceofExpression to IfStatement at 0"]}, {"root": "INS InfixExpression: != to InfixExpression: && at 0", "operations": ["INS SimpleName: bindings to InfixExpression: != at 0", "INS NullLiteral to InfixExpression: != at 1", "INS InfixExpression: != to InfixExpression: && at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 2"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ClassInstanceCreation to Assignment: = at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 7"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 10"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 13"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleType: Identifier to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: exceptionName to VariableDeclarationFragment at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS SimpleName: exceptionName to VariableDeclarationFragment at 0", "INS SimpleType: Identifier to VariableDeclarationStatement at 0", "INS VariableDeclarationStatement to Block at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "UPDATE from \"whose earliest function scope ancestor is NOT a constructor or \" to \"whose earliest function scope ancestor is NOT a constructor \"", "operations": ["UPD StringLiteral: \"whose earliest function scope ancestor is NOT a constructor or \" from \"whose earliest function scope ancestor is NOT a constructor or \" to \"whose earliest function scope ancestor is NOT a constructor \""]}, {"root": "UPDATE from \"method into an exophoric function.\" to \"or method into an exophoric function.\"", "operations": ["UPD StringLiteral: \"method into an exophoric function.\" from \"method into an exophoric function.\" to \"or method into an exophoric function.\""]}, {"root": "INS InstanceofExpression to InfixExpression: || at 9", "operations": ["INS SimpleName: FormalParam to SimpleType: FormalParam at 0", "INS InstanceofExpression to InfixExpression: || at 9", "INS SimpleType: FormalParam to InstanceofExpression at 1", "INS SimpleName: node to InstanceofExpression at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: isSynthetic to MethodInvocation at 0"]}, {"root": "INS SimpleName: isSynthetic to MethodInvocation at 0", "operations": ["INS SimpleName: isSynthetic to MethodInvocation at 0"]}, {"root": "INS CastExpression to MethodInvocation at 1", "operations": ["INS CastExpression to MethodInvocation at 1", "INS MethodInvocation to CastExpression at 1", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS SimpleType: Reference to CastExpression at 0", "INS SimpleName: get to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: mq to MethodInvocation at 3", "MOV ThisExpression to MethodInvocation at 0", "MOV SimpleName: node to MethodInvocation at 2"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ExpressionStmt to ClassInstanceCreation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 5"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: ExpressionStmt to ClassInstanceCreation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV ClassInstanceCreation to ClassInstanceCreation at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 0", "operations": ["INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: tmpVal to VariableDeclarationFragment at 0", "INS VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "UPDATE from getFilePosition to getInitializer", "operations": ["UPD SimpleName: getFilePosition from getFilePosition to getInitializer"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getFilePosition to MethodInvocation at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ReturnStatement to Block at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ReturnStatement to Block at 1", "operations": ["INS ReturnStatement to Block at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV MethodInvocation to VariableDeclarationFragment at 1"]}, {"root": "INS ClassInstanceCreation to MethodInvocation at 3", "operations": ["INS MethodInvocation to ClassInstanceCreation at 1", "INS SimpleType: Reference to ClassInstanceCreation at 0", "INS SimpleName: declareStartOfScopeTempVariable to MethodInvocation at 1", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: s to MethodInvocation at 0", "MOV ClassInstanceCreation to MethodInvocation at 6"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Reference to VariableDeclarationStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "UPDATE from endsWith to bindings", "operations": ["UPD SimpleName: endsWith from endsWith to bindings"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: endsWith to MethodInvocation at 0", "MOV StringLiteral: \"__\" to MethodInvocation at 2"]}, {"root": "UPDATE from \"__\" to \"m\"", "operations": ["UPD StringLiteral: \"__\" from \"__\" to \"m\""]}, {"root": "INS MethodInvocation to ReturnStatement at 0", "operations": ["INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: mq to MethodInvocation at 3", "INS SimpleName: expandAll to MethodInvocation at 0", "INS SimpleName: scope to MethodInvocation at 2", "INS SimpleName: node to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "INS SimpleName: exceptionName to MethodInvocation at 0", "operations": ["INS SimpleName: exceptionName to MethodInvocation at 0"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV SimpleName: node to ReturnStatement at 0"]}, {"root": "UPDATE from getException to exceptionName", "operations": ["UPD SimpleName: getException from getException to exceptionName"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getException to MethodInvocation at 0"]}, {"root": "MOVE from ClassInstanceCreation", "operations": ["MOV SimpleType: Reference to ClassInstanceCreation at 0", "MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: getException to MethodInvocation at 1", "operations": ["INS SimpleName: getException to MethodInvocation at 1"]}, {"root": "INS SimpleName: mq to MethodInvocation at 0", "operations": ["INS SimpleName: mq to MethodInvocation at 0"]}, {"root": "INS ThisExpression to MethodInvocation at 4", "operations": ["INS ThisExpression to MethodInvocation at 4"]}, {"root": "INS SimpleName: node to MethodInvocation at 5", "operations": ["INS SimpleName: node to MethodInvocation at 5"]}, {"root": "UPDATE from s to scope", "operations": ["UPD SimpleName: s from s to scope"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: scope to MethodInvocation at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "INS SimpleName: getFilePosition to MethodInvocation at 1", "operations": ["INS SimpleName: getFilePosition to MethodInvocation at 1"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 3"]}, {"root": "MOVE from CastExpression", "operations": ["MOV MethodInvocation to CastExpression at 1"]}, {"root": "UPDATE from s to substV", "operations": ["UPD SimpleName: s from s to substV"]}, {"root": "INS StringLiteral: \"@fname = @r;\" to MethodInvocation at 1", "operations": ["INS StringLiteral: \"@fname = @r;\" to MethodInvocation at 1"]}, {"root": "INS StringLiteral: \"fname\" to MethodInvocation at 2", "operations": ["INS StringLiteral: \"fname\" to MethodInvocation at 2"]}, {"root": "INS StringLiteral: \"r\" to MethodInvocation at 4", "operations": ["INS StringLiteral: \"r\" to MethodInvocation at 4"]}, {"root": "INS SimpleName: result to MethodInvocation at 5", "operations": ["INS SimpleName: result to MethodInvocation at 5"]}, {"root": "DEL InfixExpression: +", "operations": ["DEL StringLiteral: \"translation.\"", "DEL StringLiteral: \"code to be included in the output with no further \"", "DEL InfixExpression: +", "DEL StringLiteral: \"Allow a relied-upon (trusted) translator to supply JavaScript \""]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: node"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: getValue", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL ClassInstanceCreation", "operations": ["DEL IfStatement", "DEL Block", "DEL AnonymousClassDeclaration", "DEL ClassInstanceCreation", "DEL MethodDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL VariableDeclarationStatement", "operations": ["DEL VariableDeclarationStatement", "DEL SimpleName: s", "DEL SimpleName: tmpVal", "DEL VariableDeclarationFragment", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: substV", "DEL SimpleName: result", "DEL StringLiteral: \"@fname = @r;\"", "DEL StringLiteral: \"fname\"", "DEL StringLiteral: \"r\""]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}]}}, {"DefaultCajaRewriter_diff": {"operations": ["Move ImportDeclaration(11) into CompilationUnit(10328) at 34", "Insert ImportDeclaration(35) into CompilationUnit(10328) at 17", "Insert QualifiedName: com.google.caja.parser.js.FormalParam(34) into ImportDeclaration(35) at 0", "Update QualifiedName: com.google.caja.parser.SyntheticNodes(10) to com.google.caja.parser.js.SyntheticNodes", "Update QualifiedName: com.google.caja.parser.SyntheticNodes.s(82) to com.google.caja.parser.js.SyntheticNodes.s", "Insert ClassInstanceCreation(365) into ArrayInitializer(10277) at 1", "Insert ClassInstanceCreation(443) into ArrayInitializer(10277) at 2", "Insert ClassInstanceCreation(521) into ArrayInitializer(10277) at 3", "Insert ClassInstanceCreation(677) into ArrayInitializer(10277) at 5", "Insert ClassInstanceCreation(756) into ArrayInitializer(10277) at 6", "Insert ClassInstanceCreation(834) into ArrayInitializer(10277) at 7", "Insert ClassInstanceCreation(911) into ArrayInitializer(10277) at 8", "Insert ClassInstanceCreation(999) into ArrayInitializer(10277) at 9", "Insert ClassInstanceCreation(1089) into ArrayInitializer(10277) at 10", "Insert ClassInstanceCreation(2436) into ArrayInitializer(10277) at 21", "Move SimpleType: Rule(298) into ClassInstanceCreation(365) at 0", "Insert AnonymousClassDeclaration(364) into ClassInstanceCreation(365) at 1", "Insert SimpleType: Rule(367) into ClassInstanceCreation(443) at 0", "Insert AnonymousClassDeclaration(442) into ClassInstanceCreation(443) at 1", "Insert SimpleType: Rule(445) into ClassInstanceCreation(521) at 0", "Insert AnonymousClassDeclaration(520) into ClassInstanceCreation(521) at 1", "Insert SimpleType: Rule(523) into ClassInstanceCreation(599) at 0", "Insert SimpleType: Rule(601) into ClassInstanceCreation(677) at 0", "Insert AnonymousClassDeclaration(676) into ClassInstanceCreation(677) at 1", "Insert SimpleType: Rule(679) into ClassInstanceCreation(756) at 0", "Insert AnonymousClassDeclaration(755) into ClassInstanceCreation(756) at 1", "Insert SimpleType: Rule(758) into ClassInstanceCreation(834) at 0", "Insert AnonymousClassDeclaration(833) into ClassInstanceCreation(834) at 1", "Insert SimpleType: Rule(836) into ClassInstanceCreation(911) at 0", "Insert AnonymousClassDeclaration(910) into ClassInstanceCreation(911) at 1", "Insert SimpleType: Rule(913) into ClassInstanceCreation(999) at 0", "Insert AnonymousClassDeclaration(998) into ClassInstanceCreation(999) at 1", "Insert SimpleType: Rule(1001) into ClassInstanceCreation(1089) at 0", "Insert AnonymousClassDeclaration(1088) into ClassInstanceCreation(1089) at 1", "Move SimpleType: Rule(1625) into ClassInstanceCreation(2436) at 0", "Insert AnonymousClassDeclaration(2435) into ClassInstanceCreation(2436) at 1", "Insert MethodDeclaration(363) into AnonymousClassDeclaration(364) at 0", "Insert SimpleName: Rule(366) into SimpleType: Rule(367) at 0", "Insert MethodDeclaration(441) into AnonymousClassDeclaration(442) at 0", "Insert SimpleName: Rule(444) into SimpleType: Rule(445) at 0", "Insert MethodDeclaration(519) into AnonymousClassDeclaration(520) at 0", "Insert SimpleName: Rule(522) into SimpleType: Rule(523) at 0", "Insert SimpleName: Rule(600) into SimpleType: Rule(601) at 0", "Insert MethodDeclaration(675) into AnonymousClassDeclaration(676) at 0", "Insert SimpleName: Rule(678) into SimpleType: Rule(679) at 0", "Insert MethodDeclaration(754) into AnonymousClassDeclaration(755) at 0", "Insert SimpleName: Rule(757) into SimpleType: Rule(758) at 0", "Insert MethodDeclaration(832) into AnonymousClassDeclaration(833) at 0", "Insert SimpleName: Rule(835) into SimpleType: Rule(836) at 0", "Insert MethodDeclaration(909) into AnonymousClassDeclaration(910) at 0", "Insert SimpleName: Rule(912) into SimpleType: Rule(913) at 0", "Insert MethodDeclaration(997) into AnonymousClassDeclaration(998) at 0", "Insert SimpleName: Rule(1000) into SimpleType: Rule(1001) at 0", "Insert MethodDeclaration(1087) into AnonymousClassDeclaration(1088) at 0", "Insert MethodDeclaration(2434) into AnonymousClassDeclaration(2435) at 0", "Move MarkerAnnotation(300) into MethodDeclaration(363) at 0", "Insert NormalAnnotation(319) into MethodDeclaration(363) at 1", "Insert Modifier: public(320) into MethodDeclaration(363) at 2", "Move SimpleType: ParseTreeNode(323) into MethodDeclaration(363) at 3", "Insert SimpleName: fire(323) into MethodDeclaration(363) at 4", "Move SingleVariableDeclaration(328) into MethodDeclaration(363) at 5", "Move SingleVariableDeclaration(332) into MethodDeclaration(363) at 6", "Move SingleVariableDeclaration(336) into MethodDeclaration(363) at 7", "Insert Block(362) into MethodDeclaration(363) at 8", "Insert MarkerAnnotation(369) into MethodDeclaration(441) at 0", "Insert NormalAnnotation(386) into MethodDeclaration(441) at 1", "Insert Modifier: public(387) into MethodDeclaration(441) at 2", "Insert SimpleType: ParseTreeNode(389) into MethodDeclaration(441) at 3", "Insert SimpleName: fire(390) into MethodDeclaration(441) at 4", "Insert SingleVariableDeclaration(394) into MethodDeclaration(441) at 5", "Insert SingleVariableDeclaration(398) into MethodDeclaration(441) at 6", "Insert SingleVariableDeclaration(402) into MethodDeclaration(441) at 7", "Insert Block(440) into MethodDeclaration(441) at 8", "Insert MarkerAnnotation(447) into MethodDeclaration(519) at 0", "Insert NormalAnnotation(464) into MethodDeclaration(519) at 1", "Insert Modifier: public(465) into MethodDeclaration(519) at 2", "Insert SimpleType: ParseTreeNode(467) into MethodDeclaration(519) at 3", "Insert SimpleName: fire(468) into MethodDeclaration(519) at 4", "Insert SingleVariableDeclaration(472) into MethodDeclaration(519) at 5", "Insert SingleVariableDeclaration(476) into MethodDeclaration(519) at 6", "Insert SingleVariableDeclaration(480) into MethodDeclaration(519) at 7", "Insert Block(518) into MethodDeclaration(519) at 8", "Insert MarkerAnnotation(525) into MethodDeclaration(597) at 0", "Insert SimpleType: ParseTreeNode(545) into MethodDeclaration(597) at 3", "Insert SingleVariableDeclaration(550) into MethodDeclaration(597) at 5", "Insert SingleVariableDeclaration(554) into MethodDeclaration(597) at 6", "Insert SingleVariableDeclaration(558) into MethodDeclaration(597) at 7", "Insert MarkerAnnotation(603) into MethodDeclaration(675) at 0", "Insert NormalAnnotation(620) into MethodDeclaration(675) at 1", "Move Modifier: public(1645) into MethodDeclaration(675) at 2", "Insert SimpleType: ParseTreeNode(623) into MethodDeclaration(675) at 3", "Move SimpleName: fire(1648) into MethodDeclaration(675) at 4", "Insert SingleVariableDeclaration(628) into MethodDeclaration(675) at 5", "Insert SingleVariableDeclaration(632) into MethodDeclaration(675) at 6", "Insert SingleVariableDeclaration(636) into MethodDeclaration(675) at 7", "Insert Block(674) into MethodDeclaration(675) at 8", "Insert MarkerAnnotation(681) into MethodDeclaration(754) at 0", "Insert NormalAnnotation(698) into MethodDeclaration(754) at 1", "Insert Modifier: public(699) into MethodDeclaration(754) at 2", "Insert SimpleType: ParseTreeNode(701) into MethodDeclaration(754) at 3", "Insert SimpleName: fire(702) into MethodDeclaration(754) at 4", "Insert SingleVariableDeclaration(706) into MethodDeclaration(754) at 5", "Insert SingleVariableDeclaration(710) into MethodDeclaration(754) at 6", "Insert SingleVariableDeclaration(714) into MethodDeclaration(754) at 7", "Insert Block(753) into MethodDeclaration(754) at 8", "Insert MarkerAnnotation(760) into MethodDeclaration(832) at 0", "Insert NormalAnnotation(777) into MethodDeclaration(832) at 1", "Insert Modifier: public(778) into MethodDeclaration(832) at 2", "Insert SimpleType: ParseTreeNode(780) into MethodDeclaration(832) at 3", "Insert SimpleName: fire(781) into MethodDeclaration(832) at 4", "Insert SingleVariableDeclaration(785) into MethodDeclaration(832) at 5", "Insert SingleVariableDeclaration(789) into MethodDeclaration(832) at 6", "Insert SingleVariableDeclaration(793) into MethodDeclaration(832) at 7", "Insert Block(831) into MethodDeclaration(832) at 8", "Insert MarkerAnnotation(838) into MethodDeclaration(909) at 0", "Insert NormalAnnotation(857) into MethodDeclaration(909) at 1", "Insert Modifier: public(858) into MethodDeclaration(909) at 2", "Insert SimpleType: ParseTreeNode(860) into MethodDeclaration(909) at 3", "Insert SimpleName: fire(861) into MethodDeclaration(909) at 4", "Insert SingleVariableDeclaration(865) into MethodDeclaration(909) at 5", "Insert SingleVariableDeclaration(869) into MethodDeclaration(909) at 6", "Insert SingleVariableDeclaration(873) into MethodDeclaration(909) at 7", "Insert Block(908) into MethodDeclaration(909) at 8", "Insert MarkerAnnotation(915) into MethodDeclaration(997) at 0", "Insert NormalAnnotation(933) into MethodDeclaration(997) at 1", "Insert Modifier: public(934) into MethodDeclaration(997) at 2", "Insert SimpleType: ParseTreeNode(936) into MethodDeclaration(997) at 3", "Insert SimpleName: fire(937) into MethodDeclaration(997) at 4", "Insert SingleVariableDeclaration(941) into MethodDeclaration(997) at 5", "Insert SingleVariableDeclaration(945) into MethodDeclaration(997) at 6", "Insert SingleVariableDeclaration(949) into MethodDeclaration(997) at 7", "Insert Block(996) into MethodDeclaration(997) at 8", "Insert MarkerAnnotation(1003) into MethodDeclaration(1087) at 0", "Insert NormalAnnotation(1023) into MethodDeclaration(1087) at 1", "Insert Modifier: public(1024) into MethodDeclaration(1087) at 2", "Insert SimpleType: ParseTreeNode(1026) into MethodDeclaration(1087) at 3", "Insert SimpleName: fire(1027) into MethodDeclaration(1087) at 4", "Insert SingleVariableDeclaration(1031) into MethodDeclaration(1087) at 5", "Insert SingleVariableDeclaration(1035) into MethodDeclaration(1087) at 6", "Insert SingleVariableDeclaration(1039) into MethodDeclaration(1087) at 7", "Insert Block(1086) into MethodDeclaration(1087) at 8", "Move MarkerAnnotation(1627) into MethodDeclaration(2434) at 0", "Move NormalAnnotation(1644) into MethodDeclaration(2434) at 1", "Insert Modifier: public(2377) into MethodDeclaration(2434) at 2", "Move SimpleType: ParseTreeNode(1647) into MethodDeclaration(2434) at 3", "Insert SimpleName: fire(2380) into MethodDeclaration(2434) at 4", "Move SingleVariableDeclaration(1652) into MethodDeclaration(2434) at 5", "Move SingleVariableDeclaration(1656) into MethodDeclaration(2434) at 6", "Move SingleVariableDeclaration(1660) into MethodDeclaration(2434) at 7", "Insert Block(2433) into MethodDeclaration(2434) at 8", "Insert SimpleName: RuleDescription(303) into NormalAnnotation(319) at 0", "Insert MemberValuePair(306) into NormalAnnotation(319) at 1", "Insert MemberValuePair(309) into NormalAnnotation(319) at 2", "Insert MemberValuePair(312) into NormalAnnotation(319) at 3", "Insert MemberValuePair(315) into NormalAnnotation(319) at 4", "Insert MemberValuePair(318) into NormalAnnotation(319) at 5", "Insert IfStatement(359) into Block(362) at 0", "Move ReturnStatement(349) into Block(362) at 1", "Insert SimpleName: Override(368) into MarkerAnnotation(369) at 0", "Insert SimpleName: RuleDescription(370) into NormalAnnotation(386) at 0", "Insert MemberValuePair(373) into NormalAnnotation(386) at 1", "Insert MemberValuePair(376) into NormalAnnotation(386) at 2", "Insert MemberValuePair(379) into NormalAnnotation(386) at 3", "Insert MemberValuePair(382) into NormalAnnotation(386) at 4", "Insert MemberValuePair(385) into NormalAnnotation(386) at 5", "Insert SimpleName: ParseTreeNode(388) into SimpleType: ParseTreeNode(389) at 0", "Insert SimpleType: ParseTreeNode(392) into SingleVariableDeclaration(394) at 0", "Insert SimpleName: node(393) into SingleVariableDeclaration(394) at 1", "Insert SimpleType: Scope(396) into SingleVariableDeclaration(398) at 0", "Insert SimpleName: scope(397) into SingleVariableDeclaration(398) at 1", "Insert SimpleType: MessageQueue(400) into SingleVariableDeclaration(402) at 0", "Insert SimpleName: mq(401) into SingleVariableDeclaration(402) at 1", "Insert VariableDeclarationStatement(416) into Block(440) at 0", "Insert IfStatement(437) into Block(440) at 1", "Insert ReturnStatement(439) into Block(440) at 2", "Insert SimpleName: Override(446) into MarkerAnnotation(447) at 0", "Insert SimpleName: RuleDescription(448) into NormalAnnotation(464) at 0", "Insert MemberValuePair(451) into NormalAnnotation(464) at 1", "Insert MemberValuePair(454) into NormalAnnotation(464) at 2", "Insert MemberValuePair(457) into NormalAnnotation(464) at 3", "Insert MemberValuePair(460) into NormalAnnotation(464) at 4", "Insert MemberValuePair(463) into NormalAnnotation(464) at 5", "Insert SimpleName: ParseTreeNode(466) into SimpleType: ParseTreeNode(467) at 0", "Insert SimpleType: ParseTreeNode(470) into SingleVariableDeclaration(472) at 0", "Insert SimpleName: node(471) into SingleVariableDeclaration(472) at 1", "Insert SimpleType: Scope(474) into SingleVariableDeclaration(476) at 0", "Insert SimpleName: scope(475) into SingleVariableDeclaration(476) at 1", "Insert SimpleType: MessageQueue(478) into SingleVariableDeclaration(480) at 0", "Insert SimpleName: mq(479) into SingleVariableDeclaration(480) at 1", "Insert VariableDeclarationStatement(494) into Block(518) at 0", "Insert IfStatement(515) into Block(518) at 1", "Insert ReturnStatement(517) into Block(518) at 2", "Insert SimpleName: Override(524) into MarkerAnnotation(525) at 0", "Insert SimpleName: ParseTreeNode(544) into SimpleType: ParseTreeNode(545) at 0", "Insert SimpleType: ParseTreeNode(548) into SingleVariableDeclaration(550) at 0", "Insert SimpleName: node(549) into SingleVariableDeclaration(550) at 1", "Insert SimpleType: Scope(552) into SingleVariableDeclaration(554) at 0", "Insert SimpleName: scope(553) into SingleVariableDeclaration(554) at 1", "Insert SimpleType: MessageQueue(556) into SingleVariableDeclaration(558) at 0", "Insert SimpleName: mq(557) into SingleVariableDeclaration(558) at 1", "Insert VariableDeclarationStatement(572) into Block(596) at 0", "Insert ReturnStatement(595) into Block(596) at 2", "Insert SimpleName: Override(602) into MarkerAnnotation(603) at 0", "Insert SimpleName: RuleDescription(604) into NormalAnnotation(620) at 0", "Insert MemberValuePair(607) into NormalAnnotation(620) at 1", "Insert MemberValuePair(610) into NormalAnnotation(620) at 2", "Insert MemberValuePair(613) into NormalAnnotation(620) at 3", "Insert MemberValuePair(616) into NormalAnnotation(620) at 4", "Insert MemberValuePair(619) into NormalAnnotation(620) at 5", "Insert SimpleName: ParseTreeNode(622) into SimpleType: ParseTreeNode(623) at 0", "Insert SimpleType: ParseTreeNode(626) into SingleVariableDeclaration(628) at 0", "Insert SimpleName: node(627) into SingleVariableDeclaration(628) at 1", "Insert SimpleType: Scope(630) into SingleVariableDeclaration(632) at 0", "Insert SimpleName: scope(631) into SingleVariableDeclaration(632) at 1", "Insert SimpleType: MessageQueue(634) into SingleVariableDeclaration(636) at 0", "Insert SimpleName: mq(635) into SingleVariableDeclaration(636) at 1", "Insert VariableDeclarationStatement(650) into Block(674) at 0", "Insert IfStatement(671) into Block(674) at 1", "Insert ReturnStatement(673) into Block(674) at 2", "Insert SimpleName: Override(680) into MarkerAnnotation(681) at 0", "Insert SimpleName: RuleDescription(682) into NormalAnnotation(698) at 0", "Insert MemberValuePair(685) into NormalAnnotation(698) at 1", "Insert MemberValuePair(688) into NormalAnnotation(698) at 2", "Insert MemberValuePair(691) into NormalAnnotation(698) at 3", "Insert MemberValuePair(694) into NormalAnnotation(698) at 4", "Insert MemberValuePair(697) into NormalAnnotation(698) at 5", "Insert SimpleName: ParseTreeNode(700) into SimpleType: ParseTreeNode(701) at 0", "Insert SimpleType: ParseTreeNode(704) into SingleVariableDeclaration(706) at 0", "Insert SimpleName: node(705) into SingleVariableDeclaration(706) at 1", "Insert SimpleType: Scope(708) into SingleVariableDeclaration(710) at 0", "Insert SimpleName: scope(709) into SingleVariableDeclaration(710) at 1", "Insert SimpleType: MessageQueue(712) into SingleVariableDeclaration(714) at 0", "Insert SimpleName: mq(713) into SingleVariableDeclaration(714) at 1", "Insert VariableDeclarationStatement(728) into Block(753) at 0", "Insert IfStatement(750) into Block(753) at 1", "Insert ReturnStatement(752) into Block(753) at 2", "Insert SimpleName: Override(759) into MarkerAnnotation(760) at 0", "Insert SimpleName: RuleDescription(761) into NormalAnnotation(777) at 0", "Insert MemberValuePair(764) into NormalAnnotation(777) at 1", "Insert MemberValuePair(767) into NormalAnnotation(777) at 2", "Insert MemberValuePair(770) into NormalAnnotation(777) at 3", "Insert MemberValuePair(773) into NormalAnnotation(777) at 4", "Insert MemberValuePair(776) into NormalAnnotation(777) at 5", "Insert SimpleName: ParseTreeNode(779) into SimpleType: ParseTreeNode(780) at 0", "Insert SimpleType: ParseTreeNode(783) into SingleVariableDeclaration(785) at 0", "Insert SimpleName: node(784) into SingleVariableDeclaration(785) at 1", "Insert SimpleType: Scope(787) into SingleVariableDeclaration(789) at 0", "Insert SimpleName: scope(788) into SingleVariableDeclaration(789) at 1", "Insert SimpleType: MessageQueue(791) into SingleVariableDeclaration(793) at 0", "Insert SimpleName: mq(792) into SingleVariableDeclaration(793) at 1", "Insert VariableDeclarationStatement(807) into Block(831) at 0", "Insert IfStatement(828) into Block(831) at 1", "Insert ReturnStatement(830) into Block(831) at 2", "Insert SimpleName: Override(837) into MarkerAnnotation(838) at 0", "Insert SimpleName: RuleDescription(839) into NormalAnnotation(857) at 0", "Insert MemberValuePair(842) into NormalAnnotation(857) at 1", "Insert MemberValuePair(845) into NormalAnnotation(857) at 2", "Insert MemberValuePair(850) into NormalAnnotation(857) at 3", "Insert MemberValuePair(853) into NormalAnnotation(857) at 4", "Insert MemberValuePair(856) into NormalAnnotation(857) at 5", "Insert SimpleName: ParseTreeNode(859) into SimpleType: ParseTreeNode(860) at 0", "Insert SimpleType: ParseTreeNode(863) into SingleVariableDeclaration(865) at 0", "Insert SimpleName: node(864) into SingleVariableDeclaration(865) at 1", "Insert SimpleType: Scope(867) into SingleVariableDeclaration(869) at 0", "Insert SimpleName: scope(868) into SingleVariableDeclaration(869) at 1", "Insert SimpleType: MessageQueue(871) into SingleVariableDeclaration(873) at 0", "Insert SimpleName: mq(872) into SingleVariableDeclaration(873) at 1", "Insert VariableDeclarationStatement(894) into Block(908) at 0", "Insert IfStatement(905) into Block(908) at 1", "Insert ReturnStatement(907) into Block(908) at 2", "Insert SimpleName: Override(914) into MarkerAnnotation(915) at 0", "Insert SimpleName: RuleDescription(916) into NormalAnnotation(933) at 0", "Insert MemberValuePair(919) into NormalAnnotation(933) at 1", "Insert MemberValuePair(922) into NormalAnnotation(933) at 2", "Insert MemberValuePair(925) into NormalAnnotation(933) at 3", "Insert MemberValuePair(929) into NormalAnnotation(933) at 4", "Insert MemberValuePair(932) into NormalAnnotation(933) at 5", "Insert SimpleName: ParseTreeNode(935) into SimpleType: ParseTreeNode(936) at 0", "Insert SimpleType: ParseTreeNode(939) into SingleVariableDeclaration(941) at 0", "Insert SimpleName: node(940) into SingleVariableDeclaration(941) at 1", "Insert SimpleType: Scope(943) into SingleVariableDeclaration(945) at 0", "Insert SimpleName: scope(944) into SingleVariableDeclaration(945) at 1", "Insert SimpleType: MessageQueue(947) into SingleVariableDeclaration(949) at 0", "Insert SimpleName: mq(948) into SingleVariableDeclaration(949) at 1", "Insert VariableDeclarationStatement(963) into Block(996) at 0", "Insert IfStatement(993) into Block(996) at 1", "Insert ReturnStatement(995) into Block(996) at 2", "Insert SimpleName: Override(1002) into MarkerAnnotation(1003) at 0", "Insert SimpleName: RuleDescription(1004) into NormalAnnotation(1023) at 0", "Insert MemberValuePair(1007) into NormalAnnotation(1023) at 1", "Insert MemberValuePair(1010) into NormalAnnotation(1023) at 2", "Insert MemberValuePair(1013) into NormalAnnotation(1023) at 3", "Insert MemberValuePair(1019) into NormalAnnotation(1023) at 4", "Insert MemberValuePair(1022) into NormalAnnotation(1023) at 5", "Insert SimpleName: ParseTreeNode(1025) into SimpleType: ParseTreeNode(1026) at 0", "Insert SimpleType: ParseTreeNode(1029) into SingleVariableDeclaration(1031) at 0", "Insert SimpleName: node(1030) into SingleVariableDeclaration(1031) at 1", "Insert SimpleType: Scope(1033) into SingleVariableDeclaration(1035) at 0", "Insert SimpleName: scope(1034) into SingleVariableDeclaration(1035) at 1", "Insert SimpleType: MessageQueue(1037) into SingleVariableDeclaration(1039) at 0", "Insert SimpleName: mq(1038) into SingleVariableDeclaration(1039) at 1", "Insert VariableDeclarationStatement(1053) into Block(1086) at 0", "Insert IfStatement(1083) into Block(1086) at 1", "Insert ReturnStatement(1085) into Block(1086) at 2", "Insert IfStatement(2430) into Block(2433) at 0", "Move ReturnStatement(1693) into Block(2433) at 1", "Insert SimpleName: name(304) into MemberValuePair(306) at 0", "Insert StringLiteral: \"syntheticReferemce\"(305) into MemberValuePair(306) at 1", "Insert SimpleName: synopsis(307) into MemberValuePair(309) at 0", "Insert StringLiteral: \"Pass through calls where the method name is synthetic.\"(308) into MemberValuePair(309) at 1", "Insert SimpleName: reason(310) into MemberValuePair(312) at 0", "Insert StringLiteral: \"A synthetic method may not be marked callable.\"(311) into MemberValuePair(312) at 1", "Insert SimpleName: matches(313) into MemberValuePair(315) at 0", "Insert StringLiteral: \"/* synthetic */ @ref\"(314) into MemberValuePair(315) at 1", "Insert SimpleName: substitutes(316) into MemberValuePair(318) at 0", "Insert StringLiteral: \"<expanded>\"(317) into MemberValuePair(318) at 1", "Insert InstanceofExpression(339) into IfStatement(359) at 0", "Insert Block(358) into IfStatement(359) at 1", "Insert SimpleName: name(371) into MemberValuePair(373) at 0", "Insert StringLiteral: \"syntheticCalls\"(372) into MemberValuePair(373) at 1", "Insert SimpleName: synopsis(374) into MemberValuePair(376) at 0", "Insert StringLiteral: \"Pass through calls where the method name is synthetic.\"(375) into MemberValuePair(376) at 1", "Insert SimpleName: reason(377) into MemberValuePair(379) at 0", "Insert StringLiteral: \"A synthetic method may not be marked callable.\"(378) into MemberValuePair(379) at 1", "Insert SimpleName: matches(380) into MemberValuePair(382) at 0", "Insert StringLiteral: \"/* synthetic */ @o.@m(@as*)\"(381) into MemberValuePair(382) at 1", "Insert SimpleName: substitutes(383) into MemberValuePair(385) at 0", "Insert StringLiteral: \"<expanded>\"(384) into MemberValuePair(385) at 1", "Insert SimpleName: ParseTreeNode(391) into SimpleType: ParseTreeNode(392) at 0", "Insert SimpleName: Scope(395) into SimpleType: Scope(396) at 0", "Insert SimpleName: MessageQueue(399) into SimpleType: MessageQueue(400) at 0", "Insert ParameterizedType: Map<String,ParseTreeNode>(409) into VariableDeclarationStatement(416) at 0", "Insert VariableDeclarationFragment(415) into VariableDeclarationStatement(416) at 1", "Insert InfixExpression: &&(429) into IfStatement(437) at 0", "Move Block(346) into IfStatement(437) at 1", "Insert SimpleName: NONE(438) into ReturnStatement(439) at 0", "Insert SimpleName: name(449) into MemberValuePair(451) at 0", "Insert StringLiteral: \"syntheticDeletes\"(450) into MemberValuePair(451) at 1", "Insert SimpleName: synopsis(452) into MemberValuePair(454) at 0", "Insert StringLiteral: \"Pass through reads of synthetic members.\"(453) into MemberValuePair(454) at 1", "Insert SimpleName: reason(455) into MemberValuePair(457) at 0", "Insert StringLiteral: \"A synthetic member may not be marked deletable.\"(456) into MemberValuePair(457) at 1", "Insert SimpleName: matches(458) into MemberValuePair(460) at 0", "Insert StringLiteral: \"/* synthetic */ delete @o.@m\"(459) into MemberValuePair(460) at 1", "Insert SimpleName: substitutes(461) into MemberValuePair(463) at 0", "Insert StringLiteral: \"<expanded>\"(462) into MemberValuePair(463) at 1", "Insert SimpleName: ParseTreeNode(469) into SimpleType: ParseTreeNode(470) at 0", "Insert SimpleName: Scope(473) into SimpleType: Scope(474) at 0", "Insert SimpleName: MessageQueue(477) into SimpleType: MessageQueue(478) at 0", "Insert ParameterizedType: Map<String,ParseTreeNode>(487) into VariableDeclarationStatement(494) at 0", "Insert VariableDeclarationFragment(493) into VariableDeclarationStatement(494) at 1", "Insert InfixExpression: &&(507) into IfStatement(515) at 0", "Insert Block(514) into IfStatement(515) at 1", "Insert SimpleName: NONE(516) into ReturnStatement(517) at 0", "Update StringLiteral: \"synthetic\"(303) to \"syntheticReads\"", "Update StringLiteral: \"Pass through synthetic nodes.\"(306) to \"Pass through reads of synthetic members.\"", "Insert StringLiteral: \"A synthetic member may not be marked readable.\"(534) into MemberValuePair(535) at 1", "Update StringLiteral: \"<@synthetic>\"(315) to \"/* synthetic */ @o.@m\"", "Update StringLiteral: \"<@synthetic>\"(318) to \"<expanded>\"", "Insert SimpleName: ParseTreeNode(547) into SimpleType: ParseTreeNode(548) at 0", "Insert SimpleName: Scope(551) into SimpleType: Scope(552) at 0", "Insert SimpleName: MessageQueue(555) into SimpleType: MessageQueue(556) at 0", "Insert ParameterizedType: Map<String,ParseTreeNode>(565) into VariableDeclarationStatement(572) at 0", "Insert VariableDeclarationFragment(571) into VariableDeclarationStatement(572) at 1", "Insert InfixExpression: &&(585) into IfStatement(593) at 0", "Insert Block(592) into IfStatement(593) at 1", "Insert SimpleName: NONE(594) into ReturnStatement(595) at 0", "Insert SimpleName: name(605) into MemberValuePair(607) at 0", "Insert StringLiteral: \"syntheticSetMember\"(606) into MemberValuePair(607) at 1", "Insert SimpleName: synopsis(608) into MemberValuePair(610) at 0", "Insert StringLiteral: \"Pass through sets of synthetic members.\"(609) into MemberValuePair(610) at 1", "Insert SimpleName: reason(611) into MemberValuePair(613) at 0", "Insert StringLiteral: \"A synthetic member may not be marked writable.\"(612) into MemberValuePair(613) at 1", "Insert SimpleName: matches(614) into MemberValuePair(616) at 0", "Insert StringLiteral: \"/* synthetic */ @o.@m = @v\"(615) into MemberValuePair(616) at 1", "Insert SimpleName: substitutes(617) into MemberValuePair(619) at 0", "Insert StringLiteral: \"<expanded>\"(618) into MemberValuePair(619) at 1", "Insert SimpleName: ParseTreeNode(625) into SimpleType: ParseTreeNode(626) at 0", "Insert SimpleName: Scope(629) into SimpleType: Scope(630) at 0", "Insert SimpleName: MessageQueue(633) into SimpleType: MessageQueue(634) at 0", "Insert ParameterizedType: Map<String,ParseTreeNode>(643) into VariableDeclarationStatement(650) at 0", "Insert VariableDeclarationFragment(649) into VariableDeclarationStatement(650) at 1", "Move InfixExpression: &&(1677) into IfStatement(671) at 0", "Insert Block(670) into IfStatement(671) at 1", "Insert SimpleName: NONE(672) into ReturnStatement(673) at 0", "Insert SimpleName: name(683) into MemberValuePair(685) at 0", "Insert StringLiteral: \"syntheticSetVar\"(684) into MemberValuePair(685) at 1", "Insert SimpleName: synopsis(686) into MemberValuePair(688) at 0", "Insert StringLiteral: \"Pass through set of synthetic vars.\"(687) into MemberValuePair(688) at 1", "Insert SimpleName: reason(689) into MemberValuePair(691) at 0", "Insert StringLiteral: \"A local variable might not be mentionable otherwise.\"(690) into MemberValuePair(691) at 1", "Insert SimpleName: matches(692) into MemberValuePair(694) at 0", "Insert StringLiteral: \"/* synthetic */ @lhs___ = @rhs\"(693) into MemberValuePair(694) at 1", "Insert SimpleName: substitutes(695) into MemberValuePair(697) at 0", "Insert StringLiteral: \"<expanded>\"(696) into MemberValuePair(697) at 1", "Insert SimpleName: ParseTreeNode(703) into SimpleType: ParseTreeNode(704) at 0", "Insert SimpleName: Scope(707) into SimpleType: Scope(708) at 0", "Insert SimpleName: MessageQueue(711) into SimpleType: MessageQueue(712) at 0", "Insert ParameterizedType: Map<String,ParseTreeNode>(721) into VariableDeclarationStatement(728) at 0", "Insert VariableDeclarationFragment(727) into VariableDeclarationStatement(728) at 1", "Insert InfixExpression: !=(731) into IfStatement(750) at 0", "Insert Block(749) into IfStatement(750) at 1", "Insert SimpleName: NONE(751) into ReturnStatement(752) at 0", "Insert SimpleName: name(762) into MemberValuePair(764) at 0", "Insert StringLiteral: \"syntheticDeclaration\"(763) into MemberValuePair(764) at 1", "Insert SimpleName: synopsis(765) into MemberValuePair(767) at 0", "Insert StringLiteral: \"Pass through synthetic variables which are unmentionable.\"(766) into MemberValuePair(767) at 1", "Insert SimpleName: reason(768) into MemberValuePair(770) at 0", "Insert StringLiteral: \"Synthetic code might need local variables for safe-keeping.\"(769) into MemberValuePair(770) at 1", "Insert SimpleName: matches(771) into MemberValuePair(773) at 0", "Insert StringLiteral: \"/* synthetic */ var @v___ = @initial?;\"(772) into MemberValuePair(773) at 1", "Insert SimpleName: substitutes(774) into MemberValuePair(776) at 0", "Insert StringLiteral: \"<expanded>\"(775) into MemberValuePair(776) at 1", "Insert SimpleName: ParseTreeNode(782) into SimpleType: ParseTreeNode(783) at 0", "Insert SimpleName: Scope(786) into SimpleType: Scope(787) at 0", "Insert SimpleName: MessageQueue(790) into SimpleType: MessageQueue(791) at 0", "Insert ParameterizedType: Map<String,ParseTreeNode>(800) into VariableDeclarationStatement(807) at 0", "Insert VariableDeclarationFragment(806) into VariableDeclarationStatement(807) at 1", "Insert InfixExpression: &&(820) into IfStatement(828) at 0", "Insert Block(827) into IfStatement(828) at 1", "Insert SimpleName: NONE(829) into ReturnStatement(830) at 0", "Insert SimpleName: name(840) into MemberValuePair(842) at 0", "Insert StringLiteral: \"syntheticFnDeclaration\"(841) into MemberValuePair(842) at 1", "Insert SimpleName: synopsis(843) into MemberValuePair(845) at 0", "Insert StringLiteral: \"Allow declaration of synthetic functions.\"(844) into MemberValuePair(845) at 1", "Insert SimpleName: reason(846) into MemberValuePair(850) at 0", "Insert InfixExpression: +(849) into MemberValuePair(850) at 1", "Insert SimpleName: matches(851) into MemberValuePair(853) at 0", "Insert StringLiteral: \"/* synthetic */ function @i?(@actuals*) { @body* }\"(852) into MemberValuePair(853) at 1", "Insert SimpleName: substitutes(854) into MemberValuePair(856) at 0", "Insert StringLiteral: \"<expanded>\"(855) into MemberValuePair(856) at 1", "Insert SimpleName: ParseTreeNode(862) into SimpleType: ParseTreeNode(863) at 0", "Insert SimpleName: Scope(866) into SimpleType: Scope(867) at 0", "Insert SimpleName: MessageQueue(870) into SimpleType: MessageQueue(871) at 0", "Insert SimpleType: FunctionConstructor(875) into VariableDeclarationStatement(894) at 0", "Insert VariableDeclarationFragment(893) into VariableDeclarationStatement(894) at 1", "Insert MethodInvocation(897) into IfStatement(905) at 0", "Insert Block(904) into IfStatement(905) at 1", "Insert SimpleName: NONE(906) into ReturnStatement(907) at 0", "Insert SimpleName: name(917) into MemberValuePair(919) at 0", "Insert StringLiteral: \"syntheticCatches1\"(918) into MemberValuePair(919) at 1", "Insert SimpleName: synopsis(920) into MemberValuePair(922) at 0", "Insert StringLiteral: \"Pass through synthetic variables which are unmentionable.\"(921) into MemberValuePair(922) at 1", "Insert SimpleName: reason(923) into MemberValuePair(925) at 0", "Insert StringLiteral: \"Catching unmentionable exceptions helps maintain invariants.\"(924) into MemberValuePair(925) at 1", "Insert SimpleName: matches(926) into MemberValuePair(929) at 0", "Insert ParenthesizedExpression(928) into MemberValuePair(929) at 1", "Insert SimpleName: substitutes(930) into MemberValuePair(932) at 0", "Insert StringLiteral: \"<expanded>\"(931) into MemberValuePair(932) at 1", "Insert SimpleName: ParseTreeNode(938) into SimpleType: ParseTreeNode(939) at 0", "Insert SimpleName: Scope(942) into SimpleType: Scope(943) at 0", "Insert SimpleName: MessageQueue(946) into SimpleType: MessageQueue(947) at 0", "Insert ParameterizedType: Map<String,ParseTreeNode>(956) into VariableDeclarationStatement(963) at 0", "Insert VariableDeclarationFragment(962) into VariableDeclarationStatement(963) at 1", "Insert InfixExpression: !=(966) into IfStatement(993) at 0", "Insert Block(992) into IfStatement(993) at 1", "Insert SimpleName: NONE(994) into ReturnStatement(995) at 0", "Insert SimpleName: name(1005) into MemberValuePair(1007) at 0", "Insert StringLiteral: \"syntheticCatches2\"(1006) into MemberValuePair(1007) at 1", "Insert SimpleName: synopsis(1008) into MemberValuePair(1010) at 0", "Insert StringLiteral: \"Pass through synthetic variables which are unmentionable.\"(1009) into MemberValuePair(1010) at 1", "Insert SimpleName: reason(1011) into MemberValuePair(1013) at 0", "Insert StringLiteral: \"Catching unmentionable exceptions helps maintain invariants.\"(1012) into MemberValuePair(1013) at 1", "Insert SimpleName: matches(1014) into MemberValuePair(1019) at 0", "Insert ParenthesizedExpression(1018) into MemberValuePair(1019) at 1", "Insert SimpleName: substitutes(1020) into MemberValuePair(1022) at 0", "Insert StringLiteral: \"<expanded>\"(1021) into MemberValuePair(1022) at 1", "Insert SimpleName: ParseTreeNode(1028) into SimpleType: ParseTreeNode(1029) at 0", "Insert SimpleName: Scope(1032) into SimpleType: Scope(1033) at 0", "Insert SimpleName: MessageQueue(1036) into SimpleType: MessageQueue(1037) at 0", "Insert ParameterizedType: Map<String,ParseTreeNode>(1046) into VariableDeclarationStatement(1053) at 0", "Insert VariableDeclarationFragment(1052) into VariableDeclarationStatement(1053) at 1", "Insert InfixExpression: !=(1056) into IfStatement(1083) at 0", "Insert Block(1082) into IfStatement(1083) at 1", "Insert SimpleName: NONE(1084) into ReturnStatement(1085) at 0", "Move InstanceofExpression(1664) into IfStatement(2430) at 0", "Insert Block(2429) into IfStatement(2430) at 1", "Insert SimpleName: node(336) into InstanceofExpression(339) at 0", "Insert SimpleType: Reference(338) into InstanceofExpression(339) at 1", "Insert VariableDeclarationStatement(348) into Block(358) at 0", "Insert IfStatement(357) into Block(358) at 1", "Insert SimpleType: Map(404) into ParameterizedType: Map<String,ParseTreeNode>(409) at 0", "Insert SimpleType: String(406) into ParameterizedType: Map<String,ParseTreeNode>(409) at 1", "Insert SimpleType: ParseTreeNode(408) into ParameterizedType: Map<String,ParseTreeNode>(409) at 2", "Insert SimpleName: bindings(410) into VariableDeclarationFragment(415) at 0", "Insert MethodInvocation(414) into VariableDeclarationFragment(415) at 1", "Insert InfixExpression: !=(419) into InfixExpression: &&(429) at 0", "Insert MethodInvocation(428) into InfixExpression: &&(429) at 1", "Insert SimpleType: Map(482) into ParameterizedType: Map<String,ParseTreeNode>(487) at 0", "Insert SimpleType: String(484) into ParameterizedType: Map<String,ParseTreeNode>(487) at 1", "Insert SimpleType: ParseTreeNode(486) into ParameterizedType: Map<String,ParseTreeNode>(487) at 2", "Insert SimpleName: bindings(488) into VariableDeclarationFragment(493) at 0", "Insert MethodInvocation(492) into VariableDeclarationFragment(493) at 1", "Insert InfixExpression: !=(497) into InfixExpression: &&(507) at 0", "Insert MethodInvocation(506) into InfixExpression: &&(507) at 1", "Insert ReturnStatement(513) into Block(514) at 0", "Insert SimpleType: Map(560) into ParameterizedType: Map<String,ParseTreeNode>(565) at 0", "Insert SimpleType: String(562) into ParameterizedType: Map<String,ParseTreeNode>(565) at 1", "Insert SimpleType: ParseTreeNode(564) into ParameterizedType: Map<String,ParseTreeNode>(565) at 2", "Insert SimpleName: bindings(566) into VariableDeclarationFragment(571) at 0", "Insert MethodInvocation(570) into VariableDeclarationFragment(571) at 1", "Insert InfixExpression: !=(575) into InfixExpression: &&(585) at 0", "Insert MethodInvocation(584) into InfixExpression: &&(585) at 1", "Insert ReturnStatement(591) into Block(592) at 0", "Insert SimpleType: Map(638) into ParameterizedType: Map<String,ParseTreeNode>(643) at 0", "Insert SimpleType: String(640) into ParameterizedType: Map<String,ParseTreeNode>(643) at 1", "Insert SimpleType: ParseTreeNode(642) into ParameterizedType: Map<String,ParseTreeNode>(643) at 2", "Insert SimpleName: bindings(644) into VariableDeclarationFragment(649) at 0", "Insert MethodInvocation(648) into VariableDeclarationFragment(649) at 1", "Insert InfixExpression: !=(653) into InfixExpression: &&(663) at 0", "Insert ReturnStatement(669) into Block(670) at 0", "Insert SimpleType: Map(716) into ParameterizedType: Map<String,ParseTreeNode>(721) at 0", "Insert SimpleType: String(718) into ParameterizedType: Map<String,ParseTreeNode>(721) at 1", "Insert SimpleType: ParseTreeNode(720) into ParameterizedType: Map<String,ParseTreeNode>(721) at 2", "Insert SimpleName: bindings(722) into VariableDeclarationFragment(727) at 0", "Insert MethodInvocation(726) into VariableDeclarationFragment(727) at 1", "Insert SimpleName: bindings(729) into InfixExpression: !=(731) at 0", "Insert NullLiteral(730) into InfixExpression: !=(731) at 1", "Insert IfStatement(748) into Block(749) at 0", "Insert SimpleType: Map(795) into ParameterizedType: Map<String,ParseTreeNode>(800) at 0", "Insert SimpleType: String(797) into ParameterizedType: Map<String,ParseTreeNode>(800) at 1", "Insert SimpleType: ParseTreeNode(799) into ParameterizedType: Map<String,ParseTreeNode>(800) at 2", "Insert SimpleName: bindings(801) into VariableDeclarationFragment(806) at 0", "Insert MethodInvocation(805) into VariableDeclarationFragment(806) at 1", "Insert InfixExpression: !=(810) into InfixExpression: &&(820) at 0", "Insert MethodInvocation(819) into InfixExpression: &&(820) at 1", "Insert ReturnStatement(826) into Block(827) at 0", "Insert StringLiteral: \"Synthetic functions allow generated code to avoid introducing\"(847) into InfixExpression: +(849) at 0", "Insert StringLiteral: \" unnecessary scopes.\"(848) into InfixExpression: +(849) at 1", "Insert SimpleName: FunctionConstructor(874) into SimpleType: FunctionConstructor(875) at 0", "Insert SimpleName: ctor(876) into VariableDeclarationFragment(893) at 0", "Insert ConditionalExpression(892) into VariableDeclarationFragment(893) at 1", "Insert SimpleName: isSynthetic(895) into MethodInvocation(897) at 0", "Insert SimpleName: ctor(896) into MethodInvocation(897) at 1", "Insert ReturnStatement(903) into Block(904) at 0", "Insert StringLiteral: \"try { @body* } catch (/* synthetic */ @ex___) { @handler*; }\"(927) into ParenthesizedExpression(928) at 0", "Insert SimpleType: Map(951) into ParameterizedType: Map<String,ParseTreeNode>(956) at 0", "Insert SimpleType: String(953) into ParameterizedType: Map<String,ParseTreeNode>(956) at 1", "Insert SimpleType: ParseTreeNode(955) into ParameterizedType: Map<String,ParseTreeNode>(956) at 2", "Insert SimpleName: bindings(957) into VariableDeclarationFragment(962) at 0", "Insert MethodInvocation(961) into VariableDeclarationFragment(962) at 1", "Insert SimpleName: bindings(964) into InfixExpression: !=(966) at 0", "Insert NullLiteral(965) into InfixExpression: !=(966) at 1", "Insert VariableDeclarationStatement(978) into Block(992) at 0", "Insert IfStatement(991) into Block(992) at 1", "Insert InfixExpression: +(1017) into ParenthesizedExpression(1018) at 0", "Insert SimpleType: Map(1041) into ParameterizedType: Map<String,ParseTreeNode>(1046) at 0", "Insert SimpleType: String(1043) into ParameterizedType: Map<String,ParseTreeNode>(1046) at 1", "Insert SimpleType: ParseTreeNode(1045) into ParameterizedType: Map<String,ParseTreeNode>(1046) at 2", "Insert SimpleName: bindings(1047) into VariableDeclarationFragment(1052) at 0", "Insert MethodInvocation(1051) into VariableDeclarationFragment(1052) at 1", "Insert SimpleName: bindings(1054) into InfixExpression: !=(1056) at 0", "Insert NullLiteral(1055) into InfixExpression: !=(1056) at 1", "Insert VariableDeclarationStatement(1068) into Block(1082) at 0", "Insert IfStatement(1081) into Block(1082) at 1", "Move ClassInstanceCreation(842) into MethodInvocation(1576) at 2", "Move ClassInstanceCreation(897) into Assignment: =(1627) at 1", "Move ClassInstanceCreation(829) into MethodInvocation(1702) at 7", "Move ClassInstanceCreation(957) into MethodInvocation(1702) at 10", "Move ClassInstanceCreation(969) into MethodInvocation(1702) at 13", "Insert VariableDeclarationStatement(1809) into Block(1872) at 1", "Insert VariableDeclarationStatement(1968) into Block(2042) at 1", "Insert VariableDeclarationStatement(2408) into Block(2429) at 0", "Insert IfStatement(2428) into Block(2429) at 1", "Update StringLiteral: \"whose earliest function scope ancestor is NOT a constructor or \"(7634) to \"whose earliest function scope ancestor is NOT a constructor \"", "Update StringLiteral: \"method into an exophoric function.\"(7635) to \"or method into an exophoric function.\"", "Insert InstanceofExpression(10225) into InfixExpression: ||(10262) at 9", "Insert SimpleName: Reference(337) into SimpleType: Reference(338) at 0", "Insert SimpleType: Reference(341) into VariableDeclarationStatement(348) at 0", "Insert VariableDeclarationFragment(347) into VariableDeclarationStatement(348) at 1", "Insert MethodInvocation(353) into IfStatement(357) at 0", "Insert Block(356) into IfStatement(357) at 1", "Insert SimpleName: Map(403) into SimpleType: Map(404) at 0", "Insert SimpleName: String(405) into SimpleType: String(406) at 0", "Insert SimpleName: ParseTreeNode(407) into SimpleType: ParseTreeNode(408) at 0", "Insert ThisExpression(411) into MethodInvocation(414) at 0", "Insert SimpleName: match(412) into MethodInvocation(414) at 1", "Insert SimpleName: node(413) into MethodInvocation(414) at 2", "Insert SimpleName: bindings(417) into InfixExpression: !=(419) at 0", "Insert NullLiteral(418) into InfixExpression: !=(419) at 1", "Insert SimpleName: isSynthetic(420) into MethodInvocation(428) at 0", "Insert CastExpression(427) into MethodInvocation(428) at 1", "Insert SimpleName: Map(481) into SimpleType: Map(482) at 0", "Insert SimpleName: String(483) into SimpleType: String(484) at 0", "Insert SimpleName: ParseTreeNode(485) into SimpleType: ParseTreeNode(486) at 0", "Insert ThisExpression(489) into MethodInvocation(492) at 0", "Insert SimpleName: match(490) into MethodInvocation(492) at 1", "Insert SimpleName: node(491) into MethodInvocation(492) at 2", "Insert SimpleName: bindings(495) into InfixExpression: !=(497) at 0", "Insert NullLiteral(496) into InfixExpression: !=(497) at 1", "Insert SimpleName: isSynthetic(498) into MethodInvocation(506) at 0", "Insert CastExpression(505) into MethodInvocation(506) at 1", "Insert MethodInvocation(512) into ReturnStatement(513) at 0", "Insert SimpleName: Map(559) into SimpleType: Map(560) at 0", "Insert SimpleName: String(561) into SimpleType: String(562) at 0", "Insert SimpleName: ParseTreeNode(563) into SimpleType: ParseTreeNode(564) at 0", "Insert ThisExpression(567) into MethodInvocation(570) at 0", "Insert SimpleName: match(568) into MethodInvocation(570) at 1", "Insert SimpleName: node(569) into MethodInvocation(570) at 2", "Insert SimpleName: bindings(573) into InfixExpression: !=(575) at 0", "Insert NullLiteral(574) into InfixExpression: !=(575) at 1", "Move SimpleName: isSynthetic(337) into MethodInvocation(584) at 0", "Insert CastExpression(583) into MethodInvocation(584) at 1", "Insert MethodInvocation(590) into ReturnStatement(591) at 0", "Insert SimpleName: Map(637) into SimpleType: Map(638) at 0", "Insert SimpleName: String(639) into SimpleType: String(640) at 0", "Insert SimpleName: ParseTreeNode(641) into SimpleType: ParseTreeNode(642) at 0", "Insert ThisExpression(645) into MethodInvocation(648) at 0", "Insert SimpleName: match(646) into MethodInvocation(648) at 1", "Insert SimpleName: node(647) into MethodInvocation(648) at 2", "Insert SimpleName: bindings(651) into InfixExpression: !=(653) at 0", "Insert NullLiteral(652) into InfixExpression: !=(653) at 1", "Insert SimpleName: isSynthetic(654) into MethodInvocation(662) at 0", "Insert CastExpression(661) into MethodInvocation(662) at 1", "Insert MethodInvocation(668) into ReturnStatement(669) at 0", "Insert SimpleName: Map(715) into SimpleType: Map(716) at 0", "Insert SimpleName: String(717) into SimpleType: String(718) at 0", "Insert SimpleName: ParseTreeNode(719) into SimpleType: ParseTreeNode(720) at 0", "Insert ThisExpression(723) into MethodInvocation(726) at 0", "Insert SimpleName: match(724) into MethodInvocation(726) at 1", "Insert SimpleName: node(725) into MethodInvocation(726) at 2", "Insert MethodInvocation(740) into IfStatement(748) at 0", "Insert Block(747) into IfStatement(748) at 1", "Insert SimpleName: Map(794) into SimpleType: Map(795) at 0", "Insert SimpleName: String(796) into SimpleType: String(797) at 0", "Insert SimpleName: ParseTreeNode(798) into SimpleType: ParseTreeNode(799) at 0", "Insert ThisExpression(802) into MethodInvocation(805) at 0", "Insert SimpleName: match(803) into MethodInvocation(805) at 1", "Insert SimpleName: node(804) into MethodInvocation(805) at 2", "Insert SimpleName: bindings(808) into InfixExpression: !=(810) at 0", "Insert NullLiteral(809) into InfixExpression: !=(810) at 1", "Insert SimpleName: isSynthetic(811) into MethodInvocation(819) at 0", "Insert CastExpression(818) into MethodInvocation(819) at 1", "Insert MethodInvocation(825) into ReturnStatement(826) at 0", "Insert InstanceofExpression(880) into ConditionalExpression(892) at 0", "Insert MethodInvocation(887) into ConditionalExpression(892) at 1", "Insert CastExpression(891) into ConditionalExpression(892) at 2", "Insert MethodInvocation(902) into ReturnStatement(903) at 0", "Insert SimpleName: Map(950) into SimpleType: Map(951) at 0", "Insert SimpleName: String(952) into SimpleType: String(953) at 0", "Insert SimpleName: ParseTreeNode(954) into SimpleType: ParseTreeNode(955) at 0", "Move ThisExpression(1684) into MethodInvocation(961) at 0", "Insert SimpleName: match(959) into MethodInvocation(961) at 1", "Move SimpleName: node(1685) into MethodInvocation(961) at 2", "Insert SimpleType: Declaration(968) into VariableDeclarationStatement(978) at 0", "Insert VariableDeclarationFragment(977) into VariableDeclarationStatement(978) at 1", "Insert MethodInvocation(983) into IfStatement(991) at 0", "Insert Block(990) into IfStatement(991) at 1", "Insert StringLiteral: \"try { @body* } catch (/* synthetic */ @ex___) { @handler*; }\"(1015) into InfixExpression: +(1017) at 0", "Insert StringLiteral: \" finally { @cleanup* }\"(1016) into InfixExpression: +(1017) at 1", "Insert SimpleName: Map(1040) into SimpleType: Map(1041) at 0", "Insert SimpleName: String(1042) into SimpleType: String(1043) at 0", "Insert SimpleName: ParseTreeNode(1044) into SimpleType: ParseTreeNode(1045) at 0", "Insert ThisExpression(1048) into MethodInvocation(1051) at 0", "Insert SimpleName: match(1049) into MethodInvocation(1051) at 1", "Insert SimpleName: node(1050) into MethodInvocation(1051) at 2", "Insert SimpleType: Declaration(1058) into VariableDeclarationStatement(1068) at 0", "Insert VariableDeclarationFragment(1067) into VariableDeclarationStatement(1068) at 1", "Insert MethodInvocation(1073) into IfStatement(1081) at 0", "Insert Block(1080) into IfStatement(1081) at 1", "Move SimpleType: ExpressionStmt(962) into ClassInstanceCreation(1575) at 0", "Move ClassInstanceCreation(869) into MethodInvocation(1601) at 5", "Move SimpleType: ExpressionStmt(819) into ClassInstanceCreation(1690) at 0", "Move ClassInstanceCreation(967) into ClassInstanceCreation(1690) at 1", "Insert SimpleType: Identifier(1799) into VariableDeclarationStatement(1809) at 0", "Insert VariableDeclarationFragment(1808) into VariableDeclarationStatement(1809) at 1", "Move Block(1690) into IfStatement(1829) at 1", "Insert SimpleType: Identifier(1958) into VariableDeclarationStatement(1968) at 0", "Insert VariableDeclarationFragment(1967) into VariableDeclarationStatement(1968) at 1", "Insert SimpleType: Identifier(2398) into VariableDeclarationStatement(2408) at 0", "Insert VariableDeclarationFragment(2407) into VariableDeclarationStatement(2408) at 1", "Insert MethodInvocation(2414) into IfStatement(2428) at 0", "Move Block(1102) into IfStatement(2428) at 1", "Insert VariableDeclarationStatement(5179) into Block(5218) at 0", "Move VariableDeclarationStatement(4450) into Block(5346) at 0", "Insert SimpleName: node(10222) into InstanceofExpression(10225) at 0", "Insert SimpleType: FormalParam(10224) into InstanceofExpression(10225) at 1", "Insert SimpleName: Reference(340) into SimpleType: Reference(341) at 0", "Insert SimpleName: ref(342) into VariableDeclarationFragment(347) at 0", "Insert CastExpression(346) into VariableDeclarationFragment(347) at 1", "Insert SimpleName: isSynthetic(349) into MethodInvocation(353) at 0", "Insert MethodInvocation(352) into MethodInvocation(353) at 1", "Insert ReturnStatement(355) into Block(356) at 0", "Insert SimpleType: Reference(422) into CastExpression(427) at 0", "Insert MethodInvocation(426) into CastExpression(427) at 1", "Insert SimpleType: Reference(500) into CastExpression(505) at 0", "Insert MethodInvocation(504) into CastExpression(505) at 1", "Insert SimpleName: expandAll(508) into MethodInvocation(512) at 0", "Insert SimpleName: node(509) into MethodInvocation(512) at 1", "Insert SimpleName: scope(510) into MethodInvocation(512) at 2", "Insert SimpleName: mq(511) into MethodInvocation(512) at 3", "Insert SimpleType: Reference(578) into CastExpression(583) at 0", "Insert MethodInvocation(582) into CastExpression(583) at 1", "Insert SimpleName: expandAll(586) into MethodInvocation(590) at 0", "Insert SimpleName: node(587) into MethodInvocation(590) at 1", "Insert SimpleName: scope(588) into MethodInvocation(590) at 2", "Insert SimpleName: mq(589) into MethodInvocation(590) at 3", "Insert SimpleType: Reference(656) into CastExpression(661) at 0", "Insert MethodInvocation(660) into CastExpression(661) at 1", "Insert SimpleName: expandAll(664) into MethodInvocation(668) at 0", "Insert SimpleName: node(665) into MethodInvocation(668) at 1", "Insert SimpleName: scope(666) into MethodInvocation(668) at 2", "Move SimpleName: mq(1678) into MethodInvocation(668) at 3", "Insert SimpleName: isSynthetic(732) into MethodInvocation(740) at 0", "Insert CastExpression(739) into MethodInvocation(740) at 1", "Insert ReturnStatement(746) into Block(747) at 0", "Insert SimpleType: Identifier(813) into CastExpression(818) at 0", "Insert MethodInvocation(817) into CastExpression(818) at 1", "Insert SimpleName: expandAll(821) into MethodInvocation(825) at 0", "Insert SimpleName: node(822) into MethodInvocation(825) at 1", "Insert SimpleName: scope(823) into MethodInvocation(825) at 2", "Insert SimpleName: mq(824) into MethodInvocation(825) at 3", "Insert SimpleName: node(877) into InstanceofExpression(880) at 0", "Insert SimpleType: FunctionDeclaration(879) into InstanceofExpression(880) at 1", "Insert ParenthesizedExpression(885) into MethodInvocation(887) at 0", "Update SimpleName: getFilePosition(1682) to getInitializer", "Move SimpleName: getFilePosition(1682) into MethodInvocation(887) at 1", "Insert SimpleType: FunctionConstructor(889) into CastExpression(891) at 0", "Insert SimpleName: node(890) into CastExpression(891) at 1", "Insert SimpleName: expandAll(898) into MethodInvocation(902) at 0", "Insert SimpleName: node(899) into MethodInvocation(902) at 1", "Insert SimpleName: scope(900) into MethodInvocation(902) at 2", "Insert SimpleName: mq(901) into MethodInvocation(902) at 3", "Insert SimpleName: Declaration(967) into SimpleType: Declaration(968) at 0", "Insert SimpleName: ex(969) into VariableDeclarationFragment(977) at 0", "Insert CastExpression(976) into VariableDeclarationFragment(977) at 1", "Insert SimpleName: isSynthetic(979) into MethodInvocation(983) at 0", "Insert MethodInvocation(982) into MethodInvocation(983) at 1", "Move ReturnStatement(1689) into Block(990) at 0", "Insert SimpleName: Declaration(1057) into SimpleType: Declaration(1058) at 0", "Insert SimpleName: ex(1059) into VariableDeclarationFragment(1067) at 0", "Insert CastExpression(1066) into VariableDeclarationFragment(1067) at 1", "Insert SimpleName: isSynthetic(1069) into MethodInvocation(1073) at 0", "Insert MethodInvocation(1072) into MethodInvocation(1073) at 1", "Insert ReturnStatement(1079) into Block(1080) at 0", "Insert SimpleName: Identifier(1798) into SimpleType: Identifier(1799) at 0", "Insert SimpleName: exceptionName(1800) into VariableDeclarationFragment(1808) at 0", "Move MethodInvocation(1237) into VariableDeclarationFragment(1808) at 1", "Insert ReturnStatement(1827) into Block(1828) at 1", "Insert SimpleName: Identifier(1957) into SimpleType: Identifier(1958) at 0", "Insert SimpleName: exceptionName(1959) into VariableDeclarationFragment(1967) at 0", "Move MethodInvocation(1084) into VariableDeclarationFragment(1967) at 1", "Insert SimpleName: Identifier(2397) into SimpleType: Identifier(2398) at 0", "Insert SimpleName: name(2399) into VariableDeclarationFragment(2407) at 0", "Move MethodInvocation(1671) into VariableDeclarationFragment(2407) at 1", "Insert MethodInvocation(2411) into MethodInvocation(2414) at 0", "Insert SimpleName: endsWith(2412) into MethodInvocation(2414) at 1", "Insert StringLiteral: \"__\"(2413) into MethodInvocation(2414) at 2", "Insert ClassInstanceCreation(3046) into MethodInvocation(3068) at 3", "Move ClassInstanceCreation(2995) into MethodInvocation(3763) at 3", "Move ClassInstanceCreation(3465) into MethodInvocation(4228) at 3", "Move ClassInstanceCreation(2308) into MethodInvocation(4228) at 6", "Move SimpleType: Reference(4569) into VariableDeclarationStatement(5179) at 0", "Insert VariableDeclarationFragment(5178) into VariableDeclarationStatement(5179) at 1", "Move ClassInstanceCreation(6871) into MethodInvocation(7627) at 3", "Insert SimpleName: FormalParam(10223) into SimpleType: FormalParam(10224) at 0", "Insert SimpleType: Reference(344) into CastExpression(346) at 0", "Insert SimpleName: node(345) into CastExpression(346) at 1", "Insert SimpleName: ref(350) into MethodInvocation(352) at 0", "Insert SimpleName: getIdentifier(351) into MethodInvocation(352) at 1", "Insert SimpleName: node(354) into ReturnStatement(355) at 0", "Insert SimpleName: Reference(421) into SimpleType: Reference(422) at 0", "Insert SimpleName: bindings(423) into MethodInvocation(426) at 0", "Insert SimpleName: get(424) into MethodInvocation(426) at 1", "Insert StringLiteral: \"m\"(425) into MethodInvocation(426) at 2", "Insert SimpleName: Reference(499) into SimpleType: Reference(500) at 0", "Insert SimpleName: bindings(501) into MethodInvocation(504) at 0", "Insert SimpleName: get(502) into MethodInvocation(504) at 1", "Insert StringLiteral: \"m\"(503) into MethodInvocation(504) at 2", "Insert SimpleName: Reference(577) into SimpleType: Reference(578) at 0", "Insert SimpleName: bindings(579) into MethodInvocation(582) at 0", "Insert SimpleName: get(580) into MethodInvocation(582) at 1", "Insert StringLiteral: \"m\"(581) into MethodInvocation(582) at 2", "Insert SimpleName: Reference(655) into SimpleType: Reference(656) at 0", "Update SimpleName: endsWith(1674) to bindings", "Move SimpleName: endsWith(1674) into MethodInvocation(660) at 0", "Insert SimpleName: get(658) into MethodInvocation(660) at 1", "Update StringLiteral: \"__\"(1675) to \"m\"", "Move StringLiteral: \"__\"(1675) into MethodInvocation(660) at 2", "Insert SimpleType: Identifier(734) into CastExpression(739) at 0", "Insert MethodInvocation(738) into CastExpression(739) at 1", "Insert MethodInvocation(745) into ReturnStatement(746) at 0", "Insert SimpleName: Identifier(812) into SimpleType: Identifier(813) at 0", "Insert SimpleName: bindings(814) into MethodInvocation(817) at 0", "Insert SimpleName: get(815) into MethodInvocation(817) at 1", "Insert StringLiteral: \"v\"(816) into MethodInvocation(817) at 2", "Insert SimpleName: FunctionDeclaration(878) into SimpleType: FunctionDeclaration(879) at 0", "Insert CastExpression(884) into ParenthesizedExpression(885) at 0", "Insert SimpleName: FunctionConstructor(888) into SimpleType: FunctionConstructor(889) at 0", "Insert SimpleType: Declaration(971) into CastExpression(976) at 0", "Insert MethodInvocation(975) into CastExpression(976) at 1", "Insert SimpleName: ex(980) into MethodInvocation(982) at 0", "Insert SimpleName: getIdentifier(981) into MethodInvocation(982) at 1", "Insert MethodInvocation(988) into ReturnStatement(989) at 0", "Insert SimpleType: Declaration(1061) into CastExpression(1066) at 0", "Insert MethodInvocation(1065) into CastExpression(1066) at 1", "Insert SimpleName: ex(1070) into MethodInvocation(1072) at 0", "Insert SimpleName: getIdentifier(1071) into MethodInvocation(1072) at 1", "Insert MethodInvocation(1078) into ReturnStatement(1079) at 0", "Move ClassInstanceCreation(950) into MethodInvocation(1573) at 3", "Insert SimpleName: exceptionName(1810) into MethodInvocation(1812) at 0", "Move SimpleName: node(1688) into ReturnStatement(1827) at 0", "Update SimpleName: getException(1234) to exceptionName", "Move SimpleName: getException(1234) into MethodInvocation(1971) at 0", "Insert SimpleName: name(2409) into MethodInvocation(2411) at 0", "Insert SimpleName: getValue(2410) into MethodInvocation(2411) at 1", "Insert SimpleType: Reference(3042) into ClassInstanceCreation(3046) at 0", "Insert MethodInvocation(3045) into ClassInstanceCreation(3046) at 1", "Insert SimpleName: tmpVal(5171) into VariableDeclarationFragment(5178) at 0", "Move ClassInstanceCreation(4577) into VariableDeclarationFragment(5178) at 1", "Move ClassInstanceCreation(4447) into VariableDeclarationFragment(5306) at 1", "Insert SimpleName: Reference(343) into SimpleType: Reference(344) at 0", "Insert SimpleName: Identifier(733) into SimpleType: Identifier(734) at 0", "Insert SimpleName: bindings(735) into MethodInvocation(738) at 0", "Insert SimpleName: get(736) into MethodInvocation(738) at 1", "Insert StringLiteral: \"lhs\"(737) into MethodInvocation(738) at 2", "Insert SimpleName: expandAll(741) into MethodInvocation(745) at 0", "Insert SimpleName: node(742) into MethodInvocation(745) at 1", "Insert SimpleName: scope(743) into MethodInvocation(745) at 2", "Insert SimpleName: mq(744) into MethodInvocation(745) at 3", "Insert SimpleType: FunctionDeclaration(882) into CastExpression(884) at 0", "Insert SimpleName: node(883) into CastExpression(884) at 1", "Insert SimpleName: Declaration(970) into SimpleType: Declaration(971) at 0", "Insert SimpleName: bindings(972) into MethodInvocation(975) at 0", "Insert SimpleName: get(973) into MethodInvocation(975) at 1", "Insert StringLiteral: \"ex\"(974) into MethodInvocation(975) at 2", "Insert SimpleName: expandAll(984) into MethodInvocation(988) at 0", "Insert SimpleName: node(985) into MethodInvocation(988) at 1", "Insert SimpleName: scope(986) into MethodInvocation(988) at 2", "Insert SimpleName: mq(987) into MethodInvocation(988) at 3", "Insert SimpleName: Declaration(1060) into SimpleType: Declaration(1061) at 0", "Insert SimpleName: bindings(1062) into MethodInvocation(1065) at 0", "Insert SimpleName: get(1063) into MethodInvocation(1065) at 1", "Insert StringLiteral: \"ex\"(1064) into MethodInvocation(1065) at 2", "Insert SimpleName: expandAll(1074) into MethodInvocation(1078) at 0", "Insert SimpleName: node(1075) into MethodInvocation(1078) at 1", "Insert SimpleName: scope(1076) into MethodInvocation(1078) at 2", "Insert SimpleName: mq(1077) into MethodInvocation(1078) at 3", "Insert SimpleName: getException(1804) into MethodInvocation(1805) at 1", "Insert SimpleName: mq(1816) into MethodInvocation(1824) at 0", "Insert ThisExpression(1822) into MethodInvocation(1824) at 4", "Insert SimpleName: node(1823) into MethodInvocation(1824) at 5", "Insert SimpleName: Reference(3041) into SimpleType: Reference(3042) at 0", "Update SimpleName: s(2302) to scope", "Move SimpleName: s(2302) into MethodInvocation(3045) at 0", "Insert SimpleName: declareStartOfScopeTempVariable(3044) into MethodInvocation(3045) at 1", "Move SimpleName: scope(3453) into MethodInvocation(3730) at 0", "Move ClassInstanceCreation(8148) into VariableDeclarationFragment(8871) at 1", "Insert SimpleName: FunctionDeclaration(881) into SimpleType: FunctionDeclaration(882) at 0", "Insert SimpleName: getFilePosition(1820) into MethodInvocation(1821) at 1", "Move ClassInstanceCreation(8813) into ReturnStatement(9532) at 0", "Move ClassInstanceCreation(7405) into MethodInvocation(8159) at 3", "Move MethodInvocation(8234) into CastExpression(8957) at 1", "Update SimpleName: s(8223) to substV", "Insert StringLiteral: \"@fname = @r;\"(8942) into MethodInvocation(8956) at 1", "Insert StringLiteral: \"fname\"(8943) into MethodInvocation(8956) at 2", "Insert StringLiteral: \"r\"(8954) into MethodInvocation(8956) at 4", "Insert SimpleName: result(8955) into MethodInvocation(8956) at 5", "Delete StringLiteral: \"Allow a relied-upon (trusted) translator to supply JavaScript \"(309)", "Delete StringLiteral: \"code to be included in the output with no further \"(310)", "Delete StringLiteral: \"translation.\"(311)", "Delete InfixExpression: +(312)", "Delete SimpleName: node(338)", "Delete MethodInvocation(339)", "Delete SimpleName: getValue(1672)", "Delete MethodInvocation(1673)", "Delete SimpleName: s(825)", "Delete MethodInvocation(830)", "Delete SimpleName: s(817)", "Delete MethodInvocation(843)", "Delete SimpleName: s(865)", "Delete MethodInvocation(870)", "Delete SimpleName: s(890)", "Delete MethodInvocation(898)", "Delete SimpleName: s(946)", "Delete MethodInvocation(951)", "Delete SimpleName: s(953)", "Delete MethodInvocation(958)", "Delete SimpleName: s(963)", "Delete MethodInvocation(968)", "Delete SimpleName: s(960)", "Delete MethodInvocation(970)", "Delete IfStatement(1691)", "Delete Block(1694)", "Delete MethodDeclaration(1695)", "Delete AnonymousClassDeclaration(1696)", "Delete ClassInstanceCreation(1697)", "Delete MethodInvocation(2309)", "Delete SimpleName: s(2989)", "Delete MethodInvocation(2996)", "Delete SimpleName: s(3450)", "Delete MethodInvocation(3457)", "Delete SimpleName: s(3459)", "Delete MethodInvocation(3466)", "Delete SimpleName: s(4441)", "Delete MethodInvocation(4448)", "Delete SimpleName: tmpVal(4570)", "Delete SimpleName: s(4571)", "Delete MethodInvocation(4578)", "Delete VariableDeclarationFragment(4579)", "Delete VariableDeclarationStatement(4580)", "Delete SimpleName: s(6865)", "Delete MethodInvocation(6872)", "Delete SimpleName: s(7401)", "Delete MethodInvocation(7406)", "Delete SimpleName: s(8144)", "Delete MethodInvocation(8149)", "Delete SimpleName: substV(8220)", "Delete StringLiteral: \"@fname = @r;\"(8221)", "Delete StringLiteral: \"fname\"(8222)", "Delete StringLiteral: \"r\"(8235)", "Delete SimpleName: result(8236)", "Delete MethodInvocation(8237)", "Delete SimpleName: s(8807)", "Delete MethodInvocation(8814)"]}}, {"ExophoricFunctionRewriter_cluster": {"actions": [{"root": "UPDATE from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes.s from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ref to MethodInvocation at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}]}}, {"ExophoricFunctionRewriter_diff": {"operations": ["Update QualifiedName: com.google.caja.parser.SyntheticNodes.s(28) to com.google.caja.parser.js.SyntheticNodes.s", "Move SimpleName: ref(183) into MethodInvocation(188) at 0", "Delete SimpleName: s(182)", "Delete MethodInvocation(184)"]}}, {"IllegalReferenceCheckRewriter_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 4"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}]}}, {"IllegalReferenceCheckRewriter_diff": {"operations": ["Move ImportDeclaration(5) into CompilationUnit(191) at 4", "Update QualifiedName: com.google.caja.parser.SyntheticNodes(4) to com.google.caja.parser.js.SyntheticNodes"]}}, {"NonAsciiCheckVisitor_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}, {"root": "INS IfStatement to Block at 0", "operations": ["INS PrefixExpression: ! to IfStatement at 0", "INS ReturnStatement to Block at 0", "INS IfStatement to Block at 0", "INS ParenthesizedExpression to PrefixExpression: ! at 0", "INS Block to IfStatement at 1", "INS BooleanLiteral: true to ReturnStatement at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS VariableDeclarationStatement to Block at 1", "INS SimpleName: ident to VariableDeclarationFragment at 0", "INS SimpleType: Identifier to VariableDeclarationStatement at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: Identifier to SimpleType: Identifier at 0"]}, {"root": "INS VariableDeclarationStatement to Block at 2", "operations": ["INS MethodInvocation to VariableDeclarationFragment at 1", "INS VariableDeclarationStatement to Block at 2", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: name to VariableDeclarationFragment at 0", "INS SimpleName: ident to MethodInvocation at 0", "INS SimpleType: String to VariableDeclarationStatement at 0", "INS SimpleName: String to SimpleType: String at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV CastExpression to VariableDeclarationFragment at 1"]}, {"root": "INS InfixExpression: && to InfixExpression: && at 0", "operations": ["INS InfixExpression: && to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1", "INS SimpleName: name to InfixExpression: != at 0", "INS InfixExpression: != to InfixExpression: && at 1"]}, {"root": "MOVE from ParenthesizedExpression", "operations": ["MOV InstanceofExpression to ParenthesizedExpression at 0", "MOV PrefixExpression: ! to InfixExpression: && at 0"]}, {"root": "UPDATE from getName to name", "operations": ["UPD SimpleName: getName from getName to name"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: getName to MethodInvocation at 0"]}, {"root": "INS SimpleName: ident to MethodInvocation at 0", "operations": ["INS SimpleName: ident to MethodInvocation at 0"]}, {"root": "DEL QualifiedName: ac.node", "operations": ["DEL QualifiedName: ac.node"]}, {"root": "DEL MethodInvocation", "operations": ["DEL ParenthesizedExpression", "DEL MethodInvocation"]}]}}, {"NonAsciiCheckVisitor_diff": {"operations": ["Move ImportDeclaration(5) into CompilationUnit(116) at 5", "Update QualifiedName: com.google.caja.parser.SyntheticNodes(4) to com.google.caja.parser.js.SyntheticNodes", "Insert IfStatement(65) into Block(113) at 0", "Insert VariableDeclarationStatement(74) into Block(113) at 1", "Insert VariableDeclarationStatement(82) into Block(113) at 2", "Insert PrefixExpression: !(61) into IfStatement(65) at 0", "Insert Block(64) into IfStatement(65) at 1", "Insert SimpleType: Identifier(67) into VariableDeclarationStatement(74) at 0", "Insert VariableDeclarationFragment(73) into VariableDeclarationStatement(74) at 1", "Insert SimpleType: String(76) into VariableDeclarationStatement(82) at 0", "Insert VariableDeclarationFragment(81) into VariableDeclarationStatement(82) at 1", "Insert ParenthesizedExpression(60) into PrefixExpression: !(61) at 0", "Insert ReturnStatement(63) into Block(64) at 0", "Insert SimpleName: Identifier(66) into SimpleType: Identifier(67) at 0", "Insert SimpleName: ident(68) into VariableDeclarationFragment(73) at 0", "Move CastExpression(70) into VariableDeclarationFragment(73) at 1", "Insert SimpleName: String(75) into SimpleType: String(76) at 0", "Insert SimpleName: name(77) into VariableDeclarationFragment(81) at 0", "Insert MethodInvocation(80) into VariableDeclarationFragment(81) at 1", "Insert InfixExpression: &&(93) into InfixExpression: &&(99) at 0", "Move InstanceofExpression(59) into ParenthesizedExpression(60) at 0", "Insert BooleanLiteral: true(62) into ReturnStatement(63) at 0", "Insert SimpleName: ident(78) into MethodInvocation(80) at 0", "Insert SimpleName: getName(79) into MethodInvocation(80) at 1", "Move PrefixExpression: !(66) into InfixExpression: &&(93) at 0", "Insert InfixExpression: !=(92) into InfixExpression: &&(93) at 1", "Insert SimpleName: name(90) into InfixExpression: !=(92) at 0", "Insert NullLiteral(91) into InfixExpression: !=(92) at 1", "Update SimpleName: getName(72) to name", "Move SimpleName: getName(72) into MethodInvocation(97) at 0", "Insert SimpleName: ident(83) into MethodInvocation(85) at 0", "Delete QualifiedName: ac.node(60)", "Delete ParenthesizedExpression(71)", "Delete MethodInvocation(73)"]}}, {"QuasiBuilder_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 13", "MOV ImportDeclaration to CompilationUnit at 21"]}, {"root": "INS ImportDeclaration to CompilationUnit at 6", "operations": ["INS ImportDeclaration to CompilationUnit at 6", "INS QualifiedName: com.google.caja.lexer.Token to ImportDeclaration at 0"]}, {"root": "INS ImportDeclaration to CompilationUnit at 19", "operations": ["INS QualifiedName: com.google.caja.parser.js.SyntheticNodes to ImportDeclaration at 0", "INS ImportDeclaration to CompilationUnit at 19"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 14", "operations": ["INS SimpleName: getComments to MethodInvocation at 1", "INS Block to IfStatement at 1", "INS SimpleName: Token to SimpleType: Token at 0", "INS StringLiteral: \"@synthetic\" to MethodInvocation at 2", "INS MethodDeclaration to TypeDeclaration: class at 14", "INS SimpleName: n to SingleVariableDeclaration at 1", "INS SimpleType: Token to ParameterizedType: Token<?> at 0", "INS ReturnStatement to Block at 0", "INS SingleVariableDeclaration to EnhancedForStatement at 0", "INS ParameterizedType: Token<?> to SingleVariableDeclaration at 0", "INS SimpleName: indexOf to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: >= at 0", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ReturnStatement to Block at 1", "INS Block to MethodDeclaration at 5", "INS SimpleName: SyntheticNodes to MethodInvocation at 0", "INS SimpleName: hasSyntheticAnnotation to MethodDeclaration at 3", "INS Modifier: static to MethodDeclaration at 1", "INS SimpleName: n to MethodInvocation at 2", "INS Modifier: private to MethodDeclaration at 0", "INS SimpleName: n to MethodInvocation at 0", "INS InfixExpression: >= to IfStatement at 0", "INS MethodInvocation to EnhancedForStatement at 1", "INS MethodInvocation to ReturnStatement at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleType: ParseTreeNode to SingleVariableDeclaration at 0", "INS BooleanLiteral: false to ReturnStatement at 0", "INS QualifiedName: comment.text to MethodInvocation at 0", "INS EnhancedForStatement to Block at 0", "INS SimpleName: ParseTreeNode to SimpleType: ParseTreeNode at 0", "INS Block to EnhancedForStatement at 2", "INS WildcardType: ? to ParameterizedType: Token<?> at 1", "INS IfStatement to Block at 0", "INS SimpleName: isSynthesizable to MethodInvocation at 1", "INS SimpleName: comment to SingleVariableDeclaration at 1", "INS NumberLiteral: 0 to InfixExpression: >= at 1"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS SimpleType: Identifier to InstanceofExpression at 1", "INS Assignment: = to ExpressionStatement at 0", "INS SimpleName: getName to MethodInvocation at 1", "INS IfStatement to IfStatement at 2", "INS SimpleType: Identifier to VariableDeclarationStatement at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: isSynthetic to Assignment: = at 0", "INS MethodInvocation to Assignment: = at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS SimpleName: n to InstanceofExpression at 0", "INS SimpleType: Reference to InstanceofExpression at 1", "INS VariableDeclarationStatement to Block at 0", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS SimpleName: getIdentifierName to MethodInvocation at 1", "INS IfStatement to IfStatement at 2", "INS ExpressionStatement to Block at 1", "INS Block to MethodDeclaration at 5", "INS InfixExpression: != to InfixExpression: && at 0", "INS SimpleName: getValue to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 1", "INS SimpleName: endsWith to MethodInvocation at 1", "INS BooleanLiteral: true to Assignment: = at 1", "INS SimpleType: Reference to CastExpression at 0", "INS NullLiteral to InfixExpression: != at 1", "INS Block to IfStatement at 1", "INS Assignment: = to ExpressionStatement at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS StringLiteral: \"__\" to MethodInvocation at 2", "INS ExpressionStatement to Block at 0", "INS SimpleName: n to MethodInvocation at 1", "INS SimpleName: getClass to MethodInvocation at 1", "INS ExpressionStatement to Block at 1", "INS SimpleName: n to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS Block to IfStatement at 1", "INS SimpleName: isSynthetic to IfStatement at 0", "INS SimpleName: n to MethodInvocation at 0", "INS SimpleName: endsWith to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: ref to MethodInvocation at 0", "INS SimpleName: n to CastExpression at 1", "INS SimpleName: isSynthetic to Assignment: = at 0", "INS InstanceofExpression to IfStatement at 0", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS VariableDeclarationStatement to Block at 0", "INS Assignment: = to ExpressionStatement at 0", "INS VariableDeclarationStatement to Block at 0", "INS SimpleType: SyntheticQuasiNode to ClassInstanceCreation at 0", "INS MethodInvocation to ClassInstanceCreation at 2", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS SimpleName: isSynthetic to VariableDeclarationFragment at 0", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS Block to IfStatement at 1", "INS ClassInstanceCreation to ReturnStatement at 0", "INS MethodInvocation to ClassInstanceCreation at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS Block to IfStatement at 1", "INS SimpleName: n to CastExpression at 1", "INS InfixExpression: && to Assignment: = at 1", "INS PrimitiveType: boolean to VariableDeclarationStatement at 0", "INS SimpleName: isSynthetic to Assignment: = at 0", "INS SimpleName: ref to VariableDeclarationFragment at 0", "INS MethodInvocation to InfixExpression: != at 0", "INS IfStatement to Block at 2", "INS SimpleName: hasSyntheticAnnotation to MethodInvocation at 0", "INS SimpleName: ident to VariableDeclarationFragment at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleType: Reference to VariableDeclarationStatement at 0", "INS SimpleName: buildChildrenOf to MethodInvocation at 0", "INS CastExpression to VariableDeclarationFragment at 1", "INS SimpleType: Identifier to CastExpression at 0", "INS SimpleName: n to MethodInvocation at 1", "INS BooleanLiteral: false to VariableDeclarationFragment at 1", "INS SimpleName: n to InstanceofExpression at 0", "INS StringLiteral: \"__\" to MethodInvocation at 2", "INS SimpleName: ident to MethodInvocation at 0", "INS SimpleName: SyntheticQuasiNode to SimpleType: SyntheticQuasiNode at 0", "INS SimpleName: Reference to SimpleType: Reference at 0", "INS MethodInvocation to ClassInstanceCreation at 3", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: ident to MethodInvocation at 0", "INS MethodInvocation to IfStatement at 0", "INS IfStatement to Block at 1"]}, {"root": "MOVE from IfStatement", "operations": ["MOV Block to IfStatement at 2"]}, {"root": "DEL QualifiedName: JsTokenQueue.NO_COMMENT", "operations": ["DEL QualifiedName: JsTokenQueue.NO_COMMENT"]}]}}, {"QuasiBuilder_diff": {"operations": ["Move ImportDeclaration(35) into CompilationUnit(1330) at 13", "Move ImportDeclaration(47) into CompilationUnit(1330) at 21", "Insert ImportDeclaration(13) into CompilationUnit(1330) at 6", "Insert ImportDeclaration(39) into CompilationUnit(1330) at 19", "Insert QualifiedName: com.google.caja.lexer.Token(12) into ImportDeclaration(13) at 0", "Insert QualifiedName: com.google.caja.parser.js.SyntheticNodes(38) into ImportDeclaration(39) at 0", "Insert MethodDeclaration(1005) into TypeDeclaration: class(1329) at 14", "Insert Block(968) into MethodDeclaration(969) at 5", "Insert Modifier: private(970) into MethodDeclaration(1005) at 0", "Insert Modifier: static(971) into MethodDeclaration(1005) at 1", "Insert PrimitiveType: boolean(972) into MethodDeclaration(1005) at 2", "Insert SimpleName: hasSyntheticAnnotation(973) into MethodDeclaration(1005) at 3", "Insert SingleVariableDeclaration(977) into MethodDeclaration(1005) at 4", "Insert Block(1004) into MethodDeclaration(1005) at 5", "Insert VariableDeclarationStatement(874) into Block(968) at 0", "Insert IfStatement(937) into Block(968) at 1", "Insert IfStatement(967) into Block(968) at 2", "Insert SimpleType: ParseTreeNode(975) into SingleVariableDeclaration(977) at 0", "Insert SimpleName: n(976) into SingleVariableDeclaration(977) at 1", "Insert EnhancedForStatement(1001) into Block(1004) at 0", "Insert ReturnStatement(1003) into Block(1004) at 1", "Insert PrimitiveType: boolean(870) into VariableDeclarationStatement(874) at 0", "Insert VariableDeclarationFragment(873) into VariableDeclarationStatement(874) at 1", "Insert MethodInvocation(877) into IfStatement(937) at 0", "Insert Block(882) into IfStatement(937) at 1", "Insert IfStatement(936) into IfStatement(937) at 2", "Insert SimpleName: isSynthetic(938) into IfStatement(967) at 0", "Insert Block(952) into IfStatement(967) at 1", "Move Block(879) into IfStatement(967) at 2", "Insert SimpleName: ParseTreeNode(974) into SimpleType: ParseTreeNode(975) at 0", "Insert SingleVariableDeclaration(983) into EnhancedForStatement(1001) at 0", "Insert MethodInvocation(986) into EnhancedForStatement(1001) at 1", "Insert Block(1000) into EnhancedForStatement(1001) at 2", "Insert BooleanLiteral: false(1002) into ReturnStatement(1003) at 0", "Insert SimpleName: isSynthetic(871) into VariableDeclarationFragment(873) at 0", "Insert BooleanLiteral: false(872) into VariableDeclarationFragment(873) at 1", "Insert SimpleName: hasSyntheticAnnotation(875) into MethodInvocation(877) at 0", "Insert SimpleName: n(876) into MethodInvocation(877) at 1", "Insert ExpressionStatement(881) into Block(882) at 0", "Insert InstanceofExpression(886) into IfStatement(936) at 0", "Insert Block(911) into IfStatement(936) at 1", "Insert IfStatement(935) into IfStatement(936) at 2", "Insert ReturnStatement(951) into Block(952) at 0", "Insert ParameterizedType: Token<?>(981) into SingleVariableDeclaration(983) at 0", "Insert SimpleName: comment(982) into SingleVariableDeclaration(983) at 1", "Insert SimpleName: n(984) into MethodInvocation(986) at 0", "Insert SimpleName: getComments(985) into MethodInvocation(986) at 1", "Insert IfStatement(999) into Block(1000) at 0", "Insert Assignment: =(880) into ExpressionStatement(881) at 0", "Insert SimpleName: n(883) into InstanceofExpression(886) at 0", "Insert SimpleType: Identifier(885) into InstanceofExpression(886) at 1", "Insert VariableDeclarationStatement(895) into Block(911) at 0", "Insert ExpressionStatement(910) into Block(911) at 1", "Insert InstanceofExpression(915) into IfStatement(935) at 0", "Insert Block(934) into IfStatement(935) at 1", "Insert ClassInstanceCreation(950) into ReturnStatement(951) at 0", "Insert SimpleType: Token(979) into ParameterizedType: Token<?>(981) at 0", "Insert WildcardType: ?(980) into ParameterizedType: Token<?>(981) at 1", "Insert InfixExpression: >=(992) into IfStatement(999) at 0", "Insert Block(998) into IfStatement(999) at 1", "Insert SimpleName: isSynthetic(878) into Assignment: =(880) at 0", "Insert BooleanLiteral: true(879) into Assignment: =(880) at 1", "Insert SimpleName: Identifier(884) into SimpleType: Identifier(885) at 0", "Insert SimpleType: Identifier(888) into VariableDeclarationStatement(895) at 0", "Insert VariableDeclarationFragment(894) into VariableDeclarationStatement(895) at 1", "Insert Assignment: =(909) into ExpressionStatement(910) at 0", "Insert SimpleName: n(912) into InstanceofExpression(915) at 0", "Insert SimpleType: Reference(914) into InstanceofExpression(915) at 1", "Insert VariableDeclarationStatement(924) into Block(934) at 0", "Insert ExpressionStatement(933) into Block(934) at 1", "Insert SimpleType: SyntheticQuasiNode(940) into ClassInstanceCreation(950) at 0", "Insert MethodInvocation(943) into ClassInstanceCreation(950) at 1", "Insert MethodInvocation(946) into ClassInstanceCreation(950) at 2", "Insert MethodInvocation(949) into ClassInstanceCreation(950) at 3", "Insert SimpleName: Token(978) into SimpleType: Token(979) at 0", "Insert MethodInvocation(990) into InfixExpression: >=(992) at 0", "Insert NumberLiteral: 0(991) into InfixExpression: >=(992) at 1", "Insert ReturnStatement(997) into Block(998) at 0", "Insert SimpleName: Identifier(887) into SimpleType: Identifier(888) at 0", "Insert SimpleName: ident(889) into VariableDeclarationFragment(894) at 0", "Insert CastExpression(893) into VariableDeclarationFragment(894) at 1", "Insert SimpleName: isSynthetic(896) into Assignment: =(909) at 0", "Insert InfixExpression: &&(908) into Assignment: =(909) at 1", "Insert SimpleName: Reference(913) into SimpleType: Reference(914) at 0", "Insert SimpleType: Reference(917) into VariableDeclarationStatement(924) at 0", "Insert VariableDeclarationFragment(923) into VariableDeclarationStatement(924) at 1", "Insert Assignment: =(932) into ExpressionStatement(933) at 0", "Insert SimpleName: SyntheticQuasiNode(939) into SimpleType: SyntheticQuasiNode(940) at 0", "Insert SimpleName: n(941) into MethodInvocation(943) at 0", "Insert SimpleName: getClass(942) into MethodInvocation(943) at 1", "Insert SimpleName: n(944) into MethodInvocation(946) at 0", "Insert SimpleName: getValue(945) into MethodInvocation(946) at 1", "Insert SimpleName: buildChildrenOf(947) into MethodInvocation(949) at 0", "Insert SimpleName: n(948) into MethodInvocation(949) at 1", "Insert QualifiedName: comment.text(987) into MethodInvocation(990) at 0", "Insert SimpleName: indexOf(988) into MethodInvocation(990) at 1", "Insert StringLiteral: \"@synthetic\"(989) into MethodInvocation(990) at 2", "Insert MethodInvocation(996) into ReturnStatement(997) at 0", "Insert SimpleType: Identifier(891) into CastExpression(893) at 0", "Insert SimpleName: n(892) into CastExpression(893) at 1", "Insert InfixExpression: !=(901) into InfixExpression: &&(908) at 0", "Insert MethodInvocation(907) into InfixExpression: &&(908) at 1", "Insert SimpleName: Reference(916) into SimpleType: Reference(917) at 0", "Insert SimpleName: ref(918) into VariableDeclarationFragment(923) at 0", "Insert CastExpression(922) into VariableDeclarationFragment(923) at 1", "Insert SimpleName: isSynthetic(925) into Assignment: =(932) at 0", "Insert MethodInvocation(931) into Assignment: =(932) at 1", "Insert SimpleName: SyntheticNodes(993) into MethodInvocation(996) at 0", "Insert SimpleName: isSynthesizable(994) into MethodInvocation(996) at 1", "Insert SimpleName: n(995) into MethodInvocation(996) at 2", "Insert SimpleName: Identifier(890) into SimpleType: Identifier(891) at 0", "Insert MethodInvocation(899) into InfixExpression: !=(901) at 0", "Insert NullLiteral(900) into InfixExpression: !=(901) at 1", "Insert MethodInvocation(904) into MethodInvocation(907) at 0", "Insert SimpleName: endsWith(905) into MethodInvocation(907) at 1", "Insert StringLiteral: \"__\"(906) into MethodInvocation(907) at 2", "Insert SimpleType: Reference(920) into CastExpression(922) at 0", "Insert SimpleName: n(921) into CastExpression(922) at 1", "Insert MethodInvocation(928) into MethodInvocation(931) at 0", "Insert SimpleName: endsWith(929) into MethodInvocation(931) at 1", "Insert StringLiteral: \"__\"(930) into MethodInvocation(931) at 2", "Insert SimpleName: ident(897) into MethodInvocation(899) at 0", "Insert SimpleName: getName(898) into MethodInvocation(899) at 1", "Insert SimpleName: ident(902) into MethodInvocation(904) at 0", "Insert SimpleName: getName(903) into MethodInvocation(904) at 1", "Insert SimpleName: Reference(919) into SimpleType: Reference(920) at 0", "Insert SimpleName: ref(926) into MethodInvocation(928) at 0", "Insert SimpleName: getIdentifierName(927) into MethodInvocation(928) at 1", "Delete QualifiedName: JsTokenQueue.NO_COMMENT(1178)"]}}, {"Rule_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 18", "MOV ImportDeclaration to CompilationUnit at 18"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes.s from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 32", "operations": ["INS Modifier: static to MethodDeclaration at 1", "INS SimpleType: Identifier to SingleVariableDeclaration at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SimpleName: isSynthetic to MethodDeclaration at 3", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS MethodDeclaration to TypeDeclaration: class at 32", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS Modifier: protected to MethodDeclaration at 0"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 34", "operations": ["INS SimpleType: FunctionConstructor to SingleVariableDeclaration at 0", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: node to SingleVariableDeclaration at 1", "INS SingleVariableDeclaration to MethodDeclaration at 4", "INS ReturnStatement to Block at 0", "INS SimpleName: node to MethodInvocation at 0", "INS QualifiedName: SyntheticNodes.SYNTHETIC to MethodInvocation at 2", "INS SimpleName: getAttributes to MethodInvocation at 1", "INS SimpleName: is to MethodInvocation at 1", "INS PrimitiveType: boolean to MethodDeclaration at 2", "INS SimpleName: FunctionConstructor to SimpleType: FunctionConstructor at 0", "INS Modifier: protected to MethodDeclaration at 0", "INS Block to MethodDeclaration at 5", "INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: isSynthetic to MethodDeclaration at 3", "INS MethodDeclaration to TypeDeclaration: class at 34", "INS Modifier: static to MethodDeclaration at 1"]}, {"root": "INS MethodDeclaration to TypeDeclaration: class at 49", "operations": ["INS Modifier: public to MethodDeclaration at 1", "INS MethodDeclaration to TypeDeclaration: class at 49", "INS InfixExpression: + to ReturnStatement at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: toString to MethodDeclaration at 3", "INS SimpleName: getName to MethodInvocation at 0", "INS MethodInvocation to InfixExpression: + at 1", "INS StringLiteral: \"<Rule \" to InfixExpression: + at 0", "INS Block to MethodDeclaration at 4", "INS SimpleType: String to MethodDeclaration at 2", "INS MarkerAnnotation to MethodDeclaration at 0", "INS SimpleName: String to SimpleType: String at 0", "INS StringLiteral: \">\" to InfixExpression: + at 2", "INS SimpleName: Override to MarkerAnnotation at 0"]}, {"root": "MOVE from MethodDeclaration", "operations": ["MOV Block to MethodDeclaration at 5"]}, {"root": "INS Block to MethodDeclaration at 5", "operations": ["INS SimpleName: isSynthetic to MethodInvocation at 0", "INS ReturnStatement to Block at 0", "INS SimpleName: getIdentifier to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: node to MethodInvocation at 0", "INS MethodInvocation to ReturnStatement at 0", "INS Block to MethodDeclaration at 5"]}, {"root": "UPDATE from ParseTreeNode to Reference", "operations": ["UPD SimpleName: ParseTreeNode from ParseTreeNode to Reference", "UPD SimpleType: ParseTreeNode from ParseTreeNode to Reference"]}, {"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV ClassInstanceCreation to VariableDeclarationFragment at 1"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Block", "operations": ["MOV VariableDeclarationStatement to Block at 0"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ClassInstanceCreation to Assignment: = at 1"]}, {"root": "MOVE from Assignment: =", "operations": ["MOV ClassInstanceCreation to Assignment: = at 1"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: Expression to CastExpression at 0"]}, {"root": "MOVE from CastExpression", "operations": ["MOV SimpleType: Expression to CastExpression at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 1", "operations": ["INS MethodInvocation to MethodInvocation at 1", "INS SimpleName: getIdentifier to MethodInvocation at 1"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV ClassInstanceCreation to MethodInvocation at 4"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: f to MethodInvocation at 0"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL SimpleName: s"]}]}}, {"Rule_diff": {"operations": ["Move ImportDeclaration(15) into CompilationUnit(2463) at 18", "Move ImportDeclaration(51) into CompilationUnit(2463) at 18", "Update QualifiedName: com.google.caja.parser.SyntheticNodes(14) to com.google.caja.parser.js.SyntheticNodes", "Update QualifiedName: com.google.caja.parser.SyntheticNodes.s(50) to com.google.caja.parser.js.SyntheticNodes.s", "Insert MethodDeclaration(1437) into TypeDeclaration: class(2462) at 32", "Insert MethodDeclaration(1470) into TypeDeclaration: class(2462) at 34", "Insert MethodDeclaration(2461) into TypeDeclaration: class(2462) at 49", "Insert Modifier: protected(1421) into MethodDeclaration(1437) at 0", "Insert Modifier: static(1422) into MethodDeclaration(1437) at 1", "Insert PrimitiveType: boolean(1423) into MethodDeclaration(1437) at 2", "Insert SimpleName: isSynthetic(1424) into MethodDeclaration(1437) at 3", "Insert SingleVariableDeclaration(1428) into MethodDeclaration(1437) at 4", "Move Block(1438) into MethodDeclaration(1437) at 5", "Insert Block(1452) into MethodDeclaration(1453) at 5", "Insert Modifier: protected(1454) into MethodDeclaration(1470) at 0", "Insert Modifier: static(1455) into MethodDeclaration(1470) at 1", "Insert PrimitiveType: boolean(1456) into MethodDeclaration(1470) at 2", "Insert SimpleName: isSynthetic(1457) into MethodDeclaration(1470) at 3", "Insert SingleVariableDeclaration(1461) into MethodDeclaration(1470) at 4", "Insert Block(1469) into MethodDeclaration(1470) at 5", "Insert MarkerAnnotation(2449) into MethodDeclaration(2461) at 0", "Insert Modifier: public(2450) into MethodDeclaration(2461) at 1", "Insert SimpleType: String(2452) into MethodDeclaration(2461) at 2", "Insert SimpleName: toString(2453) into MethodDeclaration(2461) at 3", "Insert Block(2460) into MethodDeclaration(2461) at 4", "Insert SimpleType: Identifier(1426) into SingleVariableDeclaration(1428) at 0", "Insert SimpleName: node(1427) into SingleVariableDeclaration(1428) at 1", "Update SimpleType: ParseTreeNode(1428) to Reference", "Insert ReturnStatement(1451) into Block(1452) at 0", "Insert SimpleType: FunctionConstructor(1459) into SingleVariableDeclaration(1461) at 0", "Insert SimpleName: node(1460) into SingleVariableDeclaration(1461) at 1", "Insert ReturnStatement(1468) into Block(1469) at 0", "Insert SimpleName: Override(2448) into MarkerAnnotation(2449) at 0", "Insert SimpleName: String(2451) into SimpleType: String(2452) at 0", "Insert ReturnStatement(2459) into Block(2460) at 0", "Move ClassInstanceCreation(758) into ReturnStatement(758) at 0", "Insert SimpleName: Identifier(1425) into SimpleType: Identifier(1426) at 0", "Update SimpleName: ParseTreeNode(1427) to Reference", "Insert MethodInvocation(1450) into ReturnStatement(1451) at 0", "Insert SimpleName: FunctionConstructor(1458) into SimpleType: FunctionConstructor(1459) at 0", "Insert MethodInvocation(1467) into ReturnStatement(1468) at 0", "Insert InfixExpression: +(2458) into ReturnStatement(2459) at 0", "Move ClassInstanceCreation(860) into VariableDeclarationFragment(858) at 1", "Insert SimpleName: isSynthetic(1446) into MethodInvocation(1450) at 0", "Insert MethodInvocation(1449) into MethodInvocation(1450) at 1", "Insert MethodInvocation(1464) into MethodInvocation(1467) at 0", "Insert SimpleName: is(1465) into MethodInvocation(1467) at 1", "Insert QualifiedName: SyntheticNodes.SYNTHETIC(1466) into MethodInvocation(1467) at 2", "Move VariableDeclarationStatement(2107) into Block(2119) at 0", "Move VariableDeclarationStatement(2062) into Block(2160) at 0", "Insert StringLiteral: \"<Rule \"(2454) into InfixExpression: +(2458) at 0", "Insert MethodInvocation(2456) into InfixExpression: +(2458) at 1", "Insert StringLiteral: \">\"(2457) into InfixExpression: +(2458) at 2", "Insert SimpleName: node(1447) into MethodInvocation(1449) at 0", "Insert SimpleName: getIdentifier(1448) into MethodInvocation(1449) at 1", "Insert SimpleName: node(1462) into MethodInvocation(1464) at 0", "Insert SimpleName: getAttributes(1463) into MethodInvocation(1464) at 1", "Insert SimpleName: getName(2455) into MethodInvocation(2456) at 0", "Move ClassInstanceCreation(2120) into Assignment: =(2117) at 1", "Move ClassInstanceCreation(2133) into Assignment: =(2158) at 1", "Move SimpleType: Expression(2111) into CastExpression(2109) at 0", "Move SimpleType: Expression(2066) into CastExpression(2150) at 0", "Insert MethodInvocation(1395) into MethodInvocation(1396) at 1", "Move ClassInstanceCreation(2088) into MethodInvocation(2108) at 4", "Move ClassInstanceCreation(2075) into MethodInvocation(2149) at 4", "Move SimpleName: f(1397) into MethodInvocation(1395) at 0", "Insert SimpleName: getIdentifier(1394) into MethodInvocation(1395) at 1", "Delete SimpleName: s(749)", "Delete MethodInvocation(759)", "Delete SimpleName: s(854)", "Delete MethodInvocation(861)", "Delete SimpleName: s(2071)", "Delete MethodInvocation(2076)", "Delete SimpleName: s(2084)", "Delete MethodInvocation(2089)", "Delete SimpleName: s(2116)", "Delete MethodInvocation(2121)", "Delete SimpleName: s(2129)", "Delete MethodInvocation(2134)"]}}, {"Scope_cluster": {"actions": [{"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes.s from com.google.caja.parser.SyntheticNodes.s to com.google.caja.parser.js.SyntheticNodes.s"]}, {"root": "UPDATE from Does this scope mention \"this\" freely? to Does this scope mention non-synthetic \"this\" freely?", "operations": ["UPD TextElement: Does this scope mention \"this\" freely? from Does this scope mention \"this\" freely? to Does this scope mention non-synthetic \"this\" freely?"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "INS MethodInvocation to MethodInvocation at 0", "operations": ["INS SimpleName: getIdentifier to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 0"]}, {"root": "DEL IfStatement", "operations": ["DEL MethodInvocation", "DEL SimpleName: getAttributes", "DEL QualifiedName: SyntheticNodes.SYNTHETIC", "DEL PrefixExpression: !", "DEL MethodInvocation", "DEL SimpleName: is", "DEL Block", "DEL IfStatement", "DEL SimpleName: node"]}]}}, {"Scope_diff": {"operations": ["Update QualifiedName: com.google.caja.parser.SyntheticNodes(10) to com.google.caja.parser.js.SyntheticNodes", "Update QualifiedName: com.google.caja.parser.SyntheticNodes.s(44) to com.google.caja.parser.js.SyntheticNodes.s", "Update TextElement: Does this scope mention \"this\" freely?(871) to Does this scope mention non-synthetic \"this\" freely?", "Move ExpressionStatement(1605) into Block(1612) at 0", "Insert MethodInvocation(1653) into MethodInvocation(1655) at 0", "Move SimpleName: node(1660) into MethodInvocation(1653) at 0", "Insert SimpleName: getIdentifier(1652) into MethodInvocation(1653) at 1", "Delete SimpleName: node(1594)", "Delete SimpleName: getAttributes(1595)", "Delete MethodInvocation(1596)", "Delete SimpleName: is(1597)", "Delete QualifiedName: SyntheticNodes.SYNTHETIC(1598)", "Delete MethodInvocation(1599)", "Delete PrefixExpression: !(1600)", "Delete Block(1606)", "Delete IfStatement(1607)"]}}, {"SimpleQuasiNode_cluster": {"actions": [{"root": "UPDATE from public to protected", "operations": ["UPD Modifier: public from public to protected"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: node to MethodInvocation at 2"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL ImportDeclaration", "DEL QualifiedName: com.google.caja.parser.SyntheticNodes"]}, {"root": "DEL Modifier: final", "operations": ["DEL Modifier: final"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: SyntheticNodes", "DEL SimpleName: s", "DEL MethodInvocation"]}]}}, {"SimpleQuasiNode_diff": {"operations": ["Update Modifier: public(68) to protected", "Move SimpleName: node(319) into MethodInvocation(315) at 2", "Delete QualifiedName: com.google.caja.parser.SyntheticNodes(10)", "Delete ImportDeclaration(11)", "Delete Modifier: final(27)", "Delete SimpleName: SyntheticNodes(317)", "Delete SimpleName: s(318)", "Delete MethodInvocation(320)"]}}, {"TrailingUnderscoresHole_cluster": {"actions": [{"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS SimpleName: specimen to MethodInvocation at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS VariableDeclarationStatement to Block at 1", "INS SimpleName: getName to MethodInvocation at 1", "INS MethodInvocation to VariableDeclarationFragment at 1", "INS SimpleName: value to VariableDeclarationFragment at 0"]}, {"root": "INS SimpleType: Identifier to VariableDeclarationStatement at 0", "operations": ["INS SimpleType: Identifier to VariableDeclarationStatement at 0", "INS SimpleName: Identifier to SimpleType: Identifier at 0"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: String to VariableDeclarationStatement at 0"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: value to InfixExpression: != at 0", "INS InfixExpression: && to IfStatement at 0", "INS InfixExpression: != to InfixExpression: && at 0", "INS NullLiteral to InfixExpression: != at 1"]}, {"root": "UPDATE from value to specimen", "operations": ["UPD SimpleName: value from value to specimen"]}, {"root": "MOVE from VariableDeclarationFragment", "operations": ["MOV CastExpression to VariableDeclarationFragment at 1"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV MethodInvocation to InfixExpression: && at 1"]}, {"root": "INS VariableDeclarationStatement to Block at 1", "operations": ["INS ClassInstanceCreation to VariableDeclarationFragment at 1", "INS SimpleName: Identifier to SimpleType: Identifier at 0", "INS VariableDeclarationFragment to VariableDeclarationStatement at 1", "INS SimpleName: shortIdentifier to VariableDeclarationFragment at 0", "INS SimpleType: Identifier to ClassInstanceCreation at 0", "INS VariableDeclarationStatement to Block at 1"]}, {"root": "INS ExpressionStatement to Block at 2", "operations": ["INS MethodInvocation to MethodInvocation at 0", "INS SimpleName: shortIdentifier to MethodInvocation at 0", "INS SimpleName: specimen to MethodInvocation at 0", "INS ExpressionStatement to Block at 2", "INS SimpleName: getAttributes to MethodInvocation at 1", "INS MethodInvocation to MethodInvocation at 2", "INS MethodInvocation to ExpressionStatement at 0"]}, {"root": "INS ReturnStatement to Block at 3", "operations": ["INS ReturnStatement to Block at 3", "INS MethodInvocation to ReturnStatement at 0", "INS SimpleName: bindings to MethodInvocation at 1"]}, {"root": "MOVE from VariableDeclarationStatement", "operations": ["MOV SimpleType: Identifier to VariableDeclarationStatement at 0"]}, {"root": "UPDATE from newNodeInstance to putAll", "operations": ["UPD SimpleName: newNodeInstance from newNodeInstance to putAll"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: ParseTreeNodes to MethodInvocation at 1", "MOV SimpleName: newNodeInstance to MethodInvocation at 1", "MOV MethodInvocation to ClassInstanceCreation at 1"]}, {"root": "UPDATE from Collections to putIfDeepEquals", "operations": ["UPD SimpleName: Collections from Collections to putIfDeepEquals"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV SimpleName: emptyList to MethodInvocation at 3", "MOV SimpleName: Collections to MethodInvocation at 0"]}, {"root": "MOVE from MethodInvocation", "operations": ["MOV MethodInvocation to MethodInvocation at 2"]}, {"root": "UPDATE from emptyList to shortIdentifier", "operations": ["UPD SimpleName: emptyList from emptyList to shortIdentifier"]}, {"root": "UPDATE from ParseTreeNodes to getAttributes", "operations": ["UPD SimpleName: ParseTreeNodes from ParseTreeNodes to getAttributes"]}, {"root": "DEL MethodInvocation", "operations": ["DEL MethodInvocation", "DEL ParenthesizedExpression", "DEL SimpleName: getValue"]}, {"root": "DEL ReturnStatement", "operations": ["DEL TypeLiteral", "DEL MethodInvocation", "DEL SimpleName: putIfDeepEquals", "DEL SimpleType: ParseTreeNode", "DEL SimpleName: ParseTreeNode", "DEL SimpleName: bindings", "DEL MethodInvocation", "DEL MethodInvocation", "DEL ReturnStatement"]}]}}, {"TrailingUnderscoresHole_diff": {"operations": ["Insert VariableDeclarationStatement(128) into Block(179) at 1", "Insert SimpleType: Identifier(110) into VariableDeclarationStatement(120) at 0", "Move SimpleType: String(110) into VariableDeclarationStatement(128) at 0", "Insert VariableDeclarationFragment(127) into VariableDeclarationStatement(128) at 1", "Insert InfixExpression: &&(136) into IfStatement(178) at 0", "Insert SimpleName: Identifier(109) into SimpleType: Identifier(110) at 0", "Update SimpleName: value(111) to specimen", "Move CastExpression(118) into VariableDeclarationFragment(119) at 1", "Insert SimpleName: value(123) into VariableDeclarationFragment(127) at 0", "Insert MethodInvocation(126) into VariableDeclarationFragment(127) at 1", "Insert InfixExpression: !=(131) into InfixExpression: &&(136) at 0", "Move MethodInvocation(127) into InfixExpression: &&(136) at 1", "Insert VariableDeclarationStatement(160) into Block(177) at 1", "Insert ExpressionStatement(169) into Block(177) at 2", "Insert ReturnStatement(176) into Block(177) at 3", "Insert SimpleName: specimen(124) into MethodInvocation(126) at 0", "Insert SimpleName: getName(125) into MethodInvocation(126) at 1", "Insert SimpleName: value(129) into InfixExpression: !=(131) at 0", "Insert NullLiteral(130) into InfixExpression: !=(131) at 1", "Move SimpleType: Identifier(140) into VariableDeclarationStatement(160) at 0", "Insert VariableDeclarationFragment(159) into VariableDeclarationStatement(160) at 1", "Insert MethodInvocation(168) into ExpressionStatement(169) at 0", "Insert MethodInvocation(175) into ReturnStatement(176) at 0", "Insert SimpleName: shortIdentifier(144) into VariableDeclarationFragment(159) at 0", "Insert ClassInstanceCreation(158) into VariableDeclarationFragment(159) at 1", "Insert MethodInvocation(163) into MethodInvocation(168) at 0", "Update SimpleName: newNodeInstance(138) to putAll", "Move SimpleName: newNodeInstance(138) into MethodInvocation(168) at 1", "Insert MethodInvocation(167) into MethodInvocation(168) at 2", "Update SimpleName: Collections(153) to putIfDeepEquals", "Move SimpleName: Collections(153) into MethodInvocation(175) at 0", "Insert SimpleName: bindings(171) into MethodInvocation(175) at 1", "Move MethodInvocation(136) into MethodInvocation(175) at 2", "Update SimpleName: emptyList(156) to shortIdentifier", "Move SimpleName: emptyList(156) into MethodInvocation(175) at 3", "Insert SimpleType: Identifier(146) into ClassInstanceCreation(158) at 0", "Move MethodInvocation(152) into ClassInstanceCreation(158) at 1", "Insert SimpleName: shortIdentifier(161) into MethodInvocation(163) at 0", "Update SimpleName: ParseTreeNodes(137) to getAttributes", "Move SimpleName: ParseTreeNodes(137) into MethodInvocation(163) at 1", "Insert SimpleName: specimen(165) into MethodInvocation(167) at 0", "Insert SimpleName: getAttributes(166) into MethodInvocation(167) at 1", "Insert SimpleName: Identifier(145) into SimpleType: Identifier(146) at 0", "Delete ParenthesizedExpression(119)", "Delete SimpleName: getValue(120)", "Delete MethodInvocation(121)", "Delete SimpleName: putIfDeepEquals(133)", "Delete SimpleName: bindings(134)", "Delete TypeLiteral(141)", "Delete SimpleName: ParseTreeNode(154)", "Delete SimpleType: ParseTreeNode(155)", "Delete MethodInvocation(157)", "Delete MethodInvocation(158)", "Delete MethodInvocation(159)", "Delete ReturnStatement(160)"]}}, {"CajaRuntimeDebuggingRewriter_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 5"]}, {"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}]}}, {"CajaRuntimeDebuggingRewriter_diff": {"operations": ["Move ImportDeclaration(7) into CompilationUnit(1300) at 5", "Update QualifiedName: com.google.caja.parser.SyntheticNodes(6) to com.google.caja.parser.js.SyntheticNodes"]}}, {"CompileCssTemplatesStage_cluster": {"actions": [{"root": "MOVE from CompilationUnit", "operations": ["MOV ImportDeclaration to CompilationUnit at 7"]}]}}, {"CompileCssTemplatesStage_diff": {"operations": ["Move ImportDeclaration(19) into CompilationUnit(255) at 7"]}}, {"CompileGxpsStage_cluster": {"actions": [{"root": "MOVE from ReturnStatement", "operations": ["MOV ClassInstanceCreation to ReturnStatement at 0"]}, {"root": "DEL ImportDeclaration", "operations": ["DEL QualifiedName: com.google.caja.parser.SyntheticNodes.s", "DEL ImportDeclaration"]}, {"root": "DEL MethodInvocation", "operations": ["DEL SimpleName: s", "DEL MethodInvocation"]}]}}, {"CompileGxpsStage_diff": {"operations": ["Move ClassInstanceCreation(431) into ReturnStatement(429) at 0", "Delete QualifiedName: com.google.caja.parser.SyntheticNodes.s(38)", "Delete ImportDeclaration(39)", "Delete SimpleName: s(426)", "Delete MethodInvocation(432)"]}}, {"ConsolidateCodeStage_cluster": {"actions": [{"root": "INS InfixExpression: + to MethodInvocation at 2", "operations": ["INS InfixExpression: + to MethodInvocation at 2", "INS StringLiteral: \"  ___./*@synthetic*/loadModule(\" to InfixExpression: + at 2", "INS StringLiteral: \"}\" to InfixExpression: + at 4", "INS StringLiteral: \"\" to InfixExpression: + at 0", "INS StringLiteral: \"{\" to InfixExpression: + at 1", "INS StringLiteral: \"      /*@synthetic*/function (___, IMPORTS___) { @body*; });\" to InfixExpression: + at 3"]}, {"root": "DEL StringLiteral: \"{ ___.loadModule(function (___, IMPORTS___) { @body*; }); }\"", "operations": ["DEL StringLiteral: \"{ ___.loadModule(function (___, IMPORTS___) { @body*; }); }\""]}]}}, {"ConsolidateCodeStage_diff": {"operations": ["Insert InfixExpression: +(224) into MethodInvocation(227) at 2", "Insert StringLiteral: \"\"(219) into InfixExpression: +(224) at 0", "Insert StringLiteral: \"{\"(220) into InfixExpression: +(224) at 1", "Insert StringLiteral: \"  ___./*@synthetic*/loadModule(\"(221) into InfixExpression: +(224) at 2", "Insert StringLiteral: \"      /*@synthetic*/function (___, IMPORTS___) { @body*; });\"(222) into InfixExpression: +(224) at 3", "Insert StringLiteral: \"}\"(223) into InfixExpression: +(224) at 4", "Delete StringLiteral: \"{ ___.loadModule(function (___, IMPORTS___) { @body*; }); }\"(219)"]}}, {"ValidateJavascriptStage_cluster": {"actions": [{"root": "UPDATE from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes", "operations": ["UPD QualifiedName: com.google.caja.parser.SyntheticNodes from com.google.caja.parser.SyntheticNodes to com.google.caja.parser.js.SyntheticNodes"]}, {"root": "INS InfixExpression: && to IfStatement at 0", "operations": ["INS SimpleName: node to MethodInvocation at 2", "INS SimpleName: isSynthesizable to MethodInvocation at 1", "INS MethodInvocation to InfixExpression: && at 0", "INS SimpleName: SyntheticNodes to MethodInvocation at 0", "INS InfixExpression: && to IfStatement at 0"]}, {"root": "INS IfStatement to Block at 1", "operations": ["INS NullLiteral to InfixExpression: != at 1", "INS IfStatement to Block at 1", "INS InfixExpression: != to IfStatement at 0", "INS Block to IfStatement at 1", "INS SimpleName: nonSyntheticScopeRoot to InfixExpression: != at 0"]}, {"root": "INS ReturnStatement to Block at 0", "operations": ["INS ReturnStatement to Block at 0", "INS NullLiteral to ReturnStatement at 0"]}, {"root": "MOVE from InfixExpression: &&", "operations": ["MOV PrefixExpression: ! to InfixExpression: && at 1"]}, {"root": "MOVE from Block", "operations": ["MOV ExpressionStatement to Block at 0"]}, {"root": "DEL ExpressionStatement", "operations": ["DEL SimpleName: scopeRoot", "DEL Assignment: =", "DEL SimpleName: js", "DEL ExpressionStatement"]}]}}, {"ValidateJavascriptStage_diff": {"operations": ["Update QualifiedName: com.google.caja.parser.SyntheticNodes(6) to com.google.caja.parser.js.SyntheticNodes", "Insert InfixExpression: &&(171) into IfStatement(175) at 0", "Insert IfStatement(82) into Block(83) at 1", "Insert ReturnStatement(119) into Block(120) at 0", "Insert MethodInvocation(163) into InfixExpression: &&(171) at 0", "Move PrefixExpression: !(163) into InfixExpression: &&(171) at 1", "Insert InfixExpression: !=(65) into IfStatement(82) at 0", "Insert Block(81) into IfStatement(82) at 1", "Insert NullLiteral(118) into ReturnStatement(119) at 0", "Insert SimpleName: SyntheticNodes(160) into MethodInvocation(163) at 0", "Insert SimpleName: isSynthesizable(161) into MethodInvocation(163) at 1", "Insert SimpleName: node(162) into MethodInvocation(163) at 2", "Insert SimpleName: nonSyntheticScopeRoot(63) into InfixExpression: !=(65) at 0", "Insert NullLiteral(64) into InfixExpression: !=(65) at 1", "Move ExpressionStatement(77) into Block(81) at 0", "Delete SimpleName: scopeRoot(113)", "Delete SimpleName: js(114)", "Delete Assignment: =(115)", "Delete ExpressionStatement(116)"]}}], "commit_stats": [{"total_files": 29, "deleted_files": 1, "testing": "True", "maintenance": "False", "build": "False"}]}