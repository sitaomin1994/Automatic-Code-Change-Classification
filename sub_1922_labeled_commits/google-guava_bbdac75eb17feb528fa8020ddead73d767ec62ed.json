{"application": "google-guava", "csha": "bbdac75eb17feb528fa8020ddead73d767ec62ed", "files": [{"Ordering_cluster": {"actions": [{"root": "INS TagElement to Javadoc at 0", "operations": ["INS MethodRef to TagElement: @link at 0", "INS TagElement: @link to TagElement at 23", "INS SimpleName: sort to MethodRef at 1", "INS TextElement:  elements to TagElement: @code at 0", "INS TextElement: ordering; use this only when the resulting list may need further to TagElement at 3", "INS TextElement: Returns a <b>mutable</b> list containing  to TagElement at 0", "INS TextElement: modification, or may contain  to TagElement at 4", "INS TagElement to Javadoc at 0", "INS TextElement:  null to TagElement: @code at 0", "INS SimpleType: List to MethodRefParameter at 0", "INS TagElement: @code to TagElement at 5", "INS MethodRefParameter to MethodRef at 2", "INS SimpleName: List to SimpleType: List at 0", "INS SimpleName: Collections to MethodRef at 0", "INS TagElement: @code to TagElement at 1"]}, {"root": "UPDATE from  or any of its elements is to elements", "operations": ["UPD TextElement:  or any of its elements is from  or any of its elements is to elements", "UPD SimpleName: iterable from iterable to elements", "UPD SimpleName: iterable from iterable to elements", "UPD SimpleName: iterable from iterable to elements", "UPD SimpleName: iterable from iterable to elements"]}, {"root": "UPDATE from Returns a copy of the given iterable sorted by this ordering. The input is to  sorted by this", "operations": ["UPD TextElement: Returns a copy of the given iterable sorted by this ordering. The input is from Returns a copy of the given iterable sorted by this ordering. The input is to  sorted by this"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  internally copies the elements to an array, to TagElement at 21", "MOV TextElement: Returns a copy of the given iterable sorted by this ordering. The input is to TagElement at 2", "MOV TextElement: and using  to TagElement at 18", "MOV TextElement: copies. The traditional implementation of copying to an  to TagElement at 17", "MOV TextElement: performed is <i>stable</i>, meaning that such elements will appear in the to TagElement at 12", "MOV TagElement: @code to TagElement at 14", "MOV TextElement:  from the array, incurring two  to TagElement at 16", "MOV TextElement: resulting list in the same order they appeared in the input. to TagElement at 13", "MOV TextElement:  to an array, sorts the  to TagElement at 15", "MOV TextElement: elements that are duplicates according to the comparator. The sort to TagElement at 11", "MOV TextElement: not modified. The returned list is modifiable, serializable, and has random to TagElement at 6", "MOV TextElement: , this method does not discard to TagElement at 10", "MOV TextElement: access. to TagElement at 7", "MOV TextElement: <p>Unlike  to TagElement at 8", "MOV TagElement: @link to TagElement at 5", "MOV TextElement: sorts them, and dumps them back. to TagElement at 22", "MOV TagElement: @code to TagElement at 19"]}, {"root": "UPDATE from not modified. The returned list is modifiable, serializable, and has random to . The input is not modified. The", "operations": ["UPD TextElement: not modified. The returned list is modifiable, serializable, and has random from not modified. The returned list is modifiable, serializable, and has random to . The input is not modified. The"]}, {"root": "UPDATE from access. to returned list is serializable and has random access.", "operations": ["UPD TextElement: access. from access. to returned list is serializable and has random access."]}, {"root": "MOVE from TagElement", "operations": ["MOV TagElement: @link to TagElement at 9"]}, {"root": "UPDATE from resulting list in the same order they appeared in the input. to returned list in the same order they appeared in ", "operations": ["UPD TextElement: resulting list in the same order they appeared in the input. from resulting list in the same order they appeared in the input. to returned list in the same order they appeared in ", "UPD TextElement: resulting list in the same order they appeared in the input. from resulting list in the same order they appeared in the input. to returned list in the same order they appeared in "]}, {"root": "UPDATE from  a new list containing the given elements in sorted order to .", "operations": ["UPD TextElement:  a new list containing the given elements in sorted order from  a new list containing the given elements in sorted order to .", "UPD TextElement:  to an array, sorts the  from  to an array, sorts the  to .", "UPD TextElement:  to an array, sorts the  from  to an array, sorts the  to ."]}, {"root": "UPDATE from array, and returns an  to <p><b>Performance note:</b> According to our", "operations": ["UPD TextElement: array, and returns an  from array, and returns an  to <p><b>Performance note:</b> According to our", "UPD TextElement:  from the array, incurring two  from  from the array, incurring two  to <p><b>Performance note:</b> According to our"]}, {"root": "UPDATE from  view of the array, incurring  to benchmarking", "operations": ["UPD TextElement:  view of the array, incurring  from  view of the array, incurring  to benchmarking", "UPD TextElement: copies. The traditional implementation of copying to an  from copies. The traditional implementation of copying to an  to benchmarking"]}, {"root": "UPDATE from and using  to on Open JDK 7, ", "operations": ["UPD TextElement: and using  from and using  to on Open JDK 7, "]}, {"root": "UPDATE from @code to @link", "operations": ["UPD TagElement: @code from @code to @link"]}, {"root": "UPDATE from  Collections.sort to  generally performs better (in", "operations": ["UPD TextElement:  Collections.sort from  Collections.sort to  generally performs better (in"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  Collections.sort to TagElement at 20"]}, {"root": "UPDATE from  internally copies the elements to an array, to both time and space) than this method, and this method in turn generally", "operations": ["UPD TextElement:  internally copies the elements to an array, from  internally copies the elements to an array, to both time and space) than this method, and this method in turn generally"]}, {"root": "UPDATE from sorts them, and dumps them back. to performs better than copying the list and calling ", "operations": ["UPD TextElement: sorts them, and dumps them back. from sorts them, and dumps them back. to performs better than copying the list and calling "]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  a new list containing the given elements in sorted order to TagElement at 24"]}, {"root": "UPDATE from Returns an <i>immutable</i> copy of the given iterable sorted by this to Returns an <b>immutable</b> list containing ", "operations": ["UPD TextElement: Returns an <i>immutable</i> copy of the given iterable sorted by this from Returns an <i>immutable</i> copy of the given iterable sorted by this to Returns an <b>immutable</b> list containing "]}, {"root": "INS TagElement: @code to TagElement at 1", "operations": ["INS TextElement:  elements to TagElement: @code at 0", "INS TagElement: @code to TagElement at 1"]}, {"root": "INS TextElement:  sorted by this to TagElement at 2", "operations": ["INS TextElement:  sorted by this to TagElement at 2"]}, {"root": "UPDATE from one copy. In contrast, the \"traditional\" implementation of copying  to on Open JDK 7, this method is the most efficient way to make a sorted copy", "operations": ["UPD TextElement: one copy. In contrast, the \"traditional\" implementation of copying  from one copy. In contrast, the \"traditional\" implementation of copying  to on Open JDK 7, this method is the most efficient way to make a sorted copy"]}, {"root": "UPDATE from  Collections.sort to of a collection.", "operations": ["UPD TextElement:  Collections.sort from  Collections.sort to of a collection."]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  Collections.sort to TagElement at 17"]}, {"root": "UPDATE from  if  to  if any of ", "operations": ["UPD TextElement:  if  from  if  to  if any of "]}, {"root": "INS TextElement:  (or  to TagElement: @throws at 3", "operations": ["INS TextElement:  (or  to TagElement: @throws at 3"]}, {"root": "INS TagElement: @code to TagElement: @throws at 4", "operations": ["INS TagElement: @code to TagElement: @throws at 4"]}, {"root": "UPDATE from null to  itself) is null", "operations": ["UPD TextElement: null from null to  itself) is null"]}, {"root": "UPDATE from elements to array", "operations": ["UPD SimpleName: elements from elements to array", "UPD SimpleName: elements from elements to array", "UPD SimpleName: elements from elements to array", "UPD SimpleName: elements from elements to array"]}, {"root": "UPDATE from  iterable to  elements", "operations": ["UPD TextElement:  iterable from  iterable to  elements", "UPD TextElement:  iterable from  iterable to  elements", "UPD TextElement:  iterable from  iterable to  elements"]}, {"root": "INS MemberRef to TagElement: @code at 0", "operations": ["INS SimpleName: immutableSortedCopy to MemberRef at 0", "INS MemberRef to TagElement: @code at 0"]}, {"root": "MOVE from TagElement: @code", "operations": ["MOV TextElement:  or any of its elements is to TagElement: @code at 0"]}, {"root": "DEL TextElement:  Collections.sort", "operations": ["DEL TextElement:  Collections.sort"]}, {"root": "DEL TagElement", "operations": ["DEL TextElement: array, and creates an ", "DEL TagElement: @code", "DEL TagElement: @code", "DEL TextElement:  ArrayList", "DEL TextElement: <p>This implementation copies ", "DEL TagElement", "DEL TextElement:  incurs three copies, as ", "DEL TextElement:  ArrayList", "DEL TagElement: @code"]}, {"root": "DEL TagElement: @param", "operations": ["DEL TagElement: @param", "DEL SimpleName: iterable", "DEL TextElement:  the elements to be copied and sorted"]}, {"root": "DEL TagElement: @return", "operations": ["DEL TagElement: @return"]}, {"root": "DEL TextElement: <p>This implementation copies ", "operations": ["DEL TextElement: <p>This implementation copies "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  ImmutableList", "DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  iterable", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  to an ", "operations": ["DEL TextElement:  to an "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  ArrayList", "DEL TagElement: @code"]}, {"root": "DEL TextElement: , using ", "operations": ["DEL TextElement: , using "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TextElement: ,", "operations": ["DEL TextElement: ,"]}, {"root": "DEL TextElement: and using ", "operations": ["DEL TextElement: and using "]}, {"root": "DEL TagElement: @code", "operations": ["DEL TextElement:  ImmutableList.copyOf", "DEL TagElement: @code"]}, {"root": "DEL TextElement:  would perform four copies of the ", "operations": ["DEL TextElement:  would perform four copies of the "]}, {"root": "DEL TextElement: data.", "operations": ["DEL TextElement: data."]}, {"root": "DEL TagElement: @param", "operations": ["DEL TextElement:  the elements to be copied and sorted", "DEL TagElement: @param", "DEL SimpleName: iterable"]}, {"root": "DEL TagElement: @return", "operations": ["DEL TextElement:  a new immutable list containing the given elements in sorted order", "DEL TagElement: @return"]}]}}, {"Ordering_diff": {"operations": ["Insert TagElement(2479) into Javadoc(2480) at 0", "Update SimpleName: iterable(2494) to elements", "Update SimpleName: iterable(2600) to elements", "Insert TextElement: Returns a <b>mutable</b> list containing (2437) into TagElement(2479) at 0", "Insert TagElement: @code(2439) into TagElement(2479) at 1", "Update TextElement: Returns a copy of the given iterable sorted by this ordering. The input is(2437) to  sorted by this", "Move TextElement: Returns a copy of the given iterable sorted by this ordering. The input is(2437) into TagElement(2479) at 2", "Insert TextElement: ordering; use this only when the resulting list may need further(2441) into TagElement(2479) at 3", "Insert TextElement: modification, or may contain (2442) into TagElement(2479) at 4", "Insert TagElement: @code(2444) into TagElement(2479) at 5", "Update TextElement: not modified. The returned list is modifiable, serializable, and has random(2438) to . The input is not modified. The", "Move TextElement: not modified. The returned list is modifiable, serializable, and has random(2438) into TagElement(2479) at 6", "Update TextElement: access.(2439) to returned list is serializable and has random access.", "Move TextElement: access.(2439) into TagElement(2479) at 7", "Move TextElement: <p>Unlike (2440) into TagElement(2479) at 8", "Move TagElement: @link(2540) into TagElement(2479) at 9", "Move TextElement: , this method does not discard(2448) into TagElement(2479) at 10", "Move TextElement: elements that are duplicates according to the comparator. The sort(2449) into TagElement(2479) at 11", "Move TextElement: performed is <i>stable</i>, meaning that such elements will appear in the(2450) into TagElement(2479) at 12", "Update TextElement: resulting list in the same order they appeared in the input.(2451) to returned list in the same order they appeared in ", "Move TextElement: resulting list in the same order they appeared in the input.(2451) into TagElement(2479) at 13", "Move TagElement: @code(2454) into TagElement(2479) at 14", "Update TextElement:  to an array, sorts the (2455) to .", "Move TextElement:  to an array, sorts the (2455) into TagElement(2479) at 15", "Update TextElement:  from the array, incurring two (2459) to <p><b>Performance note:</b> According to our", "Move TextElement:  from the array, incurring two (2459) into TagElement(2479) at 16", "Update TextElement: copies. The traditional implementation of copying to an (2460) to benchmarking", "Move TextElement: copies. The traditional implementation of copying to an (2460) into TagElement(2479) at 17", "Update TextElement: and using (2463) to on Open JDK 7, ", "Move TextElement: and using (2463) into TagElement(2479) at 18", "Update TagElement: @code(2465) to @link", "Move TagElement: @code(2465) into TagElement(2479) at 19", "Update TextElement:  Collections.sort(2467) to  generally performs better (in", "Move TextElement:  Collections.sort(2467) into TagElement(2479) at 20", "Update TextElement:  internally copies the elements to an array,(2469) to both time and space) than this method, and this method in turn generally", "Move TextElement:  internally copies the elements to an array,(2469) into TagElement(2479) at 21", "Update TextElement: sorts them, and dumps them back.(2470) to performs better than copying the list and calling ", "Move TextElement: sorts them, and dumps them back.(2470) into TagElement(2479) at 22", "Insert TagElement: @link(2477) into TagElement(2479) at 23", "Update TextElement:  a new list containing the given elements in sorted order(2475) to .", "Move TextElement:  a new list containing the given elements in sorted order(2475) into TagElement(2479) at 24", "Update TextElement: Returns an <i>immutable</i> copy of the given iterable sorted by this(2531) to Returns an <b>immutable</b> list containing ", "Insert TagElement: @code(2536) into TagElement(2558) at 1", "Insert TextElement:  sorted by this(2537) into TagElement(2558) at 2", "Move TagElement: @link(2447) into TagElement(2558) at 5", "Update TextElement: resulting list in the same order they appeared in the input.(2544) to returned list in the same order they appeared in ", "Update TextElement:  to an array, sorts the (2548) to .", "Update TextElement: array, and returns an (2549) to <p><b>Performance note:</b> According to our", "Update TextElement:  view of the array, incurring (2552) to benchmarking", "Update TextElement: one copy. In contrast, the \"traditional\" implementation of copying (2553) to on Open JDK 7, this method is the most efficient way to make a sorted copy", "Update TextElement:  Collections.sort(2560) to of a collection.", "Move TextElement:  Collections.sort(2560) into TagElement(2558) at 17", "Update TextElement:  if (2575) to  if any of ", "Insert TextElement:  (or (2563) into TagElement: @throws(2567) at 3", "Insert TagElement: @code(2565) into TagElement: @throws(2567) at 4", "Update TextElement: null(2579) to  itself) is null", "Update SimpleName: elements(2625) to array", "Insert TextElement:  elements(2438) into TagElement: @code(2439) at 0", "Insert TextElement:  null(2443) into TagElement: @code(2444) at 0", "Update TextElement:  iterable(2453) to  elements", "Insert MemberRef(2466) into TagElement: @link(2467) at 0", "Insert MethodRef(2476) into TagElement: @link(2477) at 0", "Insert TextElement:  elements(2535) into TagElement: @code(2536) at 0", "Update TextElement:  iterable(2546) to  elements", "Update TextElement:  iterable(2576) to  elements", "Update TextElement:  or any of its elements is(2578) to elements", "Move TextElement:  or any of its elements is(2578) into TagElement: @code(2565) at 0", "Update SimpleName: elements(2609) to array", "Update SimpleName: elements(2634) to array", "Update SimpleName: elements(2640) to array", "Insert SimpleName: immutableSortedCopy(2465) into MemberRef(2466) at 0", "Insert SimpleName: Collections(2471) into MethodRef(2476) at 0", "Insert SimpleName: sort(2472) into MethodRef(2476) at 1", "Insert MethodRefParameter(2475) into MethodRef(2476) at 2", "Insert SimpleType: List(2474) into MethodRefParameter(2475) at 0", "Update SimpleName: iterable(2510) to elements", "Update SimpleName: iterable(2616) to elements", "Insert SimpleName: List(2473) into SimpleType: List(2474) at 0", "Delete TextElement:  Collections.sort(2464)", "Delete TextElement: <p>This implementation copies (2452)", "Delete TextElement: array, and creates an (2456)", "Delete TextElement:  ArrayList(2457)", "Delete TagElement: @code(2458)", "Delete TextElement:  ArrayList(2461)", "Delete TagElement: @code(2462)", "Delete TextElement:  incurs three copies, as (2466)", "Delete TagElement: @code(2468)", "Delete TagElement(2471)", "Delete SimpleName: iterable(2472)", "Delete TextElement:  the elements to be copied and sorted(2473)", "Delete TagElement: @param(2474)", "Delete TagElement: @return(2476)", "Delete TextElement: <p>This implementation copies (2545)", "Delete TextElement:  ImmutableList(2550)", "Delete TagElement: @code(2551)", "Delete TextElement:  iterable(2554)", "Delete TagElement: @code(2555)", "Delete TextElement:  to an (2556)", "Delete TextElement:  ArrayList(2557)", "Delete TagElement: @code(2558)", "Delete TextElement: , using (2559)", "Delete TagElement: @code(2561)", "Delete TextElement: ,(2562)", "Delete TextElement: and using (2563)", "Delete TextElement:  ImmutableList.copyOf(2564)", "Delete TagElement: @code(2565)", "Delete TextElement:  would perform four copies of the (2566)", "Delete TextElement: data.(2567)", "Delete SimpleName: iterable(2569)", "Delete TextElement:  the elements to be copied and sorted(2570)", "Delete TagElement: @param(2571)", "Delete TextElement:  a new immutable list containing the given elements in sorted order(2572)", "Delete TagElement: @return(2573)"]}}], "commit_stats": [{"total_files": 3, "deleted_files": 0, "testing": "True", "maintenance": "False", "build": "False"}]}