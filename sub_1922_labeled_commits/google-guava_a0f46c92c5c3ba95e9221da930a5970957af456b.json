{"application": "google-guava", "csha": "a0f46c92c5c3ba95e9221da930a5970957af456b", "files": [{"FluentIterable_cluster": {"actions": [{"root": "UPDATE from  equivalent:</b> <pre>    to  equivalent:</b> ", "operations": ["UPD TextElement:  equivalent:</b> <pre>    from  equivalent:</b> <pre>    to  equivalent:</b> "]}, {"root": "UPDATE from ... or if  to .", "operations": ["UPD TextElement: ... or if  from ... or if  to ."]}, {"root": "UPDATE from  is a class literal  to This does perform a little more work than necessary, so another option is to insert an", "operations": ["UPD TextElement:  is a class literal  from  is a class literal  to This does perform a little more work than necessary, so another option is to insert an"]}, {"root": "UPDATE from  MyType.class to unchecked cast at some later point:", "operations": ["UPD TextElement:  MyType.class from  MyType.class to unchecked cast at some later point:"]}, {"root": "MOVE from TagElement", "operations": ["MOV TextElement:  MyType.class to TagElement at 12"]}, {"root": "UPDATE from , <pre>    to <pre>", "operations": ["UPD TextElement: , <pre>    from , <pre>    to <pre>"]}, {"root": "UPDATE from Stream<T> result = (Stream) stream.filter(type::isInstance); to  stream.filter(type::isInstance).map(type::cast)", "operations": ["UPD TextElement: Stream<T> result = (Stream) stream.filter(type::isInstance); from Stream<T> result = (Stream) stream.filter(type::isInstance); to  stream.filter(type::isInstance).map(type::cast)"]}, {"root": "UPDATE from  @SuppressWarnings(\"unchecked\") // safe by runtime check to  @SuppressWarnings(\"unchecked\") // safe because of ::isInstance check", "operations": ["UPD TextElement:  @SuppressWarnings(\"unchecked\") // safe by runtime check from  @SuppressWarnings(\"unchecked\") // safe by runtime check to  @SuppressWarnings(\"unchecked\") // safe because of ::isInstance check"]}, {"root": "INS TextElement: ImmutableList<NewType> result = to TagElement: @code at 1", "operations": ["INS TextElement: ImmutableList<NewType> result = to TagElement: @code at 1"]}, {"root": "UPDATE from Stream<MyType> result = (Stream) stream.filter(e -> e instanceof MyType); to (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());", "operations": ["UPD TextElement: Stream<MyType> result = (Stream) stream.filter(e -> e instanceof MyType); from Stream<MyType> result = (Stream) stream.filter(e -> e instanceof MyType); to (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TextElement:  @SuppressWarnings(\"unchecked\") // safe by runtime check", "operations": ["DEL TextElement:  @SuppressWarnings(\"unchecked\") // safe by runtime check"]}, {"root": "DEL TextElement: </pre>", "operations": ["DEL TextElement: </pre>"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code", "DEL TextElement:  type"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TagElement: @code", "operations": ["DEL TagElement: @code"]}, {"root": "DEL TagElement: @param", "operations": ["DEL SimpleName: type", "DEL TextElement:  the type of elements desired", "DEL TagElement: @param"]}]}}, {"FluentIterable_diff": {"operations": ["Update TextElement:  equivalent:</b> <pre>   (1309) to  equivalent:</b> ", "Update TextElement: ... or if (1315) to .", "Update TextElement:  is a class literal (1318) to This does perform a little more work than necessary, so another option is to insert an", "Update TextElement:  MyType.class(1319) to unchecked cast at some later point:", "Move TextElement:  MyType.class(1319) into TagElement(1321) at 12", "Update TextElement: , <pre>   (1321) to <pre>", "Update TextElement: Stream<T> result = (Stream) stream.filter(type::isInstance);(1312) to  stream.filter(type::isInstance).map(type::cast)", "Update TextElement:  @SuppressWarnings(\"unchecked\") // safe by runtime check(1323) to  @SuppressWarnings(\"unchecked\") // safe because of ::isInstance check", "Insert TextElement: ImmutableList<NewType> result =(1317) into TagElement: @code(1319) at 1", "Update TextElement: Stream<MyType> result = (Stream) stream.filter(e -> e instanceof MyType);(1324) to (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());", "Delete TagElement: @code(1310)", "Delete TextElement:  @SuppressWarnings(\"unchecked\") // safe by runtime check(1311)", "Delete TextElement: </pre>(1314)", "Delete TextElement:  type(1316)", "Delete TagElement: @code(1317)", "Delete TagElement: @code(1320)", "Delete TagElement: @code(1322)", "Delete SimpleName: type(1328)", "Delete TextElement:  the type of elements desired(1329)", "Delete TagElement: @param(1330)"]}}], "commit_stats": [{"total_files": 1, "deleted_files": 0, "testing": "False", "maintenance": "False", "build": "False"}]}